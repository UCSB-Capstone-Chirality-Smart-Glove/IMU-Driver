
BT-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013ba0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001030  08013ce0  08013ce0  00023ce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014d10  08014d10  00024d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014d18  08014d18  00024d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014d1c  08014d1c  00024d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000348  20000008  08014d20  00030008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000350  08015068  00030350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000388  0801509d  00030388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001670  2000039c  080150ae  0003039c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a0c  080150ae  00031a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00050000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00050000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  080150ae  000401e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .comment      00000043  00000000  00000000  00040a97  2**0
                  CONTENTS, READONLY
 16 .debug_info   0003bb4c  00000000  00000000  00040ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000071d1  00000000  00000000  0007c626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000032d8  00000000  00000000  000837f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002716  00000000  00000000  00086ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002fd26  00000000  00000000  000891e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00039a81  00000000  00000000  000b8f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00109f58  00000000  00000000  000f298d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000ead0  00000000  00000000  001fc8e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000004f  00000000  00000000  0020b3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000039c 	.word	0x2000039c
 800015c:	00000000 	.word	0x00000000
 8000160:	08013cc8 	.word	0x08013cc8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200003a0 	.word	0x200003a0
 800017c:	08013cc8 	.word	0x08013cc8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000ef4:	b5b0      	push	{r4, r5, r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <APPD_EnableCPU2+0x34>)
 8000efc:	1d3c      	adds	r4, r7, #4
 8000efe:	461d      	mov	r5, r3
 8000f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f08:	c403      	stmia	r4!, {r0, r1}
 8000f0a:	8022      	strh	r2, [r4, #0]
 8000f0c:	3402      	adds	r4, #2
 8000f0e:	0c13      	lsrs	r3, r2, #16
 8000f10:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000f12:	f00d fbad 	bl	800e670 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f00c fe3e 	bl	800db9a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000f1e:	bf00      	nop
}
 8000f20:	3720      	adds	r7, #32
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bdb0      	pop	{r4, r5, r7, pc}
 8000f26:	bf00      	nop
 8000f28:	08013ce0 	.word	0x08013ce0

08000f2c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <LL_C2_PWR_SetPowerMode+0x28>)
 8000f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f3a:	f023 0207 	bic.w	r2, r3, #7
 8000f3e:	4905      	ldr	r1, [pc, #20]	; (8000f54 <LL_C2_PWR_SetPowerMode+0x28>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	58000400 	.word	0x58000400

08000f58 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <LL_EXTI_EnableIT_32_63+0x24>)
 8000f62:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000f66:	4905      	ldr	r1, [pc, #20]	; (8000f7c <LL_EXTI_EnableIT_32_63+0x24>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	58000800 	.word	0x58000800

08000f80 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000f8e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f9a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	cafecafe 	.word	0xcafecafe

08000fbc <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000fce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	608b      	str	r3, [r1, #8]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <LL_DBGMCU_GetDeviceID+0x18>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e0042000 	.word	0xe0042000

08001000 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <LL_DBGMCU_GetRevisionID+0x18>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	0c1b      	lsrs	r3, r3, #16
 800100a:	b29b      	uxth	r3, r3
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e0042000 	.word	0xe0042000

0800101c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <LL_LPM_EnableSleep+0x1c>)
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	4a04      	ldr	r2, [pc, #16]	; (8001038 <LL_LPM_EnableSleep+0x1c>)
 8001026:	f023 0304 	bic.w	r3, r3, #4
 800102a:	6113      	str	r3, [r2, #16]
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	22ff      	movs	r2, #255	; 0xff
 8001048:	625a      	str	r2, [r3, #36]	; 0x24
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	22ca      	movs	r2, #202	; 0xca
 8001062:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2253      	movs	r2, #83	; 0x53
 8001068:	625a      	str	r2, [r3, #36]	; 0x24
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f023 0207 	bic.w	r2, r3, #7
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	431a      	orrs	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	609a      	str	r2, [r3, #8]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <MX_APPE_Config+0x18>)
 80010a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010a6:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80010a8:	f000 f824 	bl	80010f4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80010ac:	f000 f829 	bl	8001102 <Config_HSE>

  return;
 80010b0:	bf00      	nop
}
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	58004000 	.word	0x58004000

080010b8 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80010bc:	f000 f835 	bl	800112a <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80010c0:	f000 f84e 	bl	8001160 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80010c4:	4903      	ldr	r1, [pc, #12]	; (80010d4 <MX_APPE_Init+0x1c>)
 80010c6:	2000      	movs	r0, #0
 80010c8:	f004 fe4c 	bl	8005d64 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80010cc:	f000 f856 	bl	800117c <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80010d0:	bf00      	nop
}
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200010a8 	.word	0x200010a8

080010d8 <Init_Smps>:

void Init_Smps(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80010dc:	bf00      	nop
}
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <Init_Exti>:

void Init_Exti(void)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80010ea:	2050      	movs	r0, #80	; 0x50
 80010ec:	f7ff ff34 	bl	8000f58 <LL_EXTI_EnableIT_32_63>

  return;
 80010f0:	bf00      	nop
}
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80010f8:	bf00      	nop
}
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001108:	2000      	movs	r0, #0
 800110a:	f00d fb3d 	bl	800e788 <OTP_Read>
 800110e:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d005      	beq.n	8001122 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	799b      	ldrb	r3, [r3, #6]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ff30 	bl	8000f80 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001120:	bf00      	nop
 8001122:	bf00      	nop
}
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <System_Init>:

static void System_Init(void)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	af00      	add	r7, sp, #0
  Init_Smps();
 800112e:	f7ff ffd3 	bl	80010d8 <Init_Smps>

  Init_Exti();
 8001132:	f7ff ffd8 	bl	80010e6 <Init_Exti>

  Init_Rtc();
 8001136:	f000 f803 	bl	8001140 <Init_Rtc>

  return;
 800113a:	bf00      	nop
}
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <Init_Rtc+0x1c>)
 8001146:	f7ff ff86 	bl	8001056 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800114a:	2100      	movs	r1, #0
 800114c:	4803      	ldr	r0, [pc, #12]	; (800115c <Init_Rtc+0x1c>)
 800114e:	f7ff ff92 	bl	8001076 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001152:	4802      	ldr	r0, [pc, #8]	; (800115c <Init_Rtc+0x1c>)
 8001154:	f7ff ff72 	bl	800103c <LL_RTC_EnableWriteProtection>

  return;
 8001158:	bf00      	nop
}
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40002800 	.word	0x40002800

08001160 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001164:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001168:	f7ff ff28 	bl	8000fbc <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800116c:	f00e fd54 	bl	800fc18 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001170:	2004      	movs	r0, #4
 8001172:	f7ff fedb 	bl	8000f2c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001176:	bf00      	nop
}
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 8001182:	f00d f8bf 	bl	800e304 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001186:	4a11      	ldr	r2, [pc, #68]	; (80011cc <appe_Tl_Init+0x50>)
 8001188:	2100      	movs	r1, #0
 800118a:	2004      	movs	r0, #4
 800118c:	f00e fe82 	bl	800fe94 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <appe_Tl_Init+0x54>)
 8001192:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <appe_Tl_Init+0x58>)
 8001196:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001198:	463b      	mov	r3, r7
 800119a:	4619      	mov	r1, r3
 800119c:	480e      	ldr	r0, [pc, #56]	; (80011d8 <appe_Tl_Init+0x5c>)
 800119e:	f00c ff73 	bl	800e088 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <appe_Tl_Init+0x60>)
 80011a4:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <appe_Tl_Init+0x64>)
 80011a8:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <appe_Tl_Init+0x68>)
 80011ac:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80011ae:	f240 533c 	movw	r3, #1340	; 0x53c
 80011b2:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80011b4:	f107 0308 	add.w	r3, r7, #8
 80011b8:	4618      	mov	r0, r3
 80011ba:	f00d f9e5 	bl	800e588 <TL_MM_Init>

  TL_Enable();
 80011be:	f00d f89b 	bl	800e2f8 <TL_Enable>

  return;
 80011c2:	bf00      	nop
}
 80011c4:	3720      	adds	r7, #32
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	0800e0c1 	.word	0x0800e0c1
 80011d0:	20030734 	.word	0x20030734
 80011d4:	080011e9 	.word	0x080011e9
 80011d8:	08001201 	.word	0x08001201
 80011dc:	2003094c 	.word	0x2003094c
 80011e0:	20030840 	.word	0x20030840
 80011e4:	200301f8 	.word	0x200301f8

080011e8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80011f2:	bf00      	nop
}
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	330b      	adds	r3, #11
 800120e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	b29b      	uxth	r3, r3
 8001216:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800121a:	2b07      	cmp	r3, #7
 800121c:	d81f      	bhi.n	800125e <APPE_SysUserEvtRx+0x5e>
 800121e:	a201      	add	r2, pc, #4	; (adr r2, 8001224 <APPE_SysUserEvtRx+0x24>)
 8001220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001224:	08001245 	.word	0x08001245
 8001228:	08001257 	.word	0x08001257
 800122c:	0800125f 	.word	0x0800125f
 8001230:	0800125f 	.word	0x0800125f
 8001234:	0800125f 	.word	0x0800125f
 8001238:	0800125f 	.word	0x0800125f
 800123c:	0800125f 	.word	0x0800125f
 8001240:	0800125f 	.word	0x0800125f
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	4618      	mov	r0, r3
 800124a:	f00c fcd3 	bl	800dbf4 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 f81b 	bl	800128a <APPE_SysEvtReadyProcessing>
    break;
 8001254:	e004      	b.n	8001260 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 f806 	bl	8001268 <APPE_SysEvtError>
    break;
 800125c:	e000      	b.n	8001260 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 800125e:	bf00      	nop
  }

  return;
 8001260:	bf00      	nop
}
 8001262:	3720      	adds	r7, #32
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	330b      	adds	r3, #11
 8001276:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	3302      	adds	r3, #2
 800127c:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800127e:	bf00      	nop
}
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b08a      	sub	sp, #40	; 0x28
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001292:	f107 0308 	add.w	r3, r7, #8
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	330b      	adds	r3, #11
 80012ae:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	3302      	adds	r3, #2
 80012b4:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d11d      	bne.n	80012fa <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80012be:	f7ff fe19 	bl	8000ef4 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80012c2:	230f      	movs	r3, #15
 80012c4:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80012c6:	237f      	movs	r3, #127	; 0x7f
 80012c8:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80012ca:	f7ff fe99 	bl	8001000 <LL_DBGMCU_GetRevisionID>
 80012ce:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80012d6:	f7ff fe85 	bl	8000fe4 <LL_DBGMCU_GetDeviceID>
 80012da:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80012dc:	6a3b      	ldr	r3, [r7, #32]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	4618      	mov	r0, r3
 80012e8:	f00c fc6e 	bl	800dbc8 <SHCI_C2_Config>

    APP_BLE_Init();
 80012ec:	f00d fb56 	bl	800e99c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80012f0:	2100      	movs	r1, #0
 80012f2:	2001      	movs	r0, #1
 80012f4:	f00e fca2 	bl	800fc3c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80012f8:	e007      	b.n	800130a <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d103      	bne.n	800130a <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
  return;
 8001308:	bf00      	nop
 800130a:	bf00      	nop
}
 800130c:	3728      	adds	r7, #40	; 0x28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800131a:	f006 f9d7 	bl	80076cc <HAL_GetTick>
 800131e:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800132a:	d00a      	beq.n	8001342 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800132c:	f006 f9e6 	bl	80076fc <HAL_GetTickFreq>
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800133a:	e002      	b.n	8001342 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800133c:	f7ff fe6e 	bl	800101c <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8001340:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001342:	f006 f9c3 	bl	80076cc <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	429a      	cmp	r2, r3
 8001350:	d8f4      	bhi.n	800133c <HAL_Delay+0x2a>
  }
}
 8001352:	bf00      	nop
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <UTIL_SEQ_Idle>:

  /* USER CODE END MX_APPE_Process_2 */
}

void UTIL_SEQ_Idle(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001360:	bf00      	nop
}
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f00e fc90 	bl	800fc9c <UTIL_SEQ_Run>
  return;
 800137c:	bf00      	nop
}
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800138c:	2100      	movs	r1, #0
 800138e:	2004      	movs	r0, #4
 8001390:	f00e fda2 	bl	800fed8 <UTIL_SEQ_SetTask>
  return;
 8001394:	bf00      	nop
}
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80013a4:	2002      	movs	r0, #2
 80013a6:	f00e fe03 	bl	800ffb0 <UTIL_SEQ_SetEvt>
  return;
 80013aa:	bf00      	nop
}
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80013ba:	2002      	movs	r0, #2
 80013bc:	f00e fe18 	bl	800fff0 <UTIL_SEQ_WaitEvt>
  return;
 80013c0:	bf00      	nop
}
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <bmi3_init>:
/*!
 * @brief This API is the entry point for bmi3 sensor. It reads and validates the
 * chip-id of the sensor.
 */
int8_t bmi3_init(struct bmi3_dev *dev)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to assign chip id */
    uint8_t chip_id[2] = { 0 };
 80013d0:	2300      	movs	r3, #0
 80013d2:	81bb      	strh	r3, [r7, #12]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 feaf 	bl	8002138 <null_ptr_check>
 80013da:	4603      	mov	r3, r0
 80013dc:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI3_OK)
 80013de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10d      	bne.n	8001402 <bmi3_init+0x3a>
    {
        dev->chip_id = 0;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]

        /* An extra dummy byte is read during SPI read */
        if (dev->intf == BMI3_SPI_INTF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7a5b      	ldrb	r3, [r3, #9]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d103      	bne.n	80013fc <bmi3_init+0x34>
        {
            dev->dummy_byte = 1;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	72da      	strb	r2, [r3, #11]
 80013fa:	e002      	b.n	8001402 <bmi3_init+0x3a>
        }
        else
        {
            dev->dummy_byte = 2;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2202      	movs	r2, #2
 8001400:	72da      	strb	r2, [r3, #11]
        }
    }

    if (rslt == BMI3_OK)
 8001402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d118      	bne.n	800143c <bmi3_init+0x74>
    {
        /* Perform soft-reset to bring all register values to their default values */
        rslt = bmi3_soft_reset(dev);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 f8d4 	bl	80015b8 <bmi3_soft_reset>
 8001410:	4603      	mov	r3, r0
 8001412:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8001414:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d10f      	bne.n	800143c <bmi3_init+0x74>
        {
            /* Read chip-id of the BMI3 sensor */
            rslt = bmi3_get_regs(BMI3_REG_CHIP_ID, chip_id, 2, dev);
 800141c:	f107 010c 	add.w	r1, r7, #12
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2202      	movs	r2, #2
 8001424:	2000      	movs	r0, #0
 8001426:	f000 f821 	bl	800146c <bmi3_get_regs>
 800142a:	4603      	mov	r3, r0
 800142c:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI3_OK)
 800142e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d102      	bne.n	800143c <bmi3_init+0x74>
            {
                dev->chip_id = chip_id[0];
 8001436:	7b3a      	ldrb	r2, [r7, #12]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (rslt == BMI3_OK)
 800143c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10d      	bne.n	8001460 <bmi3_init+0x98>
    {
        if (((chip_id[1] & BMI3_REV_ID_MASK) >> BMI3_REV_ID_POS) == BMI3_ENABLE)
 8001444:	7b7b      	ldrb	r3, [r7, #13]
 8001446:	091b      	lsrs	r3, r3, #4
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b01      	cmp	r3, #1
 800144c:	d104      	bne.n	8001458 <bmi3_init+0x90>
        {
            dev->accel_bit_width = BMI3_ACC_DP_OFF_XYZ_14_BIT_MASK;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001454:	839a      	strh	r2, [r3, #28]
 8001456:	e003      	b.n	8001460 <bmi3_init+0x98>
        }
        else
        {
            dev->accel_bit_width = BMI3_ACC_DP_OFF_XYZ_13_BIT_MASK;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800145e:	839a      	strh	r2, [r3, #28]
        }
    }

    return rslt;
 8001460:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <bmi3_get_regs>:
 * @note For most of the registers auto address increment applies, with the
 * exception of a few special registers, which trap the address. For e.g.,
 * Register address - 0x03.
 */
int8_t bmi3_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, struct bmi3_dev *dev)
{
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b0a7      	sub	sp, #156	; 0x9c
 8001470:	af00      	add	r7, sp, #0
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4603      	mov	r3, r0
 8001478:	73fb      	strb	r3, [r7, #15]
 800147a:	4613      	mov	r3, r2
 800147c:	81bb      	strh	r3, [r7, #12]

    /* Variable to define temporary buffer */
    uint8_t temp_buf[BMI3_MAX_LEN];

    /* Variable to define loop */
    uint16_t index = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 fe57 	bl	8002138 <null_ptr_check>
 800148a:	4603      	mov	r3, r0
 800148c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    if ((rslt == BMI3_OK) && (data != NULL))
 8001490:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 8001494:	2b00      	cmp	r3, #0
 8001496:	d145      	bne.n	8001524 <bmi3_get_regs+0xb8>
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d042      	beq.n	8001524 <bmi3_get_regs+0xb8>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI3_SPI_INTF)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	7a5b      	ldrb	r3, [r3, #9]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d103      	bne.n	80014ae <bmi3_get_regs+0x42>
        {
            reg_addr = (reg_addr | BMI3_SPI_RD_MASK);
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014ac:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, temp_buf, len + dev->dummy_byte, dev->intf_ptr);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691c      	ldr	r4, [r3, #16]
 80014b2:	89bb      	ldrh	r3, [r7, #12]
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	7ad2      	ldrb	r2, [r2, #11]
 80014b8:	4413      	add	r3, r2
 80014ba:	461a      	mov	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f107 0114 	add.w	r1, r7, #20
 80014c4:	7bf8      	ldrb	r0, [r7, #15]
 80014c6:	47a0      	blx	r4
 80014c8:	4603      	mov	r3, r0
 80014ca:	461a      	mov	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	729a      	strb	r2, [r3, #10]
        dev->delay_us(2, dev->intf_ptr);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6852      	ldr	r2, [r2, #4]
 80014d8:	4611      	mov	r1, r2
 80014da:	2002      	movs	r0, #2
 80014dc:	4798      	blx	r3

        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d119      	bne.n	800151c <bmi3_get_regs+0xb0>
        {
            /* Read the data from the position next to dummy byte */
            while (index < len)
 80014e8:	e012      	b.n	8001510 <bmi3_get_regs+0xa4>
            {
                data[index] = temp_buf[index + dev->dummy_byte];
 80014ea:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	7ad2      	ldrb	r2, [r2, #11]
 80014f2:	441a      	add	r2, r3
 80014f4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	440b      	add	r3, r1
 80014fc:	3298      	adds	r2, #152	; 0x98
 80014fe:	443a      	add	r2, r7
 8001500:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 8001504:	701a      	strb	r2, [r3, #0]
                index++;
 8001506:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800150a:	3301      	adds	r3, #1
 800150c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
            while (index < len)
 8001510:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8001514:	89bb      	ldrh	r3, [r7, #12]
 8001516:	429a      	cmp	r2, r3
 8001518:	d3e7      	bcc.n	80014ea <bmi3_get_regs+0x7e>
        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 800151a:	e006      	b.n	800152a <bmi3_get_regs+0xbe>
            }
        }
        else
        {
            rslt = BMI3_E_COM_FAIL;
 800151c:	23fe      	movs	r3, #254	; 0xfe
 800151e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 8001522:	e002      	b.n	800152a <bmi3_get_regs+0xbe>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001524:	23ff      	movs	r3, #255	; 0xff
 8001526:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    }

    return rslt;
 800152a:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 800152e:	4618      	mov	r0, r3
 8001530:	379c      	adds	r7, #156	; 0x9c
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}

08001536 <bmi3_set_regs>:

/*!
 * @brief This API writes data to the given register address of bmi3 sensor.
 */
int8_t bmi3_set_regs(uint8_t reg_addr, const uint8_t *data, uint16_t len, struct bmi3_dev *dev)
{
 8001536:	b590      	push	{r4, r7, lr}
 8001538:	b087      	sub	sp, #28
 800153a:	af00      	add	r7, sp, #0
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	4603      	mov	r3, r0
 8001542:	73fb      	strb	r3, [r7, #15]
 8001544:	4613      	mov	r3, r2
 8001546:	81bb      	strh	r3, [r7, #12]
    /* Variable to store result of API */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 fdf5 	bl	8002138 <null_ptr_check>
 800154e:	4603      	mov	r3, r0
 8001550:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (data != NULL))
 8001552:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d125      	bne.n	80015a6 <bmi3_set_regs+0x70>
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d022      	beq.n	80015a6 <bmi3_set_regs+0x70>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI3_SPI_INTF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7a5b      	ldrb	r3, [r3, #9]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d103      	bne.n	8001570 <bmi3_set_regs+0x3a>
        {
            reg_addr = (reg_addr & BMI3_SPI_WR_MASK);
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800156e:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->write(reg_addr, data, len, dev->intf_ptr);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	695c      	ldr	r4, [r3, #20]
 8001574:	89ba      	ldrh	r2, [r7, #12]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	7bf8      	ldrb	r0, [r7, #15]
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	47a0      	blx	r4
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	729a      	strb	r2, [r3, #10]
        dev->delay_us(2, dev->intf_ptr);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6852      	ldr	r2, [r2, #4]
 8001590:	4611      	mov	r1, r2
 8001592:	2002      	movs	r0, #2
 8001594:	4798      	blx	r3

        if (dev->intf_rslt != BMI3_INTF_RET_SUCCESS)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d004      	beq.n	80015aa <bmi3_set_regs+0x74>
        {
            rslt = BMI3_E_COM_FAIL;
 80015a0:	23fe      	movs	r3, #254	; 0xfe
 80015a2:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMI3_INTF_RET_SUCCESS)
 80015a4:	e001      	b.n	80015aa <bmi3_set_regs+0x74>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80015a6:	23ff      	movs	r3, #255	; 0xff
 80015a8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80015aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	371c      	adds	r7, #28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd90      	pop	{r4, r7, pc}
	...

080015b8 <bmi3_soft_reset>:
/*!
 * @brief This API resets bmi3 sensor. All registers are overwritten with
 * their default values.
 */
int8_t bmi3_soft_reset(struct bmi3_dev *dev)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to read the dummy byte */
    uint8_t dummy_byte[2] = { 0 };
 80015c0:	2300      	movs	r3, #0
 80015c2:	83bb      	strh	r3, [r7, #28]

    /* Variable to store feature data array */
    uint8_t feature_data[2] = { 0x2c, 0x01 };
 80015c4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80015c8:	833b      	strh	r3, [r7, #24]

    /* Variable to enable feature engine bit */
    uint8_t feature_engine_en[2] = { BMI3_ENABLE, 0 };
 80015ca:	2301      	movs	r3, #1
 80015cc:	82bb      	strh	r3, [r7, #20]

    /* Variable to store status value for feature engine enable */
    uint8_t reg_data[2] = { 0 };
 80015ce:	2300      	movs	r3, #0
 80015d0:	823b      	strh	r3, [r7, #16]

    /* Array variable to store feature IO status */
    uint8_t feature_io_status[2] = { BMI3_ENABLE, 0 };
 80015d2:	2301      	movs	r3, #1
 80015d4:	81bb      	strh	r3, [r7, #12]

    uint8_t loop = 1;
 80015d6:	2301      	movs	r3, #1
 80015d8:	77bb      	strb	r3, [r7, #30]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 fdac 	bl	8002138 <null_ptr_check>
 80015e0:	4603      	mov	r3, r0
 80015e2:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMI3_OK)
 80015e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d16f      	bne.n	80016cc <bmi3_soft_reset+0x114>
    {
        /* Reset bmi3 device */
        rslt = bmi3_set_command_register(BMI3_CMD_SOFT_RESET, dev);
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	f64d 60af 	movw	r0, #57007	; 0xdeaf
 80015f2:	f000 f873 	bl	80016dc <bmi3_set_command_register>
 80015f6:	4603      	mov	r3, r0
 80015f8:	77fb      	strb	r3, [r7, #31]
        dev->delay_us(BMI3_SOFT_RESET_DELAY, dev->intf_ptr);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6852      	ldr	r2, [r2, #4]
 8001602:	4611      	mov	r1, r2
 8001604:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001608:	4798      	blx	r3

        /* Performing a dummy read after a soft-reset */
        if ((rslt == BMI3_OK) && (dev->intf == BMI3_SPI_INTF))
 800160a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10c      	bne.n	800162c <bmi3_soft_reset+0x74>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	7a5b      	ldrb	r3, [r3, #9]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d108      	bne.n	800162c <bmi3_soft_reset+0x74>
        {
            rslt = bmi3_get_regs(BMI3_REG_CHIP_ID, dummy_byte, 2, dev);
 800161a:	f107 011c 	add.w	r1, r7, #28
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2202      	movs	r2, #2
 8001622:	2000      	movs	r0, #0
 8001624:	f7ff ff22 	bl	800146c <bmi3_get_regs>
 8001628:	4603      	mov	r3, r0
 800162a:	77fb      	strb	r3, [r7, #31]
        }

        /* Enabling Feature engine */
        if (rslt == BMI3_OK)
 800162c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d108      	bne.n	8001646 <bmi3_soft_reset+0x8e>
        {
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_IO2, feature_data, 2, dev);
 8001634:	f107 0118 	add.w	r1, r7, #24
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2202      	movs	r2, #2
 800163c:	2012      	movs	r0, #18
 800163e:	f7ff ff7a 	bl	8001536 <bmi3_set_regs>
 8001642:	4603      	mov	r3, r0
 8001644:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMI3_OK)
 8001646:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d108      	bne.n	8001660 <bmi3_soft_reset+0xa8>
        {
            /* Enabling feature status bit */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_IO_STATUS, feature_io_status, 2, dev);
 800164e:	f107 010c 	add.w	r1, r7, #12
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2202      	movs	r2, #2
 8001656:	2014      	movs	r0, #20
 8001658:	f7ff ff6d 	bl	8001536 <bmi3_set_regs>
 800165c:	4603      	mov	r3, r0
 800165e:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMI3_OK)
 8001660:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d108      	bne.n	800167a <bmi3_soft_reset+0xc2>
        {
            /* Enable feature engine bit */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_CTRL, feature_engine_en, 2, dev);
 8001668:	f107 0114 	add.w	r1, r7, #20
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2202      	movs	r2, #2
 8001670:	2040      	movs	r0, #64	; 0x40
 8001672:	f7ff ff60 	bl	8001536 <bmi3_set_regs>
 8001676:	4603      	mov	r3, r0
 8001678:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMI3_OK)
 800167a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d124      	bne.n	80016cc <bmi3_soft_reset+0x114>
        {
            /* Checking the status bit for feature engine enable */
            while (loop <= 10)
 8001682:	e020      	b.n	80016c6 <bmi3_soft_reset+0x10e>
            {
                dev->delay_us(100000, dev->intf_ptr);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6852      	ldr	r2, [r2, #4]
 800168c:	4611      	mov	r1, r2
 800168e:	4812      	ldr	r0, [pc, #72]	; (80016d8 <bmi3_soft_reset+0x120>)
 8001690:	4798      	blx	r3

                rslt = bmi3_get_regs(BMI3_REG_FEATURE_IO1, reg_data, 2, dev);
 8001692:	f107 0110 	add.w	r1, r7, #16
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2202      	movs	r2, #2
 800169a:	2011      	movs	r0, #17
 800169c:	f7ff fee6 	bl	800146c <bmi3_get_regs>
 80016a0:	4603      	mov	r3, r0
 80016a2:	77fb      	strb	r3, [r7, #31]

                if (rslt == BMI3_OK)
 80016a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d109      	bne.n	80016c0 <bmi3_soft_reset+0x108>
                {
                    if (reg_data[0] & BMI3_FEATURE_ENGINE_ENABLE_MASK)
 80016ac:	7c3b      	ldrb	r3, [r7, #16]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d002      	beq.n	80016bc <bmi3_soft_reset+0x104>
                    {
                        rslt = BMI3_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	77fb      	strb	r3, [r7, #31]

                        break;
 80016ba:	e007      	b.n	80016cc <bmi3_soft_reset+0x114>
                    }
                    else
                    {
                        rslt = BMI3_E_FEATURE_ENGINE_STATUS;
 80016bc:	23f2      	movs	r3, #242	; 0xf2
 80016be:	77fb      	strb	r3, [r7, #31]
                    }
                }

                loop++;
 80016c0:	7fbb      	ldrb	r3, [r7, #30]
 80016c2:	3301      	adds	r3, #1
 80016c4:	77bb      	strb	r3, [r7, #30]
            while (loop <= 10)
 80016c6:	7fbb      	ldrb	r3, [r7, #30]
 80016c8:	2b0a      	cmp	r3, #10
 80016ca:	d9db      	bls.n	8001684 <bmi3_soft_reset+0xcc>
            }
        }
    }

    return rslt;
 80016cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3720      	adds	r7, #32
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	000186a0 	.word	0x000186a0

080016dc <bmi3_set_command_register>:

/*!
 * @brief This API writes the available sensor specific commands to the sensor.
 */
int8_t bmi3_set_command_register(uint16_t command, struct bmi3_dev *dev)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	80fb      	strh	r3, [r7, #6]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array variable to store command value */
    uint8_t reg_data[2] = { 0 };
 80016e8:	2300      	movs	r3, #0
 80016ea:	81bb      	strh	r3, [r7, #12]

    reg_data[0] = (uint8_t)(command & BMI3_SET_LOW_BYTE);
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	733b      	strb	r3, [r7, #12]
    reg_data[1] = (uint8_t)((command & BMI3_SET_HIGH_BYTE) >> 8);
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	737b      	strb	r3, [r7, #13]

    /* Set the command in the command register */
    rslt = bmi3_set_regs(BMI3_REG_CMD, reg_data, 2, dev);
 80016fc:	f107 010c 	add.w	r1, r7, #12
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	2202      	movs	r2, #2
 8001704:	207e      	movs	r0, #126	; 0x7e
 8001706:	f7ff ff16 	bl	8001536 <bmi3_set_regs>
 800170a:	4603      	mov	r3, r0
 800170c:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <bmi3_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi3_set_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	460b      	mov	r3, r1
 8001726:	607a      	str	r2, [r7, #4]
 8001728:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 fd04 	bl	8002138 <null_ptr_check>
 8001730:	4603      	mov	r3, r0
 8001732:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 8001734:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001738:	2b00      	cmp	r3, #0
 800173a:	f040 80f1 	bne.w	8001920 <bmi3_set_sensor_config+0x204>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80ed 	beq.w	8001920 <bmi3_set_sensor_config+0x204>
    {
        for (loop = 0; loop < n_sens; loop++)
 8001746:	2300      	movs	r3, #0
 8001748:	75bb      	strb	r3, [r7, #22]
 800174a:	e0e3      	b.n	8001914 <bmi3_set_sensor_config+0x1f8>
        {
            switch (sens_cfg[loop].type)
 800174c:	7dbb      	ldrb	r3, [r7, #22]
 800174e:	222e      	movs	r2, #46	; 0x2e
 8001750:	fb02 f303 	mul.w	r3, r2, r3
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	4413      	add	r3, r2
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b0c      	cmp	r3, #12
 800175c:	f200 80d4 	bhi.w	8001908 <bmi3_set_sensor_config+0x1ec>
 8001760:	a201      	add	r2, pc, #4	; (adr r2, 8001768 <bmi3_set_sensor_config+0x4c>)
 8001762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001766:	bf00      	nop
 8001768:	0800179d 	.word	0x0800179d
 800176c:	080017b9 	.word	0x080017b9
 8001770:	0800180d 	.word	0x0800180d
 8001774:	080017d5 	.word	0x080017d5
 8001778:	080017f1 	.word	0x080017f1
 800177c:	0800187d 	.word	0x0800187d
 8001780:	08001845 	.word	0x08001845
 8001784:	08001861 	.word	0x08001861
 8001788:	08001829 	.word	0x08001829
 800178c:	08001899 	.word	0x08001899
 8001790:	080018b5 	.word	0x080018b5
 8001794:	080018d1 	.word	0x080018d1
 8001798:	080018ed 	.word	0x080018ed
            {
                case BMI3_ACCEL:
                    rslt = set_accel_config(&sens_cfg[loop].cfg.acc, dev);
 800179c:	7dbb      	ldrb	r3, [r7, #22]
 800179e:	222e      	movs	r2, #46	; 0x2e
 80017a0:	fb02 f303 	mul.w	r3, r2, r3
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	3302      	adds	r3, #2
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 f9cb 	bl	8001b48 <set_accel_config>
 80017b2:	4603      	mov	r3, r0
 80017b4:	75fb      	strb	r3, [r7, #23]
                    break;
 80017b6:	e0aa      	b.n	800190e <bmi3_set_sensor_config+0x1f2>

                case BMI3_GYRO:
                    rslt = set_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 80017b8:	7dbb      	ldrb	r3, [r7, #22]
 80017ba:	222e      	movs	r2, #46	; 0x2e
 80017bc:	fb02 f303 	mul.w	r3, r2, r3
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	4413      	add	r3, r2
 80017c4:	3302      	adds	r3, #2
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fb60 	bl	8001e8e <set_gyro_config>
 80017ce:	4603      	mov	r3, r0
 80017d0:	75fb      	strb	r3, [r7, #23]
                    break;
 80017d2:	e09c      	b.n	800190e <bmi3_set_sensor_config+0x1f2>

                case BMI3_ANY_MOTION:
                    rslt = set_any_motion_config(&sens_cfg[loop].cfg.any_motion, dev);
 80017d4:	7dbb      	ldrb	r3, [r7, #22]
 80017d6:	222e      	movs	r2, #46	; 0x2e
 80017d8:	fb02 f303 	mul.w	r3, r2, r3
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	4413      	add	r3, r2
 80017e0:	3302      	adds	r3, #2
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 fd5b 	bl	80022a0 <set_any_motion_config>
 80017ea:	4603      	mov	r3, r0
 80017ec:	75fb      	strb	r3, [r7, #23]
                    break;
 80017ee:	e08e      	b.n	800190e <bmi3_set_sensor_config+0x1f2>

                case BMI3_NO_MOTION:
                    rslt = set_no_motion_config(&sens_cfg[loop].cfg.no_motion, dev);
 80017f0:	7dbb      	ldrb	r3, [r7, #22]
 80017f2:	222e      	movs	r2, #46	; 0x2e
 80017f4:	fb02 f303 	mul.w	r3, r2, r3
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	4413      	add	r3, r2
 80017fc:	3302      	adds	r3, #2
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4618      	mov	r0, r3
 8001802:	f000 fec4 	bl	800258e <set_no_motion_config>
 8001806:	4603      	mov	r3, r0
 8001808:	75fb      	strb	r3, [r7, #23]
                    break;
 800180a:	e080      	b.n	800190e <bmi3_set_sensor_config+0x1f2>

                case BMI3_SIG_MOTION:
                    rslt = set_sig_motion_config(&sens_cfg[loop].cfg.sig_motion, dev);
 800180c:	7dbb      	ldrb	r3, [r7, #22]
 800180e:	222e      	movs	r2, #46	; 0x2e
 8001810:	fb02 f303 	mul.w	r3, r2, r3
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	4413      	add	r3, r2
 8001818:	3302      	adds	r3, #2
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	4618      	mov	r0, r3
 800181e:	f001 f921 	bl	8002a64 <set_sig_motion_config>
 8001822:	4603      	mov	r3, r0
 8001824:	75fb      	strb	r3, [r7, #23]
                    break;
 8001826:	e072      	b.n	800190e <bmi3_set_sensor_config+0x1f2>

                case BMI3_FLAT:
                    rslt = set_flat_config(&sens_cfg[loop].cfg.flat, dev);
 8001828:	7dbb      	ldrb	r3, [r7, #22]
 800182a:	222e      	movs	r2, #46	; 0x2e
 800182c:	fb02 f303 	mul.w	r3, r2, r3
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	3302      	adds	r3, #2
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4618      	mov	r0, r3
 800183a:	f001 f801 	bl	8002840 <set_flat_config>
 800183e:	4603      	mov	r3, r0
 8001840:	75fb      	strb	r3, [r7, #23]
                    break;
 8001842:	e064      	b.n	800190e <bmi3_set_sensor_config+0x1f2>

                case BMI3_TILT:
                    rslt = set_tilt_config(&sens_cfg[loop].cfg.tilt, dev);
 8001844:	7dbb      	ldrb	r3, [r7, #22]
 8001846:	222e      	movs	r2, #46	; 0x2e
 8001848:	fb02 f303 	mul.w	r3, r2, r3
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	3302      	adds	r3, #2
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4618      	mov	r0, r3
 8001856:	f001 fa39 	bl	8002ccc <set_tilt_config>
 800185a:	4603      	mov	r3, r0
 800185c:	75fb      	strb	r3, [r7, #23]
                    break;
 800185e:	e056      	b.n	800190e <bmi3_set_sensor_config+0x1f2>

                case BMI3_ORIENTATION:
                    rslt = set_orientation_config(&sens_cfg[loop].cfg.orientation, dev);
 8001860:	7dbb      	ldrb	r3, [r7, #22]
 8001862:	222e      	movs	r2, #46	; 0x2e
 8001864:	fb02 f303 	mul.w	r3, r2, r3
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	4413      	add	r3, r2
 800186c:	3302      	adds	r3, #2
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	4618      	mov	r0, r3
 8001872:	f001 fb1a 	bl	8002eaa <set_orientation_config>
 8001876:	4603      	mov	r3, r0
 8001878:	75fb      	strb	r3, [r7, #23]
                    break;
 800187a:	e048      	b.n	800190e <bmi3_set_sensor_config+0x1f2>

                case BMI3_STEP_COUNTER:
                    rslt = set_step_config(&sens_cfg[loop].cfg.step_counter, dev);
 800187c:	7dbb      	ldrb	r3, [r7, #22]
 800187e:	222e      	movs	r2, #46	; 0x2e
 8001880:	fb02 f303 	mul.w	r3, r2, r3
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	4413      	add	r3, r2
 8001888:	3302      	adds	r3, #2
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	4618      	mov	r0, r3
 800188e:	f001 fdce 	bl	800342e <set_step_config>
 8001892:	4603      	mov	r3, r0
 8001894:	75fb      	strb	r3, [r7, #23]
                    break;
 8001896:	e03a      	b.n	800190e <bmi3_set_sensor_config+0x1f2>

                case BMI3_TAP:
                    rslt = set_tap_config(&sens_cfg[loop].cfg.tap, dev);
 8001898:	7dbb      	ldrb	r3, [r7, #22]
 800189a:	222e      	movs	r2, #46	; 0x2e
 800189c:	fb02 f303 	mul.w	r3, r2, r3
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	3302      	adds	r3, #2
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f002 f910 	bl	8003ace <set_tap_config>
 80018ae:	4603      	mov	r3, r0
 80018b0:	75fb      	strb	r3, [r7, #23]
                    break;
 80018b2:	e02c      	b.n	800190e <bmi3_set_sensor_config+0x1f2>

                case BMI3_ALT_ACCEL:
                    rslt = set_alternate_accel_config(&sens_cfg[loop].cfg.alt_acc, dev);
 80018b4:	7dbb      	ldrb	r3, [r7, #22]
 80018b6:	222e      	movs	r2, #46	; 0x2e
 80018b8:	fb02 f303 	mul.w	r3, r2, r3
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	4413      	add	r3, r2
 80018c0:	3302      	adds	r3, #2
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f002 fa0a 	bl	8003cde <set_alternate_accel_config>
 80018ca:	4603      	mov	r3, r0
 80018cc:	75fb      	strb	r3, [r7, #23]
                    break;
 80018ce:	e01e      	b.n	800190e <bmi3_set_sensor_config+0x1f2>

                case BMI3_ALT_GYRO:
                    rslt = set_alternate_gyro_config(&sens_cfg[loop].cfg.alt_gyr, dev);
 80018d0:	7dbb      	ldrb	r3, [r7, #22]
 80018d2:	222e      	movs	r2, #46	; 0x2e
 80018d4:	fb02 f303 	mul.w	r3, r2, r3
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	3302      	adds	r3, #2
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f002 fa86 	bl	8003df2 <set_alternate_gyro_config>
 80018e6:	4603      	mov	r3, r0
 80018e8:	75fb      	strb	r3, [r7, #23]
                    break;
 80018ea:	e010      	b.n	800190e <bmi3_set_sensor_config+0x1f2>

                case BMI3_ALT_AUTO_CONFIG:
                    rslt = set_alternate_auto_config(&sens_cfg[loop].cfg.alt_auto_cfg, dev);
 80018ec:	7dbb      	ldrb	r3, [r7, #22]
 80018ee:	222e      	movs	r2, #46	; 0x2e
 80018f0:	fb02 f303 	mul.w	r3, r2, r3
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	4413      	add	r3, r2
 80018f8:	3302      	adds	r3, #2
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f002 fb02 	bl	8003f06 <set_alternate_auto_config>
 8001902:	4603      	mov	r3, r0
 8001904:	75fb      	strb	r3, [r7, #23]
                    break;
 8001906:	e002      	b.n	800190e <bmi3_set_sensor_config+0x1f2>

                default:
                    rslt = BMI3_E_INVALID_SENSOR;
 8001908:	23fa      	movs	r3, #250	; 0xfa
 800190a:	75fb      	strb	r3, [r7, #23]
                    break;
 800190c:	bf00      	nop
        for (loop = 0; loop < n_sens; loop++)
 800190e:	7dbb      	ldrb	r3, [r7, #22]
 8001910:	3301      	adds	r3, #1
 8001912:	75bb      	strb	r3, [r7, #22]
 8001914:	7dba      	ldrb	r2, [r7, #22]
 8001916:	7afb      	ldrb	r3, [r7, #11]
 8001918:	429a      	cmp	r2, r3
 800191a:	f4ff af17 	bcc.w	800174c <bmi3_set_sensor_config+0x30>
    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 800191e:	e001      	b.n	8001924 <bmi3_set_sensor_config+0x208>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001920:	23ff      	movs	r3, #255	; 0xff
 8001922:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001924:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <bmi3_get_sensor_config>:

/*!
 * @brief This API gets the sensor/feature configuration.
 */
int8_t bmi3_get_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	460b      	mov	r3, r1
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	72fb      	strb	r3, [r7, #11]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to define loop */
    uint8_t loop = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 fbf8 	bl	8002138 <null_ptr_check>
 8001948:	4603      	mov	r3, r0
 800194a:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 800194c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001950:	2b00      	cmp	r3, #0
 8001952:	f040 80f1 	bne.w	8001b38 <bmi3_get_sensor_config+0x208>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80ed 	beq.w	8001b38 <bmi3_get_sensor_config+0x208>
    {
        for (loop = 0; loop < n_sens; loop++)
 800195e:	2300      	movs	r3, #0
 8001960:	75bb      	strb	r3, [r7, #22]
 8001962:	e0e3      	b.n	8001b2c <bmi3_get_sensor_config+0x1fc>
        {
            switch (sens_cfg[loop].type)
 8001964:	7dbb      	ldrb	r3, [r7, #22]
 8001966:	222e      	movs	r2, #46	; 0x2e
 8001968:	fb02 f303 	mul.w	r3, r2, r3
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	4413      	add	r3, r2
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b0c      	cmp	r3, #12
 8001974:	f200 80d4 	bhi.w	8001b20 <bmi3_get_sensor_config+0x1f0>
 8001978:	a201      	add	r2, pc, #4	; (adr r2, 8001980 <bmi3_get_sensor_config+0x50>)
 800197a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197e:	bf00      	nop
 8001980:	080019b5 	.word	0x080019b5
 8001984:	080019d1 	.word	0x080019d1
 8001988:	08001a25 	.word	0x08001a25
 800198c:	080019ed 	.word	0x080019ed
 8001990:	08001a09 	.word	0x08001a09
 8001994:	08001a95 	.word	0x08001a95
 8001998:	08001a5d 	.word	0x08001a5d
 800199c:	08001a79 	.word	0x08001a79
 80019a0:	08001a41 	.word	0x08001a41
 80019a4:	08001ab1 	.word	0x08001ab1
 80019a8:	08001acd 	.word	0x08001acd
 80019ac:	08001ae9 	.word	0x08001ae9
 80019b0:	08001b05 	.word	0x08001b05
            {
                case BMI3_ACCEL:
                    rslt = get_accel_config(&sens_cfg[loop].cfg.acc, dev);
 80019b4:	7dbb      	ldrb	r3, [r7, #22]
 80019b6:	222e      	movs	r2, #46	; 0x2e
 80019b8:	fb02 f303 	mul.w	r3, r2, r3
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	3302      	adds	r3, #2
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 f975 	bl	8001cb4 <get_accel_config>
 80019ca:	4603      	mov	r3, r0
 80019cc:	75fb      	strb	r3, [r7, #23]
                    break;
 80019ce:	e0aa      	b.n	8001b26 <bmi3_get_sensor_config+0x1f6>

                case BMI3_GYRO:
                    rslt = get_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 80019d0:	7dbb      	ldrb	r3, [r7, #22]
 80019d2:	222e      	movs	r2, #46	; 0x2e
 80019d4:	fb02 f303 	mul.w	r3, r2, r3
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	4413      	add	r3, r2
 80019dc:	3302      	adds	r3, #2
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f000 fb5c 	bl	800209e <get_gyro_config>
 80019e6:	4603      	mov	r3, r0
 80019e8:	75fb      	strb	r3, [r7, #23]
                    break;
 80019ea:	e09c      	b.n	8001b26 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ANY_MOTION:
                    rslt = get_any_motion_config(&sens_cfg[loop].cfg.any_motion, dev);
 80019ec:	7dbb      	ldrb	r3, [r7, #22]
 80019ee:	222e      	movs	r2, #46	; 0x2e
 80019f0:	fb02 f303 	mul.w	r3, r2, r3
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	3302      	adds	r3, #2
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 fbbb 	bl	8002178 <get_any_motion_config>
 8001a02:	4603      	mov	r3, r0
 8001a04:	75fb      	strb	r3, [r7, #23]
                    break;
 8001a06:	e08e      	b.n	8001b26 <bmi3_get_sensor_config+0x1f6>

                case BMI3_NO_MOTION:
                    rslt = get_no_motion_config(&sens_cfg[loop].cfg.no_motion, dev);
 8001a08:	7dbb      	ldrb	r3, [r7, #22]
 8001a0a:	222e      	movs	r2, #46	; 0x2e
 8001a0c:	fb02 f303 	mul.w	r3, r2, r3
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	4413      	add	r3, r2
 8001a14:	3302      	adds	r3, #2
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 fd24 	bl	8002466 <get_no_motion_config>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	75fb      	strb	r3, [r7, #23]
                    break;
 8001a22:	e080      	b.n	8001b26 <bmi3_get_sensor_config+0x1f6>

                case BMI3_SIG_MOTION:
                    rslt = get_sig_motion_config(&sens_cfg[loop].cfg.sig_motion, dev);
 8001a24:	7dbb      	ldrb	r3, [r7, #22]
 8001a26:	222e      	movs	r2, #46	; 0x2e
 8001a28:	fb02 f303 	mul.w	r3, r2, r3
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4413      	add	r3, r2
 8001a30:	3302      	adds	r3, #2
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 ff89 	bl	800294c <get_sig_motion_config>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	75fb      	strb	r3, [r7, #23]
                    break;
 8001a3e:	e072      	b.n	8001b26 <bmi3_get_sensor_config+0x1f6>

                case BMI3_FLAT:
                    rslt = get_flat_config(&sens_cfg[loop].cfg.flat, dev);
 8001a40:	7dbb      	ldrb	r3, [r7, #22]
 8001a42:	222e      	movs	r2, #46	; 0x2e
 8001a44:	fb02 f303 	mul.w	r3, r2, r3
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3302      	adds	r3, #2
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 fe7b 	bl	800274c <get_flat_config>
 8001a56:	4603      	mov	r3, r0
 8001a58:	75fb      	strb	r3, [r7, #23]
                    break;
 8001a5a:	e064      	b.n	8001b26 <bmi3_get_sensor_config+0x1f6>

                case BMI3_TILT:
                    rslt = get_tilt_config(&sens_cfg[loop].cfg.tilt, dev);
 8001a5c:	7dbb      	ldrb	r3, [r7, #22]
 8001a5e:	222e      	movs	r2, #46	; 0x2e
 8001a60:	fb02 f303 	mul.w	r3, r2, r3
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	3302      	adds	r3, #2
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f001 f8bf 	bl	8002bf0 <get_tilt_config>
 8001a72:	4603      	mov	r3, r0
 8001a74:	75fb      	strb	r3, [r7, #23]
                    break;
 8001a76:	e056      	b.n	8001b26 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ORIENTATION:
                    rslt = get_orientation_config(&sens_cfg[loop].cfg.orientation, dev);
 8001a78:	7dbb      	ldrb	r3, [r7, #22]
 8001a7a:	222e      	movs	r2, #46	; 0x2e
 8001a7c:	fb02 f303 	mul.w	r3, r2, r3
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	3302      	adds	r3, #2
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f001 f982 	bl	8002d92 <get_orientation_config>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	75fb      	strb	r3, [r7, #23]
                    break;
 8001a92:	e048      	b.n	8001b26 <bmi3_get_sensor_config+0x1f6>

                case BMI3_STEP_COUNTER:
                    rslt = get_step_config(&sens_cfg[loop].cfg.step_counter, dev);
 8001a94:	7dbb      	ldrb	r3, [r7, #22]
 8001a96:	222e      	movs	r2, #46	; 0x2e
 8001a98:	fb02 f303 	mul.w	r3, r2, r3
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3302      	adds	r3, #2
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f001 faba 	bl	800301e <get_step_config>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	75fb      	strb	r3, [r7, #23]
                    break;
 8001aae:	e03a      	b.n	8001b26 <bmi3_get_sensor_config+0x1f6>

                case BMI3_TAP:
                    rslt = get_tap_config(&sens_cfg[loop].cfg.tap, dev);
 8001ab0:	7dbb      	ldrb	r3, [r7, #22]
 8001ab2:	222e      	movs	r2, #46	; 0x2e
 8001ab4:	fb02 f303 	mul.w	r3, r2, r3
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	4413      	add	r3, r2
 8001abc:	3302      	adds	r3, #2
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f001 ff44 	bl	800394e <get_tap_config>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	75fb      	strb	r3, [r7, #23]
                    break;
 8001aca:	e02c      	b.n	8001b26 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ALT_ACCEL:
                    rslt = get_alternate_accel_config(&sens_cfg[loop].cfg.alt_acc, dev);
 8001acc:	7dbb      	ldrb	r3, [r7, #22]
 8001ace:	222e      	movs	r2, #46	; 0x2e
 8001ad0:	fb02 f303 	mul.w	r3, r2, r3
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3302      	adds	r3, #2
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f002 f94b 	bl	8003d78 <get_alternate_accel_config>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	75fb      	strb	r3, [r7, #23]
                    break;
 8001ae6:	e01e      	b.n	8001b26 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ALT_GYRO:
                    rslt = get_alternate_gyro_config(&sens_cfg[loop].cfg.alt_gyr, dev);
 8001ae8:	7dbb      	ldrb	r3, [r7, #22]
 8001aea:	222e      	movs	r2, #46	; 0x2e
 8001aec:	fb02 f303 	mul.w	r3, r2, r3
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	3302      	adds	r3, #2
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f002 f9c7 	bl	8003e8c <get_alternate_gyro_config>
 8001afe:	4603      	mov	r3, r0
 8001b00:	75fb      	strb	r3, [r7, #23]
                    break;
 8001b02:	e010      	b.n	8001b26 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ALT_AUTO_CONFIG:
                    rslt = get_alternate_auto_config(&sens_cfg[loop].cfg.alt_auto_cfg, dev);
 8001b04:	7dbb      	ldrb	r3, [r7, #22]
 8001b06:	222e      	movs	r2, #46	; 0x2e
 8001b08:	fb02 f303 	mul.w	r3, r2, r3
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	4413      	add	r3, r2
 8001b10:	3302      	adds	r3, #2
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f002 fa40 	bl	8003f9a <get_alternate_auto_config>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	75fb      	strb	r3, [r7, #23]
                    break;
 8001b1e:	e002      	b.n	8001b26 <bmi3_get_sensor_config+0x1f6>

                default:
                    rslt = BMI3_E_INVALID_SENSOR;
 8001b20:	23fa      	movs	r3, #250	; 0xfa
 8001b22:	75fb      	strb	r3, [r7, #23]
                    break;
 8001b24:	bf00      	nop
        for (loop = 0; loop < n_sens; loop++)
 8001b26:	7dbb      	ldrb	r3, [r7, #22]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	75bb      	strb	r3, [r7, #22]
 8001b2c:	7dba      	ldrb	r2, [r7, #22]
 8001b2e:	7afb      	ldrb	r3, [r7, #11]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	f4ff af17 	bcc.w	8001964 <bmi3_get_sensor_config+0x34>
    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 8001b36:	e001      	b.n	8001b3c <bmi3_get_sensor_config+0x20c>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001b38:	23ff      	movs	r3, #255	; 0xff
 8001b3a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001b3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <set_accel_config>:
/*!
 * @brief This internal API sets accelerometer configurations like ODR, accel mode,
 * bandwidth, average samples and range.
 */
static int8_t set_accel_config(struct bmi3_accel_config *config, struct bmi3_dev *dev)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8001b52:	2300      	movs	r3, #0
 8001b54:	813b      	strh	r3, [r7, #8]

    uint16_t odr, range, bwp, avg_num, acc_mode;

    if (config != NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80a3 	beq.w	8001ca4 <set_accel_config+0x15c>
    {
        /* Validate bandwidth and averaging samples */
        rslt = validate_bw_avg_acc_mode(&config->bwp, &config->acc_mode, &config->avg_num, dev);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	1c58      	adds	r0, r3, #1
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	1c99      	adds	r1, r3, #2
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	1d1a      	adds	r2, r3, #4
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	f000 f8ef 	bl	8001d4e <validate_bw_avg_acc_mode>
 8001b70:	4603      	mov	r3, r0
 8001b72:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001b74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d108      	bne.n	8001b8e <set_accel_config+0x46>
        {
            /* Validate ODR and range */
            rslt = validate_acc_odr_range(&config->odr, &config->range, dev);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3303      	adds	r3, #3
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	4619      	mov	r1, r3
 8001b86:	f000 f91d 	bl	8001dc4 <validate_acc_odr_range>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMI3_OK)
 8001b8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d11f      	bne.n	8001bd6 <set_accel_config+0x8e>
        {
            if (config->acc_mode == BMI3_ACC_MODE_LOW_PWR)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	789b      	ldrb	r3, [r3, #2]
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d109      	bne.n	8001bb2 <set_accel_config+0x6a>
            {
                rslt = validate_acc_odr_avg(config->odr, config->avg_num);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	781a      	ldrb	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	791b      	ldrb	r3, [r3, #4]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4610      	mov	r0, r2
 8001baa:	f002 fa31 	bl	8004010 <validate_acc_odr_avg>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	75fb      	strb	r3, [r7, #23]
            }

            if ((config->acc_mode == BMI3_ACC_MODE_NORMAL) || (config->acc_mode == BMI3_ACC_MODE_HIGH_PERF))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	789b      	ldrb	r3, [r3, #2]
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d003      	beq.n	8001bc2 <set_accel_config+0x7a>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	789b      	ldrb	r3, [r3, #2]
 8001bbe:	2b07      	cmp	r3, #7
 8001bc0:	d109      	bne.n	8001bd6 <set_accel_config+0x8e>
            {
                if ((config->odr >= BMI3_ACC_ODR_0_78HZ) && (config->odr <= BMI3_ACC_ODR_6_25HZ))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d005      	beq.n	8001bd6 <set_accel_config+0x8e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d801      	bhi.n	8001bd6 <set_accel_config+0x8e>
                {
                    rslt = BMI3_E_ACC_INVALID_CFG;
 8001bd2:	23fc      	movs	r3, #252	; 0xfc
 8001bd4:	75fb      	strb	r3, [r7, #23]
                }
            }
        }

        if (rslt == BMI3_OK)
 8001bd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d15f      	bne.n	8001c9e <set_accel_config+0x156>
        {
            /* Set accelerometer ODR */
            odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_ACC_ODR, config->odr);
 8001bde:	7a3b      	ldrb	r3, [r7, #8]
 8001be0:	b21b      	sxth	r3, r3
 8001be2:	f023 030f 	bic.w	r3, r3, #15
 8001be6:	b21a      	sxth	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	b21b      	sxth	r3, r3
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	b21b      	sxth	r3, r3
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	82bb      	strh	r3, [r7, #20]

            /* Set accelerometer range */
            range = BMI3_SET_BITS(reg_data[0], BMI3_ACC_RANGE, config->range);
 8001bfa:	7a3b      	ldrb	r3, [r7, #8]
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c02:	b21a      	sxth	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	78db      	ldrb	r3, [r3, #3]
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	b21b      	sxth	r3, r3
 8001c0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c10:	b21b      	sxth	r3, r3
 8001c12:	4313      	orrs	r3, r2
 8001c14:	b21b      	sxth	r3, r3
 8001c16:	827b      	strh	r3, [r7, #18]

            /* Set accelerometer bandwidth */
            bwp = BMI3_SET_BITS(reg_data[0], BMI3_ACC_BW, config->bwp);
 8001c18:	7a3b      	ldrb	r3, [r7, #8]
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c20:	b21a      	sxth	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	785b      	ldrb	r3, [r3, #1]
 8001c26:	01db      	lsls	r3, r3, #7
 8001c28:	b21b      	sxth	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	b21b      	sxth	r3, r3
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	823b      	strh	r3, [r7, #16]

            /* Set accelerometer average number of samples */
            avg_num = BMI3_SET_BITS(reg_data[1], BMI3_ACC_AVG_NUM, config->avg_num);
 8001c34:	7a7b      	ldrb	r3, [r7, #9]
 8001c36:	b21a      	sxth	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	791b      	ldrb	r3, [r3, #4]
 8001c3c:	021b      	lsls	r3, r3, #8
 8001c3e:	b21b      	sxth	r3, r3
 8001c40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c44:	b21b      	sxth	r3, r3
 8001c46:	4313      	orrs	r3, r2
 8001c48:	b21b      	sxth	r3, r3
 8001c4a:	81fb      	strh	r3, [r7, #14]

            /* Set accelerometer accel mode */
            acc_mode = BMI3_SET_BITS(reg_data[1], BMI3_ACC_MODE, config->acc_mode);
 8001c4c:	7a7b      	ldrb	r3, [r7, #9]
 8001c4e:	b21a      	sxth	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	789b      	ldrb	r3, [r3, #2]
 8001c54:	031b      	lsls	r3, r3, #12
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001c5c:	b21b      	sxth	r3, r3
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	81bb      	strh	r3, [r7, #12]

            reg_data[0] = (uint8_t)(odr | range | bwp);
 8001c64:	8abb      	ldrh	r3, [r7, #20]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	8a7b      	ldrh	r3, [r7, #18]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	8a3b      	ldrh	r3, [r7, #16]
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	4313      	orrs	r3, r2
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	723b      	strb	r3, [r7, #8]
            reg_data[1] = (uint8_t)((avg_num | acc_mode) >> 8);
 8001c7a:	89fa      	ldrh	r2, [r7, #14]
 8001c7c:	89bb      	ldrh	r3, [r7, #12]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	727b      	strb	r3, [r7, #9]

            /* Set configurations for accel */
            rslt = bmi3_set_regs(BMI3_REG_ACC_CONF, reg_data, 2, dev);
 8001c8a:	f107 0108 	add.w	r1, r7, #8
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	2202      	movs	r2, #2
 8001c92:	2020      	movs	r0, #32
 8001c94:	f7ff fc4f 	bl	8001536 <bmi3_set_regs>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	75fb      	strb	r3, [r7, #23]
 8001c9c:	e004      	b.n	8001ca8 <set_accel_config+0x160>
        }
        else
        {
            rslt = BMI3_E_ACC_INVALID_CFG;
 8001c9e:	23fc      	movs	r3, #252	; 0xfc
 8001ca0:	75fb      	strb	r3, [r7, #23]
 8001ca2:	e001      	b.n	8001ca8 <set_accel_config+0x160>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001ca4:	23ff      	movs	r3, #255	; 0xff
 8001ca6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001ca8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <get_accel_config>:
/*!
 * @brief This internal API gets accelerometer configurations like ODR,
 * bandwidth, accel mode, average samples and gravity range.
 */
static int8_t get_accel_config(struct bmi3_accel_config *config, struct bmi3_dev *dev)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d03a      	beq.n	8001d3e <get_accel_config+0x8a>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_ACC_CONF, data_array, 2, dev);
 8001cc8:	f107 0108 	add.w	r1, r7, #8
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	2020      	movs	r0, #32
 8001cd2:	f7ff fbcb 	bl	800146c <bmi3_get_regs>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8001cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d12f      	bne.n	8001d42 <get_accel_config+0x8e>
        {
            reg_data = data_array[0];
 8001ce2:	7a3b      	ldrb	r3, [r7, #8]
 8001ce4:	81bb      	strh	r3, [r7, #12]

            /* Get accelerometer ODR */
            config->odr = BMI3_GET_BIT_POS0(reg_data, BMI3_ACC_ODR);
 8001ce6:	89bb      	ldrh	r3, [r7, #12]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	701a      	strb	r2, [r3, #0]

            /* Get accelerometer range */
            config->range = BMI3_GET_BITS(reg_data, BMI3_ACC_RANGE);
 8001cf4:	89bb      	ldrh	r3, [r7, #12]
 8001cf6:	111b      	asrs	r3, r3, #4
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	70da      	strb	r2, [r3, #3]

            /* Get accelerometer bandwidth */
            config->bwp = BMI3_GET_BITS(reg_data, BMI3_ACC_BW);
 8001d04:	89bb      	ldrh	r3, [r7, #12]
 8001d06:	11db      	asrs	r3, r3, #7
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	705a      	strb	r2, [r3, #1]

            reg_data = (uint16_t)data_array[1] << 8;
 8001d14:	7a7b      	ldrb	r3, [r7, #9]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	81bb      	strh	r3, [r7, #12]

            /* Get accelerometer average samples */
            config->avg_num = BMI3_GET_BITS(reg_data, BMI3_ACC_AVG_NUM);
 8001d1c:	89bb      	ldrh	r3, [r7, #12]
 8001d1e:	121b      	asrs	r3, r3, #8
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	711a      	strb	r2, [r3, #4]

            /* Get accel mode */
            config->acc_mode = BMI3_GET_BITS(reg_data, BMI3_ACC_MODE);
 8001d2c:	89bb      	ldrh	r3, [r7, #12]
 8001d2e:	131b      	asrs	r3, r3, #12
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	709a      	strb	r2, [r3, #2]
 8001d3c:	e001      	b.n	8001d42 <get_accel_config+0x8e>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001d3e:	23ff      	movs	r3, #255	; 0xff
 8001d40:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <validate_bw_avg_acc_mode>:
/*!
 * @brief This internal API validates bandwidth and accel mode of the
 * accelerometer set by the user.
 */
static int8_t validate_bw_avg_acc_mode(uint8_t *bandwidth, uint8_t *acc_mode, uint8_t *avg_num, struct bmi3_dev *dev)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	603b      	str	r3, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    if ((bandwidth != NULL) && (acc_mode != NULL) && (avg_num != NULL))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d026      	beq.n	8001db0 <validate_bw_avg_acc_mode+0x62>
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d023      	beq.n	8001db0 <validate_bw_avg_acc_mode+0x62>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d020      	beq.n	8001db0 <validate_bw_avg_acc_mode+0x62>
    {
        /* Validate and auto-correct accel mode */
        rslt = check_boundary_val(acc_mode, BMI3_ACC_MODE_DISABLE, BMI3_ACC_MODE_HIGH_PERF, dev);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	2207      	movs	r2, #7
 8001d72:	2100      	movs	r1, #0
 8001d74:	68b8      	ldr	r0, [r7, #8]
 8001d76:	f000 f84e 	bl	8001e16 <check_boundary_val>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001d7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d117      	bne.n	8001db6 <validate_bw_avg_acc_mode+0x68>
        {
            /* Validate for averaging number of samples */
            rslt = check_boundary_val(avg_num, BMI3_ACC_AVG1, BMI3_ACC_AVG64, dev);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2206      	movs	r2, #6
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f842 	bl	8001e16 <check_boundary_val>
 8001d92:	4603      	mov	r3, r0
 8001d94:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8001d96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10b      	bne.n	8001db6 <validate_bw_avg_acc_mode+0x68>
            {
                /* Validate bandwidth */
                rslt = check_boundary_val(bandwidth, BMI3_ACC_BW_ODR_HALF, BMI3_ACC_BW_ODR_QUARTER, dev);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	2201      	movs	r2, #1
 8001da2:	2100      	movs	r1, #0
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 f836 	bl	8001e16 <check_boundary_val>
 8001daa:	4603      	mov	r3, r0
 8001dac:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 8001dae:	e002      	b.n	8001db6 <validate_bw_avg_acc_mode+0x68>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001db0:	23ff      	movs	r3, #255	; 0xff
 8001db2:	75fb      	strb	r3, [r7, #23]
 8001db4:	e000      	b.n	8001db8 <validate_bw_avg_acc_mode+0x6a>
        if (rslt == BMI3_OK)
 8001db6:	bf00      	nop
    }

    return rslt;
 8001db8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <validate_acc_odr_range>:
/*!
 * @brief This internal API validates ODR and range of the accelerometer set by
 * the user.
 */
static int8_t validate_acc_odr_range(uint8_t *odr, uint8_t *range, struct bmi3_dev *dev)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    if ((odr != NULL) && (range != NULL))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d017      	beq.n	8001e06 <validate_acc_odr_range+0x42>
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d014      	beq.n	8001e06 <validate_acc_odr_range+0x42>
    {
        /* Validate and auto correct ODR */
        rslt = check_boundary_val(odr, BMI3_ACC_ODR_0_78HZ, BMI3_ACC_ODR_6400HZ, dev);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	220e      	movs	r2, #14
 8001de0:	2101      	movs	r1, #1
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 f817 	bl	8001e16 <check_boundary_val>
 8001de8:	4603      	mov	r3, r0
 8001dea:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001dec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10a      	bne.n	8001e0a <validate_acc_odr_range+0x46>
        {
            /* Validate and auto correct Range */
            rslt = check_boundary_val(range, BMI3_ACC_RANGE_2G, BMI3_ACC_RANGE_16G, dev);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2203      	movs	r2, #3
 8001df8:	2100      	movs	r1, #0
 8001dfa:	68b8      	ldr	r0, [r7, #8]
 8001dfc:	f000 f80b 	bl	8001e16 <check_boundary_val>
 8001e00:	4603      	mov	r3, r0
 8001e02:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 8001e04:	e001      	b.n	8001e0a <validate_acc_odr_range+0x46>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001e06:	23ff      	movs	r3, #255	; 0xff
 8001e08:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001e0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <check_boundary_val>:

/*!
 * @brief This internal API is used to validate the boundary conditions.
 */
static int8_t check_boundary_val(uint8_t *val, uint8_t min, uint8_t max, struct bmi3_dev *dev)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b086      	sub	sp, #24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	72fb      	strb	r3, [r7, #11]
 8001e24:	4613      	mov	r3, r2
 8001e26:	72bb      	strb	r3, [r7, #10]
    /* Variable to store result of API */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f985 	bl	8002138 <null_ptr_check>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (val != NULL))
 8001e32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d121      	bne.n	8001e7e <check_boundary_val+0x68>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d01e      	beq.n	8001e7e <check_boundary_val+0x68>
    {
        /* Check if value is below minimum value */
        if (*val < min)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	7afa      	ldrb	r2, [r7, #11]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d909      	bls.n	8001e5e <check_boundary_val+0x48>
        {
            /* Auto correct the invalid value to minimum value */
            *val = min;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	7afa      	ldrb	r2, [r7, #11]
 8001e4e:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI3_I_MIN_VALUE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	7a1b      	ldrb	r3, [r3, #8]
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	721a      	strb	r2, [r3, #8]
        }

        /* Check if value is above maximum value */
        if (*val > max)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	7aba      	ldrb	r2, [r7, #10]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d20c      	bcs.n	8001e82 <check_boundary_val+0x6c>
        {
            /* Auto correct the invalid value to maximum value */
            *val = max;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	7aba      	ldrb	r2, [r7, #10]
 8001e6c:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI3_I_MAX_VALUE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7a1b      	ldrb	r3, [r3, #8]
 8001e72:	f043 0302 	orr.w	r3, r3, #2
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	721a      	strb	r2, [r3, #8]
        if (*val > max)
 8001e7c:	e001      	b.n	8001e82 <check_boundary_val+0x6c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001e7e:	23ff      	movs	r3, #255	; 0xff
 8001e80:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001e82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <set_gyro_config>:
/*!
 * @brief This internal API sets gyroscope configurations like ODR,
 * bandwidth, gyro mode, average samples and dps range.
 */
static int8_t set_gyro_config(struct bmi3_gyro_config *config, struct bmi3_dev *dev)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b086      	sub	sp, #24
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8001e98:	2300      	movs	r3, #0
 8001e9a:	813b      	strh	r3, [r7, #8]

    uint16_t odr, range, bwp, avg_num, gyr_mode;

    if (config != NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 8091 	beq.w	8001fc6 <set_gyro_config+0x138>
    {
        /* Validate bandwidth, average samples and mode */
        rslt = validate_bw_avg_gyr_mode(&config->bwp, &config->gyr_mode, &config->avg_num, dev);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	1c58      	adds	r0, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	1c99      	adds	r1, r3, #2
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	1d1a      	adds	r2, r3, #4
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	f000 f890 	bl	8001fd6 <validate_bw_avg_gyr_mode>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001eba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d108      	bne.n	8001ed4 <set_gyro_config+0x46>
        {
            /* Validate ODR and range */
            rslt = validate_gyr_odr_range(&config->odr, &config->range, dev);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3303      	adds	r3, #3
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f000 f8be 	bl	800204c <validate_gyr_odr_range>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMI3_OK)
 8001ed4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10d      	bne.n	8001ef8 <set_gyro_config+0x6a>
        {
            if (config->gyr_mode == BMI3_GYR_MODE_LOW_PWR)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	789b      	ldrb	r3, [r3, #2]
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d109      	bne.n	8001ef8 <set_gyro_config+0x6a>
            {
                rslt = validate_gyr_odr_avg(config->odr, config->avg_num);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	781a      	ldrb	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	791b      	ldrb	r3, [r3, #4]
 8001eec:	4619      	mov	r1, r3
 8001eee:	4610      	mov	r0, r2
 8001ef0:	f002 f96c 	bl	80041cc <validate_gyr_odr_avg>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	75fb      	strb	r3, [r7, #23]
            }
        }

        if (rslt == BMI3_OK)
 8001ef8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d15f      	bne.n	8001fc0 <set_gyro_config+0x132>
        {
            /* Set gyroscope ODR */
            odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_GYR_ODR, config->odr);
 8001f00:	7a3b      	ldrb	r3, [r7, #8]
 8001f02:	b21b      	sxth	r3, r3
 8001f04:	f023 030f 	bic.w	r3, r3, #15
 8001f08:	b21a      	sxth	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	b21b      	sxth	r3, r3
 8001f10:	f003 030f 	and.w	r3, r3, #15
 8001f14:	b21b      	sxth	r3, r3
 8001f16:	4313      	orrs	r3, r2
 8001f18:	b21b      	sxth	r3, r3
 8001f1a:	82bb      	strh	r3, [r7, #20]

            /* Set gyroscope range */
            range = BMI3_SET_BITS(reg_data[0], BMI3_GYR_RANGE, config->range);
 8001f1c:	7a3b      	ldrb	r3, [r7, #8]
 8001f1e:	b21b      	sxth	r3, r3
 8001f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f24:	b21a      	sxth	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	78db      	ldrb	r3, [r3, #3]
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	b21b      	sxth	r3, r3
 8001f2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f32:	b21b      	sxth	r3, r3
 8001f34:	4313      	orrs	r3, r2
 8001f36:	b21b      	sxth	r3, r3
 8001f38:	827b      	strh	r3, [r7, #18]

            /* Set gyroscope bandwidth */
            bwp = BMI3_SET_BITS(reg_data[0], BMI3_GYR_BW, config->bwp);
 8001f3a:	7a3b      	ldrb	r3, [r7, #8]
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f42:	b21a      	sxth	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	785b      	ldrb	r3, [r3, #1]
 8001f48:	01db      	lsls	r3, r3, #7
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	b21b      	sxth	r3, r3
 8001f50:	4313      	orrs	r3, r2
 8001f52:	b21b      	sxth	r3, r3
 8001f54:	823b      	strh	r3, [r7, #16]

            /* Set gyroscope average sample */
            avg_num = BMI3_SET_BITS(reg_data[1], BMI3_GYR_AVG_NUM, config->avg_num);
 8001f56:	7a7b      	ldrb	r3, [r7, #9]
 8001f58:	b21a      	sxth	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	791b      	ldrb	r3, [r3, #4]
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	b21b      	sxth	r3, r3
 8001f62:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f66:	b21b      	sxth	r3, r3
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	b21b      	sxth	r3, r3
 8001f6c:	81fb      	strh	r3, [r7, #14]

            /* Set gyroscope mode */
            gyr_mode = BMI3_SET_BITS(reg_data[1], BMI3_GYR_MODE, config->gyr_mode);
 8001f6e:	7a7b      	ldrb	r3, [r7, #9]
 8001f70:	b21a      	sxth	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	789b      	ldrb	r3, [r3, #2]
 8001f76:	031b      	lsls	r3, r3, #12
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	4313      	orrs	r3, r2
 8001f82:	b21b      	sxth	r3, r3
 8001f84:	81bb      	strh	r3, [r7, #12]

            reg_data[0] = (uint8_t)(odr | range | bwp);
 8001f86:	8abb      	ldrh	r3, [r7, #20]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	8a7b      	ldrh	r3, [r7, #18]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	8a3b      	ldrh	r3, [r7, #16]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	4313      	orrs	r3, r2
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	723b      	strb	r3, [r7, #8]
            reg_data[1] = (uint8_t)((avg_num | gyr_mode) >> 8);
 8001f9c:	89fa      	ldrh	r2, [r7, #14]
 8001f9e:	89bb      	ldrh	r3, [r7, #12]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	727b      	strb	r3, [r7, #9]

            /* Set gyro configurations */
            rslt = bmi3_set_regs(BMI3_REG_GYR_CONF, reg_data, 2, dev);
 8001fac:	f107 0108 	add.w	r1, r7, #8
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	2021      	movs	r0, #33	; 0x21
 8001fb6:	f7ff fabe 	bl	8001536 <bmi3_set_regs>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	75fb      	strb	r3, [r7, #23]
 8001fbe:	e004      	b.n	8001fca <set_gyro_config+0x13c>
        }
        else
        {
            rslt = BMI3_E_GYRO_INVALID_CFG;
 8001fc0:	23fb      	movs	r3, #251	; 0xfb
 8001fc2:	75fb      	strb	r3, [r7, #23]
 8001fc4:	e001      	b.n	8001fca <set_gyro_config+0x13c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001fc6:	23ff      	movs	r3, #255	; 0xff
 8001fc8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001fca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <validate_bw_avg_gyr_mode>:
 */
static int8_t validate_bw_avg_gyr_mode(uint8_t *bandwidth,
                                       uint8_t *gyr_mode,
                                       const uint8_t *avg_num,
                                       struct bmi3_dev *dev)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	603b      	str	r3, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    if ((bandwidth != NULL) && (gyr_mode != NULL) && (avg_num != NULL))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d026      	beq.n	8002038 <validate_bw_avg_gyr_mode+0x62>
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d023      	beq.n	8002038 <validate_bw_avg_gyr_mode+0x62>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d020      	beq.n	8002038 <validate_bw_avg_gyr_mode+0x62>
    {
        /* Validate and auto-correct gyro mode */
        rslt = check_boundary_val(gyr_mode, BMI3_GYR_MODE_DISABLE, BMI3_GYR_MODE_HIGH_PERF, dev);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2207      	movs	r2, #7
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	68b8      	ldr	r0, [r7, #8]
 8001ffe:	f7ff ff0a 	bl	8001e16 <check_boundary_val>
 8002002:	4603      	mov	r3, r0
 8002004:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8002006:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d117      	bne.n	800203e <validate_bw_avg_gyr_mode+0x68>
        {
            /* Validate for averaging mode */
            rslt = check_boundary_val(bandwidth, BMI3_GYR_AVG1, BMI3_GYR_AVG64, dev);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	2206      	movs	r2, #6
 8002012:	2100      	movs	r1, #0
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f7ff fefe 	bl	8001e16 <check_boundary_val>
 800201a:	4603      	mov	r3, r0
 800201c:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 800201e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10b      	bne.n	800203e <validate_bw_avg_gyr_mode+0x68>
            {
                /* Validate for bandwidth */
                rslt = check_boundary_val(bandwidth, BMI3_GYR_BW_ODR_HALF, BMI3_GYR_BW_ODR_QUARTER, dev);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	2201      	movs	r2, #1
 800202a:	2100      	movs	r1, #0
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f7ff fef2 	bl	8001e16 <check_boundary_val>
 8002032:	4603      	mov	r3, r0
 8002034:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 8002036:	e002      	b.n	800203e <validate_bw_avg_gyr_mode+0x68>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002038:	23ff      	movs	r3, #255	; 0xff
 800203a:	75fb      	strb	r3, [r7, #23]
 800203c:	e000      	b.n	8002040 <validate_bw_avg_gyr_mode+0x6a>
        if (rslt == BMI3_OK)
 800203e:	bf00      	nop
    }

    return rslt;
 8002040:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <validate_gyr_odr_range>:
/*!
 * @brief This internal API validates ODR and range of the gyroscope set by
 * the user.
 */
static int8_t validate_gyr_odr_range(uint8_t *odr, uint8_t *range, struct bmi3_dev *dev)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    if ((odr != NULL) && (range != NULL))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d017      	beq.n	800208e <validate_gyr_odr_range+0x42>
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d014      	beq.n	800208e <validate_gyr_odr_range+0x42>
    {
        /* Validate and auto correct ODR */
        rslt = check_boundary_val(odr, BMI3_GYR_ODR_0_78HZ, BMI3_GYR_ODR_6400HZ, dev);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	220e      	movs	r2, #14
 8002068:	2101      	movs	r1, #1
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f7ff fed3 	bl	8001e16 <check_boundary_val>
 8002070:	4603      	mov	r3, r0
 8002072:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8002074:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10a      	bne.n	8002092 <validate_gyr_odr_range+0x46>
        {
            /* Validate and auto correct Range */
            rslt = check_boundary_val(range, BMI3_GYR_RANGE_125DPS, BMI3_GYR_RANGE_2000DPS, dev);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2204      	movs	r2, #4
 8002080:	2100      	movs	r1, #0
 8002082:	68b8      	ldr	r0, [r7, #8]
 8002084:	f7ff fec7 	bl	8001e16 <check_boundary_val>
 8002088:	4603      	mov	r3, r0
 800208a:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 800208c:	e001      	b.n	8002092 <validate_gyr_odr_range+0x46>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800208e:	23ff      	movs	r3, #255	; 0xff
 8002090:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002092:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <get_gyro_config>:
/*!
 * @brief This internal API gets gyroscope configurations like ODR, gyro mode,
 * bandwidth, averaging samples and range.
 */
static int8_t get_gyro_config(struct bmi3_gyro_config *config, struct bmi3_dev *dev)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b084      	sub	sp, #16
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 80020a8:	2300      	movs	r3, #0
 80020aa:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d03a      	beq.n	8002128 <get_gyro_config+0x8a>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_GYR_CONF, data_array, 2, dev);
 80020b2:	f107 0108 	add.w	r1, r7, #8
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2202      	movs	r2, #2
 80020ba:	2021      	movs	r0, #33	; 0x21
 80020bc:	f7ff f9d6 	bl	800146c <bmi3_get_regs>
 80020c0:	4603      	mov	r3, r0
 80020c2:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 80020c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d12f      	bne.n	800212c <get_gyro_config+0x8e>
        {
            reg_data = data_array[0];
 80020cc:	7a3b      	ldrb	r3, [r7, #8]
 80020ce:	81bb      	strh	r3, [r7, #12]

            /* Get gyro ODR */
            config->odr = BMI3_GET_BIT_POS0(reg_data, BMI3_GYR_ODR);
 80020d0:	89bb      	ldrh	r3, [r7, #12]
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	701a      	strb	r2, [r3, #0]

            /* Get gyro range */
            config->range = BMI3_GET_BITS(reg_data, BMI3_GYR_RANGE);
 80020de:	89bb      	ldrh	r3, [r7, #12]
 80020e0:	111b      	asrs	r3, r3, #4
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	70da      	strb	r2, [r3, #3]

            /* Get gyro bandwidth */
            config->bwp = BMI3_GET_BITS(reg_data, BMI3_GYR_BW);
 80020ee:	89bb      	ldrh	r3, [r7, #12]
 80020f0:	11db      	asrs	r3, r3, #7
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	705a      	strb	r2, [r3, #1]

            reg_data = (uint16_t)data_array[1] << 8;
 80020fe:	7a7b      	ldrb	r3, [r7, #9]
 8002100:	b29b      	uxth	r3, r3
 8002102:	021b      	lsls	r3, r3, #8
 8002104:	81bb      	strh	r3, [r7, #12]

            /* Get gyro average sample */
            config->avg_num = BMI3_GET_BITS(reg_data, BMI3_GYR_AVG_NUM);
 8002106:	89bb      	ldrh	r3, [r7, #12]
 8002108:	121b      	asrs	r3, r3, #8
 800210a:	b2db      	uxtb	r3, r3
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	b2da      	uxtb	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	711a      	strb	r2, [r3, #4]

            /* Get gyro mode */
            config->gyr_mode = BMI3_GET_BITS(reg_data, BMI3_GYR_MODE);
 8002116:	89bb      	ldrh	r3, [r7, #12]
 8002118:	131b      	asrs	r3, r3, #12
 800211a:	b2db      	uxtb	r3, r3
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	b2da      	uxtb	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	709a      	strb	r2, [r3, #2]
 8002126:	e001      	b.n	800212c <get_gyro_config+0x8e>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002128:	23ff      	movs	r3, #255	; 0xff
 800212a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800212c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi3_dev *dev)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00b      	beq.n	800215e <null_ptr_check+0x26>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d007      	beq.n	800215e <null_ptr_check+0x26>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <null_ptr_check+0x26>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d102      	bne.n	8002164 <null_ptr_check+0x2c>
    {
        rslt = BMI3_E_NULL_PTR;
 800215e:	23ff      	movs	r3, #255	; 0xff
 8002160:	73fb      	strb	r3, [r7, #15]
 8002162:	e001      	b.n	8002168 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI3_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002168:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <get_any_motion_config>:
/*!
 * @brief This internal API gets any-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t get_any_motion_config(struct bmi3_any_motion_config *config, struct bmi3_dev *dev)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t any_mot_config[6] = { 0 };
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	2300      	movs	r3, #0
 8002188:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of any-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ANY_MOTION, 0 };
 800218a:	2305      	movs	r3, #5
 800218c:	81bb      	strh	r3, [r7, #12]

    uint8_t idx = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	77bb      	strb	r3, [r7, #30]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d07b      	beq.n	8002290 <get_any_motion_config+0x118>
    {
        /* Set the any-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002198:	f107 010c 	add.w	r1, r7, #12
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	2202      	movs	r2, #2
 80021a0:	2041      	movs	r0, #65	; 0x41
 80021a2:	f7ff f9c8 	bl	8001536 <bmi3_set_regs>
 80021a6:	4603      	mov	r3, r0
 80021a8:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 80021aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d170      	bne.n	8002294 <get_any_motion_config+0x11c>
        {
            /* Get the configuration from the feature engine register where any-motion feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, any_mot_config, 6, dev);
 80021b2:	f107 0110 	add.w	r1, r7, #16
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	2206      	movs	r2, #6
 80021ba:	2042      	movs	r0, #66	; 0x42
 80021bc:	f7ff f956 	bl	800146c <bmi3_get_regs>
 80021c0:	4603      	mov	r3, r0
 80021c2:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 80021c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d163      	bne.n	8002294 <get_any_motion_config+0x11c>
            {
                /* Get word to calculate threshold and accel reference up from same word */
                lsb = (uint16_t) any_mot_config[idx++];
 80021cc:	7fbb      	ldrb	r3, [r7, #30]
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	77ba      	strb	r2, [r7, #30]
 80021d2:	3320      	adds	r3, #32
 80021d4:	443b      	add	r3, r7
 80021d6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80021da:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) any_mot_config[idx++] << 8);
 80021dc:	7fbb      	ldrb	r3, [r7, #30]
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	77ba      	strb	r2, [r7, #30]
 80021e2:	3320      	adds	r3, #32
 80021e4:	443b      	add	r3, r7
 80021e6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	021b      	lsls	r3, r3, #8
 80021ee:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 80021f0:	8bba      	ldrh	r2, [r7, #28]
 80021f2:	8b7b      	ldrh	r3, [r7, #26]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	833b      	strh	r3, [r7, #24]

                /* Get threshold */
                config->slope_thres = (lsb_msb & BMI3_ANY_NO_SLOPE_THRESHOLD_MASK);
 80021f8:	8b3b      	ldrh	r3, [r7, #24]
 80021fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021fe:	b29a      	uxth	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	805a      	strh	r2, [r3, #2]

                /* Get accel reference up */
                config->acc_ref_up = (lsb_msb & BMI3_ANY_NO_ACC_REF_UP_MASK) >> BMI3_ANY_NO_ACC_REF_UP_POS;
 8002204:	8b3b      	ldrh	r3, [r7, #24]
 8002206:	131b      	asrs	r3, r3, #12
 8002208:	b2db      	uxtb	r3, r3
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	b2da      	uxtb	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate hysteresis from the word */
                lsb = (uint16_t) any_mot_config[idx++];
 8002214:	7fbb      	ldrb	r3, [r7, #30]
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	77ba      	strb	r2, [r7, #30]
 800221a:	3320      	adds	r3, #32
 800221c:	443b      	add	r3, r7
 800221e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002222:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) any_mot_config[idx++] << 8);
 8002224:	7fbb      	ldrb	r3, [r7, #30]
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	77ba      	strb	r2, [r7, #30]
 800222a:	3320      	adds	r3, #32
 800222c:	443b      	add	r3, r7
 800222e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002232:	b29b      	uxth	r3, r3
 8002234:	021b      	lsls	r3, r3, #8
 8002236:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8002238:	8bba      	ldrh	r2, [r7, #28]
 800223a:	8b7b      	ldrh	r3, [r7, #26]
 800223c:	4313      	orrs	r3, r2
 800223e:	833b      	strh	r3, [r7, #24]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_ANY_NO_HYSTERESIS_MASK);
 8002240:	8b3b      	ldrh	r3, [r7, #24]
 8002242:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002246:	b29a      	uxth	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate duration and wait time from the same word */
                lsb = (uint16_t) any_mot_config[idx++];
 800224c:	7fbb      	ldrb	r3, [r7, #30]
 800224e:	1c5a      	adds	r2, r3, #1
 8002250:	77ba      	strb	r2, [r7, #30]
 8002252:	3320      	adds	r3, #32
 8002254:	443b      	add	r3, r7
 8002256:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800225a:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) any_mot_config[idx++] << 8);
 800225c:	7fbb      	ldrb	r3, [r7, #30]
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	77ba      	strb	r2, [r7, #30]
 8002262:	3320      	adds	r3, #32
 8002264:	443b      	add	r3, r7
 8002266:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800226a:	b29b      	uxth	r3, r3
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8002270:	8bba      	ldrh	r2, [r7, #28]
 8002272:	8b7b      	ldrh	r3, [r7, #26]
 8002274:	4313      	orrs	r3, r2
 8002276:	833b      	strh	r3, [r7, #24]

                /* Get duration */
                config->duration = (lsb_msb & BMI3_ANY_NO_DURATION_MASK);
 8002278:	8b3b      	ldrh	r3, [r7, #24]
 800227a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800227e:	b29a      	uxth	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	801a      	strh	r2, [r3, #0]

                /* Get wait time */
                config->wait_time = (lsb_msb & BMI3_ANY_NO_WAIT_TIME_MASK) >> BMI3_ANY_NO_WAIT_TIME_POS;
 8002284:	8b3b      	ldrh	r3, [r7, #24]
 8002286:	0b5b      	lsrs	r3, r3, #13
 8002288:	b29a      	uxth	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	811a      	strh	r2, [r3, #8]
 800228e:	e001      	b.n	8002294 <get_any_motion_config+0x11c>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002290:	23ff      	movs	r3, #255	; 0xff
 8002292:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002294:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3720      	adds	r7, #32
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <set_any_motion_config>:
/*!
 * @brief This internal API sets any-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t set_any_motion_config(const struct bmi3_any_motion_config *config, struct bmi3_dev *dev)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08e      	sub	sp, #56	; 0x38
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of any-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ANY_MOTION, 0 };
 80022aa:	2305      	movs	r3, #5
 80022ac:	83bb      	strh	r3, [r7, #28]

    /* Array to define the feature configuration */
    uint8_t any_mot_config[6] = { 0 };
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	2300      	movs	r3, #0
 80022b4:	833b      	strh	r3, [r7, #24]

    uint8_t data_array[6] = { 0 };
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	2300      	movs	r3, #0
 80022bc:	823b      	strh	r3, [r7, #16]
    uint16_t acc_ref_up;

    /* Wait time for clearing the event after slope is below threshold */
    uint16_t wait_time;

    if (config != NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 80c7 	beq.w	8002454 <set_any_motion_config+0x1b4>
    {
        /* Set the any-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80022c6:	f107 011c 	add.w	r1, r7, #28
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	2202      	movs	r2, #2
 80022ce:	2041      	movs	r0, #65	; 0x41
 80022d0:	f7ff f931 	bl	8001536 <bmi3_set_regs>
 80022d4:	4603      	mov	r3, r0
 80022d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        if (rslt == BMI3_OK)
 80022da:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f040 80bb 	bne.w	800245a <set_any_motion_config+0x1ba>
        {
            /* Set threshold for lsb 8 bits */
            threshold1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 80022e4:	7b3b      	ldrb	r3, [r7, #12]
 80022e6:	b21b      	sxth	r3, r3
 80022e8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80022ec:	f023 030f 	bic.w	r3, r3, #15
 80022f0:	b21a      	sxth	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	885b      	ldrh	r3, [r3, #2]
 80022f6:	b21b      	sxth	r3, r3
 80022f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022fc:	b21b      	sxth	r3, r3
 80022fe:	4313      	orrs	r3, r2
 8002300:	b21b      	sxth	r3, r3
 8002302:	86bb      	strh	r3, [r7, #52]	; 0x34

            threshold = ((uint16_t)data_array[1] << 8);
 8002304:	7b7b      	ldrb	r3, [r7, #13]
 8002306:	b29b      	uxth	r3, r3
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	867b      	strh	r3, [r7, #50]	; 0x32

            /* Set threshold for msb 8 bits */
            threshold2 = BMI3_SET_BIT_POS0(threshold, BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 800230c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002310:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002314:	f023 030f 	bic.w	r3, r3, #15
 8002318:	b21a      	sxth	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	885b      	ldrh	r3, [r3, #2]
 800231e:	b21b      	sxth	r3, r3
 8002320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002324:	b21b      	sxth	r3, r3
 8002326:	4313      	orrs	r3, r2
 8002328:	b21b      	sxth	r3, r3
 800232a:	863b      	strh	r3, [r7, #48]	; 0x30

            /* Set accel reference */
            acc_ref_up = ((uint16_t)data_array[1] << 8);
 800232c:	7b7b      	ldrb	r3, [r7, #13]
 800232e:	b29b      	uxth	r3, r3
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	85fb      	strh	r3, [r7, #46]	; 0x2e

            acc_ref_up = BMI3_SET_BITS(acc_ref_up, BMI3_ANY_NO_ACC_REF_UP, config->acc_ref_up);
 8002334:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002338:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800233c:	b21a      	sxth	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	791b      	ldrb	r3, [r3, #4]
 8002342:	031b      	lsls	r3, r3, #12
 8002344:	b21b      	sxth	r3, r3
 8002346:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800234a:	b21b      	sxth	r3, r3
 800234c:	4313      	orrs	r3, r2
 800234e:	b21b      	sxth	r3, r3
 8002350:	85fb      	strh	r3, [r7, #46]	; 0x2e

            /* Set hysteresis for lsb 8 bits */
            hysteresis1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 8002352:	7bbb      	ldrb	r3, [r7, #14]
 8002354:	b21b      	sxth	r3, r3
 8002356:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800235a:	f023 0303 	bic.w	r3, r3, #3
 800235e:	b21a      	sxth	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	88db      	ldrh	r3, [r3, #6]
 8002364:	b21b      	sxth	r3, r3
 8002366:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800236a:	b21b      	sxth	r3, r3
 800236c:	4313      	orrs	r3, r2
 800236e:	b21b      	sxth	r3, r3
 8002370:	85bb      	strh	r3, [r7, #44]	; 0x2c

            hysteresis = ((uint16_t)data_array[2] << 8);
 8002372:	7bbb      	ldrb	r3, [r7, #14]
 8002374:	b29b      	uxth	r3, r3
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	857b      	strh	r3, [r7, #42]	; 0x2a

            /* Set hysteresis for msb 8 bits */
            hysteresis2 = BMI3_SET_BIT_POS0(hysteresis, BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 800237a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800237e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002382:	f023 0303 	bic.w	r3, r3, #3
 8002386:	b21a      	sxth	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	88db      	ldrh	r3, [r3, #6]
 800238c:	b21b      	sxth	r3, r3
 800238e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002392:	b21b      	sxth	r3, r3
 8002394:	4313      	orrs	r3, r2
 8002396:	b21b      	sxth	r3, r3
 8002398:	853b      	strh	r3, [r7, #40]	; 0x28

            /* Set duration for lsb 8 bits */
            duration1 = BMI3_SET_BIT_POS0(data_array[3], BMI3_ANY_NO_DURATION, config->duration);
 800239a:	7bfb      	ldrb	r3, [r7, #15]
 800239c:	b21b      	sxth	r3, r3
 800239e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80023a2:	f023 031f 	bic.w	r3, r3, #31
 80023a6:	b21a      	sxth	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	b21b      	sxth	r3, r3
 80023ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023b2:	b21b      	sxth	r3, r3
 80023b4:	4313      	orrs	r3, r2
 80023b6:	b21b      	sxth	r3, r3
 80023b8:	84fb      	strh	r3, [r7, #38]	; 0x26

            duration = ((uint16_t)data_array[4] << 8);
 80023ba:	7c3b      	ldrb	r3, [r7, #16]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	021b      	lsls	r3, r3, #8
 80023c0:	84bb      	strh	r3, [r7, #36]	; 0x24

            /* Set duration for msb 8 bits */
            duration2 = BMI3_SET_BIT_POS0(duration, BMI3_ANY_NO_DURATION, config->duration);
 80023c2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80023c6:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80023ca:	f023 031f 	bic.w	r3, r3, #31
 80023ce:	b21a      	sxth	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	b21b      	sxth	r3, r3
 80023d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023da:	b21b      	sxth	r3, r3
 80023dc:	4313      	orrs	r3, r2
 80023de:	b21b      	sxth	r3, r3
 80023e0:	847b      	strh	r3, [r7, #34]	; 0x22

            wait_time1 = ((uint16_t)data_array[5] << 8);
 80023e2:	7c7b      	ldrb	r3, [r7, #17]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	843b      	strh	r3, [r7, #32]

            /* Set wait time */
            wait_time = BMI3_SET_BITS(wait_time1, BMI3_ANY_NO_WAIT_TIME, config->wait_time);
 80023ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80023ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023f2:	b21a      	sxth	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	891b      	ldrh	r3, [r3, #8]
 80023f8:	035b      	lsls	r3, r3, #13
 80023fa:	b21b      	sxth	r3, r3
 80023fc:	4313      	orrs	r3, r2
 80023fe:	b21b      	sxth	r3, r3
 8002400:	83fb      	strh	r3, [r7, #30]

            any_mot_config[0] = (uint8_t)threshold1;
 8002402:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002404:	b2db      	uxtb	r3, r3
 8002406:	753b      	strb	r3, [r7, #20]
            any_mot_config[1] = (uint8_t)((threshold2 | acc_ref_up) >> 8);
 8002408:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800240a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800240c:	4313      	orrs	r3, r2
 800240e:	b29b      	uxth	r3, r3
 8002410:	0a1b      	lsrs	r3, r3, #8
 8002412:	b29b      	uxth	r3, r3
 8002414:	b2db      	uxtb	r3, r3
 8002416:	757b      	strb	r3, [r7, #21]
            any_mot_config[2] = (uint8_t)(hysteresis1);
 8002418:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800241a:	b2db      	uxtb	r3, r3
 800241c:	75bb      	strb	r3, [r7, #22]
            any_mot_config[3] = (uint8_t)((hysteresis2) >> 8);
 800241e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002420:	0a1b      	lsrs	r3, r3, #8
 8002422:	b29b      	uxth	r3, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	75fb      	strb	r3, [r7, #23]
            any_mot_config[4] = (uint8_t)(duration1);
 8002428:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800242a:	b2db      	uxtb	r3, r3
 800242c:	763b      	strb	r3, [r7, #24]
            any_mot_config[5] = (uint8_t)((duration2 | wait_time) >> 8);
 800242e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002430:	8bfb      	ldrh	r3, [r7, #30]
 8002432:	4313      	orrs	r3, r2
 8002434:	b29b      	uxth	r3, r3
 8002436:	0a1b      	lsrs	r3, r3, #8
 8002438:	b29b      	uxth	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	767b      	strb	r3, [r7, #25]

            /* Set the configurations back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, any_mot_config, 6, dev);
 800243e:	f107 0114 	add.w	r1, r7, #20
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2206      	movs	r2, #6
 8002446:	2042      	movs	r0, #66	; 0x42
 8002448:	f7ff f875 	bl	8001536 <bmi3_set_regs>
 800244c:	4603      	mov	r3, r0
 800244e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002452:	e002      	b.n	800245a <set_any_motion_config+0x1ba>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002454:	23ff      	movs	r3, #255	; 0xff
 8002456:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 800245a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800245e:	4618      	mov	r0, r3
 8002460:	3738      	adds	r7, #56	; 0x38
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <get_no_motion_config>:
/*!
 * @brief This internal API gets no-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t get_no_motion_config(struct bmi3_no_motion_config *config, struct bmi3_dev *dev)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b088      	sub	sp, #32
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t no_mot_config[6] = { 0 };
 8002470:	2300      	movs	r3, #0
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	2300      	movs	r3, #0
 8002476:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of no-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_NO_MOTION, 0 };
 8002478:	2308      	movs	r3, #8
 800247a:	81bb      	strh	r3, [r7, #12]

    /* Variable to define array offset */
    uint8_t idx = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	77bb      	strb	r3, [r7, #30]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d07b      	beq.n	800257e <get_no_motion_config+0x118>
    {
        /* Set the no-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002486:	f107 010c 	add.w	r1, r7, #12
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	2202      	movs	r2, #2
 800248e:	2041      	movs	r0, #65	; 0x41
 8002490:	f7ff f851 	bl	8001536 <bmi3_set_regs>
 8002494:	4603      	mov	r3, r0
 8002496:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8002498:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d170      	bne.n	8002582 <get_no_motion_config+0x11c>
        {
            /* Get the configuration from the feature engine register where no-motion feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, no_mot_config, 6, dev);
 80024a0:	f107 0110 	add.w	r1, r7, #16
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	2206      	movs	r2, #6
 80024a8:	2042      	movs	r0, #66	; 0x42
 80024aa:	f7fe ffdf 	bl	800146c <bmi3_get_regs>
 80024ae:	4603      	mov	r3, r0
 80024b0:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 80024b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d163      	bne.n	8002582 <get_no_motion_config+0x11c>
            {
                /* Get word to calculate threshold and accel reference up from same word */
                lsb = (uint16_t) no_mot_config[idx++];
 80024ba:	7fbb      	ldrb	r3, [r7, #30]
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	77ba      	strb	r2, [r7, #30]
 80024c0:	3320      	adds	r3, #32
 80024c2:	443b      	add	r3, r7
 80024c4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80024c8:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) no_mot_config[idx++] << 8);
 80024ca:	7fbb      	ldrb	r3, [r7, #30]
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	77ba      	strb	r2, [r7, #30]
 80024d0:	3320      	adds	r3, #32
 80024d2:	443b      	add	r3, r7
 80024d4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	021b      	lsls	r3, r3, #8
 80024dc:	837b      	strh	r3, [r7, #26]
                lsb_msb = (uint16_t)(lsb | msb);
 80024de:	8bba      	ldrh	r2, [r7, #28]
 80024e0:	8b7b      	ldrh	r3, [r7, #26]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	833b      	strh	r3, [r7, #24]

                /* Get threshold */
                config->slope_thres = (lsb_msb & BMI3_ANY_NO_SLOPE_THRESHOLD_MASK);
 80024e6:	8b3b      	ldrh	r3, [r7, #24]
 80024e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	805a      	strh	r2, [r3, #2]

                /* Get accel reference up */
                config->acc_ref_up = (lsb_msb & BMI3_ANY_NO_ACC_REF_UP_MASK) >> BMI3_ANY_NO_ACC_REF_UP_POS;
 80024f2:	8b3b      	ldrh	r3, [r7, #24]
 80024f4:	131b      	asrs	r3, r3, #12
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate hysteresis */
                lsb = (uint16_t) no_mot_config[idx++];
 8002502:	7fbb      	ldrb	r3, [r7, #30]
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	77ba      	strb	r2, [r7, #30]
 8002508:	3320      	adds	r3, #32
 800250a:	443b      	add	r3, r7
 800250c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002510:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) no_mot_config[idx++] << 8);
 8002512:	7fbb      	ldrb	r3, [r7, #30]
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	77ba      	strb	r2, [r7, #30]
 8002518:	3320      	adds	r3, #32
 800251a:	443b      	add	r3, r7
 800251c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002520:	b29b      	uxth	r3, r3
 8002522:	021b      	lsls	r3, r3, #8
 8002524:	837b      	strh	r3, [r7, #26]
                lsb_msb = (uint16_t)(lsb | msb);
 8002526:	8bba      	ldrh	r2, [r7, #28]
 8002528:	8b7b      	ldrh	r3, [r7, #26]
 800252a:	4313      	orrs	r3, r2
 800252c:	833b      	strh	r3, [r7, #24]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_ANY_NO_HYSTERESIS_MASK);
 800252e:	8b3b      	ldrh	r3, [r7, #24]
 8002530:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002534:	b29a      	uxth	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate duration and wait time from same word */
                lsb = (uint16_t) no_mot_config[idx++];
 800253a:	7fbb      	ldrb	r3, [r7, #30]
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	77ba      	strb	r2, [r7, #30]
 8002540:	3320      	adds	r3, #32
 8002542:	443b      	add	r3, r7
 8002544:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002548:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) no_mot_config[idx++] << 8);
 800254a:	7fbb      	ldrb	r3, [r7, #30]
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	77ba      	strb	r2, [r7, #30]
 8002550:	3320      	adds	r3, #32
 8002552:	443b      	add	r3, r7
 8002554:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002558:	b29b      	uxth	r3, r3
 800255a:	021b      	lsls	r3, r3, #8
 800255c:	837b      	strh	r3, [r7, #26]
                lsb_msb = (uint16_t)(lsb | msb);
 800255e:	8bba      	ldrh	r2, [r7, #28]
 8002560:	8b7b      	ldrh	r3, [r7, #26]
 8002562:	4313      	orrs	r3, r2
 8002564:	833b      	strh	r3, [r7, #24]

                /* Get duration */
                config->duration = (lsb_msb & BMI3_ANY_NO_DURATION_MASK);
 8002566:	8b3b      	ldrh	r3, [r7, #24]
 8002568:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800256c:	b29a      	uxth	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	801a      	strh	r2, [r3, #0]

                /* Get wait time */
                config->wait_time = (lsb_msb & BMI3_ANY_NO_WAIT_TIME_MASK) >> BMI3_ANY_NO_WAIT_TIME_POS;
 8002572:	8b3b      	ldrh	r3, [r7, #24]
 8002574:	0b5b      	lsrs	r3, r3, #13
 8002576:	b29a      	uxth	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	811a      	strh	r2, [r3, #8]
 800257c:	e001      	b.n	8002582 <get_no_motion_config+0x11c>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800257e:	23ff      	movs	r3, #255	; 0xff
 8002580:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002582:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3720      	adds	r7, #32
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <set_no_motion_config>:
/*!
 * @brief This internal API sets no-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t set_no_motion_config(const struct bmi3_no_motion_config *config, struct bmi3_dev *dev)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b08e      	sub	sp, #56	; 0x38
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of no-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_NO_MOTION, 0 };
 8002598:	2308      	movs	r3, #8
 800259a:	83bb      	strh	r3, [r7, #28]

    /* Array to define the feature configuration */
    uint8_t no_mot_config[6] = { 0 };
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	2300      	movs	r3, #0
 80025a2:	833b      	strh	r3, [r7, #24]

    uint8_t data_array[6] = { 0 };
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	2300      	movs	r3, #0
 80025aa:	823b      	strh	r3, [r7, #16]

    uint16_t acc_ref_up;

    uint16_t wait_time;

    if (config != NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 80c3 	beq.w	800273a <set_no_motion_config+0x1ac>
    {
        /* Set the no-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80025b4:	f107 011c 	add.w	r1, r7, #28
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	2202      	movs	r2, #2
 80025bc:	2041      	movs	r0, #65	; 0x41
 80025be:	f7fe ffba 	bl	8001536 <bmi3_set_regs>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        if (rslt == BMI3_OK)
 80025c8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f040 80b7 	bne.w	8002740 <set_no_motion_config+0x1b2>
        {
            /* Set threshold for lsb 8 bits */
            threshold1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 80025d2:	7b3b      	ldrb	r3, [r7, #12]
 80025d4:	b21b      	sxth	r3, r3
 80025d6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80025da:	f023 030f 	bic.w	r3, r3, #15
 80025de:	b21a      	sxth	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	885b      	ldrh	r3, [r3, #2]
 80025e4:	b21b      	sxth	r3, r3
 80025e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ea:	b21b      	sxth	r3, r3
 80025ec:	4313      	orrs	r3, r2
 80025ee:	b21b      	sxth	r3, r3
 80025f0:	86bb      	strh	r3, [r7, #52]	; 0x34

            threshold = ((uint16_t)data_array[1] << 8);
 80025f2:	7b7b      	ldrb	r3, [r7, #13]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	867b      	strh	r3, [r7, #50]	; 0x32

            /* Set threshold for msb 8 bits */
            threshold2 = BMI3_SET_BIT_POS0(threshold, BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 80025fa:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80025fe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002602:	f023 030f 	bic.w	r3, r3, #15
 8002606:	b21a      	sxth	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	885b      	ldrh	r3, [r3, #2]
 800260c:	b21b      	sxth	r3, r3
 800260e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002612:	b21b      	sxth	r3, r3
 8002614:	4313      	orrs	r3, r2
 8002616:	b21b      	sxth	r3, r3
 8002618:	863b      	strh	r3, [r7, #48]	; 0x30

            /* Set accel reference */
            acc_ref_up = BMI3_SET_BITS(threshold, BMI3_ANY_NO_ACC_REF_UP, config->acc_ref_up);
 800261a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800261e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002622:	b21a      	sxth	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	791b      	ldrb	r3, [r3, #4]
 8002628:	031b      	lsls	r3, r3, #12
 800262a:	b21b      	sxth	r3, r3
 800262c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002630:	b21b      	sxth	r3, r3
 8002632:	4313      	orrs	r3, r2
 8002634:	b21b      	sxth	r3, r3
 8002636:	85fb      	strh	r3, [r7, #46]	; 0x2e

            /* Set hysteresis for lsb 8 bits */
            hysteresis1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 8002638:	7bbb      	ldrb	r3, [r7, #14]
 800263a:	b21b      	sxth	r3, r3
 800263c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002640:	f023 0303 	bic.w	r3, r3, #3
 8002644:	b21a      	sxth	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	88db      	ldrh	r3, [r3, #6]
 800264a:	b21b      	sxth	r3, r3
 800264c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002650:	b21b      	sxth	r3, r3
 8002652:	4313      	orrs	r3, r2
 8002654:	b21b      	sxth	r3, r3
 8002656:	85bb      	strh	r3, [r7, #44]	; 0x2c

            hysteresis = ((uint16_t)data_array[2] << 8);
 8002658:	7bbb      	ldrb	r3, [r7, #14]
 800265a:	b29b      	uxth	r3, r3
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	857b      	strh	r3, [r7, #42]	; 0x2a

            /* Set hysteresis for msb 8 bits */
            hysteresis2 = BMI3_SET_BIT_POS0(hysteresis, BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 8002660:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002664:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002668:	f023 0303 	bic.w	r3, r3, #3
 800266c:	b21a      	sxth	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	88db      	ldrh	r3, [r3, #6]
 8002672:	b21b      	sxth	r3, r3
 8002674:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002678:	b21b      	sxth	r3, r3
 800267a:	4313      	orrs	r3, r2
 800267c:	b21b      	sxth	r3, r3
 800267e:	853b      	strh	r3, [r7, #40]	; 0x28

            /* Set duration for lsb 8 bits */
            duration1 = BMI3_SET_BIT_POS0(data_array[3], BMI3_ANY_NO_DURATION, config->duration);
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	b21b      	sxth	r3, r3
 8002684:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002688:	f023 031f 	bic.w	r3, r3, #31
 800268c:	b21a      	sxth	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	b21b      	sxth	r3, r3
 8002694:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002698:	b21b      	sxth	r3, r3
 800269a:	4313      	orrs	r3, r2
 800269c:	b21b      	sxth	r3, r3
 800269e:	84fb      	strh	r3, [r7, #38]	; 0x26

            duration = ((uint16_t)data_array[4] << 8);
 80026a0:	7c3b      	ldrb	r3, [r7, #16]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	021b      	lsls	r3, r3, #8
 80026a6:	84bb      	strh	r3, [r7, #36]	; 0x24

            /* Set duration for msb 8 bits */
            duration2 = BMI3_SET_BIT_POS0(duration, BMI3_ANY_NO_DURATION, config->duration);
 80026a8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80026ac:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80026b0:	f023 031f 	bic.w	r3, r3, #31
 80026b4:	b21a      	sxth	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	b21b      	sxth	r3, r3
 80026bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026c0:	b21b      	sxth	r3, r3
 80026c2:	4313      	orrs	r3, r2
 80026c4:	b21b      	sxth	r3, r3
 80026c6:	847b      	strh	r3, [r7, #34]	; 0x22

            wait_time1 = ((uint16_t)data_array[5] << 8);
 80026c8:	7c7b      	ldrb	r3, [r7, #17]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	021b      	lsls	r3, r3, #8
 80026ce:	843b      	strh	r3, [r7, #32]

            /* Set wait time */
            wait_time = BMI3_SET_BITS(wait_time1, BMI3_ANY_NO_WAIT_TIME, config->wait_time);
 80026d0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80026d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026d8:	b21a      	sxth	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	891b      	ldrh	r3, [r3, #8]
 80026de:	035b      	lsls	r3, r3, #13
 80026e0:	b21b      	sxth	r3, r3
 80026e2:	4313      	orrs	r3, r2
 80026e4:	b21b      	sxth	r3, r3
 80026e6:	83fb      	strh	r3, [r7, #30]

            no_mot_config[0] = (uint8_t)threshold1;
 80026e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	753b      	strb	r3, [r7, #20]
            no_mot_config[1] = (uint8_t)((threshold2 | acc_ref_up) >> 8);
 80026ee:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80026f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80026f2:	4313      	orrs	r3, r2
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	0a1b      	lsrs	r3, r3, #8
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	757b      	strb	r3, [r7, #21]
            no_mot_config[2] = (uint8_t)(hysteresis1);
 80026fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002700:	b2db      	uxtb	r3, r3
 8002702:	75bb      	strb	r3, [r7, #22]
            no_mot_config[3] = (uint8_t)((hysteresis2) >> 8);
 8002704:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002706:	0a1b      	lsrs	r3, r3, #8
 8002708:	b29b      	uxth	r3, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	75fb      	strb	r3, [r7, #23]
            no_mot_config[4] = (uint8_t)(duration1);
 800270e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002710:	b2db      	uxtb	r3, r3
 8002712:	763b      	strb	r3, [r7, #24]
            no_mot_config[5] = (uint8_t)((duration2 | wait_time) >> 8);
 8002714:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002716:	8bfb      	ldrh	r3, [r7, #30]
 8002718:	4313      	orrs	r3, r2
 800271a:	b29b      	uxth	r3, r3
 800271c:	0a1b      	lsrs	r3, r3, #8
 800271e:	b29b      	uxth	r3, r3
 8002720:	b2db      	uxtb	r3, r3
 8002722:	767b      	strb	r3, [r7, #25]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, no_mot_config, 6, dev);
 8002724:	f107 0114 	add.w	r1, r7, #20
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	2206      	movs	r2, #6
 800272c:	2042      	movs	r0, #66	; 0x42
 800272e:	f7fe ff02 	bl	8001536 <bmi3_set_regs>
 8002732:	4603      	mov	r3, r0
 8002734:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002738:	e002      	b.n	8002740 <set_no_motion_config+0x1b2>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800273a:	23ff      	movs	r3, #255	; 0xff
 800273c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 8002740:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8002744:	4618      	mov	r0, r3
 8002746:	3738      	adds	r7, #56	; 0x38
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <get_flat_config>:
/*!
 * @brief This internal API gets flat configurations like theta, blocking,
 * hold-time, hysteresis, and slope threshold.
 */
static int8_t get_flat_config(struct bmi3_flat_config *config, struct bmi3_dev *dev)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t flat_config[4] = { 0 };
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]

    /* Array to set the base address of flat feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_FLAT, 0 };
 800275a:	230b      	movs	r3, #11
 800275c:	813b      	strh	r3, [r7, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	75bb      	strb	r3, [r7, #22]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d063      	beq.n	8002830 <get_flat_config+0xe4>
    {
        /* Set the flat base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002768:	f107 0108 	add.w	r1, r7, #8
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	2202      	movs	r2, #2
 8002770:	2041      	movs	r0, #65	; 0x41
 8002772:	f7fe fee0 	bl	8001536 <bmi3_set_regs>
 8002776:	4603      	mov	r3, r0
 8002778:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 800277a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d158      	bne.n	8002834 <get_flat_config+0xe8>
        {
            /* Get the configuration from the feature engine register where flat feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, flat_config, 4, dev);
 8002782:	f107 010c 	add.w	r1, r7, #12
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2204      	movs	r2, #4
 800278a:	2042      	movs	r0, #66	; 0x42
 800278c:	f7fe fe6e 	bl	800146c <bmi3_get_regs>
 8002790:	4603      	mov	r3, r0
 8002792:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8002794:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d14b      	bne.n	8002834 <get_flat_config+0xe8>
            {
                /* Get word to calculate theta, blocking and hold time from the same word */
                lsb = (uint16_t) flat_config[idx++];
 800279c:	7dbb      	ldrb	r3, [r7, #22]
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	75ba      	strb	r2, [r7, #22]
 80027a2:	3318      	adds	r3, #24
 80027a4:	443b      	add	r3, r7
 80027a6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80027aa:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) flat_config[idx++] << 8);
 80027ac:	7dbb      	ldrb	r3, [r7, #22]
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	75ba      	strb	r2, [r7, #22]
 80027b2:	3318      	adds	r3, #24
 80027b4:	443b      	add	r3, r7
 80027b6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	021b      	lsls	r3, r3, #8
 80027be:	827b      	strh	r3, [r7, #18]
                lsb_msb = (lsb | msb);
 80027c0:	8aba      	ldrh	r2, [r7, #20]
 80027c2:	8a7b      	ldrh	r3, [r7, #18]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	823b      	strh	r3, [r7, #16]

                /* Get theta */
                config->theta = lsb_msb & BMI3_FLAT_THETA_MASK;
 80027c8:	8a3b      	ldrh	r3, [r7, #16]
 80027ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	801a      	strh	r2, [r3, #0]

                /* Get blocking */
                config->blocking = (lsb_msb & BMI3_FLAT_BLOCKING_MASK) >> BMI3_FLAT_BLOCKING_POS;
 80027d4:	8a3b      	ldrh	r3, [r7, #16]
 80027d6:	119b      	asrs	r3, r3, #6
 80027d8:	b29b      	uxth	r3, r3
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	b29a      	uxth	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	805a      	strh	r2, [r3, #2]

                /* Get hold time */
                config->hold_time = (lsb_msb & BMI3_FLAT_HOLD_TIME_MASK) >> BMI3_FLAT_HOLD_TIME_POS;
 80027e4:	8a3b      	ldrh	r3, [r7, #16]
 80027e6:	0a1b      	lsrs	r3, r3, #8
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate slope threshold and hysteresis from the same word */
                lsb = (uint16_t) flat_config[idx++];
 80027ee:	7dbb      	ldrb	r3, [r7, #22]
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	75ba      	strb	r2, [r7, #22]
 80027f4:	3318      	adds	r3, #24
 80027f6:	443b      	add	r3, r7
 80027f8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80027fc:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) flat_config[idx++] << 8);
 80027fe:	7dbb      	ldrb	r3, [r7, #22]
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	75ba      	strb	r2, [r7, #22]
 8002804:	3318      	adds	r3, #24
 8002806:	443b      	add	r3, r7
 8002808:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800280c:	b29b      	uxth	r3, r3
 800280e:	021b      	lsls	r3, r3, #8
 8002810:	827b      	strh	r3, [r7, #18]
                lsb_msb = lsb | msb;
 8002812:	8aba      	ldrh	r2, [r7, #20]
 8002814:	8a7b      	ldrh	r3, [r7, #18]
 8002816:	4313      	orrs	r3, r2
 8002818:	823b      	strh	r3, [r7, #16]

                /* Get slope threshold */
                config->slope_thres = lsb_msb & BMI3_FLAT_SLOPE_THRES_MASK;
 800281a:	8a3b      	ldrh	r3, [r7, #16]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	b29a      	uxth	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	811a      	strh	r2, [r3, #8]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_FLAT_HYST_MASK) >> BMI3_FLAT_HYST_POS;
 8002824:	8a3b      	ldrh	r3, [r7, #16]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	b29a      	uxth	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	809a      	strh	r2, [r3, #4]
 800282e:	e001      	b.n	8002834 <get_flat_config+0xe8>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002830:	23ff      	movs	r3, #255	; 0xff
 8002832:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002834:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <set_flat_config>:
/*!
 * @brief This internal API sets flat configurations like theta, blocking,
 * hold-time, hysteresis, and slope threshold.
 */
static int8_t set_flat_config(const struct bmi3_flat_config *config, struct bmi3_dev *dev)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t flat_config[4] = { 0 };
 800284a:	2300      	movs	r3, #0
 800284c:	613b      	str	r3, [r7, #16]

    /* Array to set the base address of flat feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_FLAT, 0 };
 800284e:	230b      	movs	r3, #11
 8002850:	81bb      	strh	r3, [r7, #12]

    uint16_t theta, blocking, holdtime, slope_thres, hyst;

    if (config != NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d071      	beq.n	800293c <set_flat_config+0xfc>
    {
        /* Set the flat base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002858:	f107 010c 	add.w	r1, r7, #12
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2202      	movs	r2, #2
 8002860:	2041      	movs	r0, #65	; 0x41
 8002862:	f7fe fe68 	bl	8001536 <bmi3_set_regs>
 8002866:	4603      	mov	r3, r0
 8002868:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 800286a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d166      	bne.n	8002940 <set_flat_config+0x100>
        {
            /* Set theta */
            theta = BMI3_SET_BIT_POS0(flat_config[0], BMI3_FLAT_THETA, config->theta);
 8002872:	7c3b      	ldrb	r3, [r7, #16]
 8002874:	b21b      	sxth	r3, r3
 8002876:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800287a:	b21a      	sxth	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	b21b      	sxth	r3, r3
 8002882:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002886:	b21b      	sxth	r3, r3
 8002888:	4313      	orrs	r3, r2
 800288a:	b21b      	sxth	r3, r3
 800288c:	83bb      	strh	r3, [r7, #28]

            /* Set blocking */
            blocking = BMI3_SET_BITS(flat_config[0], BMI3_FLAT_BLOCKING, config->blocking);
 800288e:	7c3b      	ldrb	r3, [r7, #16]
 8002890:	b21b      	sxth	r3, r3
 8002892:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002896:	b21a      	sxth	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	885b      	ldrh	r3, [r3, #2]
 800289c:	019b      	lsls	r3, r3, #6
 800289e:	b21b      	sxth	r3, r3
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	b21b      	sxth	r3, r3
 80028a4:	4313      	orrs	r3, r2
 80028a6:	b21b      	sxth	r3, r3
 80028a8:	837b      	strh	r3, [r7, #26]

            /* Set hold time */
            holdtime = ((uint16_t)flat_config[1] << 8);
 80028aa:	7c7b      	ldrb	r3, [r7, #17]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	021b      	lsls	r3, r3, #8
 80028b0:	833b      	strh	r3, [r7, #24]
            holdtime = BMI3_SET_BITS(holdtime, BMI3_FLAT_HOLD_TIME, config->hold_time);
 80028b2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	b21a      	sxth	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	88db      	ldrh	r3, [r3, #6]
 80028be:	021b      	lsls	r3, r3, #8
 80028c0:	b21b      	sxth	r3, r3
 80028c2:	4313      	orrs	r3, r2
 80028c4:	b21b      	sxth	r3, r3
 80028c6:	833b      	strh	r3, [r7, #24]

            /* Set slope threshold */
            slope_thres = BMI3_SET_BIT_POS0(flat_config[2], BMI3_FLAT_SLOPE_THRES, config->slope_thres);
 80028c8:	7cbb      	ldrb	r3, [r7, #18]
 80028ca:	b21b      	sxth	r3, r3
 80028cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028d0:	b21a      	sxth	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	891b      	ldrh	r3, [r3, #8]
 80028d6:	b21b      	sxth	r3, r3
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	b21b      	sxth	r3, r3
 80028dc:	4313      	orrs	r3, r2
 80028de:	b21b      	sxth	r3, r3
 80028e0:	82fb      	strh	r3, [r7, #22]

            /* Set hysteresis */
            hyst = ((uint16_t)flat_config[3] << 8);
 80028e2:	7cfb      	ldrb	r3, [r7, #19]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	021b      	lsls	r3, r3, #8
 80028e8:	82bb      	strh	r3, [r7, #20]
            hyst = BMI3_SET_BITS(hyst, BMI3_FLAT_HYST, config->hysteresis);
 80028ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	b21a      	sxth	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	889b      	ldrh	r3, [r3, #4]
 80028f6:	021b      	lsls	r3, r3, #8
 80028f8:	b21b      	sxth	r3, r3
 80028fa:	4313      	orrs	r3, r2
 80028fc:	b21b      	sxth	r3, r3
 80028fe:	82bb      	strh	r3, [r7, #20]

            flat_config[0] = (uint8_t)(theta | blocking);
 8002900:	8bbb      	ldrh	r3, [r7, #28]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	8b7b      	ldrh	r3, [r7, #26]
 8002906:	b2db      	uxtb	r3, r3
 8002908:	4313      	orrs	r3, r2
 800290a:	b2db      	uxtb	r3, r3
 800290c:	743b      	strb	r3, [r7, #16]
            flat_config[1] = (uint8_t)(holdtime >> 8);
 800290e:	8b3b      	ldrh	r3, [r7, #24]
 8002910:	0a1b      	lsrs	r3, r3, #8
 8002912:	b29b      	uxth	r3, r3
 8002914:	b2db      	uxtb	r3, r3
 8002916:	747b      	strb	r3, [r7, #17]
            flat_config[2] = (uint8_t)(slope_thres);
 8002918:	8afb      	ldrh	r3, [r7, #22]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	74bb      	strb	r3, [r7, #18]
            flat_config[3] = (uint8_t)(hyst >> 8);
 800291e:	8abb      	ldrh	r3, [r7, #20]
 8002920:	0a1b      	lsrs	r3, r3, #8
 8002922:	b29b      	uxth	r3, r3
 8002924:	b2db      	uxtb	r3, r3
 8002926:	74fb      	strb	r3, [r7, #19]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, flat_config, 4, dev);
 8002928:	f107 0110 	add.w	r1, r7, #16
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	2204      	movs	r2, #4
 8002930:	2042      	movs	r0, #66	; 0x42
 8002932:	f7fe fe00 	bl	8001536 <bmi3_set_regs>
 8002936:	4603      	mov	r3, r0
 8002938:	77fb      	strb	r3, [r7, #31]
 800293a:	e001      	b.n	8002940 <set_flat_config+0x100>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800293c:	23ff      	movs	r3, #255	; 0xff
 800293e:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002940:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3720      	adds	r7, #32
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <get_sig_motion_config>:
/*!
 * @brief This internal API gets sig-motion configurations like block size,
 * peak 2 peak min, mcr min, peak 2 peak max and mcr max.
 */
static int8_t get_sig_motion_config(struct bmi3_sig_motion_config *config, struct bmi3_dev *dev)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b088      	sub	sp, #32
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]

    /* Variable to define a word */
    uint16_t lsb_msb;

    /* Array to set the base address of sig-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_SIG_MOTION, 0 };
 8002956:	230d      	movs	r3, #13
 8002958:	81bb      	strh	r3, [r7, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	77bb      	strb	r3, [r7, #30]

    if (config != NULL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d077      	beq.n	8002a54 <get_sig_motion_config+0x108>
    {
        /* Set the sig-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002964:	f107 010c 	add.w	r1, r7, #12
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	2202      	movs	r2, #2
 800296c:	2041      	movs	r0, #65	; 0x41
 800296e:	f7fe fde2 	bl	8001536 <bmi3_set_regs>
 8002972:	4603      	mov	r3, r0
 8002974:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8002976:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d16c      	bne.n	8002a58 <get_sig_motion_config+0x10c>
        {
            /* Get the configuration from the feature engine register where sig motion feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, sig_mot_config, 6, dev);
 800297e:	f107 0110 	add.w	r1, r7, #16
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2206      	movs	r2, #6
 8002986:	2042      	movs	r0, #66	; 0x42
 8002988:	f7fe fd70 	bl	800146c <bmi3_get_regs>
 800298c:	4603      	mov	r3, r0
 800298e:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 8002990:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d15f      	bne.n	8002a58 <get_sig_motion_config+0x10c>
            {
                /* Get word to calculate block size */
                lsb = (uint16_t) sig_mot_config[idx++];
 8002998:	7fbb      	ldrb	r3, [r7, #30]
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	77ba      	strb	r2, [r7, #30]
 800299e:	3320      	adds	r3, #32
 80029a0:	443b      	add	r3, r7
 80029a2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80029a6:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) sig_mot_config[idx++] << 8);
 80029a8:	7fbb      	ldrb	r3, [r7, #30]
 80029aa:	1c5a      	adds	r2, r3, #1
 80029ac:	77ba      	strb	r2, [r7, #30]
 80029ae:	3320      	adds	r3, #32
 80029b0:	443b      	add	r3, r7
 80029b2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	021b      	lsls	r3, r3, #8
 80029ba:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 80029bc:	8bba      	ldrh	r2, [r7, #28]
 80029be:	8b7b      	ldrh	r3, [r7, #26]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	833b      	strh	r3, [r7, #24]

                /* Get block size */
                config->block_size = lsb_msb & BMI3_SIG_BLOCK_SIZE_MASK;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	8b3a      	ldrh	r2, [r7, #24]
 80029c8:	801a      	strh	r2, [r3, #0]

                /* Get word to calculate peak 2 peak minimum from the same word */
                lsb = (uint16_t) sig_mot_config[idx++];
 80029ca:	7fbb      	ldrb	r3, [r7, #30]
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	77ba      	strb	r2, [r7, #30]
 80029d0:	3320      	adds	r3, #32
 80029d2:	443b      	add	r3, r7
 80029d4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80029d8:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) sig_mot_config[idx++] << 8);
 80029da:	7fbb      	ldrb	r3, [r7, #30]
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	77ba      	strb	r2, [r7, #30]
 80029e0:	3320      	adds	r3, #32
 80029e2:	443b      	add	r3, r7
 80029e4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	021b      	lsls	r3, r3, #8
 80029ec:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 80029ee:	8bba      	ldrh	r2, [r7, #28]
 80029f0:	8b7b      	ldrh	r3, [r7, #26]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	833b      	strh	r3, [r7, #24]

                /* Get peak 2 peak minimum */
                config->peak_2_peak_min = (lsb_msb & BMI3_SIG_P2P_MIN_MASK);
 80029f6:	8b3b      	ldrh	r3, [r7, #24]
 80029f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	805a      	strh	r2, [r3, #2]

                /* Get mcr minimum */
                config->mcr_min = (lsb_msb & BMI3_SIG_MCR_MIN_MASK) >> BMI3_SIG_MCR_MIN_POS;
 8002a02:	8b3b      	ldrh	r3, [r7, #24]
 8002a04:	0a9b      	lsrs	r3, r3, #10
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate peak 2 peak maximum and mcr maximum from the same word */
                lsb = (uint16_t) sig_mot_config[idx++];
 8002a0e:	7fbb      	ldrb	r3, [r7, #30]
 8002a10:	1c5a      	adds	r2, r3, #1
 8002a12:	77ba      	strb	r2, [r7, #30]
 8002a14:	3320      	adds	r3, #32
 8002a16:	443b      	add	r3, r7
 8002a18:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002a1c:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) sig_mot_config[idx++] << 8);
 8002a1e:	7fbb      	ldrb	r3, [r7, #30]
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	77ba      	strb	r2, [r7, #30]
 8002a24:	3320      	adds	r3, #32
 8002a26:	443b      	add	r3, r7
 8002a28:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	021b      	lsls	r3, r3, #8
 8002a30:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8002a32:	8bba      	ldrh	r2, [r7, #28]
 8002a34:	8b7b      	ldrh	r3, [r7, #26]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	833b      	strh	r3, [r7, #24]

                /* Get peak 2 peak maximum */
                config->peak_2_peak_max = (lsb_msb & BMI3_SIG_P2P_MAX_MASK);
 8002a3a:	8b3b      	ldrh	r3, [r7, #24]
 8002a3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	80da      	strh	r2, [r3, #6]

                /* Get mcr maximum */
                config->mcr_max = (lsb_msb & BMI3_MCR_MAX_MASK) >> BMI3_MCR_MAX_POS;
 8002a46:	8b3b      	ldrh	r3, [r7, #24]
 8002a48:	0a9b      	lsrs	r3, r3, #10
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	721a      	strb	r2, [r3, #8]
 8002a52:	e001      	b.n	8002a58 <get_sig_motion_config+0x10c>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002a54:	23ff      	movs	r3, #255	; 0xff
 8002a56:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002a58:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3720      	adds	r7, #32
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <set_sig_motion_config>:
/*!
 * @brief This internal API sets sig-motion configurations like block size,
 * peak 2 peak min, mcr min, peak 2 peak max and mcr max.
 */
static int8_t set_sig_motion_config(const struct bmi3_sig_motion_config *config, struct bmi3_dev *dev)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08e      	sub	sp, #56	; 0x38
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of sig-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_SIG_MOTION, 0 };
 8002a6e:	230d      	movs	r3, #13
 8002a70:	83bb      	strh	r3, [r7, #28]

    /* Array to define the feature configuration */
    uint8_t sig_mot_config[6] = { 0 };
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	2300      	movs	r3, #0
 8002a78:	833b      	strh	r3, [r7, #24]

    uint8_t data_array[6] = { 0 };
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	823b      	strh	r3, [r7, #16]

    uint16_t mcr_min;

    uint16_t mcr_max;

    if (config != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 80aa 	beq.w	8002bde <set_sig_motion_config+0x17a>
    {
        /* Set the sig-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002a8a:	f107 011c 	add.w	r1, r7, #28
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2202      	movs	r2, #2
 8002a92:	2041      	movs	r0, #65	; 0x41
 8002a94:	f7fe fd4f 	bl	8001536 <bmi3_set_regs>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        if (rslt == BMI3_OK)
 8002a9e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f040 809e 	bne.w	8002be4 <set_sig_motion_config+0x180>
        {
            /* Set block size for lsb 8 bits */
            block_size1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_SIG_BLOCK_SIZE, config->block_size);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	86bb      	strh	r3, [r7, #52]	; 0x34

            block_size = ((uint16_t)data_array[1] << 8);
 8002aae:	7b7b      	ldrb	r3, [r7, #13]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	021b      	lsls	r3, r3, #8
 8002ab4:	867b      	strh	r3, [r7, #50]	; 0x32

            /* Set block size for msb 8 bits */
            block_size2 = BMI3_SET_BIT_POS0(block_size, BMI3_SIG_BLOCK_SIZE, config->block_size);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	863b      	strh	r3, [r7, #48]	; 0x30

            /* Set peak to peak minimum for lsb 8 bits */
            p2p_min1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_SIG_P2P_MIN, config->peak_2_peak_min);
 8002abc:	7bbb      	ldrb	r3, [r7, #14]
 8002abe:	b21b      	sxth	r3, r3
 8002ac0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ac4:	f023 0303 	bic.w	r3, r3, #3
 8002ac8:	b21a      	sxth	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	885b      	ldrh	r3, [r3, #2]
 8002ace:	b21b      	sxth	r3, r3
 8002ad0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ad4:	b21b      	sxth	r3, r3
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	b21b      	sxth	r3, r3
 8002ada:	85fb      	strh	r3, [r7, #46]	; 0x2e

            p2p_min = ((uint16_t)data_array[3] << 8);
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	021b      	lsls	r3, r3, #8
 8002ae2:	85bb      	strh	r3, [r7, #44]	; 0x2c

            /* Set peak to peak minimum for msb 8 bits */
            p2p_min2 = BMI3_SET_BIT_POS0(p2p_min, BMI3_SIG_P2P_MIN, config->peak_2_peak_min);
 8002ae4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002ae8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002aec:	f023 0303 	bic.w	r3, r3, #3
 8002af0:	b21a      	sxth	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	885b      	ldrh	r3, [r3, #2]
 8002af6:	b21b      	sxth	r3, r3
 8002af8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002afc:	b21b      	sxth	r3, r3
 8002afe:	4313      	orrs	r3, r2
 8002b00:	b21b      	sxth	r3, r3
 8002b02:	857b      	strh	r3, [r7, #42]	; 0x2a

            mcr_min = ((uint16_t)data_array[3] << 8);
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	853b      	strh	r3, [r7, #40]	; 0x28

            /* Set mcr minimum */
            mcr_min = BMI3_SET_BITS(mcr_min, BMI3_SIG_MCR_MIN, config->mcr_min);
 8002b0c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8002b10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b14:	b21a      	sxth	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	791b      	ldrb	r3, [r3, #4]
 8002b1a:	029b      	lsls	r3, r3, #10
 8002b1c:	b21b      	sxth	r3, r3
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	b21b      	sxth	r3, r3
 8002b22:	853b      	strh	r3, [r7, #40]	; 0x28

            /* Set peak to peak maximum for lsb 8 bits */
            p2p_max1 = BMI3_SET_BIT_POS0(data_array[4], BMI3_SIG_P2P_MAX, config->peak_2_peak_max);
 8002b24:	7c3b      	ldrb	r3, [r7, #16]
 8002b26:	b21b      	sxth	r3, r3
 8002b28:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b2c:	f023 0303 	bic.w	r3, r3, #3
 8002b30:	b21a      	sxth	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	88db      	ldrh	r3, [r3, #6]
 8002b36:	b21b      	sxth	r3, r3
 8002b38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b3c:	b21b      	sxth	r3, r3
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	b21b      	sxth	r3, r3
 8002b42:	84fb      	strh	r3, [r7, #38]	; 0x26

            p2p_max = ((uint16_t)data_array[5] << 8);
 8002b44:	7c7b      	ldrb	r3, [r7, #17]
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	021b      	lsls	r3, r3, #8
 8002b4a:	84bb      	strh	r3, [r7, #36]	; 0x24

            /* Set peak to peak maximum for msb 8 bits */
            p2p_max2 = BMI3_SET_BIT_POS0(p2p_max, BMI3_SIG_P2P_MAX, config->peak_2_peak_max);
 8002b4c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002b50:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b54:	f023 0303 	bic.w	r3, r3, #3
 8002b58:	b21a      	sxth	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	88db      	ldrh	r3, [r3, #6]
 8002b5e:	b21b      	sxth	r3, r3
 8002b60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b64:	b21b      	sxth	r3, r3
 8002b66:	4313      	orrs	r3, r2
 8002b68:	b21b      	sxth	r3, r3
 8002b6a:	847b      	strh	r3, [r7, #34]	; 0x22

            mcr_max = ((uint16_t)data_array[5] << 8);
 8002b6c:	7c7b      	ldrb	r3, [r7, #17]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	021b      	lsls	r3, r3, #8
 8002b72:	843b      	strh	r3, [r7, #32]

            /* Set mcr maximum */
            mcr_max = BMI3_SET_BITS(mcr_max, BMI3_MCR_MAX, config->mcr_max);
 8002b74:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002b78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b7c:	b21a      	sxth	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	7a1b      	ldrb	r3, [r3, #8]
 8002b82:	029b      	lsls	r3, r3, #10
 8002b84:	b21b      	sxth	r3, r3
 8002b86:	4313      	orrs	r3, r2
 8002b88:	b21b      	sxth	r3, r3
 8002b8a:	843b      	strh	r3, [r7, #32]

            sig_mot_config[0] = (uint8_t)(block_size1);
 8002b8c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	753b      	strb	r3, [r7, #20]
            sig_mot_config[1] = (uint8_t)(block_size2 >> 8);
 8002b92:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002b94:	0a1b      	lsrs	r3, r3, #8
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	757b      	strb	r3, [r7, #21]
            sig_mot_config[2] = (uint8_t)(p2p_min1);
 8002b9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	75bb      	strb	r3, [r7, #22]
            sig_mot_config[3] = (uint8_t)((p2p_min2 | mcr_min) >> 8);
 8002ba2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002ba4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	0a1b      	lsrs	r3, r3, #8
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	75fb      	strb	r3, [r7, #23]
            sig_mot_config[4] = (uint8_t)(p2p_max1);
 8002bb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	763b      	strb	r3, [r7, #24]
            sig_mot_config[5] = (uint8_t)((p2p_max2 | mcr_max) >> 8);
 8002bb8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002bba:	8c3b      	ldrh	r3, [r7, #32]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	0a1b      	lsrs	r3, r3, #8
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	767b      	strb	r3, [r7, #25]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, sig_mot_config, 6, dev);
 8002bc8:	f107 0114 	add.w	r1, r7, #20
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	2206      	movs	r2, #6
 8002bd0:	2042      	movs	r0, #66	; 0x42
 8002bd2:	f7fe fcb0 	bl	8001536 <bmi3_set_regs>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002bdc:	e002      	b.n	8002be4 <set_sig_motion_config+0x180>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002bde:	23ff      	movs	r3, #255	; 0xff
 8002be0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 8002be4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3738      	adds	r7, #56	; 0x38
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <get_tilt_config>:
/*!
 * @brief This internal API gets tilt configurations like segment size,
 * tilt angle, beta accel mean.
 */
static int8_t get_tilt_config(struct bmi3_tilt_config *config, struct bmi3_dev *dev)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t tilt_config[4] = { 0 };
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]

    /* Array to set the base address of tilt feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_TILT, 0 };
 8002bfe:	2321      	movs	r3, #33	; 0x21
 8002c00:	813b      	strh	r3, [r7, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	75bb      	strb	r3, [r7, #22]
    uint16_t msb;

    /* Variable to define word */
    uint16_t lsb_msb;

    if (config != NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d057      	beq.n	8002cbc <get_tilt_config+0xcc>
    {
        /* Set the tilt base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002c0c:	f107 0108 	add.w	r1, r7, #8
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	2202      	movs	r2, #2
 8002c14:	2041      	movs	r0, #65	; 0x41
 8002c16:	f7fe fc8e 	bl	8001536 <bmi3_set_regs>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8002c1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d14c      	bne.n	8002cc0 <get_tilt_config+0xd0>
        {
            /* Get the configuration from the feature engine register where tilt feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, tilt_config, 4, dev);
 8002c26:	f107 010c 	add.w	r1, r7, #12
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2204      	movs	r2, #4
 8002c2e:	2042      	movs	r0, #66	; 0x42
 8002c30:	f7fe fc1c 	bl	800146c <bmi3_get_regs>
 8002c34:	4603      	mov	r3, r0
 8002c36:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8002c38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d13f      	bne.n	8002cc0 <get_tilt_config+0xd0>
            {
                /* Get word to calculate segment size and minimum tilt angle from the same word */
                lsb = ((uint16_t)tilt_config[idx++]);
 8002c40:	7dbb      	ldrb	r3, [r7, #22]
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	75ba      	strb	r2, [r7, #22]
 8002c46:	3318      	adds	r3, #24
 8002c48:	443b      	add	r3, r7
 8002c4a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002c4e:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t)tilt_config[idx++]);
 8002c50:	7dbb      	ldrb	r3, [r7, #22]
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	75ba      	strb	r2, [r7, #22]
 8002c56:	3318      	adds	r3, #24
 8002c58:	443b      	add	r3, r7
 8002c5a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002c5e:	827b      	strh	r3, [r7, #18]
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8002c60:	8a7b      	ldrh	r3, [r7, #18]
 8002c62:	021b      	lsls	r3, r3, #8
 8002c64:	b21a      	sxth	r2, r3
 8002c66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	b21b      	sxth	r3, r3
 8002c6e:	823b      	strh	r3, [r7, #16]

                /* Get segment size */
                config->segment_size = lsb_msb & BMI3_TILT_SEGMENT_SIZE_MASK;
 8002c70:	8a3b      	ldrh	r3, [r7, #16]
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	801a      	strh	r2, [r3, #0]

                /* Get minimum tilt angle */
                config->min_tilt_angle = (lsb_msb & BMI3_TILT_MIN_TILT_ANGLE_MASK) >> BMI3_TILT_MIN_TILT_ANGLE_POS;
 8002c7a:	8a3b      	ldrh	r3, [r7, #16]
 8002c7c:	0a1b      	lsrs	r3, r3, #8
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	805a      	strh	r2, [r3, #2]

                /* Get word to calculate beta accel mean */
                lsb = ((uint16_t)tilt_config[idx++]);
 8002c84:	7dbb      	ldrb	r3, [r7, #22]
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	75ba      	strb	r2, [r7, #22]
 8002c8a:	3318      	adds	r3, #24
 8002c8c:	443b      	add	r3, r7
 8002c8e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002c92:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t)tilt_config[idx++]);
 8002c94:	7dbb      	ldrb	r3, [r7, #22]
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	75ba      	strb	r2, [r7, #22]
 8002c9a:	3318      	adds	r3, #24
 8002c9c:	443b      	add	r3, r7
 8002c9e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002ca2:	827b      	strh	r3, [r7, #18]
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8002ca4:	8a7b      	ldrh	r3, [r7, #18]
 8002ca6:	021b      	lsls	r3, r3, #8
 8002ca8:	b21a      	sxth	r2, r3
 8002caa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	b21b      	sxth	r3, r3
 8002cb2:	823b      	strh	r3, [r7, #16]

                /* Get beta accel mean */
                config->beta_acc_mean = lsb_msb & BMI3_TILT_BETA_ACC_MEAN_MASK;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	8a3a      	ldrh	r2, [r7, #16]
 8002cb8:	809a      	strh	r2, [r3, #4]
 8002cba:	e001      	b.n	8002cc0 <get_tilt_config+0xd0>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002cbc:	23ff      	movs	r3, #255	; 0xff
 8002cbe:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002cc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <set_tilt_config>:
/*!
 * @brief This internal API sets tilt configurations like segment size,
 * tilt angle, beta accel mean.
 */
static int8_t set_tilt_config(const struct bmi3_tilt_config *config, struct bmi3_dev *dev)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of tilt feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_TILT, 0 };
 8002cd6:	2321      	movs	r3, #33	; 0x21
 8002cd8:	823b      	strh	r3, [r7, #16]

    /* Array to define the feature configuration */
    uint8_t tilt_config[4] = { 0 };
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]

    uint8_t data_array[4] = { 0 };
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]

    uint16_t min_tilt_angle, beta_acc_mean;

    uint16_t segment_size;

    if (config != NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d04c      	beq.n	8002d82 <set_tilt_config+0xb6>
    {
        /* Set the tilt base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002ce8:	f107 0110 	add.w	r1, r7, #16
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	2041      	movs	r0, #65	; 0x41
 8002cf2:	f7fe fc20 	bl	8001536 <bmi3_set_regs>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8002cfa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d141      	bne.n	8002d86 <set_tilt_config+0xba>
        {
            /* Set segment size */
            segment_size = BMI3_SET_BIT_POS0(data_array[0], BMI3_TILT_SEGMENT_SIZE, config->segment_size);
 8002d02:	7a3b      	ldrb	r3, [r7, #8]
 8002d04:	b21b      	sxth	r3, r3
 8002d06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d0a:	b21a      	sxth	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	b21b      	sxth	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	b21b      	sxth	r3, r3
 8002d16:	4313      	orrs	r3, r2
 8002d18:	b21b      	sxth	r3, r3
 8002d1a:	83bb      	strh	r3, [r7, #28]

            min_tilt_angle1 = ((uint16_t)data_array[1] << 8);
 8002d1c:	7a7b      	ldrb	r3, [r7, #9]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	837b      	strh	r3, [r7, #26]

            /* Set minimum tilt angle */
            min_tilt_angle = BMI3_SET_BITS(min_tilt_angle1, BMI3_TILT_MIN_TILT_ANGLE, config->min_tilt_angle);
 8002d24:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	b21a      	sxth	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	885b      	ldrh	r3, [r3, #2]
 8002d30:	021b      	lsls	r3, r3, #8
 8002d32:	b21b      	sxth	r3, r3
 8002d34:	4313      	orrs	r3, r2
 8002d36:	b21b      	sxth	r3, r3
 8002d38:	833b      	strh	r3, [r7, #24]

            /* Set beta accel mean for lsb 8 bits */
            beta_acc_mean1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_TILT_BETA_ACC_MEAN, config->beta_acc_mean);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	889b      	ldrh	r3, [r3, #4]
 8002d3e:	82fb      	strh	r3, [r7, #22]

            beta_acc_mean = ((uint16_t)data_array[3] << 8);
 8002d40:	7afb      	ldrb	r3, [r7, #11]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	82bb      	strh	r3, [r7, #20]

            /* Set beta accel mean for msb 8 bits */
            beta_acc_mean2 = BMI3_SET_BIT_POS0(beta_acc_mean, BMI3_TILT_BETA_ACC_MEAN, config->beta_acc_mean);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	889b      	ldrh	r3, [r3, #4]
 8002d4c:	827b      	strh	r3, [r7, #18]

            tilt_config[0] = (uint8_t)segment_size;
 8002d4e:	8bbb      	ldrh	r3, [r7, #28]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	733b      	strb	r3, [r7, #12]
            tilt_config[1] = (uint8_t)(min_tilt_angle >> 8);
 8002d54:	8b3b      	ldrh	r3, [r7, #24]
 8002d56:	0a1b      	lsrs	r3, r3, #8
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	737b      	strb	r3, [r7, #13]
            tilt_config[2] = (uint8_t)(beta_acc_mean1);
 8002d5e:	8afb      	ldrh	r3, [r7, #22]
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	73bb      	strb	r3, [r7, #14]
            tilt_config[3] = (uint8_t)(beta_acc_mean2 >> 8);
 8002d64:	8a7b      	ldrh	r3, [r7, #18]
 8002d66:	0a1b      	lsrs	r3, r3, #8
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	73fb      	strb	r3, [r7, #15]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, tilt_config, 4, dev);
 8002d6e:	f107 010c 	add.w	r1, r7, #12
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2204      	movs	r2, #4
 8002d76:	2042      	movs	r0, #66	; 0x42
 8002d78:	f7fe fbdd 	bl	8001536 <bmi3_set_regs>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	77fb      	strb	r3, [r7, #31]
 8002d80:	e001      	b.n	8002d86 <set_tilt_config+0xba>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002d82:	23ff      	movs	r3, #255	; 0xff
 8002d84:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002d86:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3720      	adds	r7, #32
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <get_orientation_config>:
/*!
 * @brief This internal API gets orientation configurations like upside enable,
 * mode, blocking, theta, hold time, slope threshold and hysteresis.
 */
static int8_t get_orientation_config(struct bmi3_orientation_config *config, struct bmi3_dev *dev)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b086      	sub	sp, #24
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t orient_config[4] = { 0 };
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60fb      	str	r3, [r7, #12]

    /* Array to set the base address of orient feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ORIENT, 0 };
 8002da0:	231c      	movs	r3, #28
 8002da2:	813b      	strh	r3, [r7, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	75bb      	strb	r3, [r7, #22]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d075      	beq.n	8002e9a <get_orientation_config+0x108>
    {
        /* Set the orient base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002dae:	f107 0108 	add.w	r1, r7, #8
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2202      	movs	r2, #2
 8002db6:	2041      	movs	r0, #65	; 0x41
 8002db8:	f7fe fbbd 	bl	8001536 <bmi3_set_regs>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8002dc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d16a      	bne.n	8002e9e <get_orientation_config+0x10c>
        {
            /* Get the configuration from the feature engine register where orientation feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, orient_config, 4, dev);
 8002dc8:	f107 010c 	add.w	r1, r7, #12
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2204      	movs	r2, #4
 8002dd0:	2042      	movs	r0, #66	; 0x42
 8002dd2:	f7fe fb4b 	bl	800146c <bmi3_get_regs>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8002dda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d15d      	bne.n	8002e9e <get_orientation_config+0x10c>
            {
                /* Get word to calculate upside down enable, mode, blocking, theta and hold time
                 * from the same word */
                lsb = (uint16_t) orient_config[idx++];
 8002de2:	7dbb      	ldrb	r3, [r7, #22]
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	75ba      	strb	r2, [r7, #22]
 8002de8:	3318      	adds	r3, #24
 8002dea:	443b      	add	r3, r7
 8002dec:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002df0:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) orient_config[idx++] << 8);
 8002df2:	7dbb      	ldrb	r3, [r7, #22]
 8002df4:	1c5a      	adds	r2, r3, #1
 8002df6:	75ba      	strb	r2, [r7, #22]
 8002df8:	3318      	adds	r3, #24
 8002dfa:	443b      	add	r3, r7
 8002dfc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	021b      	lsls	r3, r3, #8
 8002e04:	827b      	strh	r3, [r7, #18]
                lsb_msb = lsb | msb;
 8002e06:	8aba      	ldrh	r2, [r7, #20]
 8002e08:	8a7b      	ldrh	r3, [r7, #18]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	823b      	strh	r3, [r7, #16]

                /* Get upside enable */
                config->ud_en = lsb_msb & BMI3_ORIENT_UD_EN_MASK;
 8002e0e:	8a3b      	ldrh	r3, [r7, #16]
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	701a      	strb	r2, [r3, #0]

                /* Get mode */
                config->mode = (lsb_msb & BMI3_ORIENT_MODE_MASK) >> BMI3_ORIENT_MODE_POS;
 8002e1c:	8a3b      	ldrh	r3, [r7, #16]
 8002e1e:	105b      	asrs	r3, r3, #1
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	705a      	strb	r2, [r3, #1]

                /* Get blocking */
                config->blocking = (lsb_msb & BMI3_ORIENT_BLOCKING_MASK) >> BMI3_ORIENT_BLOCKING_POS;
 8002e2c:	8a3b      	ldrh	r3, [r7, #16]
 8002e2e:	10db      	asrs	r3, r3, #3
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	709a      	strb	r2, [r3, #2]

                /* Get theta */
                config->theta = (lsb_msb & BMI3_ORIENT_THETA_MASK) >> BMI3_ORIENT_THETA_POS;
 8002e3c:	8a3b      	ldrh	r3, [r7, #16]
 8002e3e:	115b      	asrs	r3, r3, #5
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	70da      	strb	r2, [r3, #3]

                /* Get hold time */
                config->hold_time = (lsb_msb & BMI3_ORIENT_HOLD_TIME_MASK) >> BMI3_ORIENT_HOLD_TIME_POS;
 8002e4c:	8a3b      	ldrh	r3, [r7, #16]
 8002e4e:	0adb      	lsrs	r3, r3, #11
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate slope threshold and hysteresis from the same word */
                lsb = (uint16_t) orient_config[idx++];
 8002e58:	7dbb      	ldrb	r3, [r7, #22]
 8002e5a:	1c5a      	adds	r2, r3, #1
 8002e5c:	75ba      	strb	r2, [r7, #22]
 8002e5e:	3318      	adds	r3, #24
 8002e60:	443b      	add	r3, r7
 8002e62:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002e66:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) orient_config[idx++] << 8);
 8002e68:	7dbb      	ldrb	r3, [r7, #22]
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	75ba      	strb	r2, [r7, #22]
 8002e6e:	3318      	adds	r3, #24
 8002e70:	443b      	add	r3, r7
 8002e72:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	021b      	lsls	r3, r3, #8
 8002e7a:	827b      	strh	r3, [r7, #18]
                lsb_msb = lsb | msb;
 8002e7c:	8aba      	ldrh	r2, [r7, #20]
 8002e7e:	8a7b      	ldrh	r3, [r7, #18]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	823b      	strh	r3, [r7, #16]

                /* Get slope threshold */
                config->slope_thres = lsb_msb & BMI3_ORIENT_SLOPE_THRES_MASK;
 8002e84:	8a3b      	ldrh	r3, [r7, #16]
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	719a      	strb	r2, [r3, #6]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_ORIENT_HYST_MASK) >> BMI3_ORIENT_HYST_POS;
 8002e8c:	8a3b      	ldrh	r3, [r7, #16]
 8002e8e:	0a1b      	lsrs	r3, r3, #8
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	715a      	strb	r2, [r3, #5]
 8002e98:	e001      	b.n	8002e9e <get_orientation_config+0x10c>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002e9a:	23ff      	movs	r3, #255	; 0xff
 8002e9c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002e9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <set_orientation_config>:
/*!
 * @brief This internal API sets orientation configurations like upside enable,
 * mode, blocking, theta, hold time, slope threshold and hysteresis.
 */
static int8_t set_orientation_config(const struct bmi3_orientation_config *config, struct bmi3_dev *dev)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b08a      	sub	sp, #40	; 0x28
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t orient_config[4] = { 0 };
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	613b      	str	r3, [r7, #16]

    /* Array to set the base address of orient feature */
    uint8_t base_aadr[2] = { BMI3_BASE_ADDR_ORIENT, 0 };
 8002eb8:	231c      	movs	r3, #28
 8002eba:	81bb      	strh	r3, [r7, #12]

    uint16_t ud_en, mode, blocking, theta, theta1, holdtime, slope_thres, hyst;

    if (config != NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 80a4 	beq.w	800300c <set_orientation_config+0x162>
    {
        /* Set the orient base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_aadr, 2, dev);
 8002ec4:	f107 010c 	add.w	r1, r7, #12
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	2041      	movs	r0, #65	; 0x41
 8002ece:	f7fe fb32 	bl	8001536 <bmi3_set_regs>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BMI3_OK)
 8002ed8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f040 8098 	bne.w	8003012 <set_orientation_config+0x168>
        {
            /* Set upside down bit */
            ud_en = BMI3_SET_BIT_POS0(orient_config[0], BMI3_ORIENT_UD_EN, config->ud_en);
 8002ee2:	7c3b      	ldrb	r3, [r7, #16]
 8002ee4:	b21b      	sxth	r3, r3
 8002ee6:	f023 0301 	bic.w	r3, r3, #1
 8002eea:	b21a      	sxth	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	b21b      	sxth	r3, r3
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	b21b      	sxth	r3, r3
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	b21b      	sxth	r3, r3
 8002efc:	84bb      	strh	r3, [r7, #36]	; 0x24

            /* Set mode */
            mode = BMI3_SET_BITS(orient_config[0], BMI3_ORIENT_MODE, config->mode);
 8002efe:	7c3b      	ldrb	r3, [r7, #16]
 8002f00:	b21b      	sxth	r3, r3
 8002f02:	f023 0306 	bic.w	r3, r3, #6
 8002f06:	b21a      	sxth	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	785b      	ldrb	r3, [r3, #1]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	b21b      	sxth	r3, r3
 8002f10:	f003 0306 	and.w	r3, r3, #6
 8002f14:	b21b      	sxth	r3, r3
 8002f16:	4313      	orrs	r3, r2
 8002f18:	b21b      	sxth	r3, r3
 8002f1a:	847b      	strh	r3, [r7, #34]	; 0x22

            /* Set blocking */
            blocking = BMI3_SET_BITS(orient_config[0], BMI3_ORIENT_BLOCKING, config->blocking);
 8002f1c:	7c3b      	ldrb	r3, [r7, #16]
 8002f1e:	b21b      	sxth	r3, r3
 8002f20:	f023 0318 	bic.w	r3, r3, #24
 8002f24:	b21a      	sxth	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	789b      	ldrb	r3, [r3, #2]
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	b21b      	sxth	r3, r3
 8002f2e:	f003 0318 	and.w	r3, r3, #24
 8002f32:	b21b      	sxth	r3, r3
 8002f34:	4313      	orrs	r3, r2
 8002f36:	b21b      	sxth	r3, r3
 8002f38:	843b      	strh	r3, [r7, #32]

            /* Set theta for lsb 8 bits */
            theta1 = BMI3_SET_BITS(orient_config[0], BMI3_ORIENT_THETA, config->theta);
 8002f3a:	7c3b      	ldrb	r3, [r7, #16]
 8002f3c:	b21b      	sxth	r3, r3
 8002f3e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8002f42:	b21a      	sxth	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	78db      	ldrb	r3, [r3, #3]
 8002f48:	015b      	lsls	r3, r3, #5
 8002f4a:	b21b      	sxth	r3, r3
 8002f4c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8002f50:	b21b      	sxth	r3, r3
 8002f52:	4313      	orrs	r3, r2
 8002f54:	b21b      	sxth	r3, r3
 8002f56:	83fb      	strh	r3, [r7, #30]

            theta = ((uint16_t)orient_config[1] << 8);
 8002f58:	7c7b      	ldrb	r3, [r7, #17]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	021b      	lsls	r3, r3, #8
 8002f5e:	83bb      	strh	r3, [r7, #28]

            /* Set theta for msb 8 bits */
            theta = BMI3_SET_BITS(theta, BMI3_ORIENT_THETA, config->theta);
 8002f60:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002f64:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8002f68:	b21a      	sxth	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	78db      	ldrb	r3, [r3, #3]
 8002f6e:	015b      	lsls	r3, r3, #5
 8002f70:	b21b      	sxth	r3, r3
 8002f72:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8002f76:	b21b      	sxth	r3, r3
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	b21b      	sxth	r3, r3
 8002f7c:	83bb      	strh	r3, [r7, #28]

            /* Set hold time */
            holdtime = BMI3_SET_BITS(orient_config[1], BMI3_ORIENT_HOLD_TIME, config->hold_time);
 8002f7e:	7c7b      	ldrb	r3, [r7, #17]
 8002f80:	b21a      	sxth	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	791b      	ldrb	r3, [r3, #4]
 8002f86:	02db      	lsls	r3, r3, #11
 8002f88:	b21b      	sxth	r3, r3
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	b21b      	sxth	r3, r3
 8002f8e:	837b      	strh	r3, [r7, #26]

            /* Set slope threshold */
            slope_thres = BMI3_SET_BIT_POS0(orient_config[2], BMI3_ORIENT_SLOPE_THRES, config->slope_thres);
 8002f90:	7cbb      	ldrb	r3, [r7, #18]
 8002f92:	b21b      	sxth	r3, r3
 8002f94:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f98:	b21a      	sxth	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	799b      	ldrb	r3, [r3, #6]
 8002f9e:	b21b      	sxth	r3, r3
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	b21b      	sxth	r3, r3
 8002fa4:	833b      	strh	r3, [r7, #24]

            /* Set hysteresis */
            hyst = BMI3_SET_BITS(orient_config[3], BMI3_ORIENT_HYST, config->hysteresis);
 8002fa6:	7cfb      	ldrb	r3, [r7, #19]
 8002fa8:	b21a      	sxth	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	795b      	ldrb	r3, [r3, #5]
 8002fae:	021b      	lsls	r3, r3, #8
 8002fb0:	b21b      	sxth	r3, r3
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	b21b      	sxth	r3, r3
 8002fb6:	82fb      	strh	r3, [r7, #22]

            orient_config[0] = (uint8_t)(ud_en | mode | blocking | theta1);
 8002fb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	8c3b      	ldrh	r3, [r7, #32]
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	8bfb      	ldrh	r3, [r7, #30]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	743b      	strb	r3, [r7, #16]
            orient_config[1] = (uint8_t)((theta | holdtime) >> 8);
 8002fd6:	8bba      	ldrh	r2, [r7, #28]
 8002fd8:	8b7b      	ldrh	r3, [r7, #26]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	0a1b      	lsrs	r3, r3, #8
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	747b      	strb	r3, [r7, #17]
            orient_config[2] = (uint8_t)(slope_thres);
 8002fe6:	8b3b      	ldrh	r3, [r7, #24]
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	74bb      	strb	r3, [r7, #18]
            orient_config[3] = (uint8_t)(hyst >> 8);
 8002fec:	8afb      	ldrh	r3, [r7, #22]
 8002fee:	0a1b      	lsrs	r3, r3, #8
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	74fb      	strb	r3, [r7, #19]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, orient_config, 4, dev);
 8002ff6:	f107 0110 	add.w	r1, r7, #16
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2204      	movs	r2, #4
 8002ffe:	2042      	movs	r0, #66	; 0x42
 8003000:	f7fe fa99 	bl	8001536 <bmi3_set_regs>
 8003004:	4603      	mov	r3, r0
 8003006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800300a:	e002      	b.n	8003012 <set_orientation_config+0x168>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800300c:	23ff      	movs	r3, #255	; 0xff
 800300e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8003012:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003016:	4618      	mov	r0, r3
 8003018:	3728      	adds	r7, #40	; 0x28
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <get_step_config>:
/*!
 * @brief This internal API gets step counter configurations like water-mark level,
 * reset counter, step counter parameters and sc_12_res.
 */
static int8_t get_step_config(struct bmi3_step_counter_config *config, struct bmi3_dev *dev)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b08c      	sub	sp, #48	; 0x30
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t step_config[24] = { 0 };
 8003028:	2300      	movs	r3, #0
 800302a:	613b      	str	r3, [r7, #16]
 800302c:	f107 0314 	add.w	r3, r7, #20
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	60da      	str	r2, [r3, #12]
 800303a:	611a      	str	r2, [r3, #16]

    /* Array to set the base address of step counter feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_STEP_CNT, 0 };
 800303c:	2310      	movs	r3, #16
 800303e:	81bb      	strh	r3, [r7, #12]

    /* Variable to define array offset */
    uint8_t idx = 0;
 8003040:	2300      	movs	r3, #0
 8003042:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint16_t msb;

    /* Variable to define word */
    uint16_t lsb_msb;

    if (config != NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 81e7 	beq.w	800341c <get_step_config+0x3fe>
    {
        /* Set the step counter base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 800304e:	f107 010c 	add.w	r1, r7, #12
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2202      	movs	r2, #2
 8003056:	2041      	movs	r0, #65	; 0x41
 8003058:	f7fe fa6d 	bl	8001536 <bmi3_set_regs>
 800305c:	4603      	mov	r3, r0
 800305e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if (rslt == BMI3_OK)
 8003062:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003066:	2b00      	cmp	r3, #0
 8003068:	f040 81db 	bne.w	8003422 <get_step_config+0x404>
        {
            /* Get the configuration from the feature engine register where step counter feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, step_config, 24, dev);
 800306c:	f107 0110 	add.w	r1, r7, #16
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2218      	movs	r2, #24
 8003074:	2042      	movs	r0, #66	; 0x42
 8003076:	f7fe f9f9 	bl	800146c <bmi3_get_regs>
 800307a:	4603      	mov	r3, r0
 800307c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            if (rslt == BMI3_OK)
 8003080:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003084:	2b00      	cmp	r3, #0
 8003086:	f040 81cc 	bne.w	8003422 <get_step_config+0x404>
            {
                /* Get word to calculate water-mark level, reset counter from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 800308a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003094:	3330      	adds	r3, #48	; 0x30
 8003096:	443b      	add	r3, r7
 8003098:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800309c:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 800309e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80030a8:	3330      	adds	r3, #48	; 0x30
 80030aa:	443b      	add	r3, r7
 80030ac:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80030b0:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80030b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030b4:	021b      	lsls	r3, r3, #8
 80030b6:	b21a      	sxth	r2, r3
 80030b8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80030bc:	4313      	orrs	r3, r2
 80030be:	b21b      	sxth	r3, r3
 80030c0:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get water-mark level */
                config->watermark_level = lsb_msb & BMI3_STEP_WATERMARK_MASK;
 80030c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80030c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	801a      	strh	r2, [r3, #0]

                /* Get reset counter */
                config->reset_counter = (lsb_msb & BMI3_STEP_RESET_COUNTER_MASK) >> BMI3_STEP_RESET_COUNTER_POS;
 80030ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80030d0:	129b      	asrs	r3, r3, #10
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	b29a      	uxth	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	805a      	strh	r2, [r3, #2]

                /* Get word to calculate minimum distance up */
                lsb = ((uint16_t)step_config[idx++]);
 80030de:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80030e8:	3330      	adds	r3, #48	; 0x30
 80030ea:	443b      	add	r3, r7
 80030ec:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80030f0:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80030f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80030fc:	3330      	adds	r3, #48	; 0x30
 80030fe:	443b      	add	r3, r7
 8003100:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003104:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003106:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	b21a      	sxth	r2, r3
 800310c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003110:	4313      	orrs	r3, r2
 8003112:	b21b      	sxth	r3, r3
 8003114:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get minimum distance up */
                config->env_min_dist_up = (lsb_msb & BMI3_STEP_ENV_MIN_DIST_UP_MASK);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800311a:	809a      	strh	r2, [r3, #4]

                /* Get word to calculate env coefficient up */
                lsb = ((uint16_t)step_config[idx++]);
 800311c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003126:	3330      	adds	r3, #48	; 0x30
 8003128:	443b      	add	r3, r7
 800312a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800312e:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003130:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800313a:	3330      	adds	r3, #48	; 0x30
 800313c:	443b      	add	r3, r7
 800313e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003142:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003144:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	b21a      	sxth	r2, r3
 800314a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800314e:	4313      	orrs	r3, r2
 8003150:	b21b      	sxth	r3, r3
 8003152:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get env coefficient up */
                config->env_coef_up = (lsb_msb & BMI3_STEP_ENV_COEF_UP_MASK);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003158:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate env minimum distance down */
                lsb = ((uint16_t)step_config[idx++]);
 800315a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003164:	3330      	adds	r3, #48	; 0x30
 8003166:	443b      	add	r3, r7
 8003168:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800316c:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 800316e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003178:	3330      	adds	r3, #48	; 0x30
 800317a:	443b      	add	r3, r7
 800317c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003180:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003182:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	b21a      	sxth	r2, r3
 8003188:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800318c:	4313      	orrs	r3, r2
 800318e:	b21b      	sxth	r3, r3
 8003190:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get env minimum distance down */
                config->env_min_dist_down = (lsb_msb & BMI3_STEP_ENV_MIN_DIST_DOWN_MASK);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003196:	811a      	strh	r2, [r3, #8]

                /* Get word to calculate env coefficient down */
                lsb = ((uint16_t)step_config[idx++]);
 8003198:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80031a2:	3330      	adds	r3, #48	; 0x30
 80031a4:	443b      	add	r3, r7
 80031a6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80031aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80031ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80031b6:	3330      	adds	r3, #48	; 0x30
 80031b8:	443b      	add	r3, r7
 80031ba:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80031be:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80031c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80031c2:	021b      	lsls	r3, r3, #8
 80031c4:	b21a      	sxth	r2, r3
 80031c6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80031ca:	4313      	orrs	r3, r2
 80031cc:	b21b      	sxth	r3, r3
 80031ce:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get env coefficient down */
                config->env_coef_down = (lsb_msb & BMI3_STEP_ENV_COEF_DOWN_MASK);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80031d4:	815a      	strh	r2, [r3, #10]

                /* Get word to calculate mean val decay */
                lsb = ((uint16_t)step_config[idx++]);
 80031d6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80031da:	1c5a      	adds	r2, r3, #1
 80031dc:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80031e0:	3330      	adds	r3, #48	; 0x30
 80031e2:	443b      	add	r3, r7
 80031e4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80031e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80031ea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80031f4:	3330      	adds	r3, #48	; 0x30
 80031f6:	443b      	add	r3, r7
 80031f8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80031fc:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80031fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003200:	021b      	lsls	r3, r3, #8
 8003202:	b21a      	sxth	r2, r3
 8003204:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003208:	4313      	orrs	r3, r2
 800320a:	b21b      	sxth	r3, r3
 800320c:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get mean val decay */
                config->mean_val_decay = (lsb_msb & BMI3_STEP_MEAN_VAL_DECAY_MASK);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003212:	819a      	strh	r2, [r3, #12]

                /* Get word to calculate mean step duration */
                lsb = ((uint16_t)step_config[idx++]);
 8003214:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800321e:	3330      	adds	r3, #48	; 0x30
 8003220:	443b      	add	r3, r7
 8003222:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003226:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003228:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003232:	3330      	adds	r3, #48	; 0x30
 8003234:	443b      	add	r3, r7
 8003236:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800323a:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 800323c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800323e:	021b      	lsls	r3, r3, #8
 8003240:	b21a      	sxth	r2, r3
 8003242:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003246:	4313      	orrs	r3, r2
 8003248:	b21b      	sxth	r3, r3
 800324a:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get mean step duration */
                config->mean_step_dur = (lsb_msb & BMI3_STEP_MEAN_STEP_DUR_MASK);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003250:	81da      	strh	r2, [r3, #14]

                /* Get word to calculate step buffer size, filter cascade enabled and step counter increment
                 * from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 8003252:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800325c:	3330      	adds	r3, #48	; 0x30
 800325e:	443b      	add	r3, r7
 8003260:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003264:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003266:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003270:	3330      	adds	r3, #48	; 0x30
 8003272:	443b      	add	r3, r7
 8003274:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003278:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 800327a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800327c:	021b      	lsls	r3, r3, #8
 800327e:	b21a      	sxth	r2, r3
 8003280:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003284:	4313      	orrs	r3, r2
 8003286:	b21b      	sxth	r3, r3
 8003288:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get step buffer size */
                config->step_buffer_size = lsb_msb & BMI3_STEP_BUFFER_SIZE_MASK;
 800328a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	b29a      	uxth	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	821a      	strh	r2, [r3, #16]

                /* Get filter cascade enable */
                config->filter_cascade_enabled = (lsb_msb & BMI3_STEP_FILTER_CASCADE_ENABLED_MASK) >>
 8003296:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003298:	111b      	asrs	r3, r3, #4
 800329a:	b29b      	uxth	r3, r3
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	825a      	strh	r2, [r3, #18]
                                                 BMI3_STEP_FILTER_CASCADE_ENABLED_POS;

                /* Get step counter increment */
                config->step_counter_increment = (lsb_msb & BMI3_STEP_COUNTER_INCREMENT_MASK) >>
 80032a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032a8:	095b      	lsrs	r3, r3, #5
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	829a      	strh	r2, [r3, #20]
                                                 BMI3_STEP_COUNTER_INCREMENT_POS;

                /* Get word to calculate peak duration minimum walking and peak duration minimum running */
                lsb = ((uint16_t)step_config[idx++]);
 80032b0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80032ba:	3330      	adds	r3, #48	; 0x30
 80032bc:	443b      	add	r3, r7
 80032be:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80032c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80032c4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80032ce:	3330      	adds	r3, #48	; 0x30
 80032d0:	443b      	add	r3, r7
 80032d2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80032d6:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80032d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80032da:	021b      	lsls	r3, r3, #8
 80032dc:	b21a      	sxth	r2, r3
 80032de:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80032e2:	4313      	orrs	r3, r2
 80032e4:	b21b      	sxth	r3, r3
 80032e6:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get peak duration minimum walking */
                config->peak_duration_min_walking = lsb_msb & BMI3_STEP_PEAK_DURATION_MIN_WALKING_MASK;
 80032e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	82da      	strh	r2, [r3, #22]

                /* Get peak duration minimum running */
                config->peak_duration_min_running = (lsb_msb & BMI3_STEP_PEAK_DURATION_MIN_RUNNING_MASK) >>
 80032f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032f4:	0a1b      	lsrs	r3, r3, #8
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	831a      	strh	r2, [r3, #24]
                                                    BMI3_STEP_PEAK_DURATION_MIN_RUNNING_POS;

                /* Get word to calculate activity detection factor and activity detection threshold
                 * from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 80032fc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003306:	3330      	adds	r3, #48	; 0x30
 8003308:	443b      	add	r3, r7
 800330a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800330e:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003310:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800331a:	3330      	adds	r3, #48	; 0x30
 800331c:	443b      	add	r3, r7
 800331e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003322:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003324:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003326:	021b      	lsls	r3, r3, #8
 8003328:	b21a      	sxth	r2, r3
 800332a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800332e:	4313      	orrs	r3, r2
 8003330:	b21b      	sxth	r3, r3
 8003332:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get activity detection factor */
                config->activity_detection_factor = lsb_msb & BMI3_STEP_ACTIVITY_DETECTION_FACTOR_MASK;
 8003334:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	b29a      	uxth	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	835a      	strh	r2, [r3, #26]

                /* Get activity detection threshold */
                config->activity_detection_thres = (lsb_msb & BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD_MASK) >>
 8003340:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003342:	091b      	lsrs	r3, r3, #4
 8003344:	b29a      	uxth	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	839a      	strh	r2, [r3, #28]
                                                   BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD_POS;

                /* Get word to calculate step duration max and step duration window from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 800334a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003354:	3330      	adds	r3, #48	; 0x30
 8003356:	443b      	add	r3, r7
 8003358:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800335c:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 800335e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003368:	3330      	adds	r3, #48	; 0x30
 800336a:	443b      	add	r3, r7
 800336c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003370:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003372:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003374:	021b      	lsls	r3, r3, #8
 8003376:	b21a      	sxth	r2, r3
 8003378:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800337c:	4313      	orrs	r3, r2
 800337e:	b21b      	sxth	r3, r3
 8003380:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get step duration max */
                config->step_duration_max = lsb_msb & BMI3_STEP_DURATION_MAX_MASK;
 8003382:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003384:	b2db      	uxtb	r3, r3
 8003386:	b29a      	uxth	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	83da      	strh	r2, [r3, #30]

                /* Get step duration window */
                config->step_duration_window = (lsb_msb & BMI3_STEP_DURATION_WINDOW_MASK) >>
 800338c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800338e:	0a1b      	lsrs	r3, r3, #8
 8003390:	b29a      	uxth	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	841a      	strh	r2, [r3, #32]
                                               BMI3_STEP_DURATION_WINDOW_POS;

                /* Get word to calculate step duration pp enabled, duration threshold,
                 * mean crossing pp enabled, mcr threshold, sc_12_res from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 8003396:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80033a0:	3330      	adds	r3, #48	; 0x30
 80033a2:	443b      	add	r3, r7
 80033a4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80033a8:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80033aa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80033b4:	3330      	adds	r3, #48	; 0x30
 80033b6:	443b      	add	r3, r7
 80033b8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80033bc:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80033be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033c0:	021b      	lsls	r3, r3, #8
 80033c2:	b21a      	sxth	r2, r3
 80033c4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80033c8:	4313      	orrs	r3, r2
 80033ca:	b21b      	sxth	r3, r3
 80033cc:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get step duration pp enable */
                config->step_duration_pp_enabled = lsb_msb & BMI3_STEP_DURATION_PP_ENABLED_MASK;
 80033ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	845a      	strh	r2, [r3, #34]	; 0x22

                /* Get step duration threshold */
                config->step_duration_thres = (lsb_msb & BMI3_STEP_DURATION_THRESHOLD_MASK) >>
 80033da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80033dc:	105b      	asrs	r3, r3, #1
 80033de:	b29b      	uxth	r3, r3
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	849a      	strh	r2, [r3, #36]	; 0x24
                                              BMI3_STEP_DURATION_THRESHOLD_POS;

                /* Get mean crossing pp enabled */
                config->mean_crossing_pp_enabled = (lsb_msb & BMI3_STEP_MEAN_CROSSING_PP_ENABLED_MASK) >>
 80033ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80033ec:	111b      	asrs	r3, r3, #4
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	84da      	strh	r2, [r3, #38]	; 0x26
                                                   BMI3_STEP_MEAN_CROSSING_PP_ENABLED_POS;

                /* Get mcr threshold */
                config->mcr_threshold = (lsb_msb & BMI3_STEP_MCR_THRESHOLD_MASK) >> BMI3_STEP_MCR_THRESHOLD_POS;
 80033fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80033fc:	115b      	asrs	r3, r3, #5
 80033fe:	b29b      	uxth	r3, r3
 8003400:	f003 031f 	and.w	r3, r3, #31
 8003404:	b29a      	uxth	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	851a      	strh	r2, [r3, #40]	; 0x28

                /* Get sc_12_res selection */
                config->sc_12_res = (lsb_msb & BMI3_STEP_SC_12_RES_MASK) >> BMI3_STEP_SC_12_RES_POS;
 800340a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800340c:	129b      	asrs	r3, r3, #10
 800340e:	b29b      	uxth	r3, r3
 8003410:	f003 0303 	and.w	r3, r3, #3
 8003414:	b29a      	uxth	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	855a      	strh	r2, [r3, #42]	; 0x2a
 800341a:	e002      	b.n	8003422 <get_step_config+0x404>
            }
        }
    }
    else
    {
        rslt = BMI3_E_INVALID_SENSOR;
 800341c:	23fa      	movs	r3, #250	; 0xfa
 800341e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return rslt;
 8003422:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003426:	4618      	mov	r0, r3
 8003428:	3730      	adds	r7, #48	; 0x30
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <set_step_config>:
/*!
 * @brief This internal API sets step counter configurations like water-mark level,
 * reset counter, step counter parameters and sc_12_res.
 */
static int8_t set_step_config(const struct bmi3_step_counter_config *config, struct bmi3_dev *dev)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b0a4      	sub	sp, #144	; 0x90
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of step counter feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_STEP_CNT, 0 };
 8003438:	2310      	movs	r3, #16
 800343a:	873b      	strh	r3, [r7, #56]	; 0x38

    /* Array to define the feature configuration */
    uint8_t step_config[24] = { 0 };
 800343c:	2300      	movs	r3, #0
 800343e:	623b      	str	r3, [r7, #32]
 8003440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	605a      	str	r2, [r3, #4]
 800344a:	609a      	str	r2, [r3, #8]
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	611a      	str	r2, [r3, #16]

    uint8_t data_array[24] = { 0 };
 8003450:	2300      	movs	r3, #0
 8003452:	60bb      	str	r3, [r7, #8]
 8003454:	f107 030c 	add.w	r3, r7, #12
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	609a      	str	r2, [r3, #8]
 8003460:	60da      	str	r2, [r3, #12]
 8003462:	611a      	str	r2, [r3, #16]
    uint16_t reset_counter, activity_detection_factor, step_duration_max, step_duration_window,
             step_duration_pp_enabled;

    uint16_t step_duration_threshold, mean_crossing_pp_enabled, mcr_threshold1, mcr_threshold2, sc_12_res;

    if (config != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 8268 	beq.w	800393c <set_step_config+0x50e>
    {
        /* Set the step counter base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 800346c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	2202      	movs	r2, #2
 8003474:	2041      	movs	r0, #65	; 0x41
 8003476:	f7fe f85e 	bl	8001536 <bmi3_set_regs>
 800347a:	4603      	mov	r3, r0
 800347c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

        if (rslt == BMI3_OK)
 8003480:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8003484:	2b00      	cmp	r3, #0
 8003486:	f040 825c 	bne.w	8003942 <set_step_config+0x514>
        {
            /* Set water-mark for lsb 8 bits */
            watermark1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_STEP_WATERMARK, config->watermark_level);
 800348a:	7a3b      	ldrb	r3, [r7, #8]
 800348c:	b21b      	sxth	r3, r3
 800348e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003492:	f023 0303 	bic.w	r3, r3, #3
 8003496:	b21a      	sxth	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	b21b      	sxth	r3, r3
 800349e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034a2:	b21b      	sxth	r3, r3
 80034a4:	4313      	orrs	r3, r2
 80034a6:	b21b      	sxth	r3, r3
 80034a8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

            watermark = ((uint16_t)data_array[1] << 8);
 80034ac:	7a7b      	ldrb	r3, [r7, #9]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	021b      	lsls	r3, r3, #8
 80034b2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

            /* Set water-mark for msb 8 bits */
            watermark2 = BMI3_SET_BIT_POS0(watermark, BMI3_STEP_WATERMARK, config->watermark_level);
 80034b6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80034ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034be:	f023 0303 	bic.w	r3, r3, #3
 80034c2:	b21a      	sxth	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	b21b      	sxth	r3, r3
 80034ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034ce:	b21b      	sxth	r3, r3
 80034d0:	4313      	orrs	r3, r2
 80034d2:	b21b      	sxth	r3, r3
 80034d4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

            reset_counter = ((uint16_t)data_array[1] << 8);
 80034d8:	7a7b      	ldrb	r3, [r7, #9]
 80034da:	b29b      	uxth	r3, r3
 80034dc:	021b      	lsls	r3, r3, #8
 80034de:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

            /* Set reset counter */
            reset_counter = BMI3_SET_BITS(reset_counter, BMI3_STEP_RESET_COUNTER, config->reset_counter);
 80034e2:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 80034e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034ea:	b21a      	sxth	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	885b      	ldrh	r3, [r3, #2]
 80034f0:	029b      	lsls	r3, r3, #10
 80034f2:	b21b      	sxth	r3, r3
 80034f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f8:	b21b      	sxth	r3, r3
 80034fa:	4313      	orrs	r3, r2
 80034fc:	b21b      	sxth	r3, r3
 80034fe:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

            /* Set env_min_dist_up for lsb 8 bits */
            env_min_dist_up1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_STEP_ENV_MIN_DIST_UP, config->env_min_dist_up);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	889b      	ldrh	r3, [r3, #4]
 8003506:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

            env_min_dist_up = ((uint16_t)data_array[3] << 8);
 800350a:	7afb      	ldrb	r3, [r7, #11]
 800350c:	b29b      	uxth	r3, r3
 800350e:	021b      	lsls	r3, r3, #8
 8003510:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

            /* Set env_min_dist_up for msb 8 bits */
            env_min_dist_up2 = BMI3_SET_BIT_POS0(env_min_dist_up, BMI3_STEP_ENV_MIN_DIST_UP, config->env_min_dist_up);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	889b      	ldrh	r3, [r3, #4]
 8003518:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

            /* Set env_coef_up for lsb 8 bits */
            env_coef_up1 = BMI3_SET_BIT_POS0(data_array[4], BMI3_STEP_ENV_COEF_UP, config->env_coef_up);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	88db      	ldrh	r3, [r3, #6]
 8003520:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

            env_coef_up = ((uint16_t)data_array[5] << 8);
 8003524:	7b7b      	ldrb	r3, [r7, #13]
 8003526:	b29b      	uxth	r3, r3
 8003528:	021b      	lsls	r3, r3, #8
 800352a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

            /* Set env_coef_up for msb 8 bits */
            env_coef_up2 = BMI3_SET_BIT_POS0(env_coef_up, BMI3_STEP_ENV_COEF_UP, config->env_coef_up);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	88db      	ldrh	r3, [r3, #6]
 8003532:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

            /* Set env_min_dist_down for lsb 8 bits */
            env_min_dist_down1 =
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	891b      	ldrh	r3, [r3, #8]
 800353a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
                BMI3_SET_BIT_POS0(data_array[6], BMI3_STEP_ENV_MIN_DIST_DOWN, config->env_min_dist_down);

            env_min_dist_down = ((uint16_t)data_array[7] << 8);
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	b29b      	uxth	r3, r3
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Set env_min_dist_down for msb 8 bits */
            env_min_dist_down2 = BMI3_SET_BIT_POS0(env_min_dist_down,
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	891b      	ldrh	r3, [r3, #8]
 800354c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
                                                   BMI3_STEP_ENV_MIN_DIST_DOWN,
                                                   config->env_min_dist_down);

            /* Set env_coef_down for lsb 8 bits */
            env_coef_down1 = BMI3_SET_BIT_POS0(data_array[8], BMI3_STEP_ENV_COEF_DOWN, config->env_coef_down);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	895b      	ldrh	r3, [r3, #10]
 8003554:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

            env_coef_down = ((uint16_t)data_array[9] << 8);
 8003558:	7c7b      	ldrb	r3, [r7, #17]
 800355a:	b29b      	uxth	r3, r3
 800355c:	021b      	lsls	r3, r3, #8
 800355e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

            /* Set env_coef_down for msb 8 bits */
            env_coef_down2 = BMI3_SET_BIT_POS0(env_coef_down, BMI3_STEP_ENV_COEF_DOWN, config->env_coef_down);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	895b      	ldrh	r3, [r3, #10]
 8003566:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

            /* Set mean_val_decay for lsb 8 bits */
            mean_val_decay1 = BMI3_SET_BIT_POS0(data_array[10], BMI3_STEP_MEAN_VAL_DECAY, config->mean_val_decay);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	899b      	ldrh	r3, [r3, #12]
 800356e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

            mean_val_decay = ((uint16_t)data_array[11] << 8);
 8003572:	7cfb      	ldrb	r3, [r7, #19]
 8003574:	b29b      	uxth	r3, r3
 8003576:	021b      	lsls	r3, r3, #8
 8003578:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

            /* Set mean_val_decay for msb 8 bits */
            mean_val_decay2 = BMI3_SET_BIT_POS0(mean_val_decay, BMI3_STEP_MEAN_VAL_DECAY, config->mean_val_decay);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	899b      	ldrh	r3, [r3, #12]
 8003580:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

            /* Set mean_step_dur for lsb 8 bits */
            mean_step_dur1 = BMI3_SET_BIT_POS0(data_array[12], BMI3_STEP_MEAN_STEP_DUR, config->mean_step_dur);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	89db      	ldrh	r3, [r3, #14]
 8003588:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

            mean_step_dur = ((uint16_t)data_array[13] << 8);
 800358c:	7d7b      	ldrb	r3, [r7, #21]
 800358e:	b29b      	uxth	r3, r3
 8003590:	021b      	lsls	r3, r3, #8
 8003592:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

            /* Set mean_step_dur for msb 8 bits */
            mean_step_dur2 = BMI3_SET_BIT_POS0(mean_step_dur, BMI3_STEP_MEAN_STEP_DUR, config->mean_step_dur);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	89db      	ldrh	r3, [r3, #14]
 800359a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

            /* Set step buffer size */
            step_buffer_size = BMI3_SET_BIT_POS0(data_array[14], BMI3_STEP_BUFFER_SIZE, config->step_buffer_size);
 800359e:	7dbb      	ldrb	r3, [r7, #22]
 80035a0:	b21b      	sxth	r3, r3
 80035a2:	f023 030f 	bic.w	r3, r3, #15
 80035a6:	b21a      	sxth	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8a1b      	ldrh	r3, [r3, #16]
 80035ac:	b21b      	sxth	r3, r3
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	b21b      	sxth	r3, r3
 80035b4:	4313      	orrs	r3, r2
 80035b6:	b21b      	sxth	r3, r3
 80035b8:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

            /* Set filter cascade */
            filter_cascade_enabled = BMI3_SET_BITS(data_array[14],
 80035bc:	7dbb      	ldrb	r3, [r7, #22]
 80035be:	b21b      	sxth	r3, r3
 80035c0:	f023 0310 	bic.w	r3, r3, #16
 80035c4:	b21a      	sxth	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	8a5b      	ldrh	r3, [r3, #18]
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	b21b      	sxth	r3, r3
 80035ce:	f003 0310 	and.w	r3, r3, #16
 80035d2:	b21b      	sxth	r3, r3
 80035d4:	4313      	orrs	r3, r2
 80035d6:	b21b      	sxth	r3, r3
 80035d8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                                                   BMI3_STEP_FILTER_CASCADE_ENABLED,
                                                   config->filter_cascade_enabled);

            /* Set step_counter_increment for lsb 8 bits */
            step_counter_increment1 = BMI3_SET_BITS(data_array[14],
 80035dc:	7dbb      	ldrb	r3, [r7, #22]
 80035de:	b21b      	sxth	r3, r3
 80035e0:	f003 031f 	and.w	r3, r3, #31
 80035e4:	b21a      	sxth	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	8a9b      	ldrh	r3, [r3, #20]
 80035ea:	015b      	lsls	r3, r3, #5
 80035ec:	b21b      	sxth	r3, r3
 80035ee:	4313      	orrs	r3, r2
 80035f0:	b21b      	sxth	r3, r3
 80035f2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
                                                    BMI3_STEP_COUNTER_INCREMENT,
                                                    config->step_counter_increment);

            step_counter_increment2 = ((uint16_t)data_array[15] << 8);
 80035f6:	7dfb      	ldrb	r3, [r7, #23]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	021b      	lsls	r3, r3, #8
 80035fc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            /* Set step_counter_increment for msb 8 bits */
            step_counter_increment2 = BMI3_SET_BITS(step_counter_increment2,
 8003600:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8003604:	f003 031f 	and.w	r3, r3, #31
 8003608:	b21a      	sxth	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	8a9b      	ldrh	r3, [r3, #20]
 800360e:	015b      	lsls	r3, r3, #5
 8003610:	b21b      	sxth	r3, r3
 8003612:	4313      	orrs	r3, r2
 8003614:	b21b      	sxth	r3, r3
 8003616:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
                                                    BMI3_STEP_COUNTER_INCREMENT,
                                                    config->step_counter_increment);

            /* Set peak_duration_min_walking for lsb 8 bits */
            peak_duration_min_walking = BMI3_SET_BIT_POS0(data_array[16],
 800361a:	7e3b      	ldrb	r3, [r7, #24]
 800361c:	b21b      	sxth	r3, r3
 800361e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003622:	b21a      	sxth	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	8adb      	ldrh	r3, [r3, #22]
 8003628:	b21b      	sxth	r3, r3
 800362a:	b2db      	uxtb	r3, r3
 800362c:	b21b      	sxth	r3, r3
 800362e:	4313      	orrs	r3, r2
 8003630:	b21b      	sxth	r3, r3
 8003632:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                                                          BMI3_STEP_PEAK_DURATION_MIN_WALKING,
                                                          config->peak_duration_min_walking);

            peak_duration_min_running = ((uint16_t)data_array[17] << 8);
 8003636:	7e7b      	ldrb	r3, [r7, #25]
 8003638:	b29b      	uxth	r3, r3
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            /* Set peak_duration_min_walking for msb 8 bits */
            peak_duration_min_running = BMI3_SET_BITS(peak_duration_min_running,
 8003640:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8003644:	b2db      	uxtb	r3, r3
 8003646:	b21a      	sxth	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	8b1b      	ldrh	r3, [r3, #24]
 800364c:	021b      	lsls	r3, r3, #8
 800364e:	b21b      	sxth	r3, r3
 8003650:	4313      	orrs	r3, r2
 8003652:	b21b      	sxth	r3, r3
 8003654:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                                                      BMI3_STEP_PEAK_DURATION_MIN_RUNNING,
                                                      config->peak_duration_min_running);

            /* Set activity detection fsctor */
            activity_detection_factor = BMI3_SET_BIT_POS0(data_array[18],
 8003658:	7ebb      	ldrb	r3, [r7, #26]
 800365a:	b21b      	sxth	r3, r3
 800365c:	f023 030f 	bic.w	r3, r3, #15
 8003660:	b21a      	sxth	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	8b5b      	ldrh	r3, [r3, #26]
 8003666:	b21b      	sxth	r3, r3
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	b21b      	sxth	r3, r3
 800366e:	4313      	orrs	r3, r2
 8003670:	b21b      	sxth	r3, r3
 8003672:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                                                          BMI3_STEP_ACTIVITY_DETECTION_FACTOR,
                                                          config->activity_detection_factor);

            /* Set activity_detection_threshold for lsb 8 bits */
            activity_detection_threshold1 = BMI3_SET_BITS(data_array[18],
 8003676:	7ebb      	ldrb	r3, [r7, #26]
 8003678:	b21b      	sxth	r3, r3
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	b21a      	sxth	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	8b9b      	ldrh	r3, [r3, #28]
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	b21b      	sxth	r3, r3
 8003688:	4313      	orrs	r3, r2
 800368a:	b21b      	sxth	r3, r3
 800368c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                                                          BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD,
                                                          config->activity_detection_thres);

            activity_detection_threshold = ((uint16_t)data_array[19] << 8);
 8003690:	7efb      	ldrb	r3, [r7, #27]
 8003692:	b29b      	uxth	r3, r3
 8003694:	021b      	lsls	r3, r3, #8
 8003696:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

            /* Set activity_detection_threshold for msb 8 bits */
            activity_detection_threshold2 = BMI3_SET_BITS(activity_detection_threshold,
 800369a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	b21a      	sxth	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	8b9b      	ldrh	r3, [r3, #28]
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	b21b      	sxth	r3, r3
 80036ac:	4313      	orrs	r3, r2
 80036ae:	b21b      	sxth	r3, r3
 80036b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                                                          BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD,
                                                          config->activity_detection_thres);

            /* Set maximum step duration */
            step_duration_max = BMI3_SET_BIT_POS0(data_array[20], BMI3_STEP_DURATION_MAX, config->step_duration_max);
 80036b4:	7f3b      	ldrb	r3, [r7, #28]
 80036b6:	b21b      	sxth	r3, r3
 80036b8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036bc:	b21a      	sxth	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	8bdb      	ldrh	r3, [r3, #30]
 80036c2:	b21b      	sxth	r3, r3
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	b21b      	sxth	r3, r3
 80036c8:	4313      	orrs	r3, r2
 80036ca:	b21b      	sxth	r3, r3
 80036cc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

            step_duration_window = ((uint16_t)data_array[21] << 8);
 80036d0:	7f7b      	ldrb	r3, [r7, #29]
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	021b      	lsls	r3, r3, #8
 80036d6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

            /* Set step duration window */
            step_duration_window = BMI3_SET_BITS(step_duration_window,
 80036da:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	b21a      	sxth	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	8c1b      	ldrh	r3, [r3, #32]
 80036e6:	021b      	lsls	r3, r3, #8
 80036e8:	b21b      	sxth	r3, r3
 80036ea:	4313      	orrs	r3, r2
 80036ec:	b21b      	sxth	r3, r3
 80036ee:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                                                 BMI3_STEP_DURATION_WINDOW,
                                                 config->step_duration_window);

            step_duration_pp_enabled = BMI3_SET_BIT_POS0(data_array[22],
 80036f2:	7fbb      	ldrb	r3, [r7, #30]
 80036f4:	b21b      	sxth	r3, r3
 80036f6:	f023 0301 	bic.w	r3, r3, #1
 80036fa:	b21a      	sxth	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003700:	b21b      	sxth	r3, r3
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	b21b      	sxth	r3, r3
 8003708:	4313      	orrs	r3, r2
 800370a:	b21b      	sxth	r3, r3
 800370c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                                                         BMI3_STEP_DURATION_PP_ENABLED,
                                                         config->step_duration_pp_enabled);

            step_duration_threshold = BMI3_SET_BITS(data_array[22],
 8003710:	7fbb      	ldrb	r3, [r7, #30]
 8003712:	b21b      	sxth	r3, r3
 8003714:	f023 030e 	bic.w	r3, r3, #14
 8003718:	b21a      	sxth	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	b21b      	sxth	r3, r3
 8003722:	f003 030e 	and.w	r3, r3, #14
 8003726:	b21b      	sxth	r3, r3
 8003728:	4313      	orrs	r3, r2
 800372a:	b21b      	sxth	r3, r3
 800372c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
                                                    BMI3_STEP_DURATION_THRESHOLD,
                                                    config->step_duration_thres);

            mean_crossing_pp_enabled = BMI3_SET_BITS(data_array[22],
 8003730:	7fbb      	ldrb	r3, [r7, #30]
 8003732:	b21b      	sxth	r3, r3
 8003734:	f023 0310 	bic.w	r3, r3, #16
 8003738:	b21a      	sxth	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	b21b      	sxth	r3, r3
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	b21b      	sxth	r3, r3
 8003748:	4313      	orrs	r3, r2
 800374a:	b21b      	sxth	r3, r3
 800374c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
                                                     BMI3_STEP_MEAN_CROSSING_PP_ENABLED,
                                                     config->mean_crossing_pp_enabled);

            /* Set mcr_threshold for lsb 8 bits */
            mcr_threshold1 = BMI3_SET_BITS(data_array[22], BMI3_STEP_MCR_THRESHOLD, config->mcr_threshold);
 8003750:	7fbb      	ldrb	r3, [r7, #30]
 8003752:	b21b      	sxth	r3, r3
 8003754:	f423 7378 	bic.w	r3, r3, #992	; 0x3e0
 8003758:	b21a      	sxth	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375e:	015b      	lsls	r3, r3, #5
 8003760:	b21b      	sxth	r3, r3
 8003762:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
 8003766:	b21b      	sxth	r3, r3
 8003768:	4313      	orrs	r3, r2
 800376a:	b21b      	sxth	r3, r3
 800376c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

            mcr_threshold = ((uint16_t)data_array[23] << 8);
 8003770:	7ffb      	ldrb	r3, [r7, #31]
 8003772:	b29b      	uxth	r3, r3
 8003774:	021b      	lsls	r3, r3, #8
 8003776:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            /* Set mcr_threshold for msb 8 bits */
            mcr_threshold2 = BMI3_SET_BITS(mcr_threshold, BMI3_STEP_MCR_THRESHOLD, config->mcr_threshold);
 800377a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800377e:	f423 7378 	bic.w	r3, r3, #992	; 0x3e0
 8003782:	b21a      	sxth	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003788:	015b      	lsls	r3, r3, #5
 800378a:	b21b      	sxth	r3, r3
 800378c:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
 8003790:	b21b      	sxth	r3, r3
 8003792:	4313      	orrs	r3, r2
 8003794:	b21b      	sxth	r3, r3
 8003796:	87fb      	strh	r3, [r7, #62]	; 0x3e

            sc_12_res = ((uint16_t)data_array[23] << 8);
 8003798:	7ffb      	ldrb	r3, [r7, #31]
 800379a:	b29b      	uxth	r3, r3
 800379c:	021b      	lsls	r3, r3, #8
 800379e:	87bb      	strh	r3, [r7, #60]	; 0x3c

            sc_12_res = BMI3_SET_BITS(sc_12_res, BMI3_STEP_SC_12_RES, config->sc_12_res);
 80037a0:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80037a4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80037a8:	b21a      	sxth	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ae:	029b      	lsls	r3, r3, #10
 80037b0:	b21b      	sxth	r3, r3
 80037b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037b6:	b21b      	sxth	r3, r3
 80037b8:	4313      	orrs	r3, r2
 80037ba:	b21b      	sxth	r3, r3
 80037bc:	87bb      	strh	r3, [r7, #60]	; 0x3c

            step_config[0] = (uint8_t)watermark1;
 80037be:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	f887 3020 	strb.w	r3, [r7, #32]
            step_config[1] = (uint8_t)((watermark2 | reset_counter) >> 8);
 80037c8:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 80037cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80037d0:	4313      	orrs	r3, r2
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	0a1b      	lsrs	r3, r3, #8
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            step_config[2] = (uint8_t)env_min_dist_up1;
 80037de:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            step_config[3] = (uint8_t)(env_min_dist_up2 >> 8);
 80037e8:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80037ec:	0a1b      	lsrs	r3, r3, #8
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            step_config[4] = (uint8_t)env_coef_up1;
 80037f6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            step_config[5] = (uint8_t)(env_coef_up2 >> 8);
 8003800:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003804:	0a1b      	lsrs	r3, r3, #8
 8003806:	b29b      	uxth	r3, r3
 8003808:	b2db      	uxtb	r3, r3
 800380a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            step_config[6] = (uint8_t)env_min_dist_down1;
 800380e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8003812:	b2db      	uxtb	r3, r3
 8003814:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            step_config[7] = (uint8_t)(env_min_dist_down2 >> 8);
 8003818:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800381c:	0a1b      	lsrs	r3, r3, #8
 800381e:	b29b      	uxth	r3, r3
 8003820:	b2db      	uxtb	r3, r3
 8003822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            step_config[8] = (uint8_t)env_coef_down1;
 8003826:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800382a:	b2db      	uxtb	r3, r3
 800382c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            step_config[9] = (uint8_t)(env_coef_down2 >> 8);
 8003830:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003834:	0a1b      	lsrs	r3, r3, #8
 8003836:	b29b      	uxth	r3, r3
 8003838:	b2db      	uxtb	r3, r3
 800383a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            step_config[10] = (uint8_t)mean_val_decay1;
 800383e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003842:	b2db      	uxtb	r3, r3
 8003844:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            step_config[11] = (uint8_t)(mean_val_decay2 >> 8);
 8003848:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800384c:	0a1b      	lsrs	r3, r3, #8
 800384e:	b29b      	uxth	r3, r3
 8003850:	b2db      	uxtb	r3, r3
 8003852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            step_config[12] = (uint8_t)mean_step_dur1;
 8003856:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800385a:	b2db      	uxtb	r3, r3
 800385c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
            step_config[13] = (uint8_t)(mean_step_dur2 >> 8);
 8003860:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003864:	0a1b      	lsrs	r3, r3, #8
 8003866:	b29b      	uxth	r3, r3
 8003868:	b2db      	uxtb	r3, r3
 800386a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            step_config[14] = (uint8_t)(step_buffer_size | filter_cascade_enabled | step_counter_increment1);
 800386e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8003872:	b2da      	uxtb	r2, r3
 8003874:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003878:	b2db      	uxtb	r3, r3
 800387a:	4313      	orrs	r3, r2
 800387c:	b2da      	uxtb	r2, r3
 800387e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003882:	b2db      	uxtb	r3, r3
 8003884:	4313      	orrs	r3, r2
 8003886:	b2db      	uxtb	r3, r3
 8003888:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            step_config[15] = (uint8_t)(step_counter_increment2 >> 8);
 800388c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003890:	0a1b      	lsrs	r3, r3, #8
 8003892:	b29b      	uxth	r3, r3
 8003894:	b2db      	uxtb	r3, r3
 8003896:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            step_config[16] = (uint8_t)peak_duration_min_walking;
 800389a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            step_config[17] = (uint8_t)(peak_duration_min_running >> 8);
 80038a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80038a8:	0a1b      	lsrs	r3, r3, #8
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            step_config[18] = (uint8_t)(activity_detection_factor | activity_detection_threshold1);
 80038b2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	4313      	orrs	r3, r2
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
            step_config[19] = (uint8_t)(activity_detection_threshold2 >> 8);
 80038c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80038ca:	0a1b      	lsrs	r3, r3, #8
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            step_config[20] = (uint8_t)step_duration_max;
 80038d4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            step_config[21] = (uint8_t)(step_duration_window >> 8);
 80038de:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80038e2:	0a1b      	lsrs	r3, r3, #8
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            step_config[22] =
                (uint8_t)(step_duration_pp_enabled | step_duration_threshold | mean_crossing_pp_enabled |
 80038ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	4313      	orrs	r3, r2
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003900:	b2db      	uxtb	r3, r3
 8003902:	4313      	orrs	r3, r2
 8003904:	b2da      	uxtb	r2, r3
 8003906:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800390a:	b2db      	uxtb	r3, r3
 800390c:	4313      	orrs	r3, r2
 800390e:	b2db      	uxtb	r3, r3
            step_config[22] =
 8003910:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                          mcr_threshold1);
            step_config[23] = (uint8_t)((mcr_threshold2 | sc_12_res) >> 8);
 8003914:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003916:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003918:	4313      	orrs	r3, r2
 800391a:	b29b      	uxth	r3, r3
 800391c:	0a1b      	lsrs	r3, r3, #8
 800391e:	b29b      	uxth	r3, r3
 8003920:	b2db      	uxtb	r3, r3
 8003922:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

            /* Set the configuration back to feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, step_config, 24, dev);
 8003926:	f107 0120 	add.w	r1, r7, #32
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2218      	movs	r2, #24
 800392e:	2042      	movs	r0, #66	; 0x42
 8003930:	f7fd fe01 	bl	8001536 <bmi3_set_regs>
 8003934:	4603      	mov	r3, r0
 8003936:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800393a:	e002      	b.n	8003942 <set_step_config+0x514>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800393c:	23ff      	movs	r3, #255	; 0xff
 800393e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }

    return rslt;
 8003942:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
}
 8003946:	4618      	mov	r0, r3
 8003948:	3790      	adds	r7, #144	; 0x90
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <get_tap_config>:
 * @brief This internal API gets tap configurations like axes select, wait for time out, mode,
 * max peaks for tap, duration, tap peak threshold, max gest duration, max dur bw peaks,
 * shock settling duration.
 */
static int8_t get_tap_config(struct bmi3_tap_detector_config *config, struct bmi3_dev *dev)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b088      	sub	sp, #32
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t tap_config[6] = { 0 };
 8003958:	2300      	movs	r3, #0
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	2300      	movs	r3, #0
 800395e:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of tap feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_TAP, 0 };
 8003960:	231e      	movs	r3, #30
 8003962:	81bb      	strh	r3, [r7, #12]

    /* Variable to define array offset */
    uint8_t idx = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	77bb      	strb	r3, [r7, #30]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 80a7 	beq.w	8003abe <get_tap_config+0x170>
    {
        /* Set the tap base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003970:	f107 010c 	add.w	r1, r7, #12
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2202      	movs	r2, #2
 8003978:	2041      	movs	r0, #65	; 0x41
 800397a:	f7fd fddc 	bl	8001536 <bmi3_set_regs>
 800397e:	4603      	mov	r3, r0
 8003980:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8003982:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003986:	2b00      	cmp	r3, #0
 8003988:	f040 809b 	bne.w	8003ac2 <get_tap_config+0x174>
        {
            /* Get the configuration from the feature engine register where tap feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, tap_config, 6, dev);
 800398c:	f107 0110 	add.w	r1, r7, #16
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	2206      	movs	r2, #6
 8003994:	2042      	movs	r0, #66	; 0x42
 8003996:	f7fd fd69 	bl	800146c <bmi3_get_regs>
 800399a:	4603      	mov	r3, r0
 800399c:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 800399e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f040 808d 	bne.w	8003ac2 <get_tap_config+0x174>
            {
                /* Get word to calculate axis select, wait for time out, max peaks for tap and mode
                 * from the same word */
                lsb = (uint16_t) tap_config[idx++];
 80039a8:	7fbb      	ldrb	r3, [r7, #30]
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	77ba      	strb	r2, [r7, #30]
 80039ae:	3320      	adds	r3, #32
 80039b0:	443b      	add	r3, r7
 80039b2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80039b6:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) tap_config[idx++] << 8);
 80039b8:	7fbb      	ldrb	r3, [r7, #30]
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	77ba      	strb	r2, [r7, #30]
 80039be:	3320      	adds	r3, #32
 80039c0:	443b      	add	r3, r7
 80039c2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	021b      	lsls	r3, r3, #8
 80039ca:	837b      	strh	r3, [r7, #26]
                lsb_msb = lsb | msb;
 80039cc:	8bba      	ldrh	r2, [r7, #28]
 80039ce:	8b7b      	ldrh	r3, [r7, #26]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	833b      	strh	r3, [r7, #24]

                /* Get axis selection */
                config->axis_sel = lsb_msb & BMI3_TAP_AXIS_SEL_MASK;
 80039d4:	8b3b      	ldrh	r3, [r7, #24]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f003 0303 	and.w	r3, r3, #3
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	701a      	strb	r2, [r3, #0]

                /* Get wait for time out */
                config->wait_for_timeout = (lsb_msb & BMI3_TAP_WAIT_FR_TIME_OUT_MASK) >> BMI3_TAP_WAIT_FR_TIME_OUT_POS;
 80039e2:	8b3b      	ldrh	r3, [r7, #24]
 80039e4:	109b      	asrs	r3, r3, #2
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	705a      	strb	r2, [r3, #1]

                /* Get max peaks for tap */
                config->max_peaks_for_tap = (lsb_msb & BMI3_TAP_MAX_PEAKS_MASK) >> BMI3_TAP_MAX_PEAKS_POS;
 80039f2:	8b3b      	ldrh	r3, [r7, #24]
 80039f4:	10db      	asrs	r3, r3, #3
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	709a      	strb	r2, [r3, #2]

                /* Get mode */
                config->mode = (lsb_msb & BMI3_TAP_MODE_MASK) >> BMI3_TAP_MODE_POS;
 8003a02:	8b3b      	ldrh	r3, [r7, #24]
 8003a04:	119b      	asrs	r3, r3, #6
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	70da      	strb	r2, [r3, #3]

                /* Get word to calculate threshold, output configuration from the same word */
                lsb = (uint16_t) tap_config[idx++];
 8003a12:	7fbb      	ldrb	r3, [r7, #30]
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	77ba      	strb	r2, [r7, #30]
 8003a18:	3320      	adds	r3, #32
 8003a1a:	443b      	add	r3, r7
 8003a1c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003a20:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) tap_config[idx++] << 8);
 8003a22:	7fbb      	ldrb	r3, [r7, #30]
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	77ba      	strb	r2, [r7, #30]
 8003a28:	3320      	adds	r3, #32
 8003a2a:	443b      	add	r3, r7
 8003a2c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	021b      	lsls	r3, r3, #8
 8003a34:	837b      	strh	r3, [r7, #26]
                lsb_msb = lsb | msb;
 8003a36:	8bba      	ldrh	r2, [r7, #28]
 8003a38:	8b7b      	ldrh	r3, [r7, #26]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	833b      	strh	r3, [r7, #24]

                /* Get tap peak threshold */
                config->tap_peak_thres = lsb_msb & BMI3_TAP_PEAK_THRES_MASK;
 8003a3e:	8b3b      	ldrh	r3, [r7, #24]
 8003a40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	809a      	strh	r2, [r3, #4]

                /* Get max gesture duration */
                config->max_gest_dur = (lsb_msb & BMI3_TAP_MAX_GEST_DUR_MASK) >> BMI3_TAP_MAX_GEST_DUR_POS;
 8003a4a:	8b3b      	ldrh	r3, [r7, #24]
 8003a4c:	0a9b      	lsrs	r3, r3, #10
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	719a      	strb	r2, [r3, #6]

                /* Get word to calculate max_dur_between_peaks, tap_shock_settling_dur, min_quite_dur_between_taps
                 *  and quite_time_after_gest from the same word */
                lsb = (uint16_t) tap_config[idx++];
 8003a56:	7fbb      	ldrb	r3, [r7, #30]
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	77ba      	strb	r2, [r7, #30]
 8003a5c:	3320      	adds	r3, #32
 8003a5e:	443b      	add	r3, r7
 8003a60:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003a64:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) tap_config[idx++] << 8);
 8003a66:	7fbb      	ldrb	r3, [r7, #30]
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	77ba      	strb	r2, [r7, #30]
 8003a6c:	3320      	adds	r3, #32
 8003a6e:	443b      	add	r3, r7
 8003a70:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	021b      	lsls	r3, r3, #8
 8003a78:	837b      	strh	r3, [r7, #26]
                lsb_msb = lsb | msb;
 8003a7a:	8bba      	ldrh	r2, [r7, #28]
 8003a7c:	8b7b      	ldrh	r3, [r7, #26]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	833b      	strh	r3, [r7, #24]

                /* Get maximum duration between peaks */
                config->max_dur_between_peaks = lsb_msb & BMI3_TAP_MAX_DUR_BW_PEAKS_MASK;
 8003a82:	8b3b      	ldrh	r3, [r7, #24]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	71da      	strb	r2, [r3, #7]

                /* Get tap shock settling duration */
                config->tap_shock_settling_dur = (lsb_msb & BMI3_TAP_SHOCK_SETT_DUR_MASK) >>
 8003a90:	8b3b      	ldrh	r3, [r7, #24]
 8003a92:	111b      	asrs	r3, r3, #4
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	721a      	strb	r2, [r3, #8]
                                                 BMI3_TAP_SHOCK_SETT_DUR_POS;

                /* Get minimum quite duration between taps */
                config->min_quite_dur_between_taps = (lsb_msb & BMI3_TAP_MIN_QUITE_DUR_BW_TAPS_MASK) >>
 8003aa0:	8b3b      	ldrh	r3, [r7, #24]
 8003aa2:	121b      	asrs	r3, r3, #8
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	725a      	strb	r2, [r3, #9]
                                                     BMI3_TAP_MIN_QUITE_DUR_BW_TAPS_POS;

                /* Get quite time after gesture */
                config->quite_time_after_gest = (lsb_msb & BMI3_TAP_QUITE_TIME_AFTR_GEST_MASK) >>
 8003ab0:	8b3b      	ldrh	r3, [r7, #24]
 8003ab2:	0b1b      	lsrs	r3, r3, #12
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	729a      	strb	r2, [r3, #10]
 8003abc:	e001      	b.n	8003ac2 <get_tap_config+0x174>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003abe:	23ff      	movs	r3, #255	; 0xff
 8003ac0:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8003ac2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <set_tap_config>:
 * @brief This internal API sets tap configurations like axes select, wait for time out, mode,
 * max peaks for tap, duration, tap peak threshold, max gest duration, max dur bw peaks,
 * shock settling duration.
 */
static int8_t set_tap_config(const struct bmi3_tap_detector_config *config, struct bmi3_dev *dev)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b08c      	sub	sp, #48	; 0x30
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t tap_config[6] = { 0 };
 8003ad8:	2300      	movs	r3, #0
 8003ada:	613b      	str	r3, [r7, #16]
 8003adc:	2300      	movs	r3, #0
 8003ade:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of tap feature */
    uint8_t base_aadr[2] = { BMI3_BASE_ADDR_TAP, 0 };
 8003ae0:	231e      	movs	r3, #30
 8003ae2:	81bb      	strh	r3, [r7, #12]

    uint16_t axis_sel, wait_fr_time_out, max_peaks_for_tap, mode;
    uint16_t tap_peak_thres, tap_peak_thres1, tap_peak_thres2, max_gest_dur;
    uint16_t max_dur_between_peaks, tap_shock_setting_dur, min_quite_dur_between_taps, quite_time_after_gest;

    if (config != NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 80f0 	beq.w	8003ccc <set_tap_config+0x1fe>
    {
        /* Set the tap base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_aadr, 2, dev);
 8003aec:	f107 010c 	add.w	r1, r7, #12
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2202      	movs	r2, #2
 8003af4:	2041      	movs	r0, #65	; 0x41
 8003af6:	f7fd fd1e 	bl	8001536 <bmi3_set_regs>
 8003afa:	4603      	mov	r3, r0
 8003afc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if (rslt == BMI3_OK)
 8003b00:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f040 80e4 	bne.w	8003cd2 <set_tap_config+0x204>
        {
            /* Set axis_sel */
            axis_sel = BMI3_SET_BIT_POS0(tap_config[0], BMI3_TAP_AXIS_SEL, config->axis_sel);
 8003b0a:	7c3b      	ldrb	r3, [r7, #16]
 8003b0c:	b21b      	sxth	r3, r3
 8003b0e:	f023 0303 	bic.w	r3, r3, #3
 8003b12:	b21a      	sxth	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	b21b      	sxth	r3, r3
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	b21b      	sxth	r3, r3
 8003b20:	4313      	orrs	r3, r2
 8003b22:	b21b      	sxth	r3, r3
 8003b24:	85bb      	strh	r3, [r7, #44]	; 0x2c

            /* Set wait for time out */
            wait_fr_time_out = BMI3_SET_BITS(tap_config[0], BMI3_TAP_WAIT_FR_TIME_OUT, config->wait_for_timeout);
 8003b26:	7c3b      	ldrb	r3, [r7, #16]
 8003b28:	b21b      	sxth	r3, r3
 8003b2a:	f023 0304 	bic.w	r3, r3, #4
 8003b2e:	b21a      	sxth	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	785b      	ldrb	r3, [r3, #1]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	b21b      	sxth	r3, r3
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	b21b      	sxth	r3, r3
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	b21b      	sxth	r3, r3
 8003b42:	857b      	strh	r3, [r7, #42]	; 0x2a

            /* Set maximum peaks for tap */
            max_peaks_for_tap = BMI3_SET_BITS(tap_config[0], BMI3_TAP_MAX_PEAKS, config->max_peaks_for_tap);
 8003b44:	7c3b      	ldrb	r3, [r7, #16]
 8003b46:	b21b      	sxth	r3, r3
 8003b48:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003b4c:	b21a      	sxth	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	789b      	ldrb	r3, [r3, #2]
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	b21b      	sxth	r3, r3
 8003b56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b5a:	b21b      	sxth	r3, r3
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	b21b      	sxth	r3, r3
 8003b60:	853b      	strh	r3, [r7, #40]	; 0x28

            /* Set mode */
            mode = BMI3_SET_BITS(tap_config[0], BMI3_TAP_MODE, config->mode);
 8003b62:	7c3b      	ldrb	r3, [r7, #16]
 8003b64:	b21b      	sxth	r3, r3
 8003b66:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003b6a:	b21a      	sxth	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	78db      	ldrb	r3, [r3, #3]
 8003b70:	019b      	lsls	r3, r3, #6
 8003b72:	b21b      	sxth	r3, r3
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	b21b      	sxth	r3, r3
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	b21b      	sxth	r3, r3
 8003b7c:	84fb      	strh	r3, [r7, #38]	; 0x26

            /* Set peak threshold first byte in word */
            tap_peak_thres = BMI3_SET_BIT_POS0(tap_config[2], BMI3_TAP_PEAK_THRES, config->tap_peak_thres);
 8003b7e:	7cbb      	ldrb	r3, [r7, #18]
 8003b80:	b21b      	sxth	r3, r3
 8003b82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b86:	f023 0303 	bic.w	r3, r3, #3
 8003b8a:	b21a      	sxth	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	889b      	ldrh	r3, [r3, #4]
 8003b90:	b21b      	sxth	r3, r3
 8003b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b96:	b21b      	sxth	r3, r3
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	b21b      	sxth	r3, r3
 8003b9c:	84bb      	strh	r3, [r7, #36]	; 0x24

            /* Left shift by 8 times so that we can set rest of the values of tap peak threshold conf in word */
            tap_peak_thres1 = ((uint16_t)tap_config[3] << 8);
 8003b9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	021b      	lsls	r3, r3, #8
 8003ba4:	847b      	strh	r3, [r7, #34]	; 0x22

            /* Set peak threshold second byte in word */
            tap_peak_thres2 = BMI3_SET_BIT_POS0(tap_peak_thres1, BMI3_TAP_PEAK_THRES, config->tap_peak_thres);
 8003ba6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003baa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bae:	f023 0303 	bic.w	r3, r3, #3
 8003bb2:	b21a      	sxth	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	889b      	ldrh	r3, [r3, #4]
 8003bb8:	b21b      	sxth	r3, r3
 8003bba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bbe:	b21b      	sxth	r3, r3
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	b21b      	sxth	r3, r3
 8003bc4:	843b      	strh	r3, [r7, #32]

            max_gest_dur = ((uint16_t)tap_config[3] << 8);
 8003bc6:	7cfb      	ldrb	r3, [r7, #19]
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	021b      	lsls	r3, r3, #8
 8003bcc:	83fb      	strh	r3, [r7, #30]

            /* Set max gesture duration */
            max_gest_dur = BMI3_SET_BITS(max_gest_dur, BMI3_TAP_MAX_GEST_DUR, config->max_gest_dur);
 8003bce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003bd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bd6:	b21a      	sxth	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	799b      	ldrb	r3, [r3, #6]
 8003bdc:	029b      	lsls	r3, r3, #10
 8003bde:	b21b      	sxth	r3, r3
 8003be0:	4313      	orrs	r3, r2
 8003be2:	b21b      	sxth	r3, r3
 8003be4:	83fb      	strh	r3, [r7, #30]

            /* Set max duration between peaks */
            max_dur_between_peaks = BMI3_SET_BIT_POS0(tap_config[4],
 8003be6:	7d3b      	ldrb	r3, [r7, #20]
 8003be8:	b21b      	sxth	r3, r3
 8003bea:	f023 030f 	bic.w	r3, r3, #15
 8003bee:	b21a      	sxth	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	79db      	ldrb	r3, [r3, #7]
 8003bf4:	b21b      	sxth	r3, r3
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	b21b      	sxth	r3, r3
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	b21b      	sxth	r3, r3
 8003c00:	83bb      	strh	r3, [r7, #28]
                                                      BMI3_TAP_MAX_DUR_BW_PEAKS,
                                                      config->max_dur_between_peaks);

            /* Set shock settling duration */
            tap_shock_setting_dur =
                BMI3_SET_BITS(tap_config[4], BMI3_TAP_SHOCK_SETT_DUR, config->tap_shock_settling_dur);
 8003c02:	7d3b      	ldrb	r3, [r7, #20]
 8003c04:	b21b      	sxth	r3, r3
 8003c06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c0a:	b21a      	sxth	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	7a1b      	ldrb	r3, [r3, #8]
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	b21b      	sxth	r3, r3
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	b21b      	sxth	r3, r3
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	b21b      	sxth	r3, r3
            tap_shock_setting_dur =
 8003c1c:	837b      	strh	r3, [r7, #26]

            min_quite_dur_between_taps = ((uint16_t)tap_config[5] << 8);
 8003c1e:	7d7b      	ldrb	r3, [r7, #21]
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	021b      	lsls	r3, r3, #8
 8003c24:	833b      	strh	r3, [r7, #24]

            /* Set quite duration between taps */
            min_quite_dur_between_taps = BMI3_SET_BITS(min_quite_dur_between_taps,
 8003c26:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003c2a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c2e:	b21a      	sxth	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	7a5b      	ldrb	r3, [r3, #9]
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	b21b      	sxth	r3, r3
 8003c38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c3c:	b21b      	sxth	r3, r3
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	b21b      	sxth	r3, r3
 8003c42:	833b      	strh	r3, [r7, #24]
                                                       BMI3_TAP_MIN_QUITE_DUR_BW_TAPS,
                                                       config->min_quite_dur_between_taps);

            quite_time_after_gest = ((uint16_t)tap_config[5] << 8);
 8003c44:	7d7b      	ldrb	r3, [r7, #21]
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	021b      	lsls	r3, r3, #8
 8003c4a:	82fb      	strh	r3, [r7, #22]

            /* Set quite time after gesture */
            quite_time_after_gest = BMI3_SET_BITS(quite_time_after_gest,
 8003c4c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c54:	b21a      	sxth	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	7a9b      	ldrb	r3, [r3, #10]
 8003c5a:	031b      	lsls	r3, r3, #12
 8003c5c:	b21b      	sxth	r3, r3
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	b21b      	sxth	r3, r3
 8003c62:	82fb      	strh	r3, [r7, #22]
                                                  BMI3_TAP_QUITE_TIME_AFTR_GEST,
                                                  config->quite_time_after_gest);

            /* Copy all the configurations back to the tap configuration array */
            tap_config[0] = (uint8_t)(axis_sel | wait_fr_time_out | max_peaks_for_tap | mode);
 8003c64:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	4313      	orrs	r3, r2
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	743b      	strb	r3, [r7, #16]
            tap_config[2] = (uint8_t)(tap_peak_thres);
 8003c82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	74bb      	strb	r3, [r7, #18]
            tap_config[3] = (uint8_t)((tap_peak_thres2 | max_gest_dur) >> 8);
 8003c88:	8c3a      	ldrh	r2, [r7, #32]
 8003c8a:	8bfb      	ldrh	r3, [r7, #30]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	0a1b      	lsrs	r3, r3, #8
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	74fb      	strb	r3, [r7, #19]
            tap_config[4] = (uint8_t)(max_dur_between_peaks | tap_shock_setting_dur);
 8003c98:	8bbb      	ldrh	r3, [r7, #28]
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	8b7b      	ldrh	r3, [r7, #26]
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	753b      	strb	r3, [r7, #20]
            tap_config[5] = (uint8_t)((min_quite_dur_between_taps | quite_time_after_gest) >> 8);
 8003ca6:	8b3a      	ldrh	r2, [r7, #24]
 8003ca8:	8afb      	ldrh	r3, [r7, #22]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	0a1b      	lsrs	r3, r3, #8
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	757b      	strb	r3, [r7, #21]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, tap_config, 6, dev);
 8003cb6:	f107 0110 	add.w	r1, r7, #16
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2206      	movs	r2, #6
 8003cbe:	2042      	movs	r0, #66	; 0x42
 8003cc0:	f7fd fc39 	bl	8001536 <bmi3_set_regs>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003cca:	e002      	b.n	8003cd2 <set_tap_config+0x204>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003ccc:	23ff      	movs	r3, #255	; 0xff
 8003cce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return rslt;
 8003cd2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3730      	adds	r7, #48	; 0x30
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <set_alternate_accel_config>:
/*!
 * @brief This internal API sets alternate accelerometer configurations like ODR,
 * accel mode and average number of samples.
 */
static int8_t set_alternate_accel_config(const struct bmi3_alt_accel_config *config, struct bmi3_dev *dev)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b086      	sub	sp, #24
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8003ce8:	2300      	movs	r3, #0
 8003cea:	81bb      	strh	r3, [r7, #12]

    uint16_t alt_acc_odr, alt_acc_avg_num, alt_acc_mode;

    if (config != NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d03a      	beq.n	8003d68 <set_alternate_accel_config+0x8a>
    {
        /* Set alternate accelerometer ODR */
        alt_acc_odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_ALT_ACC_ODR, config->alt_acc_odr);
 8003cf2:	7b3b      	ldrb	r3, [r7, #12]
 8003cf4:	b21b      	sxth	r3, r3
 8003cf6:	f023 030f 	bic.w	r3, r3, #15
 8003cfa:	b21a      	sxth	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	b21b      	sxth	r3, r3
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	b21b      	sxth	r3, r3
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	b21b      	sxth	r3, r3
 8003d0c:	82bb      	strh	r3, [r7, #20]

        /* Set alternate accelerometer average number of samples */
        alt_acc_avg_num = BMI3_SET_BITS(reg_data[1], BMI3_ALT_ACC_AVG_NUM, config->alt_acc_avg_num);
 8003d0e:	7b7b      	ldrb	r3, [r7, #13]
 8003d10:	b21a      	sxth	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	789b      	ldrb	r3, [r3, #2]
 8003d16:	021b      	lsls	r3, r3, #8
 8003d18:	b21b      	sxth	r3, r3
 8003d1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d1e:	b21b      	sxth	r3, r3
 8003d20:	4313      	orrs	r3, r2
 8003d22:	b21b      	sxth	r3, r3
 8003d24:	827b      	strh	r3, [r7, #18]

        /* Set alternate accelerometer mode */
        alt_acc_mode = BMI3_SET_BITS(reg_data[1], BMI3_ALT_ACC_MODE, config->alt_acc_mode);
 8003d26:	7b7b      	ldrb	r3, [r7, #13]
 8003d28:	b21a      	sxth	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	785b      	ldrb	r3, [r3, #1]
 8003d2e:	031b      	lsls	r3, r3, #12
 8003d30:	b21b      	sxth	r3, r3
 8003d32:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003d36:	b21b      	sxth	r3, r3
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	b21b      	sxth	r3, r3
 8003d3c:	823b      	strh	r3, [r7, #16]

        reg_data[0] = (uint8_t)(alt_acc_odr);
 8003d3e:	8abb      	ldrh	r3, [r7, #20]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	733b      	strb	r3, [r7, #12]
        reg_data[1] = (uint8_t)((alt_acc_avg_num | alt_acc_mode) >> 8);
 8003d44:	8a7a      	ldrh	r2, [r7, #18]
 8003d46:	8a3b      	ldrh	r3, [r7, #16]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	0a1b      	lsrs	r3, r3, #8
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	737b      	strb	r3, [r7, #13]

        /* Set configurations of alternate accel */
        rslt = bmi3_set_regs(BMI3_REG_ALT_ACC_CONF, reg_data, 2, dev);
 8003d54:	f107 010c 	add.w	r1, r7, #12
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	2028      	movs	r0, #40	; 0x28
 8003d5e:	f7fd fbea 	bl	8001536 <bmi3_set_regs>
 8003d62:	4603      	mov	r3, r0
 8003d64:	75fb      	strb	r3, [r7, #23]
 8003d66:	e001      	b.n	8003d6c <set_alternate_accel_config+0x8e>
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003d68:	23ff      	movs	r3, #255	; 0xff
 8003d6a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003d6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <get_alternate_accel_config>:
/*!
 * @brief This internal API gets alternate accelerometer configurations like ODR,
 * accel mode and average number of samples.
 */
static int8_t get_alternate_accel_config(struct bmi3_alt_accel_config *config, struct bmi3_dev *dev)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 8003d82:	2300      	movs	r3, #0
 8003d84:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d02a      	beq.n	8003de2 <get_alternate_accel_config+0x6a>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_ALT_ACC_CONF, data_array, 2, dev);
 8003d8c:	f107 0108 	add.w	r1, r7, #8
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2202      	movs	r2, #2
 8003d94:	2028      	movs	r0, #40	; 0x28
 8003d96:	f7fd fb69 	bl	800146c <bmi3_get_regs>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8003d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d11f      	bne.n	8003de6 <get_alternate_accel_config+0x6e>
        {
            reg_data = data_array[0];
 8003da6:	7a3b      	ldrb	r3, [r7, #8]
 8003da8:	81bb      	strh	r3, [r7, #12]

            /* Get alternate accelerometer ODR */
            config->alt_acc_odr = BMI3_GET_BIT_POS0(reg_data, BMI3_ALT_ACC_ODR);
 8003daa:	89bb      	ldrh	r3, [r7, #12]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	701a      	strb	r2, [r3, #0]

            reg_data = ((uint16_t)data_array[1] << 8);
 8003db8:	7a7b      	ldrb	r3, [r7, #9]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	021b      	lsls	r3, r3, #8
 8003dbe:	81bb      	strh	r3, [r7, #12]

            /* Get alternate accelerometer average samples */
            config->alt_acc_avg_num = BMI3_GET_BITS(reg_data, BMI3_ALT_ACC_AVG_NUM);
 8003dc0:	89bb      	ldrh	r3, [r7, #12]
 8003dc2:	121b      	asrs	r3, r3, #8
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	709a      	strb	r2, [r3, #2]

            /* Get alternate accel mode */
            config->alt_acc_mode = BMI3_GET_BITS(reg_data, BMI3_ALT_ACC_MODE);
 8003dd0:	89bb      	ldrh	r3, [r7, #12]
 8003dd2:	131b      	asrs	r3, r3, #12
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	705a      	strb	r2, [r3, #1]
 8003de0:	e001      	b.n	8003de6 <get_alternate_accel_config+0x6e>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003de2:	23ff      	movs	r3, #255	; 0xff
 8003de4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <set_alternate_gyro_config>:
/*!
 * @brief This internal API sets alternate gyro configurations like ODR,
 * gyro mode and average number of samples.
 */
static int8_t set_alternate_gyro_config(const struct bmi3_alt_gyro_config *config, struct bmi3_dev *dev)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b086      	sub	sp, #24
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	81bb      	strh	r3, [r7, #12]

    uint16_t alt_gyro_odr, alt_gyro_avg_num, alt_gyro_mode;

    if (config != NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d03a      	beq.n	8003e7c <set_alternate_gyro_config+0x8a>
    {
        /* Set alternate gyro ODR */
        alt_gyro_odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_ALT_GYR_ODR, config->alt_gyro_odr);
 8003e06:	7b3b      	ldrb	r3, [r7, #12]
 8003e08:	b21b      	sxth	r3, r3
 8003e0a:	f023 030f 	bic.w	r3, r3, #15
 8003e0e:	b21a      	sxth	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	b21b      	sxth	r3, r3
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	b21b      	sxth	r3, r3
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	b21b      	sxth	r3, r3
 8003e20:	82bb      	strh	r3, [r7, #20]

        /* Set alternate gyro average number of samples */
        alt_gyro_avg_num = BMI3_SET_BITS(reg_data[1], BMI3_ALT_GYR_AVG_NUM, config->alt_gyro_avg_num);
 8003e22:	7b7b      	ldrb	r3, [r7, #13]
 8003e24:	b21a      	sxth	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	789b      	ldrb	r3, [r3, #2]
 8003e2a:	021b      	lsls	r3, r3, #8
 8003e2c:	b21b      	sxth	r3, r3
 8003e2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e32:	b21b      	sxth	r3, r3
 8003e34:	4313      	orrs	r3, r2
 8003e36:	b21b      	sxth	r3, r3
 8003e38:	827b      	strh	r3, [r7, #18]

        /* Set alternate gyro mode */
        alt_gyro_mode = BMI3_SET_BITS(reg_data[1], BMI3_ALT_GYR_MODE, config->alt_gyro_mode);
 8003e3a:	7b7b      	ldrb	r3, [r7, #13]
 8003e3c:	b21a      	sxth	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	785b      	ldrb	r3, [r3, #1]
 8003e42:	031b      	lsls	r3, r3, #12
 8003e44:	b21b      	sxth	r3, r3
 8003e46:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003e4a:	b21b      	sxth	r3, r3
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	b21b      	sxth	r3, r3
 8003e50:	823b      	strh	r3, [r7, #16]

        reg_data[0] = (uint8_t)(alt_gyro_odr);
 8003e52:	8abb      	ldrh	r3, [r7, #20]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	733b      	strb	r3, [r7, #12]
        reg_data[1] = (uint8_t)((alt_gyro_avg_num | alt_gyro_mode) >> 8);
 8003e58:	8a7a      	ldrh	r2, [r7, #18]
 8003e5a:	8a3b      	ldrh	r3, [r7, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	0a1b      	lsrs	r3, r3, #8
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	737b      	strb	r3, [r7, #13]

        /* Set configurations of alternate gyro */
        rslt = bmi3_set_regs(BMI3_REG_ALT_GYR_CONF, reg_data, 2, dev);
 8003e68:	f107 010c 	add.w	r1, r7, #12
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	2029      	movs	r0, #41	; 0x29
 8003e72:	f7fd fb60 	bl	8001536 <bmi3_set_regs>
 8003e76:	4603      	mov	r3, r0
 8003e78:	75fb      	strb	r3, [r7, #23]
 8003e7a:	e001      	b.n	8003e80 <set_alternate_gyro_config+0x8e>
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003e7c:	23ff      	movs	r3, #255	; 0xff
 8003e7e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003e80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <get_alternate_gyro_config>:
/*!
 * @brief This internal API gets alternate gyro configurations like ODR,
 * gyro mode and average number of samples.
 */
static int8_t get_alternate_gyro_config(struct bmi3_alt_gyro_config *config, struct bmi3_dev *dev)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 8003e96:	2300      	movs	r3, #0
 8003e98:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d02a      	beq.n	8003ef6 <get_alternate_gyro_config+0x6a>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_ALT_GYR_CONF, data_array, 2, dev);
 8003ea0:	f107 0108 	add.w	r1, r7, #8
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	2029      	movs	r0, #41	; 0x29
 8003eaa:	f7fd fadf 	bl	800146c <bmi3_get_regs>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8003eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d11f      	bne.n	8003efa <get_alternate_gyro_config+0x6e>
        {
            reg_data = data_array[0];
 8003eba:	7a3b      	ldrb	r3, [r7, #8]
 8003ebc:	81bb      	strh	r3, [r7, #12]

            /* Get alternate gyro ODR */
            config->alt_gyro_odr = BMI3_GET_BIT_POS0(reg_data, BMI3_ALT_GYR_ODR);
 8003ebe:	89bb      	ldrh	r3, [r7, #12]
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	701a      	strb	r2, [r3, #0]

            reg_data = ((uint16_t)data_array[1] << 8);
 8003ecc:	7a7b      	ldrb	r3, [r7, #9]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	021b      	lsls	r3, r3, #8
 8003ed2:	81bb      	strh	r3, [r7, #12]

            /* Get alternate gyro average samples */
            config->alt_gyro_avg_num = BMI3_GET_BITS(reg_data, BMI3_ALT_GYR_AVG_NUM);
 8003ed4:	89bb      	ldrh	r3, [r7, #12]
 8003ed6:	121b      	asrs	r3, r3, #8
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	709a      	strb	r2, [r3, #2]

            /* Get alternate gyro mode */
            config->alt_gyro_mode = BMI3_GET_BITS(reg_data, BMI3_ALT_GYR_MODE);
 8003ee4:	89bb      	ldrh	r3, [r7, #12]
 8003ee6:	131b      	asrs	r3, r3, #12
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	705a      	strb	r2, [r3, #1]
 8003ef4:	e001      	b.n	8003efa <get_alternate_gyro_config+0x6e>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003ef6:	23ff      	movs	r3, #255	; 0xff
 8003ef8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <set_alternate_auto_config>:

/*!
 * @brief This internal API sets alternate auto configurations for feature interrupts.
 */
static int8_t set_alternate_auto_config(const struct bmi3_auto_config_change *config, struct bmi3_dev *dev)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b086      	sub	sp, #24
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the alternate auto configuration */
    uint8_t alt_auto_config[2] = { 0 };
 8003f10:	2300      	movs	r3, #0
 8003f12:	823b      	strh	r3, [r7, #16]

    /* Array to set the base address of alternate auto config */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ALT_AUTO_CONFIG, 0 };
 8003f14:	2323      	movs	r3, #35	; 0x23
 8003f16:	81bb      	strh	r3, [r7, #12]

    uint8_t alt_switch, user_switch;

    if (config != NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d035      	beq.n	8003f8a <set_alternate_auto_config+0x84>
    {
        /* Set the alternate auto config base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003f1e:	f107 010c 	add.w	r1, r7, #12
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2202      	movs	r2, #2
 8003f26:	2041      	movs	r0, #65	; 0x41
 8003f28:	f7fd fb05 	bl	8001536 <bmi3_set_regs>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8003f30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d12a      	bne.n	8003f8e <set_alternate_auto_config+0x88>
        {
            /* Set alternate switch config */
            alt_switch = BMI3_SET_BIT_POS0(alt_auto_config[0],
 8003f38:	7c3b      	ldrb	r3, [r7, #16]
 8003f3a:	b25b      	sxtb	r3, r3
 8003f3c:	f023 030f 	bic.w	r3, r3, #15
 8003f40:	b25a      	sxtb	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	b25b      	sxtb	r3, r3
 8003f48:	f003 030f 	and.w	r3, r3, #15
 8003f4c:	b25b      	sxtb	r3, r3
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	b25b      	sxtb	r3, r3
 8003f52:	75bb      	strb	r3, [r7, #22]
                                           BMI3_ALT_CONF_ALT_SWITCH,
                                           config->alt_conf_alt_switch_src_select);

            /* Set alternate user config */
            user_switch = BMI3_SET_BITS(alt_auto_config[0],
 8003f54:	7c3b      	ldrb	r3, [r7, #16]
 8003f56:	b25b      	sxtb	r3, r3
 8003f58:	f003 030f 	and.w	r3, r3, #15
 8003f5c:	b25a      	sxtb	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	785b      	ldrb	r3, [r3, #1]
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	b25b      	sxtb	r3, r3
 8003f66:	4313      	orrs	r3, r2
 8003f68:	b25b      	sxtb	r3, r3
 8003f6a:	757b      	strb	r3, [r7, #21]
                                        BMI3_ALT_CONF_USER_SWITCH,
                                        config->alt_conf_user_switch_src_select);

            alt_auto_config[0] = alt_switch | user_switch;
 8003f6c:	7dba      	ldrb	r2, [r7, #22]
 8003f6e:	7d7b      	ldrb	r3, [r7, #21]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	743b      	strb	r3, [r7, #16]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, alt_auto_config, 2, dev);
 8003f76:	f107 0110 	add.w	r1, r7, #16
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	2042      	movs	r0, #66	; 0x42
 8003f80:	f7fd fad9 	bl	8001536 <bmi3_set_regs>
 8003f84:	4603      	mov	r3, r0
 8003f86:	75fb      	strb	r3, [r7, #23]
 8003f88:	e001      	b.n	8003f8e <set_alternate_auto_config+0x88>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003f8a:	23ff      	movs	r3, #255	; 0xff
 8003f8c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003f8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <get_alternate_auto_config>:

/*!
 * @brief This internal API gets alternate auto configurations for feature interrupts.
 */
static int8_t get_alternate_auto_config(struct bmi3_auto_config_change *config, struct bmi3_dev *dev)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
 8003fa2:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the alternate auto configuration */
    uint8_t alt_auto_config[2] = { 0 };
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	81bb      	strh	r3, [r7, #12]

    /* Array to set the base address of alternate auto config */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ALT_AUTO_CONFIG, 0 };
 8003fa8:	2323      	movs	r3, #35	; 0x23
 8003faa:	813b      	strh	r3, [r7, #8]

    if (config != NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d025      	beq.n	8003ffe <get_alternate_auto_config+0x64>
    {
        /* Set the alternate auto config base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003fb2:	f107 0108 	add.w	r1, r7, #8
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2202      	movs	r2, #2
 8003fba:	2041      	movs	r0, #65	; 0x41
 8003fbc:	f7fd fabb 	bl	8001536 <bmi3_set_regs>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8003fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d11a      	bne.n	8004002 <get_alternate_auto_config+0x68>
        {
            /* Get the configuration from the feature engine register where alternate config feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, alt_auto_config, 2, dev);
 8003fcc:	f107 010c 	add.w	r1, r7, #12
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	2042      	movs	r0, #66	; 0x42
 8003fd6:	f7fd fa49 	bl	800146c <bmi3_get_regs>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI3_OK)
 8003fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10d      	bne.n	8004002 <get_alternate_auto_config+0x68>
            {
                /* Get alternate switch config */
                config->alt_conf_alt_switch_src_select = alt_auto_config[0] & BMI3_ALT_CONF_ALT_SWITCH_MASK;
 8003fe6:	7b3b      	ldrb	r3, [r7, #12]
 8003fe8:	f003 030f 	and.w	r3, r3, #15
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	701a      	strb	r2, [r3, #0]

                /* Get alternate user config */
                config->alt_conf_user_switch_src_select = (alt_auto_config[0] & BMI3_ALT_CONF_USER_SWITCH_MASK) >>
 8003ff2:	7b3b      	ldrb	r3, [r7, #12]
 8003ff4:	091b      	lsrs	r3, r3, #4
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	705a      	strb	r2, [r3, #1]
 8003ffc:	e001      	b.n	8004002 <get_alternate_auto_config+0x68>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003ffe:	23ff      	movs	r3, #255	; 0xff
 8004000:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004002:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <validate_acc_odr_avg>:

/*!
 * @brief This internal API is used to validate ODR and AVG combinations for accel
 */
static int8_t validate_acc_odr_avg(uint8_t acc_odr, uint8_t acc_avg)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	4603      	mov	r3, r0
 8004018:	460a      	mov	r2, r1
 800401a:	71fb      	strb	r3, [r7, #7]
 800401c:	4613      	mov	r3, r2
 800401e:	71bb      	strb	r3, [r7, #6]
    int8_t rslt;

    float odr = 0.0, avg = 0.0;
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	f04f 0300 	mov.w	r3, #0
 800402a:	613b      	str	r3, [r7, #16]

    switch (acc_odr)
 800402c:	79fb      	ldrb	r3, [r7, #7]
 800402e:	3b01      	subs	r3, #1
 8004030:	2b09      	cmp	r3, #9
 8004032:	d835      	bhi.n	80040a0 <validate_acc_odr_avg+0x90>
 8004034:	a201      	add	r2, pc, #4	; (adr r2, 800403c <validate_acc_odr_avg+0x2c>)
 8004036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403a:	bf00      	nop
 800403c:	08004065 	.word	0x08004065
 8004040:	0800406b 	.word	0x0800406b
 8004044:	08004071 	.word	0x08004071
 8004048:	08004077 	.word	0x08004077
 800404c:	0800407d 	.word	0x0800407d
 8004050:	08004083 	.word	0x08004083
 8004054:	08004089 	.word	0x08004089
 8004058:	0800408f 	.word	0x0800408f
 800405c:	08004095 	.word	0x08004095
 8004060:	0800409b 	.word	0x0800409b
    {
        case BMI3_ACC_ODR_0_78HZ:
            odr = 0.78125;
 8004064:	4b2f      	ldr	r3, [pc, #188]	; (8004124 <validate_acc_odr_avg+0x114>)
 8004066:	617b      	str	r3, [r7, #20]
            break;
 8004068:	e01b      	b.n	80040a2 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_1_56HZ:
            odr = 1.5625;
 800406a:	4b2f      	ldr	r3, [pc, #188]	; (8004128 <validate_acc_odr_avg+0x118>)
 800406c:	617b      	str	r3, [r7, #20]
            break;
 800406e:	e018      	b.n	80040a2 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_3_125HZ:
            odr = 3.125;
 8004070:	4b2e      	ldr	r3, [pc, #184]	; (800412c <validate_acc_odr_avg+0x11c>)
 8004072:	617b      	str	r3, [r7, #20]
            break;
 8004074:	e015      	b.n	80040a2 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_6_25HZ:
            odr = 6.25;
 8004076:	4b2e      	ldr	r3, [pc, #184]	; (8004130 <validate_acc_odr_avg+0x120>)
 8004078:	617b      	str	r3, [r7, #20]
            break;
 800407a:	e012      	b.n	80040a2 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_12_5HZ:
            odr = 12.5;
 800407c:	4b2d      	ldr	r3, [pc, #180]	; (8004134 <validate_acc_odr_avg+0x124>)
 800407e:	617b      	str	r3, [r7, #20]
            break;
 8004080:	e00f      	b.n	80040a2 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_25HZ:
            odr = 25.0;
 8004082:	4b2d      	ldr	r3, [pc, #180]	; (8004138 <validate_acc_odr_avg+0x128>)
 8004084:	617b      	str	r3, [r7, #20]
            break;
 8004086:	e00c      	b.n	80040a2 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_50HZ:
            odr = 50.0;
 8004088:	4b2c      	ldr	r3, [pc, #176]	; (800413c <validate_acc_odr_avg+0x12c>)
 800408a:	617b      	str	r3, [r7, #20]
            break;
 800408c:	e009      	b.n	80040a2 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_100HZ:
            odr = 100.0;
 800408e:	4b2c      	ldr	r3, [pc, #176]	; (8004140 <validate_acc_odr_avg+0x130>)
 8004090:	617b      	str	r3, [r7, #20]
            break;
 8004092:	e006      	b.n	80040a2 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_200HZ:
            odr = 200.0;
 8004094:	4b2b      	ldr	r3, [pc, #172]	; (8004144 <validate_acc_odr_avg+0x134>)
 8004096:	617b      	str	r3, [r7, #20]
            break;
 8004098:	e003      	b.n	80040a2 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_400HZ:
            odr = 400.0;
 800409a:	4b2b      	ldr	r3, [pc, #172]	; (8004148 <validate_acc_odr_avg+0x138>)
 800409c:	617b      	str	r3, [r7, #20]
            break;
 800409e:	e000      	b.n	80040a2 <validate_acc_odr_avg+0x92>
        default:
            break;
 80040a0:	bf00      	nop
    }

    switch (acc_avg)
 80040a2:	79bb      	ldrb	r3, [r7, #6]
 80040a4:	2b06      	cmp	r3, #6
 80040a6:	d82d      	bhi.n	8004104 <validate_acc_odr_avg+0xf4>
 80040a8:	a201      	add	r2, pc, #4	; (adr r2, 80040b0 <validate_acc_odr_avg+0xa0>)
 80040aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ae:	bf00      	nop
 80040b0:	080040cd 	.word	0x080040cd
 80040b4:	080040d5 	.word	0x080040d5
 80040b8:	080040dd 	.word	0x080040dd
 80040bc:	080040e5 	.word	0x080040e5
 80040c0:	080040ed 	.word	0x080040ed
 80040c4:	080040f5 	.word	0x080040f5
 80040c8:	080040fd 	.word	0x080040fd
    {
        case BMI3_ACC_AVG1:
            avg = 1.0;
 80040cc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80040d0:	613b      	str	r3, [r7, #16]
            break;
 80040d2:	e018      	b.n	8004106 <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG2:
            avg = 2.0;
 80040d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80040d8:	613b      	str	r3, [r7, #16]
            break;
 80040da:	e014      	b.n	8004106 <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG4:
            avg = 4.0;
 80040dc:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80040e0:	613b      	str	r3, [r7, #16]
            break;
 80040e2:	e010      	b.n	8004106 <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG8:
            avg = 8.0;
 80040e4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80040e8:	613b      	str	r3, [r7, #16]
            break;
 80040ea:	e00c      	b.n	8004106 <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG16:
            avg = 16.0;
 80040ec:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80040f0:	613b      	str	r3, [r7, #16]
            break;
 80040f2:	e008      	b.n	8004106 <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG32:
            avg = 32.0;
 80040f4:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
 80040f8:	613b      	str	r3, [r7, #16]
            break;
 80040fa:	e004      	b.n	8004106 <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG64:
            avg = 64.0;
 80040fc:	f04f 4385 	mov.w	r3, #1115684864	; 0x42800000
 8004100:	613b      	str	r3, [r7, #16]
            break;
 8004102:	e000      	b.n	8004106 <validate_acc_odr_avg+0xf6>
        default:
            break;
 8004104:	bf00      	nop
    }

    rslt = accel_skipped_samples_check(odr, avg);
 8004106:	edd7 0a04 	vldr	s1, [r7, #16]
 800410a:	ed97 0a05 	vldr	s0, [r7, #20]
 800410e:	f000 f81d 	bl	800414c <accel_skipped_samples_check>
 8004112:	4603      	mov	r3, r0
 8004114:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8004116:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800411a:	4618      	mov	r0, r3
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	3f480000 	.word	0x3f480000
 8004128:	3fc80000 	.word	0x3fc80000
 800412c:	40480000 	.word	0x40480000
 8004130:	40c80000 	.word	0x40c80000
 8004134:	41480000 	.word	0x41480000
 8004138:	41c80000 	.word	0x41c80000
 800413c:	42480000 	.word	0x42480000
 8004140:	42c80000 	.word	0x42c80000
 8004144:	43480000 	.word	0x43480000
 8004148:	43c80000 	.word	0x43c80000

0800414c <accel_skipped_samples_check>:

/*!
 * @brief This internal API is used to check skipped samples for accel
 */
static int8_t accel_skipped_samples_check(float odr, float avg)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	ed87 0a01 	vstr	s0, [r7, #4]
 8004156:	edc7 0a00 	vstr	s1, [r7]
    int8_t rslt;

    float max_odr = 6400.0;
 800415a:	4b1b      	ldr	r3, [pc, #108]	; (80041c8 <accel_skipped_samples_check+0x7c>)
 800415c:	613b      	str	r3, [r7, #16]

    float skipped_samples = 0.0;
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]

    if ((odr > 0.0) && (avg > 0.0))
 8004164:	edd7 7a01 	vldr	s15, [r7, #4]
 8004168:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800416c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004170:	dd1f      	ble.n	80041b2 <accel_skipped_samples_check+0x66>
 8004172:	edd7 7a00 	vldr	s15, [r7]
 8004176:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800417a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800417e:	dd18      	ble.n	80041b2 <accel_skipped_samples_check+0x66>
    {
        skipped_samples = (float)(max_odr / odr) - avg;
 8004180:	edd7 6a04 	vldr	s13, [r7, #16]
 8004184:	edd7 7a01 	vldr	s15, [r7, #4]
 8004188:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800418c:	edd7 7a00 	vldr	s15, [r7]
 8004190:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004194:	edc7 7a03 	vstr	s15, [r7, #12]

        if (skipped_samples > 0.0)
 8004198:	edd7 7a03 	vldr	s15, [r7, #12]
 800419c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a4:	dd02      	ble.n	80041ac <accel_skipped_samples_check+0x60>
        {
            rslt = BMI3_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 80041aa:	e004      	b.n	80041b6 <accel_skipped_samples_check+0x6a>
        }
        else
        {
            rslt = BMI3_E_ACC_INVALID_CFG;
 80041ac:	23fc      	movs	r3, #252	; 0xfc
 80041ae:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 80041b0:	e001      	b.n	80041b6 <accel_skipped_samples_check+0x6a>
        }
    }
    else
    {
        rslt = BMI3_E_ACC_INVALID_CFG;
 80041b2:	23fc      	movs	r3, #252	; 0xfc
 80041b4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80041b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	371c      	adds	r7, #28
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	45c80000 	.word	0x45c80000

080041cc <validate_gyr_odr_avg>:

/*!
 * @brief This internal API is used to validate ODR and AVG combinations for gyro
 */
static int8_t validate_gyr_odr_avg(uint8_t gyr_odr, uint8_t gyr_avg)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	4603      	mov	r3, r0
 80041d4:	460a      	mov	r2, r1
 80041d6:	71fb      	strb	r3, [r7, #7]
 80041d8:	4613      	mov	r3, r2
 80041da:	71bb      	strb	r3, [r7, #6]
    int8_t rslt;

    float odr = 0.0, avg = 0.0;
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	617b      	str	r3, [r7, #20]
 80041e2:	f04f 0300 	mov.w	r3, #0
 80041e6:	613b      	str	r3, [r7, #16]

    switch (gyr_odr)
 80041e8:	79fb      	ldrb	r3, [r7, #7]
 80041ea:	3b01      	subs	r3, #1
 80041ec:	2b09      	cmp	r3, #9
 80041ee:	d835      	bhi.n	800425c <validate_gyr_odr_avg+0x90>
 80041f0:	a201      	add	r2, pc, #4	; (adr r2, 80041f8 <validate_gyr_odr_avg+0x2c>)
 80041f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f6:	bf00      	nop
 80041f8:	08004221 	.word	0x08004221
 80041fc:	08004227 	.word	0x08004227
 8004200:	0800422d 	.word	0x0800422d
 8004204:	08004233 	.word	0x08004233
 8004208:	08004239 	.word	0x08004239
 800420c:	0800423f 	.word	0x0800423f
 8004210:	08004245 	.word	0x08004245
 8004214:	0800424b 	.word	0x0800424b
 8004218:	08004251 	.word	0x08004251
 800421c:	08004257 	.word	0x08004257
    {
        case BMI3_GYR_ODR_0_78HZ:
            odr = 0.78125;
 8004220:	4b2f      	ldr	r3, [pc, #188]	; (80042e0 <validate_gyr_odr_avg+0x114>)
 8004222:	617b      	str	r3, [r7, #20]
            break;
 8004224:	e01b      	b.n	800425e <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_1_56HZ:
            odr = 1.5625;
 8004226:	4b2f      	ldr	r3, [pc, #188]	; (80042e4 <validate_gyr_odr_avg+0x118>)
 8004228:	617b      	str	r3, [r7, #20]
            break;
 800422a:	e018      	b.n	800425e <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_3_125HZ:
            odr = 3.125;
 800422c:	4b2e      	ldr	r3, [pc, #184]	; (80042e8 <validate_gyr_odr_avg+0x11c>)
 800422e:	617b      	str	r3, [r7, #20]
            break;
 8004230:	e015      	b.n	800425e <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_6_25HZ:
            odr = 6.25;
 8004232:	4b2e      	ldr	r3, [pc, #184]	; (80042ec <validate_gyr_odr_avg+0x120>)
 8004234:	617b      	str	r3, [r7, #20]
            break;
 8004236:	e012      	b.n	800425e <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_12_5HZ:
            odr = 12.5;
 8004238:	4b2d      	ldr	r3, [pc, #180]	; (80042f0 <validate_gyr_odr_avg+0x124>)
 800423a:	617b      	str	r3, [r7, #20]
            break;
 800423c:	e00f      	b.n	800425e <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_25HZ:
            odr = 25.0;
 800423e:	4b2d      	ldr	r3, [pc, #180]	; (80042f4 <validate_gyr_odr_avg+0x128>)
 8004240:	617b      	str	r3, [r7, #20]
            break;
 8004242:	e00c      	b.n	800425e <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_50HZ:
            odr = 50.0;
 8004244:	4b2c      	ldr	r3, [pc, #176]	; (80042f8 <validate_gyr_odr_avg+0x12c>)
 8004246:	617b      	str	r3, [r7, #20]
            break;
 8004248:	e009      	b.n	800425e <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_100HZ:
            odr = 100.0;
 800424a:	4b2c      	ldr	r3, [pc, #176]	; (80042fc <validate_gyr_odr_avg+0x130>)
 800424c:	617b      	str	r3, [r7, #20]
            break;
 800424e:	e006      	b.n	800425e <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_200HZ:
            odr = 200.0;
 8004250:	4b2b      	ldr	r3, [pc, #172]	; (8004300 <validate_gyr_odr_avg+0x134>)
 8004252:	617b      	str	r3, [r7, #20]
            break;
 8004254:	e003      	b.n	800425e <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_400HZ:
            odr = 400.0;
 8004256:	4b2b      	ldr	r3, [pc, #172]	; (8004304 <validate_gyr_odr_avg+0x138>)
 8004258:	617b      	str	r3, [r7, #20]
            break;
 800425a:	e000      	b.n	800425e <validate_gyr_odr_avg+0x92>
        default:
            break;
 800425c:	bf00      	nop
    }

    switch (gyr_avg)
 800425e:	79bb      	ldrb	r3, [r7, #6]
 8004260:	2b06      	cmp	r3, #6
 8004262:	d82d      	bhi.n	80042c0 <validate_gyr_odr_avg+0xf4>
 8004264:	a201      	add	r2, pc, #4	; (adr r2, 800426c <validate_gyr_odr_avg+0xa0>)
 8004266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426a:	bf00      	nop
 800426c:	08004289 	.word	0x08004289
 8004270:	08004291 	.word	0x08004291
 8004274:	08004299 	.word	0x08004299
 8004278:	080042a1 	.word	0x080042a1
 800427c:	080042a9 	.word	0x080042a9
 8004280:	080042b1 	.word	0x080042b1
 8004284:	080042b9 	.word	0x080042b9
    {
        case BMI3_GYR_AVG1:
            avg = 1.0;
 8004288:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800428c:	613b      	str	r3, [r7, #16]
            break;
 800428e:	e018      	b.n	80042c2 <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG2:
            avg = 2.0;
 8004290:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004294:	613b      	str	r3, [r7, #16]
            break;
 8004296:	e014      	b.n	80042c2 <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG4:
            avg = 4.0;
 8004298:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800429c:	613b      	str	r3, [r7, #16]
            break;
 800429e:	e010      	b.n	80042c2 <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG8:
            avg = 8.0;
 80042a0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80042a4:	613b      	str	r3, [r7, #16]
            break;
 80042a6:	e00c      	b.n	80042c2 <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG16:
            avg = 16.0;
 80042a8:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80042ac:	613b      	str	r3, [r7, #16]
            break;
 80042ae:	e008      	b.n	80042c2 <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG32:
            avg = 32.0;
 80042b0:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
 80042b4:	613b      	str	r3, [r7, #16]
            break;
 80042b6:	e004      	b.n	80042c2 <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG64:
            avg = 64.0;
 80042b8:	f04f 4385 	mov.w	r3, #1115684864	; 0x42800000
 80042bc:	613b      	str	r3, [r7, #16]
            break;
 80042be:	e000      	b.n	80042c2 <validate_gyr_odr_avg+0xf6>
        default:
            break;
 80042c0:	bf00      	nop
    }

    rslt = gyro_skipped_samples_check(odr, avg);
 80042c2:	edd7 0a04 	vldr	s1, [r7, #16]
 80042c6:	ed97 0a05 	vldr	s0, [r7, #20]
 80042ca:	f000 f81d 	bl	8004308 <gyro_skipped_samples_check>
 80042ce:	4603      	mov	r3, r0
 80042d0:	73fb      	strb	r3, [r7, #15]

    return rslt;
 80042d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	3f480000 	.word	0x3f480000
 80042e4:	3fc80000 	.word	0x3fc80000
 80042e8:	40480000 	.word	0x40480000
 80042ec:	40c80000 	.word	0x40c80000
 80042f0:	41480000 	.word	0x41480000
 80042f4:	41c80000 	.word	0x41c80000
 80042f8:	42480000 	.word	0x42480000
 80042fc:	42c80000 	.word	0x42c80000
 8004300:	43480000 	.word	0x43480000
 8004304:	43c80000 	.word	0x43c80000

08004308 <gyro_skipped_samples_check>:

/*!
 * @brief This internal API is used to check skipped samples for gyro
 */
static int8_t gyro_skipped_samples_check(float odr, float avg)
{
 8004308:	b480      	push	{r7}
 800430a:	b087      	sub	sp, #28
 800430c:	af00      	add	r7, sp, #0
 800430e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004312:	edc7 0a00 	vstr	s1, [r7]
    int8_t rslt;

    float max_odr = 6400.0;
 8004316:	4b1b      	ldr	r3, [pc, #108]	; (8004384 <gyro_skipped_samples_check+0x7c>)
 8004318:	613b      	str	r3, [r7, #16]

    float skipped_samples = 0.0;
 800431a:	f04f 0300 	mov.w	r3, #0
 800431e:	60fb      	str	r3, [r7, #12]

    if ((odr > 0.0) && (avg > 0.0))
 8004320:	edd7 7a01 	vldr	s15, [r7, #4]
 8004324:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800432c:	dd1f      	ble.n	800436e <gyro_skipped_samples_check+0x66>
 800432e:	edd7 7a00 	vldr	s15, [r7]
 8004332:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800433a:	dd18      	ble.n	800436e <gyro_skipped_samples_check+0x66>
    {
        skipped_samples = (float)(max_odr / odr) - avg;
 800433c:	edd7 6a04 	vldr	s13, [r7, #16]
 8004340:	edd7 7a01 	vldr	s15, [r7, #4]
 8004344:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004348:	edd7 7a00 	vldr	s15, [r7]
 800434c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004350:	edc7 7a03 	vstr	s15, [r7, #12]

        if (skipped_samples > 0.0)
 8004354:	edd7 7a03 	vldr	s15, [r7, #12]
 8004358:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800435c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004360:	dd02      	ble.n	8004368 <gyro_skipped_samples_check+0x60>
        {
            rslt = BMI3_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 8004366:	e004      	b.n	8004372 <gyro_skipped_samples_check+0x6a>
        }
        else
        {
            rslt = BMI3_E_GYRO_INVALID_CFG;
 8004368:	23fb      	movs	r3, #251	; 0xfb
 800436a:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 800436c:	e001      	b.n	8004372 <gyro_skipped_samples_check+0x6a>
        }
    }
    else
    {
        rslt = BMI3_E_GYRO_INVALID_CFG;
 800436e:	23fb      	movs	r3, #251	; 0xfb
 8004370:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004372:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004376:	4618      	mov	r0, r3
 8004378:	371c      	adds	r7, #28
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	45c80000 	.word	0x45c80000

08004388 <bmi323_init>:
/*!
 * @brief This API is the entry point for bmi323 sensor. It reads and validates the
 * chip-id of the sensor.
 */
int8_t bmi323_init(struct bmi3_dev *dev)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 fdf5 	bl	8004f80 <null_ptr_check>
 8004396:	4603      	mov	r3, r0
 8004398:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI323_OK)
 800439a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d104      	bne.n	80043ac <bmi323_init+0x24>
    {
        rslt = bmi3_init(dev);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7fd f810 	bl	80013c8 <bmi3_init>
 80043a8:	4603      	mov	r3, r0
 80043aa:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI323_OK)
 80043ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d109      	bne.n	80043c8 <bmi323_init+0x40>
    {
        /* Validate chip-id */
        if (dev->chip_id == BMI323_CHIP_ID)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b43      	cmp	r3, #67	; 0x43
 80043ba:	d103      	bne.n	80043c4 <bmi323_init+0x3c>
        {
            /* Assign resolution to the structure */
            dev->resolution = BMI323_16_BIT_RESOLUTION;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2210      	movs	r2, #16
 80043c0:	731a      	strb	r2, [r3, #12]
 80043c2:	e001      	b.n	80043c8 <bmi323_init+0x40>
        }
        else
        {
            rslt = BMI323_E_DEV_NOT_FOUND;
 80043c4:	23fd      	movs	r3, #253	; 0xfd
 80043c6:	73fb      	strb	r3, [r7, #15]
        }
    }

    if (rslt == BMI323_OK)
 80043c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d105      	bne.n	80043dc <bmi323_init+0x54>
    {
        rslt = bmi323_context_switch_selection(BMI323_WEARABLE_SEL, dev);
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	2001      	movs	r0, #1
 80043d4:	f000 f832 	bl	800443c <bmi323_context_switch_selection>
 80043d8:	4603      	mov	r3, r0
 80043da:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80043dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <bmi323_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi323_set_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	460b      	mov	r3, r1
 80043f2:	607a      	str	r2, [r7, #4]
 80043f4:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    rslt = bmi3_set_sensor_config(sens_cfg, n_sens, dev);
 80043f6:	7afb      	ldrb	r3, [r7, #11]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	4619      	mov	r1, r3
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f7fd f98d 	bl	800171c <bmi3_set_sensor_config>
 8004402:	4603      	mov	r3, r0
 8004404:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8004406:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <bmi323_get_sensor_config>:

/*!
 * @brief This API gets the sensor/feature configuration.
 */
int8_t bmi323_get_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b086      	sub	sp, #24
 8004416:	af00      	add	r7, sp, #0
 8004418:	60f8      	str	r0, [r7, #12]
 800441a:	460b      	mov	r3, r1
 800441c:	607a      	str	r2, [r7, #4]
 800441e:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    rslt = bmi3_get_sensor_config(sens_cfg, n_sens, dev);
 8004420:	7afb      	ldrb	r3, [r7, #11]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	4619      	mov	r1, r3
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f7fd fa82 	bl	8001930 <bmi3_get_sensor_config>
 800442c:	4603      	mov	r3, r0
 800442e:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8004430:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <bmi323_context_switch_selection>:

/*!
 * @brief This API writes the configurations of context feature for smart phone, wearables and hearables.
 */
int8_t bmi323_context_switch_selection(uint8_t context_sel, struct bmi3_dev *dev)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b0c8      	sub	sp, #288	; 0x120
 8004440:	af00      	add	r7, sp, #0
 8004442:	4602      	mov	r2, r0
 8004444:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004448:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800444c:	6019      	str	r1, [r3, #0]
 800444e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004452:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004456:	701a      	strb	r2, [r3, #0]
    /* Variable to define error */
    int8_t rslt;

    struct bmi3_sens_config sens_cfg[BMI323_MAX_FEATURE];

    uint8_t index = 0;
 8004458:	2300      	movs	r3, #0
 800445a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    if (context_sel < BMI323_SEL_MAX)
 800445e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004462:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	2b02      	cmp	r3, #2
 800446a:	f200 8578 	bhi.w	8004f5e <bmi323_context_switch_selection+0xb22>
    {
        /* Set any-motion configuration */
        sens_cfg[0].type = BMI323_ANY_MOTION;
 800446e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004472:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004476:	2203      	movs	r2, #3
 8004478:	701a      	strb	r2, [r3, #0]
        sens_cfg[0].cfg.any_motion.slope_thres = any_motion_param_set[context_sel][index++];
 800447a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800447e:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004482:	781a      	ldrb	r2, [r3, #0]
 8004484:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004488:	1c59      	adds	r1, r3, #1
 800448a:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 800448e:	4618      	mov	r0, r3
 8004490:	49e3      	ldr	r1, [pc, #908]	; (8004820 <bmi323_context_switch_selection+0x3e4>)
 8004492:	4613      	mov	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	4403      	add	r3, r0
 800449a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800449e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80044a2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80044a6:	809a      	strh	r2, [r3, #4]
        sens_cfg[0].cfg.any_motion.acc_ref_up = (uint8_t)(any_motion_param_set[context_sel][index++]);
 80044a8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80044ac:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80044b0:	781a      	ldrb	r2, [r3, #0]
 80044b2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80044b6:	1c59      	adds	r1, r3, #1
 80044b8:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80044bc:	4618      	mov	r0, r3
 80044be:	49d8      	ldr	r1, [pc, #864]	; (8004820 <bmi323_context_switch_selection+0x3e4>)
 80044c0:	4613      	mov	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	4403      	add	r3, r0
 80044c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80044d2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80044d6:	719a      	strb	r2, [r3, #6]
        sens_cfg[0].cfg.any_motion.hysteresis = any_motion_param_set[context_sel][index++];
 80044d8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80044dc:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80044e0:	781a      	ldrb	r2, [r3, #0]
 80044e2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80044e6:	1c59      	adds	r1, r3, #1
 80044e8:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80044ec:	4618      	mov	r0, r3
 80044ee:	49cc      	ldr	r1, [pc, #816]	; (8004820 <bmi323_context_switch_selection+0x3e4>)
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	4403      	add	r3, r0
 80044f8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80044fc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004500:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004504:	811a      	strh	r2, [r3, #8]
        sens_cfg[0].cfg.any_motion.duration = any_motion_param_set[context_sel][index++];
 8004506:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800450a:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800450e:	781a      	ldrb	r2, [r3, #0]
 8004510:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004514:	1c59      	adds	r1, r3, #1
 8004516:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 800451a:	4618      	mov	r0, r3
 800451c:	49c0      	ldr	r1, [pc, #768]	; (8004820 <bmi323_context_switch_selection+0x3e4>)
 800451e:	4613      	mov	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	4403      	add	r3, r0
 8004526:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800452a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800452e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004532:	805a      	strh	r2, [r3, #2]
        sens_cfg[0].cfg.any_motion.wait_time = any_motion_param_set[context_sel][index++];
 8004534:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004538:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800453c:	781a      	ldrb	r2, [r3, #0]
 800453e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004542:	1c59      	adds	r1, r3, #1
 8004544:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004548:	4618      	mov	r0, r3
 800454a:	49b5      	ldr	r1, [pc, #724]	; (8004820 <bmi323_context_switch_selection+0x3e4>)
 800454c:	4613      	mov	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	4403      	add	r3, r0
 8004554:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004558:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800455c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004560:	815a      	strh	r2, [r3, #10]

        /* Set no-motion configuration */
        index = 0;
 8004562:	2300      	movs	r3, #0
 8004564:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        sens_cfg[1].type = BMI323_NO_MOTION;
 8004568:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800456c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004570:	2204      	movs	r2, #4
 8004572:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        sens_cfg[1].cfg.no_motion.slope_thres = no_motion_param_set[context_sel][index++];
 8004576:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800457a:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800457e:	781a      	ldrb	r2, [r3, #0]
 8004580:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004584:	1c59      	adds	r1, r3, #1
 8004586:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 800458a:	4618      	mov	r0, r3
 800458c:	49a5      	ldr	r1, [pc, #660]	; (8004824 <bmi323_context_switch_selection+0x3e8>)
 800458e:	4613      	mov	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	4403      	add	r3, r0
 8004596:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800459a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800459e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80045a2:	865a      	strh	r2, [r3, #50]	; 0x32
        sens_cfg[1].cfg.no_motion.acc_ref_up = (uint8_t)(no_motion_param_set[context_sel][index++]);
 80045a4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80045a8:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80045ac:	781a      	ldrb	r2, [r3, #0]
 80045ae:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80045b2:	1c59      	adds	r1, r3, #1
 80045b4:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80045b8:	4618      	mov	r0, r3
 80045ba:	499a      	ldr	r1, [pc, #616]	; (8004824 <bmi323_context_switch_selection+0x3e8>)
 80045bc:	4613      	mov	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	4403      	add	r3, r0
 80045c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80045ce:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80045d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        sens_cfg[1].cfg.no_motion.hysteresis = no_motion_param_set[context_sel][index++];
 80045d6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80045da:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80045de:	781a      	ldrb	r2, [r3, #0]
 80045e0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80045e4:	1c59      	adds	r1, r3, #1
 80045e6:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80045ea:	4618      	mov	r0, r3
 80045ec:	498d      	ldr	r1, [pc, #564]	; (8004824 <bmi323_context_switch_selection+0x3e8>)
 80045ee:	4613      	mov	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	4403      	add	r3, r0
 80045f6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80045fa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80045fe:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004602:	86da      	strh	r2, [r3, #54]	; 0x36
        sens_cfg[1].cfg.no_motion.duration = no_motion_param_set[context_sel][index++];
 8004604:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004608:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800460c:	781a      	ldrb	r2, [r3, #0]
 800460e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004612:	1c59      	adds	r1, r3, #1
 8004614:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004618:	4618      	mov	r0, r3
 800461a:	4982      	ldr	r1, [pc, #520]	; (8004824 <bmi323_context_switch_selection+0x3e8>)
 800461c:	4613      	mov	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	4403      	add	r3, r0
 8004624:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004628:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800462c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004630:	861a      	strh	r2, [r3, #48]	; 0x30
        sens_cfg[1].cfg.no_motion.wait_time = no_motion_param_set[context_sel][index++];
 8004632:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004636:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800463a:	781a      	ldrb	r2, [r3, #0]
 800463c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004640:	1c59      	adds	r1, r3, #1
 8004642:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004646:	4618      	mov	r0, r3
 8004648:	4976      	ldr	r1, [pc, #472]	; (8004824 <bmi323_context_switch_selection+0x3e8>)
 800464a:	4613      	mov	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	4403      	add	r3, r0
 8004652:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004656:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800465a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800465e:	871a      	strh	r2, [r3, #56]	; 0x38

        /* Set tap configuration */
        index = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        sens_cfg[2].type = BMI323_TAP;
 8004666:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800466a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800466e:	2209      	movs	r2, #9
 8004670:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        sens_cfg[2].cfg.tap.axis_sel = (uint8_t)tap_param_set[context_sel][index++];
 8004674:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004678:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800467c:	781a      	ldrb	r2, [r3, #0]
 800467e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004682:	1c59      	adds	r1, r3, #1
 8004684:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004688:	4618      	mov	r0, r3
 800468a:	4967      	ldr	r1, [pc, #412]	; (8004828 <bmi323_context_switch_selection+0x3ec>)
 800468c:	4613      	mov	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	4403      	add	r3, r0
 8004696:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800469a:	b2da      	uxtb	r2, r3
 800469c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80046a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80046a4:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        sens_cfg[2].cfg.tap.wait_for_timeout = (uint8_t)tap_param_set[context_sel][index++];
 80046a8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80046ac:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80046b0:	781a      	ldrb	r2, [r3, #0]
 80046b2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80046b6:	1c59      	adds	r1, r3, #1
 80046b8:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80046bc:	4618      	mov	r0, r3
 80046be:	495a      	ldr	r1, [pc, #360]	; (8004828 <bmi323_context_switch_selection+0x3ec>)
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	4403      	add	r3, r0
 80046ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80046d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80046d8:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
        sens_cfg[2].cfg.tap.max_peaks_for_tap = (uint8_t)tap_param_set[context_sel][index++];
 80046dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80046e0:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80046e4:	781a      	ldrb	r2, [r3, #0]
 80046e6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80046ea:	1c59      	adds	r1, r3, #1
 80046ec:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80046f0:	4618      	mov	r0, r3
 80046f2:	494d      	ldr	r1, [pc, #308]	; (8004828 <bmi323_context_switch_selection+0x3ec>)
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	4403      	add	r3, r0
 80046fe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004702:	b2da      	uxtb	r2, r3
 8004704:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004708:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800470c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        sens_cfg[2].cfg.tap.mode = (uint8_t)tap_param_set[context_sel][index++];
 8004710:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004714:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004718:	781a      	ldrb	r2, [r3, #0]
 800471a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800471e:	1c59      	adds	r1, r3, #1
 8004720:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004724:	4618      	mov	r0, r3
 8004726:	4940      	ldr	r1, [pc, #256]	; (8004828 <bmi323_context_switch_selection+0x3ec>)
 8004728:	4613      	mov	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	4403      	add	r3, r0
 8004732:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004736:	b2da      	uxtb	r2, r3
 8004738:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800473c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004740:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        sens_cfg[2].cfg.tap.tap_peak_thres = tap_param_set[context_sel][index++];
 8004744:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004748:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800474c:	781a      	ldrb	r2, [r3, #0]
 800474e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004752:	1c59      	adds	r1, r3, #1
 8004754:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004758:	4618      	mov	r0, r3
 800475a:	4933      	ldr	r1, [pc, #204]	; (8004828 <bmi323_context_switch_selection+0x3ec>)
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	4403      	add	r3, r0
 8004766:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800476a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800476e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004772:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        sens_cfg[2].cfg.tap.max_gest_dur = (uint8_t)tap_param_set[context_sel][index++];
 8004776:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800477a:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800477e:	781a      	ldrb	r2, [r3, #0]
 8004780:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004784:	1c59      	adds	r1, r3, #1
 8004786:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 800478a:	4618      	mov	r0, r3
 800478c:	4926      	ldr	r1, [pc, #152]	; (8004828 <bmi323_context_switch_selection+0x3ec>)
 800478e:	4613      	mov	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	4403      	add	r3, r0
 8004798:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800479c:	b2da      	uxtb	r2, r3
 800479e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80047a2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80047a6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        sens_cfg[2].cfg.tap.max_dur_between_peaks = (uint8_t)tap_param_set[context_sel][index++];
 80047aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80047ae:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80047b2:	781a      	ldrb	r2, [r3, #0]
 80047b4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80047b8:	1c59      	adds	r1, r3, #1
 80047ba:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80047be:	4618      	mov	r0, r3
 80047c0:	4919      	ldr	r1, [pc, #100]	; (8004828 <bmi323_context_switch_selection+0x3ec>)
 80047c2:	4613      	mov	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	4403      	add	r3, r0
 80047cc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80047d6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80047da:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sens_cfg[2].cfg.tap.tap_shock_settling_dur = (uint8_t)tap_param_set[context_sel][index++];
 80047de:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80047e2:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80047e6:	781a      	ldrb	r2, [r3, #0]
 80047e8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80047ec:	1c59      	adds	r1, r3, #1
 80047ee:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80047f2:	4618      	mov	r0, r3
 80047f4:	490c      	ldr	r1, [pc, #48]	; (8004828 <bmi323_context_switch_selection+0x3ec>)
 80047f6:	4613      	mov	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	4403      	add	r3, r0
 8004800:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004804:	b2da      	uxtb	r2, r3
 8004806:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800480a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800480e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
        sens_cfg[2].cfg.tap.min_quite_dur_between_taps = (uint8_t)tap_param_set[context_sel][index++];
 8004812:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004816:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800481a:	781a      	ldrb	r2, [r3, #0]
 800481c:	e006      	b.n	800482c <bmi323_context_switch_selection+0x3f0>
 800481e:	bf00      	nop
 8004820:	20000008 	.word	0x20000008
 8004824:	20000028 	.word	0x20000028
 8004828:	20000048 	.word	0x20000048
 800482c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004830:	1c59      	adds	r1, r3, #1
 8004832:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004836:	4618      	mov	r0, r3
 8004838:	49e9      	ldr	r1, [pc, #932]	; (8004be0 <bmi323_context_switch_selection+0x7a4>)
 800483a:	4613      	mov	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	4403      	add	r3, r0
 8004844:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004848:	b2da      	uxtb	r2, r3
 800484a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800484e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004852:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
        sens_cfg[2].cfg.tap.quite_time_after_gest = (uint8_t)tap_param_set[context_sel][index++];
 8004856:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800485a:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800485e:	781a      	ldrb	r2, [r3, #0]
 8004860:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004864:	1c59      	adds	r1, r3, #1
 8004866:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 800486a:	4618      	mov	r0, r3
 800486c:	49dc      	ldr	r1, [pc, #880]	; (8004be0 <bmi323_context_switch_selection+0x7a4>)
 800486e:	4613      	mov	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	4403      	add	r3, r0
 8004878:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800487c:	b2da      	uxtb	r2, r3
 800487e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004882:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004886:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

        /* Set step counter configuration */
        index = 0;
 800488a:	2300      	movs	r3, #0
 800488c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        sens_cfg[3].type = BMI323_STEP_COUNTER;
 8004890:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004894:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004898:	2205      	movs	r2, #5
 800489a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        sens_cfg[3].cfg.step_counter.watermark_level = step_counter_param_set[context_sel][index++];
 800489e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048a2:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80048a6:	781a      	ldrb	r2, [r3, #0]
 80048a8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80048ac:	1c59      	adds	r1, r3, #1
 80048ae:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80048b2:	4618      	mov	r0, r3
 80048b4:	49cb      	ldr	r1, [pc, #812]	; (8004be4 <bmi323_context_switch_selection+0x7a8>)
 80048b6:	2316      	movs	r3, #22
 80048b8:	fb02 f303 	mul.w	r3, r2, r3
 80048bc:	4403      	add	r3, r0
 80048be:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80048c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048c6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80048ca:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
        sens_cfg[3].cfg.step_counter.reset_counter = step_counter_param_set[context_sel][index++];
 80048ce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048d2:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80048d6:	781a      	ldrb	r2, [r3, #0]
 80048d8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80048dc:	1c59      	adds	r1, r3, #1
 80048de:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80048e2:	4618      	mov	r0, r3
 80048e4:	49bf      	ldr	r1, [pc, #764]	; (8004be4 <bmi323_context_switch_selection+0x7a8>)
 80048e6:	2316      	movs	r3, #22
 80048e8:	fb02 f303 	mul.w	r3, r2, r3
 80048ec:	4403      	add	r3, r0
 80048ee:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80048f2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048f6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80048fa:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
        sens_cfg[3].cfg.step_counter.env_min_dist_up = step_counter_param_set[context_sel][index++];
 80048fe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004902:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004906:	781a      	ldrb	r2, [r3, #0]
 8004908:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800490c:	1c59      	adds	r1, r3, #1
 800490e:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004912:	4618      	mov	r0, r3
 8004914:	49b3      	ldr	r1, [pc, #716]	; (8004be4 <bmi323_context_switch_selection+0x7a8>)
 8004916:	2316      	movs	r3, #22
 8004918:	fb02 f303 	mul.w	r3, r2, r3
 800491c:	4403      	add	r3, r0
 800491e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004922:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004926:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800492a:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
        sens_cfg[3].cfg.step_counter.env_coef_up = step_counter_param_set[context_sel][index++];
 800492e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004932:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004936:	781a      	ldrb	r2, [r3, #0]
 8004938:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800493c:	1c59      	adds	r1, r3, #1
 800493e:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004942:	4618      	mov	r0, r3
 8004944:	49a7      	ldr	r1, [pc, #668]	; (8004be4 <bmi323_context_switch_selection+0x7a8>)
 8004946:	2316      	movs	r3, #22
 8004948:	fb02 f303 	mul.w	r3, r2, r3
 800494c:	4403      	add	r3, r0
 800494e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004952:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004956:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800495a:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
        sens_cfg[3].cfg.step_counter.env_min_dist_down = step_counter_param_set[context_sel][index++];
 800495e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004962:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004966:	781a      	ldrb	r2, [r3, #0]
 8004968:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800496c:	1c59      	adds	r1, r3, #1
 800496e:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004972:	4618      	mov	r0, r3
 8004974:	499b      	ldr	r1, [pc, #620]	; (8004be4 <bmi323_context_switch_selection+0x7a8>)
 8004976:	2316      	movs	r3, #22
 8004978:	fb02 f303 	mul.w	r3, r2, r3
 800497c:	4403      	add	r3, r0
 800497e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004982:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004986:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800498a:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
        sens_cfg[3].cfg.step_counter.env_coef_down = step_counter_param_set[context_sel][index++];
 800498e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004992:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004996:	781a      	ldrb	r2, [r3, #0]
 8004998:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800499c:	1c59      	adds	r1, r3, #1
 800499e:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80049a2:	4618      	mov	r0, r3
 80049a4:	498f      	ldr	r1, [pc, #572]	; (8004be4 <bmi323_context_switch_selection+0x7a8>)
 80049a6:	2316      	movs	r3, #22
 80049a8:	fb02 f303 	mul.w	r3, r2, r3
 80049ac:	4403      	add	r3, r0
 80049ae:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80049b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80049b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80049ba:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        sens_cfg[3].cfg.step_counter.mean_val_decay = step_counter_param_set[context_sel][index++];
 80049be:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80049c2:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80049c6:	781a      	ldrb	r2, [r3, #0]
 80049c8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80049cc:	1c59      	adds	r1, r3, #1
 80049ce:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80049d2:	4618      	mov	r0, r3
 80049d4:	4983      	ldr	r1, [pc, #524]	; (8004be4 <bmi323_context_switch_selection+0x7a8>)
 80049d6:	2316      	movs	r3, #22
 80049d8:	fb02 f303 	mul.w	r3, r2, r3
 80049dc:	4403      	add	r3, r0
 80049de:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80049e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80049e6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80049ea:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        sens_cfg[3].cfg.step_counter.mean_step_dur = step_counter_param_set[context_sel][index++];
 80049ee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80049f2:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80049f6:	781a      	ldrb	r2, [r3, #0]
 80049f8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80049fc:	1c59      	adds	r1, r3, #1
 80049fe:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004a02:	4618      	mov	r0, r3
 8004a04:	4977      	ldr	r1, [pc, #476]	; (8004be4 <bmi323_context_switch_selection+0x7a8>)
 8004a06:	2316      	movs	r3, #22
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	4403      	add	r3, r0
 8004a0e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004a12:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a16:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a1a:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
        sens_cfg[3].cfg.step_counter.step_buffer_size = step_counter_param_set[context_sel][index++];
 8004a1e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a22:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004a26:	781a      	ldrb	r2, [r3, #0]
 8004a28:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004a2c:	1c59      	adds	r1, r3, #1
 8004a2e:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004a32:	4618      	mov	r0, r3
 8004a34:	496b      	ldr	r1, [pc, #428]	; (8004be4 <bmi323_context_switch_selection+0x7a8>)
 8004a36:	2316      	movs	r3, #22
 8004a38:	fb02 f303 	mul.w	r3, r2, r3
 8004a3c:	4403      	add	r3, r0
 8004a3e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004a42:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a46:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a4a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
        sens_cfg[3].cfg.step_counter.filter_cascade_enabled = step_counter_param_set[context_sel][index++];
 8004a4e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a52:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004a56:	781a      	ldrb	r2, [r3, #0]
 8004a58:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004a5c:	1c59      	adds	r1, r3, #1
 8004a5e:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004a62:	4618      	mov	r0, r3
 8004a64:	495f      	ldr	r1, [pc, #380]	; (8004be4 <bmi323_context_switch_selection+0x7a8>)
 8004a66:	2316      	movs	r3, #22
 8004a68:	fb02 f303 	mul.w	r3, r2, r3
 8004a6c:	4403      	add	r3, r0
 8004a6e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004a72:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a76:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a7a:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        sens_cfg[3].cfg.step_counter.step_counter_increment = step_counter_param_set[context_sel][index++];
 8004a7e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a82:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004a86:	781a      	ldrb	r2, [r3, #0]
 8004a88:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004a8c:	1c59      	adds	r1, r3, #1
 8004a8e:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004a92:	4618      	mov	r0, r3
 8004a94:	4953      	ldr	r1, [pc, #332]	; (8004be4 <bmi323_context_switch_selection+0x7a8>)
 8004a96:	2316      	movs	r3, #22
 8004a98:	fb02 f303 	mul.w	r3, r2, r3
 8004a9c:	4403      	add	r3, r0
 8004a9e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004aa2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004aa6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004aaa:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        sens_cfg[3].cfg.step_counter.peak_duration_min_walking = step_counter_param_set[context_sel][index++];
 8004aae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ab2:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004ab6:	781a      	ldrb	r2, [r3, #0]
 8004ab8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004abc:	1c59      	adds	r1, r3, #1
 8004abe:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	4947      	ldr	r1, [pc, #284]	; (8004be4 <bmi323_context_switch_selection+0x7a8>)
 8004ac6:	2316      	movs	r3, #22
 8004ac8:	fb02 f303 	mul.w	r3, r2, r3
 8004acc:	4403      	add	r3, r0
 8004ace:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004ad2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ad6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004ada:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
        sens_cfg[3].cfg.step_counter.peak_duration_min_running = step_counter_param_set[context_sel][index++];
 8004ade:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ae2:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004ae6:	781a      	ldrb	r2, [r3, #0]
 8004ae8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004aec:	1c59      	adds	r1, r3, #1
 8004aee:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004af2:	4618      	mov	r0, r3
 8004af4:	493b      	ldr	r1, [pc, #236]	; (8004be4 <bmi323_context_switch_selection+0x7a8>)
 8004af6:	2316      	movs	r3, #22
 8004af8:	fb02 f303 	mul.w	r3, r2, r3
 8004afc:	4403      	add	r3, r0
 8004afe:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004b02:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b06:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b0a:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
        sens_cfg[3].cfg.step_counter.activity_detection_factor = step_counter_param_set[context_sel][index++];
 8004b0e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b12:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004b16:	781a      	ldrb	r2, [r3, #0]
 8004b18:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004b1c:	1c59      	adds	r1, r3, #1
 8004b1e:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004b22:	4618      	mov	r0, r3
 8004b24:	492f      	ldr	r1, [pc, #188]	; (8004be4 <bmi323_context_switch_selection+0x7a8>)
 8004b26:	2316      	movs	r3, #22
 8004b28:	fb02 f303 	mul.w	r3, r2, r3
 8004b2c:	4403      	add	r3, r0
 8004b2e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004b32:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b36:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b3a:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
        sens_cfg[3].cfg.step_counter.activity_detection_thres = step_counter_param_set[context_sel][index++];
 8004b3e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b42:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004b46:	781a      	ldrb	r2, [r3, #0]
 8004b48:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004b4c:	1c59      	adds	r1, r3, #1
 8004b4e:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004b52:	4618      	mov	r0, r3
 8004b54:	4923      	ldr	r1, [pc, #140]	; (8004be4 <bmi323_context_switch_selection+0x7a8>)
 8004b56:	2316      	movs	r3, #22
 8004b58:	fb02 f303 	mul.w	r3, r2, r3
 8004b5c:	4403      	add	r3, r0
 8004b5e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004b62:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b66:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b6a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
        sens_cfg[3].cfg.step_counter.step_duration_max = step_counter_param_set[context_sel][index++];
 8004b6e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b72:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004b76:	781a      	ldrb	r2, [r3, #0]
 8004b78:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004b7c:	1c59      	adds	r1, r3, #1
 8004b7e:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004b82:	4618      	mov	r0, r3
 8004b84:	4917      	ldr	r1, [pc, #92]	; (8004be4 <bmi323_context_switch_selection+0x7a8>)
 8004b86:	2316      	movs	r3, #22
 8004b88:	fb02 f303 	mul.w	r3, r2, r3
 8004b8c:	4403      	add	r3, r0
 8004b8e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004b92:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b96:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b9a:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
        sens_cfg[3].cfg.step_counter.step_duration_window = step_counter_param_set[context_sel][index++];
 8004b9e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ba2:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004ba6:	781a      	ldrb	r2, [r3, #0]
 8004ba8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004bac:	1c59      	adds	r1, r3, #1
 8004bae:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	490b      	ldr	r1, [pc, #44]	; (8004be4 <bmi323_context_switch_selection+0x7a8>)
 8004bb6:	2316      	movs	r3, #22
 8004bb8:	fb02 f303 	mul.w	r3, r2, r3
 8004bbc:	4403      	add	r3, r0
 8004bbe:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004bc2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004bc6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004bca:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        sens_cfg[3].cfg.step_counter.step_duration_pp_enabled = step_counter_param_set[context_sel][index++];
 8004bce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004bd2:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004bd6:	781a      	ldrb	r2, [r3, #0]
 8004bd8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004bdc:	1c59      	adds	r1, r3, #1
 8004bde:	e003      	b.n	8004be8 <bmi323_context_switch_selection+0x7ac>
 8004be0:	20000048 	.word	0x20000048
 8004be4:	20000084 	.word	0x20000084
 8004be8:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004bec:	4618      	mov	r0, r3
 8004bee:	49e1      	ldr	r1, [pc, #900]	; (8004f74 <bmi323_context_switch_selection+0xb38>)
 8004bf0:	2316      	movs	r3, #22
 8004bf2:	fb02 f303 	mul.w	r3, r2, r3
 8004bf6:	4403      	add	r3, r0
 8004bf8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004bfc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c00:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c04:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
        sens_cfg[3].cfg.step_counter.step_duration_thres = step_counter_param_set[context_sel][index++];
 8004c08:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c0c:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004c10:	781a      	ldrb	r2, [r3, #0]
 8004c12:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004c16:	1c59      	adds	r1, r3, #1
 8004c18:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	49d5      	ldr	r1, [pc, #852]	; (8004f74 <bmi323_context_switch_selection+0xb38>)
 8004c20:	2316      	movs	r3, #22
 8004c22:	fb02 f303 	mul.w	r3, r2, r3
 8004c26:	4403      	add	r3, r0
 8004c28:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004c2c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c30:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c34:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
        sens_cfg[3].cfg.step_counter.mean_crossing_pp_enabled = step_counter_param_set[context_sel][index++];
 8004c38:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c3c:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004c40:	781a      	ldrb	r2, [r3, #0]
 8004c42:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004c46:	1c59      	adds	r1, r3, #1
 8004c48:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	49c9      	ldr	r1, [pc, #804]	; (8004f74 <bmi323_context_switch_selection+0xb38>)
 8004c50:	2316      	movs	r3, #22
 8004c52:	fb02 f303 	mul.w	r3, r2, r3
 8004c56:	4403      	add	r3, r0
 8004c58:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004c5c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c60:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c64:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
        sens_cfg[3].cfg.step_counter.mcr_threshold = step_counter_param_set[context_sel][index++];
 8004c68:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c6c:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004c70:	781a      	ldrb	r2, [r3, #0]
 8004c72:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004c76:	1c59      	adds	r1, r3, #1
 8004c78:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	49bd      	ldr	r1, [pc, #756]	; (8004f74 <bmi323_context_switch_selection+0xb38>)
 8004c80:	2316      	movs	r3, #22
 8004c82:	fb02 f303 	mul.w	r3, r2, r3
 8004c86:	4403      	add	r3, r0
 8004c88:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004c8c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c90:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c94:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
        sens_cfg[3].cfg.step_counter.sc_12_res = step_counter_param_set[context_sel][index++];
 8004c98:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c9c:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004ca0:	781a      	ldrb	r2, [r3, #0]
 8004ca2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004ca6:	1c59      	adds	r1, r3, #1
 8004ca8:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004cac:	4618      	mov	r0, r3
 8004cae:	49b1      	ldr	r1, [pc, #708]	; (8004f74 <bmi323_context_switch_selection+0xb38>)
 8004cb0:	2316      	movs	r3, #22
 8004cb2:	fb02 f303 	mul.w	r3, r2, r3
 8004cb6:	4403      	add	r3, r0
 8004cb8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004cbc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004cc0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004cc4:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6

        /* Set significant motion configuration */
        index = 0;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        sens_cfg[4].type = BMI323_SIG_MOTION;
 8004cce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004cd2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        sens_cfg[4].cfg.sig_motion.block_size = sig_motion_param_set[context_sel][index++];
 8004cdc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ce0:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004ce4:	781a      	ldrb	r2, [r3, #0]
 8004ce6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004cea:	1c59      	adds	r1, r3, #1
 8004cec:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	49a1      	ldr	r1, [pc, #644]	; (8004f78 <bmi323_context_switch_selection+0xb3c>)
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	4403      	add	r3, r0
 8004cfc:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004d00:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d04:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d08:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
        sens_cfg[4].cfg.sig_motion.peak_2_peak_min = sig_motion_param_set[context_sel][index++];
 8004d0c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d10:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004d14:	781a      	ldrb	r2, [r3, #0]
 8004d16:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004d1a:	1c59      	adds	r1, r3, #1
 8004d1c:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004d20:	4618      	mov	r0, r3
 8004d22:	4995      	ldr	r1, [pc, #596]	; (8004f78 <bmi323_context_switch_selection+0xb3c>)
 8004d24:	4613      	mov	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	4403      	add	r3, r0
 8004d2c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004d30:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d34:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d38:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
        sens_cfg[4].cfg.sig_motion.mcr_min = (uint8_t)sig_motion_param_set[context_sel][index++];
 8004d3c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d40:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004d44:	781a      	ldrb	r2, [r3, #0]
 8004d46:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004d4a:	1c59      	adds	r1, r3, #1
 8004d4c:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004d50:	4618      	mov	r0, r3
 8004d52:	4989      	ldr	r1, [pc, #548]	; (8004f78 <bmi323_context_switch_selection+0xb3c>)
 8004d54:	4613      	mov	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	4403      	add	r3, r0
 8004d5c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d66:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d6a:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
        sens_cfg[4].cfg.sig_motion.peak_2_peak_max = sig_motion_param_set[context_sel][index++];
 8004d6e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d72:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004d76:	781a      	ldrb	r2, [r3, #0]
 8004d78:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004d7c:	1c59      	adds	r1, r3, #1
 8004d7e:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004d82:	4618      	mov	r0, r3
 8004d84:	497c      	ldr	r1, [pc, #496]	; (8004f78 <bmi323_context_switch_selection+0xb3c>)
 8004d86:	4613      	mov	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	4403      	add	r3, r0
 8004d8e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004d92:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d96:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d9a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
        sens_cfg[4].cfg.sig_motion.mcr_max = (uint8_t)sig_motion_param_set[context_sel][index++];
 8004d9e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004da2:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004da6:	781a      	ldrb	r2, [r3, #0]
 8004da8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004dac:	1c59      	adds	r1, r3, #1
 8004dae:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004db2:	4618      	mov	r0, r3
 8004db4:	4970      	ldr	r1, [pc, #448]	; (8004f78 <bmi323_context_switch_selection+0xb3c>)
 8004db6:	4613      	mov	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	4403      	add	r3, r0
 8004dbe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004dc8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004dcc:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2

        /* Set orientation configuration */
        index = 0;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        sens_cfg[5].type = BMI323_ORIENTATION;
 8004dd6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004dda:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004dde:	2207      	movs	r2, #7
 8004de0:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
        sens_cfg[5].cfg.orientation.ud_en = (uint8_t)orientation_param_set[context_sel][index++];
 8004de4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004de8:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004dec:	781a      	ldrb	r2, [r3, #0]
 8004dee:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004df2:	1c59      	adds	r1, r3, #1
 8004df4:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004df8:	4618      	mov	r0, r3
 8004dfa:	4960      	ldr	r1, [pc, #384]	; (8004f7c <bmi323_context_switch_selection+0xb40>)
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	1a9b      	subs	r3, r3, r2
 8004e02:	4403      	add	r3, r0
 8004e04:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004e0e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e12:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
        sens_cfg[5].cfg.orientation.mode = (uint8_t)orientation_param_set[context_sel][index++];
 8004e16:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004e1a:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004e1e:	781a      	ldrb	r2, [r3, #0]
 8004e20:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004e24:	1c59      	adds	r1, r3, #1
 8004e26:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	4953      	ldr	r1, [pc, #332]	; (8004f7c <bmi323_context_switch_selection+0xb40>)
 8004e2e:	4613      	mov	r3, r2
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	1a9b      	subs	r3, r3, r2
 8004e34:	4403      	add	r3, r0
 8004e36:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004e40:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e44:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
        sens_cfg[5].cfg.orientation.blocking = (uint8_t)orientation_param_set[context_sel][index++];
 8004e48:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004e4c:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004e50:	781a      	ldrb	r2, [r3, #0]
 8004e52:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004e56:	1c59      	adds	r1, r3, #1
 8004e58:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	4947      	ldr	r1, [pc, #284]	; (8004f7c <bmi323_context_switch_selection+0xb40>)
 8004e60:	4613      	mov	r3, r2
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	1a9b      	subs	r3, r3, r2
 8004e66:	4403      	add	r3, r0
 8004e68:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004e6c:	b2da      	uxtb	r2, r3
 8004e6e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004e72:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e76:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
        sens_cfg[5].cfg.orientation.theta = (uint8_t)orientation_param_set[context_sel][index++];
 8004e7a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004e7e:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004e82:	781a      	ldrb	r2, [r3, #0]
 8004e84:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004e88:	1c59      	adds	r1, r3, #1
 8004e8a:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004e8e:	4618      	mov	r0, r3
 8004e90:	493a      	ldr	r1, [pc, #232]	; (8004f7c <bmi323_context_switch_selection+0xb40>)
 8004e92:	4613      	mov	r3, r2
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	1a9b      	subs	r3, r3, r2
 8004e98:	4403      	add	r3, r0
 8004e9a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ea4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004ea8:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
        sens_cfg[5].cfg.orientation.hold_time = (uint8_t)orientation_param_set[context_sel][index++];
 8004eac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004eb0:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004eb4:	781a      	ldrb	r2, [r3, #0]
 8004eb6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004eba:	1c59      	adds	r1, r3, #1
 8004ebc:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	492e      	ldr	r1, [pc, #184]	; (8004f7c <bmi323_context_switch_selection+0xb40>)
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	00db      	lsls	r3, r3, #3
 8004ec8:	1a9b      	subs	r3, r3, r2
 8004eca:	4403      	add	r3, r0
 8004ecc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ed6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004eda:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
        sens_cfg[5].cfg.orientation.slope_thres = (uint8_t)orientation_param_set[context_sel][index++];
 8004ede:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ee2:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004ee6:	781a      	ldrb	r2, [r3, #0]
 8004ee8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004eec:	1c59      	adds	r1, r3, #1
 8004eee:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	4921      	ldr	r1, [pc, #132]	; (8004f7c <bmi323_context_switch_selection+0xb40>)
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	1a9b      	subs	r3, r3, r2
 8004efc:	4403      	add	r3, r0
 8004efe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004f08:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004f0c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
        sens_cfg[5].cfg.orientation.hysteresis = (uint8_t)orientation_param_set[context_sel][index++];
 8004f10:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004f14:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004f18:	781a      	ldrb	r2, [r3, #0]
 8004f1a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004f1e:	1c59      	adds	r1, r3, #1
 8004f20:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004f24:	4618      	mov	r0, r3
 8004f26:	4915      	ldr	r1, [pc, #84]	; (8004f7c <bmi323_context_switch_selection+0xb40>)
 8004f28:	4613      	mov	r3, r2
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	1a9b      	subs	r3, r3, r2
 8004f2e:	4403      	add	r3, r0
 8004f30:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004f3a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004f3e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed

        /* Set the context configurations */
        rslt = bmi323_set_sensor_config(sens_cfg, BMI323_MAX_FEATURE, dev);
 8004f42:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004f46:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004f4a:	f107 0008 	add.w	r0, r7, #8
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	2106      	movs	r1, #6
 8004f52:	f7ff fa49 	bl	80043e8 <bmi323_set_sensor_config>
 8004f56:	4603      	mov	r3, r0
 8004f58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8004f5c:	e002      	b.n	8004f64 <bmi323_context_switch_selection+0xb28>
    }
    else
    {
        rslt = BMI323_E_INVALID_CONTEXT_SEL;
 8004f5e:	23f3      	movs	r3, #243	; 0xf3
 8004f60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    }

    return rslt;
 8004f64:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20000084 	.word	0x20000084
 8004f78:	20000108 	.word	0x20000108
 8004f7c:	20000128 	.word	0x20000128

08004f80 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi3_dev *dev)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00b      	beq.n	8004fa6 <null_ptr_check+0x26>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d007      	beq.n	8004fa6 <null_ptr_check+0x26>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <null_ptr_check+0x26>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d102      	bne.n	8004fac <null_ptr_check+0x2c>
    {
        rslt = BMI323_E_NULL_PTR;
 8004fa6:	23ff      	movs	r3, #255	; 0xff
 8004fa8:	73fb      	strb	r3, [r7, #15]
 8004faa:	e001      	b.n	8004fb0 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI323_OK;
 8004fac:	2300      	movs	r3, #0
 8004fae:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <bst_delay_us>:

/******************************************************************************/
/*!               User interface functions                                    */

void bst_delay_us(uint32_t period, void *intf_ptr)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
	uint32_t i;

	while(period--)
 8004fca:	e008      	b.n	8004fde <bst_delay_us+0x1e>
	{
		for(i = 0; i < 84; i++){;}
 8004fcc:	2300      	movs	r3, #0
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	e002      	b.n	8004fd8 <bst_delay_us+0x18>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b53      	cmp	r3, #83	; 0x53
 8004fdc:	d9f9      	bls.n	8004fd2 <bst_delay_us+0x12>
	while(period--)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	1e5a      	subs	r2, r3, #1
 8004fe2:	607a      	str	r2, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1f1      	bne.n	8004fcc <bst_delay_us+0xc>
	}
}
 8004fe8:	bf00      	nop
 8004fea:	bf00      	nop
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
	...

08004ff8 <UART_Printf>:

void UART_Printf(uint8_t* buff, uint16_t size)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	807b      	strh	r3, [r7, #2]
    HAL_UART_Transmit(&UART_HANDLE, buff, size, BUS_TIMEOUT);
 8005004:	887a      	ldrh	r2, [r7, #2]
 8005006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800500a:	6879      	ldr	r1, [r7, #4]
 800500c:	4803      	ldr	r0, [pc, #12]	; (800501c <UART_Printf+0x24>)
 800500e:	f006 f9e7 	bl	800b3e0 <HAL_UART_Transmit>
}
 8005012:	bf00      	nop
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	20001130 	.word	0x20001130

08005020 <PDEBUG>:

char chBuffer[512];
void PDEBUG(char *format, ...)
{
 8005020:	b40f      	push	{r0, r1, r2, r3}
 8005022:	b580      	push	{r7, lr}
 8005024:	b082      	sub	sp, #8
 8005026:	af00      	add	r7, sp, #0
    va_list ap;
    va_start(ap, format);
 8005028:	f107 0314 	add.w	r3, r7, #20
 800502c:	607b      	str	r3, [r7, #4]
    vsnprintf(chBuffer, sizeof(chBuffer), format, ap);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005036:	4809      	ldr	r0, [pc, #36]	; (800505c <PDEBUG+0x3c>)
 8005038:	f00b fe04 	bl	8010c44 <vsniprintf>
    UART_Printf((uint8_t *)chBuffer,strlen(chBuffer));
 800503c:	4807      	ldr	r0, [pc, #28]	; (800505c <PDEBUG+0x3c>)
 800503e:	f7fb f8ef 	bl	8000220 <strlen>
 8005042:	4603      	mov	r3, r0
 8005044:	b29b      	uxth	r3, r3
 8005046:	4619      	mov	r1, r3
 8005048:	4804      	ldr	r0, [pc, #16]	; (800505c <PDEBUG+0x3c>)
 800504a:	f7ff ffd5 	bl	8004ff8 <UART_Printf>
    va_end(ap);
}
 800504e:	bf00      	nop
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005058:	b004      	add	sp, #16
 800505a:	4770      	bx	lr
 800505c:	200003bc 	.word	0x200003bc

08005060 <bmi3_interface_init>:
/*!
 *  @brief Function to select the interface between SPI and I2C.
 *  Also to initialize coines platform
 */
int8_t bmi3_interface_init(struct bmi3_dev *bmi, uint8_t intf)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BMI3_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	73fb      	strb	r3, [r7, #15]

	/* Bus configuration : SPI */
	if (intf == BMI3_SPI_INTF)
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d105      	bne.n	8005082 <bmi3_interface_init+0x22>
	{
		PDEBUG("SPI Interface \n");
 8005076:	480c      	ldr	r0, [pc, #48]	; (80050a8 <bmi3_interface_init+0x48>)
 8005078:	f7ff ffd2 	bl	8005020 <PDEBUG>
		bmi->intf = BMI3_SPI_INTF;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	725a      	strb	r2, [r3, #9]
//		bmi->write = (bmi3_write_fptr_t)SensorAPI_SPIx_Write1;
	}


	/* Assign device address to interface pointer */
	bmi->intf_ptr = &bmi323_dev_addr;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a09      	ldr	r2, [pc, #36]	; (80050ac <bmi3_interface_init+0x4c>)
 8005086:	605a      	str	r2, [r3, #4]
	bmi323_dev_addr = 0;
 8005088:	4b08      	ldr	r3, [pc, #32]	; (80050ac <bmi3_interface_init+0x4c>)
 800508a:	2200      	movs	r2, #0
 800508c:	701a      	strb	r2, [r3, #0]

	/* Configure delay in microseconds */
	bmi->delay_us = bst_delay_us;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a07      	ldr	r2, [pc, #28]	; (80050b0 <bmi3_interface_init+0x50>)
 8005092:	619a      	str	r2, [r3, #24]

	/* Configure max read/write length (in bytes) ( Supported length depends on target machine) */
	bmi->read_write_len = READ_WRITE_LEN;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2220      	movs	r2, #32
 8005098:	81da      	strh	r2, [r3, #14]

	return rslt;
 800509a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	08014474 	.word	0x08014474
 80050ac:	200003b8 	.word	0x200003b8
 80050b0:	08004fc1 	.word	0x08004fc1

080050b4 <lsb_to_mps2>:
/*!
 * @brief This function converts lsb to meter per second squared for 16 bit accelerometer at
 * range 2G, 4G, 8G or 16G.
 */
static float lsb_to_mps2(int16_t val, float g_range, uint8_t bit_width)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	4603      	mov	r3, r0
 80050bc:	ed87 0a00 	vstr	s0, [r7]
 80050c0:	460a      	mov	r2, r1
 80050c2:	80fb      	strh	r3, [r7, #6]
 80050c4:	4613      	mov	r3, r2
 80050c6:	717b      	strb	r3, [r7, #5]
    float half_scale = ((float)(1 << bit_width) / 2.0f);
 80050c8:	797b      	ldrb	r3, [r7, #5]
 80050ca:	2201      	movs	r2, #1
 80050cc:	fa02 f303 	lsl.w	r3, r2, r3
 80050d0:	ee07 3a90 	vmov	s15, r3
 80050d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050d8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80050dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050e0:	edc7 7a03 	vstr	s15, [r7, #12]

    return (GRAVITY_EARTH * val * g_range) / half_scale;
 80050e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050e8:	ee07 3a90 	vmov	s15, r3
 80050ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050f0:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800511c <lsb_to_mps2+0x68>
 80050f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80050f8:	edd7 7a00 	vldr	s15, [r7]
 80050fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005100:	edd7 7a03 	vldr	s15, [r7, #12]
 8005104:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005108:	eef0 7a66 	vmov.f32	s15, s13
}
 800510c:	eeb0 0a67 	vmov.f32	s0, s15
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	411ce80a 	.word	0x411ce80a

08005120 <lsb_to_dps>:
/*!
 * @brief This function converts lsb to degree per second for 16 bit gyro at
 * range 125, 250, 500, 1000 or 2000dps.
 */
static float lsb_to_dps(int16_t val, float dps, uint8_t bit_width)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	4603      	mov	r3, r0
 8005128:	ed87 0a00 	vstr	s0, [r7]
 800512c:	460a      	mov	r2, r1
 800512e:	80fb      	strh	r3, [r7, #6]
 8005130:	4613      	mov	r3, r2
 8005132:	717b      	strb	r3, [r7, #5]
    double power = 2;
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800513c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 8005140:	797b      	ldrb	r3, [r7, #5]
 8005142:	4618      	mov	r0, r3
 8005144:	f7fb f9b6 	bl	80004b4 <__aeabi_ui2d>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	ec43 2b11 	vmov	d1, r2, r3
 8005150:	ed97 0b04 	vldr	d0, [r7, #16]
 8005154:	f00d fe80 	bl	8012e58 <pow>
 8005158:	ec51 0b10 	vmov	r0, r1, d0
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005164:	f7fb fb4a 	bl	80007fc <__aeabi_ddiv>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4610      	mov	r0, r2
 800516e:	4619      	mov	r1, r3
 8005170:	f7fb fcf2 	bl	8000b58 <__aeabi_d2f>
 8005174:	4603      	mov	r3, r0
 8005176:	60fb      	str	r3, [r7, #12]

    return (dps / (half_scale)) * (val);
 8005178:	edd7 6a00 	vldr	s13, [r7]
 800517c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005180:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005184:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005188:	ee07 3a90 	vmov	s15, r3
 800518c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005190:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8005194:	eeb0 0a67 	vmov.f32	s0, s15
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <Open_BMI323_ACC>:

int8_t Open_BMI323_ACC(struct bmi3_dev *dev)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b08e      	sub	sp, #56	; 0x38
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
	int8_t rslt = BMI3_OK;
 80051a8:	2300      	movs	r3, #0
 80051aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	/* Sensor configuration structure */
	struct bmi3_sens_config config = { 0 };
 80051ae:	f107 0308 	add.w	r3, r7, #8
 80051b2:	222e      	movs	r2, #46	; 0x2e
 80051b4:	2100      	movs	r1, #0
 80051b6:	4618      	mov	r0, r3
 80051b8:	f00b fd52 	bl	8010c60 <memset>

	config.type = BMI3_ACCEL;
 80051bc:	2300      	movs	r3, #0
 80051be:	723b      	strb	r3, [r7, #8]

	/* Get the previous or default configuration settings */
	rslt = bmi323_get_sensor_config(&config, 1, dev);
 80051c0:	f107 0308 	add.w	r3, r7, #8
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	2101      	movs	r1, #1
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7ff f922 	bl	8004412 <bmi323_get_sensor_config>
 80051ce:	4603      	mov	r3, r0
 80051d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (rslt == BMI3_OK)
 80051d4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d12b      	bne.n	8005234 <Open_BMI323_ACC+0x94>
	{
		/* Update all or any of the accelerometer configurations */

		/* The Accel bandwidth coefficient defines the 3 dB cutoff frequency in relation to the ODR. */
		config.cfg.acc.bwp = BMI3_ACC_BW_ODR_HALF;
 80051dc:	2300      	movs	r3, #0
 80051de:	72fb      	strb	r3, [r7, #11]

		/* Set number of average samples for accel. */
		config.cfg.acc.avg_num = BMI3_ACC_AVG8;
 80051e0:	2303      	movs	r3, #3
 80051e2:	73bb      	strb	r3, [r7, #14]

		/* Enable the accel mode where averaging of samples
		* will be done based on above set bandwidth and ODR.
		* Note : By default accel is disabled. The accel will get enable by selecting the mode.
		*/
		config.cfg.acc.acc_mode = BMI3_ACC_MODE_NORMAL;
 80051e4:	2304      	movs	r3, #4
 80051e6:	733b      	strb	r3, [r7, #12]

		config.cfg.acc.odr = BMI3_ACC_ODR_1600HZ; //BMI3_ACC_ODR_400HZ;
 80051e8:	230c      	movs	r3, #12
 80051ea:	72bb      	strb	r3, [r7, #10]

		/* Gravity range of the sensor (+/- 2G, 4G, 8G, 16G). */
		config.cfg.acc.range     = BMI3_ACC_RANGE_4G;
 80051ec:	2301      	movs	r3, #1
 80051ee:	737b      	strb	r3, [r7, #13]

		/* Set the configurations */
		rslt = bmi323_set_sensor_config(&config, 1, dev);
 80051f0:	f107 0308 	add.w	r3, r7, #8
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	2101      	movs	r1, #1
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7ff f8f5 	bl	80043e8 <bmi323_set_sensor_config>
 80051fe:	4603      	mov	r3, r0
 8005200:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (rslt != BMI3_OK)
 8005204:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8005208:	2b00      	cmp	r3, #0
 800520a:	d006      	beq.n	800521a <Open_BMI323_ACC+0x7a>
		{
			PDEBUG("Open ACC failed, rslt=%d\r\n", rslt);
 800520c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8005210:	4619      	mov	r1, r3
 8005212:	480b      	ldr	r0, [pc, #44]	; (8005240 <Open_BMI323_ACC+0xa0>)
 8005214:	f7ff ff04 	bl	8005020 <PDEBUG>
 8005218:	e00c      	b.n	8005234 <Open_BMI323_ACC+0x94>
		}
		else
		{
			PDEBUG("Open ACC set successfully\r\n");
 800521a:	480a      	ldr	r0, [pc, #40]	; (8005244 <Open_BMI323_ACC+0xa4>)
 800521c:	f7ff ff00 	bl	8005020 <PDEBUG>

			/* Get the configuration settings for validation */
			rslt = bmi323_get_sensor_config(&config, 1, dev);
 8005220:	f107 0308 	add.w	r3, r7, #8
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	2101      	movs	r1, #1
 8005228:	4618      	mov	r0, r3
 800522a:	f7ff f8f2 	bl	8004412 <bmi323_get_sensor_config>
 800522e:	4603      	mov	r3, r0
 8005230:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
//				PDEBUG("avg_num = %d\r\n", config.cfg.acc.avg_num);
			}
		}
	}

	return rslt;
 8005234:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8005238:	4618      	mov	r0, r3
 800523a:	3738      	adds	r7, #56	; 0x38
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	08014484 	.word	0x08014484
 8005244:	080144a0 	.word	0x080144a0

08005248 <Open_BMI323_GYRO>:

	return rslt;
}

int8_t Open_BMI323_GYRO(struct bmi3_dev *dev)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b08e      	sub	sp, #56	; 0x38
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
	int8_t rslt = BMI3_OK;
 8005250:	2300      	movs	r3, #0
 8005252:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	/* Sensor configuration structure */
	struct bmi3_sens_config config = { 0 };
 8005256:	f107 0308 	add.w	r3, r7, #8
 800525a:	222e      	movs	r2, #46	; 0x2e
 800525c:	2100      	movs	r1, #0
 800525e:	4618      	mov	r0, r3
 8005260:	f00b fcfe 	bl	8010c60 <memset>

	config.type = BMI3_GYRO;
 8005264:	2301      	movs	r3, #1
 8005266:	723b      	strb	r3, [r7, #8]
	
	/* Get the previous or default configuration settings */
	rslt = bmi323_get_sensor_config(&config, 1, dev);
 8005268:	f107 0308 	add.w	r3, r7, #8
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	2101      	movs	r1, #1
 8005270:	4618      	mov	r0, r3
 8005272:	f7ff f8ce 	bl	8004412 <bmi323_get_sensor_config>
 8005276:	4603      	mov	r3, r0
 8005278:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (rslt == BMI3_OK) 
 800527c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8005280:	2b00      	cmp	r3, #0
 8005282:	d128      	bne.n	80052d6 <Open_BMI323_GYRO+0x8e>
	{
		config.cfg.gyr.odr = BMI3_GYR_ODR_400HZ;
 8005284:	230a      	movs	r3, #10
 8005286:	72bb      	strb	r3, [r7, #10]
		/* Gyroscope Angular Rate Measurement Range. By default the range is 2000dps. */
		config.cfg.gyr.range = BMI3_GYR_RANGE_2000DPS;
 8005288:	2304      	movs	r3, #4
 800528a:	737b      	strb	r3, [r7, #13]
		/*	The Gyroscope bandwidth coefficient defines the 3 dB cutoff frequency in relation to the ODR
		*	Value	Name	  Description
		*	  0   odr_half	 BW = gyr_odr/2
		*	  1  odr_quarter BW = gyr_odr/4
		*/
		config.cfg.gyr.bwp = BMI3_GYR_BW_ODR_QUARTER;
 800528c:	2301      	movs	r3, #1
 800528e:	72fb      	strb	r3, [r7, #11]
		/* By default the gyro is disabled. Gyro is enabled by selecting the mode. */
		config.cfg.gyr.gyr_mode = BMI3_GYR_MODE_NORMAL;
 8005290:	2304      	movs	r3, #4
 8005292:	733b      	strb	r3, [r7, #12]
		*  011     avg_8   Averaging of 8 samples
		*  100     avg_16  Averaging of 16 samples
		*  101     avg_32  Averaging of 32 samples
		*  110     avg_64  Averaging of 64 samples
		*/
		config.cfg.gyr.avg_num = BMI3_GYR_AVG64;
 8005294:	2306      	movs	r3, #6
 8005296:	73bb      	strb	r3, [r7, #14]
	
		/* Set the configurations */
		rslt = bmi323_set_sensor_config(&config, 1, dev);
 8005298:	f107 0308 	add.w	r3, r7, #8
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	2101      	movs	r1, #1
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7ff f8a1 	bl	80043e8 <bmi323_set_sensor_config>
 80052a6:	4603      	mov	r3, r0
 80052a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (rslt != BMI3_OK) 
 80052ac:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <Open_BMI323_GYRO+0x74>
		{
			PDEBUG("Open GYRO failed\r\n");
 80052b4:	480b      	ldr	r0, [pc, #44]	; (80052e4 <Open_BMI323_GYRO+0x9c>)
 80052b6:	f7ff feb3 	bl	8005020 <PDEBUG>
 80052ba:	e00c      	b.n	80052d6 <Open_BMI323_GYRO+0x8e>
		} 
		else
		{
			PDEBUG("Open GYRO successfully\r\n");
 80052bc:	480a      	ldr	r0, [pc, #40]	; (80052e8 <Open_BMI323_GYRO+0xa0>)
 80052be:	f7ff feaf 	bl	8005020 <PDEBUG>

			/* Get the configuration settings for validation */
			rslt = bmi323_get_sensor_config(&config, 1, dev);
 80052c2:	f107 0308 	add.w	r3, r7, #8
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	2101      	movs	r1, #1
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff f8a1 	bl	8004412 <bmi323_get_sensor_config>
 80052d0:	4603      	mov	r3, r0
 80052d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
//				PDEBUG("avg_num = %d\r\n", config.cfg.gyr.avg_num);
//			}
		}
	}

	return rslt;
 80052d6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3738      	adds	r7, #56	; 0x38
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	08014504 	.word	0x08014504
 80052e8:	08014518 	.word	0x08014518

080052ec <Init_BMI323>:
		PDEBUG("0x%02X, value=0x%02X\r\n", reg_addr, value);
	}
}

int8_t Init_BMI323(struct bmi3_dev *dev)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
	int8_t rslt = BMI3_OK;
 80052f4:	2300      	movs	r3, #0
 80052f6:	73fb      	strb	r3, [r7, #15]
	uint8_t chipid;

	rslt = bmi3_interface_init(dev, BMI3_SPI_INTF);
 80052f8:	2100      	movs	r1, #0
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7ff feb0 	bl	8005060 <bmi3_interface_init>
 8005300:	4603      	mov	r3, r0
 8005302:	73fb      	strb	r3, [r7, #15]
	//bmi3_error_codes_print_result("bmi3_interface_init",rslt);
	HAL_Delay(100);
 8005304:	2064      	movs	r0, #100	; 0x64
 8005306:	f7fc f804 	bl	8001312 <HAL_Delay>

	/* Initialize bmi323. */
	rslt = bmi323_init(dev);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff f83c 	bl	8004388 <bmi323_init>
 8005310:	4603      	mov	r3, r0
 8005312:	73fb      	strb	r3, [r7, #15]
	//bmi3_error_codes_print_result("bmi323_init",rslt);

	if (rslt != BMI3_OK)
 8005314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d008      	beq.n	800532e <Init_BMI323+0x42>
	{
		PDEBUG("bmi323_init() failed, error code: %d\r\n", rslt);
 800531c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005320:	4619      	mov	r1, r3
 8005322:	4815      	ldr	r0, [pc, #84]	; (8005378 <Init_BMI323+0x8c>)
 8005324:	f7ff fe7c 	bl	8005020 <PDEBUG>
		return rslt;
 8005328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800532c:	e020      	b.n	8005370 <Init_BMI323+0x84>
	}
	else
	{
		PDEBUG("BMI323 initialized successfully\r\n");
 800532e:	4813      	ldr	r0, [pc, #76]	; (800537c <Init_BMI323+0x90>)
 8005330:	f7ff fe76 	bl	8005020 <PDEBUG>
	}

	rslt = bmi3_get_regs(BMI3_REG_CHIP_ID, &chipid, 1, dev);
 8005334:	f107 010e 	add.w	r1, r7, #14
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	2000      	movs	r0, #0
 800533e:	f7fc f895 	bl	800146c <bmi3_get_regs>
 8005342:	4603      	mov	r3, r0
 8005344:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMI3_OK) 
 8005346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d008      	beq.n	8005360 <Init_BMI323+0x74>
	{
		PDEBUG("read chip ID failed, error code: %d\r\n", rslt);
 800534e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005352:	4619      	mov	r1, r3
 8005354:	480a      	ldr	r0, [pc, #40]	; (8005380 <Init_BMI323+0x94>)
 8005356:	f7ff fe63 	bl	8005020 <PDEBUG>
		return rslt;
 800535a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800535e:	e007      	b.n	8005370 <Init_BMI323+0x84>
	}

	Open_BMI323_ACC(dev);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7ff ff1d 	bl	80051a0 <Open_BMI323_ACC>
	Open_BMI323_GYRO(dev);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7ff ff6e 	bl	8005248 <Open_BMI323_GYRO>

	return rslt;
 800536c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	08014580 	.word	0x08014580
 800537c:	080145a8 	.word	0x080145a8
 8005380:	080145cc 	.word	0x080145cc

08005384 <read_sensor>:

int16_t gyro_data[3];
int16_t acc_data[3];

uint8_t read_sensor(struct bmi3_dev dev, float data[])
{
 8005384:	b084      	sub	sp, #16
 8005386:	b590      	push	{r4, r7, lr}
 8005388:	b085      	sub	sp, #20
 800538a:	af00      	add	r7, sp, #0
 800538c:	f107 0420 	add.w	r4, r7, #32
 8005390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t acc_regs[6];
	uint8_t gyr_regs[6];
	uint8_t rslt;

	rslt = bmi3_get_regs(BMI3_REG_GYR_DATA_X, &gyr_regs, 6, &dev);
 8005394:	4639      	mov	r1, r7
 8005396:	f107 0320 	add.w	r3, r7, #32
 800539a:	2206      	movs	r2, #6
 800539c:	2006      	movs	r0, #6
 800539e:	f7fc f865 	bl	800146c <bmi3_get_regs>
 80053a2:	4603      	mov	r3, r0
 80053a4:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMI3_OK)
 80053a6:	7bfb      	ldrb	r3, [r7, #15]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d006      	beq.n	80053ba <read_sensor+0x36>
	{
		PDEBUG("read gyro register failed, error code: %d\r\n", rslt);
 80053ac:	7bfb      	ldrb	r3, [r7, #15]
 80053ae:	4619      	mov	r1, r3
 80053b0:	485d      	ldr	r0, [pc, #372]	; (8005528 <read_sensor+0x1a4>)
 80053b2:	f7ff fe35 	bl	8005020 <PDEBUG>
		return rslt;
 80053b6:	7bfb      	ldrb	r3, [r7, #15]
 80053b8:	e0ae      	b.n	8005518 <read_sensor+0x194>
	}
	gyro_data[0] = (gyr_regs[0] | (uint16_t)gyr_regs[1] << 8);
 80053ba:	783b      	ldrb	r3, [r7, #0]
 80053bc:	b21a      	sxth	r2, r3
 80053be:	787b      	ldrb	r3, [r7, #1]
 80053c0:	021b      	lsls	r3, r3, #8
 80053c2:	b21b      	sxth	r3, r3
 80053c4:	4313      	orrs	r3, r2
 80053c6:	b21a      	sxth	r2, r3
 80053c8:	4b58      	ldr	r3, [pc, #352]	; (800552c <read_sensor+0x1a8>)
 80053ca:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = (gyr_regs[2] | (uint16_t)gyr_regs[3] << 8);
 80053cc:	78bb      	ldrb	r3, [r7, #2]
 80053ce:	b21a      	sxth	r2, r3
 80053d0:	78fb      	ldrb	r3, [r7, #3]
 80053d2:	021b      	lsls	r3, r3, #8
 80053d4:	b21b      	sxth	r3, r3
 80053d6:	4313      	orrs	r3, r2
 80053d8:	b21a      	sxth	r2, r3
 80053da:	4b54      	ldr	r3, [pc, #336]	; (800552c <read_sensor+0x1a8>)
 80053dc:	805a      	strh	r2, [r3, #2]
	gyro_data[2] = (gyr_regs[4] | (uint16_t)gyr_regs[5] << 8);
 80053de:	793b      	ldrb	r3, [r7, #4]
 80053e0:	b21a      	sxth	r2, r3
 80053e2:	797b      	ldrb	r3, [r7, #5]
 80053e4:	021b      	lsls	r3, r3, #8
 80053e6:	b21b      	sxth	r3, r3
 80053e8:	4313      	orrs	r3, r2
 80053ea:	b21a      	sxth	r2, r3
 80053ec:	4b4f      	ldr	r3, [pc, #316]	; (800552c <read_sensor+0x1a8>)
 80053ee:	809a      	strh	r2, [r3, #4]

	rslt = bmi3_get_regs(BMI3_REG_ACC_DATA_X, &acc_regs, 6, &dev);
 80053f0:	f107 0108 	add.w	r1, r7, #8
 80053f4:	f107 0320 	add.w	r3, r7, #32
 80053f8:	2206      	movs	r2, #6
 80053fa:	2003      	movs	r0, #3
 80053fc:	f7fc f836 	bl	800146c <bmi3_get_regs>
 8005400:	4603      	mov	r3, r0
 8005402:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMI3_OK)
 8005404:	7bfb      	ldrb	r3, [r7, #15]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d006      	beq.n	8005418 <read_sensor+0x94>
	{
		PDEBUG("read acc register failed, error code: %d\r\n", rslt);
 800540a:	7bfb      	ldrb	r3, [r7, #15]
 800540c:	4619      	mov	r1, r3
 800540e:	4848      	ldr	r0, [pc, #288]	; (8005530 <read_sensor+0x1ac>)
 8005410:	f7ff fe06 	bl	8005020 <PDEBUG>
		return rslt;
 8005414:	7bfb      	ldrb	r3, [r7, #15]
 8005416:	e07f      	b.n	8005518 <read_sensor+0x194>
	}
	acc_data[0] = (acc_regs[0] | (uint16_t)acc_regs[1] << 8);
 8005418:	7a3b      	ldrb	r3, [r7, #8]
 800541a:	b21a      	sxth	r2, r3
 800541c:	7a7b      	ldrb	r3, [r7, #9]
 800541e:	021b      	lsls	r3, r3, #8
 8005420:	b21b      	sxth	r3, r3
 8005422:	4313      	orrs	r3, r2
 8005424:	b21a      	sxth	r2, r3
 8005426:	4b43      	ldr	r3, [pc, #268]	; (8005534 <read_sensor+0x1b0>)
 8005428:	801a      	strh	r2, [r3, #0]
	acc_data[1] = (acc_regs[2] | (uint16_t)acc_regs[3] << 8);
 800542a:	7abb      	ldrb	r3, [r7, #10]
 800542c:	b21a      	sxth	r2, r3
 800542e:	7afb      	ldrb	r3, [r7, #11]
 8005430:	021b      	lsls	r3, r3, #8
 8005432:	b21b      	sxth	r3, r3
 8005434:	4313      	orrs	r3, r2
 8005436:	b21a      	sxth	r2, r3
 8005438:	4b3e      	ldr	r3, [pc, #248]	; (8005534 <read_sensor+0x1b0>)
 800543a:	805a      	strh	r2, [r3, #2]
	acc_data[2] = (acc_regs[4] | (uint16_t)acc_regs[5] << 8);
 800543c:	7b3b      	ldrb	r3, [r7, #12]
 800543e:	b21a      	sxth	r2, r3
 8005440:	7b7b      	ldrb	r3, [r7, #13]
 8005442:	021b      	lsls	r3, r3, #8
 8005444:	b21b      	sxth	r3, r3
 8005446:	4313      	orrs	r3, r2
 8005448:	b21a      	sxth	r2, r3
 800544a:	4b3a      	ldr	r3, [pc, #232]	; (8005534 <read_sensor+0x1b0>)
 800544c:	809a      	strh	r2, [r3, #4]

	data[0] = lsb_to_dps(gyro_data[0], (float)2000, dev.resolution);
 800544e:	4b37      	ldr	r3, [pc, #220]	; (800552c <read_sensor+0x1a8>)
 8005450:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005454:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8005458:	4611      	mov	r1, r2
 800545a:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8005538 <read_sensor+0x1b4>
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff fe5e 	bl	8005120 <lsb_to_dps>
 8005464:	eef0 7a40 	vmov.f32	s15, s0
 8005468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800546a:	edc3 7a00 	vstr	s15, [r3]
	data[1] = lsb_to_dps(gyro_data[1], (float)2000, dev.resolution);
 800546e:	4b2f      	ldr	r3, [pc, #188]	; (800552c <read_sensor+0x1a8>)
 8005470:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8005474:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8005478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800547a:	1d1c      	adds	r4, r3, #4
 800547c:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8005538 <read_sensor+0x1b4>
 8005480:	4610      	mov	r0, r2
 8005482:	f7ff fe4d 	bl	8005120 <lsb_to_dps>
 8005486:	eef0 7a40 	vmov.f32	s15, s0
 800548a:	edc4 7a00 	vstr	s15, [r4]
	data[2] = lsb_to_dps(gyro_data[2], (float)2000, dev.resolution);
 800548e:	4b27      	ldr	r3, [pc, #156]	; (800552c <read_sensor+0x1a8>)
 8005490:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8005494:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8005498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800549a:	f103 0408 	add.w	r4, r3, #8
 800549e:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8005538 <read_sensor+0x1b4>
 80054a2:	4610      	mov	r0, r2
 80054a4:	f7ff fe3c 	bl	8005120 <lsb_to_dps>
 80054a8:	eef0 7a40 	vmov.f32	s15, s0
 80054ac:	edc4 7a00 	vstr	s15, [r4]

	data[3] = lsb_to_mps2(acc_data[0], 2, dev.resolution);
 80054b0:	4b20      	ldr	r3, [pc, #128]	; (8005534 <read_sensor+0x1b0>)
 80054b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80054b6:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80054ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054bc:	f103 040c 	add.w	r4, r3, #12
 80054c0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80054c4:	4610      	mov	r0, r2
 80054c6:	f7ff fdf5 	bl	80050b4 <lsb_to_mps2>
 80054ca:	eef0 7a40 	vmov.f32	s15, s0
 80054ce:	edc4 7a00 	vstr	s15, [r4]
	data[4] = lsb_to_mps2(acc_data[1], 2, dev.resolution);
 80054d2:	4b18      	ldr	r3, [pc, #96]	; (8005534 <read_sensor+0x1b0>)
 80054d4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80054d8:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80054dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054de:	f103 0410 	add.w	r4, r3, #16
 80054e2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80054e6:	4610      	mov	r0, r2
 80054e8:	f7ff fde4 	bl	80050b4 <lsb_to_mps2>
 80054ec:	eef0 7a40 	vmov.f32	s15, s0
 80054f0:	edc4 7a00 	vstr	s15, [r4]
	data[5] = lsb_to_mps2(acc_data[2], 2, dev.resolution);
 80054f4:	4b0f      	ldr	r3, [pc, #60]	; (8005534 <read_sensor+0x1b0>)
 80054f6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80054fa:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80054fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005500:	f103 0414 	add.w	r4, r3, #20
 8005504:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8005508:	4610      	mov	r0, r2
 800550a:	f7ff fdd3 	bl	80050b4 <lsb_to_mps2>
 800550e:	eef0 7a40 	vmov.f32	s15, s0
 8005512:	edc4 7a00 	vstr	s15, [r4]

	return 0;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005522:	b004      	add	sp, #16
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	080145f4 	.word	0x080145f4
 800552c:	200005bc 	.word	0x200005bc
 8005530:	08014620 	.word	0x08014620
 8005534:	200005c4 	.word	0x200005c4
 8005538:	44fa0000 	.word	0x44fa0000

0800553c <LL_EXTI_EnableIT_0_31>:
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005544:	4b06      	ldr	r3, [pc, #24]	; (8005560 <LL_EXTI_EnableIT_0_31+0x24>)
 8005546:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800554a:	4905      	ldr	r1, [pc, #20]	; (8005560 <LL_EXTI_EnableIT_0_31+0x24>)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4313      	orrs	r3, r2
 8005550:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	58000800 	.word	0x58000800

08005564 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800556c:	4b05      	ldr	r3, [pc, #20]	; (8005584 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	4904      	ldr	r1, [pc, #16]	; (8005584 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4313      	orrs	r3, r2
 8005576:	600b      	str	r3, [r1, #0]

}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	58000800 	.word	0x58000800

08005588 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800558e:	4b0d      	ldr	r3, [pc, #52]	; (80055c4 <ReadRtcSsrValue+0x3c>)
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	b29b      	uxth	r3, r3
 8005594:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8005596:	4b0b      	ldr	r3, [pc, #44]	; (80055c4 <ReadRtcSsrValue+0x3c>)
 8005598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559a:	b29b      	uxth	r3, r3
 800559c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800559e:	e005      	b.n	80055ac <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80055a4:	4b07      	ldr	r3, [pc, #28]	; (80055c4 <ReadRtcSsrValue+0x3c>)
 80055a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d1f5      	bne.n	80055a0 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80055b4:	683b      	ldr	r3, [r7, #0]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	40002800 	.word	0x40002800

080055c8 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	4603      	mov	r3, r0
 80055d0:	460a      	mov	r2, r1
 80055d2:	71fb      	strb	r3, [r7, #7]
 80055d4:	4613      	mov	r3, r2
 80055d6:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80055d8:	79ba      	ldrb	r2, [r7, #6]
 80055da:	491d      	ldr	r1, [pc, #116]	; (8005650 <LinkTimerAfter+0x88>)
 80055dc:	4613      	mov	r3, r2
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	4413      	add	r3, r2
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	440b      	add	r3, r1
 80055e6:	3315      	adds	r3, #21
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
 80055ee:	2b06      	cmp	r3, #6
 80055f0:	d009      	beq.n	8005606 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80055f2:	7bfa      	ldrb	r2, [r7, #15]
 80055f4:	4916      	ldr	r1, [pc, #88]	; (8005650 <LinkTimerAfter+0x88>)
 80055f6:	4613      	mov	r3, r2
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	4413      	add	r3, r2
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	440b      	add	r3, r1
 8005600:	3314      	adds	r3, #20
 8005602:	79fa      	ldrb	r2, [r7, #7]
 8005604:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8005606:	79fa      	ldrb	r2, [r7, #7]
 8005608:	4911      	ldr	r1, [pc, #68]	; (8005650 <LinkTimerAfter+0x88>)
 800560a:	4613      	mov	r3, r2
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	4413      	add	r3, r2
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	440b      	add	r3, r1
 8005614:	3315      	adds	r3, #21
 8005616:	7bfa      	ldrb	r2, [r7, #15]
 8005618:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800561a:	79fa      	ldrb	r2, [r7, #7]
 800561c:	490c      	ldr	r1, [pc, #48]	; (8005650 <LinkTimerAfter+0x88>)
 800561e:	4613      	mov	r3, r2
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	4413      	add	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	440b      	add	r3, r1
 8005628:	3314      	adds	r3, #20
 800562a:	79ba      	ldrb	r2, [r7, #6]
 800562c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800562e:	79ba      	ldrb	r2, [r7, #6]
 8005630:	4907      	ldr	r1, [pc, #28]	; (8005650 <LinkTimerAfter+0x88>)
 8005632:	4613      	mov	r3, r2
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	4413      	add	r3, r2
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	440b      	add	r3, r1
 800563c:	3315      	adds	r3, #21
 800563e:	79fa      	ldrb	r2, [r7, #7]
 8005640:	701a      	strb	r2, [r3, #0]

  return;
 8005642:	bf00      	nop
}
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	200005cc 	.word	0x200005cc

08005654 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	4603      	mov	r3, r0
 800565c:	460a      	mov	r2, r1
 800565e:	71fb      	strb	r3, [r7, #7]
 8005660:	4613      	mov	r3, r2
 8005662:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8005664:	4b29      	ldr	r3, [pc, #164]	; (800570c <LinkTimerBefore+0xb8>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	b2db      	uxtb	r3, r3
 800566a:	79ba      	ldrb	r2, [r7, #6]
 800566c:	429a      	cmp	r2, r3
 800566e:	d032      	beq.n	80056d6 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8005670:	79ba      	ldrb	r2, [r7, #6]
 8005672:	4927      	ldr	r1, [pc, #156]	; (8005710 <LinkTimerBefore+0xbc>)
 8005674:	4613      	mov	r3, r2
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	4413      	add	r3, r2
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	440b      	add	r3, r1
 800567e:	3314      	adds	r3, #20
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8005684:	7bfa      	ldrb	r2, [r7, #15]
 8005686:	4922      	ldr	r1, [pc, #136]	; (8005710 <LinkTimerBefore+0xbc>)
 8005688:	4613      	mov	r3, r2
 800568a:	005b      	lsls	r3, r3, #1
 800568c:	4413      	add	r3, r2
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	440b      	add	r3, r1
 8005692:	3315      	adds	r3, #21
 8005694:	79fa      	ldrb	r2, [r7, #7]
 8005696:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8005698:	79fa      	ldrb	r2, [r7, #7]
 800569a:	491d      	ldr	r1, [pc, #116]	; (8005710 <LinkTimerBefore+0xbc>)
 800569c:	4613      	mov	r3, r2
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	4413      	add	r3, r2
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	440b      	add	r3, r1
 80056a6:	3315      	adds	r3, #21
 80056a8:	79ba      	ldrb	r2, [r7, #6]
 80056aa:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80056ac:	79fa      	ldrb	r2, [r7, #7]
 80056ae:	4918      	ldr	r1, [pc, #96]	; (8005710 <LinkTimerBefore+0xbc>)
 80056b0:	4613      	mov	r3, r2
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	4413      	add	r3, r2
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	440b      	add	r3, r1
 80056ba:	3314      	adds	r3, #20
 80056bc:	7bfa      	ldrb	r2, [r7, #15]
 80056be:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80056c0:	79ba      	ldrb	r2, [r7, #6]
 80056c2:	4913      	ldr	r1, [pc, #76]	; (8005710 <LinkTimerBefore+0xbc>)
 80056c4:	4613      	mov	r3, r2
 80056c6:	005b      	lsls	r3, r3, #1
 80056c8:	4413      	add	r3, r2
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	440b      	add	r3, r1
 80056ce:	3314      	adds	r3, #20
 80056d0:	79fa      	ldrb	r2, [r7, #7]
 80056d2:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80056d4:	e014      	b.n	8005700 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80056d6:	79fa      	ldrb	r2, [r7, #7]
 80056d8:	490d      	ldr	r1, [pc, #52]	; (8005710 <LinkTimerBefore+0xbc>)
 80056da:	4613      	mov	r3, r2
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	4413      	add	r3, r2
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	440b      	add	r3, r1
 80056e4:	3315      	adds	r3, #21
 80056e6:	79ba      	ldrb	r2, [r7, #6]
 80056e8:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80056ea:	79ba      	ldrb	r2, [r7, #6]
 80056ec:	4908      	ldr	r1, [pc, #32]	; (8005710 <LinkTimerBefore+0xbc>)
 80056ee:	4613      	mov	r3, r2
 80056f0:	005b      	lsls	r3, r3, #1
 80056f2:	4413      	add	r3, r2
 80056f4:	00db      	lsls	r3, r3, #3
 80056f6:	440b      	add	r3, r1
 80056f8:	3314      	adds	r3, #20
 80056fa:	79fa      	ldrb	r2, [r7, #7]
 80056fc:	701a      	strb	r2, [r3, #0]
  return;
 80056fe:	bf00      	nop
}
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	2000065c 	.word	0x2000065c
 8005710:	200005cc 	.word	0x200005cc

08005714 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	4603      	mov	r3, r0
 800571c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800571e:	4b4e      	ldr	r3, [pc, #312]	; (8005858 <linkTimer+0x144>)
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b06      	cmp	r3, #6
 8005726:	d118      	bne.n	800575a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8005728:	4b4b      	ldr	r3, [pc, #300]	; (8005858 <linkTimer+0x144>)
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	b2da      	uxtb	r2, r3
 800572e:	4b4b      	ldr	r3, [pc, #300]	; (800585c <linkTimer+0x148>)
 8005730:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8005732:	4a49      	ldr	r2, [pc, #292]	; (8005858 <linkTimer+0x144>)
 8005734:	79fb      	ldrb	r3, [r7, #7]
 8005736:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8005738:	79fa      	ldrb	r2, [r7, #7]
 800573a:	4949      	ldr	r1, [pc, #292]	; (8005860 <linkTimer+0x14c>)
 800573c:	4613      	mov	r3, r2
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	4413      	add	r3, r2
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	440b      	add	r3, r1
 8005746:	3315      	adds	r3, #21
 8005748:	2206      	movs	r2, #6
 800574a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800574c:	4b45      	ldr	r3, [pc, #276]	; (8005864 <linkTimer+0x150>)
 800574e:	f04f 32ff 	mov.w	r2, #4294967295
 8005752:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8005754:	2300      	movs	r3, #0
 8005756:	81fb      	strh	r3, [r7, #14]
 8005758:	e078      	b.n	800584c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800575a:	f000 f909 	bl	8005970 <ReturnTimeElapsed>
 800575e:	4603      	mov	r3, r0
 8005760:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8005762:	79fa      	ldrb	r2, [r7, #7]
 8005764:	493e      	ldr	r1, [pc, #248]	; (8005860 <linkTimer+0x14c>)
 8005766:	4613      	mov	r3, r2
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	4413      	add	r3, r2
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	440b      	add	r3, r1
 8005770:	3308      	adds	r3, #8
 8005772:	6819      	ldr	r1, [r3, #0]
 8005774:	89fb      	ldrh	r3, [r7, #14]
 8005776:	79fa      	ldrb	r2, [r7, #7]
 8005778:	4419      	add	r1, r3
 800577a:	4839      	ldr	r0, [pc, #228]	; (8005860 <linkTimer+0x14c>)
 800577c:	4613      	mov	r3, r2
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	4413      	add	r3, r2
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	4403      	add	r3, r0
 8005786:	3308      	adds	r3, #8
 8005788:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800578a:	79fa      	ldrb	r2, [r7, #7]
 800578c:	4934      	ldr	r1, [pc, #208]	; (8005860 <linkTimer+0x14c>)
 800578e:	4613      	mov	r3, r2
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	4413      	add	r3, r2
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	440b      	add	r3, r1
 8005798:	3308      	adds	r3, #8
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800579e:	4b2e      	ldr	r3, [pc, #184]	; (8005858 <linkTimer+0x144>)
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	4619      	mov	r1, r3
 80057a6:	4a2e      	ldr	r2, [pc, #184]	; (8005860 <linkTimer+0x14c>)
 80057a8:	460b      	mov	r3, r1
 80057aa:	005b      	lsls	r3, r3, #1
 80057ac:	440b      	add	r3, r1
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	4413      	add	r3, r2
 80057b2:	3308      	adds	r3, #8
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d337      	bcc.n	800582c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80057bc:	4b26      	ldr	r3, [pc, #152]	; (8005858 <linkTimer+0x144>)
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80057c2:	7b7a      	ldrb	r2, [r7, #13]
 80057c4:	4926      	ldr	r1, [pc, #152]	; (8005860 <linkTimer+0x14c>)
 80057c6:	4613      	mov	r3, r2
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	4413      	add	r3, r2
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	440b      	add	r3, r1
 80057d0:	3315      	adds	r3, #21
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80057d6:	e013      	b.n	8005800 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80057d8:	7b7a      	ldrb	r2, [r7, #13]
 80057da:	4921      	ldr	r1, [pc, #132]	; (8005860 <linkTimer+0x14c>)
 80057dc:	4613      	mov	r3, r2
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	4413      	add	r3, r2
 80057e2:	00db      	lsls	r3, r3, #3
 80057e4:	440b      	add	r3, r1
 80057e6:	3315      	adds	r3, #21
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80057ec:	7b7a      	ldrb	r2, [r7, #13]
 80057ee:	491c      	ldr	r1, [pc, #112]	; (8005860 <linkTimer+0x14c>)
 80057f0:	4613      	mov	r3, r2
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	4413      	add	r3, r2
 80057f6:	00db      	lsls	r3, r3, #3
 80057f8:	440b      	add	r3, r1
 80057fa:	3315      	adds	r3, #21
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8005800:	7b3b      	ldrb	r3, [r7, #12]
 8005802:	2b06      	cmp	r3, #6
 8005804:	d00b      	beq.n	800581e <linkTimer+0x10a>
 8005806:	7b3a      	ldrb	r2, [r7, #12]
 8005808:	4915      	ldr	r1, [pc, #84]	; (8005860 <linkTimer+0x14c>)
 800580a:	4613      	mov	r3, r2
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	4413      	add	r3, r2
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	440b      	add	r3, r1
 8005814:	3308      	adds	r3, #8
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	429a      	cmp	r2, r3
 800581c:	d2dc      	bcs.n	80057d8 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800581e:	7b7a      	ldrb	r2, [r7, #13]
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	4611      	mov	r1, r2
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff fecf 	bl	80055c8 <LinkTimerAfter>
 800582a:	e00f      	b.n	800584c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800582c:	4b0a      	ldr	r3, [pc, #40]	; (8005858 <linkTimer+0x144>)
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	b2da      	uxtb	r2, r3
 8005832:	79fb      	ldrb	r3, [r7, #7]
 8005834:	4611      	mov	r1, r2
 8005836:	4618      	mov	r0, r3
 8005838:	f7ff ff0c 	bl	8005654 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800583c:	4b06      	ldr	r3, [pc, #24]	; (8005858 <linkTimer+0x144>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	b2da      	uxtb	r2, r3
 8005842:	4b06      	ldr	r3, [pc, #24]	; (800585c <linkTimer+0x148>)
 8005844:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8005846:	4a04      	ldr	r2, [pc, #16]	; (8005858 <linkTimer+0x144>)
 8005848:	79fb      	ldrb	r3, [r7, #7]
 800584a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800584c:	89fb      	ldrh	r3, [r7, #14]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	2000065c 	.word	0x2000065c
 800585c:	2000065d 	.word	0x2000065d
 8005860:	200005cc 	.word	0x200005cc
 8005864:	20000660 	.word	0x20000660

08005868 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	4603      	mov	r3, r0
 8005870:	460a      	mov	r2, r1
 8005872:	71fb      	strb	r3, [r7, #7]
 8005874:	4613      	mov	r3, r2
 8005876:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8005878:	4b39      	ldr	r3, [pc, #228]	; (8005960 <UnlinkTimer+0xf8>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	b2db      	uxtb	r3, r3
 800587e:	79fa      	ldrb	r2, [r7, #7]
 8005880:	429a      	cmp	r2, r3
 8005882:	d111      	bne.n	80058a8 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8005884:	4b36      	ldr	r3, [pc, #216]	; (8005960 <UnlinkTimer+0xf8>)
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	b2da      	uxtb	r2, r3
 800588a:	4b36      	ldr	r3, [pc, #216]	; (8005964 <UnlinkTimer+0xfc>)
 800588c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800588e:	79fa      	ldrb	r2, [r7, #7]
 8005890:	4935      	ldr	r1, [pc, #212]	; (8005968 <UnlinkTimer+0x100>)
 8005892:	4613      	mov	r3, r2
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	4413      	add	r3, r2
 8005898:	00db      	lsls	r3, r3, #3
 800589a:	440b      	add	r3, r1
 800589c:	3315      	adds	r3, #21
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	b2da      	uxtb	r2, r3
 80058a2:	4b2f      	ldr	r3, [pc, #188]	; (8005960 <UnlinkTimer+0xf8>)
 80058a4:	701a      	strb	r2, [r3, #0]
 80058a6:	e03e      	b.n	8005926 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80058a8:	79fa      	ldrb	r2, [r7, #7]
 80058aa:	492f      	ldr	r1, [pc, #188]	; (8005968 <UnlinkTimer+0x100>)
 80058ac:	4613      	mov	r3, r2
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	4413      	add	r3, r2
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	440b      	add	r3, r1
 80058b6:	3314      	adds	r3, #20
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80058bc:	79fa      	ldrb	r2, [r7, #7]
 80058be:	492a      	ldr	r1, [pc, #168]	; (8005968 <UnlinkTimer+0x100>)
 80058c0:	4613      	mov	r3, r2
 80058c2:	005b      	lsls	r3, r3, #1
 80058c4:	4413      	add	r3, r2
 80058c6:	00db      	lsls	r3, r3, #3
 80058c8:	440b      	add	r3, r1
 80058ca:	3315      	adds	r3, #21
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80058d0:	79f9      	ldrb	r1, [r7, #7]
 80058d2:	7bfa      	ldrb	r2, [r7, #15]
 80058d4:	4824      	ldr	r0, [pc, #144]	; (8005968 <UnlinkTimer+0x100>)
 80058d6:	460b      	mov	r3, r1
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	440b      	add	r3, r1
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	4403      	add	r3, r0
 80058e0:	3315      	adds	r3, #21
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	b2d8      	uxtb	r0, r3
 80058e6:	4920      	ldr	r1, [pc, #128]	; (8005968 <UnlinkTimer+0x100>)
 80058e8:	4613      	mov	r3, r2
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	4413      	add	r3, r2
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	440b      	add	r3, r1
 80058f2:	3315      	adds	r3, #21
 80058f4:	4602      	mov	r2, r0
 80058f6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80058f8:	7bbb      	ldrb	r3, [r7, #14]
 80058fa:	2b06      	cmp	r3, #6
 80058fc:	d013      	beq.n	8005926 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80058fe:	79f9      	ldrb	r1, [r7, #7]
 8005900:	7bba      	ldrb	r2, [r7, #14]
 8005902:	4819      	ldr	r0, [pc, #100]	; (8005968 <UnlinkTimer+0x100>)
 8005904:	460b      	mov	r3, r1
 8005906:	005b      	lsls	r3, r3, #1
 8005908:	440b      	add	r3, r1
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	4403      	add	r3, r0
 800590e:	3314      	adds	r3, #20
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	b2d8      	uxtb	r0, r3
 8005914:	4914      	ldr	r1, [pc, #80]	; (8005968 <UnlinkTimer+0x100>)
 8005916:	4613      	mov	r3, r2
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	4413      	add	r3, r2
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	440b      	add	r3, r1
 8005920:	3314      	adds	r3, #20
 8005922:	4602      	mov	r2, r0
 8005924:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8005926:	79fa      	ldrb	r2, [r7, #7]
 8005928:	490f      	ldr	r1, [pc, #60]	; (8005968 <UnlinkTimer+0x100>)
 800592a:	4613      	mov	r3, r2
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	4413      	add	r3, r2
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	440b      	add	r3, r1
 8005934:	330c      	adds	r3, #12
 8005936:	2201      	movs	r2, #1
 8005938:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800593a:	4b09      	ldr	r3, [pc, #36]	; (8005960 <UnlinkTimer+0xf8>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b06      	cmp	r3, #6
 8005942:	d107      	bne.n	8005954 <UnlinkTimer+0xec>
 8005944:	79bb      	ldrb	r3, [r7, #6]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d104      	bne.n	8005954 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800594a:	4b08      	ldr	r3, [pc, #32]	; (800596c <UnlinkTimer+0x104>)
 800594c:	f04f 32ff 	mov.w	r2, #4294967295
 8005950:	601a      	str	r2, [r3, #0]
  }

  return;
 8005952:	bf00      	nop
 8005954:	bf00      	nop
}
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	2000065c 	.word	0x2000065c
 8005964:	2000065d 	.word	0x2000065d
 8005968:	200005cc 	.word	0x200005cc
 800596c:	20000660 	.word	0x20000660

08005970 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8005976:	4b1a      	ldr	r3, [pc, #104]	; (80059e0 <ReturnTimeElapsed+0x70>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597e:	d026      	beq.n	80059ce <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8005980:	f7ff fe02 	bl	8005588 <ReadRtcSsrValue>
 8005984:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8005986:	4b16      	ldr	r3, [pc, #88]	; (80059e0 <ReturnTimeElapsed+0x70>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	429a      	cmp	r2, r3
 800598e:	d805      	bhi.n	800599c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8005990:	4b13      	ldr	r3, [pc, #76]	; (80059e0 <ReturnTimeElapsed+0x70>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	607b      	str	r3, [r7, #4]
 800599a:	e00a      	b.n	80059b2 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800599c:	4b11      	ldr	r3, [pc, #68]	; (80059e4 <ReturnTimeElapsed+0x74>)
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	461a      	mov	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80059a8:	4b0d      	ldr	r3, [pc, #52]	; (80059e0 <ReturnTimeElapsed+0x70>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	4413      	add	r3, r2
 80059b0:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80059b2:	4b0d      	ldr	r3, [pc, #52]	; (80059e8 <ReturnTimeElapsed+0x78>)
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	fb02 f303 	mul.w	r3, r2, r3
 80059be:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80059c0:	4b0a      	ldr	r3, [pc, #40]	; (80059ec <ReturnTimeElapsed+0x7c>)
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	461a      	mov	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	40d3      	lsrs	r3, r2
 80059ca:	607b      	str	r3, [r7, #4]
 80059cc:	e001      	b.n	80059d2 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80059ce:	2300      	movs	r3, #0
 80059d0:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	b29b      	uxth	r3, r3
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	20000660 	.word	0x20000660
 80059e4:	20000668 	.word	0x20000668
 80059e8:	20000666 	.word	0x20000666
 80059ec:	20000665 	.word	0x20000665

080059f0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	4603      	mov	r3, r0
 80059f8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80059fa:	88fb      	ldrh	r3, [r7, #6]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d108      	bne.n	8005a12 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8005a00:	f7ff fdc2 	bl	8005588 <ReadRtcSsrValue>
 8005a04:	4603      	mov	r3, r0
 8005a06:	4a21      	ldr	r2, [pc, #132]	; (8005a8c <RestartWakeupCounter+0x9c>)
 8005a08:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8005a0a:	2003      	movs	r0, #3
 8005a0c:	f001 ffff 	bl	8007a0e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8005a10:	e039      	b.n	8005a86 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8005a12:	88fb      	ldrh	r3, [r7, #6]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d803      	bhi.n	8005a20 <RestartWakeupCounter+0x30>
 8005a18:	4b1d      	ldr	r3, [pc, #116]	; (8005a90 <RestartWakeupCounter+0xa0>)
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d002      	beq.n	8005a26 <RestartWakeupCounter+0x36>
      Value -= 1;
 8005a20:	88fb      	ldrh	r3, [r7, #6]
 8005a22:	3b01      	subs	r3, #1
 8005a24:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8005a26:	bf00      	nop
 8005a28:	4b1a      	ldr	r3, [pc, #104]	; (8005a94 <RestartWakeupCounter+0xa4>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f003 0304 	and.w	r3, r3, #4
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d0f8      	beq.n	8005a28 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8005a36:	4b17      	ldr	r3, [pc, #92]	; (8005a94 <RestartWakeupCounter+0xa4>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	4b15      	ldr	r3, [pc, #84]	; (8005a94 <RestartWakeupCounter+0xa4>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005a46:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8005a48:	4b13      	ldr	r3, [pc, #76]	; (8005a98 <RestartWakeupCounter+0xa8>)
 8005a4a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005a4e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8005a50:	2003      	movs	r0, #3
 8005a52:	f001 ffea 	bl	8007a2a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8005a56:	4b11      	ldr	r3, [pc, #68]	; (8005a9c <RestartWakeupCounter+0xac>)
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	0c1b      	lsrs	r3, r3, #16
 8005a5c:	041b      	lsls	r3, r3, #16
 8005a5e:	88fa      	ldrh	r2, [r7, #6]
 8005a60:	490e      	ldr	r1, [pc, #56]	; (8005a9c <RestartWakeupCounter+0xac>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8005a66:	f7ff fd8f 	bl	8005588 <ReadRtcSsrValue>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	4a07      	ldr	r2, [pc, #28]	; (8005a8c <RestartWakeupCounter+0x9c>)
 8005a6e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8005a70:	4b08      	ldr	r3, [pc, #32]	; (8005a94 <RestartWakeupCounter+0xa4>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689a      	ldr	r2, [r3, #8]
 8005a76:	4b07      	ldr	r3, [pc, #28]	; (8005a94 <RestartWakeupCounter+0xa4>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a7e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8005a80:	f3af 8000 	nop.w
  return ;
 8005a84:	bf00      	nop
}
 8005a86:	3708      	adds	r7, #8
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	20000660 	.word	0x20000660
 8005a90:	20000665 	.word	0x20000665
 8005a94:	200010a8 	.word	0x200010a8
 8005a98:	58000800 	.word	0x58000800
 8005a9c:	40002800 	.word	0x40002800

08005aa0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8005aa6:	4b45      	ldr	r3, [pc, #276]	; (8005bbc <RescheduleTimerList+0x11c>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab2:	d107      	bne.n	8005ac4 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8005ab4:	bf00      	nop
 8005ab6:	4b42      	ldr	r3, [pc, #264]	; (8005bc0 <RescheduleTimerList+0x120>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1f8      	bne.n	8005ab6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8005ac4:	4b3e      	ldr	r3, [pc, #248]	; (8005bc0 <RescheduleTimerList+0x120>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689a      	ldr	r2, [r3, #8]
 8005aca:	4b3d      	ldr	r3, [pc, #244]	; (8005bc0 <RescheduleTimerList+0x120>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ad2:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8005ad4:	4b3b      	ldr	r3, [pc, #236]	; (8005bc4 <RescheduleTimerList+0x124>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8005ada:	7bfa      	ldrb	r2, [r7, #15]
 8005adc:	493a      	ldr	r1, [pc, #232]	; (8005bc8 <RescheduleTimerList+0x128>)
 8005ade:	4613      	mov	r3, r2
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	4413      	add	r3, r2
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	440b      	add	r3, r1
 8005ae8:	3308      	adds	r3, #8
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8005aee:	f7ff ff3f 	bl	8005970 <ReturnTimeElapsed>
 8005af2:	4603      	mov	r3, r0
 8005af4:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8005af6:	88fb      	ldrh	r3, [r7, #6]
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d205      	bcs.n	8005b0a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8005afe:	2300      	movs	r3, #0
 8005b00:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8005b02:	4b32      	ldr	r3, [pc, #200]	; (8005bcc <RescheduleTimerList+0x12c>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	701a      	strb	r2, [r3, #0]
 8005b08:	e04d      	b.n	8005ba6 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8005b0a:	88fb      	ldrh	r3, [r7, #6]
 8005b0c:	4a30      	ldr	r2, [pc, #192]	; (8005bd0 <RescheduleTimerList+0x130>)
 8005b0e:	8812      	ldrh	r2, [r2, #0]
 8005b10:	b292      	uxth	r2, r2
 8005b12:	4413      	add	r3, r2
 8005b14:	461a      	mov	r2, r3
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d906      	bls.n	8005b2a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8005b1c:	4b2c      	ldr	r3, [pc, #176]	; (8005bd0 <RescheduleTimerList+0x130>)
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8005b22:	4b2a      	ldr	r3, [pc, #168]	; (8005bcc <RescheduleTimerList+0x12c>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	701a      	strb	r2, [r3, #0]
 8005b28:	e03d      	b.n	8005ba6 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	88fb      	ldrh	r3, [r7, #6]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8005b34:	4b25      	ldr	r3, [pc, #148]	; (8005bcc <RescheduleTimerList+0x12c>)
 8005b36:	2201      	movs	r2, #1
 8005b38:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8005b3a:	e034      	b.n	8005ba6 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8005b3c:	7bfa      	ldrb	r2, [r7, #15]
 8005b3e:	4922      	ldr	r1, [pc, #136]	; (8005bc8 <RescheduleTimerList+0x128>)
 8005b40:	4613      	mov	r3, r2
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	4413      	add	r3, r2
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	440b      	add	r3, r1
 8005b4a:	3308      	adds	r3, #8
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	88fb      	ldrh	r3, [r7, #6]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d20a      	bcs.n	8005b6a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8005b54:	7bfa      	ldrb	r2, [r7, #15]
 8005b56:	491c      	ldr	r1, [pc, #112]	; (8005bc8 <RescheduleTimerList+0x128>)
 8005b58:	4613      	mov	r3, r2
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	4413      	add	r3, r2
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	440b      	add	r3, r1
 8005b62:	3308      	adds	r3, #8
 8005b64:	2200      	movs	r2, #0
 8005b66:	601a      	str	r2, [r3, #0]
 8005b68:	e013      	b.n	8005b92 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8005b6a:	7bfa      	ldrb	r2, [r7, #15]
 8005b6c:	4916      	ldr	r1, [pc, #88]	; (8005bc8 <RescheduleTimerList+0x128>)
 8005b6e:	4613      	mov	r3, r2
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	4413      	add	r3, r2
 8005b74:	00db      	lsls	r3, r3, #3
 8005b76:	440b      	add	r3, r1
 8005b78:	3308      	adds	r3, #8
 8005b7a:	6819      	ldr	r1, [r3, #0]
 8005b7c:	88fb      	ldrh	r3, [r7, #6]
 8005b7e:	7bfa      	ldrb	r2, [r7, #15]
 8005b80:	1ac9      	subs	r1, r1, r3
 8005b82:	4811      	ldr	r0, [pc, #68]	; (8005bc8 <RescheduleTimerList+0x128>)
 8005b84:	4613      	mov	r3, r2
 8005b86:	005b      	lsls	r3, r3, #1
 8005b88:	4413      	add	r3, r2
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	4403      	add	r3, r0
 8005b8e:	3308      	adds	r3, #8
 8005b90:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8005b92:	7bfa      	ldrb	r2, [r7, #15]
 8005b94:	490c      	ldr	r1, [pc, #48]	; (8005bc8 <RescheduleTimerList+0x128>)
 8005b96:	4613      	mov	r3, r2
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	4413      	add	r3, r2
 8005b9c:	00db      	lsls	r3, r3, #3
 8005b9e:	440b      	add	r3, r1
 8005ba0:	3315      	adds	r3, #21
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
 8005ba8:	2b06      	cmp	r3, #6
 8005baa:	d1c7      	bne.n	8005b3c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8005bac:	89bb      	ldrh	r3, [r7, #12]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7ff ff1e 	bl	80059f0 <RestartWakeupCounter>

  return ;
 8005bb4:	bf00      	nop
}
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	40002800 	.word	0x40002800
 8005bc0:	200010a8 	.word	0x200010a8
 8005bc4:	2000065c 	.word	0x2000065c
 8005bc8:	200005cc 	.word	0x200005cc
 8005bcc:	20000664 	.word	0x20000664
 8005bd0:	2000066a 	.word	0x2000066a

08005bd4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08a      	sub	sp, #40	; 0x28
 8005bd8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bda:	f3ef 8310 	mrs	r3, PRIMASK
 8005bde:	617b      	str	r3, [r7, #20]
  return(result);
 8005be0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005be2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8005be4:	b672      	cpsid	i
}
 8005be6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8005be8:	4b59      	ldr	r3, [pc, #356]	; (8005d50 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	22ca      	movs	r2, #202	; 0xca
 8005bee:	625a      	str	r2, [r3, #36]	; 0x24
 8005bf0:	4b57      	ldr	r3, [pc, #348]	; (8005d50 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2253      	movs	r2, #83	; 0x53
 8005bf6:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8005bf8:	4b55      	ldr	r3, [pc, #340]	; (8005d50 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689a      	ldr	r2, [r3, #8]
 8005bfe:	4b54      	ldr	r3, [pc, #336]	; (8005d50 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c06:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8005c08:	4b52      	ldr	r3, [pc, #328]	; (8005d54 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8005c10:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005c14:	4950      	ldr	r1, [pc, #320]	; (8005d58 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8005c16:	4613      	mov	r3, r2
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	4413      	add	r3, r2
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	440b      	add	r3, r1
 8005c20:	330c      	adds	r3, #12
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d16e      	bne.n	8005d08 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8005c2a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005c2e:	494a      	ldr	r1, [pc, #296]	; (8005d58 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8005c30:	4613      	mov	r3, r2
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	4413      	add	r3, r2
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	440b      	add	r3, r1
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8005c3e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005c42:	4945      	ldr	r1, [pc, #276]	; (8005d58 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8005c44:	4613      	mov	r3, r2
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	4413      	add	r3, r2
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	440b      	add	r3, r1
 8005c4e:	3310      	adds	r3, #16
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8005c54:	4b41      	ldr	r3, [pc, #260]	; (8005d5c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d04c      	beq.n	8005cf8 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8005c5e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005c62:	493d      	ldr	r1, [pc, #244]	; (8005d58 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8005c64:	4613      	mov	r3, r2
 8005c66:	005b      	lsls	r3, r3, #1
 8005c68:	4413      	add	r3, r2
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	440b      	add	r3, r1
 8005c6e:	330d      	adds	r3, #13
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d124      	bne.n	8005cc2 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8005c78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7ff fdf2 	bl	8005868 <UnlinkTimer>
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f383 8810 	msr	PRIMASK, r3
}
 8005c8e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8005c90:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005c94:	4930      	ldr	r1, [pc, #192]	; (8005d58 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8005c96:	4613      	mov	r3, r2
 8005c98:	005b      	lsls	r3, r3, #1
 8005c9a:	4413      	add	r3, r2
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	440b      	add	r3, r1
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ca8:	4611      	mov	r1, r2
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 f9b8 	bl	8006020 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8005cb0:	4b27      	ldr	r3, [pc, #156]	; (8005d50 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	22ca      	movs	r2, #202	; 0xca
 8005cb6:	625a      	str	r2, [r3, #36]	; 0x24
 8005cb8:	4b25      	ldr	r3, [pc, #148]	; (8005d50 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2253      	movs	r2, #83	; 0x53
 8005cbe:	625a      	str	r2, [r3, #36]	; 0x24
 8005cc0:	e012      	b.n	8005ce8 <HW_TS_RTC_Wakeup_Handler+0x114>
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f383 8810 	msr	PRIMASK, r3
}
 8005ccc:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8005cce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 f920 	bl	8005f18 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8005cd8:	4b1d      	ldr	r3, [pc, #116]	; (8005d50 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	22ca      	movs	r2, #202	; 0xca
 8005cde:	625a      	str	r2, [r3, #36]	; 0x24
 8005ce0:	4b1b      	ldr	r3, [pc, #108]	; (8005d50 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2253      	movs	r2, #83	; 0x53
 8005ce6:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8005ce8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005cec:	69fa      	ldr	r2, [r7, #28]
 8005cee:	4619      	mov	r1, r3
 8005cf0:	69b8      	ldr	r0, [r7, #24]
 8005cf2:	f000 fa1b 	bl	800612c <HW_TS_RTC_Int_AppNot>
 8005cf6:	e022      	b.n	8005d3e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8005cf8:	f7ff fed2 	bl	8005aa0 <RescheduleTimerList>
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f383 8810 	msr	PRIMASK, r3
}
 8005d06:	e01a      	b.n	8005d3e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8005d08:	bf00      	nop
 8005d0a:	4b11      	ldr	r3, [pc, #68]	; (8005d50 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d0f8      	beq.n	8005d0a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8005d18:	4b0d      	ldr	r3, [pc, #52]	; (8005d50 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	4b0b      	ldr	r3, [pc, #44]	; (8005d50 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005d28:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8005d2a:	4b0d      	ldr	r3, [pc, #52]	; (8005d60 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8005d2c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005d30:	60da      	str	r2, [r3, #12]
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f383 8810 	msr	PRIMASK, r3
}
 8005d3c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8005d3e:	4b04      	ldr	r3, [pc, #16]	; (8005d50 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	22ff      	movs	r2, #255	; 0xff
 8005d44:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8005d46:	bf00      	nop
}
 8005d48:	3728      	adds	r7, #40	; 0x28
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	200010a8 	.word	0x200010a8
 8005d54:	2000065c 	.word	0x2000065c
 8005d58:	200005cc 	.word	0x200005cc
 8005d5c:	20000664 	.word	0x20000664
 8005d60:	58000800 	.word	0x58000800

08005d64 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b088      	sub	sp, #32
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	6039      	str	r1, [r7, #0]
 8005d6e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8005d70:	4b5e      	ldr	r3, [pc, #376]	; (8005eec <HW_TS_Init+0x188>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	22ca      	movs	r2, #202	; 0xca
 8005d76:	625a      	str	r2, [r3, #36]	; 0x24
 8005d78:	4b5c      	ldr	r3, [pc, #368]	; (8005eec <HW_TS_Init+0x188>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2253      	movs	r2, #83	; 0x53
 8005d7e:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005d80:	4b5b      	ldr	r3, [pc, #364]	; (8005ef0 <HW_TS_Init+0x18c>)
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	4a5a      	ldr	r2, [pc, #360]	; (8005ef0 <HW_TS_Init+0x18c>)
 8005d86:	f043 0320 	orr.w	r3, r3, #32
 8005d8a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8005d8c:	4b58      	ldr	r3, [pc, #352]	; (8005ef0 <HW_TS_Init+0x18c>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	f003 0307 	and.w	r3, r3, #7
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	f1c3 0304 	rsb	r3, r3, #4
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	4b55      	ldr	r3, [pc, #340]	; (8005ef4 <HW_TS_Init+0x190>)
 8005da0:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8005da2:	4b53      	ldr	r3, [pc, #332]	; (8005ef0 <HW_TS_Init+0x18c>)
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005daa:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8005dae:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	fa92 f2a2 	rbit	r2, r2
 8005db6:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	2a00      	cmp	r2, #0
 8005dc0:	d101      	bne.n	8005dc6 <HW_TS_Init+0x62>
  {
    return 32U;
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	e003      	b.n	8005dce <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	fab2 f282 	clz	r2, r2
 8005dcc:	b2d2      	uxtb	r2, r2
 8005dce:	40d3      	lsrs	r3, r2
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	4b48      	ldr	r3, [pc, #288]	; (8005ef8 <HW_TS_Init+0x194>)
 8005dd8:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8005dda:	4b45      	ldr	r3, [pc, #276]	; (8005ef0 <HW_TS_Init+0x18c>)
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	3301      	adds	r3, #1
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	4b44      	ldr	r3, [pc, #272]	; (8005efc <HW_TS_Init+0x198>)
 8005dec:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8005dee:	4b43      	ldr	r3, [pc, #268]	; (8005efc <HW_TS_Init+0x198>)
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	3b01      	subs	r3, #1
 8005df4:	4a40      	ldr	r2, [pc, #256]	; (8005ef8 <HW_TS_Init+0x194>)
 8005df6:	7812      	ldrb	r2, [r2, #0]
 8005df8:	fb02 f303 	mul.w	r3, r2, r3
 8005dfc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005e00:	4a3c      	ldr	r2, [pc, #240]	; (8005ef4 <HW_TS_Init+0x190>)
 8005e02:	7812      	ldrb	r2, [r2, #0]
 8005e04:	40d3      	lsrs	r3, r2
 8005e06:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d904      	bls.n	8005e1c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8005e12:	4b3b      	ldr	r3, [pc, #236]	; (8005f00 <HW_TS_Init+0x19c>)
 8005e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e18:	801a      	strh	r2, [r3, #0]
 8005e1a:	e003      	b.n	8005e24 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	4b37      	ldr	r3, [pc, #220]	; (8005f00 <HW_TS_Init+0x19c>)
 8005e22:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8005e24:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005e28:	f7ff fb9c 	bl	8005564 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8005e2c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005e30:	f7ff fb84 	bl	800553c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8005e34:	79fb      	ldrb	r3, [r7, #7]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d13d      	bne.n	8005eb6 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8005e3a:	4b32      	ldr	r3, [pc, #200]	; (8005f04 <HW_TS_Init+0x1a0>)
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8005e40:	4b31      	ldr	r3, [pc, #196]	; (8005f08 <HW_TS_Init+0x1a4>)
 8005e42:	f04f 32ff 	mov.w	r2, #4294967295
 8005e46:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8005e48:	2300      	movs	r3, #0
 8005e4a:	77fb      	strb	r3, [r7, #31]
 8005e4c:	e00c      	b.n	8005e68 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8005e4e:	7ffa      	ldrb	r2, [r7, #31]
 8005e50:	492e      	ldr	r1, [pc, #184]	; (8005f0c <HW_TS_Init+0x1a8>)
 8005e52:	4613      	mov	r3, r2
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	4413      	add	r3, r2
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	440b      	add	r3, r1
 8005e5c:	330c      	adds	r3, #12
 8005e5e:	2200      	movs	r2, #0
 8005e60:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8005e62:	7ffb      	ldrb	r3, [r7, #31]
 8005e64:	3301      	adds	r3, #1
 8005e66:	77fb      	strb	r3, [r7, #31]
 8005e68:	7ffb      	ldrb	r3, [r7, #31]
 8005e6a:	2b05      	cmp	r3, #5
 8005e6c:	d9ef      	bls.n	8005e4e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8005e6e:	4b28      	ldr	r3, [pc, #160]	; (8005f10 <HW_TS_Init+0x1ac>)
 8005e70:	2206      	movs	r2, #6
 8005e72:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8005e74:	4b1d      	ldr	r3, [pc, #116]	; (8005eec <HW_TS_Init+0x188>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689a      	ldr	r2, [r3, #8]
 8005e7a:	4b1c      	ldr	r3, [pc, #112]	; (8005eec <HW_TS_Init+0x188>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e82:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8005e84:	4b19      	ldr	r3, [pc, #100]	; (8005eec <HW_TS_Init+0x188>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	4b17      	ldr	r3, [pc, #92]	; (8005eec <HW_TS_Init+0x188>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005e94:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8005e96:	4b1f      	ldr	r3, [pc, #124]	; (8005f14 <HW_TS_Init+0x1b0>)
 8005e98:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005e9c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8005e9e:	2003      	movs	r0, #3
 8005ea0:	f001 fdc3 	bl	8007a2a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8005ea4:	4b11      	ldr	r3, [pc, #68]	; (8005eec <HW_TS_Init+0x188>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689a      	ldr	r2, [r3, #8]
 8005eaa:	4b10      	ldr	r3, [pc, #64]	; (8005eec <HW_TS_Init+0x188>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005eb2:	609a      	str	r2, [r3, #8]
 8005eb4:	e009      	b.n	8005eca <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8005eb6:	4b0d      	ldr	r3, [pc, #52]	; (8005eec <HW_TS_Init+0x188>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8005ec4:	2003      	movs	r0, #3
 8005ec6:	f001 fda2 	bl	8007a0e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8005eca:	4b08      	ldr	r3, [pc, #32]	; (8005eec <HW_TS_Init+0x188>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	22ff      	movs	r2, #255	; 0xff
 8005ed0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	2103      	movs	r1, #3
 8005ed6:	2003      	movs	r0, #3
 8005ed8:	f001 fd57 	bl	800798a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8005edc:	2003      	movs	r0, #3
 8005ede:	f001 fd6e 	bl	80079be <HAL_NVIC_EnableIRQ>

  return;
 8005ee2:	bf00      	nop
}
 8005ee4:	3720      	adds	r7, #32
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	200010a8 	.word	0x200010a8
 8005ef0:	40002800 	.word	0x40002800
 8005ef4:	20000665 	.word	0x20000665
 8005ef8:	20000666 	.word	0x20000666
 8005efc:	20000668 	.word	0x20000668
 8005f00:	2000066a 	.word	0x2000066a
 8005f04:	20000664 	.word	0x20000664
 8005f08:	20000660 	.word	0x20000660
 8005f0c:	200005cc 	.word	0x200005cc
 8005f10:	2000065c 	.word	0x2000065c
 8005f14:	58000800 	.word	0x58000800

08005f18 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	4603      	mov	r3, r0
 8005f20:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f22:	f3ef 8310 	mrs	r3, PRIMASK
 8005f26:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f28:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005f2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f2c:	b672      	cpsid	i
}
 8005f2e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8005f30:	2003      	movs	r0, #3
 8005f32:	f001 fd52 	bl	80079da <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8005f36:	4b34      	ldr	r3, [pc, #208]	; (8006008 <HW_TS_Stop+0xf0>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	22ca      	movs	r2, #202	; 0xca
 8005f3c:	625a      	str	r2, [r3, #36]	; 0x24
 8005f3e:	4b32      	ldr	r3, [pc, #200]	; (8006008 <HW_TS_Stop+0xf0>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2253      	movs	r2, #83	; 0x53
 8005f44:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8005f46:	79fa      	ldrb	r2, [r7, #7]
 8005f48:	4930      	ldr	r1, [pc, #192]	; (800600c <HW_TS_Stop+0xf4>)
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	4413      	add	r3, r2
 8005f50:	00db      	lsls	r3, r3, #3
 8005f52:	440b      	add	r3, r1
 8005f54:	330c      	adds	r3, #12
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d142      	bne.n	8005fe4 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8005f5e:	79fb      	ldrb	r3, [r7, #7]
 8005f60:	2100      	movs	r1, #0
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7ff fc80 	bl	8005868 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8005f68:	4b29      	ldr	r3, [pc, #164]	; (8006010 <HW_TS_Stop+0xf8>)
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8005f6e:	7cfb      	ldrb	r3, [r7, #19]
 8005f70:	2b06      	cmp	r3, #6
 8005f72:	d12f      	bne.n	8005fd4 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8005f74:	4b27      	ldr	r3, [pc, #156]	; (8006014 <HW_TS_Stop+0xfc>)
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f80:	d107      	bne.n	8005f92 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8005f82:	bf00      	nop
 8005f84:	4b20      	ldr	r3, [pc, #128]	; (8006008 <HW_TS_Stop+0xf0>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	f003 0304 	and.w	r3, r3, #4
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1f8      	bne.n	8005f84 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8005f92:	4b1d      	ldr	r3, [pc, #116]	; (8006008 <HW_TS_Stop+0xf0>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689a      	ldr	r2, [r3, #8]
 8005f98:	4b1b      	ldr	r3, [pc, #108]	; (8006008 <HW_TS_Stop+0xf0>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fa0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8005fa2:	bf00      	nop
 8005fa4:	4b18      	ldr	r3, [pc, #96]	; (8006008 <HW_TS_Stop+0xf0>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	f003 0304 	and.w	r3, r3, #4
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d0f8      	beq.n	8005fa4 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8005fb2:	4b15      	ldr	r3, [pc, #84]	; (8006008 <HW_TS_Stop+0xf0>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	4b13      	ldr	r3, [pc, #76]	; (8006008 <HW_TS_Stop+0xf0>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005fc2:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8005fc4:	4b14      	ldr	r3, [pc, #80]	; (8006018 <HW_TS_Stop+0x100>)
 8005fc6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005fca:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8005fcc:	2003      	movs	r0, #3
 8005fce:	f001 fd2c 	bl	8007a2a <HAL_NVIC_ClearPendingIRQ>
 8005fd2:	e007      	b.n	8005fe4 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8005fd4:	4b11      	ldr	r3, [pc, #68]	; (800601c <HW_TS_Stop+0x104>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	7cfa      	ldrb	r2, [r7, #19]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d001      	beq.n	8005fe4 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8005fe0:	f7ff fd5e 	bl	8005aa0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8005fe4:	4b08      	ldr	r3, [pc, #32]	; (8006008 <HW_TS_Stop+0xf0>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	22ff      	movs	r2, #255	; 0xff
 8005fea:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8005fec:	2003      	movs	r0, #3
 8005fee:	f001 fce6 	bl	80079be <HAL_NVIC_EnableIRQ>
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	f383 8810 	msr	PRIMASK, r3
}
 8005ffc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8005ffe:	bf00      	nop
}
 8006000:	3718      	adds	r7, #24
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	200010a8 	.word	0x200010a8
 800600c:	200005cc 	.word	0x200005cc
 8006010:	2000065c 	.word	0x2000065c
 8006014:	40002800 	.word	0x40002800
 8006018:	58000800 	.word	0x58000800
 800601c:	2000065d 	.word	0x2000065d

08006020 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	4603      	mov	r3, r0
 8006028:	6039      	str	r1, [r7, #0]
 800602a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800602c:	79fa      	ldrb	r2, [r7, #7]
 800602e:	493b      	ldr	r1, [pc, #236]	; (800611c <HW_TS_Start+0xfc>)
 8006030:	4613      	mov	r3, r2
 8006032:	005b      	lsls	r3, r3, #1
 8006034:	4413      	add	r3, r2
 8006036:	00db      	lsls	r3, r3, #3
 8006038:	440b      	add	r3, r1
 800603a:	330c      	adds	r3, #12
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b02      	cmp	r3, #2
 8006042:	d103      	bne.n	800604c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8006044:	79fb      	ldrb	r3, [r7, #7]
 8006046:	4618      	mov	r0, r3
 8006048:	f7ff ff66 	bl	8005f18 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800604c:	f3ef 8310 	mrs	r3, PRIMASK
 8006050:	60fb      	str	r3, [r7, #12]
  return(result);
 8006052:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006054:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006056:	b672      	cpsid	i
}
 8006058:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800605a:	2003      	movs	r0, #3
 800605c:	f001 fcbd 	bl	80079da <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8006060:	4b2f      	ldr	r3, [pc, #188]	; (8006120 <HW_TS_Start+0x100>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	22ca      	movs	r2, #202	; 0xca
 8006066:	625a      	str	r2, [r3, #36]	; 0x24
 8006068:	4b2d      	ldr	r3, [pc, #180]	; (8006120 <HW_TS_Start+0x100>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2253      	movs	r2, #83	; 0x53
 800606e:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8006070:	79fa      	ldrb	r2, [r7, #7]
 8006072:	492a      	ldr	r1, [pc, #168]	; (800611c <HW_TS_Start+0xfc>)
 8006074:	4613      	mov	r3, r2
 8006076:	005b      	lsls	r3, r3, #1
 8006078:	4413      	add	r3, r2
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	440b      	add	r3, r1
 800607e:	330c      	adds	r3, #12
 8006080:	2202      	movs	r2, #2
 8006082:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8006084:	79fa      	ldrb	r2, [r7, #7]
 8006086:	4925      	ldr	r1, [pc, #148]	; (800611c <HW_TS_Start+0xfc>)
 8006088:	4613      	mov	r3, r2
 800608a:	005b      	lsls	r3, r3, #1
 800608c:	4413      	add	r3, r2
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	440b      	add	r3, r1
 8006092:	3308      	adds	r3, #8
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8006098:	79fa      	ldrb	r2, [r7, #7]
 800609a:	4920      	ldr	r1, [pc, #128]	; (800611c <HW_TS_Start+0xfc>)
 800609c:	4613      	mov	r3, r2
 800609e:	005b      	lsls	r3, r3, #1
 80060a0:	4413      	add	r3, r2
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	440b      	add	r3, r1
 80060a6:	3304      	adds	r3, #4
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80060ac:	79fb      	ldrb	r3, [r7, #7]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7ff fb30 	bl	8005714 <linkTimer>
 80060b4:	4603      	mov	r3, r0
 80060b6:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80060b8:	4b1a      	ldr	r3, [pc, #104]	; (8006124 <HW_TS_Start+0x104>)
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80060be:	4b1a      	ldr	r3, [pc, #104]	; (8006128 <HW_TS_Start+0x108>)
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	7c7a      	ldrb	r2, [r7, #17]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d002      	beq.n	80060d0 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80060ca:	f7ff fce9 	bl	8005aa0 <RescheduleTimerList>
 80060ce:	e013      	b.n	80060f8 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80060d0:	79fa      	ldrb	r2, [r7, #7]
 80060d2:	4912      	ldr	r1, [pc, #72]	; (800611c <HW_TS_Start+0xfc>)
 80060d4:	4613      	mov	r3, r2
 80060d6:	005b      	lsls	r3, r3, #1
 80060d8:	4413      	add	r3, r2
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	440b      	add	r3, r1
 80060de:	3308      	adds	r3, #8
 80060e0:	6819      	ldr	r1, [r3, #0]
 80060e2:	8a7b      	ldrh	r3, [r7, #18]
 80060e4:	79fa      	ldrb	r2, [r7, #7]
 80060e6:	1ac9      	subs	r1, r1, r3
 80060e8:	480c      	ldr	r0, [pc, #48]	; (800611c <HW_TS_Start+0xfc>)
 80060ea:	4613      	mov	r3, r2
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	4413      	add	r3, r2
 80060f0:	00db      	lsls	r3, r3, #3
 80060f2:	4403      	add	r3, r0
 80060f4:	3308      	adds	r3, #8
 80060f6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80060f8:	4b09      	ldr	r3, [pc, #36]	; (8006120 <HW_TS_Start+0x100>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	22ff      	movs	r2, #255	; 0xff
 80060fe:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8006100:	2003      	movs	r0, #3
 8006102:	f001 fc5c 	bl	80079be <HAL_NVIC_EnableIRQ>
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	f383 8810 	msr	PRIMASK, r3
}
 8006110:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8006112:	bf00      	nop
}
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	200005cc 	.word	0x200005cc
 8006120:	200010a8 	.word	0x200010a8
 8006124:	2000065c 	.word	0x2000065c
 8006128:	2000065d 	.word	0x2000065d

0800612c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	460b      	mov	r3, r1
 8006136:	607a      	str	r2, [r7, #4]
 8006138:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4798      	blx	r3

  return;
 800613e:	bf00      	nop
}
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
	...

08006148 <SensorAPI_SPIx_Read1>:
#define pin3 GPIO_PIN_9
#define port4 GPIOA
#define pin4 GPIO_PIN_2

int8_t SensorAPI_SPIx_Read1(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af02      	add	r7, sp, #8
 800614e:	60b9      	str	r1, [r7, #8]
 8006150:	607a      	str	r2, [r7, #4]
 8006152:	603b      	str	r3, [r7, #0]
 8006154:	4603      	mov	r3, r0
 8006156:	73fb      	strb	r3, [r7, #15]
    GTXBuffer[0] = reg_addr | 0x80;
 8006158:	7bfb      	ldrb	r3, [r7, #15]
 800615a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800615e:	b2da      	uxtb	r2, r3
 8006160:	4b15      	ldr	r3, [pc, #84]	; (80061b8 <SensorAPI_SPIx_Read1+0x70>)
 8006162:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(port1, pin1, GPIO_PIN_RESET); // NSS low
 8006164:	2200      	movs	r2, #0
 8006166:	2110      	movs	r1, #16
 8006168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800616c:	f002 f856 	bl	800821c <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(&SPI_HANDLE, GTXBuffer, GRXBuffer, length+1, BUS_TIMEOUT); // timeout 1000msec;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	b29b      	uxth	r3, r3
 8006174:	3301      	adds	r3, #1
 8006176:	b29b      	uxth	r3, r3
 8006178:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800617c:	9200      	str	r2, [sp, #0]
 800617e:	4a0f      	ldr	r2, [pc, #60]	; (80061bc <SensorAPI_SPIx_Read1+0x74>)
 8006180:	490d      	ldr	r1, [pc, #52]	; (80061b8 <SensorAPI_SPIx_Read1+0x70>)
 8006182:	480f      	ldr	r0, [pc, #60]	; (80061c0 <SensorAPI_SPIx_Read1+0x78>)
 8006184:	f004 fc22 	bl	800a9cc <HAL_SPI_TransmitReceive>
    while(SPI_HANDLE.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8006188:	bf00      	nop
 800618a:	4b0d      	ldr	r3, [pc, #52]	; (80061c0 <SensorAPI_SPIx_Read1+0x78>)
 800618c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d0f9      	beq.n	800618a <SensorAPI_SPIx_Read1+0x42>

    HAL_GPIO_WritePin(port1, pin1, GPIO_PIN_SET); // NSS high
 8006196:	2201      	movs	r2, #1
 8006198:	2110      	movs	r1, #16
 800619a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800619e:	f002 f83d 	bl	800821c <HAL_GPIO_WritePin>
    memcpy(reg_data, GRXBuffer+1, length);
 80061a2:	4b08      	ldr	r3, [pc, #32]	; (80061c4 <SensorAPI_SPIx_Read1+0x7c>)
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	4619      	mov	r1, r3
 80061a8:	68b8      	ldr	r0, [r7, #8]
 80061aa:	f00a fdd8 	bl	8010d5e <memcpy>

    return 0;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	2000066c 	.word	0x2000066c
 80061bc:	2000086c 	.word	0x2000086c
 80061c0:	200010cc 	.word	0x200010cc
 80061c4:	2000086d 	.word	0x2000086d

080061c8 <SensorAPI_SPIx_Read2>:

int8_t SensorAPI_SPIx_Read2(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af02      	add	r7, sp, #8
 80061ce:	60b9      	str	r1, [r7, #8]
 80061d0:	607a      	str	r2, [r7, #4]
 80061d2:	603b      	str	r3, [r7, #0]
 80061d4:	4603      	mov	r3, r0
 80061d6:	73fb      	strb	r3, [r7, #15]
    GTXBuffer[0] = reg_addr | 0x80;
 80061d8:	7bfb      	ldrb	r3, [r7, #15]
 80061da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80061de:	b2da      	uxtb	r2, r3
 80061e0:	4b15      	ldr	r3, [pc, #84]	; (8006238 <SensorAPI_SPIx_Read2+0x70>)
 80061e2:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(port2, pin2, GPIO_PIN_RESET); // NSS low
 80061e4:	2200      	movs	r2, #0
 80061e6:	2108      	movs	r1, #8
 80061e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061ec:	f002 f816 	bl	800821c <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(&SPI_HANDLE, GTXBuffer, GRXBuffer, length+1, BUS_TIMEOUT); // timeout 1000msec;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	3301      	adds	r3, #1
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80061fc:	9200      	str	r2, [sp, #0]
 80061fe:	4a0f      	ldr	r2, [pc, #60]	; (800623c <SensorAPI_SPIx_Read2+0x74>)
 8006200:	490d      	ldr	r1, [pc, #52]	; (8006238 <SensorAPI_SPIx_Read2+0x70>)
 8006202:	480f      	ldr	r0, [pc, #60]	; (8006240 <SensorAPI_SPIx_Read2+0x78>)
 8006204:	f004 fbe2 	bl	800a9cc <HAL_SPI_TransmitReceive>
    while(SPI_HANDLE.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8006208:	bf00      	nop
 800620a:	4b0d      	ldr	r3, [pc, #52]	; (8006240 <SensorAPI_SPIx_Read2+0x78>)
 800620c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b02      	cmp	r3, #2
 8006214:	d0f9      	beq.n	800620a <SensorAPI_SPIx_Read2+0x42>

    HAL_GPIO_WritePin(port2, pin2, GPIO_PIN_SET); // NSS high
 8006216:	2201      	movs	r2, #1
 8006218:	2108      	movs	r1, #8
 800621a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800621e:	f001 fffd 	bl	800821c <HAL_GPIO_WritePin>
    memcpy(reg_data, GRXBuffer+1, length);
 8006222:	4b08      	ldr	r3, [pc, #32]	; (8006244 <SensorAPI_SPIx_Read2+0x7c>)
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	4619      	mov	r1, r3
 8006228:	68b8      	ldr	r0, [r7, #8]
 800622a:	f00a fd98 	bl	8010d5e <memcpy>

    return 0;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	2000066c 	.word	0x2000066c
 800623c:	2000086c 	.word	0x2000086c
 8006240:	200010cc 	.word	0x200010cc
 8006244:	2000086d 	.word	0x2000086d

08006248 <SensorAPI_SPIx_Read3>:

int8_t SensorAPI_SPIx_Read3(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af02      	add	r7, sp, #8
 800624e:	60b9      	str	r1, [r7, #8]
 8006250:	607a      	str	r2, [r7, #4]
 8006252:	603b      	str	r3, [r7, #0]
 8006254:	4603      	mov	r3, r0
 8006256:	73fb      	strb	r3, [r7, #15]
    GTXBuffer[0] = reg_addr | 0x80;
 8006258:	7bfb      	ldrb	r3, [r7, #15]
 800625a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800625e:	b2da      	uxtb	r2, r3
 8006260:	4b16      	ldr	r3, [pc, #88]	; (80062bc <SensorAPI_SPIx_Read3+0x74>)
 8006262:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(port3, pin3, GPIO_PIN_RESET); // NSS low
 8006264:	2200      	movs	r2, #0
 8006266:	f44f 7100 	mov.w	r1, #512	; 0x200
 800626a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800626e:	f001 ffd5 	bl	800821c <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(&SPI_HANDLE, GTXBuffer, GRXBuffer, length+1, BUS_TIMEOUT); // timeout 1000msec;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	b29b      	uxth	r3, r3
 8006276:	3301      	adds	r3, #1
 8006278:	b29b      	uxth	r3, r3
 800627a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800627e:	9200      	str	r2, [sp, #0]
 8006280:	4a0f      	ldr	r2, [pc, #60]	; (80062c0 <SensorAPI_SPIx_Read3+0x78>)
 8006282:	490e      	ldr	r1, [pc, #56]	; (80062bc <SensorAPI_SPIx_Read3+0x74>)
 8006284:	480f      	ldr	r0, [pc, #60]	; (80062c4 <SensorAPI_SPIx_Read3+0x7c>)
 8006286:	f004 fba1 	bl	800a9cc <HAL_SPI_TransmitReceive>
    while(SPI_HANDLE.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 800628a:	bf00      	nop
 800628c:	4b0d      	ldr	r3, [pc, #52]	; (80062c4 <SensorAPI_SPIx_Read3+0x7c>)
 800628e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b02      	cmp	r3, #2
 8006296:	d0f9      	beq.n	800628c <SensorAPI_SPIx_Read3+0x44>

    HAL_GPIO_WritePin(port3, pin3, GPIO_PIN_SET); // NSS high
 8006298:	2201      	movs	r2, #1
 800629a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800629e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80062a2:	f001 ffbb 	bl	800821c <HAL_GPIO_WritePin>
    memcpy(reg_data, GRXBuffer+1, length);
 80062a6:	4b08      	ldr	r3, [pc, #32]	; (80062c8 <SensorAPI_SPIx_Read3+0x80>)
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	4619      	mov	r1, r3
 80062ac:	68b8      	ldr	r0, [r7, #8]
 80062ae:	f00a fd56 	bl	8010d5e <memcpy>

    return 0;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	2000066c 	.word	0x2000066c
 80062c0:	2000086c 	.word	0x2000086c
 80062c4:	200010cc 	.word	0x200010cc
 80062c8:	2000086d 	.word	0x2000086d

080062cc <SensorAPI_SPIx_Read4>:

int8_t SensorAPI_SPIx_Read4(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af02      	add	r7, sp, #8
 80062d2:	60b9      	str	r1, [r7, #8]
 80062d4:	607a      	str	r2, [r7, #4]
 80062d6:	603b      	str	r3, [r7, #0]
 80062d8:	4603      	mov	r3, r0
 80062da:	73fb      	strb	r3, [r7, #15]
    GTXBuffer[0] = reg_addr | 0x80;
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
 80062de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	4b15      	ldr	r3, [pc, #84]	; (800633c <SensorAPI_SPIx_Read4+0x70>)
 80062e6:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(port4, pin4, GPIO_PIN_RESET); // NSS low
 80062e8:	2200      	movs	r2, #0
 80062ea:	2104      	movs	r1, #4
 80062ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80062f0:	f001 ff94 	bl	800821c <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(&SPI_HANDLE, GTXBuffer, GRXBuffer, length+1, BUS_TIMEOUT); // timeout 1000msec;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	3301      	adds	r3, #1
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006300:	9200      	str	r2, [sp, #0]
 8006302:	4a0f      	ldr	r2, [pc, #60]	; (8006340 <SensorAPI_SPIx_Read4+0x74>)
 8006304:	490d      	ldr	r1, [pc, #52]	; (800633c <SensorAPI_SPIx_Read4+0x70>)
 8006306:	480f      	ldr	r0, [pc, #60]	; (8006344 <SensorAPI_SPIx_Read4+0x78>)
 8006308:	f004 fb60 	bl	800a9cc <HAL_SPI_TransmitReceive>
    while(SPI_HANDLE.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 800630c:	bf00      	nop
 800630e:	4b0d      	ldr	r3, [pc, #52]	; (8006344 <SensorAPI_SPIx_Read4+0x78>)
 8006310:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b02      	cmp	r3, #2
 8006318:	d0f9      	beq.n	800630e <SensorAPI_SPIx_Read4+0x42>

    HAL_GPIO_WritePin(port4, pin4, GPIO_PIN_SET); // NSS high
 800631a:	2201      	movs	r2, #1
 800631c:	2104      	movs	r1, #4
 800631e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006322:	f001 ff7b 	bl	800821c <HAL_GPIO_WritePin>
    memcpy(reg_data, GRXBuffer+1, length);
 8006326:	4b08      	ldr	r3, [pc, #32]	; (8006348 <SensorAPI_SPIx_Read4+0x7c>)
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	4619      	mov	r1, r3
 800632c:	68b8      	ldr	r0, [r7, #8]
 800632e:	f00a fd16 	bl	8010d5e <memcpy>

    return 0;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	2000066c 	.word	0x2000066c
 8006340:	2000086c 	.word	0x2000086c
 8006344:	200010cc 	.word	0x200010cc
 8006348:	2000086d 	.word	0x2000086d

0800634c <SensorAPI_SPIx_Write1>:
//    return 0;
//}


int8_t SensorAPI_SPIx_Write1(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	60b9      	str	r1, [r7, #8]
 8006354:	607a      	str	r2, [r7, #4]
 8006356:	603b      	str	r3, [r7, #0]
 8006358:	4603      	mov	r3, r0
 800635a:	73fb      	strb	r3, [r7, #15]
    GTXBuffer[0] = reg_addr & 0x7F;
 800635c:	7bfb      	ldrb	r3, [r7, #15]
 800635e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006362:	b2da      	uxtb	r2, r3
 8006364:	4b14      	ldr	r3, [pc, #80]	; (80063b8 <SensorAPI_SPIx_Write1+0x6c>)
 8006366:	701a      	strb	r2, [r3, #0]
    memcpy(&GTXBuffer[1], reg_data, length);
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	68b9      	ldr	r1, [r7, #8]
 800636c:	4813      	ldr	r0, [pc, #76]	; (80063bc <SensorAPI_SPIx_Write1+0x70>)
 800636e:	f00a fcf6 	bl	8010d5e <memcpy>

    HAL_GPIO_WritePin(port1, pin1, GPIO_PIN_RESET); // NSS low
 8006372:	2200      	movs	r2, #0
 8006374:	2110      	movs	r1, #16
 8006376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800637a:	f001 ff4f 	bl	800821c <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&SPI_HANDLE, GTXBuffer, length+1, BUS_TIMEOUT); // send register address + write data
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	b29b      	uxth	r3, r3
 8006382:	3301      	adds	r3, #1
 8006384:	b29a      	uxth	r2, r3
 8006386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800638a:	490b      	ldr	r1, [pc, #44]	; (80063b8 <SensorAPI_SPIx_Write1+0x6c>)
 800638c:	480c      	ldr	r0, [pc, #48]	; (80063c0 <SensorAPI_SPIx_Write1+0x74>)
 800638e:	f004 f9a8 	bl	800a6e2 <HAL_SPI_Transmit>
    while(SPI_HANDLE.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8006392:	bf00      	nop
 8006394:	4b0a      	ldr	r3, [pc, #40]	; (80063c0 <SensorAPI_SPIx_Write1+0x74>)
 8006396:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d0f9      	beq.n	8006394 <SensorAPI_SPIx_Write1+0x48>

    HAL_GPIO_WritePin(port1, pin1, GPIO_PIN_SET); // NSS high
 80063a0:	2201      	movs	r2, #1
 80063a2:	2110      	movs	r1, #16
 80063a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063a8:	f001 ff38 	bl	800821c <HAL_GPIO_WritePin>

    return 0;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	2000066c 	.word	0x2000066c
 80063bc:	2000066d 	.word	0x2000066d
 80063c0:	200010cc 	.word	0x200010cc

080063c4 <SensorAPI_SPIx_Write2>:

int8_t SensorAPI_SPIx_Write2(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60b9      	str	r1, [r7, #8]
 80063cc:	607a      	str	r2, [r7, #4]
 80063ce:	603b      	str	r3, [r7, #0]
 80063d0:	4603      	mov	r3, r0
 80063d2:	73fb      	strb	r3, [r7, #15]
    GTXBuffer[0] = reg_addr & 0x7F;
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
 80063d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	4b14      	ldr	r3, [pc, #80]	; (8006430 <SensorAPI_SPIx_Write2+0x6c>)
 80063de:	701a      	strb	r2, [r3, #0]
    memcpy(&GTXBuffer[1], reg_data, length);
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	68b9      	ldr	r1, [r7, #8]
 80063e4:	4813      	ldr	r0, [pc, #76]	; (8006434 <SensorAPI_SPIx_Write2+0x70>)
 80063e6:	f00a fcba 	bl	8010d5e <memcpy>

    HAL_GPIO_WritePin(port2, pin2, GPIO_PIN_RESET); // NSS low
 80063ea:	2200      	movs	r2, #0
 80063ec:	2108      	movs	r1, #8
 80063ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063f2:	f001 ff13 	bl	800821c <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&SPI_HANDLE, GTXBuffer, length+1, BUS_TIMEOUT); // send register address + write data
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	3301      	adds	r3, #1
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006402:	490b      	ldr	r1, [pc, #44]	; (8006430 <SensorAPI_SPIx_Write2+0x6c>)
 8006404:	480c      	ldr	r0, [pc, #48]	; (8006438 <SensorAPI_SPIx_Write2+0x74>)
 8006406:	f004 f96c 	bl	800a6e2 <HAL_SPI_Transmit>
    while(SPI_HANDLE.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 800640a:	bf00      	nop
 800640c:	4b0a      	ldr	r3, [pc, #40]	; (8006438 <SensorAPI_SPIx_Write2+0x74>)
 800640e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d0f9      	beq.n	800640c <SensorAPI_SPIx_Write2+0x48>

    HAL_GPIO_WritePin(port2, pin2, GPIO_PIN_SET); // NSS high
 8006418:	2201      	movs	r2, #1
 800641a:	2108      	movs	r1, #8
 800641c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006420:	f001 fefc 	bl	800821c <HAL_GPIO_WritePin>

    return 0;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	2000066c 	.word	0x2000066c
 8006434:	2000066d 	.word	0x2000066d
 8006438:	200010cc 	.word	0x200010cc

0800643c <SensorAPI_SPIx_Write3>:

int8_t SensorAPI_SPIx_Write3(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	60b9      	str	r1, [r7, #8]
 8006444:	607a      	str	r2, [r7, #4]
 8006446:	603b      	str	r3, [r7, #0]
 8006448:	4603      	mov	r3, r0
 800644a:	73fb      	strb	r3, [r7, #15]
    GTXBuffer[0] = reg_addr & 0x7F;
 800644c:	7bfb      	ldrb	r3, [r7, #15]
 800644e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006452:	b2da      	uxtb	r2, r3
 8006454:	4b15      	ldr	r3, [pc, #84]	; (80064ac <SensorAPI_SPIx_Write3+0x70>)
 8006456:	701a      	strb	r2, [r3, #0]
    memcpy(&GTXBuffer[1], reg_data, length);
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	68b9      	ldr	r1, [r7, #8]
 800645c:	4814      	ldr	r0, [pc, #80]	; (80064b0 <SensorAPI_SPIx_Write3+0x74>)
 800645e:	f00a fc7e 	bl	8010d5e <memcpy>

    HAL_GPIO_WritePin(port3, pin3, GPIO_PIN_RESET); // NSS low
 8006462:	2200      	movs	r2, #0
 8006464:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800646c:	f001 fed6 	bl	800821c <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&SPI_HANDLE, GTXBuffer, length+1, BUS_TIMEOUT); // send register address + write data
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	b29b      	uxth	r3, r3
 8006474:	3301      	adds	r3, #1
 8006476:	b29a      	uxth	r2, r3
 8006478:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800647c:	490b      	ldr	r1, [pc, #44]	; (80064ac <SensorAPI_SPIx_Write3+0x70>)
 800647e:	480d      	ldr	r0, [pc, #52]	; (80064b4 <SensorAPI_SPIx_Write3+0x78>)
 8006480:	f004 f92f 	bl	800a6e2 <HAL_SPI_Transmit>
    while(SPI_HANDLE.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8006484:	bf00      	nop
 8006486:	4b0b      	ldr	r3, [pc, #44]	; (80064b4 <SensorAPI_SPIx_Write3+0x78>)
 8006488:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b02      	cmp	r3, #2
 8006490:	d0f9      	beq.n	8006486 <SensorAPI_SPIx_Write3+0x4a>

    HAL_GPIO_WritePin(port3, pin3, GPIO_PIN_SET); // NSS high
 8006492:	2201      	movs	r2, #1
 8006494:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006498:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800649c:	f001 febe 	bl	800821c <HAL_GPIO_WritePin>

    return 0;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	2000066c 	.word	0x2000066c
 80064b0:	2000066d 	.word	0x2000066d
 80064b4:	200010cc 	.word	0x200010cc

080064b8 <SensorAPI_SPIx_Write4>:

int8_t SensorAPI_SPIx_Write4(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60b9      	str	r1, [r7, #8]
 80064c0:	607a      	str	r2, [r7, #4]
 80064c2:	603b      	str	r3, [r7, #0]
 80064c4:	4603      	mov	r3, r0
 80064c6:	73fb      	strb	r3, [r7, #15]
    GTXBuffer[0] = reg_addr & 0x7F;
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
 80064ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	4b14      	ldr	r3, [pc, #80]	; (8006524 <SensorAPI_SPIx_Write4+0x6c>)
 80064d2:	701a      	strb	r2, [r3, #0]
    memcpy(&GTXBuffer[1], reg_data, length);
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	68b9      	ldr	r1, [r7, #8]
 80064d8:	4813      	ldr	r0, [pc, #76]	; (8006528 <SensorAPI_SPIx_Write4+0x70>)
 80064da:	f00a fc40 	bl	8010d5e <memcpy>

    HAL_GPIO_WritePin(port4, pin4, GPIO_PIN_RESET); // NSS low
 80064de:	2200      	movs	r2, #0
 80064e0:	2104      	movs	r1, #4
 80064e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80064e6:	f001 fe99 	bl	800821c <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&SPI_HANDLE, GTXBuffer, length+1, BUS_TIMEOUT); // send register address + write data
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	3301      	adds	r3, #1
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064f6:	490b      	ldr	r1, [pc, #44]	; (8006524 <SensorAPI_SPIx_Write4+0x6c>)
 80064f8:	480c      	ldr	r0, [pc, #48]	; (800652c <SensorAPI_SPIx_Write4+0x74>)
 80064fa:	f004 f8f2 	bl	800a6e2 <HAL_SPI_Transmit>
    while(SPI_HANDLE.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 80064fe:	bf00      	nop
 8006500:	4b0a      	ldr	r3, [pc, #40]	; (800652c <SensorAPI_SPIx_Write4+0x74>)
 8006502:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006506:	b2db      	uxtb	r3, r3
 8006508:	2b02      	cmp	r3, #2
 800650a:	d0f9      	beq.n	8006500 <SensorAPI_SPIx_Write4+0x48>

    HAL_GPIO_WritePin(port4, pin4, GPIO_PIN_SET); // NSS high
 800650c:	2201      	movs	r2, #1
 800650e:	2104      	movs	r1, #4
 8006510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006514:	f001 fe82 	bl	800821c <HAL_GPIO_WritePin>

    return 0;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	2000066c 	.word	0x2000066c
 8006528:	2000066d 	.word	0x2000066d
 800652c:	200010cc 	.word	0x200010cc

08006530 <LL_RCC_LSE_SetDriveCapability>:
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8006538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800653c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006540:	f023 0218 	bic.w	r2, r3, #24
 8006544:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4313      	orrs	r3, r2
 800654c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8006564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006568:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800656a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4313      	orrs	r3, r2
 8006572:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8006574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006578:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4013      	ands	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006580:	68fb      	ldr	r3, [r7, #12]
}
 8006582:	bf00      	nop
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800658e:	b480      	push	{r7}
 8006590:	b085      	sub	sp, #20
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800659a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800659c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80065a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4013      	ands	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80065b2:	68fb      	ldr	r3, [r7, #12]
}
 80065b4:	bf00      	nop
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80065c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80065c4:	b0a0      	sub	sp, #128	; 0x80
 80065c6:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80065c8:	f001 f812 	bl	80075f0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80065cc:	f7fa fd66 	bl	800109c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80065d0:	f000 f9f8 	bl	80069c4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80065d4:	f000 fa76 	bl	8006ac4 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80065d8:	f000 fa94 	bl	8006b04 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80065dc:	f000 fbae 	bl	8006d3c <MX_GPIO_Init>
  MX_DMA_Init();
 80065e0:	f000 fb92 	bl	8006d08 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80065e4:	f000 fb1c 	bl	8006c20 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80065e8:	f000 fb66 	bl	8006cb8 <MX_USB_PCD_Init>
  MX_SPI1_Init();
 80065ec:	f000 fada 	bl	8006ba4 <MX_SPI1_Init>
  MX_RTC_Init();
 80065f0:	f000 faa4 	bl	8006b3c <MX_RTC_Init>
  MX_RF_Init();
 80065f4:	f000 fa9a 	bl	8006b2c <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80065f8:	f7fa fd5e 	bl	80010b8 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	int8_t rslt = BMI3_OK;
 80065fc:	2300      	movs	r3, #0
 80065fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t flag;

/* Implementation of the sensor read/write function cannot really be changed so here we go*/
	dev.read = (bmi3_read_fptr_t)SensorAPI_SPIx_Read1;
 8006602:	4bb7      	ldr	r3, [pc, #732]	; (80068e0 <main+0x320>)
 8006604:	4ab7      	ldr	r2, [pc, #732]	; (80068e4 <main+0x324>)
 8006606:	611a      	str	r2, [r3, #16]
	dev.write = (bmi3_write_fptr_t)SensorAPI_SPIx_Write1;
 8006608:	4bb5      	ldr	r3, [pc, #724]	; (80068e0 <main+0x320>)
 800660a:	4ab7      	ldr	r2, [pc, #732]	; (80068e8 <main+0x328>)
 800660c:	615a      	str	r2, [r3, #20]
	Init_BMI323(&dev);
 800660e:	48b4      	ldr	r0, [pc, #720]	; (80068e0 <main+0x320>)
 8006610:	f7fe fe6c 	bl	80052ec <Init_BMI323>
	HAL_Delay(10);
 8006614:	200a      	movs	r0, #10
 8006616:	f7fa fe7c 	bl	8001312 <HAL_Delay>

	dev2.read = (bmi3_read_fptr_t)SensorAPI_SPIx_Read2;
 800661a:	4bb4      	ldr	r3, [pc, #720]	; (80068ec <main+0x32c>)
 800661c:	4ab4      	ldr	r2, [pc, #720]	; (80068f0 <main+0x330>)
 800661e:	611a      	str	r2, [r3, #16]
	dev2.write = (bmi3_write_fptr_t)SensorAPI_SPIx_Write2;
 8006620:	4bb2      	ldr	r3, [pc, #712]	; (80068ec <main+0x32c>)
 8006622:	4ab4      	ldr	r2, [pc, #720]	; (80068f4 <main+0x334>)
 8006624:	615a      	str	r2, [r3, #20]
	Init_BMI323(&dev2);
 8006626:	48b1      	ldr	r0, [pc, #708]	; (80068ec <main+0x32c>)
 8006628:	f7fe fe60 	bl	80052ec <Init_BMI323>
	HAL_Delay(10);
 800662c:	200a      	movs	r0, #10
 800662e:	f7fa fe70 	bl	8001312 <HAL_Delay>

	dev3.read = (bmi3_read_fptr_t)SensorAPI_SPIx_Read3;
 8006632:	4bb1      	ldr	r3, [pc, #708]	; (80068f8 <main+0x338>)
 8006634:	4ab1      	ldr	r2, [pc, #708]	; (80068fc <main+0x33c>)
 8006636:	611a      	str	r2, [r3, #16]
	dev3.write = (bmi3_write_fptr_t)SensorAPI_SPIx_Write3;
 8006638:	4baf      	ldr	r3, [pc, #700]	; (80068f8 <main+0x338>)
 800663a:	4ab1      	ldr	r2, [pc, #708]	; (8006900 <main+0x340>)
 800663c:	615a      	str	r2, [r3, #20]
	Init_BMI323(&dev3);
 800663e:	48ae      	ldr	r0, [pc, #696]	; (80068f8 <main+0x338>)
 8006640:	f7fe fe54 	bl	80052ec <Init_BMI323>
	HAL_Delay(10);
 8006644:	200a      	movs	r0, #10
 8006646:	f7fa fe64 	bl	8001312 <HAL_Delay>

	dev4.read = (bmi3_read_fptr_t)SensorAPI_SPIx_Read4;
 800664a:	4bae      	ldr	r3, [pc, #696]	; (8006904 <main+0x344>)
 800664c:	4aae      	ldr	r2, [pc, #696]	; (8006908 <main+0x348>)
 800664e:	611a      	str	r2, [r3, #16]
	dev4.write = (bmi3_write_fptr_t)SensorAPI_SPIx_Write4;
 8006650:	4bac      	ldr	r3, [pc, #688]	; (8006904 <main+0x344>)
 8006652:	4aae      	ldr	r2, [pc, #696]	; (800690c <main+0x34c>)
 8006654:	615a      	str	r2, [r3, #20]
	Init_BMI323(&dev4);
 8006656:	48ab      	ldr	r0, [pc, #684]	; (8006904 <main+0x344>)
 8006658:	f7fe fe48 	bl	80052ec <Init_BMI323>
	HAL_Delay(10);
 800665c:	200a      	movs	r0, #10
 800665e:	f7fa fe58 	bl	8001312 <HAL_Delay>
  {
    /* USER CODE END WHILE */
//    MX_APPE_Process();

    /* USER CODE BEGIN 3 */
    float data1[] = {0,0,0,0,0,0};
 8006662:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006666:	2200      	movs	r2, #0
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	605a      	str	r2, [r3, #4]
 800666c:	609a      	str	r2, [r3, #8]
 800666e:	60da      	str	r2, [r3, #12]
 8006670:	611a      	str	r2, [r3, #16]
 8006672:	615a      	str	r2, [r3, #20]
    float data2[] = {0,0,0,0,0,0};
 8006674:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006678:	2200      	movs	r2, #0
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	605a      	str	r2, [r3, #4]
 800667e:	609a      	str	r2, [r3, #8]
 8006680:	60da      	str	r2, [r3, #12]
 8006682:	611a      	str	r2, [r3, #16]
 8006684:	615a      	str	r2, [r3, #20]
    float data3[] = {0,0,0,0,0,0};
 8006686:	f107 031c 	add.w	r3, r7, #28
 800668a:	2200      	movs	r2, #0
 800668c:	601a      	str	r2, [r3, #0]
 800668e:	605a      	str	r2, [r3, #4]
 8006690:	609a      	str	r2, [r3, #8]
 8006692:	60da      	str	r2, [r3, #12]
 8006694:	611a      	str	r2, [r3, #16]
 8006696:	615a      	str	r2, [r3, #20]
    float data4[] = {0,0,0,0,0,0};
 8006698:	1d3b      	adds	r3, r7, #4
 800669a:	2200      	movs	r2, #0
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	605a      	str	r2, [r3, #4]
 80066a0:	609a      	str	r2, [r3, #8]
 80066a2:	60da      	str	r2, [r3, #12]
 80066a4:	611a      	str	r2, [r3, #16]
 80066a6:	615a      	str	r2, [r3, #20]

    bmi3_get_regs(BMI3_REG_STATUS, &flag, 1, &dev);
 80066a8:	f107 0166 	add.w	r1, r7, #102	; 0x66
 80066ac:	4b8c      	ldr	r3, [pc, #560]	; (80068e0 <main+0x320>)
 80066ae:	2201      	movs	r2, #1
 80066b0:	2002      	movs	r0, #2
 80066b2:	f7fa fedb 	bl	800146c <bmi3_get_regs>
	if((flag & 0x40) == 0) continue;
 80066b6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80066ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 8171 	beq.w	80069a6 <main+0x3e6>
	read_sensor(dev, data1);
 80066c4:	4c86      	ldr	r4, [pc, #536]	; (80068e0 <main+0x320>)
 80066c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80066ca:	9304      	str	r3, [sp, #16]
 80066cc:	466d      	mov	r5, sp
 80066ce:	f104 0310 	add.w	r3, r4, #16
 80066d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80066d4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80066d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80066dc:	f7fe fe52 	bl	8005384 <read_sensor>

	bmi3_get_regs(BMI3_REG_STATUS, &flag, 1, &dev2);
 80066e0:	f107 0166 	add.w	r1, r7, #102	; 0x66
 80066e4:	4b81      	ldr	r3, [pc, #516]	; (80068ec <main+0x32c>)
 80066e6:	2201      	movs	r2, #1
 80066e8:	2002      	movs	r0, #2
 80066ea:	f7fa febf 	bl	800146c <bmi3_get_regs>
	if((flag & 0x40) == 0) continue;
 80066ee:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80066f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f000 8157 	beq.w	80069aa <main+0x3ea>
	read_sensor(dev2, data2);
 80066fc:	4c7b      	ldr	r4, [pc, #492]	; (80068ec <main+0x32c>)
 80066fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006702:	9304      	str	r3, [sp, #16]
 8006704:	466d      	mov	r5, sp
 8006706:	f104 0310 	add.w	r3, r4, #16
 800670a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800670c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006710:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006714:	f7fe fe36 	bl	8005384 <read_sensor>

	bmi3_get_regs(BMI3_REG_STATUS, &flag, 1, &dev3);
 8006718:	f107 0166 	add.w	r1, r7, #102	; 0x66
 800671c:	4b76      	ldr	r3, [pc, #472]	; (80068f8 <main+0x338>)
 800671e:	2201      	movs	r2, #1
 8006720:	2002      	movs	r0, #2
 8006722:	f7fa fea3 	bl	800146c <bmi3_get_regs>
	if((flag & 0x40) == 0) continue;
 8006726:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800672a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 813d 	beq.w	80069ae <main+0x3ee>
	read_sensor(dev3, data3);
 8006734:	4c70      	ldr	r4, [pc, #448]	; (80068f8 <main+0x338>)
 8006736:	f107 031c 	add.w	r3, r7, #28
 800673a:	9304      	str	r3, [sp, #16]
 800673c:	466d      	mov	r5, sp
 800673e:	f104 0310 	add.w	r3, r4, #16
 8006742:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006744:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006748:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800674c:	f7fe fe1a 	bl	8005384 <read_sensor>

	bmi3_get_regs(BMI3_REG_STATUS, &flag, 1, &dev4);
 8006750:	f107 0166 	add.w	r1, r7, #102	; 0x66
 8006754:	4b6b      	ldr	r3, [pc, #428]	; (8006904 <main+0x344>)
 8006756:	2201      	movs	r2, #1
 8006758:	2002      	movs	r0, #2
 800675a:	f7fa fe87 	bl	800146c <bmi3_get_regs>
	if((flag & 0x40) == 0) continue;
 800675e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 8123 	beq.w	80069b2 <main+0x3f2>
	read_sensor(dev4, data4);
 800676c:	4c65      	ldr	r4, [pc, #404]	; (8006904 <main+0x344>)
 800676e:	1d3b      	adds	r3, r7, #4
 8006770:	9304      	str	r3, [sp, #16]
 8006772:	466d      	mov	r5, sp
 8006774:	f104 0310 	add.w	r3, r4, #16
 8006778:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800677a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800677e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006782:	f7fe fdff 	bl	8005384 <read_sensor>
	HAL_Delay(1);
 8006786:	2001      	movs	r0, #1
 8006788:	f7fa fdc3 	bl	8001312 <HAL_Delay>
//
//	bmi3_get_regs(BMI3_REG_STATUS, &flag, 1, &dev);
//	if((flag & 0x40) == 0) continue;
//	read_sensor(dev, data);

	PDEBUG("1:\n");
 800678c:	4860      	ldr	r0, [pc, #384]	; (8006910 <main+0x350>)
 800678e:	f7fe fc47 	bl	8005020 <PDEBUG>
	PDEBUG("GYRO: X axis: %4.2f, Y axis: %4.2f, Z axis: %4.2f\r\n", data1[0], data1[1], data1[2]);
 8006792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006794:	4618      	mov	r0, r3
 8006796:	f7f9 feaf 	bl	80004f8 <__aeabi_f2d>
 800679a:	4680      	mov	r8, r0
 800679c:	4689      	mov	r9, r1
 800679e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7f9 fea9 	bl	80004f8 <__aeabi_f2d>
 80067a6:	4604      	mov	r4, r0
 80067a8:	460d      	mov	r5, r1
 80067aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7f9 fea3 	bl	80004f8 <__aeabi_f2d>
 80067b2:	4602      	mov	r2, r0
 80067b4:	460b      	mov	r3, r1
 80067b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067ba:	e9cd 4500 	strd	r4, r5, [sp]
 80067be:	4642      	mov	r2, r8
 80067c0:	464b      	mov	r3, r9
 80067c2:	4854      	ldr	r0, [pc, #336]	; (8006914 <main+0x354>)
 80067c4:	f7fe fc2c 	bl	8005020 <PDEBUG>
	PDEBUG("ACC: X axis: %4.2f, Y axis: %4.2f, Z axis: %4.2f\r\n", data1[3], data1[4], data1[5]);
 80067c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7f9 fe94 	bl	80004f8 <__aeabi_f2d>
 80067d0:	4680      	mov	r8, r0
 80067d2:	4689      	mov	r9, r1
 80067d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7f9 fe8e 	bl	80004f8 <__aeabi_f2d>
 80067dc:	4604      	mov	r4, r0
 80067de:	460d      	mov	r5, r1
 80067e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7f9 fe88 	bl	80004f8 <__aeabi_f2d>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067f0:	e9cd 4500 	strd	r4, r5, [sp]
 80067f4:	4642      	mov	r2, r8
 80067f6:	464b      	mov	r3, r9
 80067f8:	4847      	ldr	r0, [pc, #284]	; (8006918 <main+0x358>)
 80067fa:	f7fe fc11 	bl	8005020 <PDEBUG>

	PDEBUG("2:\n");
 80067fe:	4847      	ldr	r0, [pc, #284]	; (800691c <main+0x35c>)
 8006800:	f7fe fc0e 	bl	8005020 <PDEBUG>
	PDEBUG("GYRO: X axis: %4.2f, Y axis: %4.2f, Z axis: %4.2f\r\n", data2[0], data2[1], data2[2]);
 8006804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006806:	4618      	mov	r0, r3
 8006808:	f7f9 fe76 	bl	80004f8 <__aeabi_f2d>
 800680c:	4680      	mov	r8, r0
 800680e:	4689      	mov	r9, r1
 8006810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006812:	4618      	mov	r0, r3
 8006814:	f7f9 fe70 	bl	80004f8 <__aeabi_f2d>
 8006818:	4604      	mov	r4, r0
 800681a:	460d      	mov	r5, r1
 800681c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800681e:	4618      	mov	r0, r3
 8006820:	f7f9 fe6a 	bl	80004f8 <__aeabi_f2d>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800682c:	e9cd 4500 	strd	r4, r5, [sp]
 8006830:	4642      	mov	r2, r8
 8006832:	464b      	mov	r3, r9
 8006834:	4837      	ldr	r0, [pc, #220]	; (8006914 <main+0x354>)
 8006836:	f7fe fbf3 	bl	8005020 <PDEBUG>
	PDEBUG("ACC: X axis: %4.2f, Y axis: %4.2f, Z axis: %4.2f\r\n", data2[3], data2[4], data2[5]);
 800683a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800683c:	4618      	mov	r0, r3
 800683e:	f7f9 fe5b 	bl	80004f8 <__aeabi_f2d>
 8006842:	4680      	mov	r8, r0
 8006844:	4689      	mov	r9, r1
 8006846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006848:	4618      	mov	r0, r3
 800684a:	f7f9 fe55 	bl	80004f8 <__aeabi_f2d>
 800684e:	4604      	mov	r4, r0
 8006850:	460d      	mov	r5, r1
 8006852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006854:	4618      	mov	r0, r3
 8006856:	f7f9 fe4f 	bl	80004f8 <__aeabi_f2d>
 800685a:	4602      	mov	r2, r0
 800685c:	460b      	mov	r3, r1
 800685e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006862:	e9cd 4500 	strd	r4, r5, [sp]
 8006866:	4642      	mov	r2, r8
 8006868:	464b      	mov	r3, r9
 800686a:	482b      	ldr	r0, [pc, #172]	; (8006918 <main+0x358>)
 800686c:	f7fe fbd8 	bl	8005020 <PDEBUG>

	PDEBUG("3:\n");
 8006870:	482b      	ldr	r0, [pc, #172]	; (8006920 <main+0x360>)
 8006872:	f7fe fbd5 	bl	8005020 <PDEBUG>
	PDEBUG("GYRO: X axis: %4.2f, Y axis: %4.2f, Z axis: %4.2f\r\n", data3[0], data3[1], data3[2]);
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	4618      	mov	r0, r3
 800687a:	f7f9 fe3d 	bl	80004f8 <__aeabi_f2d>
 800687e:	4680      	mov	r8, r0
 8006880:	4689      	mov	r9, r1
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	4618      	mov	r0, r3
 8006886:	f7f9 fe37 	bl	80004f8 <__aeabi_f2d>
 800688a:	4604      	mov	r4, r0
 800688c:	460d      	mov	r5, r1
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	4618      	mov	r0, r3
 8006892:	f7f9 fe31 	bl	80004f8 <__aeabi_f2d>
 8006896:	4602      	mov	r2, r0
 8006898:	460b      	mov	r3, r1
 800689a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800689e:	e9cd 4500 	strd	r4, r5, [sp]
 80068a2:	4642      	mov	r2, r8
 80068a4:	464b      	mov	r3, r9
 80068a6:	481b      	ldr	r0, [pc, #108]	; (8006914 <main+0x354>)
 80068a8:	f7fe fbba 	bl	8005020 <PDEBUG>
	PDEBUG("ACC: X axis: %4.2f, Y axis: %4.2f, Z axis: %4.2f\r\n", data3[3], data3[4], data3[5]);
 80068ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7f9 fe22 	bl	80004f8 <__aeabi_f2d>
 80068b4:	4680      	mov	r8, r0
 80068b6:	4689      	mov	r9, r1
 80068b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7f9 fe1c 	bl	80004f8 <__aeabi_f2d>
 80068c0:	4604      	mov	r4, r0
 80068c2:	460d      	mov	r5, r1
 80068c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7f9 fe16 	bl	80004f8 <__aeabi_f2d>
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80068d4:	e9cd 4500 	strd	r4, r5, [sp]
 80068d8:	4642      	mov	r2, r8
 80068da:	464b      	mov	r3, r9
 80068dc:	e022      	b.n	8006924 <main+0x364>
 80068de:	bf00      	nop
 80068e0:	20001560 	.word	0x20001560
 80068e4:	08006149 	.word	0x08006149
 80068e8:	0800634d 	.word	0x0800634d
 80068ec:	20001580 	.word	0x20001580
 80068f0:	080061c9 	.word	0x080061c9
 80068f4:	080063c5 	.word	0x080063c5
 80068f8:	200015a0 	.word	0x200015a0
 80068fc:	08006249 	.word	0x08006249
 8006900:	0800643d 	.word	0x0800643d
 8006904:	200015c0 	.word	0x200015c0
 8006908:	080062cd 	.word	0x080062cd
 800690c:	080064b9 	.word	0x080064b9
 8006910:	0801464c 	.word	0x0801464c
 8006914:	08014650 	.word	0x08014650
 8006918:	08014684 	.word	0x08014684
 800691c:	080146b8 	.word	0x080146b8
 8006920:	080146bc 	.word	0x080146bc
 8006924:	4824      	ldr	r0, [pc, #144]	; (80069b8 <main+0x3f8>)
 8006926:	f7fe fb7b 	bl	8005020 <PDEBUG>

	PDEBUG("4:\n");
 800692a:	4824      	ldr	r0, [pc, #144]	; (80069bc <main+0x3fc>)
 800692c:	f7fe fb78 	bl	8005020 <PDEBUG>
	PDEBUG("GYRO: X axis: %4.2f, Y axis: %4.2f, Z axis: %4.2f\r\n", data4[0], data4[1], data4[2]);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4618      	mov	r0, r3
 8006934:	f7f9 fde0 	bl	80004f8 <__aeabi_f2d>
 8006938:	4680      	mov	r8, r0
 800693a:	4689      	mov	r9, r1
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	4618      	mov	r0, r3
 8006940:	f7f9 fdda 	bl	80004f8 <__aeabi_f2d>
 8006944:	4604      	mov	r4, r0
 8006946:	460d      	mov	r5, r1
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4618      	mov	r0, r3
 800694c:	f7f9 fdd4 	bl	80004f8 <__aeabi_f2d>
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006958:	e9cd 4500 	strd	r4, r5, [sp]
 800695c:	4642      	mov	r2, r8
 800695e:	464b      	mov	r3, r9
 8006960:	4817      	ldr	r0, [pc, #92]	; (80069c0 <main+0x400>)
 8006962:	f7fe fb5d 	bl	8005020 <PDEBUG>
	PDEBUG("ACC: X axis: %4.2f, Y axis: %4.2f, Z axis: %4.2f\r\n", data4[3], data4[4], data4[5]);
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	4618      	mov	r0, r3
 800696a:	f7f9 fdc5 	bl	80004f8 <__aeabi_f2d>
 800696e:	4680      	mov	r8, r0
 8006970:	4689      	mov	r9, r1
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	4618      	mov	r0, r3
 8006976:	f7f9 fdbf 	bl	80004f8 <__aeabi_f2d>
 800697a:	4604      	mov	r4, r0
 800697c:	460d      	mov	r5, r1
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	4618      	mov	r0, r3
 8006982:	f7f9 fdb9 	bl	80004f8 <__aeabi_f2d>
 8006986:	4602      	mov	r2, r0
 8006988:	460b      	mov	r3, r1
 800698a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800698e:	e9cd 4500 	strd	r4, r5, [sp]
 8006992:	4642      	mov	r2, r8
 8006994:	464b      	mov	r3, r9
 8006996:	4808      	ldr	r0, [pc, #32]	; (80069b8 <main+0x3f8>)
 8006998:	f7fe fb42 	bl	8005020 <PDEBUG>
	HAL_Delay(500);
 800699c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80069a0:	f7fa fcb7 	bl	8001312 <HAL_Delay>
 80069a4:	e65d      	b.n	8006662 <main+0xa2>
	if((flag & 0x40) == 0) continue;
 80069a6:	bf00      	nop
 80069a8:	e65b      	b.n	8006662 <main+0xa2>
	if((flag & 0x40) == 0) continue;
 80069aa:	bf00      	nop
 80069ac:	e659      	b.n	8006662 <main+0xa2>
	if((flag & 0x40) == 0) continue;
 80069ae:	bf00      	nop
 80069b0:	e657      	b.n	8006662 <main+0xa2>
	if((flag & 0x40) == 0) continue;
 80069b2:	bf00      	nop
  {
 80069b4:	e655      	b.n	8006662 <main+0xa2>
 80069b6:	bf00      	nop
 80069b8:	08014684 	.word	0x08014684
 80069bc:	080146c0 	.word	0x080146c0
 80069c0:	08014650 	.word	0x08014650

080069c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b09a      	sub	sp, #104	; 0x68
 80069c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80069ca:	f107 0320 	add.w	r3, r7, #32
 80069ce:	2248      	movs	r2, #72	; 0x48
 80069d0:	2100      	movs	r1, #0
 80069d2:	4618      	mov	r0, r3
 80069d4:	f00a f944 	bl	8010c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80069d8:	1d3b      	adds	r3, r7, #4
 80069da:	2200      	movs	r2, #0
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	605a      	str	r2, [r3, #4]
 80069e0:	609a      	str	r2, [r3, #8]
 80069e2:	60da      	str	r2, [r3, #12]
 80069e4:	611a      	str	r2, [r3, #16]
 80069e6:	615a      	str	r2, [r3, #20]
 80069e8:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80069ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f8:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80069fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f023 0303 	bic.w	r3, r3, #3
 8006a04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a08:	f043 0301 	orr.w	r3, r3, #1
 8006a0c:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8006a0e:	f001 fdbf 	bl	8008590 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8006a12:	2010      	movs	r0, #16
 8006a14:	f7ff fd8c 	bl	8006530 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a18:	4b29      	ldr	r3, [pc, #164]	; (8006ac0 <SystemClock_Config+0xfc>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006a20:	4a27      	ldr	r2, [pc, #156]	; (8006ac0 <SystemClock_Config+0xfc>)
 8006a22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a26:	6013      	str	r3, [r2, #0]
 8006a28:	4b25      	ldr	r3, [pc, #148]	; (8006ac0 <SystemClock_Config+0xfc>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a30:	603b      	str	r3, [r7, #0]
 8006a32:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8006a34:	232f      	movs	r3, #47	; 0x2f
 8006a36:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006a38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006a42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006a4c:	2340      	movs	r3, #64	; 0x40
 8006a4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8006a50:	2300      	movs	r3, #0
 8006a52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8006a54:	2360      	movs	r3, #96	; 0x60
 8006a56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006a58:	2305      	movs	r3, #5
 8006a5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006a60:	f107 0320 	add.w	r3, r7, #32
 8006a64:	4618      	mov	r0, r3
 8006a66:	f002 f93d 	bl	8008ce4 <HAL_RCC_OscConfig>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d001      	beq.n	8006a74 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8006a70:	f000 f9e8 	bl	8006e44 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8006a74:	236f      	movs	r3, #111	; 0x6f
 8006a76:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8006a78:	2302      	movs	r3, #2
 8006a7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006a80:	2300      	movs	r3, #0
 8006a82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006a84:	2300      	movs	r3, #0
 8006a86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006a90:	1d3b      	adds	r3, r7, #4
 8006a92:	2101      	movs	r1, #1
 8006a94:	4618      	mov	r0, r3
 8006a96:	f002 fc99 	bl	80093cc <HAL_RCC_ClockConfig>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8006aa0:	f000 f9d0 	bl	8006e44 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8006aaa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006aae:	f002 fdcd 	bl	800964c <HAL_RCC_MCOConfig>

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8006ab2:	f003 fa9f 	bl	8009ff4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8006ab6:	bf00      	nop
 8006ab8:	3768      	adds	r7, #104	; 0x68
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	58000400 	.word	0x58000400

08006ac4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b094      	sub	sp, #80	; 0x50
 8006ac8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006aca:	463b      	mov	r3, r7
 8006acc:	2250      	movs	r2, #80	; 0x50
 8006ace:	2100      	movs	r1, #0
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f00a f8c5 	bl	8010c60 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8006ad6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006ada:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8006adc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ae0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006aea:	463b      	mov	r3, r7
 8006aec:	4618      	mov	r0, r3
 8006aee:	f003 f90b 	bl	8009d08 <HAL_RCCEx_PeriphCLKConfig>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d001      	beq.n	8006afc <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8006af8:	f000 f9a4 	bl	8006e44 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8006afc:	bf00      	nop
 8006afe:	3750      	adds	r7, #80	; 0x50
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8006b08:	4b06      	ldr	r3, [pc, #24]	; (8006b24 <MX_IPCC_Init+0x20>)
 8006b0a:	4a07      	ldr	r2, [pc, #28]	; (8006b28 <MX_IPCC_Init+0x24>)
 8006b0c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8006b0e:	4805      	ldr	r0, [pc, #20]	; (8006b24 <MX_IPCC_Init+0x20>)
 8006b10:	f001 fbc0 	bl	8008294 <HAL_IPCC_Init>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d001      	beq.n	8006b1e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8006b1a:	f000 f993 	bl	8006e44 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8006b1e:	bf00      	nop
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	2000106c 	.word	0x2000106c
 8006b28:	58000c00 	.word	0x58000c00

08006b2c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8006b30:	bf00      	nop
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
	...

08006b3c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006b40:	4b16      	ldr	r3, [pc, #88]	; (8006b9c <MX_RTC_Init+0x60>)
 8006b42:	4a17      	ldr	r2, [pc, #92]	; (8006ba0 <MX_RTC_Init+0x64>)
 8006b44:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006b46:	4b15      	ldr	r3, [pc, #84]	; (8006b9c <MX_RTC_Init+0x60>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8006b4c:	4b13      	ldr	r3, [pc, #76]	; (8006b9c <MX_RTC_Init+0x60>)
 8006b4e:	220f      	movs	r2, #15
 8006b50:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8006b52:	4b12      	ldr	r3, [pc, #72]	; (8006b9c <MX_RTC_Init+0x60>)
 8006b54:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006b58:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006b5a:	4b10      	ldr	r3, [pc, #64]	; (8006b9c <MX_RTC_Init+0x60>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006b60:	4b0e      	ldr	r3, [pc, #56]	; (8006b9c <MX_RTC_Init+0x60>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006b66:	4b0d      	ldr	r3, [pc, #52]	; (8006b9c <MX_RTC_Init+0x60>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8006b6c:	4b0b      	ldr	r3, [pc, #44]	; (8006b9c <MX_RTC_Init+0x60>)
 8006b6e:	2200      	movs	r2, #0
 8006b70:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006b72:	480a      	ldr	r0, [pc, #40]	; (8006b9c <MX_RTC_Init+0x60>)
 8006b74:	f003 fb56 	bl	800a224 <HAL_RTC_Init>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8006b7e:	f000 f961 	bl	8006e44 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8006b82:	2200      	movs	r2, #0
 8006b84:	2100      	movs	r1, #0
 8006b86:	4805      	ldr	r0, [pc, #20]	; (8006b9c <MX_RTC_Init+0x60>)
 8006b88:	f003 fc4c 	bl	800a424 <HAL_RTCEx_SetWakeUpTimer_IT>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8006b92:	f000 f957 	bl	8006e44 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8006b96:	bf00      	nop
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	200010a8 	.word	0x200010a8
 8006ba0:	40002800 	.word	0x40002800

08006ba4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006ba8:	4b1b      	ldr	r3, [pc, #108]	; (8006c18 <MX_SPI1_Init+0x74>)
 8006baa:	4a1c      	ldr	r2, [pc, #112]	; (8006c1c <MX_SPI1_Init+0x78>)
 8006bac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006bae:	4b1a      	ldr	r3, [pc, #104]	; (8006c18 <MX_SPI1_Init+0x74>)
 8006bb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006bb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006bb6:	4b18      	ldr	r3, [pc, #96]	; (8006c18 <MX_SPI1_Init+0x74>)
 8006bb8:	2200      	movs	r2, #0
 8006bba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006bbc:	4b16      	ldr	r3, [pc, #88]	; (8006c18 <MX_SPI1_Init+0x74>)
 8006bbe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006bc2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bc4:	4b14      	ldr	r3, [pc, #80]	; (8006c18 <MX_SPI1_Init+0x74>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006bca:	4b13      	ldr	r3, [pc, #76]	; (8006c18 <MX_SPI1_Init+0x74>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006bd0:	4b11      	ldr	r3, [pc, #68]	; (8006c18 <MX_SPI1_Init+0x74>)
 8006bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bd6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006bd8:	4b0f      	ldr	r3, [pc, #60]	; (8006c18 <MX_SPI1_Init+0x74>)
 8006bda:	2220      	movs	r2, #32
 8006bdc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006bde:	4b0e      	ldr	r3, [pc, #56]	; (8006c18 <MX_SPI1_Init+0x74>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006be4:	4b0c      	ldr	r3, [pc, #48]	; (8006c18 <MX_SPI1_Init+0x74>)
 8006be6:	2200      	movs	r2, #0
 8006be8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bea:	4b0b      	ldr	r3, [pc, #44]	; (8006c18 <MX_SPI1_Init+0x74>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006bf0:	4b09      	ldr	r3, [pc, #36]	; (8006c18 <MX_SPI1_Init+0x74>)
 8006bf2:	2207      	movs	r2, #7
 8006bf4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006bf6:	4b08      	ldr	r3, [pc, #32]	; (8006c18 <MX_SPI1_Init+0x74>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8006bfc:	4b06      	ldr	r3, [pc, #24]	; (8006c18 <MX_SPI1_Init+0x74>)
 8006bfe:	2200      	movs	r2, #0
 8006c00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006c02:	4805      	ldr	r0, [pc, #20]	; (8006c18 <MX_SPI1_Init+0x74>)
 8006c04:	f003 fcca 	bl	800a59c <HAL_SPI_Init>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8006c0e:	f000 f919 	bl	8006e44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006c12:	bf00      	nop
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	200010cc 	.word	0x200010cc
 8006c1c:	40013000 	.word	0x40013000

08006c20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006c24:	4b22      	ldr	r3, [pc, #136]	; (8006cb0 <MX_USART1_UART_Init+0x90>)
 8006c26:	4a23      	ldr	r2, [pc, #140]	; (8006cb4 <MX_USART1_UART_Init+0x94>)
 8006c28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006c2a:	4b21      	ldr	r3, [pc, #132]	; (8006cb0 <MX_USART1_UART_Init+0x90>)
 8006c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006c30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006c32:	4b1f      	ldr	r3, [pc, #124]	; (8006cb0 <MX_USART1_UART_Init+0x90>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006c38:	4b1d      	ldr	r3, [pc, #116]	; (8006cb0 <MX_USART1_UART_Init+0x90>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006c3e:	4b1c      	ldr	r3, [pc, #112]	; (8006cb0 <MX_USART1_UART_Init+0x90>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006c44:	4b1a      	ldr	r3, [pc, #104]	; (8006cb0 <MX_USART1_UART_Init+0x90>)
 8006c46:	220c      	movs	r2, #12
 8006c48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006c4a:	4b19      	ldr	r3, [pc, #100]	; (8006cb0 <MX_USART1_UART_Init+0x90>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006c50:	4b17      	ldr	r3, [pc, #92]	; (8006cb0 <MX_USART1_UART_Init+0x90>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006c56:	4b16      	ldr	r3, [pc, #88]	; (8006cb0 <MX_USART1_UART_Init+0x90>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006c5c:	4b14      	ldr	r3, [pc, #80]	; (8006cb0 <MX_USART1_UART_Init+0x90>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006c62:	4b13      	ldr	r3, [pc, #76]	; (8006cb0 <MX_USART1_UART_Init+0x90>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006c68:	4811      	ldr	r0, [pc, #68]	; (8006cb0 <MX_USART1_UART_Init+0x90>)
 8006c6a:	f004 fb69 	bl	800b340 <HAL_UART_Init>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d001      	beq.n	8006c78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006c74:	f000 f8e6 	bl	8006e44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006c78:	2100      	movs	r1, #0
 8006c7a:	480d      	ldr	r0, [pc, #52]	; (8006cb0 <MX_USART1_UART_Init+0x90>)
 8006c7c:	f005 fc61 	bl	800c542 <HAL_UARTEx_SetTxFifoThreshold>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006c86:	f000 f8dd 	bl	8006e44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	4808      	ldr	r0, [pc, #32]	; (8006cb0 <MX_USART1_UART_Init+0x90>)
 8006c8e:	f005 fc96 	bl	800c5be <HAL_UARTEx_SetRxFifoThreshold>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006c98:	f000 f8d4 	bl	8006e44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006c9c:	4804      	ldr	r0, [pc, #16]	; (8006cb0 <MX_USART1_UART_Init+0x90>)
 8006c9e:	f005 fc17 	bl	800c4d0 <HAL_UARTEx_DisableFifoMode>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d001      	beq.n	8006cac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006ca8:	f000 f8cc 	bl	8006e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006cac:	bf00      	nop
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	20001130 	.word	0x20001130
 8006cb4:	40013800 	.word	0x40013800

08006cb8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8006cbc:	4b10      	ldr	r3, [pc, #64]	; (8006d00 <MX_USB_PCD_Init+0x48>)
 8006cbe:	4a11      	ldr	r2, [pc, #68]	; (8006d04 <MX_USB_PCD_Init+0x4c>)
 8006cc0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006cc2:	4b0f      	ldr	r3, [pc, #60]	; (8006d00 <MX_USB_PCD_Init+0x48>)
 8006cc4:	2208      	movs	r2, #8
 8006cc6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006cc8:	4b0d      	ldr	r3, [pc, #52]	; (8006d00 <MX_USB_PCD_Init+0x48>)
 8006cca:	2202      	movs	r2, #2
 8006ccc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006cce:	4b0c      	ldr	r3, [pc, #48]	; (8006d00 <MX_USB_PCD_Init+0x48>)
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8006cd4:	4b0a      	ldr	r3, [pc, #40]	; (8006d00 <MX_USB_PCD_Init+0x48>)
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006cda:	4b09      	ldr	r3, [pc, #36]	; (8006d00 <MX_USB_PCD_Init+0x48>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006ce0:	4b07      	ldr	r3, [pc, #28]	; (8006d00 <MX_USB_PCD_Init+0x48>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006ce6:	4b06      	ldr	r3, [pc, #24]	; (8006d00 <MX_USB_PCD_Init+0x48>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006cec:	4804      	ldr	r0, [pc, #16]	; (8006d00 <MX_USB_PCD_Init+0x48>)
 8006cee:	f001 fb57 	bl	80083a0 <HAL_PCD_Init>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d001      	beq.n	8006cfc <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8006cf8:	f000 f8a4 	bl	8006e44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8006cfc:	bf00      	nop
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	20001284 	.word	0x20001284
 8006d04:	40006800 	.word	0x40006800

08006d08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006d0c:	2004      	movs	r0, #4
 8006d0e:	f7ff fc25 	bl	800655c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006d12:	2001      	movs	r0, #1
 8006d14:	f7ff fc22 	bl	800655c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8006d18:	2200      	movs	r2, #0
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	200b      	movs	r0, #11
 8006d1e:	f000 fe34 	bl	800798a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006d22:	200b      	movs	r0, #11
 8006d24:	f000 fe4b 	bl	80079be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8006d28:	2200      	movs	r2, #0
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	200c      	movs	r0, #12
 8006d2e:	f000 fe2c 	bl	800798a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8006d32:	200c      	movs	r0, #12
 8006d34:	f000 fe43 	bl	80079be <HAL_NVIC_EnableIRQ>

}
 8006d38:	bf00      	nop
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d42:	1d3b      	adds	r3, r7, #4
 8006d44:	2200      	movs	r2, #0
 8006d46:	601a      	str	r2, [r3, #0]
 8006d48:	605a      	str	r2, [r3, #4]
 8006d4a:	609a      	str	r2, [r3, #8]
 8006d4c:	60da      	str	r2, [r3, #12]
 8006d4e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d50:	2004      	movs	r0, #4
 8006d52:	f7ff fc1c 	bl	800658e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d56:	2001      	movs	r0, #1
 8006d58:	f7ff fc19 	bl	800658e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d5c:	2008      	movs	r0, #8
 8006d5e:	f7ff fc16 	bl	800658e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d62:	2002      	movs	r0, #2
 8006d64:	f7ff fc13 	bl	800658e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f240 211f 	movw	r1, #543	; 0x21f
 8006d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d72:	f001 fa53 	bl	800821c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8006d76:	2200      	movs	r2, #0
 8006d78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006d7c:	482e      	ldr	r0, [pc, #184]	; (8006e38 <MX_GPIO_Init+0xfc>)
 8006d7e:	f001 fa4d 	bl	800821c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|LD1_Pin, GPIO_PIN_RESET);
 8006d82:	2200      	movs	r2, #0
 8006d84:	2130      	movs	r1, #48	; 0x30
 8006d86:	482d      	ldr	r0, [pc, #180]	; (8006e3c <MX_GPIO_Init+0x100>)
 8006d88:	f001 fa48 	bl	800821c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006d8c:	f240 231f 	movw	r3, #543	; 0x21f
 8006d90:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d92:	2301      	movs	r3, #1
 8006d94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d96:	2300      	movs	r3, #0
 8006d98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d9e:	1d3b      	adds	r3, r7, #4
 8006da0:	4619      	mov	r1, r3
 8006da2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006da6:	f001 f8c9 	bl	8007f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006db0:	2302      	movs	r3, #2
 8006db2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006db4:	2300      	movs	r3, #0
 8006db6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006db8:	2300      	movs	r3, #0
 8006dba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dc0:	1d3b      	adds	r3, r7, #4
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006dc8:	f001 f8b8 	bl	8007f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8006dcc:	2310      	movs	r3, #16
 8006dce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006dd8:	1d3b      	adds	r3, r7, #4
 8006dda:	4619      	mov	r1, r3
 8006ddc:	4816      	ldr	r0, [pc, #88]	; (8006e38 <MX_GPIO_Init+0xfc>)
 8006dde:	f001 f8ad 	bl	8007f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006de6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006de8:	2301      	movs	r3, #1
 8006dea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dec:	2300      	movs	r3, #0
 8006dee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006df0:	2300      	movs	r3, #0
 8006df2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006df4:	1d3b      	adds	r3, r7, #4
 8006df6:	4619      	mov	r1, r3
 8006df8:	480f      	ldr	r0, [pc, #60]	; (8006e38 <MX_GPIO_Init+0xfc>)
 8006dfa:	f001 f89f 	bl	8007f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e02:	2300      	movs	r3, #0
 8006e04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e06:	2300      	movs	r3, #0
 8006e08:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e0a:	1d3b      	adds	r3, r7, #4
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	480c      	ldr	r0, [pc, #48]	; (8006e40 <MX_GPIO_Init+0x104>)
 8006e10:	f001 f894 	bl	8007f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 LD1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD1_Pin;
 8006e14:	2330      	movs	r3, #48	; 0x30
 8006e16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e20:	2300      	movs	r3, #0
 8006e22:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e24:	1d3b      	adds	r3, r7, #4
 8006e26:	4619      	mov	r1, r3
 8006e28:	4804      	ldr	r0, [pc, #16]	; (8006e3c <MX_GPIO_Init+0x100>)
 8006e2a:	f001 f887 	bl	8007f3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006e2e:	bf00      	nop
 8006e30:	3718      	adds	r7, #24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	48000800 	.word	0x48000800
 8006e3c:	48000400 	.word	0x48000400
 8006e40:	48000c00 	.word	0x48000c00

08006e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006e44:	b480      	push	{r7}
 8006e46:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006e48:	b672      	cpsid	i
}
 8006e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006e4c:	e7fe      	b.n	8006e4c <Error_Handler+0x8>

08006e4e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8006e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006e66:	bf00      	nop
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <LL_AHB2_GRP1_EnableClock>:
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4013      	ands	r3, r2
 8006e92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006e94:	68fb      	ldr	r3, [r7, #12]
}
 8006e96:	bf00      	nop
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b085      	sub	sp, #20
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006eb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ebe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
}
 8006ec8:	bf00      	nop
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ee0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006ee2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ef0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
}
 8006efa:	bf00      	nop
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8006f06:	b480      	push	{r7}
 8006f08:	b085      	sub	sp, #20
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8006f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006f14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4013      	ands	r3, r2
 8006f28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
}
 8006f2c:	bf00      	nop
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8006f3c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006f40:	f7ff ffaf 	bl	8006ea2 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8006f44:	2200      	movs	r2, #0
 8006f46:	2100      	movs	r1, #0
 8006f48:	202e      	movs	r0, #46	; 0x2e
 8006f4a:	f000 fd1e 	bl	800798a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8006f4e:	202e      	movs	r0, #46	; 0x2e
 8006f50:	f000 fd35 	bl	80079be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006f54:	bf00      	nop
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a0d      	ldr	r2, [pc, #52]	; (8006f9c <HAL_IPCC_MspInit+0x44>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d113      	bne.n	8006f92 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8006f6a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006f6e:	f7ff ff98 	bl	8006ea2 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8006f72:	2200      	movs	r2, #0
 8006f74:	2100      	movs	r1, #0
 8006f76:	202c      	movs	r0, #44	; 0x2c
 8006f78:	f000 fd07 	bl	800798a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8006f7c:	202c      	movs	r0, #44	; 0x2c
 8006f7e:	f000 fd1e 	bl	80079be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8006f82:	2200      	movs	r2, #0
 8006f84:	2100      	movs	r1, #0
 8006f86:	202d      	movs	r0, #45	; 0x2d
 8006f88:	f000 fcff 	bl	800798a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8006f8c:	202d      	movs	r0, #45	; 0x2d
 8006f8e:	f000 fd16 	bl	80079be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8006f92:	bf00      	nop
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	58000c00 	.word	0x58000c00

08006fa0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b096      	sub	sp, #88	; 0x58
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006fa8:	f107 0308 	add.w	r3, r7, #8
 8006fac:	2250      	movs	r2, #80	; 0x50
 8006fae:	2100      	movs	r1, #0
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f009 fe55 	bl	8010c60 <memset>
  if(hrtc->Instance==RTC)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a13      	ldr	r2, [pc, #76]	; (8007008 <HAL_RTC_MspInit+0x68>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d11f      	bne.n	8007000 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8006fc0:	f001 fae6 	bl	8008590 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006fc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006fc8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006fca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fce:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006fd0:	f107 0308 	add.w	r3, r7, #8
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f002 fe97 	bl	8009d08 <HAL_RCCEx_PeriphCLKConfig>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d001      	beq.n	8006fe4 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8006fe0:	f7ff ff30 	bl	8006e44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006fe4:	f7ff ff33 	bl	8006e4e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8006fe8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006fec:	f7ff ff72 	bl	8006ed4 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	2003      	movs	r0, #3
 8006ff6:	f000 fcc8 	bl	800798a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8006ffa:	2003      	movs	r0, #3
 8006ffc:	f000 fcdf 	bl	80079be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8007000:	bf00      	nop
 8007002:	3758      	adds	r7, #88	; 0x58
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	40002800 	.word	0x40002800

0800700c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b088      	sub	sp, #32
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007014:	f107 030c 	add.w	r3, r7, #12
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]
 800701c:	605a      	str	r2, [r3, #4]
 800701e:	609a      	str	r2, [r3, #8]
 8007020:	60da      	str	r2, [r3, #12]
 8007022:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a13      	ldr	r2, [pc, #76]	; (8007078 <HAL_SPI_MspInit+0x6c>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d11f      	bne.n	800706e <HAL_SPI_MspInit+0x62>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800702e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007032:	f7ff ff68 	bl	8006f06 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007036:	2001      	movs	r0, #1
 8007038:	f7ff ff1a 	bl	8006e70 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800703c:	23e0      	movs	r3, #224	; 0xe0
 800703e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007040:	2302      	movs	r3, #2
 8007042:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007044:	2300      	movs	r3, #0
 8007046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007048:	2300      	movs	r3, #0
 800704a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800704c:	2305      	movs	r3, #5
 800704e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007050:	f107 030c 	add.w	r3, r7, #12
 8007054:	4619      	mov	r1, r3
 8007056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800705a:	f000 ff6f 	bl	8007f3c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800705e:	2200      	movs	r2, #0
 8007060:	2100      	movs	r1, #0
 8007062:	2022      	movs	r0, #34	; 0x22
 8007064:	f000 fc91 	bl	800798a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8007068:	2022      	movs	r0, #34	; 0x22
 800706a:	f000 fca8 	bl	80079be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800706e:	bf00      	nop
 8007070:	3720      	adds	r7, #32
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	40013000 	.word	0x40013000

0800707c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b09c      	sub	sp, #112	; 0x70
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007084:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007088:	2200      	movs	r2, #0
 800708a:	601a      	str	r2, [r3, #0]
 800708c:	605a      	str	r2, [r3, #4]
 800708e:	609a      	str	r2, [r3, #8]
 8007090:	60da      	str	r2, [r3, #12]
 8007092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007094:	f107 030c 	add.w	r3, r7, #12
 8007098:	2250      	movs	r2, #80	; 0x50
 800709a:	2100      	movs	r1, #0
 800709c:	4618      	mov	r0, r3
 800709e:	f009 fddf 	bl	8010c60 <memset>
  if(huart->Instance==USART1)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a43      	ldr	r2, [pc, #268]	; (80071b4 <HAL_UART_MspInit+0x138>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d17f      	bne.n	80071ac <HAL_UART_MspInit+0x130>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80070ac:	2301      	movs	r3, #1
 80070ae:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80070b0:	2300      	movs	r3, #0
 80070b2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80070b4:	f107 030c 	add.w	r3, r7, #12
 80070b8:	4618      	mov	r0, r3
 80070ba:	f002 fe25 	bl	8009d08 <HAL_RCCEx_PeriphCLKConfig>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80070c4:	f7ff febe 	bl	8006e44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80070c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80070cc:	f7ff ff1b 	bl	8006f06 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070d0:	2002      	movs	r0, #2
 80070d2:	f7ff fecd 	bl	8006e70 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80070d6:	23c0      	movs	r3, #192	; 0xc0
 80070d8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070da:	2302      	movs	r3, #2
 80070dc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80070de:	2301      	movs	r3, #1
 80070e0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070e2:	2300      	movs	r3, #0
 80070e4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80070e6:	2307      	movs	r3, #7
 80070e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80070ee:	4619      	mov	r1, r3
 80070f0:	4831      	ldr	r0, [pc, #196]	; (80071b8 <HAL_UART_MspInit+0x13c>)
 80070f2:	f000 ff23 	bl	8007f3c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80070f6:	4b31      	ldr	r3, [pc, #196]	; (80071bc <HAL_UART_MspInit+0x140>)
 80070f8:	4a31      	ldr	r2, [pc, #196]	; (80071c0 <HAL_UART_MspInit+0x144>)
 80070fa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80070fc:	4b2f      	ldr	r3, [pc, #188]	; (80071bc <HAL_UART_MspInit+0x140>)
 80070fe:	220e      	movs	r2, #14
 8007100:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007102:	4b2e      	ldr	r3, [pc, #184]	; (80071bc <HAL_UART_MspInit+0x140>)
 8007104:	2200      	movs	r2, #0
 8007106:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007108:	4b2c      	ldr	r3, [pc, #176]	; (80071bc <HAL_UART_MspInit+0x140>)
 800710a:	2200      	movs	r2, #0
 800710c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800710e:	4b2b      	ldr	r3, [pc, #172]	; (80071bc <HAL_UART_MspInit+0x140>)
 8007110:	2280      	movs	r2, #128	; 0x80
 8007112:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007114:	4b29      	ldr	r3, [pc, #164]	; (80071bc <HAL_UART_MspInit+0x140>)
 8007116:	2200      	movs	r2, #0
 8007118:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800711a:	4b28      	ldr	r3, [pc, #160]	; (80071bc <HAL_UART_MspInit+0x140>)
 800711c:	2200      	movs	r2, #0
 800711e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8007120:	4b26      	ldr	r3, [pc, #152]	; (80071bc <HAL_UART_MspInit+0x140>)
 8007122:	2200      	movs	r2, #0
 8007124:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007126:	4b25      	ldr	r3, [pc, #148]	; (80071bc <HAL_UART_MspInit+0x140>)
 8007128:	2200      	movs	r2, #0
 800712a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800712c:	4823      	ldr	r0, [pc, #140]	; (80071bc <HAL_UART_MspInit+0x140>)
 800712e:	f000 fc8b 	bl	8007a48 <HAL_DMA_Init>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d001      	beq.n	800713c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8007138:	f7ff fe84 	bl	8006e44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a1f      	ldr	r2, [pc, #124]	; (80071bc <HAL_UART_MspInit+0x140>)
 8007140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8007144:	4a1d      	ldr	r2, [pc, #116]	; (80071bc <HAL_UART_MspInit+0x140>)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800714a:	4b1e      	ldr	r3, [pc, #120]	; (80071c4 <HAL_UART_MspInit+0x148>)
 800714c:	4a1e      	ldr	r2, [pc, #120]	; (80071c8 <HAL_UART_MspInit+0x14c>)
 800714e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8007150:	4b1c      	ldr	r3, [pc, #112]	; (80071c4 <HAL_UART_MspInit+0x148>)
 8007152:	220f      	movs	r2, #15
 8007154:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007156:	4b1b      	ldr	r3, [pc, #108]	; (80071c4 <HAL_UART_MspInit+0x148>)
 8007158:	2210      	movs	r2, #16
 800715a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800715c:	4b19      	ldr	r3, [pc, #100]	; (80071c4 <HAL_UART_MspInit+0x148>)
 800715e:	2200      	movs	r2, #0
 8007160:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007162:	4b18      	ldr	r3, [pc, #96]	; (80071c4 <HAL_UART_MspInit+0x148>)
 8007164:	2280      	movs	r2, #128	; 0x80
 8007166:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007168:	4b16      	ldr	r3, [pc, #88]	; (80071c4 <HAL_UART_MspInit+0x148>)
 800716a:	2200      	movs	r2, #0
 800716c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800716e:	4b15      	ldr	r3, [pc, #84]	; (80071c4 <HAL_UART_MspInit+0x148>)
 8007170:	2200      	movs	r2, #0
 8007172:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8007174:	4b13      	ldr	r3, [pc, #76]	; (80071c4 <HAL_UART_MspInit+0x148>)
 8007176:	2200      	movs	r2, #0
 8007178:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800717a:	4b12      	ldr	r3, [pc, #72]	; (80071c4 <HAL_UART_MspInit+0x148>)
 800717c:	2200      	movs	r2, #0
 800717e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007180:	4810      	ldr	r0, [pc, #64]	; (80071c4 <HAL_UART_MspInit+0x148>)
 8007182:	f000 fc61 	bl	8007a48 <HAL_DMA_Init>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 800718c:	f7ff fe5a 	bl	8006e44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a0c      	ldr	r2, [pc, #48]	; (80071c4 <HAL_UART_MspInit+0x148>)
 8007194:	67da      	str	r2, [r3, #124]	; 0x7c
 8007196:	4a0b      	ldr	r2, [pc, #44]	; (80071c4 <HAL_UART_MspInit+0x148>)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800719c:	2200      	movs	r2, #0
 800719e:	2100      	movs	r1, #0
 80071a0:	2024      	movs	r0, #36	; 0x24
 80071a2:	f000 fbf2 	bl	800798a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80071a6:	2024      	movs	r0, #36	; 0x24
 80071a8:	f000 fc09 	bl	80079be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80071ac:	bf00      	nop
 80071ae:	3770      	adds	r7, #112	; 0x70
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	40013800 	.word	0x40013800
 80071b8:	48000400 	.word	0x48000400
 80071bc:	200011c4 	.word	0x200011c4
 80071c0:	40020008 	.word	0x40020008
 80071c4:	20001224 	.word	0x20001224
 80071c8:	4002001c 	.word	0x4002001c

080071cc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b09c      	sub	sp, #112	; 0x70
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80071d8:	2200      	movs	r2, #0
 80071da:	601a      	str	r2, [r3, #0]
 80071dc:	605a      	str	r2, [r3, #4]
 80071de:	609a      	str	r2, [r3, #8]
 80071e0:	60da      	str	r2, [r3, #12]
 80071e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80071e4:	f107 030c 	add.w	r3, r7, #12
 80071e8:	2250      	movs	r2, #80	; 0x50
 80071ea:	2100      	movs	r1, #0
 80071ec:	4618      	mov	r0, r3
 80071ee:	f009 fd37 	bl	8010c60 <memset>
  if(hpcd->Instance==USB)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a1f      	ldr	r2, [pc, #124]	; (8007274 <HAL_PCD_MspInit+0xa8>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d136      	bne.n	800726a <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80071fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007200:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8007202:	2318      	movs	r3, #24
 8007204:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8007206:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800720a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800720c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007210:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8007212:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007216:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8007218:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800721c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800721e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007222:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007224:	f107 030c 	add.w	r3, r7, #12
 8007228:	4618      	mov	r0, r3
 800722a:	f002 fd6d 	bl	8009d08 <HAL_RCCEx_PeriphCLKConfig>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8007234:	f7ff fe06 	bl	8006e44 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007238:	2001      	movs	r0, #1
 800723a:	f7ff fe19 	bl	8006e70 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800723e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007242:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007244:	2302      	movs	r3, #2
 8007246:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007248:	2300      	movs	r3, #0
 800724a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800724c:	2300      	movs	r3, #0
 800724e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8007250:	230a      	movs	r3, #10
 8007252:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007254:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007258:	4619      	mov	r1, r3
 800725a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800725e:	f000 fe6d 	bl	8007f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007262:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007266:	f7ff fe35 	bl	8006ed4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800726a:	bf00      	nop
 800726c:	3770      	adds	r7, #112	; 0x70
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	40006800 	.word	0x40006800

08007278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007278:	b480      	push	{r7}
 800727a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800727c:	e7fe      	b.n	800727c <NMI_Handler+0x4>

0800727e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800727e:	b480      	push	{r7}
 8007280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007282:	e7fe      	b.n	8007282 <HardFault_Handler+0x4>

08007284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007284:	b480      	push	{r7}
 8007286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007288:	e7fe      	b.n	8007288 <MemManage_Handler+0x4>

0800728a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800728a:	b480      	push	{r7}
 800728c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800728e:	e7fe      	b.n	800728e <BusFault_Handler+0x4>

08007290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007290:	b480      	push	{r7}
 8007292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007294:	e7fe      	b.n	8007294 <UsageFault_Handler+0x4>

08007296 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007296:	b480      	push	{r7}
 8007298:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800729a:	bf00      	nop
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80072a4:	b480      	push	{r7}
 80072a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80072a8:	bf00      	nop
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80072b2:	b480      	push	{r7}
 80072b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80072b6:	bf00      	nop
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80072c4:	f000 f9ee 	bl	80076a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80072c8:	bf00      	nop
 80072ca:	bd80      	pop	{r7, pc}

080072cc <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80072d0:	f7fe fc80 	bl	8005bd4 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80072d4:	bf00      	nop
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80072dc:	4802      	ldr	r0, [pc, #8]	; (80072e8 <DMA1_Channel1_IRQHandler+0x10>)
 80072de:	f000 fd19 	bl	8007d14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80072e2:	bf00      	nop
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	200011c4 	.word	0x200011c4

080072ec <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80072f0:	4802      	ldr	r0, [pc, #8]	; (80072fc <DMA1_Channel2_IRQHandler+0x10>)
 80072f2:	f000 fd0f 	bl	8007d14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80072f6:	bf00      	nop
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	20001224 	.word	0x20001224

08007300 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8007304:	4802      	ldr	r0, [pc, #8]	; (8007310 <SPI1_IRQHandler+0x10>)
 8007306:	f003 fd83 	bl	800ae10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800730a:	bf00      	nop
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	200010cc 	.word	0x200010cc

08007314 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007318:	4802      	ldr	r0, [pc, #8]	; (8007324 <USART1_IRQHandler+0x10>)
 800731a:	f004 f8ef 	bl	800b4fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800731e:	bf00      	nop
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	20001130 	.word	0x20001130

08007328 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800732c:	f008 fb36 	bl	800f99c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8007330:	bf00      	nop
 8007332:	bd80      	pop	{r7, pc}

08007334 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8007338:	f008 fb66 	bl	800fa08 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800733c:	bf00      	nop
 800733e:	bd80      	pop	{r7, pc}

08007340 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8007344:	f000 ff82 	bl	800824c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8007348:	bf00      	nop
 800734a:	bd80      	pop	{r7, pc}

0800734c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800734c:	b480      	push	{r7}
 800734e:	af00      	add	r7, sp, #0
  return 1;
 8007350:	2301      	movs	r3, #1
}
 8007352:	4618      	mov	r0, r3
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <_kill>:

int _kill(int pid, int sig)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007366:	f009 fccd 	bl	8010d04 <__errno>
 800736a:	4603      	mov	r3, r0
 800736c:	2216      	movs	r2, #22
 800736e:	601a      	str	r2, [r3, #0]
  return -1;
 8007370:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007374:	4618      	mov	r0, r3
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <_exit>:

void _exit (int status)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007384:	f04f 31ff 	mov.w	r1, #4294967295
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7ff ffe7 	bl	800735c <_kill>
  while (1) {}    /* Make sure we hang here */
 800738e:	e7fe      	b.n	800738e <_exit+0x12>

08007390 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800739c:	2300      	movs	r3, #0
 800739e:	617b      	str	r3, [r7, #20]
 80073a0:	e00a      	b.n	80073b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80073a2:	f3af 8000 	nop.w
 80073a6:	4601      	mov	r1, r0
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	1c5a      	adds	r2, r3, #1
 80073ac:	60ba      	str	r2, [r7, #8]
 80073ae:	b2ca      	uxtb	r2, r1
 80073b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	3301      	adds	r3, #1
 80073b6:	617b      	str	r3, [r7, #20]
 80073b8:	697a      	ldr	r2, [r7, #20]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	429a      	cmp	r2, r3
 80073be:	dbf0      	blt.n	80073a2 <_read+0x12>
  }

  return len;
 80073c0:	687b      	ldr	r3, [r7, #4]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3718      	adds	r7, #24
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b086      	sub	sp, #24
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	60f8      	str	r0, [r7, #12]
 80073d2:	60b9      	str	r1, [r7, #8]
 80073d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80073d6:	2300      	movs	r3, #0
 80073d8:	617b      	str	r3, [r7, #20]
 80073da:	e009      	b.n	80073f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	60ba      	str	r2, [r7, #8]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	3301      	adds	r3, #1
 80073ee:	617b      	str	r3, [r7, #20]
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	dbf1      	blt.n	80073dc <_write+0x12>
  }
  return len;
 80073f8:	687b      	ldr	r3, [r7, #4]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3718      	adds	r7, #24
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <_close>:

int _close(int file)
{
 8007402:	b480      	push	{r7}
 8007404:	b083      	sub	sp, #12
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800740a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800740e:	4618      	mov	r0, r3
 8007410:	370c      	adds	r7, #12
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800741a:	b480      	push	{r7}
 800741c:	b083      	sub	sp, #12
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
 8007422:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800742a:	605a      	str	r2, [r3, #4]
  return 0;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <_isatty>:

int _isatty(int file)
{
 800743a:	b480      	push	{r7}
 800743c:	b083      	sub	sp, #12
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007442:	2301      	movs	r3, #1
}
 8007444:	4618      	mov	r0, r3
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
	...

0800746c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007474:	4a14      	ldr	r2, [pc, #80]	; (80074c8 <_sbrk+0x5c>)
 8007476:	4b15      	ldr	r3, [pc, #84]	; (80074cc <_sbrk+0x60>)
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007480:	4b13      	ldr	r3, [pc, #76]	; (80074d0 <_sbrk+0x64>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d102      	bne.n	800748e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007488:	4b11      	ldr	r3, [pc, #68]	; (80074d0 <_sbrk+0x64>)
 800748a:	4a12      	ldr	r2, [pc, #72]	; (80074d4 <_sbrk+0x68>)
 800748c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800748e:	4b10      	ldr	r3, [pc, #64]	; (80074d0 <_sbrk+0x64>)
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4413      	add	r3, r2
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	429a      	cmp	r2, r3
 800749a:	d207      	bcs.n	80074ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800749c:	f009 fc32 	bl	8010d04 <__errno>
 80074a0:	4603      	mov	r3, r0
 80074a2:	220c      	movs	r2, #12
 80074a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80074a6:	f04f 33ff 	mov.w	r3, #4294967295
 80074aa:	e009      	b.n	80074c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80074ac:	4b08      	ldr	r3, [pc, #32]	; (80074d0 <_sbrk+0x64>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80074b2:	4b07      	ldr	r3, [pc, #28]	; (80074d0 <_sbrk+0x64>)
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4413      	add	r3, r2
 80074ba:	4a05      	ldr	r2, [pc, #20]	; (80074d0 <_sbrk+0x64>)
 80074bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80074be:	68fb      	ldr	r3, [r7, #12]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3718      	adds	r7, #24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	20030000 	.word	0x20030000
 80074cc:	00000400 	.word	0x00000400
 80074d0:	200015e0 	.word	0x200015e0
 80074d4:	20001a10 	.word	0x20001a10

080074d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80074d8:	b480      	push	{r7}
 80074da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80074dc:	4b24      	ldr	r3, [pc, #144]	; (8007570 <SystemInit+0x98>)
 80074de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e2:	4a23      	ldr	r2, [pc, #140]	; (8007570 <SystemInit+0x98>)
 80074e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80074e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80074ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074f6:	f043 0301 	orr.w	r3, r3, #1
 80074fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80074fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007500:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8007504:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8007506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007510:	4b18      	ldr	r3, [pc, #96]	; (8007574 <SystemInit+0x9c>)
 8007512:	4013      	ands	r3, r2
 8007514:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8007516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800751a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800751e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007522:	f023 0305 	bic.w	r3, r3, #5
 8007526:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800752a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800752e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007532:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007536:	f023 0301 	bic.w	r3, r3, #1
 800753a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800753e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007542:	4a0d      	ldr	r2, [pc, #52]	; (8007578 <SystemInit+0xa0>)
 8007544:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8007546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800754a:	4a0b      	ldr	r2, [pc, #44]	; (8007578 <SystemInit+0xa0>)
 800754c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800754e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800755c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800755e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007562:	2200      	movs	r2, #0
 8007564:	619a      	str	r2, [r3, #24]
}
 8007566:	bf00      	nop
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr
 8007570:	e000ed00 	.word	0xe000ed00
 8007574:	faf6fefb 	.word	0xfaf6fefb
 8007578:	22041000 	.word	0x22041000

0800757c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800757c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800757e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007580:	3304      	adds	r3, #4

08007582 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007582:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007584:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8007586:	d3f9      	bcc.n	800757c <CopyDataInit>
  bx lr
 8007588:	4770      	bx	lr

0800758a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800758a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800758c:	3004      	adds	r0, #4

0800758e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800758e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8007590:	d3fb      	bcc.n	800758a <FillZerobss>
  bx lr
 8007592:	4770      	bx	lr

08007594 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007594:	480c      	ldr	r0, [pc, #48]	; (80075c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007596:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8007598:	f7ff ff9e 	bl	80074d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800759c:	480b      	ldr	r0, [pc, #44]	; (80075cc <LoopForever+0x6>)
 800759e:	490c      	ldr	r1, [pc, #48]	; (80075d0 <LoopForever+0xa>)
 80075a0:	4a0c      	ldr	r2, [pc, #48]	; (80075d4 <LoopForever+0xe>)
 80075a2:	2300      	movs	r3, #0
 80075a4:	f7ff ffed 	bl	8007582 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80075a8:	480b      	ldr	r0, [pc, #44]	; (80075d8 <LoopForever+0x12>)
 80075aa:	490c      	ldr	r1, [pc, #48]	; (80075dc <LoopForever+0x16>)
 80075ac:	4a0c      	ldr	r2, [pc, #48]	; (80075e0 <LoopForever+0x1a>)
 80075ae:	2300      	movs	r3, #0
 80075b0:	f7ff ffe7 	bl	8007582 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80075b4:	480b      	ldr	r0, [pc, #44]	; (80075e4 <LoopForever+0x1e>)
 80075b6:	490c      	ldr	r1, [pc, #48]	; (80075e8 <LoopForever+0x22>)
 80075b8:	2300      	movs	r3, #0
 80075ba:	f7ff ffe8 	bl	800758e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80075be:	f009 fba7 	bl	8010d10 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80075c2:	f7fe fffd 	bl	80065c0 <main>

080075c6 <LoopForever>:

LoopForever:
  b LoopForever
 80075c6:	e7fe      	b.n	80075c6 <LoopForever>
  ldr   r0, =_estack
 80075c8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80075cc:	20000008 	.word	0x20000008
 80075d0:	20000350 	.word	0x20000350
 80075d4:	08014d20 	.word	0x08014d20
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80075d8:	200301e4 	.word	0x200301e4
 80075dc:	20030a67 	.word	0x20030a67
 80075e0:	080150ae 	.word	0x080150ae
  INIT_BSS _sbss, _ebss
 80075e4:	2000039c 	.word	0x2000039c
 80075e8:	20001a0c 	.word	0x20001a0c

080075ec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80075ec:	e7fe      	b.n	80075ec <ADC1_IRQHandler>
	...

080075f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80075fa:	4b0c      	ldr	r3, [pc, #48]	; (800762c <HAL_Init+0x3c>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a0b      	ldr	r2, [pc, #44]	; (800762c <HAL_Init+0x3c>)
 8007600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007604:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007606:	2003      	movs	r0, #3
 8007608:	f000 f9b4 	bl	8007974 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800760c:	2000      	movs	r0, #0
 800760e:	f000 f80f 	bl	8007630 <HAL_InitTick>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d002      	beq.n	800761e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	71fb      	strb	r3, [r7, #7]
 800761c:	e001      	b.n	8007622 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800761e:	f7ff fc8b 	bl	8006f38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007622:	79fb      	ldrb	r3, [r7, #7]
}
 8007624:	4618      	mov	r0, r3
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	58004000 	.word	0x58004000

08007630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800763c:	4b17      	ldr	r3, [pc, #92]	; (800769c <HAL_InitTick+0x6c>)
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d024      	beq.n	800768e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8007644:	f002 f8c0 	bl	80097c8 <HAL_RCC_GetHCLKFreq>
 8007648:	4602      	mov	r2, r0
 800764a:	4b14      	ldr	r3, [pc, #80]	; (800769c <HAL_InitTick+0x6c>)
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	4619      	mov	r1, r3
 8007650:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007654:	fbb3 f3f1 	udiv	r3, r3, r1
 8007658:	fbb2 f3f3 	udiv	r3, r2, r3
 800765c:	4618      	mov	r0, r3
 800765e:	f000 f9ca 	bl	80079f6 <HAL_SYSTICK_Config>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10f      	bne.n	8007688 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b0f      	cmp	r3, #15
 800766c:	d809      	bhi.n	8007682 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800766e:	2200      	movs	r2, #0
 8007670:	6879      	ldr	r1, [r7, #4]
 8007672:	f04f 30ff 	mov.w	r0, #4294967295
 8007676:	f000 f988 	bl	800798a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800767a:	4a09      	ldr	r2, [pc, #36]	; (80076a0 <HAL_InitTick+0x70>)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6013      	str	r3, [r2, #0]
 8007680:	e007      	b.n	8007692 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	73fb      	strb	r3, [r7, #15]
 8007686:	e004      	b.n	8007692 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	73fb      	strb	r3, [r7, #15]
 800768c:	e001      	b.n	8007692 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007692:	7bfb      	ldrb	r3, [r7, #15]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	2000015c 	.word	0x2000015c
 80076a0:	20000158 	.word	0x20000158

080076a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80076a4:	b480      	push	{r7}
 80076a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80076a8:	4b06      	ldr	r3, [pc, #24]	; (80076c4 <HAL_IncTick+0x20>)
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	461a      	mov	r2, r3
 80076ae:	4b06      	ldr	r3, [pc, #24]	; (80076c8 <HAL_IncTick+0x24>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4413      	add	r3, r2
 80076b4:	4a04      	ldr	r2, [pc, #16]	; (80076c8 <HAL_IncTick+0x24>)
 80076b6:	6013      	str	r3, [r2, #0]
}
 80076b8:	bf00      	nop
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	2000015c 	.word	0x2000015c
 80076c8:	200015e4 	.word	0x200015e4

080076cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80076cc:	b480      	push	{r7}
 80076ce:	af00      	add	r7, sp, #0
  return uwTick;
 80076d0:	4b03      	ldr	r3, [pc, #12]	; (80076e0 <HAL_GetTick+0x14>)
 80076d2:	681b      	ldr	r3, [r3, #0]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	200015e4 	.word	0x200015e4

080076e4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80076e4:	b480      	push	{r7}
 80076e6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80076e8:	4b03      	ldr	r3, [pc, #12]	; (80076f8 <HAL_GetTickPrio+0x14>)
 80076ea:	681b      	ldr	r3, [r3, #0]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	20000158 	.word	0x20000158

080076fc <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80076fc:	b480      	push	{r7}
 80076fe:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8007700:	4b03      	ldr	r3, [pc, #12]	; (8007710 <HAL_GetTickFreq+0x14>)
 8007702:	781b      	ldrb	r3, [r3, #0]
}
 8007704:	4618      	mov	r0, r3
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	2000015c 	.word	0x2000015c

08007714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f003 0307 	and.w	r3, r3, #7
 8007722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007724:	4b0c      	ldr	r3, [pc, #48]	; (8007758 <__NVIC_SetPriorityGrouping+0x44>)
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007730:	4013      	ands	r3, r2
 8007732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800773c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007746:	4a04      	ldr	r2, [pc, #16]	; (8007758 <__NVIC_SetPriorityGrouping+0x44>)
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	60d3      	str	r3, [r2, #12]
}
 800774c:	bf00      	nop
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	e000ed00 	.word	0xe000ed00

0800775c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800775c:	b480      	push	{r7}
 800775e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007760:	4b04      	ldr	r3, [pc, #16]	; (8007774 <__NVIC_GetPriorityGrouping+0x18>)
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	0a1b      	lsrs	r3, r3, #8
 8007766:	f003 0307 	and.w	r3, r3, #7
}
 800776a:	4618      	mov	r0, r3
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	e000ed00 	.word	0xe000ed00

08007778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	4603      	mov	r3, r0
 8007780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007786:	2b00      	cmp	r3, #0
 8007788:	db0b      	blt.n	80077a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800778a:	79fb      	ldrb	r3, [r7, #7]
 800778c:	f003 021f 	and.w	r2, r3, #31
 8007790:	4907      	ldr	r1, [pc, #28]	; (80077b0 <__NVIC_EnableIRQ+0x38>)
 8007792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007796:	095b      	lsrs	r3, r3, #5
 8007798:	2001      	movs	r0, #1
 800779a:	fa00 f202 	lsl.w	r2, r0, r2
 800779e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80077a2:	bf00      	nop
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	e000e100 	.word	0xe000e100

080077b4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	4603      	mov	r3, r0
 80077bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	db12      	blt.n	80077ec <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80077c6:	79fb      	ldrb	r3, [r7, #7]
 80077c8:	f003 021f 	and.w	r2, r3, #31
 80077cc:	490a      	ldr	r1, [pc, #40]	; (80077f8 <__NVIC_DisableIRQ+0x44>)
 80077ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077d2:	095b      	lsrs	r3, r3, #5
 80077d4:	2001      	movs	r0, #1
 80077d6:	fa00 f202 	lsl.w	r2, r0, r2
 80077da:	3320      	adds	r3, #32
 80077dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80077e0:	f3bf 8f4f 	dsb	sy
}
 80077e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80077e6:	f3bf 8f6f 	isb	sy
}
 80077ea:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr
 80077f8:	e000e100 	.word	0xe000e100

080077fc <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	4603      	mov	r3, r0
 8007804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800780a:	2b00      	cmp	r3, #0
 800780c:	db0c      	blt.n	8007828 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800780e:	79fb      	ldrb	r3, [r7, #7]
 8007810:	f003 021f 	and.w	r2, r3, #31
 8007814:	4907      	ldr	r1, [pc, #28]	; (8007834 <__NVIC_SetPendingIRQ+0x38>)
 8007816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800781a:	095b      	lsrs	r3, r3, #5
 800781c:	2001      	movs	r0, #1
 800781e:	fa00 f202 	lsl.w	r2, r0, r2
 8007822:	3340      	adds	r3, #64	; 0x40
 8007824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr
 8007834:	e000e100 	.word	0xe000e100

08007838 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	4603      	mov	r3, r0
 8007840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007846:	2b00      	cmp	r3, #0
 8007848:	db0c      	blt.n	8007864 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800784a:	79fb      	ldrb	r3, [r7, #7]
 800784c:	f003 021f 	and.w	r2, r3, #31
 8007850:	4907      	ldr	r1, [pc, #28]	; (8007870 <__NVIC_ClearPendingIRQ+0x38>)
 8007852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007856:	095b      	lsrs	r3, r3, #5
 8007858:	2001      	movs	r0, #1
 800785a:	fa00 f202 	lsl.w	r2, r0, r2
 800785e:	3360      	adds	r3, #96	; 0x60
 8007860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	e000e100 	.word	0xe000e100

08007874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	6039      	str	r1, [r7, #0]
 800787e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007884:	2b00      	cmp	r3, #0
 8007886:	db0a      	blt.n	800789e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	b2da      	uxtb	r2, r3
 800788c:	490c      	ldr	r1, [pc, #48]	; (80078c0 <__NVIC_SetPriority+0x4c>)
 800788e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007892:	0112      	lsls	r2, r2, #4
 8007894:	b2d2      	uxtb	r2, r2
 8007896:	440b      	add	r3, r1
 8007898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800789c:	e00a      	b.n	80078b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	b2da      	uxtb	r2, r3
 80078a2:	4908      	ldr	r1, [pc, #32]	; (80078c4 <__NVIC_SetPriority+0x50>)
 80078a4:	79fb      	ldrb	r3, [r7, #7]
 80078a6:	f003 030f 	and.w	r3, r3, #15
 80078aa:	3b04      	subs	r3, #4
 80078ac:	0112      	lsls	r2, r2, #4
 80078ae:	b2d2      	uxtb	r2, r2
 80078b0:	440b      	add	r3, r1
 80078b2:	761a      	strb	r2, [r3, #24]
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	e000e100 	.word	0xe000e100
 80078c4:	e000ed00 	.word	0xe000ed00

080078c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b089      	sub	sp, #36	; 0x24
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f003 0307 	and.w	r3, r3, #7
 80078da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	f1c3 0307 	rsb	r3, r3, #7
 80078e2:	2b04      	cmp	r3, #4
 80078e4:	bf28      	it	cs
 80078e6:	2304      	movcs	r3, #4
 80078e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	3304      	adds	r3, #4
 80078ee:	2b06      	cmp	r3, #6
 80078f0:	d902      	bls.n	80078f8 <NVIC_EncodePriority+0x30>
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	3b03      	subs	r3, #3
 80078f6:	e000      	b.n	80078fa <NVIC_EncodePriority+0x32>
 80078f8:	2300      	movs	r3, #0
 80078fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	fa02 f303 	lsl.w	r3, r2, r3
 8007906:	43da      	mvns	r2, r3
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	401a      	ands	r2, r3
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007910:	f04f 31ff 	mov.w	r1, #4294967295
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	fa01 f303 	lsl.w	r3, r1, r3
 800791a:	43d9      	mvns	r1, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007920:	4313      	orrs	r3, r2
         );
}
 8007922:	4618      	mov	r0, r3
 8007924:	3724      	adds	r7, #36	; 0x24
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
	...

08007930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	3b01      	subs	r3, #1
 800793c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007940:	d301      	bcc.n	8007946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007942:	2301      	movs	r3, #1
 8007944:	e00f      	b.n	8007966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007946:	4a0a      	ldr	r2, [pc, #40]	; (8007970 <SysTick_Config+0x40>)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	3b01      	subs	r3, #1
 800794c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800794e:	210f      	movs	r1, #15
 8007950:	f04f 30ff 	mov.w	r0, #4294967295
 8007954:	f7ff ff8e 	bl	8007874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007958:	4b05      	ldr	r3, [pc, #20]	; (8007970 <SysTick_Config+0x40>)
 800795a:	2200      	movs	r2, #0
 800795c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800795e:	4b04      	ldr	r3, [pc, #16]	; (8007970 <SysTick_Config+0x40>)
 8007960:	2207      	movs	r2, #7
 8007962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	e000e010 	.word	0xe000e010

08007974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7ff fec9 	bl	8007714 <__NVIC_SetPriorityGrouping>
}
 8007982:	bf00      	nop
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b086      	sub	sp, #24
 800798e:	af00      	add	r7, sp, #0
 8007990:	4603      	mov	r3, r0
 8007992:	60b9      	str	r1, [r7, #8]
 8007994:	607a      	str	r2, [r7, #4]
 8007996:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007998:	f7ff fee0 	bl	800775c <__NVIC_GetPriorityGrouping>
 800799c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	68b9      	ldr	r1, [r7, #8]
 80079a2:	6978      	ldr	r0, [r7, #20]
 80079a4:	f7ff ff90 	bl	80078c8 <NVIC_EncodePriority>
 80079a8:	4602      	mov	r2, r0
 80079aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079ae:	4611      	mov	r1, r2
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7ff ff5f 	bl	8007874 <__NVIC_SetPriority>
}
 80079b6:	bf00      	nop
 80079b8:	3718      	adds	r7, #24
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b082      	sub	sp, #8
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	4603      	mov	r3, r0
 80079c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80079c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7ff fed3 	bl	8007778 <__NVIC_EnableIRQ>
}
 80079d2:	bf00      	nop
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b082      	sub	sp, #8
 80079de:	af00      	add	r7, sp, #0
 80079e0:	4603      	mov	r3, r0
 80079e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80079e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7ff fee3 	bl	80077b4 <__NVIC_DisableIRQ>
}
 80079ee:	bf00      	nop
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b082      	sub	sp, #8
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7ff ff96 	bl	8007930 <SysTick_Config>
 8007a04:	4603      	mov	r3, r0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b082      	sub	sp, #8
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	4603      	mov	r3, r0
 8007a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8007a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7ff feed 	bl	80077fc <__NVIC_SetPendingIRQ>
}
 8007a22:	bf00      	nop
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b082      	sub	sp, #8
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	4603      	mov	r3, r0
 8007a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7ff fefd 	bl	8007838 <__NVIC_ClearPendingIRQ>
}
 8007a3e:	bf00      	nop
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
	...

08007a48 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d101      	bne.n	8007a5a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e08e      	b.n	8007b78 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	4b47      	ldr	r3, [pc, #284]	; (8007b80 <HAL_DMA_Init+0x138>)
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d80f      	bhi.n	8007a86 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	4b45      	ldr	r3, [pc, #276]	; (8007b84 <HAL_DMA_Init+0x13c>)
 8007a6e:	4413      	add	r3, r2
 8007a70:	4a45      	ldr	r2, [pc, #276]	; (8007b88 <HAL_DMA_Init+0x140>)
 8007a72:	fba2 2303 	umull	r2, r3, r2, r3
 8007a76:	091b      	lsrs	r3, r3, #4
 8007a78:	009a      	lsls	r2, r3, #2
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a42      	ldr	r2, [pc, #264]	; (8007b8c <HAL_DMA_Init+0x144>)
 8007a82:	641a      	str	r2, [r3, #64]	; 0x40
 8007a84:	e00e      	b.n	8007aa4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	4b40      	ldr	r3, [pc, #256]	; (8007b90 <HAL_DMA_Init+0x148>)
 8007a8e:	4413      	add	r3, r2
 8007a90:	4a3d      	ldr	r2, [pc, #244]	; (8007b88 <HAL_DMA_Init+0x140>)
 8007a92:	fba2 2303 	umull	r2, r3, r2, r3
 8007a96:	091b      	lsrs	r3, r3, #4
 8007a98:	009a      	lsls	r2, r3, #2
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a3c      	ldr	r2, [pc, #240]	; (8007b94 <HAL_DMA_Init+0x14c>)
 8007aa2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007abe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007ac8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ae0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f9bc 	bl	8007e74 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b04:	d102      	bne.n	8007b0c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b14:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007b18:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007b22:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d010      	beq.n	8007b4e <HAL_DMA_Init+0x106>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	2b04      	cmp	r3, #4
 8007b32:	d80c      	bhi.n	8007b4e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f9db 	bl	8007ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b3e:	2200      	movs	r2, #0
 8007b40:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007b4a:	605a      	str	r2, [r3, #4]
 8007b4c:	e008      	b.n	8007b60 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	40020407 	.word	0x40020407
 8007b84:	bffdfff8 	.word	0xbffdfff8
 8007b88:	cccccccd 	.word	0xcccccccd
 8007b8c:	40020000 	.word	0x40020000
 8007b90:	bffdfbf8 	.word	0xbffdfbf8
 8007b94:	40020400 	.word	0x40020400

08007b98 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d101      	bne.n	8007baa <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e04f      	b.n	8007c4a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d008      	beq.n	8007bc8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2204      	movs	r2, #4
 8007bba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e040      	b.n	8007c4a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 020e 	bic.w	r2, r2, #14
 8007bd6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007be2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007be6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f022 0201 	bic.w	r2, r2, #1
 8007bf6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bfc:	f003 021c 	and.w	r2, r3, #28
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c04:	2101      	movs	r1, #1
 8007c06:	fa01 f202 	lsl.w	r2, r1, r2
 8007c0a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007c14:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00c      	beq.n	8007c38 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c2c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007c36:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	370c      	adds	r7, #12
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b084      	sub	sp, #16
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	d005      	beq.n	8007c7a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2204      	movs	r2, #4
 8007c72:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	73fb      	strb	r3, [r7, #15]
 8007c78:	e047      	b.n	8007d0a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f022 020e 	bic.w	r2, r2, #14
 8007c88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f022 0201 	bic.w	r2, r2, #1
 8007c98:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ca4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ca8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cae:	f003 021c 	and.w	r2, r3, #28
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8007cbc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007cc6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00c      	beq.n	8007cea <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cde:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007ce8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d003      	beq.n	8007d0a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	4798      	blx	r3
    }
  }
  return status;
 8007d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d30:	f003 031c 	and.w	r3, r3, #28
 8007d34:	2204      	movs	r2, #4
 8007d36:	409a      	lsls	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d026      	beq.n	8007d8e <HAL_DMA_IRQHandler+0x7a>
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	f003 0304 	and.w	r3, r3, #4
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d021      	beq.n	8007d8e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0320 	and.w	r3, r3, #32
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d107      	bne.n	8007d68 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f022 0204 	bic.w	r2, r2, #4
 8007d66:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d6c:	f003 021c 	and.w	r2, r3, #28
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d74:	2104      	movs	r1, #4
 8007d76:	fa01 f202 	lsl.w	r2, r1, r2
 8007d7a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d071      	beq.n	8007e68 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007d8c:	e06c      	b.n	8007e68 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d92:	f003 031c 	and.w	r3, r3, #28
 8007d96:	2202      	movs	r2, #2
 8007d98:	409a      	lsls	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d02e      	beq.n	8007e00 <HAL_DMA_IRQHandler+0xec>
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	f003 0302 	and.w	r3, r3, #2
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d029      	beq.n	8007e00 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 0320 	and.w	r3, r3, #32
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10b      	bne.n	8007dd2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f022 020a 	bic.w	r2, r2, #10
 8007dc8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd6:	f003 021c 	and.w	r2, r3, #28
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dde:	2102      	movs	r1, #2
 8007de0:	fa01 f202 	lsl.w	r2, r1, r2
 8007de4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d038      	beq.n	8007e68 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007dfe:	e033      	b.n	8007e68 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e04:	f003 031c 	and.w	r3, r3, #28
 8007e08:	2208      	movs	r2, #8
 8007e0a:	409a      	lsls	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	4013      	ands	r3, r2
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d02a      	beq.n	8007e6a <HAL_DMA_IRQHandler+0x156>
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	f003 0308 	and.w	r3, r3, #8
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d025      	beq.n	8007e6a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f022 020e 	bic.w	r2, r2, #14
 8007e2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e32:	f003 021c 	and.w	r2, r3, #28
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3a:	2101      	movs	r1, #1
 8007e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8007e40:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2201      	movs	r2, #1
 8007e46:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d004      	beq.n	8007e6a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007e68:	bf00      	nop
 8007e6a:	bf00      	nop
}
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
	...

08007e74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	461a      	mov	r2, r3
 8007e82:	4b17      	ldr	r3, [pc, #92]	; (8007ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d80a      	bhi.n	8007e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e8c:	089b      	lsrs	r3, r3, #2
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007e94:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	6493      	str	r3, [r2, #72]	; 0x48
 8007e9c:	e007      	b.n	8007eae <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ea2:	089b      	lsrs	r3, r3, #2
 8007ea4:	009a      	lsls	r2, r3, #2
 8007ea6:	4b0f      	ldr	r3, [pc, #60]	; (8007ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007ea8:	4413      	add	r3, r2
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	3b08      	subs	r3, #8
 8007eb6:	4a0c      	ldr	r2, [pc, #48]	; (8007ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ebc:	091b      	lsrs	r3, r3, #4
 8007ebe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a0a      	ldr	r2, [pc, #40]	; (8007eec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007ec4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f003 031f 	and.w	r3, r3, #31
 8007ecc:	2201      	movs	r2, #1
 8007ece:	409a      	lsls	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007ed4:	bf00      	nop
 8007ed6:	3714      	adds	r7, #20
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr
 8007ee0:	40020407 	.word	0x40020407
 8007ee4:	4002081c 	.word	0x4002081c
 8007ee8:	cccccccd 	.word	0xcccccccd
 8007eec:	40020880 	.word	0x40020880

08007ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f00:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	4b0b      	ldr	r3, [pc, #44]	; (8007f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007f06:	4413      	add	r3, r2
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a09      	ldr	r2, [pc, #36]	; (8007f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8007f14:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	f003 0303 	and.w	r3, r3, #3
 8007f1e:	2201      	movs	r2, #1
 8007f20:	409a      	lsls	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007f26:	bf00      	nop
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	1000823f 	.word	0x1000823f
 8007f38:	40020940 	.word	0x40020940

08007f3c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b087      	sub	sp, #28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007f46:	2300      	movs	r3, #0
 8007f48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007f4a:	e14c      	b.n	80081e6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	2101      	movs	r1, #1
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	fa01 f303 	lsl.w	r3, r1, r3
 8007f58:	4013      	ands	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f000 813e 	beq.w	80081e0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f003 0303 	and.w	r3, r3, #3
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d005      	beq.n	8007f7c <HAL_GPIO_Init+0x40>
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	f003 0303 	and.w	r3, r3, #3
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d130      	bne.n	8007fde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	005b      	lsls	r3, r3, #1
 8007f86:	2203      	movs	r2, #3
 8007f88:	fa02 f303 	lsl.w	r3, r2, r3
 8007f8c:	43db      	mvns	r3, r3
 8007f8e:	693a      	ldr	r2, [r7, #16]
 8007f90:	4013      	ands	r3, r2
 8007f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	68da      	ldr	r2, [r3, #12]
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	005b      	lsls	r3, r3, #1
 8007f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fba:	43db      	mvns	r3, r3
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	091b      	lsrs	r3, r3, #4
 8007fc8:	f003 0201 	and.w	r2, r3, #1
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	f003 0303 	and.w	r3, r3, #3
 8007fe6:	2b03      	cmp	r3, #3
 8007fe8:	d017      	beq.n	800801a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	005b      	lsls	r3, r3, #1
 8007ff4:	2203      	movs	r2, #3
 8007ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8007ffa:	43db      	mvns	r3, r3
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	4013      	ands	r3, r2
 8008000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	689a      	ldr	r2, [r3, #8]
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	005b      	lsls	r3, r3, #1
 800800a:	fa02 f303 	lsl.w	r3, r2, r3
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	4313      	orrs	r3, r2
 8008012:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	f003 0303 	and.w	r3, r3, #3
 8008022:	2b02      	cmp	r3, #2
 8008024:	d123      	bne.n	800806e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	08da      	lsrs	r2, r3, #3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	3208      	adds	r2, #8
 800802e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008032:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f003 0307 	and.w	r3, r3, #7
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	220f      	movs	r2, #15
 800803e:	fa02 f303 	lsl.w	r3, r2, r3
 8008042:	43db      	mvns	r3, r3
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	4013      	ands	r3, r2
 8008048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	691a      	ldr	r2, [r3, #16]
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f003 0307 	and.w	r3, r3, #7
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	fa02 f303 	lsl.w	r3, r2, r3
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	4313      	orrs	r3, r2
 800805e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	08da      	lsrs	r2, r3, #3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	3208      	adds	r2, #8
 8008068:	6939      	ldr	r1, [r7, #16]
 800806a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	005b      	lsls	r3, r3, #1
 8008078:	2203      	movs	r2, #3
 800807a:	fa02 f303 	lsl.w	r3, r2, r3
 800807e:	43db      	mvns	r3, r3
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	4013      	ands	r3, r2
 8008084:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f003 0203 	and.w	r2, r3, #3
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	005b      	lsls	r3, r3, #1
 8008092:	fa02 f303 	lsl.w	r3, r2, r3
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	4313      	orrs	r3, r2
 800809a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f000 8098 	beq.w	80081e0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80080b0:	4a54      	ldr	r2, [pc, #336]	; (8008204 <HAL_GPIO_Init+0x2c8>)
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	089b      	lsrs	r3, r3, #2
 80080b6:	3302      	adds	r3, #2
 80080b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	f003 0303 	and.w	r3, r3, #3
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	220f      	movs	r2, #15
 80080c8:	fa02 f303 	lsl.w	r3, r2, r3
 80080cc:	43db      	mvns	r3, r3
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	4013      	ands	r3, r2
 80080d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80080da:	d019      	beq.n	8008110 <HAL_GPIO_Init+0x1d4>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a4a      	ldr	r2, [pc, #296]	; (8008208 <HAL_GPIO_Init+0x2cc>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d013      	beq.n	800810c <HAL_GPIO_Init+0x1d0>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a49      	ldr	r2, [pc, #292]	; (800820c <HAL_GPIO_Init+0x2d0>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d00d      	beq.n	8008108 <HAL_GPIO_Init+0x1cc>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a48      	ldr	r2, [pc, #288]	; (8008210 <HAL_GPIO_Init+0x2d4>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d007      	beq.n	8008104 <HAL_GPIO_Init+0x1c8>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a47      	ldr	r2, [pc, #284]	; (8008214 <HAL_GPIO_Init+0x2d8>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d101      	bne.n	8008100 <HAL_GPIO_Init+0x1c4>
 80080fc:	2304      	movs	r3, #4
 80080fe:	e008      	b.n	8008112 <HAL_GPIO_Init+0x1d6>
 8008100:	2307      	movs	r3, #7
 8008102:	e006      	b.n	8008112 <HAL_GPIO_Init+0x1d6>
 8008104:	2303      	movs	r3, #3
 8008106:	e004      	b.n	8008112 <HAL_GPIO_Init+0x1d6>
 8008108:	2302      	movs	r3, #2
 800810a:	e002      	b.n	8008112 <HAL_GPIO_Init+0x1d6>
 800810c:	2301      	movs	r3, #1
 800810e:	e000      	b.n	8008112 <HAL_GPIO_Init+0x1d6>
 8008110:	2300      	movs	r3, #0
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	f002 0203 	and.w	r2, r2, #3
 8008118:	0092      	lsls	r2, r2, #2
 800811a:	4093      	lsls	r3, r2
 800811c:	693a      	ldr	r2, [r7, #16]
 800811e:	4313      	orrs	r3, r2
 8008120:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008122:	4938      	ldr	r1, [pc, #224]	; (8008204 <HAL_GPIO_Init+0x2c8>)
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	089b      	lsrs	r3, r3, #2
 8008128:	3302      	adds	r3, #2
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008130:	4b39      	ldr	r3, [pc, #228]	; (8008218 <HAL_GPIO_Init+0x2dc>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	43db      	mvns	r3, r3
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	4013      	ands	r3, r2
 800813e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d003      	beq.n	8008154 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	4313      	orrs	r3, r2
 8008152:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008154:	4a30      	ldr	r2, [pc, #192]	; (8008218 <HAL_GPIO_Init+0x2dc>)
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800815a:	4b2f      	ldr	r3, [pc, #188]	; (8008218 <HAL_GPIO_Init+0x2dc>)
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	43db      	mvns	r3, r3
 8008164:	693a      	ldr	r2, [r7, #16]
 8008166:	4013      	ands	r3, r2
 8008168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	4313      	orrs	r3, r2
 800817c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800817e:	4a26      	ldr	r2, [pc, #152]	; (8008218 <HAL_GPIO_Init+0x2dc>)
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008184:	4b24      	ldr	r3, [pc, #144]	; (8008218 <HAL_GPIO_Init+0x2dc>)
 8008186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800818a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	43db      	mvns	r3, r3
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	4013      	ands	r3, r2
 8008194:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d003      	beq.n	80081aa <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80081a2:	693a      	ldr	r2, [r7, #16]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80081aa:	4a1b      	ldr	r2, [pc, #108]	; (8008218 <HAL_GPIO_Init+0x2dc>)
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80081b2:	4b19      	ldr	r3, [pc, #100]	; (8008218 <HAL_GPIO_Init+0x2dc>)
 80081b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	43db      	mvns	r3, r3
 80081be:	693a      	ldr	r2, [r7, #16]
 80081c0:	4013      	ands	r3, r2
 80081c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d003      	beq.n	80081d8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80081d8:	4a0f      	ldr	r2, [pc, #60]	; (8008218 <HAL_GPIO_Init+0x2dc>)
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	3301      	adds	r3, #1
 80081e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	fa22 f303 	lsr.w	r3, r2, r3
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f47f aeab 	bne.w	8007f4c <HAL_GPIO_Init+0x10>
  }
}
 80081f6:	bf00      	nop
 80081f8:	bf00      	nop
 80081fa:	371c      	adds	r7, #28
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr
 8008204:	40010000 	.word	0x40010000
 8008208:	48000400 	.word	0x48000400
 800820c:	48000800 	.word	0x48000800
 8008210:	48000c00 	.word	0x48000c00
 8008214:	48001000 	.word	0x48001000
 8008218:	58000800 	.word	0x58000800

0800821c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	460b      	mov	r3, r1
 8008226:	807b      	strh	r3, [r7, #2]
 8008228:	4613      	mov	r3, r2
 800822a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800822c:	787b      	ldrb	r3, [r7, #1]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d003      	beq.n	800823a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008232:	887a      	ldrh	r2, [r7, #2]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008238:	e002      	b.n	8008240 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800823a:	887a      	ldrh	r2, [r7, #2]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8008252:	4b0a      	ldr	r3, [pc, #40]	; (800827c <HAL_HSEM_IRQHandler+0x30>)
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8008258:	4b08      	ldr	r3, [pc, #32]	; (800827c <HAL_HSEM_IRQHandler+0x30>)
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	43db      	mvns	r3, r3
 8008260:	4906      	ldr	r1, [pc, #24]	; (800827c <HAL_HSEM_IRQHandler+0x30>)
 8008262:	4013      	ands	r3, r2
 8008264:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8008266:	4a05      	ldr	r2, [pc, #20]	; (800827c <HAL_HSEM_IRQHandler+0x30>)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f807 	bl	8008280 <HAL_HSEM_FreeCallback>
}
 8008272:	bf00      	nop
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	58001500 	.word	0x58001500

08008280 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8008288:	bf00      	nop
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800829c:	2300      	movs	r3, #0
 800829e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d01e      	beq.n	80082e4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80082a6:	4b13      	ldr	r3, [pc, #76]	; (80082f4 <HAL_IPCC_Init+0x60>)
 80082a8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d102      	bne.n	80082bc <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7fe fe4e 	bl	8006f58 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80082bc:	68b8      	ldr	r0, [r7, #8]
 80082be:	f000 f85b 	bl	8008378 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f82c 	bl	800832c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80082e2:	e001      	b.n	80082e8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80082e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	58000c00 	.word	0x58000c00

080082f8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	4613      	mov	r3, r2
 8008304:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8008306:	bf00      	nop
 8008308:	3714      	adds	r7, #20
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr

08008312 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8008312:	b480      	push	{r7}
 8008314:	b085      	sub	sp, #20
 8008316:	af00      	add	r7, sp, #0
 8008318:	60f8      	str	r0, [r7, #12]
 800831a:	60b9      	str	r1, [r7, #8]
 800831c:	4613      	mov	r3, r2
 800831e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8008320:	bf00      	nop
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8008334:	2300      	movs	r3, #0
 8008336:	60fb      	str	r3, [r7, #12]
 8008338:	e00f      	b.n	800835a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4413      	add	r3, r2
 8008342:	4a0b      	ldr	r2, [pc, #44]	; (8008370 <IPCC_SetDefaultCallbacks+0x44>)
 8008344:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	3306      	adds	r3, #6
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	4413      	add	r3, r2
 8008350:	4a08      	ldr	r2, [pc, #32]	; (8008374 <IPCC_SetDefaultCallbacks+0x48>)
 8008352:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	3301      	adds	r3, #1
 8008358:	60fb      	str	r3, [r7, #12]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2b05      	cmp	r3, #5
 800835e:	d9ec      	bls.n	800833a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8008360:	bf00      	nop
 8008362:	bf00      	nop
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop
 8008370:	080082f9 	.word	0x080082f9
 8008374:	08008313 	.word	0x08008313

08008378 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 800838c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	223f      	movs	r2, #63	; 0x3f
 8008392:	609a      	str	r2, [r3, #8]
}
 8008394:	bf00      	nop
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d101      	bne.n	80083b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e0c0      	b.n	8008534 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d106      	bne.n	80083cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7fe ff00 	bl	80071cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2203      	movs	r2, #3
 80083d0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4618      	mov	r0, r3
 80083da:	f004 f97d 	bl	800c6d8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083de:	2300      	movs	r3, #0
 80083e0:	73fb      	strb	r3, [r7, #15]
 80083e2:	e03e      	b.n	8008462 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80083e4:	7bfa      	ldrb	r2, [r7, #15]
 80083e6:	6879      	ldr	r1, [r7, #4]
 80083e8:	4613      	mov	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	4413      	add	r3, r2
 80083ee:	00db      	lsls	r3, r3, #3
 80083f0:	440b      	add	r3, r1
 80083f2:	3311      	adds	r3, #17
 80083f4:	2201      	movs	r2, #1
 80083f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80083f8:	7bfa      	ldrb	r2, [r7, #15]
 80083fa:	6879      	ldr	r1, [r7, #4]
 80083fc:	4613      	mov	r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	4413      	add	r3, r2
 8008402:	00db      	lsls	r3, r3, #3
 8008404:	440b      	add	r3, r1
 8008406:	3310      	adds	r3, #16
 8008408:	7bfa      	ldrb	r2, [r7, #15]
 800840a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800840c:	7bfa      	ldrb	r2, [r7, #15]
 800840e:	6879      	ldr	r1, [r7, #4]
 8008410:	4613      	mov	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	00db      	lsls	r3, r3, #3
 8008418:	440b      	add	r3, r1
 800841a:	3313      	adds	r3, #19
 800841c:	2200      	movs	r2, #0
 800841e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008420:	7bfa      	ldrb	r2, [r7, #15]
 8008422:	6879      	ldr	r1, [r7, #4]
 8008424:	4613      	mov	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	440b      	add	r3, r1
 800842e:	3320      	adds	r3, #32
 8008430:	2200      	movs	r2, #0
 8008432:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008434:	7bfa      	ldrb	r2, [r7, #15]
 8008436:	6879      	ldr	r1, [r7, #4]
 8008438:	4613      	mov	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	00db      	lsls	r3, r3, #3
 8008440:	440b      	add	r3, r1
 8008442:	3324      	adds	r3, #36	; 0x24
 8008444:	2200      	movs	r2, #0
 8008446:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008448:	7bfb      	ldrb	r3, [r7, #15]
 800844a:	6879      	ldr	r1, [r7, #4]
 800844c:	1c5a      	adds	r2, r3, #1
 800844e:	4613      	mov	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	00db      	lsls	r3, r3, #3
 8008456:	440b      	add	r3, r1
 8008458:	2200      	movs	r2, #0
 800845a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800845c:	7bfb      	ldrb	r3, [r7, #15]
 800845e:	3301      	adds	r3, #1
 8008460:	73fb      	strb	r3, [r7, #15]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	791b      	ldrb	r3, [r3, #4]
 8008466:	7bfa      	ldrb	r2, [r7, #15]
 8008468:	429a      	cmp	r2, r3
 800846a:	d3bb      	bcc.n	80083e4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800846c:	2300      	movs	r3, #0
 800846e:	73fb      	strb	r3, [r7, #15]
 8008470:	e044      	b.n	80084fc <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008472:	7bfa      	ldrb	r2, [r7, #15]
 8008474:	6879      	ldr	r1, [r7, #4]
 8008476:	4613      	mov	r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4413      	add	r3, r2
 800847c:	00db      	lsls	r3, r3, #3
 800847e:	440b      	add	r3, r1
 8008480:	f203 1351 	addw	r3, r3, #337	; 0x151
 8008484:	2200      	movs	r2, #0
 8008486:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008488:	7bfa      	ldrb	r2, [r7, #15]
 800848a:	6879      	ldr	r1, [r7, #4]
 800848c:	4613      	mov	r3, r2
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	4413      	add	r3, r2
 8008492:	00db      	lsls	r3, r3, #3
 8008494:	440b      	add	r3, r1
 8008496:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800849a:	7bfa      	ldrb	r2, [r7, #15]
 800849c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800849e:	7bfa      	ldrb	r2, [r7, #15]
 80084a0:	6879      	ldr	r1, [r7, #4]
 80084a2:	4613      	mov	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	4413      	add	r3, r2
 80084a8:	00db      	lsls	r3, r3, #3
 80084aa:	440b      	add	r3, r1
 80084ac:	f203 1353 	addw	r3, r3, #339	; 0x153
 80084b0:	2200      	movs	r2, #0
 80084b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80084b4:	7bfa      	ldrb	r2, [r7, #15]
 80084b6:	6879      	ldr	r1, [r7, #4]
 80084b8:	4613      	mov	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4413      	add	r3, r2
 80084be:	00db      	lsls	r3, r3, #3
 80084c0:	440b      	add	r3, r1
 80084c2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80084c6:	2200      	movs	r2, #0
 80084c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80084ca:	7bfa      	ldrb	r2, [r7, #15]
 80084cc:	6879      	ldr	r1, [r7, #4]
 80084ce:	4613      	mov	r3, r2
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	4413      	add	r3, r2
 80084d4:	00db      	lsls	r3, r3, #3
 80084d6:	440b      	add	r3, r1
 80084d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80084dc:	2200      	movs	r2, #0
 80084de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80084e0:	7bfa      	ldrb	r2, [r7, #15]
 80084e2:	6879      	ldr	r1, [r7, #4]
 80084e4:	4613      	mov	r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	4413      	add	r3, r2
 80084ea:	00db      	lsls	r3, r3, #3
 80084ec:	440b      	add	r3, r1
 80084ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80084f2:	2200      	movs	r2, #0
 80084f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084f6:	7bfb      	ldrb	r3, [r7, #15]
 80084f8:	3301      	adds	r3, #1
 80084fa:	73fb      	strb	r3, [r7, #15]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	791b      	ldrb	r3, [r3, #4]
 8008500:	7bfa      	ldrb	r2, [r7, #15]
 8008502:	429a      	cmp	r2, r3
 8008504:	d3b5      	bcc.n	8008472 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6818      	ldr	r0, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	3304      	adds	r3, #4
 800850e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008512:	f004 f8fc 	bl	800c70e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	7a9b      	ldrb	r3, [r3, #10]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d102      	bne.n	8008532 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 f805 	bl	800853c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2201      	movs	r2, #1
 800854e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008560:	b29b      	uxth	r3, r3
 8008562:	f043 0301 	orr.w	r3, r3, #1
 8008566:	b29a      	uxth	r2, r3
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008574:	b29b      	uxth	r3, r3
 8008576:	f043 0302 	orr.w	r3, r3, #2
 800857a:	b29a      	uxth	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3714      	adds	r7, #20
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008590:	b480      	push	{r7}
 8008592:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008594:	4b05      	ldr	r3, [pc, #20]	; (80085ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a04      	ldr	r2, [pc, #16]	; (80085ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800859a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800859e:	6013      	str	r3, [r2, #0]
}
 80085a0:	bf00      	nop
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	58000400 	.word	0x58000400

080085b0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80085b0:	b480      	push	{r7}
 80085b2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80085b4:	4b04      	ldr	r3, [pc, #16]	; (80085c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80085bc:	4618      	mov	r0, r3
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	58000400 	.word	0x58000400

080085cc <LL_RCC_HSE_IsEnabledDiv2>:
{
 80085cc:	b480      	push	{r7}
 80085ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80085d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085de:	d101      	bne.n	80085e4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80085e0:	2301      	movs	r3, #1
 80085e2:	e000      	b.n	80085e6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <LL_RCC_HSE_Enable>:
{
 80085f0:	b480      	push	{r7}
 80085f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80085f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008602:	6013      	str	r3, [r2, #0]
}
 8008604:	bf00      	nop
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr

0800860e <LL_RCC_HSE_Disable>:
{
 800860e:	b480      	push	{r7}
 8008610:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8008612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800861c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008620:	6013      	str	r3, [r2, #0]
}
 8008622:	bf00      	nop
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <LL_RCC_HSE_IsReady>:
{
 800862c:	b480      	push	{r7}
 800862e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8008630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800863a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800863e:	d101      	bne.n	8008644 <LL_RCC_HSE_IsReady+0x18>
 8008640:	2301      	movs	r3, #1
 8008642:	e000      	b.n	8008646 <LL_RCC_HSE_IsReady+0x1a>
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <LL_RCC_HSI_Enable>:
{
 8008650:	b480      	push	{r7}
 8008652:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800865e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008662:	6013      	str	r3, [r2, #0]
}
 8008664:	bf00      	nop
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr

0800866e <LL_RCC_HSI_Disable>:
{
 800866e:	b480      	push	{r7}
 8008670:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8008672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800867c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008680:	6013      	str	r3, [r2, #0]
}
 8008682:	bf00      	nop
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <LL_RCC_HSI_IsReady>:
{
 800868c:	b480      	push	{r7}
 800868e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800869a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800869e:	d101      	bne.n	80086a4 <LL_RCC_HSI_IsReady+0x18>
 80086a0:	2301      	movs	r3, #1
 80086a2:	e000      	b.n	80086a6 <LL_RCC_HSI_IsReady+0x1a>
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80086b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	061b      	lsls	r3, r3, #24
 80086c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80086ca:	4313      	orrs	r3, r2
 80086cc:	604b      	str	r3, [r1, #4]
}
 80086ce:	bf00      	nop
 80086d0:	370c      	adds	r7, #12
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <LL_RCC_HSI48_Enable>:
{
 80086da:	b480      	push	{r7}
 80086dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80086de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80086e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086ea:	f043 0301 	orr.w	r3, r3, #1
 80086ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80086f2:	bf00      	nop
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <LL_RCC_HSI48_Disable>:
{
 80086fc:	b480      	push	{r7}
 80086fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8008700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008704:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008708:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800870c:	f023 0301 	bic.w	r3, r3, #1
 8008710:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8008714:	bf00      	nop
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <LL_RCC_HSI48_IsReady>:
{
 800871e:	b480      	push	{r7}
 8008720:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8008722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008726:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800872a:	f003 0302 	and.w	r3, r3, #2
 800872e:	2b02      	cmp	r3, #2
 8008730:	d101      	bne.n	8008736 <LL_RCC_HSI48_IsReady+0x18>
 8008732:	2301      	movs	r3, #1
 8008734:	e000      	b.n	8008738 <LL_RCC_HSI48_IsReady+0x1a>
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr

08008742 <LL_RCC_LSE_Enable>:
{
 8008742:	b480      	push	{r7}
 8008744:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800874a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800874e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008752:	f043 0301 	orr.w	r3, r3, #1
 8008756:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800875a:	bf00      	nop
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <LL_RCC_LSE_Disable>:
{
 8008764:	b480      	push	{r7}
 8008766:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800876c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008770:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008774:	f023 0301 	bic.w	r3, r3, #1
 8008778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800877c:	bf00      	nop
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr

08008786 <LL_RCC_LSE_EnableBypass>:
{
 8008786:	b480      	push	{r7}
 8008788:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800878a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800878e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008792:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008796:	f043 0304 	orr.w	r3, r3, #4
 800879a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800879e:	bf00      	nop
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <LL_RCC_LSE_DisableBypass>:
{
 80087a8:	b480      	push	{r7}
 80087aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80087ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80087b8:	f023 0304 	bic.w	r3, r3, #4
 80087bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80087c0:	bf00      	nop
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <LL_RCC_LSE_IsReady>:
{
 80087ca:	b480      	push	{r7}
 80087cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80087ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087d6:	f003 0302 	and.w	r3, r3, #2
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d101      	bne.n	80087e2 <LL_RCC_LSE_IsReady+0x18>
 80087de:	2301      	movs	r3, #1
 80087e0:	e000      	b.n	80087e4 <LL_RCC_LSE_IsReady+0x1a>
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr

080087ee <LL_RCC_LSI1_Enable>:
{
 80087ee:	b480      	push	{r7}
 80087f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80087f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80087fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80087fe:	f043 0301 	orr.w	r3, r3, #1
 8008802:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008806:	bf00      	nop
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <LL_RCC_LSI1_Disable>:
{
 8008810:	b480      	push	{r7}
 8008812:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8008814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800881c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008820:	f023 0301 	bic.w	r3, r3, #1
 8008824:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008828:	bf00      	nop
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <LL_RCC_LSI1_IsReady>:
{
 8008832:	b480      	push	{r7}
 8008834:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8008836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800883a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800883e:	f003 0302 	and.w	r3, r3, #2
 8008842:	2b02      	cmp	r3, #2
 8008844:	d101      	bne.n	800884a <LL_RCC_LSI1_IsReady+0x18>
 8008846:	2301      	movs	r3, #1
 8008848:	e000      	b.n	800884c <LL_RCC_LSI1_IsReady+0x1a>
 800884a:	2300      	movs	r3, #0
}
 800884c:	4618      	mov	r0, r3
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <LL_RCC_LSI2_Enable>:
{
 8008856:	b480      	push	{r7}
 8008858:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800885a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800885e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008862:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008866:	f043 0304 	orr.w	r3, r3, #4
 800886a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800886e:	bf00      	nop
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <LL_RCC_LSI2_Disable>:
{
 8008878:	b480      	push	{r7}
 800887a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800887c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008884:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008888:	f023 0304 	bic.w	r3, r3, #4
 800888c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008890:	bf00      	nop
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <LL_RCC_LSI2_IsReady>:
{
 800889a:	b480      	push	{r7}
 800889c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800889e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088a6:	f003 0308 	and.w	r3, r3, #8
 80088aa:	2b08      	cmp	r3, #8
 80088ac:	d101      	bne.n	80088b2 <LL_RCC_LSI2_IsReady+0x18>
 80088ae:	2301      	movs	r3, #1
 80088b0:	e000      	b.n	80088b4 <LL_RCC_LSI2_IsReady+0x1a>
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr

080088be <LL_RCC_LSI2_SetTrimming>:
{
 80088be:	b480      	push	{r7}
 80088c0:	b083      	sub	sp, #12
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80088c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	021b      	lsls	r3, r3, #8
 80088d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088da:	4313      	orrs	r3, r2
 80088dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80088e0:	bf00      	nop
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <LL_RCC_MSI_Enable>:
{
 80088ec:	b480      	push	{r7}
 80088ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80088f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80088fa:	f043 0301 	orr.w	r3, r3, #1
 80088fe:	6013      	str	r3, [r2, #0]
}
 8008900:	bf00      	nop
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr

0800890a <LL_RCC_MSI_Disable>:
{
 800890a:	b480      	push	{r7}
 800890c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800890e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008918:	f023 0301 	bic.w	r3, r3, #1
 800891c:	6013      	str	r3, [r2, #0]
}
 800891e:	bf00      	nop
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <LL_RCC_MSI_IsReady>:
{
 8008928:	b480      	push	{r7}
 800892a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800892c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 0302 	and.w	r3, r3, #2
 8008936:	2b02      	cmp	r3, #2
 8008938:	d101      	bne.n	800893e <LL_RCC_MSI_IsReady+0x16>
 800893a:	2301      	movs	r3, #1
 800893c:	e000      	b.n	8008940 <LL_RCC_MSI_IsReady+0x18>
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <LL_RCC_MSI_SetRange>:
{
 800894a:	b480      	push	{r7}
 800894c:	b083      	sub	sp, #12
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8008952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800895c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4313      	orrs	r3, r2
 8008964:	600b      	str	r3, [r1, #0]
}
 8008966:	bf00      	nop
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <LL_RCC_MSI_GetRange>:
{
 8008972:	b480      	push	{r7}
 8008974:	b083      	sub	sp, #12
 8008976:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8008978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008982:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2bb0      	cmp	r3, #176	; 0xb0
 8008988:	d901      	bls.n	800898e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800898a:	23b0      	movs	r3, #176	; 0xb0
 800898c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800898e:	687b      	ldr	r3, [r7, #4]
}
 8008990:	4618      	mov	r0, r3
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <LL_RCC_MSI_SetCalibTrimming>:
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80089a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	021b      	lsls	r3, r3, #8
 80089b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80089b6:	4313      	orrs	r3, r2
 80089b8:	604b      	str	r3, [r1, #4]
}
 80089ba:	bf00      	nop
 80089bc:	370c      	adds	r7, #12
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr

080089c6 <LL_RCC_SetSysClkSource>:
{
 80089c6:	b480      	push	{r7}
 80089c8:	b083      	sub	sp, #12
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80089ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	f023 0203 	bic.w	r2, r3, #3
 80089d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4313      	orrs	r3, r2
 80089e0:	608b      	str	r3, [r1, #8]
}
 80089e2:	bf00      	nop
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <LL_RCC_GetSysClkSource>:
{
 80089ee:	b480      	push	{r7}
 80089f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80089f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	f003 030c 	and.w	r3, r3, #12
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr

08008a06 <LL_RCC_SetAHBPrescaler>:
{
 8008a06:	b480      	push	{r7}
 8008a08:	b083      	sub	sp, #12
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8008a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	608b      	str	r3, [r1, #8]
}
 8008a22:	bf00      	nop
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <LL_C2_RCC_SetAHBPrescaler>:
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b083      	sub	sp, #12
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8008a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008a3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8008a4e:	bf00      	nop
 8008a50:	370c      	adds	r7, #12
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr

08008a5a <LL_RCC_SetAHB4Prescaler>:
{
 8008a5a:	b480      	push	{r7}
 8008a5c:	b083      	sub	sp, #12
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8008a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a66:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008a6a:	f023 020f 	bic.w	r2, r3, #15
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	091b      	lsrs	r3, r3, #4
 8008a72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a76:	4313      	orrs	r3, r2
 8008a78:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8008a7c:	bf00      	nop
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <LL_RCC_SetAPB1Prescaler>:
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8008a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008a9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	608b      	str	r3, [r1, #8]
}
 8008aa4:	bf00      	nop
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <LL_RCC_SetAPB2Prescaler>:
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8008ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008ac2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	608b      	str	r3, [r1, #8]
}
 8008acc:	bf00      	nop
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <LL_RCC_GetAHBPrescaler>:
{
 8008ad8:	b480      	push	{r7}
 8008ada:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <LL_RCC_GetAHB4Prescaler>:
{
 8008af0:	b480      	push	{r7}
 8008af2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8008af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008af8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008afc:	011b      	lsls	r3, r3, #4
 8008afe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <LL_RCC_GetAPB1Prescaler>:
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <LL_RCC_GetAPB2Prescaler>:
{
 8008b24:	b480      	push	{r7}
 8008b26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8008b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <LL_RCC_ConfigMCO>:
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE, MCOxSource | MCOxPrescaler);
 8008b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008b50:	6879      	ldr	r1, [r7, #4]
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	430b      	orrs	r3, r1
 8008b56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	608b      	str	r3, [r1, #8]
}
 8008b5e:	bf00      	nop
 8008b60:	370c      	adds	r7, #12
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr

08008b6a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b7c:	6013      	str	r3, [r2, #0]
}
 8008b7e:	bf00      	nop
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8008b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b9a:	6013      	str	r3, [r2, #0]
}
 8008b9c:	bf00      	nop
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr

08008ba6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8008baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bb8:	d101      	bne.n	8008bbe <LL_RCC_PLL_IsReady+0x18>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e000      	b.n	8008bc0 <LL_RCC_PLL_IsReady+0x1a>
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8008bca:	b480      	push	{r7}
 8008bcc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	0a1b      	lsrs	r3, r3, #8
 8008bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8008be4:	b480      	push	{r7}
 8008be6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8008be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8008c14:	b480      	push	{r7}
 8008c16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	f003 0303 	and.w	r3, r3, #3
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8008c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c3e:	d101      	bne.n	8008c44 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8008c40:	2301      	movs	r3, #1
 8008c42:	e000      	b.n	8008c46 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8008c50:	b480      	push	{r7}
 8008c52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8008c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c58:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c64:	d101      	bne.n	8008c6a <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8008c66:	2301      	movs	r3, #1
 8008c68:	e000      	b.n	8008c6c <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr

08008c76 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8008c76:	b480      	push	{r7}
 8008c78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8008c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c7e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c8a:	d101      	bne.n	8008c90 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e000      	b.n	8008c92 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8008ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008caa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cae:	d101      	bne.n	8008cb4 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e000      	b.n	8008cb6 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8008cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008cce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008cd2:	d101      	bne.n	8008cd8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e000      	b.n	8008cda <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ce4:	b590      	push	{r4, r7, lr}
 8008ce6:	b08d      	sub	sp, #52	; 0x34
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d101      	bne.n	8008cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e363      	b.n	80093be <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 0320 	and.w	r3, r3, #32
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f000 808d 	beq.w	8008e1e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d04:	f7ff fe73 	bl	80089ee <LL_RCC_GetSysClkSource>
 8008d08:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008d0a:	f7ff ff83 	bl	8008c14 <LL_RCC_PLL_GetMainSource>
 8008d0e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d005      	beq.n	8008d22 <HAL_RCC_OscConfig+0x3e>
 8008d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d18:	2b0c      	cmp	r3, #12
 8008d1a:	d147      	bne.n	8008dac <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8008d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d144      	bne.n	8008dac <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	69db      	ldr	r3, [r3, #28]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d101      	bne.n	8008d2e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e347      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008d32:	f7ff fe1e 	bl	8008972 <LL_RCC_MSI_GetRange>
 8008d36:	4603      	mov	r3, r0
 8008d38:	429c      	cmp	r4, r3
 8008d3a:	d914      	bls.n	8008d66 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d40:	4618      	mov	r0, r3
 8008d42:	f000 fd81 	bl	8009848 <RCC_SetFlashLatencyFromMSIRange>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d001      	beq.n	8008d50 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e336      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7ff fdf8 	bl	800894a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a1b      	ldr	r3, [r3, #32]
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7ff fe1c 	bl	800899c <LL_RCC_MSI_SetCalibTrimming>
 8008d64:	e013      	b.n	8008d8e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7ff fded 	bl	800894a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a1b      	ldr	r3, [r3, #32]
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7ff fe11 	bl	800899c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f000 fd62 	bl	8009848 <RCC_SetFlashLatencyFromMSIRange>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d001      	beq.n	8008d8e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e317      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008d8e:	f000 fd1b 	bl	80097c8 <HAL_RCC_GetHCLKFreq>
 8008d92:	4603      	mov	r3, r0
 8008d94:	4aa4      	ldr	r2, [pc, #656]	; (8009028 <HAL_RCC_OscConfig+0x344>)
 8008d96:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008d98:	4ba4      	ldr	r3, [pc, #656]	; (800902c <HAL_RCC_OscConfig+0x348>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7fe fc47 	bl	8007630 <HAL_InitTick>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d039      	beq.n	8008e1c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e308      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	69db      	ldr	r3, [r3, #28]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d01e      	beq.n	8008df2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008db4:	f7ff fd9a 	bl	80088ec <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008db8:	f7fe fc88 	bl	80076cc <HAL_GetTick>
 8008dbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8008dbe:	e008      	b.n	8008dd2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008dc0:	f7fe fc84 	bl	80076cc <HAL_GetTick>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	d901      	bls.n	8008dd2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e2f5      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8008dd2:	f7ff fda9 	bl	8008928 <LL_RCC_MSI_IsReady>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d0f1      	beq.n	8008dc0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7ff fdb2 	bl	800894a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7ff fdd6 	bl	800899c <LL_RCC_MSI_SetCalibTrimming>
 8008df0:	e015      	b.n	8008e1e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008df2:	f7ff fd8a 	bl	800890a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008df6:	f7fe fc69 	bl	80076cc <HAL_GetTick>
 8008dfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8008dfc:	e008      	b.n	8008e10 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008dfe:	f7fe fc65 	bl	80076cc <HAL_GetTick>
 8008e02:	4602      	mov	r2, r0
 8008e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e06:	1ad3      	subs	r3, r2, r3
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	d901      	bls.n	8008e10 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008e0c:	2303      	movs	r3, #3
 8008e0e:	e2d6      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8008e10:	f7ff fd8a 	bl	8008928 <LL_RCC_MSI_IsReady>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1f1      	bne.n	8008dfe <HAL_RCC_OscConfig+0x11a>
 8008e1a:	e000      	b.n	8008e1e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008e1c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 0301 	and.w	r3, r3, #1
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d047      	beq.n	8008eba <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e2a:	f7ff fde0 	bl	80089ee <LL_RCC_GetSysClkSource>
 8008e2e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008e30:	f7ff fef0 	bl	8008c14 <LL_RCC_PLL_GetMainSource>
 8008e34:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008e36:	6a3b      	ldr	r3, [r7, #32]
 8008e38:	2b08      	cmp	r3, #8
 8008e3a:	d005      	beq.n	8008e48 <HAL_RCC_OscConfig+0x164>
 8008e3c:	6a3b      	ldr	r3, [r7, #32]
 8008e3e:	2b0c      	cmp	r3, #12
 8008e40:	d108      	bne.n	8008e54 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	2b03      	cmp	r3, #3
 8008e46:	d105      	bne.n	8008e54 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d134      	bne.n	8008eba <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e2b4      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e5c:	d102      	bne.n	8008e64 <HAL_RCC_OscConfig+0x180>
 8008e5e:	f7ff fbc7 	bl	80085f0 <LL_RCC_HSE_Enable>
 8008e62:	e001      	b.n	8008e68 <HAL_RCC_OscConfig+0x184>
 8008e64:	f7ff fbd3 	bl	800860e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d012      	beq.n	8008e96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e70:	f7fe fc2c 	bl	80076cc <HAL_GetTick>
 8008e74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8008e76:	e008      	b.n	8008e8a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e78:	f7fe fc28 	bl	80076cc <HAL_GetTick>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	2b64      	cmp	r3, #100	; 0x64
 8008e84:	d901      	bls.n	8008e8a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008e86:	2303      	movs	r3, #3
 8008e88:	e299      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8008e8a:	f7ff fbcf 	bl	800862c <LL_RCC_HSE_IsReady>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d0f1      	beq.n	8008e78 <HAL_RCC_OscConfig+0x194>
 8008e94:	e011      	b.n	8008eba <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e96:	f7fe fc19 	bl	80076cc <HAL_GetTick>
 8008e9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008e9c:	e008      	b.n	8008eb0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e9e:	f7fe fc15 	bl	80076cc <HAL_GetTick>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	2b64      	cmp	r3, #100	; 0x64
 8008eaa:	d901      	bls.n	8008eb0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008eac:	2303      	movs	r3, #3
 8008eae:	e286      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8008eb0:	f7ff fbbc 	bl	800862c <LL_RCC_HSE_IsReady>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1f1      	bne.n	8008e9e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f003 0302 	and.w	r3, r3, #2
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d04c      	beq.n	8008f60 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ec6:	f7ff fd92 	bl	80089ee <LL_RCC_GetSysClkSource>
 8008eca:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008ecc:	f7ff fea2 	bl	8008c14 <LL_RCC_PLL_GetMainSource>
 8008ed0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	2b04      	cmp	r3, #4
 8008ed6:	d005      	beq.n	8008ee4 <HAL_RCC_OscConfig+0x200>
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	2b0c      	cmp	r3, #12
 8008edc:	d10e      	bne.n	8008efc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	d10b      	bne.n	8008efc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d101      	bne.n	8008ef0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	e266      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7ff fbdb 	bl	80086b0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008efa:	e031      	b.n	8008f60 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d019      	beq.n	8008f38 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008f04:	f7ff fba4 	bl	8008650 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f08:	f7fe fbe0 	bl	80076cc <HAL_GetTick>
 8008f0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8008f0e:	e008      	b.n	8008f22 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f10:	f7fe fbdc 	bl	80076cc <HAL_GetTick>
 8008f14:	4602      	mov	r2, r0
 8008f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f18:	1ad3      	subs	r3, r2, r3
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d901      	bls.n	8008f22 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	e24d      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8008f22:	f7ff fbb3 	bl	800868c <LL_RCC_HSI_IsReady>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d0f1      	beq.n	8008f10 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7ff fbbd 	bl	80086b0 <LL_RCC_HSI_SetCalibTrimming>
 8008f36:	e013      	b.n	8008f60 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f38:	f7ff fb99 	bl	800866e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f3c:	f7fe fbc6 	bl	80076cc <HAL_GetTick>
 8008f40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8008f42:	e008      	b.n	8008f56 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f44:	f7fe fbc2 	bl	80076cc <HAL_GetTick>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4c:	1ad3      	subs	r3, r2, r3
 8008f4e:	2b02      	cmp	r3, #2
 8008f50:	d901      	bls.n	8008f56 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8008f52:	2303      	movs	r3, #3
 8008f54:	e233      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8008f56:	f7ff fb99 	bl	800868c <LL_RCC_HSI_IsReady>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d1f1      	bne.n	8008f44 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f003 0308 	and.w	r3, r3, #8
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d106      	bne.n	8008f7a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	f000 80a3 	beq.w	80090c0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d076      	beq.n	8009070 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 0310 	and.w	r3, r3, #16
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d046      	beq.n	800901c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8008f8e:	f7ff fc50 	bl	8008832 <LL_RCC_LSI1_IsReady>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d113      	bne.n	8008fc0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8008f98:	f7ff fc29 	bl	80087ee <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008f9c:	f7fe fb96 	bl	80076cc <HAL_GetTick>
 8008fa0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008fa2:	e008      	b.n	8008fb6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008fa4:	f7fe fb92 	bl	80076cc <HAL_GetTick>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d901      	bls.n	8008fb6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	e203      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008fb6:	f7ff fc3c 	bl	8008832 <LL_RCC_LSI1_IsReady>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d0f1      	beq.n	8008fa4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8008fc0:	f7ff fc49 	bl	8008856 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fc4:	f7fe fb82 	bl	80076cc <HAL_GetTick>
 8008fc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008fca:	e008      	b.n	8008fde <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008fcc:	f7fe fb7e 	bl	80076cc <HAL_GetTick>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	2b03      	cmp	r3, #3
 8008fd8:	d901      	bls.n	8008fde <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e1ef      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008fde:	f7ff fc5c 	bl	800889a <LL_RCC_LSI2_IsReady>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d0f1      	beq.n	8008fcc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	699b      	ldr	r3, [r3, #24]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7ff fc66 	bl	80088be <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8008ff2:	f7ff fc0d 	bl	8008810 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ff6:	f7fe fb69 	bl	80076cc <HAL_GetTick>
 8008ffa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008ffc:	e008      	b.n	8009010 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008ffe:	f7fe fb65 	bl	80076cc <HAL_GetTick>
 8009002:	4602      	mov	r2, r0
 8009004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	2b02      	cmp	r3, #2
 800900a:	d901      	bls.n	8009010 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800900c:	2303      	movs	r3, #3
 800900e:	e1d6      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8009010:	f7ff fc0f 	bl	8008832 <LL_RCC_LSI1_IsReady>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1f1      	bne.n	8008ffe <HAL_RCC_OscConfig+0x31a>
 800901a:	e051      	b.n	80090c0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800901c:	f7ff fbe7 	bl	80087ee <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009020:	f7fe fb54 	bl	80076cc <HAL_GetTick>
 8009024:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8009026:	e00c      	b.n	8009042 <HAL_RCC_OscConfig+0x35e>
 8009028:	20000154 	.word	0x20000154
 800902c:	20000158 	.word	0x20000158
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009030:	f7fe fb4c 	bl	80076cc <HAL_GetTick>
 8009034:	4602      	mov	r2, r0
 8009036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	2b02      	cmp	r3, #2
 800903c:	d901      	bls.n	8009042 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800903e:	2303      	movs	r3, #3
 8009040:	e1bd      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8009042:	f7ff fbf6 	bl	8008832 <LL_RCC_LSI1_IsReady>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d0f1      	beq.n	8009030 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800904c:	f7ff fc14 	bl	8008878 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8009050:	e008      	b.n	8009064 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009052:	f7fe fb3b 	bl	80076cc <HAL_GetTick>
 8009056:	4602      	mov	r2, r0
 8009058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905a:	1ad3      	subs	r3, r2, r3
 800905c:	2b03      	cmp	r3, #3
 800905e:	d901      	bls.n	8009064 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8009060:	2303      	movs	r3, #3
 8009062:	e1ac      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8009064:	f7ff fc19 	bl	800889a <LL_RCC_LSI2_IsReady>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1f1      	bne.n	8009052 <HAL_RCC_OscConfig+0x36e>
 800906e:	e027      	b.n	80090c0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8009070:	f7ff fc02 	bl	8008878 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009074:	f7fe fb2a 	bl	80076cc <HAL_GetTick>
 8009078:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800907a:	e008      	b.n	800908e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800907c:	f7fe fb26 	bl	80076cc <HAL_GetTick>
 8009080:	4602      	mov	r2, r0
 8009082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	2b03      	cmp	r3, #3
 8009088:	d901      	bls.n	800908e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800908a:	2303      	movs	r3, #3
 800908c:	e197      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800908e:	f7ff fc04 	bl	800889a <LL_RCC_LSI2_IsReady>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1f1      	bne.n	800907c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8009098:	f7ff fbba 	bl	8008810 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800909c:	f7fe fb16 	bl	80076cc <HAL_GetTick>
 80090a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80090a2:	e008      	b.n	80090b6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80090a4:	f7fe fb12 	bl	80076cc <HAL_GetTick>
 80090a8:	4602      	mov	r2, r0
 80090aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d901      	bls.n	80090b6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80090b2:	2303      	movs	r3, #3
 80090b4:	e183      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80090b6:	f7ff fbbc 	bl	8008832 <LL_RCC_LSI1_IsReady>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1f1      	bne.n	80090a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 0304 	and.w	r3, r3, #4
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d05b      	beq.n	8009184 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80090cc:	4ba7      	ldr	r3, [pc, #668]	; (800936c <HAL_RCC_OscConfig+0x688>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d114      	bne.n	8009102 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80090d8:	f7ff fa5a 	bl	8008590 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80090dc:	f7fe faf6 	bl	80076cc <HAL_GetTick>
 80090e0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80090e2:	e008      	b.n	80090f6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090e4:	f7fe faf2 	bl	80076cc <HAL_GetTick>
 80090e8:	4602      	mov	r2, r0
 80090ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	d901      	bls.n	80090f6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80090f2:	2303      	movs	r3, #3
 80090f4:	e163      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80090f6:	4b9d      	ldr	r3, [pc, #628]	; (800936c <HAL_RCC_OscConfig+0x688>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d0f0      	beq.n	80090e4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d102      	bne.n	8009110 <HAL_RCC_OscConfig+0x42c>
 800910a:	f7ff fb1a 	bl	8008742 <LL_RCC_LSE_Enable>
 800910e:	e00c      	b.n	800912a <HAL_RCC_OscConfig+0x446>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	2b05      	cmp	r3, #5
 8009116:	d104      	bne.n	8009122 <HAL_RCC_OscConfig+0x43e>
 8009118:	f7ff fb35 	bl	8008786 <LL_RCC_LSE_EnableBypass>
 800911c:	f7ff fb11 	bl	8008742 <LL_RCC_LSE_Enable>
 8009120:	e003      	b.n	800912a <HAL_RCC_OscConfig+0x446>
 8009122:	f7ff fb1f 	bl	8008764 <LL_RCC_LSE_Disable>
 8009126:	f7ff fb3f 	bl	80087a8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d014      	beq.n	800915c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009132:	f7fe facb 	bl	80076cc <HAL_GetTick>
 8009136:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8009138:	e00a      	b.n	8009150 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800913a:	f7fe fac7 	bl	80076cc <HAL_GetTick>
 800913e:	4602      	mov	r2, r0
 8009140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	f241 3288 	movw	r2, #5000	; 0x1388
 8009148:	4293      	cmp	r3, r2
 800914a:	d901      	bls.n	8009150 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800914c:	2303      	movs	r3, #3
 800914e:	e136      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8009150:	f7ff fb3b 	bl	80087ca <LL_RCC_LSE_IsReady>
 8009154:	4603      	mov	r3, r0
 8009156:	2b00      	cmp	r3, #0
 8009158:	d0ef      	beq.n	800913a <HAL_RCC_OscConfig+0x456>
 800915a:	e013      	b.n	8009184 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800915c:	f7fe fab6 	bl	80076cc <HAL_GetTick>
 8009160:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8009162:	e00a      	b.n	800917a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009164:	f7fe fab2 	bl	80076cc <HAL_GetTick>
 8009168:	4602      	mov	r2, r0
 800916a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916c:	1ad3      	subs	r3, r2, r3
 800916e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009172:	4293      	cmp	r3, r2
 8009174:	d901      	bls.n	800917a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8009176:	2303      	movs	r3, #3
 8009178:	e121      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800917a:	f7ff fb26 	bl	80087ca <LL_RCC_LSE_IsReady>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d1ef      	bne.n	8009164 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800918c:	2b00      	cmp	r3, #0
 800918e:	d02c      	beq.n	80091ea <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009194:	2b00      	cmp	r3, #0
 8009196:	d014      	beq.n	80091c2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009198:	f7ff fa9f 	bl	80086da <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800919c:	f7fe fa96 	bl	80076cc <HAL_GetTick>
 80091a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80091a2:	e008      	b.n	80091b6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80091a4:	f7fe fa92 	bl	80076cc <HAL_GetTick>
 80091a8:	4602      	mov	r2, r0
 80091aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ac:	1ad3      	subs	r3, r2, r3
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d901      	bls.n	80091b6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80091b2:	2303      	movs	r3, #3
 80091b4:	e103      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80091b6:	f7ff fab2 	bl	800871e <LL_RCC_HSI48_IsReady>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d0f1      	beq.n	80091a4 <HAL_RCC_OscConfig+0x4c0>
 80091c0:	e013      	b.n	80091ea <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80091c2:	f7ff fa9b 	bl	80086fc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091c6:	f7fe fa81 	bl	80076cc <HAL_GetTick>
 80091ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80091cc:	e008      	b.n	80091e0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80091ce:	f7fe fa7d 	bl	80076cc <HAL_GetTick>
 80091d2:	4602      	mov	r2, r0
 80091d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	2b02      	cmp	r3, #2
 80091da:	d901      	bls.n	80091e0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80091dc:	2303      	movs	r3, #3
 80091de:	e0ee      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80091e0:	f7ff fa9d 	bl	800871e <LL_RCC_HSI48_IsReady>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1f1      	bne.n	80091ce <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f000 80e4 	beq.w	80093bc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80091f4:	f7ff fbfb 	bl	80089ee <LL_RCC_GetSysClkSource>
 80091f8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80091fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009206:	2b02      	cmp	r3, #2
 8009208:	f040 80b4 	bne.w	8009374 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f003 0203 	and.w	r2, r3, #3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009216:	429a      	cmp	r2, r3
 8009218:	d123      	bne.n	8009262 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009224:	429a      	cmp	r2, r3
 8009226:	d11c      	bne.n	8009262 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	0a1b      	lsrs	r3, r3, #8
 800922c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009234:	429a      	cmp	r2, r3
 8009236:	d114      	bne.n	8009262 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009242:	429a      	cmp	r2, r3
 8009244:	d10d      	bne.n	8009262 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009250:	429a      	cmp	r2, r3
 8009252:	d106      	bne.n	8009262 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800925e:	429a      	cmp	r2, r3
 8009260:	d05d      	beq.n	800931e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	2b0c      	cmp	r3, #12
 8009266:	d058      	beq.n	800931a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009272:	2b00      	cmp	r3, #0
 8009274:	d001      	beq.n	800927a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e0a1      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800927a:	f7ff fc85 	bl	8008b88 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800927e:	f7fe fa25 	bl	80076cc <HAL_GetTick>
 8009282:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009284:	e008      	b.n	8009298 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009286:	f7fe fa21 	bl	80076cc <HAL_GetTick>
 800928a:	4602      	mov	r2, r0
 800928c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928e:	1ad3      	subs	r3, r2, r3
 8009290:	2b02      	cmp	r3, #2
 8009292:	d901      	bls.n	8009298 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8009294:	2303      	movs	r3, #3
 8009296:	e092      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d1ef      	bne.n	8009286 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80092a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092aa:	68da      	ldr	r2, [r3, #12]
 80092ac:	4b30      	ldr	r3, [pc, #192]	; (8009370 <HAL_RCC_OscConfig+0x68c>)
 80092ae:	4013      	ands	r3, r2
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80092b8:	4311      	orrs	r1, r2
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80092be:	0212      	lsls	r2, r2, #8
 80092c0:	4311      	orrs	r1, r2
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80092c6:	4311      	orrs	r1, r2
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80092cc:	4311      	orrs	r1, r2
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80092d2:	430a      	orrs	r2, r1
 80092d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80092d8:	4313      	orrs	r3, r2
 80092da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80092dc:	f7ff fc45 	bl	8008b6a <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80092e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80092ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80092f0:	f7fe f9ec 	bl	80076cc <HAL_GetTick>
 80092f4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092f6:	e008      	b.n	800930a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092f8:	f7fe f9e8 	bl	80076cc <HAL_GetTick>
 80092fc:	4602      	mov	r2, r0
 80092fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	2b02      	cmp	r3, #2
 8009304:	d901      	bls.n	800930a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8009306:	2303      	movs	r3, #3
 8009308:	e059      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800930a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009314:	2b00      	cmp	r3, #0
 8009316:	d0ef      	beq.n	80092f8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009318:	e050      	b.n	80093bc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	e04f      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800931e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009328:	2b00      	cmp	r3, #0
 800932a:	d147      	bne.n	80093bc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800932c:	f7ff fc1d 	bl	8008b6a <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800933a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800933e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009340:	f7fe f9c4 	bl	80076cc <HAL_GetTick>
 8009344:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009346:	e008      	b.n	800935a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009348:	f7fe f9c0 	bl	80076cc <HAL_GetTick>
 800934c:	4602      	mov	r2, r0
 800934e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	2b02      	cmp	r3, #2
 8009354:	d901      	bls.n	800935a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8009356:	2303      	movs	r3, #3
 8009358:	e031      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800935a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009364:	2b00      	cmp	r3, #0
 8009366:	d0ef      	beq.n	8009348 <HAL_RCC_OscConfig+0x664>
 8009368:	e028      	b.n	80093bc <HAL_RCC_OscConfig+0x6d8>
 800936a:	bf00      	nop
 800936c:	58000400 	.word	0x58000400
 8009370:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	2b0c      	cmp	r3, #12
 8009378:	d01e      	beq.n	80093b8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800937a:	f7ff fc05 	bl	8008b88 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800937e:	f7fe f9a5 	bl	80076cc <HAL_GetTick>
 8009382:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009384:	e008      	b.n	8009398 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009386:	f7fe f9a1 	bl	80076cc <HAL_GetTick>
 800938a:	4602      	mov	r2, r0
 800938c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938e:	1ad3      	subs	r3, r2, r3
 8009390:	2b02      	cmp	r3, #2
 8009392:	d901      	bls.n	8009398 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8009394:	2303      	movs	r3, #3
 8009396:	e012      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1ef      	bne.n	8009386 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80093a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093aa:	68da      	ldr	r2, [r3, #12]
 80093ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80093b0:	4b05      	ldr	r3, [pc, #20]	; (80093c8 <HAL_RCC_OscConfig+0x6e4>)
 80093b2:	4013      	ands	r3, r2
 80093b4:	60cb      	str	r3, [r1, #12]
 80093b6:	e001      	b.n	80093bc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80093b8:	2301      	movs	r3, #1
 80093ba:	e000      	b.n	80093be <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3734      	adds	r7, #52	; 0x34
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd90      	pop	{r4, r7, pc}
 80093c6:	bf00      	nop
 80093c8:	eefefffc 	.word	0xeefefffc

080093cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d101      	bne.n	80093e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	e12d      	b.n	800963c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80093e0:	4b98      	ldr	r3, [pc, #608]	; (8009644 <HAL_RCC_ClockConfig+0x278>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f003 0307 	and.w	r3, r3, #7
 80093e8:	683a      	ldr	r2, [r7, #0]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d91b      	bls.n	8009426 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093ee:	4b95      	ldr	r3, [pc, #596]	; (8009644 <HAL_RCC_ClockConfig+0x278>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f023 0207 	bic.w	r2, r3, #7
 80093f6:	4993      	ldr	r1, [pc, #588]	; (8009644 <HAL_RCC_ClockConfig+0x278>)
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093fe:	f7fe f965 	bl	80076cc <HAL_GetTick>
 8009402:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009404:	e008      	b.n	8009418 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009406:	f7fe f961 	bl	80076cc <HAL_GetTick>
 800940a:	4602      	mov	r2, r0
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	2b02      	cmp	r3, #2
 8009412:	d901      	bls.n	8009418 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8009414:	2303      	movs	r3, #3
 8009416:	e111      	b.n	800963c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009418:	4b8a      	ldr	r3, [pc, #552]	; (8009644 <HAL_RCC_ClockConfig+0x278>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f003 0307 	and.w	r3, r3, #7
 8009420:	683a      	ldr	r2, [r7, #0]
 8009422:	429a      	cmp	r2, r3
 8009424:	d1ef      	bne.n	8009406 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 0302 	and.w	r3, r3, #2
 800942e:	2b00      	cmp	r3, #0
 8009430:	d016      	beq.n	8009460 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	4618      	mov	r0, r3
 8009438:	f7ff fae5 	bl	8008a06 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800943c:	f7fe f946 	bl	80076cc <HAL_GetTick>
 8009440:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8009442:	e008      	b.n	8009456 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009444:	f7fe f942 	bl	80076cc <HAL_GetTick>
 8009448:	4602      	mov	r2, r0
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	2b02      	cmp	r3, #2
 8009450:	d901      	bls.n	8009456 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8009452:	2303      	movs	r3, #3
 8009454:	e0f2      	b.n	800963c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8009456:	f7ff fbe9 	bl	8008c2c <LL_RCC_IsActiveFlag_HPRE>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d0f1      	beq.n	8009444 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 0320 	and.w	r3, r3, #32
 8009468:	2b00      	cmp	r3, #0
 800946a:	d016      	beq.n	800949a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	695b      	ldr	r3, [r3, #20]
 8009470:	4618      	mov	r0, r3
 8009472:	f7ff fadc 	bl	8008a2e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009476:	f7fe f929 	bl	80076cc <HAL_GetTick>
 800947a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800947c:	e008      	b.n	8009490 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800947e:	f7fe f925 	bl	80076cc <HAL_GetTick>
 8009482:	4602      	mov	r2, r0
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	1ad3      	subs	r3, r2, r3
 8009488:	2b02      	cmp	r3, #2
 800948a:	d901      	bls.n	8009490 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800948c:	2303      	movs	r3, #3
 800948e:	e0d5      	b.n	800963c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8009490:	f7ff fbde 	bl	8008c50 <LL_RCC_IsActiveFlag_C2HPRE>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d0f1      	beq.n	800947e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d016      	beq.n	80094d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	699b      	ldr	r3, [r3, #24]
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7ff fad5 	bl	8008a5a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80094b0:	f7fe f90c 	bl	80076cc <HAL_GetTick>
 80094b4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80094b6:	e008      	b.n	80094ca <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80094b8:	f7fe f908 	bl	80076cc <HAL_GetTick>
 80094bc:	4602      	mov	r2, r0
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	d901      	bls.n	80094ca <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80094c6:	2303      	movs	r3, #3
 80094c8:	e0b8      	b.n	800963c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80094ca:	f7ff fbd4 	bl	8008c76 <LL_RCC_IsActiveFlag_SHDHPRE>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d0f1      	beq.n	80094b8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 0304 	and.w	r3, r3, #4
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d016      	beq.n	800950e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7ff facf 	bl	8008a88 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80094ea:	f7fe f8ef 	bl	80076cc <HAL_GetTick>
 80094ee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80094f0:	e008      	b.n	8009504 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80094f2:	f7fe f8eb 	bl	80076cc <HAL_GetTick>
 80094f6:	4602      	mov	r2, r0
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	2b02      	cmp	r3, #2
 80094fe:	d901      	bls.n	8009504 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8009500:	2303      	movs	r3, #3
 8009502:	e09b      	b.n	800963c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8009504:	f7ff fbca 	bl	8008c9c <LL_RCC_IsActiveFlag_PPRE1>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d0f1      	beq.n	80094f2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f003 0308 	and.w	r3, r3, #8
 8009516:	2b00      	cmp	r3, #0
 8009518:	d017      	beq.n	800954a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	00db      	lsls	r3, r3, #3
 8009520:	4618      	mov	r0, r3
 8009522:	f7ff fac5 	bl	8008ab0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009526:	f7fe f8d1 	bl	80076cc <HAL_GetTick>
 800952a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800952c:	e008      	b.n	8009540 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800952e:	f7fe f8cd 	bl	80076cc <HAL_GetTick>
 8009532:	4602      	mov	r2, r0
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	1ad3      	subs	r3, r2, r3
 8009538:	2b02      	cmp	r3, #2
 800953a:	d901      	bls.n	8009540 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800953c:	2303      	movs	r3, #3
 800953e:	e07d      	b.n	800963c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8009540:	f7ff fbbe 	bl	8008cc0 <LL_RCC_IsActiveFlag_PPRE2>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d0f1      	beq.n	800952e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 0301 	and.w	r3, r3, #1
 8009552:	2b00      	cmp	r3, #0
 8009554:	d043      	beq.n	80095de <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	2b02      	cmp	r3, #2
 800955c:	d106      	bne.n	800956c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800955e:	f7ff f865 	bl	800862c <LL_RCC_HSE_IsReady>
 8009562:	4603      	mov	r3, r0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d11e      	bne.n	80095a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	e067      	b.n	800963c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	2b03      	cmp	r3, #3
 8009572:	d106      	bne.n	8009582 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8009574:	f7ff fb17 	bl	8008ba6 <LL_RCC_PLL_IsReady>
 8009578:	4603      	mov	r3, r0
 800957a:	2b00      	cmp	r3, #0
 800957c:	d113      	bne.n	80095a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	e05c      	b.n	800963c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d106      	bne.n	8009598 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800958a:	f7ff f9cd 	bl	8008928 <LL_RCC_MSI_IsReady>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d108      	bne.n	80095a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	e051      	b.n	800963c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8009598:	f7ff f878 	bl	800868c <LL_RCC_HSI_IsReady>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d101      	bne.n	80095a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e04a      	b.n	800963c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7ff fa0b 	bl	80089c6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095b0:	f7fe f88c 	bl	80076cc <HAL_GetTick>
 80095b4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095b6:	e00a      	b.n	80095ce <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095b8:	f7fe f888 	bl	80076cc <HAL_GetTick>
 80095bc:	4602      	mov	r2, r0
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d901      	bls.n	80095ce <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80095ca:	2303      	movs	r3, #3
 80095cc:	e036      	b.n	800963c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095ce:	f7ff fa0e 	bl	80089ee <LL_RCC_GetSysClkSource>
 80095d2:	4602      	mov	r2, r0
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	429a      	cmp	r2, r3
 80095dc:	d1ec      	bne.n	80095b8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80095de:	4b19      	ldr	r3, [pc, #100]	; (8009644 <HAL_RCC_ClockConfig+0x278>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f003 0307 	and.w	r3, r3, #7
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d21b      	bcs.n	8009624 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095ec:	4b15      	ldr	r3, [pc, #84]	; (8009644 <HAL_RCC_ClockConfig+0x278>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f023 0207 	bic.w	r2, r3, #7
 80095f4:	4913      	ldr	r1, [pc, #76]	; (8009644 <HAL_RCC_ClockConfig+0x278>)
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095fc:	f7fe f866 	bl	80076cc <HAL_GetTick>
 8009600:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009602:	e008      	b.n	8009616 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009604:	f7fe f862 	bl	80076cc <HAL_GetTick>
 8009608:	4602      	mov	r2, r0
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	1ad3      	subs	r3, r2, r3
 800960e:	2b02      	cmp	r3, #2
 8009610:	d901      	bls.n	8009616 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8009612:	2303      	movs	r3, #3
 8009614:	e012      	b.n	800963c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009616:	4b0b      	ldr	r3, [pc, #44]	; (8009644 <HAL_RCC_ClockConfig+0x278>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f003 0307 	and.w	r3, r3, #7
 800961e:	683a      	ldr	r2, [r7, #0]
 8009620:	429a      	cmp	r2, r3
 8009622:	d1ef      	bne.n	8009604 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8009624:	f000 f8d0 	bl	80097c8 <HAL_RCC_GetHCLKFreq>
 8009628:	4603      	mov	r3, r0
 800962a:	4a07      	ldr	r2, [pc, #28]	; (8009648 <HAL_RCC_ClockConfig+0x27c>)
 800962c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800962e:	f7fe f859 	bl	80076e4 <HAL_GetTickPrio>
 8009632:	4603      	mov	r3, r0
 8009634:	4618      	mov	r0, r3
 8009636:	f7fd fffb 	bl	8007630 <HAL_InitTick>
 800963a:	4603      	mov	r3, r0
}
 800963c:	4618      	mov	r0, r3
 800963e:	3710      	adds	r7, #16
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	58004000 	.word	0x58004000
 8009648:	20000154 	.word	0x20000154

0800964c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b08c      	sub	sp, #48	; 0x30
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8009658:	2302      	movs	r3, #2
 800965a:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800965c:	2303      	movs	r3, #3
 800965e:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8009660:	2300      	movs	r3, #0
 8009662:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800966a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	0c1b      	lsrs	r3, r3, #16
 8009670:	f003 030f 	and.w	r3, r3, #15
 8009674:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 8009678:	029b      	lsls	r3, r3, #10
 800967a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	0c1b      	lsrs	r3, r3, #16
 8009680:	f003 030f 	and.w	r3, r3, #15
 8009684:	627b      	str	r3, [r7, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index));
 8009686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800968a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800968c:	2101      	movs	r1, #1
 800968e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009690:	fa01 f303 	lsl.w	r3, r1, r3
 8009694:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009698:	4313      	orrs	r3, r2
 800969a:	64cb      	str	r3, [r1, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	b29b      	uxth	r3, r3
 80096a0:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	0d1b      	lsrs	r3, r3, #20
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 80096aa:	f107 0310 	add.w	r3, r7, #16
 80096ae:	4619      	mov	r1, r3
 80096b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096b2:	f7fe fc43 	bl	8007f3c <HAL_GPIO_Init>

  if (mcoindex == RCC_MCO1_INDEX)
 80096b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d104      	bne.n	80096c6 <HAL_RCC_MCOConfig+0x7a>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
 80096bc:	6879      	ldr	r1, [r7, #4]
 80096be:	68b8      	ldr	r0, [r7, #8]
 80096c0:	f7ff fa3c 	bl	8008b3c <LL_RCC_ConfigMCO>
    LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
  }
#endif /* RCC_MCO3_SUPPORT */
  else
  {}
}
 80096c4:	e010      	b.n	80096e8 <HAL_RCC_MCOConfig+0x9c>
  else if (mcoindex == RCC_MCO2_INDEX)
 80096c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096cc:	d104      	bne.n	80096d8 <HAL_RCC_MCOConfig+0x8c>
    LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
 80096ce:	6879      	ldr	r1, [r7, #4]
 80096d0:	68b8      	ldr	r0, [r7, #8]
 80096d2:	f7ff fa33 	bl	8008b3c <LL_RCC_ConfigMCO>
}
 80096d6:	e007      	b.n	80096e8 <HAL_RCC_MCOConfig+0x9c>
  else if (mcoindex == RCC_MCO3_INDEX)
 80096d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096de:	d103      	bne.n	80096e8 <HAL_RCC_MCOConfig+0x9c>
    LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
 80096e0:	6879      	ldr	r1, [r7, #4]
 80096e2:	68b8      	ldr	r0, [r7, #8]
 80096e4:	f7ff fa2a 	bl	8008b3c <LL_RCC_ConfigMCO>
}
 80096e8:	bf00      	nop
 80096ea:	3730      	adds	r7, #48	; 0x30
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80096f0:	b590      	push	{r4, r7, lr}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80096f6:	f7ff f97a 	bl	80089ee <LL_RCC_GetSysClkSource>
 80096fa:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d10a      	bne.n	8009718 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8009702:	f7ff f936 	bl	8008972 <LL_RCC_MSI_GetRange>
 8009706:	4603      	mov	r3, r0
 8009708:	091b      	lsrs	r3, r3, #4
 800970a:	f003 030f 	and.w	r3, r3, #15
 800970e:	4a2b      	ldr	r2, [pc, #172]	; (80097bc <HAL_RCC_GetSysClockFreq+0xcc>)
 8009710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009714:	60fb      	str	r3, [r7, #12]
 8009716:	e04b      	b.n	80097b0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2b04      	cmp	r3, #4
 800971c:	d102      	bne.n	8009724 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800971e:	4b28      	ldr	r3, [pc, #160]	; (80097c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009720:	60fb      	str	r3, [r7, #12]
 8009722:	e045      	b.n	80097b0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2b08      	cmp	r3, #8
 8009728:	d10a      	bne.n	8009740 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800972a:	f7fe ff4f 	bl	80085cc <LL_RCC_HSE_IsEnabledDiv2>
 800972e:	4603      	mov	r3, r0
 8009730:	2b01      	cmp	r3, #1
 8009732:	d102      	bne.n	800973a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8009734:	4b22      	ldr	r3, [pc, #136]	; (80097c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009736:	60fb      	str	r3, [r7, #12]
 8009738:	e03a      	b.n	80097b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800973a:	4b22      	ldr	r3, [pc, #136]	; (80097c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800973c:	60fb      	str	r3, [r7, #12]
 800973e:	e037      	b.n	80097b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8009740:	f7ff fa68 	bl	8008c14 <LL_RCC_PLL_GetMainSource>
 8009744:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	2b02      	cmp	r3, #2
 800974a:	d003      	beq.n	8009754 <HAL_RCC_GetSysClockFreq+0x64>
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	2b03      	cmp	r3, #3
 8009750:	d003      	beq.n	800975a <HAL_RCC_GetSysClockFreq+0x6a>
 8009752:	e00d      	b.n	8009770 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8009754:	4b1a      	ldr	r3, [pc, #104]	; (80097c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009756:	60bb      	str	r3, [r7, #8]
        break;
 8009758:	e015      	b.n	8009786 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800975a:	f7fe ff37 	bl	80085cc <LL_RCC_HSE_IsEnabledDiv2>
 800975e:	4603      	mov	r3, r0
 8009760:	2b01      	cmp	r3, #1
 8009762:	d102      	bne.n	800976a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8009764:	4b16      	ldr	r3, [pc, #88]	; (80097c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009766:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8009768:	e00d      	b.n	8009786 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800976a:	4b16      	ldr	r3, [pc, #88]	; (80097c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800976c:	60bb      	str	r3, [r7, #8]
        break;
 800976e:	e00a      	b.n	8009786 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8009770:	f7ff f8ff 	bl	8008972 <LL_RCC_MSI_GetRange>
 8009774:	4603      	mov	r3, r0
 8009776:	091b      	lsrs	r3, r3, #4
 8009778:	f003 030f 	and.w	r3, r3, #15
 800977c:	4a0f      	ldr	r2, [pc, #60]	; (80097bc <HAL_RCC_GetSysClockFreq+0xcc>)
 800977e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009782:	60bb      	str	r3, [r7, #8]
        break;
 8009784:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8009786:	f7ff fa20 	bl	8008bca <LL_RCC_PLL_GetN>
 800978a:	4602      	mov	r2, r0
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	fb03 f402 	mul.w	r4, r3, r2
 8009792:	f7ff fa33 	bl	8008bfc <LL_RCC_PLL_GetDivider>
 8009796:	4603      	mov	r3, r0
 8009798:	091b      	lsrs	r3, r3, #4
 800979a:	3301      	adds	r3, #1
 800979c:	fbb4 f4f3 	udiv	r4, r4, r3
 80097a0:	f7ff fa20 	bl	8008be4 <LL_RCC_PLL_GetR>
 80097a4:	4603      	mov	r3, r0
 80097a6:	0f5b      	lsrs	r3, r3, #29
 80097a8:	3301      	adds	r3, #1
 80097aa:	fbb4 f3f3 	udiv	r3, r4, r3
 80097ae:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80097b0:	68fb      	ldr	r3, [r7, #12]
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3714      	adds	r7, #20
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd90      	pop	{r4, r7, pc}
 80097ba:	bf00      	nop
 80097bc:	080148c8 	.word	0x080148c8
 80097c0:	00f42400 	.word	0x00f42400
 80097c4:	01e84800 	.word	0x01e84800

080097c8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80097c8:	b598      	push	{r3, r4, r7, lr}
 80097ca:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80097cc:	f7ff ff90 	bl	80096f0 <HAL_RCC_GetSysClockFreq>
 80097d0:	4604      	mov	r4, r0
 80097d2:	f7ff f981 	bl	8008ad8 <LL_RCC_GetAHBPrescaler>
 80097d6:	4603      	mov	r3, r0
 80097d8:	091b      	lsrs	r3, r3, #4
 80097da:	f003 030f 	and.w	r3, r3, #15
 80097de:	4a03      	ldr	r2, [pc, #12]	; (80097ec <HAL_RCC_GetHCLKFreq+0x24>)
 80097e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097e4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	bd98      	pop	{r3, r4, r7, pc}
 80097ec:	08014868 	.word	0x08014868

080097f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097f0:	b598      	push	{r3, r4, r7, lr}
 80097f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80097f4:	f7ff ffe8 	bl	80097c8 <HAL_RCC_GetHCLKFreq>
 80097f8:	4604      	mov	r4, r0
 80097fa:	f7ff f987 	bl	8008b0c <LL_RCC_GetAPB1Prescaler>
 80097fe:	4603      	mov	r3, r0
 8009800:	0a1b      	lsrs	r3, r3, #8
 8009802:	f003 0307 	and.w	r3, r3, #7
 8009806:	4a04      	ldr	r2, [pc, #16]	; (8009818 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800980c:	f003 031f 	and.w	r3, r3, #31
 8009810:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009814:	4618      	mov	r0, r3
 8009816:	bd98      	pop	{r3, r4, r7, pc}
 8009818:	080148a8 	.word	0x080148a8

0800981c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800981c:	b598      	push	{r3, r4, r7, lr}
 800981e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8009820:	f7ff ffd2 	bl	80097c8 <HAL_RCC_GetHCLKFreq>
 8009824:	4604      	mov	r4, r0
 8009826:	f7ff f97d 	bl	8008b24 <LL_RCC_GetAPB2Prescaler>
 800982a:	4603      	mov	r3, r0
 800982c:	0adb      	lsrs	r3, r3, #11
 800982e:	f003 0307 	and.w	r3, r3, #7
 8009832:	4a04      	ldr	r2, [pc, #16]	; (8009844 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009838:	f003 031f 	and.w	r3, r3, #31
 800983c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009840:	4618      	mov	r0, r3
 8009842:	bd98      	pop	{r3, r4, r7, pc}
 8009844:	080148a8 	.word	0x080148a8

08009848 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8009848:	b590      	push	{r4, r7, lr}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2bb0      	cmp	r3, #176	; 0xb0
 8009854:	d903      	bls.n	800985e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8009856:	4b15      	ldr	r3, [pc, #84]	; (80098ac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8009858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985a:	60fb      	str	r3, [r7, #12]
 800985c:	e007      	b.n	800986e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	091b      	lsrs	r3, r3, #4
 8009862:	f003 030f 	and.w	r3, r3, #15
 8009866:	4a11      	ldr	r2, [pc, #68]	; (80098ac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8009868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800986c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800986e:	f7ff f93f 	bl	8008af0 <LL_RCC_GetAHB4Prescaler>
 8009872:	4603      	mov	r3, r0
 8009874:	091b      	lsrs	r3, r3, #4
 8009876:	f003 030f 	and.w	r3, r3, #15
 800987a:	4a0d      	ldr	r2, [pc, #52]	; (80098b0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800987c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	fbb2 f3f3 	udiv	r3, r2, r3
 8009886:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	4a0a      	ldr	r2, [pc, #40]	; (80098b4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800988c:	fba2 2303 	umull	r2, r3, r2, r3
 8009890:	0c9c      	lsrs	r4, r3, #18
 8009892:	f7fe fe8d 	bl	80085b0 <HAL_PWREx_GetVoltageRange>
 8009896:	4603      	mov	r3, r0
 8009898:	4619      	mov	r1, r3
 800989a:	4620      	mov	r0, r4
 800989c:	f000 f80c 	bl	80098b8 <RCC_SetFlashLatency>
 80098a0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3714      	adds	r7, #20
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd90      	pop	{r4, r7, pc}
 80098aa:	bf00      	nop
 80098ac:	080148c8 	.word	0x080148c8
 80098b0:	08014868 	.word	0x08014868
 80098b4:	431bde83 	.word	0x431bde83

080098b8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80098b8:	b590      	push	{r4, r7, lr}
 80098ba:	b093      	sub	sp, #76	; 0x4c
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80098c2:	4b37      	ldr	r3, [pc, #220]	; (80099a0 <RCC_SetFlashLatency+0xe8>)
 80098c4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80098c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80098ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80098ce:	4a35      	ldr	r2, [pc, #212]	; (80099a4 <RCC_SetFlashLatency+0xec>)
 80098d0:	f107 031c 	add.w	r3, r7, #28
 80098d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80098d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80098da:	4b33      	ldr	r3, [pc, #204]	; (80099a8 <RCC_SetFlashLatency+0xf0>)
 80098dc:	f107 040c 	add.w	r4, r7, #12
 80098e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80098e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80098e6:	2300      	movs	r3, #0
 80098e8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098f0:	d11a      	bne.n	8009928 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80098f2:	2300      	movs	r3, #0
 80098f4:	643b      	str	r3, [r7, #64]	; 0x40
 80098f6:	e013      	b.n	8009920 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80098f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	3348      	adds	r3, #72	; 0x48
 80098fe:	443b      	add	r3, r7
 8009900:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	429a      	cmp	r2, r3
 8009908:	d807      	bhi.n	800991a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800990a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	3348      	adds	r3, #72	; 0x48
 8009910:	443b      	add	r3, r7
 8009912:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8009916:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8009918:	e020      	b.n	800995c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800991a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800991c:	3301      	adds	r3, #1
 800991e:	643b      	str	r3, [r7, #64]	; 0x40
 8009920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009922:	2b03      	cmp	r3, #3
 8009924:	d9e8      	bls.n	80098f8 <RCC_SetFlashLatency+0x40>
 8009926:	e019      	b.n	800995c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009928:	2300      	movs	r3, #0
 800992a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800992c:	e013      	b.n	8009956 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800992e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	3348      	adds	r3, #72	; 0x48
 8009934:	443b      	add	r3, r7
 8009936:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	429a      	cmp	r2, r3
 800993e:	d807      	bhi.n	8009950 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	3348      	adds	r3, #72	; 0x48
 8009946:	443b      	add	r3, r7
 8009948:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800994c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800994e:	e005      	b.n	800995c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009952:	3301      	adds	r3, #1
 8009954:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009958:	2b02      	cmp	r3, #2
 800995a:	d9e8      	bls.n	800992e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800995c:	4b13      	ldr	r3, [pc, #76]	; (80099ac <RCC_SetFlashLatency+0xf4>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f023 0207 	bic.w	r2, r3, #7
 8009964:	4911      	ldr	r1, [pc, #68]	; (80099ac <RCC_SetFlashLatency+0xf4>)
 8009966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009968:	4313      	orrs	r3, r2
 800996a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800996c:	f7fd feae 	bl	80076cc <HAL_GetTick>
 8009970:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8009972:	e008      	b.n	8009986 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009974:	f7fd feaa 	bl	80076cc <HAL_GetTick>
 8009978:	4602      	mov	r2, r0
 800997a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997c:	1ad3      	subs	r3, r2, r3
 800997e:	2b02      	cmp	r3, #2
 8009980:	d901      	bls.n	8009986 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8009982:	2303      	movs	r3, #3
 8009984:	e007      	b.n	8009996 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8009986:	4b09      	ldr	r3, [pc, #36]	; (80099ac <RCC_SetFlashLatency+0xf4>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 0307 	and.w	r3, r3, #7
 800998e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009990:	429a      	cmp	r2, r3
 8009992:	d1ef      	bne.n	8009974 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	374c      	adds	r7, #76	; 0x4c
 800999a:	46bd      	mov	sp, r7
 800999c:	bd90      	pop	{r4, r7, pc}
 800999e:	bf00      	nop
 80099a0:	080146c4 	.word	0x080146c4
 80099a4:	080146d4 	.word	0x080146d4
 80099a8:	080146e0 	.word	0x080146e0
 80099ac:	58004000 	.word	0x58004000

080099b0 <LL_RCC_LSE_IsEnabled>:
{
 80099b0:	b480      	push	{r7}
 80099b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80099b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099bc:	f003 0301 	and.w	r3, r3, #1
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d101      	bne.n	80099c8 <LL_RCC_LSE_IsEnabled+0x18>
 80099c4:	2301      	movs	r3, #1
 80099c6:	e000      	b.n	80099ca <LL_RCC_LSE_IsEnabled+0x1a>
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <LL_RCC_LSE_IsReady>:
{
 80099d4:	b480      	push	{r7}
 80099d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80099d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099e0:	f003 0302 	and.w	r3, r3, #2
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d101      	bne.n	80099ec <LL_RCC_LSE_IsReady+0x18>
 80099e8:	2301      	movs	r3, #1
 80099ea:	e000      	b.n	80099ee <LL_RCC_LSE_IsReady+0x1a>
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <LL_RCC_MSI_EnablePLLMode>:
{
 80099f8:	b480      	push	{r7}
 80099fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80099fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009a06:	f043 0304 	orr.w	r3, r3, #4
 8009a0a:	6013      	str	r3, [r2, #0]
}
 8009a0c:	bf00      	nop
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr

08009a16 <LL_RCC_SetRFWKPClockSource>:
{
 8009a16:	b480      	push	{r7}
 8009a18:	b083      	sub	sp, #12
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8009a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009a2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4313      	orrs	r3, r2
 8009a32:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8009a36:	bf00      	nop
 8009a38:	370c      	adds	r7, #12
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr

08009a42 <LL_RCC_SetSMPSClockSource>:
{
 8009a42:	b480      	push	{r7}
 8009a44:	b083      	sub	sp, #12
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8009a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a50:	f023 0203 	bic.w	r2, r3, #3
 8009a54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009a5e:	bf00      	nop
 8009a60:	370c      	adds	r7, #12
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr

08009a6a <LL_RCC_SetSMPSPrescaler>:
{
 8009a6a:	b480      	push	{r7}
 8009a6c:	b083      	sub	sp, #12
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8009a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009a7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4313      	orrs	r3, r2
 8009a84:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009a86:	bf00      	nop
 8009a88:	370c      	adds	r7, #12
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr

08009a92 <LL_RCC_SetUSARTClockSource>:
{
 8009a92:	b480      	push	{r7}
 8009a94:	b083      	sub	sp, #12
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8009a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aa2:	f023 0203 	bic.w	r2, r3, #3
 8009aa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4313      	orrs	r3, r2
 8009aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009ab2:	bf00      	nop
 8009ab4:	370c      	adds	r7, #12
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr

08009abe <LL_RCC_SetLPUARTClockSource>:
{
 8009abe:	b480      	push	{r7}
 8009ac0:	b083      	sub	sp, #12
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8009ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ace:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009ad2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009ade:	bf00      	nop
 8009ae0:	370c      	adds	r7, #12
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr

08009aea <LL_RCC_SetI2CClockSource>:
{
 8009aea:	b480      	push	{r7}
 8009aec:	b083      	sub	sp, #12
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8009af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009af6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	091b      	lsrs	r3, r3, #4
 8009afe:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8009b02:	43db      	mvns	r3, r3
 8009b04:	401a      	ands	r2, r3
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	011b      	lsls	r3, r3, #4
 8009b0a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8009b0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009b12:	4313      	orrs	r3, r2
 8009b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009b18:	bf00      	nop
 8009b1a:	370c      	adds	r7, #12
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr

08009b24 <LL_RCC_SetLPTIMClockSource>:
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8009b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b30:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	0c1b      	lsrs	r3, r3, #16
 8009b38:	041b      	lsls	r3, r3, #16
 8009b3a:	43db      	mvns	r3, r3
 8009b3c:	401a      	ands	r2, r3
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	041b      	lsls	r3, r3, #16
 8009b42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009b46:	4313      	orrs	r3, r2
 8009b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <LL_RCC_SetSAIClockSource>:
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8009b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009b6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	4313      	orrs	r3, r2
 8009b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009b78:	bf00      	nop
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <LL_RCC_SetRNGClockSource>:
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8009b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b94:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009b98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009ba4:	bf00      	nop
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <LL_RCC_SetCLK48ClockSource>:
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8009bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bc0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009bc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009bd0:	bf00      	nop
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <LL_RCC_SetUSBClockSource>:
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f7ff ffe3 	bl	8009bb0 <LL_RCC_SetCLK48ClockSource>
}
 8009bea:	bf00      	nop
 8009bec:	3708      	adds	r7, #8
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <LL_RCC_SetADCClockSource>:
{
 8009bf2:	b480      	push	{r7}
 8009bf4:	b083      	sub	sp, #12
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8009bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009c06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009c12:	bf00      	nop
 8009c14:	370c      	adds	r7, #12
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr

08009c1e <LL_RCC_SetRTCClockSource>:
{
 8009c1e:	b480      	push	{r7}
 8009c20:	b083      	sub	sp, #12
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009c3e:	bf00      	nop
 8009c40:	370c      	adds	r7, #12
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr

08009c4a <LL_RCC_GetRTCClockSource>:
{
 8009c4a:	b480      	push	{r7}
 8009c4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8009c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <LL_RCC_ForceBackupDomainReset>:
{
 8009c64:	b480      	push	{r7}
 8009c66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009c7c:	bf00      	nop
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr

08009c86 <LL_RCC_ReleaseBackupDomainReset>:
{
 8009c86:	b480      	push	{r7}
 8009c88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009c9e:	bf00      	nop
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <LL_RCC_PLLSAI1_Enable>:
{
 8009ca8:	b480      	push	{r7}
 8009caa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8009cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009cb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009cba:	6013      	str	r3, [r2, #0]
}
 8009cbc:	bf00      	nop
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr

08009cc6 <LL_RCC_PLLSAI1_Disable>:
{
 8009cc6:	b480      	push	{r7}
 8009cc8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8009cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009cd4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009cd8:	6013      	str	r3, [r2, #0]
}
 8009cda:	bf00      	nop
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <LL_RCC_PLLSAI1_IsReady>:
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8009ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009cf6:	d101      	bne.n	8009cfc <LL_RCC_PLLSAI1_IsReady+0x18>
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e000      	b.n	8009cfe <LL_RCC_PLLSAI1_IsReady+0x1a>
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b088      	sub	sp, #32
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8009d10:	2300      	movs	r3, #0
 8009d12:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8009d14:	2300      	movs	r3, #0
 8009d16:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d034      	beq.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009d2c:	d021      	beq.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8009d2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009d32:	d81b      	bhi.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009d34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d38:	d01d      	beq.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8009d3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d3e:	d815      	bhi.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d00b      	beq.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8009d44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d48:	d110      	bne.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8009d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d58:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8009d5a:	e00d      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	3304      	adds	r3, #4
 8009d60:	4618      	mov	r0, r3
 8009d62:	f000 f94d 	bl	800a000 <RCCEx_PLLSAI1_ConfigNP>
 8009d66:	4603      	mov	r3, r0
 8009d68:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009d6a:	e005      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	77fb      	strb	r3, [r7, #31]
        break;
 8009d70:	e002      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8009d72:	bf00      	nop
 8009d74:	e000      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8009d76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d78:	7ffb      	ldrb	r3, [r7, #31]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d105      	bne.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7ff fee8 	bl	8009b58 <LL_RCC_SetSAIClockSource>
 8009d88:	e001      	b.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d8a:	7ffb      	ldrb	r3, [r7, #31]
 8009d8c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d046      	beq.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8009d9a:	f7ff ff56 	bl	8009c4a <LL_RCC_GetRTCClockSource>
 8009d9e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da4:	69ba      	ldr	r2, [r7, #24]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d03c      	beq.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8009daa:	f7fe fbf1 	bl	8008590 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8009dae:	69bb      	ldr	r3, [r7, #24]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d105      	bne.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7ff ff30 	bl	8009c1e <LL_RCC_SetRTCClockSource>
 8009dbe:	e02e      	b.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8009dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dc8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8009dca:	f7ff ff4b 	bl	8009c64 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8009dce:	f7ff ff5a 	bl	8009c86 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8009de0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8009dea:	f7ff fde1 	bl	80099b0 <LL_RCC_LSE_IsEnabled>
 8009dee:	4603      	mov	r3, r0
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d114      	bne.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009df4:	f7fd fc6a 	bl	80076cc <HAL_GetTick>
 8009df8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8009dfa:	e00b      	b.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dfc:	f7fd fc66 	bl	80076cc <HAL_GetTick>
 8009e00:	4602      	mov	r2, r0
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	1ad3      	subs	r3, r2, r3
 8009e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d902      	bls.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8009e0e:	2303      	movs	r3, #3
 8009e10:	77fb      	strb	r3, [r7, #31]
              break;
 8009e12:	e004      	b.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8009e14:	f7ff fdde 	bl	80099d4 <LL_RCC_LSE_IsReady>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d1ee      	bne.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8009e1e:	7ffb      	ldrb	r3, [r7, #31]
 8009e20:	77bb      	strb	r3, [r7, #30]
 8009e22:	e001      	b.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e24:	7ffb      	ldrb	r3, [r7, #31]
 8009e26:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f003 0301 	and.w	r3, r3, #1
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d004      	beq.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	699b      	ldr	r3, [r3, #24]
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7ff fe2a 	bl	8009a92 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f003 0302 	and.w	r3, r3, #2
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d004      	beq.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	69db      	ldr	r3, [r3, #28]
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7ff fe35 	bl	8009abe <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f003 0310 	and.w	r3, r3, #16
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d004      	beq.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7ff fe5d 	bl	8009b24 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f003 0320 	and.w	r3, r3, #32
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d004      	beq.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7ff fe52 	bl	8009b24 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f003 0304 	and.w	r3, r3, #4
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d004      	beq.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a1b      	ldr	r3, [r3, #32]
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7ff fe2a 	bl	8009aea <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f003 0308 	and.w	r3, r3, #8
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d004      	beq.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7ff fe1f 	bl	8009aea <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d022      	beq.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7ff fe8d 	bl	8009bdc <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ec6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009eca:	d107      	bne.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8009ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009eda:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009ee4:	d10b      	bne.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	3304      	adds	r3, #4
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 f8e3 	bl	800a0b6 <RCCEx_PLLSAI1_ConfigNQ>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8009ef4:	7ffb      	ldrb	r3, [r7, #31]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d001      	beq.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8009efa:	7ffb      	ldrb	r3, [r7, #31]
 8009efc:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d02b      	beq.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f12:	d008      	beq.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f1c:	d003      	beq.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d105      	bne.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7ff fe2a 	bl	8009b84 <LL_RCC_SetRNGClockSource>
 8009f30:	e00a      	b.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f3a:	60fb      	str	r3, [r7, #12]
 8009f3c:	2000      	movs	r0, #0
 8009f3e:	f7ff fe21 	bl	8009b84 <LL_RCC_SetRNGClockSource>
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f7ff fe34 	bl	8009bb0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f4c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8009f50:	d107      	bne.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8009f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f60:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d022      	beq.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7ff fe3d 	bl	8009bf2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f80:	d107      	bne.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f90:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f9a:	d10b      	bne.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	3304      	adds	r3, #4
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f000 f8e3 	bl	800a16c <RCCEx_PLLSAI1_ConfigNR>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8009faa:	7ffb      	ldrb	r3, [r7, #31]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d001      	beq.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8009fb0:	7ffb      	ldrb	r3, [r7, #31]
 8009fb2:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d004      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7ff fd26 	bl	8009a16 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d009      	beq.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7ff fd45 	bl	8009a6a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7ff fd2c 	bl	8009a42 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8009fea:	7fbb      	ldrb	r3, [r7, #30]
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3720      	adds	r7, #32
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8009ff8:	f7ff fcfe 	bl	80099f8 <LL_RCC_MSI_EnablePLLMode>
}
 8009ffc:	bf00      	nop
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a008:	2300      	movs	r3, #0
 800a00a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800a00c:	f7ff fe5b 	bl	8009cc6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a010:	f7fd fb5c 	bl	80076cc <HAL_GetTick>
 800a014:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a016:	e009      	b.n	800a02c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a018:	f7fd fb58 	bl	80076cc <HAL_GetTick>
 800a01c:	4602      	mov	r2, r0
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	2b02      	cmp	r3, #2
 800a024:	d902      	bls.n	800a02c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800a026:	2303      	movs	r3, #3
 800a028:	73fb      	strb	r3, [r7, #15]
      break;
 800a02a:	e004      	b.n	800a036 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a02c:	f7ff fe5a 	bl	8009ce4 <LL_RCC_PLLSAI1_IsReady>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1f0      	bne.n	800a018 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800a036:	7bfb      	ldrb	r3, [r7, #15]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d137      	bne.n	800a0ac <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800a03c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a040:	691b      	ldr	r3, [r3, #16]
 800a042:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	021b      	lsls	r3, r3, #8
 800a04c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a050:	4313      	orrs	r3, r2
 800a052:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800a054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a066:	4313      	orrs	r3, r2
 800a068:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800a06a:	f7ff fe1d 	bl	8009ca8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a06e:	f7fd fb2d 	bl	80076cc <HAL_GetTick>
 800a072:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a074:	e009      	b.n	800a08a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a076:	f7fd fb29 	bl	80076cc <HAL_GetTick>
 800a07a:	4602      	mov	r2, r0
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	1ad3      	subs	r3, r2, r3
 800a080:	2b02      	cmp	r3, #2
 800a082:	d902      	bls.n	800a08a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800a084:	2303      	movs	r3, #3
 800a086:	73fb      	strb	r3, [r7, #15]
        break;
 800a088:	e004      	b.n	800a094 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a08a:	f7ff fe2b 	bl	8009ce4 <LL_RCC_PLLSAI1_IsReady>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b01      	cmp	r3, #1
 800a092:	d1f0      	bne.n	800a076 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800a094:	7bfb      	ldrb	r3, [r7, #15]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d108      	bne.n	800a0ac <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800a09a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a09e:	691a      	ldr	r2, [r3, #16]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	691b      	ldr	r3, [r3, #16]
 800a0a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b084      	sub	sp, #16
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800a0c2:	f7ff fe00 	bl	8009cc6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a0c6:	f7fd fb01 	bl	80076cc <HAL_GetTick>
 800a0ca:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a0cc:	e009      	b.n	800a0e2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a0ce:	f7fd fafd 	bl	80076cc <HAL_GetTick>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	1ad3      	subs	r3, r2, r3
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	d902      	bls.n	800a0e2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800a0dc:	2303      	movs	r3, #3
 800a0de:	73fb      	strb	r3, [r7, #15]
      break;
 800a0e0:	e004      	b.n	800a0ec <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a0e2:	f7ff fdff 	bl	8009ce4 <LL_RCC_PLLSAI1_IsReady>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d1f0      	bne.n	800a0ce <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800a0ec:	7bfb      	ldrb	r3, [r7, #15]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d137      	bne.n	800a162 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800a0f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	021b      	lsls	r3, r3, #8
 800a102:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a106:	4313      	orrs	r3, r2
 800a108:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800a10a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a11c:	4313      	orrs	r3, r2
 800a11e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800a120:	f7ff fdc2 	bl	8009ca8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a124:	f7fd fad2 	bl	80076cc <HAL_GetTick>
 800a128:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a12a:	e009      	b.n	800a140 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a12c:	f7fd face 	bl	80076cc <HAL_GetTick>
 800a130:	4602      	mov	r2, r0
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	1ad3      	subs	r3, r2, r3
 800a136:	2b02      	cmp	r3, #2
 800a138:	d902      	bls.n	800a140 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800a13a:	2303      	movs	r3, #3
 800a13c:	73fb      	strb	r3, [r7, #15]
        break;
 800a13e:	e004      	b.n	800a14a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a140:	f7ff fdd0 	bl	8009ce4 <LL_RCC_PLLSAI1_IsReady>
 800a144:	4603      	mov	r3, r0
 800a146:	2b01      	cmp	r3, #1
 800a148:	d1f0      	bne.n	800a12c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800a14a:	7bfb      	ldrb	r3, [r7, #15]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d108      	bne.n	800a162 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800a150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a154:	691a      	ldr	r2, [r3, #16]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a15e:	4313      	orrs	r3, r2
 800a160:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800a162:	7bfb      	ldrb	r3, [r7, #15]
}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a174:	2300      	movs	r3, #0
 800a176:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800a178:	f7ff fda5 	bl	8009cc6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a17c:	f7fd faa6 	bl	80076cc <HAL_GetTick>
 800a180:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a182:	e009      	b.n	800a198 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a184:	f7fd faa2 	bl	80076cc <HAL_GetTick>
 800a188:	4602      	mov	r2, r0
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	1ad3      	subs	r3, r2, r3
 800a18e:	2b02      	cmp	r3, #2
 800a190:	d902      	bls.n	800a198 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800a192:	2303      	movs	r3, #3
 800a194:	73fb      	strb	r3, [r7, #15]
      break;
 800a196:	e004      	b.n	800a1a2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a198:	f7ff fda4 	bl	8009ce4 <LL_RCC_PLLSAI1_IsReady>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1f0      	bne.n	800a184 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800a1a2:	7bfb      	ldrb	r3, [r7, #15]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d137      	bne.n	800a218 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800a1a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	021b      	lsls	r3, r3, #8
 800a1b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800a1c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800a1d6:	f7ff fd67 	bl	8009ca8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1da:	f7fd fa77 	bl	80076cc <HAL_GetTick>
 800a1de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a1e0:	e009      	b.n	800a1f6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a1e2:	f7fd fa73 	bl	80076cc <HAL_GetTick>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	1ad3      	subs	r3, r2, r3
 800a1ec:	2b02      	cmp	r3, #2
 800a1ee:	d902      	bls.n	800a1f6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	73fb      	strb	r3, [r7, #15]
        break;
 800a1f4:	e004      	b.n	800a200 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a1f6:	f7ff fd75 	bl	8009ce4 <LL_RCC_PLLSAI1_IsReady>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d1f0      	bne.n	800a1e2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800a200:	7bfb      	ldrb	r3, [r7, #15]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d108      	bne.n	800a218 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800a206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a20a:	691a      	ldr	r2, [r3, #16]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	691b      	ldr	r3, [r3, #16]
 800a210:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a214:	4313      	orrs	r3, r2
 800a216:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800a218:	7bfb      	ldrb	r3, [r7, #15]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
	...

0800a224 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d101      	bne.n	800a236 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800a232:	2301      	movs	r3, #1
 800a234:	e09f      	b.n	800a376 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d106      	bne.n	800a250 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2200      	movs	r2, #0
 800a246:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f7fc fea8 	bl	8006fa0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2202      	movs	r2, #2
 800a254:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a258:	4b49      	ldr	r3, [pc, #292]	; (800a380 <HAL_RTC_Init+0x15c>)
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	f003 0310 	and.w	r3, r3, #16
 800a260:	2b10      	cmp	r3, #16
 800a262:	d07e      	beq.n	800a362 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	22ca      	movs	r2, #202	; 0xca
 800a26a:	625a      	str	r2, [r3, #36]	; 0x24
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2253      	movs	r2, #83	; 0x53
 800a272:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 f8ab 	bl	800a3d0 <RTC_EnterInitMode>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d00a      	beq.n	800a296 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	22ff      	movs	r2, #255	; 0xff
 800a286:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2204      	movs	r2, #4
 800a28c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	73fb      	strb	r3, [r7, #15]
 800a294:	e067      	b.n	800a366 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	6812      	ldr	r2, [r2, #0]
 800a2a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a2a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2a8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	6899      	ldr	r1, [r3, #8]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	685a      	ldr	r2, [r3, #4]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	431a      	orrs	r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	699b      	ldr	r3, [r3, #24]
 800a2be:	431a      	orrs	r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	430a      	orrs	r2, r1
 800a2c6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	68d2      	ldr	r2, [r2, #12]
 800a2d0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	6919      	ldr	r1, [r3, #16]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	041a      	lsls	r2, r3, #16
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	430a      	orrs	r2, r1
 800a2e4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68da      	ldr	r2, [r3, #12]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a2f4:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f022 0203 	bic.w	r2, r2, #3
 800a304:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	69da      	ldr	r2, [r3, #28]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	695b      	ldr	r3, [r3, #20]
 800a314:	431a      	orrs	r2, r3
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	430a      	orrs	r2, r1
 800a31c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	689b      	ldr	r3, [r3, #8]
 800a324:	f003 0320 	and.w	r3, r3, #32
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d113      	bne.n	800a354 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 f829 	bl	800a384 <HAL_RTC_WaitForSynchro>
 800a332:	4603      	mov	r3, r0
 800a334:	2b00      	cmp	r3, #0
 800a336:	d00d      	beq.n	800a354 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	22ff      	movs	r2, #255	; 0xff
 800a33e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2204      	movs	r2, #4
 800a344:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800a350:	2301      	movs	r3, #1
 800a352:	e010      	b.n	800a376 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	22ff      	movs	r2, #255	; 0xff
 800a35a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 800a35c:	2300      	movs	r3, #0
 800a35e:	73fb      	strb	r3, [r7, #15]
 800a360:	e001      	b.n	800a366 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800a362:	2300      	movs	r3, #0
 800a364:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800a366:	7bfb      	ldrb	r3, [r7, #15]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d103      	bne.n	800a374 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2201      	movs	r2, #1
 800a370:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800a374:	7bfb      	ldrb	r3, [r7, #15]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	40002800 	.word	0x40002800

0800a384 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	68da      	ldr	r2, [r3, #12]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a39a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800a39c:	f7fd f996 	bl	80076cc <HAL_GetTick>
 800a3a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a3a2:	e009      	b.n	800a3b8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a3a4:	f7fd f992 	bl	80076cc <HAL_GetTick>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	1ad3      	subs	r3, r2, r3
 800a3ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3b2:	d901      	bls.n	800a3b8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	e007      	b.n	800a3c8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	f003 0320 	and.w	r3, r3, #32
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d0ee      	beq.n	800a3a4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3710      	adds	r7, #16
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d119      	bne.n	800a41a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a3ee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a3f0:	f7fd f96c 	bl	80076cc <HAL_GetTick>
 800a3f4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a3f6:	e009      	b.n	800a40c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a3f8:	f7fd f968 	bl	80076cc <HAL_GetTick>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a406:	d901      	bls.n	800a40c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800a408:	2303      	movs	r3, #3
 800a40a:	e007      	b.n	800a41c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a416:	2b00      	cmp	r3, #0
 800a418:	d0ee      	beq.n	800a3f8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b086      	sub	sp, #24
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a436:	2b01      	cmp	r3, #1
 800a438:	d101      	bne.n	800a43e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800a43a:	2302      	movs	r3, #2
 800a43c:	e0a8      	b.n	800a590 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2201      	movs	r2, #1
 800a442:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2202      	movs	r2, #2
 800a44a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	22ca      	movs	r2, #202	; 0xca
 800a454:	625a      	str	r2, [r3, #36]	; 0x24
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2253      	movs	r2, #83	; 0x53
 800a45c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d020      	beq.n	800a4ae <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800a46c:	f7fd f92e 	bl	80076cc <HAL_GetTick>
 800a470:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800a472:	e015      	b.n	800a4a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a474:	f7fd f92a 	bl	80076cc <HAL_GetTick>
 800a478:	4602      	mov	r2, r0
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	1ad3      	subs	r3, r2, r3
 800a47e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a482:	d90d      	bls.n	800a4a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	22ff      	movs	r2, #255	; 0xff
 800a48a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2203      	movs	r2, #3
 800a490:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2200      	movs	r2, #0
 800a498:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800a49c:	2303      	movs	r3, #3
 800a49e:	e077      	b.n	800a590 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	f003 0304 	and.w	r3, r3, #4
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d1e2      	bne.n	800a474 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	689a      	ldr	r2, [r3, #8]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4bc:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	b2da      	uxtb	r2, r3
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800a4ce:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800a4d0:	f7fd f8fc 	bl	80076cc <HAL_GetTick>
 800a4d4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800a4d6:	e015      	b.n	800a504 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a4d8:	f7fd f8f8 	bl	80076cc <HAL_GetTick>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	1ad3      	subs	r3, r2, r3
 800a4e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4e6:	d90d      	bls.n	800a504 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	22ff      	movs	r2, #255	; 0xff
 800a4ee:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2203      	movs	r2, #3
 800a4f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800a500:	2303      	movs	r3, #3
 800a502:	e045      	b.n	800a590 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	f003 0304 	and.w	r3, r3, #4
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d0e2      	beq.n	800a4d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	68ba      	ldr	r2, [r7, #8]
 800a518:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	689a      	ldr	r2, [r3, #8]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f022 0207 	bic.w	r2, r2, #7
 800a528:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	6899      	ldr	r1, [r3, #8]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	430a      	orrs	r2, r1
 800a538:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800a53a:	4b17      	ldr	r3, [pc, #92]	; (800a598 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800a53c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a540:	4a15      	ldr	r2, [pc, #84]	; (800a598 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800a542:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a546:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800a54a:	4b13      	ldr	r3, [pc, #76]	; (800a598 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4a12      	ldr	r2, [pc, #72]	; (800a598 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800a550:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a554:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	689a      	ldr	r2, [r3, #8]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a564:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	689a      	ldr	r2, [r3, #8]
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a574:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	22ff      	movs	r2, #255	; 0xff
 800a57c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2201      	movs	r2, #1
 800a582:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2200      	movs	r2, #0
 800a58a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800a58e:	2300      	movs	r3, #0
}
 800a590:	4618      	mov	r0, r3
 800a592:	3718      	adds	r7, #24
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	58000800 	.word	0x58000800

0800a59c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d101      	bne.n	800a5ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e095      	b.n	800a6da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d108      	bne.n	800a5c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5be:	d009      	beq.n	800a5d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	61da      	str	r2, [r3, #28]
 800a5c6:	e005      	b.n	800a5d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d106      	bne.n	800a5f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f7fc fd0c 	bl	800700c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2202      	movs	r2, #2
 800a5f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a60a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a614:	d902      	bls.n	800a61c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a616:	2300      	movs	r3, #0
 800a618:	60fb      	str	r3, [r7, #12]
 800a61a:	e002      	b.n	800a622 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a61c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a620:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	68db      	ldr	r3, [r3, #12]
 800a626:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a62a:	d007      	beq.n	800a63c <HAL_SPI_Init+0xa0>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a634:	d002      	beq.n	800a63c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a64c:	431a      	orrs	r2, r3
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	691b      	ldr	r3, [r3, #16]
 800a652:	f003 0302 	and.w	r3, r3, #2
 800a656:	431a      	orrs	r2, r3
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	695b      	ldr	r3, [r3, #20]
 800a65c:	f003 0301 	and.w	r3, r3, #1
 800a660:	431a      	orrs	r2, r3
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a66a:	431a      	orrs	r2, r3
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	69db      	ldr	r3, [r3, #28]
 800a670:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a674:	431a      	orrs	r2, r3
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6a1b      	ldr	r3, [r3, #32]
 800a67a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a67e:	ea42 0103 	orr.w	r1, r2, r3
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a686:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	430a      	orrs	r2, r1
 800a690:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	699b      	ldr	r3, [r3, #24]
 800a696:	0c1b      	lsrs	r3, r3, #16
 800a698:	f003 0204 	and.w	r2, r3, #4
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a0:	f003 0310 	and.w	r3, r3, #16
 800a6a4:	431a      	orrs	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6aa:	f003 0308 	and.w	r3, r3, #8
 800a6ae:	431a      	orrs	r2, r3
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a6b8:	ea42 0103 	orr.w	r1, r2, r3
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	430a      	orrs	r2, r1
 800a6c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b088      	sub	sp, #32
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	60f8      	str	r0, [r7, #12]
 800a6ea:	60b9      	str	r1, [r7, #8]
 800a6ec:	603b      	str	r3, [r7, #0]
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d101      	bne.n	800a704 <HAL_SPI_Transmit+0x22>
 800a700:	2302      	movs	r3, #2
 800a702:	e15f      	b.n	800a9c4 <HAL_SPI_Transmit+0x2e2>
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2201      	movs	r2, #1
 800a708:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a70c:	f7fc ffde 	bl	80076cc <HAL_GetTick>
 800a710:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a712:	88fb      	ldrh	r3, [r7, #6]
 800a714:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d002      	beq.n	800a728 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a722:	2302      	movs	r3, #2
 800a724:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a726:	e148      	b.n	800a9ba <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d002      	beq.n	800a734 <HAL_SPI_Transmit+0x52>
 800a72e:	88fb      	ldrh	r3, [r7, #6]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d102      	bne.n	800a73a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a738:	e13f      	b.n	800a9ba <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2203      	movs	r2, #3
 800a73e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	68ba      	ldr	r2, [r7, #8]
 800a74c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	88fa      	ldrh	r2, [r7, #6]
 800a752:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	88fa      	ldrh	r2, [r7, #6]
 800a758:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2200      	movs	r2, #0
 800a75e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2200      	movs	r2, #0
 800a764:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2200      	movs	r2, #0
 800a774:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2200      	movs	r2, #0
 800a77a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	689b      	ldr	r3, [r3, #8]
 800a780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a784:	d10f      	bne.n	800a7a6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a794:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a7a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7b0:	2b40      	cmp	r3, #64	; 0x40
 800a7b2:	d007      	beq.n	800a7c4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	681a      	ldr	r2, [r3, #0]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a7cc:	d94f      	bls.n	800a86e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d002      	beq.n	800a7dc <HAL_SPI_Transmit+0xfa>
 800a7d6:	8afb      	ldrh	r3, [r7, #22]
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d142      	bne.n	800a862 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e0:	881a      	ldrh	r2, [r3, #0]
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ec:	1c9a      	adds	r2, r3, #2
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	3b01      	subs	r3, #1
 800a7fa:	b29a      	uxth	r2, r3
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a800:	e02f      	b.n	800a862 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	f003 0302 	and.w	r3, r3, #2
 800a80c:	2b02      	cmp	r3, #2
 800a80e:	d112      	bne.n	800a836 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a814:	881a      	ldrh	r2, [r3, #0]
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a820:	1c9a      	adds	r2, r3, #2
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	3b01      	subs	r3, #1
 800a82e:	b29a      	uxth	r2, r3
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a834:	e015      	b.n	800a862 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a836:	f7fc ff49 	bl	80076cc <HAL_GetTick>
 800a83a:	4602      	mov	r2, r0
 800a83c:	69bb      	ldr	r3, [r7, #24]
 800a83e:	1ad3      	subs	r3, r2, r3
 800a840:	683a      	ldr	r2, [r7, #0]
 800a842:	429a      	cmp	r2, r3
 800a844:	d803      	bhi.n	800a84e <HAL_SPI_Transmit+0x16c>
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a84c:	d102      	bne.n	800a854 <HAL_SPI_Transmit+0x172>
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d106      	bne.n	800a862 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800a854:	2303      	movs	r3, #3
 800a856:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2201      	movs	r2, #1
 800a85c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800a860:	e0ab      	b.n	800a9ba <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a866:	b29b      	uxth	r3, r3
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d1ca      	bne.n	800a802 <HAL_SPI_Transmit+0x120>
 800a86c:	e080      	b.n	800a970 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d002      	beq.n	800a87c <HAL_SPI_Transmit+0x19a>
 800a876:	8afb      	ldrh	r3, [r7, #22]
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d174      	bne.n	800a966 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a880:	b29b      	uxth	r3, r3
 800a882:	2b01      	cmp	r3, #1
 800a884:	d912      	bls.n	800a8ac <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a88a:	881a      	ldrh	r2, [r3, #0]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a896:	1c9a      	adds	r2, r3, #2
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	3b02      	subs	r3, #2
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a8aa:	e05c      	b.n	800a966 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	330c      	adds	r3, #12
 800a8b6:	7812      	ldrb	r2, [r2, #0]
 800a8b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8be:	1c5a      	adds	r2, r3, #1
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	b29a      	uxth	r2, r3
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a8d2:	e048      	b.n	800a966 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	689b      	ldr	r3, [r3, #8]
 800a8da:	f003 0302 	and.w	r3, r3, #2
 800a8de:	2b02      	cmp	r3, #2
 800a8e0:	d12b      	bne.n	800a93a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d912      	bls.n	800a912 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f0:	881a      	ldrh	r2, [r3, #0]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8fc:	1c9a      	adds	r2, r3, #2
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a906:	b29b      	uxth	r3, r3
 800a908:	3b02      	subs	r3, #2
 800a90a:	b29a      	uxth	r2, r3
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a910:	e029      	b.n	800a966 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	330c      	adds	r3, #12
 800a91c:	7812      	ldrb	r2, [r2, #0]
 800a91e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a924:	1c5a      	adds	r2, r3, #1
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a92e:	b29b      	uxth	r3, r3
 800a930:	3b01      	subs	r3, #1
 800a932:	b29a      	uxth	r2, r3
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a938:	e015      	b.n	800a966 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a93a:	f7fc fec7 	bl	80076cc <HAL_GetTick>
 800a93e:	4602      	mov	r2, r0
 800a940:	69bb      	ldr	r3, [r7, #24]
 800a942:	1ad3      	subs	r3, r2, r3
 800a944:	683a      	ldr	r2, [r7, #0]
 800a946:	429a      	cmp	r2, r3
 800a948:	d803      	bhi.n	800a952 <HAL_SPI_Transmit+0x270>
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a950:	d102      	bne.n	800a958 <HAL_SPI_Transmit+0x276>
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d106      	bne.n	800a966 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800a958:	2303      	movs	r3, #3
 800a95a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2201      	movs	r2, #1
 800a960:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800a964:	e029      	b.n	800a9ba <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d1b1      	bne.n	800a8d4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a970:	69ba      	ldr	r2, [r7, #24]
 800a972:	6839      	ldr	r1, [r7, #0]
 800a974:	68f8      	ldr	r0, [r7, #12]
 800a976:	f000 fc7d 	bl	800b274 <SPI_EndRxTxTransaction>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d002      	beq.n	800a986 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2220      	movs	r2, #32
 800a984:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d10a      	bne.n	800a9a4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a98e:	2300      	movs	r3, #0
 800a990:	613b      	str	r3, [r7, #16]
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	613b      	str	r3, [r7, #16]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	613b      	str	r3, [r7, #16]
 800a9a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d002      	beq.n	800a9b2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	77fb      	strb	r3, [r7, #31]
 800a9b0:	e003      	b.n	800a9ba <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a9c2:	7ffb      	ldrb	r3, [r7, #31]
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3720      	adds	r7, #32
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b08a      	sub	sp, #40	; 0x28
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	607a      	str	r2, [r7, #4]
 800a9d8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d101      	bne.n	800a9f2 <HAL_SPI_TransmitReceive+0x26>
 800a9ee:	2302      	movs	r3, #2
 800a9f0:	e20a      	b.n	800ae08 <HAL_SPI_TransmitReceive+0x43c>
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a9fa:	f7fc fe67 	bl	80076cc <HAL_GetTick>
 800a9fe:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aa06:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800aa0e:	887b      	ldrh	r3, [r7, #2]
 800aa10:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800aa12:	887b      	ldrh	r3, [r7, #2]
 800aa14:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800aa16:	7efb      	ldrb	r3, [r7, #27]
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d00e      	beq.n	800aa3a <HAL_SPI_TransmitReceive+0x6e>
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa22:	d106      	bne.n	800aa32 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	689b      	ldr	r3, [r3, #8]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d102      	bne.n	800aa32 <HAL_SPI_TransmitReceive+0x66>
 800aa2c:	7efb      	ldrb	r3, [r7, #27]
 800aa2e:	2b04      	cmp	r3, #4
 800aa30:	d003      	beq.n	800aa3a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800aa32:	2302      	movs	r3, #2
 800aa34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800aa38:	e1e0      	b.n	800adfc <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d005      	beq.n	800aa4c <HAL_SPI_TransmitReceive+0x80>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d002      	beq.n	800aa4c <HAL_SPI_TransmitReceive+0x80>
 800aa46:	887b      	ldrh	r3, [r7, #2]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d103      	bne.n	800aa54 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800aa52:	e1d3      	b.n	800adfc <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	2b04      	cmp	r3, #4
 800aa5e:	d003      	beq.n	800aa68 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2205      	movs	r2, #5
 800aa64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	887a      	ldrh	r2, [r7, #2]
 800aa78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	887a      	ldrh	r2, [r7, #2]
 800aa80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	68ba      	ldr	r2, [r7, #8]
 800aa88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	887a      	ldrh	r2, [r7, #2]
 800aa8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	887a      	ldrh	r2, [r7, #2]
 800aa94:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	68db      	ldr	r3, [r3, #12]
 800aaa6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aaaa:	d802      	bhi.n	800aab2 <HAL_SPI_TransmitReceive+0xe6>
 800aaac:	8a3b      	ldrh	r3, [r7, #16]
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d908      	bls.n	800aac4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	685a      	ldr	r2, [r3, #4]
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aac0:	605a      	str	r2, [r3, #4]
 800aac2:	e007      	b.n	800aad4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	685a      	ldr	r2, [r3, #4]
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800aad2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aade:	2b40      	cmp	r3, #64	; 0x40
 800aae0:	d007      	beq.n	800aaf2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aaf0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aafa:	f240 8081 	bls.w	800ac00 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d002      	beq.n	800ab0c <HAL_SPI_TransmitReceive+0x140>
 800ab06:	8a7b      	ldrh	r3, [r7, #18]
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d16d      	bne.n	800abe8 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab10:	881a      	ldrh	r2, [r3, #0]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab1c:	1c9a      	adds	r2, r3, #2
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	3b01      	subs	r3, #1
 800ab2a:	b29a      	uxth	r2, r3
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab30:	e05a      	b.n	800abe8 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	689b      	ldr	r3, [r3, #8]
 800ab38:	f003 0302 	and.w	r3, r3, #2
 800ab3c:	2b02      	cmp	r3, #2
 800ab3e:	d11b      	bne.n	800ab78 <HAL_SPI_TransmitReceive+0x1ac>
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d016      	beq.n	800ab78 <HAL_SPI_TransmitReceive+0x1ac>
 800ab4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d113      	bne.n	800ab78 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab54:	881a      	ldrh	r2, [r3, #0]
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab60:	1c9a      	adds	r2, r3, #2
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	3b01      	subs	r3, #1
 800ab6e:	b29a      	uxth	r2, r3
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ab74:	2300      	movs	r3, #0
 800ab76:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	689b      	ldr	r3, [r3, #8]
 800ab7e:	f003 0301 	and.w	r3, r3, #1
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d11c      	bne.n	800abc0 <HAL_SPI_TransmitReceive+0x1f4>
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d016      	beq.n	800abc0 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	68da      	ldr	r2, [r3, #12]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab9c:	b292      	uxth	r2, r2
 800ab9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba4:	1c9a      	adds	r2, r3, #2
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	3b01      	subs	r3, #1
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800abbc:	2301      	movs	r3, #1
 800abbe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800abc0:	f7fc fd84 	bl	80076cc <HAL_GetTick>
 800abc4:	4602      	mov	r2, r0
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	1ad3      	subs	r3, r2, r3
 800abca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abcc:	429a      	cmp	r2, r3
 800abce:	d80b      	bhi.n	800abe8 <HAL_SPI_TransmitReceive+0x21c>
 800abd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd6:	d007      	beq.n	800abe8 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800abd8:	2303      	movs	r3, #3
 800abda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2201      	movs	r2, #1
 800abe2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800abe6:	e109      	b.n	800adfc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abec:	b29b      	uxth	r3, r3
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d19f      	bne.n	800ab32 <HAL_SPI_TransmitReceive+0x166>
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d199      	bne.n	800ab32 <HAL_SPI_TransmitReceive+0x166>
 800abfe:	e0e3      	b.n	800adc8 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d003      	beq.n	800ac10 <HAL_SPI_TransmitReceive+0x244>
 800ac08:	8a7b      	ldrh	r3, [r7, #18]
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	f040 80cf 	bne.w	800adae <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d912      	bls.n	800ac40 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac1e:	881a      	ldrh	r2, [r3, #0]
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac2a:	1c9a      	adds	r2, r3, #2
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	3b02      	subs	r3, #2
 800ac38:	b29a      	uxth	r2, r3
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ac3e:	e0b6      	b.n	800adae <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	330c      	adds	r3, #12
 800ac4a:	7812      	ldrb	r2, [r2, #0]
 800ac4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac52:	1c5a      	adds	r2, r3, #1
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	3b01      	subs	r3, #1
 800ac60:	b29a      	uxth	r2, r3
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac66:	e0a2      	b.n	800adae <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	689b      	ldr	r3, [r3, #8]
 800ac6e:	f003 0302 	and.w	r3, r3, #2
 800ac72:	2b02      	cmp	r3, #2
 800ac74:	d134      	bne.n	800ace0 <HAL_SPI_TransmitReceive+0x314>
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d02f      	beq.n	800ace0 <HAL_SPI_TransmitReceive+0x314>
 800ac80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d12c      	bne.n	800ace0 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d912      	bls.n	800acb6 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac94:	881a      	ldrh	r2, [r3, #0]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca0:	1c9a      	adds	r2, r3, #2
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acaa:	b29b      	uxth	r3, r3
 800acac:	3b02      	subs	r3, #2
 800acae:	b29a      	uxth	r2, r3
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800acb4:	e012      	b.n	800acdc <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	330c      	adds	r3, #12
 800acc0:	7812      	ldrb	r2, [r2, #0]
 800acc2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc8:	1c5a      	adds	r2, r3, #1
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	3b01      	subs	r3, #1
 800acd6:	b29a      	uxth	r2, r3
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800acdc:	2300      	movs	r3, #0
 800acde:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	f003 0301 	and.w	r3, r3, #1
 800acea:	2b01      	cmp	r3, #1
 800acec:	d148      	bne.n	800ad80 <HAL_SPI_TransmitReceive+0x3b4>
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d042      	beq.n	800ad80 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d923      	bls.n	800ad4e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	68da      	ldr	r2, [r3, #12]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad10:	b292      	uxth	r2, r2
 800ad12:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad18:	1c9a      	adds	r2, r3, #2
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	3b02      	subs	r3, #2
 800ad28:	b29a      	uxth	r2, r3
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d81f      	bhi.n	800ad7c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	685a      	ldr	r2, [r3, #4]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ad4a:	605a      	str	r2, [r3, #4]
 800ad4c:	e016      	b.n	800ad7c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f103 020c 	add.w	r2, r3, #12
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5a:	7812      	ldrb	r2, [r2, #0]
 800ad5c:	b2d2      	uxtb	r2, r2
 800ad5e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad64:	1c5a      	adds	r2, r3, #1
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	3b01      	subs	r3, #1
 800ad74:	b29a      	uxth	r2, r3
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ad80:	f7fc fca4 	bl	80076cc <HAL_GetTick>
 800ad84:	4602      	mov	r2, r0
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	1ad3      	subs	r3, r2, r3
 800ad8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d803      	bhi.n	800ad98 <HAL_SPI_TransmitReceive+0x3cc>
 800ad90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad96:	d102      	bne.n	800ad9e <HAL_SPI_TransmitReceive+0x3d2>
 800ad98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d107      	bne.n	800adae <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800ad9e:	2303      	movs	r3, #3
 800ada0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2201      	movs	r2, #1
 800ada8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800adac:	e026      	b.n	800adfc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f47f af57 	bne.w	800ac68 <HAL_SPI_TransmitReceive+0x29c>
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f47f af50 	bne.w	800ac68 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800adc8:	69fa      	ldr	r2, [r7, #28]
 800adca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800adcc:	68f8      	ldr	r0, [r7, #12]
 800adce:	f000 fa51 	bl	800b274 <SPI_EndRxTxTransaction>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d005      	beq.n	800ade4 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800add8:	2301      	movs	r3, #1
 800adda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2220      	movs	r2, #32
 800ade2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d003      	beq.n	800adf4 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800adec:	2301      	movs	r3, #1
 800adee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800adf2:	e003      	b.n	800adfc <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2201      	movs	r2, #1
 800adf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2200      	movs	r2, #0
 800ae00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ae04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3728      	adds	r7, #40	; 0x28
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b088      	sub	sp, #32
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ae28:	69bb      	ldr	r3, [r7, #24]
 800ae2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d10e      	bne.n	800ae50 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ae32:	69bb      	ldr	r3, [r7, #24]
 800ae34:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d009      	beq.n	800ae50 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ae3c:	69fb      	ldr	r3, [r7, #28]
 800ae3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d004      	beq.n	800ae50 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	4798      	blx	r3
    return;
 800ae4e:	e0ce      	b.n	800afee <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	f003 0302 	and.w	r3, r3, #2
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d009      	beq.n	800ae6e <HAL_SPI_IRQHandler+0x5e>
 800ae5a:	69fb      	ldr	r3, [r7, #28]
 800ae5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d004      	beq.n	800ae6e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	4798      	blx	r3
    return;
 800ae6c:	e0bf      	b.n	800afee <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	f003 0320 	and.w	r3, r3, #32
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d10a      	bne.n	800ae8e <HAL_SPI_IRQHandler+0x7e>
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d105      	bne.n	800ae8e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f000 80b0 	beq.w	800afee <HAL_SPI_IRQHandler+0x1de>
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	f003 0320 	and.w	r3, r3, #32
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f000 80aa 	beq.w	800afee <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ae9a:	69bb      	ldr	r3, [r7, #24]
 800ae9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d023      	beq.n	800aeec <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	2b03      	cmp	r3, #3
 800aeae:	d011      	beq.n	800aed4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aeb4:	f043 0204 	orr.w	r2, r3, #4
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aebc:	2300      	movs	r3, #0
 800aebe:	617b      	str	r3, [r7, #20]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	68db      	ldr	r3, [r3, #12]
 800aec6:	617b      	str	r3, [r7, #20]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	617b      	str	r3, [r7, #20]
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	e00b      	b.n	800aeec <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aed4:	2300      	movs	r3, #0
 800aed6:	613b      	str	r3, [r7, #16]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	613b      	str	r3, [r7, #16]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	689b      	ldr	r3, [r3, #8]
 800aee6:	613b      	str	r3, [r7, #16]
 800aee8:	693b      	ldr	r3, [r7, #16]
        return;
 800aeea:	e080      	b.n	800afee <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	f003 0320 	and.w	r3, r3, #32
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d014      	beq.n	800af20 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aefa:	f043 0201 	orr.w	r2, r3, #1
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800af02:	2300      	movs	r3, #0
 800af04:	60fb      	str	r3, [r7, #12]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	689b      	ldr	r3, [r3, #8]
 800af0c:	60fb      	str	r3, [r7, #12]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af1c:	601a      	str	r2, [r3, #0]
 800af1e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800af20:	69bb      	ldr	r3, [r7, #24]
 800af22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00c      	beq.n	800af44 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af2e:	f043 0208 	orr.w	r2, r3, #8
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800af36:	2300      	movs	r3, #0
 800af38:	60bb      	str	r3, [r7, #8]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	60bb      	str	r3, [r7, #8]
 800af42:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d04f      	beq.n	800afec <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	685a      	ldr	r2, [r3, #4]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800af5a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2201      	movs	r2, #1
 800af60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	f003 0302 	and.w	r3, r3, #2
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d104      	bne.n	800af78 <HAL_SPI_IRQHandler+0x168>
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	f003 0301 	and.w	r3, r3, #1
 800af74:	2b00      	cmp	r3, #0
 800af76:	d034      	beq.n	800afe2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	685a      	ldr	r2, [r3, #4]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f022 0203 	bic.w	r2, r2, #3
 800af86:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d011      	beq.n	800afb4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af94:	4a17      	ldr	r2, [pc, #92]	; (800aff4 <HAL_SPI_IRQHandler+0x1e4>)
 800af96:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af9c:	4618      	mov	r0, r3
 800af9e:	f7fc fe5a 	bl	8007c56 <HAL_DMA_Abort_IT>
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d005      	beq.n	800afb4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d016      	beq.n	800afea <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afc0:	4a0c      	ldr	r2, [pc, #48]	; (800aff4 <HAL_SPI_IRQHandler+0x1e4>)
 800afc2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afc8:	4618      	mov	r0, r3
 800afca:	f7fc fe44 	bl	8007c56 <HAL_DMA_Abort_IT>
 800afce:	4603      	mov	r3, r0
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d00a      	beq.n	800afea <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800afe0:	e003      	b.n	800afea <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 f808 	bl	800aff8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800afe8:	e000      	b.n	800afec <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800afea:	bf00      	nop
    return;
 800afec:	bf00      	nop
  }
}
 800afee:	3720      	adds	r7, #32
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	0800b00d 	.word	0x0800b00d

0800aff8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b000:	bf00      	nop
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b018:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2200      	movs	r2, #0
 800b01e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2200      	movs	r2, #0
 800b026:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f7ff ffe5 	bl	800aff8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b02e:	bf00      	nop
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
	...

0800b038 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b088      	sub	sp, #32
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	603b      	str	r3, [r7, #0]
 800b044:	4613      	mov	r3, r2
 800b046:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b048:	f7fc fb40 	bl	80076cc <HAL_GetTick>
 800b04c:	4602      	mov	r2, r0
 800b04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b050:	1a9b      	subs	r3, r3, r2
 800b052:	683a      	ldr	r2, [r7, #0]
 800b054:	4413      	add	r3, r2
 800b056:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b058:	f7fc fb38 	bl	80076cc <HAL_GetTick>
 800b05c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b05e:	4b39      	ldr	r3, [pc, #228]	; (800b144 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	015b      	lsls	r3, r3, #5
 800b064:	0d1b      	lsrs	r3, r3, #20
 800b066:	69fa      	ldr	r2, [r7, #28]
 800b068:	fb02 f303 	mul.w	r3, r2, r3
 800b06c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b06e:	e054      	b.n	800b11a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b076:	d050      	beq.n	800b11a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b078:	f7fc fb28 	bl	80076cc <HAL_GetTick>
 800b07c:	4602      	mov	r2, r0
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	69fa      	ldr	r2, [r7, #28]
 800b084:	429a      	cmp	r2, r3
 800b086:	d902      	bls.n	800b08e <SPI_WaitFlagStateUntilTimeout+0x56>
 800b088:	69fb      	ldr	r3, [r7, #28]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d13d      	bne.n	800b10a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	685a      	ldr	r2, [r3, #4]
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b09c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b0a6:	d111      	bne.n	800b0cc <SPI_WaitFlagStateUntilTimeout+0x94>
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0b0:	d004      	beq.n	800b0bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	689b      	ldr	r3, [r3, #8]
 800b0b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0ba:	d107      	bne.n	800b0cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b0ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0d4:	d10f      	bne.n	800b0f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b0e4:	601a      	str	r2, [r3, #0]
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b0f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2200      	movs	r2, #0
 800b102:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b106:	2303      	movs	r3, #3
 800b108:	e017      	b.n	800b13a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d101      	bne.n	800b114 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b110:	2300      	movs	r3, #0
 800b112:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	3b01      	subs	r3, #1
 800b118:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	689a      	ldr	r2, [r3, #8]
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	4013      	ands	r3, r2
 800b124:	68ba      	ldr	r2, [r7, #8]
 800b126:	429a      	cmp	r2, r3
 800b128:	bf0c      	ite	eq
 800b12a:	2301      	moveq	r3, #1
 800b12c:	2300      	movne	r3, #0
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	461a      	mov	r2, r3
 800b132:	79fb      	ldrb	r3, [r7, #7]
 800b134:	429a      	cmp	r2, r3
 800b136:	d19b      	bne.n	800b070 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b138:	2300      	movs	r3, #0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3720      	adds	r7, #32
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	20000154 	.word	0x20000154

0800b148 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b08a      	sub	sp, #40	; 0x28
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	607a      	str	r2, [r7, #4]
 800b154:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b156:	2300      	movs	r3, #0
 800b158:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b15a:	f7fc fab7 	bl	80076cc <HAL_GetTick>
 800b15e:	4602      	mov	r2, r0
 800b160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b162:	1a9b      	subs	r3, r3, r2
 800b164:	683a      	ldr	r2, [r7, #0]
 800b166:	4413      	add	r3, r2
 800b168:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b16a:	f7fc faaf 	bl	80076cc <HAL_GetTick>
 800b16e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	330c      	adds	r3, #12
 800b176:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b178:	4b3d      	ldr	r3, [pc, #244]	; (800b270 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	4613      	mov	r3, r2
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	4413      	add	r3, r2
 800b182:	00da      	lsls	r2, r3, #3
 800b184:	1ad3      	subs	r3, r2, r3
 800b186:	0d1b      	lsrs	r3, r3, #20
 800b188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b18a:	fb02 f303 	mul.w	r3, r2, r3
 800b18e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b190:	e060      	b.n	800b254 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b198:	d107      	bne.n	800b1aa <SPI_WaitFifoStateUntilTimeout+0x62>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d104      	bne.n	800b1aa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b1a0:	69fb      	ldr	r3, [r7, #28]
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b1a8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b0:	d050      	beq.n	800b254 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b1b2:	f7fc fa8b 	bl	80076cc <HAL_GetTick>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	6a3b      	ldr	r3, [r7, #32]
 800b1ba:	1ad3      	subs	r3, r2, r3
 800b1bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d902      	bls.n	800b1c8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800b1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d13d      	bne.n	800b244 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	685a      	ldr	r2, [r3, #4]
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b1d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b1e0:	d111      	bne.n	800b206 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1ea:	d004      	beq.n	800b1f6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1f4:	d107      	bne.n	800b206 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b204:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b20a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b20e:	d10f      	bne.n	800b230 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b21e:	601a      	str	r2, [r3, #0]
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b22e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2201      	movs	r2, #1
 800b234:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2200      	movs	r2, #0
 800b23c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b240:	2303      	movs	r3, #3
 800b242:	e010      	b.n	800b266 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b244:	69bb      	ldr	r3, [r7, #24]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d101      	bne.n	800b24e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b24a:	2300      	movs	r3, #0
 800b24c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800b24e:	69bb      	ldr	r3, [r7, #24]
 800b250:	3b01      	subs	r3, #1
 800b252:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	689a      	ldr	r2, [r3, #8]
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	4013      	ands	r3, r2
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	429a      	cmp	r2, r3
 800b262:	d196      	bne.n	800b192 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3728      	adds	r7, #40	; 0x28
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	20000154 	.word	0x20000154

0800b274 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b086      	sub	sp, #24
 800b278:	af02      	add	r7, sp, #8
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	9300      	str	r3, [sp, #0]
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	2200      	movs	r2, #0
 800b288:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b28c:	68f8      	ldr	r0, [r7, #12]
 800b28e:	f7ff ff5b 	bl	800b148 <SPI_WaitFifoStateUntilTimeout>
 800b292:	4603      	mov	r3, r0
 800b294:	2b00      	cmp	r3, #0
 800b296:	d007      	beq.n	800b2a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b29c:	f043 0220 	orr.w	r2, r3, #32
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b2a4:	2303      	movs	r3, #3
 800b2a6:	e027      	b.n	800b2f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	9300      	str	r3, [sp, #0]
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	2180      	movs	r1, #128	; 0x80
 800b2b2:	68f8      	ldr	r0, [r7, #12]
 800b2b4:	f7ff fec0 	bl	800b038 <SPI_WaitFlagStateUntilTimeout>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d007      	beq.n	800b2ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2c2:	f043 0220 	orr.w	r2, r3, #32
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b2ca:	2303      	movs	r3, #3
 800b2cc:	e014      	b.n	800b2f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	9300      	str	r3, [sp, #0]
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	f7ff ff34 	bl	800b148 <SPI_WaitFifoStateUntilTimeout>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d007      	beq.n	800b2f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2ea:	f043 0220 	orr.w	r2, r3, #32
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b2f2:	2303      	movs	r3, #3
 800b2f4:	e000      	b.n	800b2f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b2f6:	2300      	movs	r3, #0
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3710      	adds	r7, #16
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <LL_RCC_GetUSARTClockSource>:
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800b308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b30c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	4013      	ands	r3, r2
}
 800b314:	4618      	mov	r0, r3
 800b316:	370c      	adds	r7, #12
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr

0800b320 <LL_RCC_GetLPUARTClockSource>:
{
 800b320:	b480      	push	{r7}
 800b322:	b083      	sub	sp, #12
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800b328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b32c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	4013      	ands	r3, r2
}
 800b334:	4618      	mov	r0, r3
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b082      	sub	sp, #8
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d101      	bne.n	800b352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b34e:	2301      	movs	r3, #1
 800b350:	e042      	b.n	800b3d8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d106      	bne.n	800b36a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2200      	movs	r2, #0
 800b360:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f7fb fe89 	bl	800707c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2224      	movs	r2, #36	; 0x24
 800b36e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f022 0201 	bic.w	r2, r2, #1
 800b380:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b386:	2b00      	cmp	r3, #0
 800b388:	d002      	beq.n	800b390 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 fe22 	bl	800bfd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 fbf7 	bl	800bb84 <UART_SetConfig>
 800b396:	4603      	mov	r3, r0
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d101      	bne.n	800b3a0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b39c:	2301      	movs	r3, #1
 800b39e:	e01b      	b.n	800b3d8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	685a      	ldr	r2, [r3, #4]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b3ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	689a      	ldr	r2, [r3, #8]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b3be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f042 0201 	orr.w	r2, r2, #1
 800b3ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 fea1 	bl	800c118 <UART_CheckIdleState>
 800b3d6:	4603      	mov	r3, r0
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3708      	adds	r7, #8
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b08a      	sub	sp, #40	; 0x28
 800b3e4:	af02      	add	r7, sp, #8
 800b3e6:	60f8      	str	r0, [r7, #12]
 800b3e8:	60b9      	str	r1, [r7, #8]
 800b3ea:	603b      	str	r3, [r7, #0]
 800b3ec:	4613      	mov	r3, r2
 800b3ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3f6:	2b20      	cmp	r3, #32
 800b3f8:	d17b      	bne.n	800b4f2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d002      	beq.n	800b406 <HAL_UART_Transmit+0x26>
 800b400:	88fb      	ldrh	r3, [r7, #6]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d101      	bne.n	800b40a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b406:	2301      	movs	r3, #1
 800b408:	e074      	b.n	800b4f4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	2200      	movs	r2, #0
 800b40e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2221      	movs	r2, #33	; 0x21
 800b416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b41a:	f7fc f957 	bl	80076cc <HAL_GetTick>
 800b41e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	88fa      	ldrh	r2, [r7, #6]
 800b424:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	88fa      	ldrh	r2, [r7, #6]
 800b42c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	689b      	ldr	r3, [r3, #8]
 800b434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b438:	d108      	bne.n	800b44c <HAL_UART_Transmit+0x6c>
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d104      	bne.n	800b44c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b442:	2300      	movs	r3, #0
 800b444:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	61bb      	str	r3, [r7, #24]
 800b44a:	e003      	b.n	800b454 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b450:	2300      	movs	r3, #0
 800b452:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b454:	e030      	b.n	800b4b8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	9300      	str	r3, [sp, #0]
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	2200      	movs	r2, #0
 800b45e:	2180      	movs	r1, #128	; 0x80
 800b460:	68f8      	ldr	r0, [r7, #12]
 800b462:	f000 ff03 	bl	800c26c <UART_WaitOnFlagUntilTimeout>
 800b466:	4603      	mov	r3, r0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d005      	beq.n	800b478 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2220      	movs	r2, #32
 800b470:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b474:	2303      	movs	r3, #3
 800b476:	e03d      	b.n	800b4f4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b478:	69fb      	ldr	r3, [r7, #28]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d10b      	bne.n	800b496 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b47e:	69bb      	ldr	r3, [r7, #24]
 800b480:	881b      	ldrh	r3, [r3, #0]
 800b482:	461a      	mov	r2, r3
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b48c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	3302      	adds	r3, #2
 800b492:	61bb      	str	r3, [r7, #24]
 800b494:	e007      	b.n	800b4a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b496:	69fb      	ldr	r3, [r7, #28]
 800b498:	781a      	ldrb	r2, [r3, #0]
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	b29a      	uxth	r2, r3
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d1c8      	bne.n	800b456 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	9300      	str	r3, [sp, #0]
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	2140      	movs	r1, #64	; 0x40
 800b4ce:	68f8      	ldr	r0, [r7, #12]
 800b4d0:	f000 fecc 	bl	800c26c <UART_WaitOnFlagUntilTimeout>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d005      	beq.n	800b4e6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	2220      	movs	r2, #32
 800b4de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800b4e2:	2303      	movs	r3, #3
 800b4e4:	e006      	b.n	800b4f4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2220      	movs	r2, #32
 800b4ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	e000      	b.n	800b4f4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b4f2:	2302      	movs	r3, #2
  }
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3720      	adds	r7, #32
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b0ba      	sub	sp, #232	; 0xe8
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	69db      	ldr	r3, [r3, #28]
 800b50a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	689b      	ldr	r3, [r3, #8]
 800b51e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b522:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b526:	f640 030f 	movw	r3, #2063	; 0x80f
 800b52a:	4013      	ands	r3, r2
 800b52c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b530:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b534:	2b00      	cmp	r3, #0
 800b536:	d11b      	bne.n	800b570 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b53c:	f003 0320 	and.w	r3, r3, #32
 800b540:	2b00      	cmp	r3, #0
 800b542:	d015      	beq.n	800b570 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b548:	f003 0320 	and.w	r3, r3, #32
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d105      	bne.n	800b55c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d009      	beq.n	800b570 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b560:	2b00      	cmp	r3, #0
 800b562:	f000 82e3 	beq.w	800bb2c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	4798      	blx	r3
      }
      return;
 800b56e:	e2dd      	b.n	800bb2c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b570:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b574:	2b00      	cmp	r3, #0
 800b576:	f000 8123 	beq.w	800b7c0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b57a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b57e:	4b8d      	ldr	r3, [pc, #564]	; (800b7b4 <HAL_UART_IRQHandler+0x2b8>)
 800b580:	4013      	ands	r3, r2
 800b582:	2b00      	cmp	r3, #0
 800b584:	d106      	bne.n	800b594 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b586:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b58a:	4b8b      	ldr	r3, [pc, #556]	; (800b7b8 <HAL_UART_IRQHandler+0x2bc>)
 800b58c:	4013      	ands	r3, r2
 800b58e:	2b00      	cmp	r3, #0
 800b590:	f000 8116 	beq.w	800b7c0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b598:	f003 0301 	and.w	r3, r3, #1
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d011      	beq.n	800b5c4 <HAL_UART_IRQHandler+0xc8>
 800b5a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d00b      	beq.n	800b5c4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5ba:	f043 0201 	orr.w	r2, r3, #1
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b5c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5c8:	f003 0302 	and.w	r3, r3, #2
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d011      	beq.n	800b5f4 <HAL_UART_IRQHandler+0xf8>
 800b5d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5d4:	f003 0301 	and.w	r3, r3, #1
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d00b      	beq.n	800b5f4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2202      	movs	r2, #2
 800b5e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5ea:	f043 0204 	orr.w	r2, r3, #4
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b5f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5f8:	f003 0304 	and.w	r3, r3, #4
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d011      	beq.n	800b624 <HAL_UART_IRQHandler+0x128>
 800b600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b604:	f003 0301 	and.w	r3, r3, #1
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d00b      	beq.n	800b624 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	2204      	movs	r2, #4
 800b612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b61a:	f043 0202 	orr.w	r2, r3, #2
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b628:	f003 0308 	and.w	r3, r3, #8
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d017      	beq.n	800b660 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b634:	f003 0320 	and.w	r3, r3, #32
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d105      	bne.n	800b648 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b63c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b640:	4b5c      	ldr	r3, [pc, #368]	; (800b7b4 <HAL_UART_IRQHandler+0x2b8>)
 800b642:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b644:	2b00      	cmp	r3, #0
 800b646:	d00b      	beq.n	800b660 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2208      	movs	r2, #8
 800b64e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b656:	f043 0208 	orr.w	r2, r3, #8
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d012      	beq.n	800b692 <HAL_UART_IRQHandler+0x196>
 800b66c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b670:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b674:	2b00      	cmp	r3, #0
 800b676:	d00c      	beq.n	800b692 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b680:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b688:	f043 0220 	orr.w	r2, r3, #32
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b698:	2b00      	cmp	r3, #0
 800b69a:	f000 8249 	beq.w	800bb30 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b69e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6a2:	f003 0320 	and.w	r3, r3, #32
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d013      	beq.n	800b6d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b6aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6ae:	f003 0320 	and.w	r3, r3, #32
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d105      	bne.n	800b6c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b6b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d007      	beq.n	800b6d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d003      	beq.n	800b6d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	689b      	ldr	r3, [r3, #8]
 800b6e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6e6:	2b40      	cmp	r3, #64	; 0x40
 800b6e8:	d005      	beq.n	800b6f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b6ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d054      	beq.n	800b7a0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 fe25 	bl	800c346 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b706:	2b40      	cmp	r3, #64	; 0x40
 800b708:	d146      	bne.n	800b798 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	3308      	adds	r3, #8
 800b710:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b714:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b718:	e853 3f00 	ldrex	r3, [r3]
 800b71c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b720:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b728:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	3308      	adds	r3, #8
 800b732:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b736:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b73a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b73e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b742:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b746:	e841 2300 	strex	r3, r2, [r1]
 800b74a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b74e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b752:	2b00      	cmp	r3, #0
 800b754:	d1d9      	bne.n	800b70a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d017      	beq.n	800b790 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b766:	4a15      	ldr	r2, [pc, #84]	; (800b7bc <HAL_UART_IRQHandler+0x2c0>)
 800b768:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b770:	4618      	mov	r0, r3
 800b772:	f7fc fa70 	bl	8007c56 <HAL_DMA_Abort_IT>
 800b776:	4603      	mov	r3, r0
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d019      	beq.n	800b7b0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b78a:	4610      	mov	r0, r2
 800b78c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b78e:	e00f      	b.n	800b7b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 f9e1 	bl	800bb58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b796:	e00b      	b.n	800b7b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 f9dd 	bl	800bb58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b79e:	e007      	b.n	800b7b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 f9d9 	bl	800bb58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b7ae:	e1bf      	b.n	800bb30 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7b0:	bf00      	nop
    return;
 800b7b2:	e1bd      	b.n	800bb30 <HAL_UART_IRQHandler+0x634>
 800b7b4:	10000001 	.word	0x10000001
 800b7b8:	04000120 	.word	0x04000120
 800b7bc:	0800c413 	.word	0x0800c413

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	f040 8153 	bne.w	800ba70 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b7ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7ce:	f003 0310 	and.w	r3, r3, #16
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	f000 814c 	beq.w	800ba70 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b7d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7dc:	f003 0310 	and.w	r3, r3, #16
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f000 8145 	beq.w	800ba70 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	2210      	movs	r2, #16
 800b7ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7f8:	2b40      	cmp	r3, #64	; 0x40
 800b7fa:	f040 80bb 	bne.w	800b974 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b80c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b810:	2b00      	cmp	r3, #0
 800b812:	f000 818f 	beq.w	800bb34 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b81c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b820:	429a      	cmp	r2, r3
 800b822:	f080 8187 	bcs.w	800bb34 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b82c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f003 0320 	and.w	r3, r3, #32
 800b83e:	2b00      	cmp	r3, #0
 800b840:	f040 8087 	bne.w	800b952 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b84c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b850:	e853 3f00 	ldrex	r3, [r3]
 800b854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b858:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b85c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b860:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	461a      	mov	r2, r3
 800b86a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b86e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b872:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b876:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b87a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b87e:	e841 2300 	strex	r3, r2, [r1]
 800b882:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b886:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d1da      	bne.n	800b844 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	3308      	adds	r3, #8
 800b894:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b898:	e853 3f00 	ldrex	r3, [r3]
 800b89c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b89e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8a0:	f023 0301 	bic.w	r3, r3, #1
 800b8a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	3308      	adds	r3, #8
 800b8ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b8b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b8b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b8ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b8be:	e841 2300 	strex	r3, r2, [r1]
 800b8c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b8c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d1e1      	bne.n	800b88e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	3308      	adds	r3, #8
 800b8d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8d4:	e853 3f00 	ldrex	r3, [r3]
 800b8d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b8da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	3308      	adds	r3, #8
 800b8ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b8ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b8f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b8f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b8f6:	e841 2300 	strex	r3, r2, [r1]
 800b8fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b8fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d1e3      	bne.n	800b8ca <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2220      	movs	r2, #32
 800b906:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2200      	movs	r2, #0
 800b90e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b918:	e853 3f00 	ldrex	r3, [r3]
 800b91c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b91e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b920:	f023 0310 	bic.w	r3, r3, #16
 800b924:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	461a      	mov	r2, r3
 800b92e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b932:	65bb      	str	r3, [r7, #88]	; 0x58
 800b934:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b936:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b938:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b93a:	e841 2300 	strex	r3, r2, [r1]
 800b93e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b942:	2b00      	cmp	r3, #0
 800b944:	d1e4      	bne.n	800b910 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7fc f923 	bl	8007b98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2202      	movs	r2, #2
 800b956:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b964:	b29b      	uxth	r3, r3
 800b966:	1ad3      	subs	r3, r2, r3
 800b968:	b29b      	uxth	r3, r3
 800b96a:	4619      	mov	r1, r3
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f000 f8fd 	bl	800bb6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b972:	e0df      	b.n	800bb34 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b980:	b29b      	uxth	r3, r3
 800b982:	1ad3      	subs	r3, r2, r3
 800b984:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b98e:	b29b      	uxth	r3, r3
 800b990:	2b00      	cmp	r3, #0
 800b992:	f000 80d1 	beq.w	800bb38 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800b996:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	f000 80cc 	beq.w	800bb38 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a8:	e853 3f00 	ldrex	r3, [r3]
 800b9ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b9b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	461a      	mov	r2, r3
 800b9be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b9c2:	647b      	str	r3, [r7, #68]	; 0x44
 800b9c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b9c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9ca:	e841 2300 	strex	r3, r2, [r1]
 800b9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b9d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d1e4      	bne.n	800b9a0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	3308      	adds	r3, #8
 800b9dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e0:	e853 3f00 	ldrex	r3, [r3]
 800b9e4:	623b      	str	r3, [r7, #32]
   return(result);
 800b9e6:	6a3b      	ldr	r3, [r7, #32]
 800b9e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b9ec:	f023 0301 	bic.w	r3, r3, #1
 800b9f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	3308      	adds	r3, #8
 800b9fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b9fe:	633a      	str	r2, [r7, #48]	; 0x30
 800ba00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba06:	e841 2300 	strex	r3, r2, [r1]
 800ba0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d1e1      	bne.n	800b9d6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2220      	movs	r2, #32
 800ba16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2200      	movs	r2, #0
 800ba24:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	e853 3f00 	ldrex	r3, [r3]
 800ba32:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	f023 0310 	bic.w	r3, r3, #16
 800ba3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	461a      	mov	r2, r3
 800ba44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ba48:	61fb      	str	r3, [r7, #28]
 800ba4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba4c:	69b9      	ldr	r1, [r7, #24]
 800ba4e:	69fa      	ldr	r2, [r7, #28]
 800ba50:	e841 2300 	strex	r3, r2, [r1]
 800ba54:	617b      	str	r3, [r7, #20]
   return(result);
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d1e4      	bne.n	800ba26 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2202      	movs	r2, #2
 800ba60:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ba62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ba66:	4619      	mov	r1, r3
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 f87f 	bl	800bb6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ba6e:	e063      	b.n	800bb38 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ba70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d00e      	beq.n	800ba9a <HAL_UART_IRQHandler+0x59e>
 800ba7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d008      	beq.n	800ba9a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ba90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f000 fcfe 	bl	800c494 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ba98:	e051      	b.n	800bb3e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ba9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d014      	beq.n	800bad0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800baa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800baaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d105      	bne.n	800babe <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bab6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800baba:	2b00      	cmp	r3, #0
 800babc:	d008      	beq.n	800bad0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d03a      	beq.n	800bb3c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	4798      	blx	r3
    }
    return;
 800bace:	e035      	b.n	800bb3c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d009      	beq.n	800baf0 <HAL_UART_IRQHandler+0x5f4>
 800badc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d003      	beq.n	800baf0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f000 fca8 	bl	800c43e <UART_EndTransmit_IT>
    return;
 800baee:	e026      	b.n	800bb3e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800baf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d009      	beq.n	800bb10 <HAL_UART_IRQHandler+0x614>
 800bafc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d003      	beq.n	800bb10 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 fcd7 	bl	800c4bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb0e:	e016      	b.n	800bb3e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bb10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d010      	beq.n	800bb3e <HAL_UART_IRQHandler+0x642>
 800bb1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	da0c      	bge.n	800bb3e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f000 fcbf 	bl	800c4a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb2a:	e008      	b.n	800bb3e <HAL_UART_IRQHandler+0x642>
      return;
 800bb2c:	bf00      	nop
 800bb2e:	e006      	b.n	800bb3e <HAL_UART_IRQHandler+0x642>
    return;
 800bb30:	bf00      	nop
 800bb32:	e004      	b.n	800bb3e <HAL_UART_IRQHandler+0x642>
      return;
 800bb34:	bf00      	nop
 800bb36:	e002      	b.n	800bb3e <HAL_UART_IRQHandler+0x642>
      return;
 800bb38:	bf00      	nop
 800bb3a:	e000      	b.n	800bb3e <HAL_UART_IRQHandler+0x642>
    return;
 800bb3c:	bf00      	nop
  }
}
 800bb3e:	37e8      	adds	r7, #232	; 0xe8
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bb4c:	bf00      	nop
 800bb4e:	370c      	adds	r7, #12
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr

0800bb58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bb60:	bf00      	nop
 800bb62:	370c      	adds	r7, #12
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr

0800bb6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	460b      	mov	r3, r1
 800bb76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bb78:	bf00      	nop
 800bb7a:	370c      	adds	r7, #12
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr

0800bb84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb88:	b08c      	sub	sp, #48	; 0x30
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	689a      	ldr	r2, [r3, #8]
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	691b      	ldr	r3, [r3, #16]
 800bb9c:	431a      	orrs	r2, r3
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	695b      	ldr	r3, [r3, #20]
 800bba2:	431a      	orrs	r2, r3
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	69db      	ldr	r3, [r3, #28]
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	4baf      	ldr	r3, [pc, #700]	; (800be70 <UART_SetConfig+0x2ec>)
 800bbb4:	4013      	ands	r3, r2
 800bbb6:	697a      	ldr	r2, [r7, #20]
 800bbb8:	6812      	ldr	r2, [r2, #0]
 800bbba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bbbc:	430b      	orrs	r3, r1
 800bbbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	68da      	ldr	r2, [r3, #12]
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	430a      	orrs	r2, r1
 800bbd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	699b      	ldr	r3, [r3, #24]
 800bbda:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4aa4      	ldr	r2, [pc, #656]	; (800be74 <UART_SetConfig+0x2f0>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d004      	beq.n	800bbf0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	6a1b      	ldr	r3, [r3, #32]
 800bbea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbec:	4313      	orrs	r3, r2
 800bbee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	689b      	ldr	r3, [r3, #8]
 800bbf6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800bbfa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800bbfe:	697a      	ldr	r2, [r7, #20]
 800bc00:	6812      	ldr	r2, [r2, #0]
 800bc02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc04:	430b      	orrs	r3, r1
 800bc06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc0e:	f023 010f 	bic.w	r1, r3, #15
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	430a      	orrs	r2, r1
 800bc1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4a95      	ldr	r2, [pc, #596]	; (800be78 <UART_SetConfig+0x2f4>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d125      	bne.n	800bc74 <UART_SetConfig+0xf0>
 800bc28:	2003      	movs	r0, #3
 800bc2a:	f7ff fb69 	bl	800b300 <LL_RCC_GetUSARTClockSource>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	2b03      	cmp	r3, #3
 800bc32:	d81b      	bhi.n	800bc6c <UART_SetConfig+0xe8>
 800bc34:	a201      	add	r2, pc, #4	; (adr r2, 800bc3c <UART_SetConfig+0xb8>)
 800bc36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc3a:	bf00      	nop
 800bc3c:	0800bc4d 	.word	0x0800bc4d
 800bc40:	0800bc5d 	.word	0x0800bc5d
 800bc44:	0800bc55 	.word	0x0800bc55
 800bc48:	0800bc65 	.word	0x0800bc65
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc52:	e042      	b.n	800bcda <UART_SetConfig+0x156>
 800bc54:	2302      	movs	r3, #2
 800bc56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc5a:	e03e      	b.n	800bcda <UART_SetConfig+0x156>
 800bc5c:	2304      	movs	r3, #4
 800bc5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc62:	e03a      	b.n	800bcda <UART_SetConfig+0x156>
 800bc64:	2308      	movs	r3, #8
 800bc66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc6a:	e036      	b.n	800bcda <UART_SetConfig+0x156>
 800bc6c:	2310      	movs	r3, #16
 800bc6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc72:	e032      	b.n	800bcda <UART_SetConfig+0x156>
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	4a7e      	ldr	r2, [pc, #504]	; (800be74 <UART_SetConfig+0x2f0>)
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d12a      	bne.n	800bcd4 <UART_SetConfig+0x150>
 800bc7e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800bc82:	f7ff fb4d 	bl	800b320 <LL_RCC_GetLPUARTClockSource>
 800bc86:	4603      	mov	r3, r0
 800bc88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc8c:	d01a      	beq.n	800bcc4 <UART_SetConfig+0x140>
 800bc8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc92:	d81b      	bhi.n	800bccc <UART_SetConfig+0x148>
 800bc94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc98:	d00c      	beq.n	800bcb4 <UART_SetConfig+0x130>
 800bc9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc9e:	d815      	bhi.n	800bccc <UART_SetConfig+0x148>
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d003      	beq.n	800bcac <UART_SetConfig+0x128>
 800bca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bca8:	d008      	beq.n	800bcbc <UART_SetConfig+0x138>
 800bcaa:	e00f      	b.n	800bccc <UART_SetConfig+0x148>
 800bcac:	2300      	movs	r3, #0
 800bcae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcb2:	e012      	b.n	800bcda <UART_SetConfig+0x156>
 800bcb4:	2302      	movs	r3, #2
 800bcb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcba:	e00e      	b.n	800bcda <UART_SetConfig+0x156>
 800bcbc:	2304      	movs	r3, #4
 800bcbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcc2:	e00a      	b.n	800bcda <UART_SetConfig+0x156>
 800bcc4:	2308      	movs	r3, #8
 800bcc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcca:	e006      	b.n	800bcda <UART_SetConfig+0x156>
 800bccc:	2310      	movs	r3, #16
 800bcce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcd2:	e002      	b.n	800bcda <UART_SetConfig+0x156>
 800bcd4:	2310      	movs	r3, #16
 800bcd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4a65      	ldr	r2, [pc, #404]	; (800be74 <UART_SetConfig+0x2f0>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	f040 8097 	bne.w	800be14 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bce6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bcea:	2b08      	cmp	r3, #8
 800bcec:	d823      	bhi.n	800bd36 <UART_SetConfig+0x1b2>
 800bcee:	a201      	add	r2, pc, #4	; (adr r2, 800bcf4 <UART_SetConfig+0x170>)
 800bcf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf4:	0800bd19 	.word	0x0800bd19
 800bcf8:	0800bd37 	.word	0x0800bd37
 800bcfc:	0800bd21 	.word	0x0800bd21
 800bd00:	0800bd37 	.word	0x0800bd37
 800bd04:	0800bd27 	.word	0x0800bd27
 800bd08:	0800bd37 	.word	0x0800bd37
 800bd0c:	0800bd37 	.word	0x0800bd37
 800bd10:	0800bd37 	.word	0x0800bd37
 800bd14:	0800bd2f 	.word	0x0800bd2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd18:	f7fd fd6a 	bl	80097f0 <HAL_RCC_GetPCLK1Freq>
 800bd1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd1e:	e010      	b.n	800bd42 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd20:	4b56      	ldr	r3, [pc, #344]	; (800be7c <UART_SetConfig+0x2f8>)
 800bd22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd24:	e00d      	b.n	800bd42 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd26:	f7fd fce3 	bl	80096f0 <HAL_RCC_GetSysClockFreq>
 800bd2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd2c:	e009      	b.n	800bd42 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd34:	e005      	b.n	800bd42 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800bd36:	2300      	movs	r3, #0
 800bd38:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bd40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	f000 812b 	beq.w	800bfa0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd4e:	4a4c      	ldr	r2, [pc, #304]	; (800be80 <UART_SetConfig+0x2fc>)
 800bd50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd54:	461a      	mov	r2, r3
 800bd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd58:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd5c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	685a      	ldr	r2, [r3, #4]
 800bd62:	4613      	mov	r3, r2
 800bd64:	005b      	lsls	r3, r3, #1
 800bd66:	4413      	add	r3, r2
 800bd68:	69ba      	ldr	r2, [r7, #24]
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d305      	bcc.n	800bd7a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd74:	69ba      	ldr	r2, [r7, #24]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d903      	bls.n	800bd82 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bd80:	e10e      	b.n	800bfa0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd84:	2200      	movs	r2, #0
 800bd86:	60bb      	str	r3, [r7, #8]
 800bd88:	60fa      	str	r2, [r7, #12]
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd8e:	4a3c      	ldr	r2, [pc, #240]	; (800be80 <UART_SetConfig+0x2fc>)
 800bd90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	2200      	movs	r2, #0
 800bd98:	603b      	str	r3, [r7, #0]
 800bd9a:	607a      	str	r2, [r7, #4]
 800bd9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bda0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bda4:	f7f4 ff28 	bl	8000bf8 <__aeabi_uldivmod>
 800bda8:	4602      	mov	r2, r0
 800bdaa:	460b      	mov	r3, r1
 800bdac:	4610      	mov	r0, r2
 800bdae:	4619      	mov	r1, r3
 800bdb0:	f04f 0200 	mov.w	r2, #0
 800bdb4:	f04f 0300 	mov.w	r3, #0
 800bdb8:	020b      	lsls	r3, r1, #8
 800bdba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bdbe:	0202      	lsls	r2, r0, #8
 800bdc0:	6979      	ldr	r1, [r7, #20]
 800bdc2:	6849      	ldr	r1, [r1, #4]
 800bdc4:	0849      	lsrs	r1, r1, #1
 800bdc6:	2000      	movs	r0, #0
 800bdc8:	460c      	mov	r4, r1
 800bdca:	4605      	mov	r5, r0
 800bdcc:	eb12 0804 	adds.w	r8, r2, r4
 800bdd0:	eb43 0905 	adc.w	r9, r3, r5
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	469a      	mov	sl, r3
 800bddc:	4693      	mov	fp, r2
 800bdde:	4652      	mov	r2, sl
 800bde0:	465b      	mov	r3, fp
 800bde2:	4640      	mov	r0, r8
 800bde4:	4649      	mov	r1, r9
 800bde6:	f7f4 ff07 	bl	8000bf8 <__aeabi_uldivmod>
 800bdea:	4602      	mov	r2, r0
 800bdec:	460b      	mov	r3, r1
 800bdee:	4613      	mov	r3, r2
 800bdf0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bdf2:	6a3b      	ldr	r3, [r7, #32]
 800bdf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bdf8:	d308      	bcc.n	800be0c <UART_SetConfig+0x288>
 800bdfa:	6a3b      	ldr	r3, [r7, #32]
 800bdfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be00:	d204      	bcs.n	800be0c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	6a3a      	ldr	r2, [r7, #32]
 800be08:	60da      	str	r2, [r3, #12]
 800be0a:	e0c9      	b.n	800bfa0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800be0c:	2301      	movs	r3, #1
 800be0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800be12:	e0c5      	b.n	800bfa0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	69db      	ldr	r3, [r3, #28]
 800be18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be1c:	d16d      	bne.n	800befa <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800be1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be22:	3b01      	subs	r3, #1
 800be24:	2b07      	cmp	r3, #7
 800be26:	d82d      	bhi.n	800be84 <UART_SetConfig+0x300>
 800be28:	a201      	add	r2, pc, #4	; (adr r2, 800be30 <UART_SetConfig+0x2ac>)
 800be2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be2e:	bf00      	nop
 800be30:	0800be51 	.word	0x0800be51
 800be34:	0800be59 	.word	0x0800be59
 800be38:	0800be85 	.word	0x0800be85
 800be3c:	0800be5f 	.word	0x0800be5f
 800be40:	0800be85 	.word	0x0800be85
 800be44:	0800be85 	.word	0x0800be85
 800be48:	0800be85 	.word	0x0800be85
 800be4c:	0800be67 	.word	0x0800be67
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be50:	f7fd fce4 	bl	800981c <HAL_RCC_GetPCLK2Freq>
 800be54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800be56:	e01b      	b.n	800be90 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800be58:	4b08      	ldr	r3, [pc, #32]	; (800be7c <UART_SetConfig+0x2f8>)
 800be5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800be5c:	e018      	b.n	800be90 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800be5e:	f7fd fc47 	bl	80096f0 <HAL_RCC_GetSysClockFreq>
 800be62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800be64:	e014      	b.n	800be90 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800be6c:	e010      	b.n	800be90 <UART_SetConfig+0x30c>
 800be6e:	bf00      	nop
 800be70:	cfff69f3 	.word	0xcfff69f3
 800be74:	40008000 	.word	0x40008000
 800be78:	40013800 	.word	0x40013800
 800be7c:	00f42400 	.word	0x00f42400
 800be80:	08014908 	.word	0x08014908
      default:
        pclk = 0U;
 800be84:	2300      	movs	r3, #0
 800be86:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800be88:	2301      	movs	r3, #1
 800be8a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800be8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800be90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be92:	2b00      	cmp	r3, #0
 800be94:	f000 8084 	beq.w	800bfa0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be9c:	4a4b      	ldr	r2, [pc, #300]	; (800bfcc <UART_SetConfig+0x448>)
 800be9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bea2:	461a      	mov	r2, r3
 800bea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea6:	fbb3 f3f2 	udiv	r3, r3, r2
 800beaa:	005a      	lsls	r2, r3, #1
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	685b      	ldr	r3, [r3, #4]
 800beb0:	085b      	lsrs	r3, r3, #1
 800beb2:	441a      	add	r2, r3
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bebc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bebe:	6a3b      	ldr	r3, [r7, #32]
 800bec0:	2b0f      	cmp	r3, #15
 800bec2:	d916      	bls.n	800bef2 <UART_SetConfig+0x36e>
 800bec4:	6a3b      	ldr	r3, [r7, #32]
 800bec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800beca:	d212      	bcs.n	800bef2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800becc:	6a3b      	ldr	r3, [r7, #32]
 800bece:	b29b      	uxth	r3, r3
 800bed0:	f023 030f 	bic.w	r3, r3, #15
 800bed4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bed6:	6a3b      	ldr	r3, [r7, #32]
 800bed8:	085b      	lsrs	r3, r3, #1
 800beda:	b29b      	uxth	r3, r3
 800bedc:	f003 0307 	and.w	r3, r3, #7
 800bee0:	b29a      	uxth	r2, r3
 800bee2:	8bfb      	ldrh	r3, [r7, #30]
 800bee4:	4313      	orrs	r3, r2
 800bee6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	8bfa      	ldrh	r2, [r7, #30]
 800beee:	60da      	str	r2, [r3, #12]
 800bef0:	e056      	b.n	800bfa0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800bef2:	2301      	movs	r3, #1
 800bef4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bef8:	e052      	b.n	800bfa0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800befa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800befe:	3b01      	subs	r3, #1
 800bf00:	2b07      	cmp	r3, #7
 800bf02:	d822      	bhi.n	800bf4a <UART_SetConfig+0x3c6>
 800bf04:	a201      	add	r2, pc, #4	; (adr r2, 800bf0c <UART_SetConfig+0x388>)
 800bf06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf0a:	bf00      	nop
 800bf0c:	0800bf2d 	.word	0x0800bf2d
 800bf10:	0800bf35 	.word	0x0800bf35
 800bf14:	0800bf4b 	.word	0x0800bf4b
 800bf18:	0800bf3b 	.word	0x0800bf3b
 800bf1c:	0800bf4b 	.word	0x0800bf4b
 800bf20:	0800bf4b 	.word	0x0800bf4b
 800bf24:	0800bf4b 	.word	0x0800bf4b
 800bf28:	0800bf43 	.word	0x0800bf43
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf2c:	f7fd fc76 	bl	800981c <HAL_RCC_GetPCLK2Freq>
 800bf30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bf32:	e010      	b.n	800bf56 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bf34:	4b26      	ldr	r3, [pc, #152]	; (800bfd0 <UART_SetConfig+0x44c>)
 800bf36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bf38:	e00d      	b.n	800bf56 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bf3a:	f7fd fbd9 	bl	80096f0 <HAL_RCC_GetSysClockFreq>
 800bf3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bf40:	e009      	b.n	800bf56 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bf48:	e005      	b.n	800bf56 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bf54:	bf00      	nop
    }

    if (pclk != 0U)
 800bf56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d021      	beq.n	800bfa0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf60:	4a1a      	ldr	r2, [pc, #104]	; (800bfcc <UART_SetConfig+0x448>)
 800bf62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf66:	461a      	mov	r2, r3
 800bf68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6a:	fbb3 f2f2 	udiv	r2, r3, r2
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	085b      	lsrs	r3, r3, #1
 800bf74:	441a      	add	r2, r3
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf7e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf80:	6a3b      	ldr	r3, [r7, #32]
 800bf82:	2b0f      	cmp	r3, #15
 800bf84:	d909      	bls.n	800bf9a <UART_SetConfig+0x416>
 800bf86:	6a3b      	ldr	r3, [r7, #32]
 800bf88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf8c:	d205      	bcs.n	800bf9a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bf8e:	6a3b      	ldr	r3, [r7, #32]
 800bf90:	b29a      	uxth	r2, r3
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	60da      	str	r2, [r3, #12]
 800bf98:	e002      	b.n	800bfa0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	2201      	movs	r2, #1
 800bfac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800bfbc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3730      	adds	r7, #48	; 0x30
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bfca:	bf00      	nop
 800bfcc:	08014908 	.word	0x08014908
 800bfd0:	00f42400 	.word	0x00f42400

0800bfd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b083      	sub	sp, #12
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfe0:	f003 0308 	and.w	r3, r3, #8
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d00a      	beq.n	800bffe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	430a      	orrs	r2, r1
 800bffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c002:	f003 0301 	and.w	r3, r3, #1
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00a      	beq.n	800c020 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	430a      	orrs	r2, r1
 800c01e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c024:	f003 0302 	and.w	r3, r3, #2
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d00a      	beq.n	800c042 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	430a      	orrs	r2, r1
 800c040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c046:	f003 0304 	and.w	r3, r3, #4
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d00a      	beq.n	800c064 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	430a      	orrs	r2, r1
 800c062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c068:	f003 0310 	and.w	r3, r3, #16
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d00a      	beq.n	800c086 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	689b      	ldr	r3, [r3, #8]
 800c076:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	430a      	orrs	r2, r1
 800c084:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c08a:	f003 0320 	and.w	r3, r3, #32
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d00a      	beq.n	800c0a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	689b      	ldr	r3, [r3, #8]
 800c098:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	430a      	orrs	r2, r1
 800c0a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d01a      	beq.n	800c0ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	430a      	orrs	r2, r1
 800c0c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0d2:	d10a      	bne.n	800c0ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	430a      	orrs	r2, r1
 800c0e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d00a      	beq.n	800c10c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	430a      	orrs	r2, r1
 800c10a:	605a      	str	r2, [r3, #4]
  }
}
 800c10c:	bf00      	nop
 800c10e:	370c      	adds	r7, #12
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b098      	sub	sp, #96	; 0x60
 800c11c:	af02      	add	r7, sp, #8
 800c11e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2200      	movs	r2, #0
 800c124:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c128:	f7fb fad0 	bl	80076cc <HAL_GetTick>
 800c12c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f003 0308 	and.w	r3, r3, #8
 800c138:	2b08      	cmp	r3, #8
 800c13a:	d12f      	bne.n	800c19c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c13c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c140:	9300      	str	r3, [sp, #0]
 800c142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c144:	2200      	movs	r2, #0
 800c146:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 f88e 	bl	800c26c <UART_WaitOnFlagUntilTimeout>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d022      	beq.n	800c19c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c15e:	e853 3f00 	ldrex	r3, [r3]
 800c162:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c16a:	653b      	str	r3, [r7, #80]	; 0x50
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	461a      	mov	r2, r3
 800c172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c174:	647b      	str	r3, [r7, #68]	; 0x44
 800c176:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c178:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c17a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c17c:	e841 2300 	strex	r3, r2, [r1]
 800c180:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c184:	2b00      	cmp	r3, #0
 800c186:	d1e6      	bne.n	800c156 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2220      	movs	r2, #32
 800c18c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2200      	movs	r2, #0
 800c194:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c198:	2303      	movs	r3, #3
 800c19a:	e063      	b.n	800c264 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f003 0304 	and.w	r3, r3, #4
 800c1a6:	2b04      	cmp	r3, #4
 800c1a8:	d149      	bne.n	800c23e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c1aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c1ae:	9300      	str	r3, [sp, #0]
 800c1b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f000 f857 	bl	800c26c <UART_WaitOnFlagUntilTimeout>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d03c      	beq.n	800c23e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1cc:	e853 3f00 	ldrex	r3, [r3]
 800c1d0:	623b      	str	r3, [r7, #32]
   return(result);
 800c1d2:	6a3b      	ldr	r3, [r7, #32]
 800c1d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c1d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	461a      	mov	r2, r3
 800c1e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1e2:	633b      	str	r3, [r7, #48]	; 0x30
 800c1e4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c1e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1ea:	e841 2300 	strex	r3, r2, [r1]
 800c1ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d1e6      	bne.n	800c1c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	3308      	adds	r3, #8
 800c1fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	e853 3f00 	ldrex	r3, [r3]
 800c204:	60fb      	str	r3, [r7, #12]
   return(result);
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	f023 0301 	bic.w	r3, r3, #1
 800c20c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	3308      	adds	r3, #8
 800c214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c216:	61fa      	str	r2, [r7, #28]
 800c218:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c21a:	69b9      	ldr	r1, [r7, #24]
 800c21c:	69fa      	ldr	r2, [r7, #28]
 800c21e:	e841 2300 	strex	r3, r2, [r1]
 800c222:	617b      	str	r3, [r7, #20]
   return(result);
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d1e5      	bne.n	800c1f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2220      	movs	r2, #32
 800c22e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c23a:	2303      	movs	r3, #3
 800c23c:	e012      	b.n	800c264 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2220      	movs	r2, #32
 800c242:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2220      	movs	r2, #32
 800c24a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2200      	movs	r2, #0
 800c252:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c262:	2300      	movs	r3, #0
}
 800c264:	4618      	mov	r0, r3
 800c266:	3758      	adds	r7, #88	; 0x58
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	60f8      	str	r0, [r7, #12]
 800c274:	60b9      	str	r1, [r7, #8]
 800c276:	603b      	str	r3, [r7, #0]
 800c278:	4613      	mov	r3, r2
 800c27a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c27c:	e04f      	b.n	800c31e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c284:	d04b      	beq.n	800c31e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c286:	f7fb fa21 	bl	80076cc <HAL_GetTick>
 800c28a:	4602      	mov	r2, r0
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	1ad3      	subs	r3, r2, r3
 800c290:	69ba      	ldr	r2, [r7, #24]
 800c292:	429a      	cmp	r2, r3
 800c294:	d302      	bcc.n	800c29c <UART_WaitOnFlagUntilTimeout+0x30>
 800c296:	69bb      	ldr	r3, [r7, #24]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d101      	bne.n	800c2a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c29c:	2303      	movs	r3, #3
 800c29e:	e04e      	b.n	800c33e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f003 0304 	and.w	r3, r3, #4
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d037      	beq.n	800c31e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	2b80      	cmp	r3, #128	; 0x80
 800c2b2:	d034      	beq.n	800c31e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	2b40      	cmp	r3, #64	; 0x40
 800c2b8:	d031      	beq.n	800c31e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	69db      	ldr	r3, [r3, #28]
 800c2c0:	f003 0308 	and.w	r3, r3, #8
 800c2c4:	2b08      	cmp	r3, #8
 800c2c6:	d110      	bne.n	800c2ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	2208      	movs	r2, #8
 800c2ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c2d0:	68f8      	ldr	r0, [r7, #12]
 800c2d2:	f000 f838 	bl	800c346 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2208      	movs	r2, #8
 800c2da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	e029      	b.n	800c33e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	69db      	ldr	r3, [r3, #28]
 800c2f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c2f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2f8:	d111      	bne.n	800c31e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c302:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c304:	68f8      	ldr	r0, [r7, #12]
 800c306:	f000 f81e 	bl	800c346 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2220      	movs	r2, #32
 800c30e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2200      	movs	r2, #0
 800c316:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c31a:	2303      	movs	r3, #3
 800c31c:	e00f      	b.n	800c33e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	69da      	ldr	r2, [r3, #28]
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	4013      	ands	r3, r2
 800c328:	68ba      	ldr	r2, [r7, #8]
 800c32a:	429a      	cmp	r2, r3
 800c32c:	bf0c      	ite	eq
 800c32e:	2301      	moveq	r3, #1
 800c330:	2300      	movne	r3, #0
 800c332:	b2db      	uxtb	r3, r3
 800c334:	461a      	mov	r2, r3
 800c336:	79fb      	ldrb	r3, [r7, #7]
 800c338:	429a      	cmp	r2, r3
 800c33a:	d0a0      	beq.n	800c27e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c33c:	2300      	movs	r3, #0
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3710      	adds	r7, #16
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}

0800c346 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c346:	b480      	push	{r7}
 800c348:	b095      	sub	sp, #84	; 0x54
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c356:	e853 3f00 	ldrex	r3, [r3]
 800c35a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c362:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	461a      	mov	r2, r3
 800c36a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c36c:	643b      	str	r3, [r7, #64]	; 0x40
 800c36e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c370:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c372:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c374:	e841 2300 	strex	r3, r2, [r1]
 800c378:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d1e6      	bne.n	800c34e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	3308      	adds	r3, #8
 800c386:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c388:	6a3b      	ldr	r3, [r7, #32]
 800c38a:	e853 3f00 	ldrex	r3, [r3]
 800c38e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c390:	69fb      	ldr	r3, [r7, #28]
 800c392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c396:	f023 0301 	bic.w	r3, r3, #1
 800c39a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	3308      	adds	r3, #8
 800c3a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c3a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c3a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3ac:	e841 2300 	strex	r3, r2, [r1]
 800c3b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d1e3      	bne.n	800c380 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d118      	bne.n	800c3f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	e853 3f00 	ldrex	r3, [r3]
 800c3cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	f023 0310 	bic.w	r3, r3, #16
 800c3d4:	647b      	str	r3, [r7, #68]	; 0x44
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	461a      	mov	r2, r3
 800c3dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3de:	61bb      	str	r3, [r7, #24]
 800c3e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3e2:	6979      	ldr	r1, [r7, #20]
 800c3e4:	69ba      	ldr	r2, [r7, #24]
 800c3e6:	e841 2300 	strex	r3, r2, [r1]
 800c3ea:	613b      	str	r3, [r7, #16]
   return(result);
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d1e6      	bne.n	800c3c0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2220      	movs	r2, #32
 800c3f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2200      	movs	r2, #0
 800c404:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c406:	bf00      	nop
 800c408:	3754      	adds	r7, #84	; 0x54
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr

0800c412 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c412:	b580      	push	{r7, lr}
 800c414:	b084      	sub	sp, #16
 800c416:	af00      	add	r7, sp, #0
 800c418:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c41e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	2200      	movs	r2, #0
 800c424:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2200      	movs	r2, #0
 800c42c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c430:	68f8      	ldr	r0, [r7, #12]
 800c432:	f7ff fb91 	bl	800bb58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c436:	bf00      	nop
 800c438:	3710      	adds	r7, #16
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}

0800c43e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c43e:	b580      	push	{r7, lr}
 800c440:	b088      	sub	sp, #32
 800c442:	af00      	add	r7, sp, #0
 800c444:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	e853 3f00 	ldrex	r3, [r3]
 800c452:	60bb      	str	r3, [r7, #8]
   return(result);
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c45a:	61fb      	str	r3, [r7, #28]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	461a      	mov	r2, r3
 800c462:	69fb      	ldr	r3, [r7, #28]
 800c464:	61bb      	str	r3, [r7, #24]
 800c466:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c468:	6979      	ldr	r1, [r7, #20]
 800c46a:	69ba      	ldr	r2, [r7, #24]
 800c46c:	e841 2300 	strex	r3, r2, [r1]
 800c470:	613b      	str	r3, [r7, #16]
   return(result);
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d1e6      	bne.n	800c446 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2220      	movs	r2, #32
 800c47c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2200      	movs	r2, #0
 800c484:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f7ff fb5c 	bl	800bb44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c48c:	bf00      	nop
 800c48e:	3720      	adds	r7, #32
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c49c:	bf00      	nop
 800c49e:	370c      	adds	r7, #12
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c4b0:	bf00      	nop
 800c4b2:	370c      	adds	r7, #12
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c4c4:	bf00      	nop
 800c4c6:	370c      	adds	r7, #12
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr

0800c4d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b085      	sub	sp, #20
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	d101      	bne.n	800c4e6 <HAL_UARTEx_DisableFifoMode+0x16>
 800c4e2:	2302      	movs	r3, #2
 800c4e4:	e027      	b.n	800c536 <HAL_UARTEx_DisableFifoMode+0x66>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2224      	movs	r2, #36	; 0x24
 800c4f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	681a      	ldr	r2, [r3, #0]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f022 0201 	bic.w	r2, r2, #1
 800c50c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c514:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2200      	movs	r2, #0
 800c51a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	68fa      	ldr	r2, [r7, #12]
 800c522:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2220      	movs	r2, #32
 800c528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2200      	movs	r2, #0
 800c530:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c534:	2300      	movs	r3, #0
}
 800c536:	4618      	mov	r0, r3
 800c538:	3714      	adds	r7, #20
 800c53a:	46bd      	mov	sp, r7
 800c53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c540:	4770      	bx	lr

0800c542 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c542:	b580      	push	{r7, lr}
 800c544:	b084      	sub	sp, #16
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
 800c54a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c552:	2b01      	cmp	r3, #1
 800c554:	d101      	bne.n	800c55a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c556:	2302      	movs	r3, #2
 800c558:	e02d      	b.n	800c5b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2201      	movs	r2, #1
 800c55e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2224      	movs	r2, #36	; 0x24
 800c566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	681a      	ldr	r2, [r3, #0]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f022 0201 	bic.w	r2, r2, #1
 800c580:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	689b      	ldr	r3, [r3, #8]
 800c588:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	683a      	ldr	r2, [r7, #0]
 800c592:	430a      	orrs	r2, r1
 800c594:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 f850 	bl	800c63c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2220      	movs	r2, #32
 800c5a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c5b4:	2300      	movs	r3, #0
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3710      	adds	r7, #16
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}

0800c5be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c5be:	b580      	push	{r7, lr}
 800c5c0:	b084      	sub	sp, #16
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
 800c5c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	d101      	bne.n	800c5d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c5d2:	2302      	movs	r3, #2
 800c5d4:	e02d      	b.n	800c632 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2201      	movs	r2, #1
 800c5da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2224      	movs	r2, #36	; 0x24
 800c5e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	681a      	ldr	r2, [r3, #0]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f022 0201 	bic.w	r2, r2, #1
 800c5fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	689b      	ldr	r3, [r3, #8]
 800c604:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	683a      	ldr	r2, [r7, #0]
 800c60e:	430a      	orrs	r2, r1
 800c610:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f000 f812 	bl	800c63c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	68fa      	ldr	r2, [r7, #12]
 800c61e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2220      	movs	r2, #32
 800c624:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2200      	movs	r2, #0
 800c62c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c630:	2300      	movs	r3, #0
}
 800c632:	4618      	mov	r0, r3
 800c634:	3710      	adds	r7, #16
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
	...

0800c63c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b085      	sub	sp, #20
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d108      	bne.n	800c65e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2201      	movs	r2, #1
 800c650:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2201      	movs	r2, #1
 800c658:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c65c:	e031      	b.n	800c6c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c65e:	2308      	movs	r3, #8
 800c660:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c662:	2308      	movs	r3, #8
 800c664:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	689b      	ldr	r3, [r3, #8]
 800c66c:	0e5b      	lsrs	r3, r3, #25
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	f003 0307 	and.w	r3, r3, #7
 800c674:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	0f5b      	lsrs	r3, r3, #29
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	f003 0307 	and.w	r3, r3, #7
 800c684:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c686:	7bbb      	ldrb	r3, [r7, #14]
 800c688:	7b3a      	ldrb	r2, [r7, #12]
 800c68a:	4911      	ldr	r1, [pc, #68]	; (800c6d0 <UARTEx_SetNbDataToProcess+0x94>)
 800c68c:	5c8a      	ldrb	r2, [r1, r2]
 800c68e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c692:	7b3a      	ldrb	r2, [r7, #12]
 800c694:	490f      	ldr	r1, [pc, #60]	; (800c6d4 <UARTEx_SetNbDataToProcess+0x98>)
 800c696:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c698:	fb93 f3f2 	sdiv	r3, r3, r2
 800c69c:	b29a      	uxth	r2, r3
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c6a4:	7bfb      	ldrb	r3, [r7, #15]
 800c6a6:	7b7a      	ldrb	r2, [r7, #13]
 800c6a8:	4909      	ldr	r1, [pc, #36]	; (800c6d0 <UARTEx_SetNbDataToProcess+0x94>)
 800c6aa:	5c8a      	ldrb	r2, [r1, r2]
 800c6ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c6b0:	7b7a      	ldrb	r2, [r7, #13]
 800c6b2:	4908      	ldr	r1, [pc, #32]	; (800c6d4 <UARTEx_SetNbDataToProcess+0x98>)
 800c6b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c6b6:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6ba:	b29a      	uxth	r2, r3
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c6c2:	bf00      	nop
 800c6c4:	3714      	adds	r7, #20
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr
 800c6ce:	bf00      	nop
 800c6d0:	08014920 	.word	0x08014920
 800c6d4:	08014928 	.word	0x08014928

0800c6d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b085      	sub	sp, #20
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c6e0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800c6e4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c6ec:	b29a      	uxth	r2, r3
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	43db      	mvns	r3, r3
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	4013      	ands	r3, r2
 800c6f8:	b29a      	uxth	r2, r3
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c700:	2300      	movs	r3, #0
}
 800c702:	4618      	mov	r0, r3
 800c704:	3714      	adds	r7, #20
 800c706:	46bd      	mov	sp, r7
 800c708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70c:	4770      	bx	lr

0800c70e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c70e:	b480      	push	{r7}
 800c710:	b085      	sub	sp, #20
 800c712:	af00      	add	r7, sp, #0
 800c714:	60f8      	str	r0, [r7, #12]
 800c716:	1d3b      	adds	r3, r7, #4
 800c718:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	2201      	movs	r2, #1
 800c720:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2200      	movs	r2, #0
 800c728:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	2200      	movs	r2, #0
 800c730:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2200      	movs	r2, #0
 800c738:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800c73c:	2300      	movs	r3, #0
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3714      	adds	r7, #20
 800c742:	46bd      	mov	sp, r7
 800c744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c748:	4770      	bx	lr

0800c74a <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800c74a:	b580      	push	{r7, lr}
 800c74c:	b088      	sub	sp, #32
 800c74e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c750:	2300      	movs	r3, #0
 800c752:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c754:	f107 0308 	add.w	r3, r7, #8
 800c758:	2218      	movs	r2, #24
 800c75a:	2100      	movs	r1, #0
 800c75c:	4618      	mov	r0, r3
 800c75e:	f001 f8d8 	bl	800d912 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c762:	233f      	movs	r3, #63	; 0x3f
 800c764:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800c766:	2381      	movs	r3, #129	; 0x81
 800c768:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c76a:	1dfb      	adds	r3, r7, #7
 800c76c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c76e:	2301      	movs	r3, #1
 800c770:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c772:	f107 0308 	add.w	r3, r7, #8
 800c776:	2100      	movs	r1, #0
 800c778:	4618      	mov	r0, r3
 800c77a:	f001 fb53 	bl	800de24 <hci_send_req>
 800c77e:	4603      	mov	r3, r0
 800c780:	2b00      	cmp	r3, #0
 800c782:	da01      	bge.n	800c788 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800c784:	23ff      	movs	r3, #255	; 0xff
 800c786:	e000      	b.n	800c78a <aci_gap_set_non_discoverable+0x40>
  return status;
 800c788:	79fb      	ldrb	r3, [r7, #7]
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3720      	adds	r7, #32
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}

0800c792 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800c792:	b5b0      	push	{r4, r5, r7, lr}
 800c794:	b0ce      	sub	sp, #312	; 0x138
 800c796:	af00      	add	r7, sp, #0
 800c798:	4605      	mov	r5, r0
 800c79a:	460c      	mov	r4, r1
 800c79c:	4610      	mov	r0, r2
 800c79e:	4619      	mov	r1, r3
 800c7a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c7a4:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800c7a8:	462a      	mov	r2, r5
 800c7aa:	701a      	strb	r2, [r3, #0]
 800c7ac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c7b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800c7b4:	4622      	mov	r2, r4
 800c7b6:	801a      	strh	r2, [r3, #0]
 800c7b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c7bc:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800c7c0:	4602      	mov	r2, r0
 800c7c2:	801a      	strh	r2, [r3, #0]
 800c7c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c7c8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800c7cc:	460a      	mov	r2, r1
 800c7ce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800c7d0:	f107 0310 	add.w	r3, r7, #16
 800c7d4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800c7d8:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800c7dc:	3308      	adds	r3, #8
 800c7de:	f107 0210 	add.w	r2, r7, #16
 800c7e2:	4413      	add	r3, r2
 800c7e4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800c7e8:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800c7ec:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800c7f0:	4413      	add	r3, r2
 800c7f2:	3309      	adds	r3, #9
 800c7f4:	f107 0210 	add.w	r2, r7, #16
 800c7f8:	4413      	add	r3, r2
 800c7fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c7fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c802:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800c806:	2200      	movs	r2, #0
 800c808:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c80a:	2300      	movs	r3, #0
 800c80c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800c810:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c814:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800c818:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800c81c:	7812      	ldrb	r2, [r2, #0]
 800c81e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c820:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c824:	3301      	adds	r3, #1
 800c826:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800c82a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c82e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800c832:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800c836:	8812      	ldrh	r2, [r2, #0]
 800c838:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800c83c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c840:	3302      	adds	r3, #2
 800c842:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800c846:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c84a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800c84e:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800c852:	8812      	ldrh	r2, [r2, #0]
 800c854:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800c858:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c85c:	3302      	adds	r3, #2
 800c85e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800c862:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c866:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800c86a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800c86e:	7812      	ldrb	r2, [r2, #0]
 800c870:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800c872:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c876:	3301      	adds	r3, #1
 800c878:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800c87c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c880:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800c884:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800c886:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c88a:	3301      	adds	r3, #1
 800c88c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800c890:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c894:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800c898:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800c89a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c89e:	3301      	adds	r3, #1
 800c8a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800c8a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c8a8:	3308      	adds	r3, #8
 800c8aa:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800c8ae:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f001 f81d 	bl	800d8f2 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800c8b8:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800c8bc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c8c0:	4413      	add	r3, r2
 800c8c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800c8c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c8ca:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800c8ce:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800c8d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800c8da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c8de:	3301      	adds	r3, #1
 800c8e0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800c8e4:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f001 f802 	bl	800d8f2 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800c8ee:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800c8f2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c8f6:	4413      	add	r3, r2
 800c8f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800c8fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c900:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800c904:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800c906:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c90a:	3302      	adds	r3, #2
 800c90c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800c910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c914:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800c918:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800c91a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c91e:	3302      	adds	r3, #2
 800c920:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c924:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c928:	2218      	movs	r2, #24
 800c92a:	2100      	movs	r1, #0
 800c92c:	4618      	mov	r0, r3
 800c92e:	f000 fff0 	bl	800d912 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c932:	233f      	movs	r3, #63	; 0x3f
 800c934:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800c938:	2383      	movs	r3, #131	; 0x83
 800c93a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c93e:	f107 0310 	add.w	r3, r7, #16
 800c942:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c946:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c94a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c94e:	f107 030f 	add.w	r3, r7, #15
 800c952:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c956:	2301      	movs	r3, #1
 800c958:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c95c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c960:	2100      	movs	r1, #0
 800c962:	4618      	mov	r0, r3
 800c964:	f001 fa5e 	bl	800de24 <hci_send_req>
 800c968:	4603      	mov	r3, r0
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	da01      	bge.n	800c972 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800c96e:	23ff      	movs	r3, #255	; 0xff
 800c970:	e004      	b.n	800c97c <aci_gap_set_discoverable+0x1ea>
  return status;
 800c972:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c976:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800c97a:	781b      	ldrb	r3, [r3, #0]
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800c982:	46bd      	mov	sp, r7
 800c984:	bdb0      	pop	{r4, r5, r7, pc}

0800c986 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800c986:	b580      	push	{r7, lr}
 800c988:	b0cc      	sub	sp, #304	; 0x130
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	4602      	mov	r2, r0
 800c98e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c992:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800c996:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800c998:	f107 0310 	add.w	r3, r7, #16
 800c99c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c9a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c9a4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800c9b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c9b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c9ba:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800c9be:	7812      	ldrb	r2, [r2, #0]
 800c9c0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c9c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c9cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c9d0:	2218      	movs	r2, #24
 800c9d2:	2100      	movs	r1, #0
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f000 ff9c 	bl	800d912 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c9da:	233f      	movs	r3, #63	; 0x3f
 800c9dc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800c9e0:	2385      	movs	r3, #133	; 0x85
 800c9e2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c9e6:	f107 0310 	add.w	r3, r7, #16
 800c9ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c9ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c9f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c9f6:	f107 030f 	add.w	r3, r7, #15
 800c9fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ca04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ca08:	2100      	movs	r1, #0
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f001 fa0a 	bl	800de24 <hci_send_req>
 800ca10:	4603      	mov	r3, r0
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	da01      	bge.n	800ca1a <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800ca16:	23ff      	movs	r3, #255	; 0xff
 800ca18:	e004      	b.n	800ca24 <aci_gap_set_io_capability+0x9e>
  return status;
 800ca1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca1e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ca22:	781b      	ldrb	r3, [r3, #0]
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}

0800ca2e <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800ca2e:	b5b0      	push	{r4, r5, r7, lr}
 800ca30:	b0cc      	sub	sp, #304	; 0x130
 800ca32:	af00      	add	r7, sp, #0
 800ca34:	4605      	mov	r5, r0
 800ca36:	460c      	mov	r4, r1
 800ca38:	4610      	mov	r0, r2
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca40:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ca44:	462a      	mov	r2, r5
 800ca46:	701a      	strb	r2, [r3, #0]
 800ca48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca4c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ca50:	4622      	mov	r2, r4
 800ca52:	701a      	strb	r2, [r3, #0]
 800ca54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca58:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800ca5c:	4602      	mov	r2, r0
 800ca5e:	701a      	strb	r2, [r3, #0]
 800ca60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ca68:	460a      	mov	r2, r1
 800ca6a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800ca6c:	f107 0310 	add.w	r3, r7, #16
 800ca70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ca74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca78:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ca80:	2300      	movs	r3, #0
 800ca82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800ca86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ca8a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ca8e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800ca92:	7812      	ldrb	r2, [r2, #0]
 800ca94:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ca96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800caa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800caa4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800caa8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800caac:	7812      	ldrb	r2, [r2, #0]
 800caae:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800cab0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cab4:	3301      	adds	r3, #1
 800cab6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800caba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cabe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cac2:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800cac6:	7812      	ldrb	r2, [r2, #0]
 800cac8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800caca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cace:	3301      	adds	r3, #1
 800cad0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800cad4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cad8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cadc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800cae0:	7812      	ldrb	r2, [r2, #0]
 800cae2:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800cae4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cae8:	3301      	adds	r3, #1
 800caea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800caee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800caf2:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800caf6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800caf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cafc:	3301      	adds	r3, #1
 800cafe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800cb02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb06:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800cb0a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800cb0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb10:	3301      	adds	r3, #1
 800cb12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800cb16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb1a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800cb1e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800cb20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb24:	3301      	adds	r3, #1
 800cb26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800cb2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb2e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800cb32:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800cb36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb3a:	3304      	adds	r3, #4
 800cb3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800cb40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb44:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800cb48:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800cb4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb4e:	3301      	adds	r3, #1
 800cb50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cb54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cb58:	2218      	movs	r2, #24
 800cb5a:	2100      	movs	r1, #0
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f000 fed8 	bl	800d912 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cb62:	233f      	movs	r3, #63	; 0x3f
 800cb64:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800cb68:	2386      	movs	r3, #134	; 0x86
 800cb6a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cb6e:	f107 0310 	add.w	r3, r7, #16
 800cb72:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cb76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb7a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cb7e:	f107 030f 	add.w	r3, r7, #15
 800cb82:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cb86:	2301      	movs	r3, #1
 800cb88:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cb8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cb90:	2100      	movs	r1, #0
 800cb92:	4618      	mov	r0, r3
 800cb94:	f001 f946 	bl	800de24 <hci_send_req>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	da01      	bge.n	800cba2 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800cb9e:	23ff      	movs	r3, #255	; 0xff
 800cba0:	e004      	b.n	800cbac <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800cba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cba6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800cbaa:	781b      	ldrb	r3, [r3, #0]
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bdb0      	pop	{r4, r5, r7, pc}

0800cbb6 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800cbb6:	b580      	push	{r7, lr}
 800cbb8:	b0cc      	sub	sp, #304	; 0x130
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cbc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cbc6:	6019      	str	r1, [r3, #0]
 800cbc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cbcc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800cbd0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800cbd2:	f107 0310 	add.w	r3, r7, #16
 800cbd6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800cbda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cbde:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800cbec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cbf0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cbf4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800cbf8:	8812      	ldrh	r2, [r2, #0]
 800cbfa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800cbfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cc00:	3302      	adds	r3, #2
 800cc02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800cc06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cc0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cc0e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800cc12:	6812      	ldr	r2, [r2, #0]
 800cc14:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800cc18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cc1c:	3304      	adds	r3, #4
 800cc1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cc22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cc26:	2218      	movs	r2, #24
 800cc28:	2100      	movs	r1, #0
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f000 fe71 	bl	800d912 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cc30:	233f      	movs	r3, #63	; 0x3f
 800cc32:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 800cc36:	2388      	movs	r3, #136	; 0x88
 800cc38:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cc3c:	f107 0310 	add.w	r3, r7, #16
 800cc40:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cc44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cc48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cc4c:	f107 030f 	add.w	r3, r7, #15
 800cc50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cc54:	2301      	movs	r3, #1
 800cc56:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cc5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cc5e:	2100      	movs	r1, #0
 800cc60:	4618      	mov	r0, r3
 800cc62:	f001 f8df 	bl	800de24 <hci_send_req>
 800cc66:	4603      	mov	r3, r0
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	da01      	bge.n	800cc70 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800cc6c:	23ff      	movs	r3, #255	; 0xff
 800cc6e:	e004      	b.n	800cc7a <aci_gap_pass_key_resp+0xc4>
  return status;
 800cc70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cc74:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800cc78:	781b      	ldrb	r3, [r3, #0]
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800cc84:	b590      	push	{r4, r7, lr}
 800cc86:	b0cd      	sub	sp, #308	; 0x134
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	4604      	mov	r4, r0
 800cc8c:	4608      	mov	r0, r1
 800cc8e:	4611      	mov	r1, r2
 800cc90:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cc94:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800cc98:	6013      	str	r3, [r2, #0]
 800cc9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cc9e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800cca2:	4622      	mov	r2, r4
 800cca4:	701a      	strb	r2, [r3, #0]
 800cca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ccaa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ccae:	4602      	mov	r2, r0
 800ccb0:	701a      	strb	r2, [r3, #0]
 800ccb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ccb6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800ccba:	460a      	mov	r2, r1
 800ccbc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800ccbe:	f107 0310 	add.w	r3, r7, #16
 800ccc2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800ccc6:	f107 0308 	add.w	r3, r7, #8
 800ccca:	2207      	movs	r2, #7
 800cccc:	2100      	movs	r1, #0
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f000 fe1f 	bl	800d912 <Osal_MemSet>
  int index_input = 0;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800ccda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ccde:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cce2:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800cce6:	7812      	ldrb	r2, [r2, #0]
 800cce8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ccea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ccee:	3301      	adds	r3, #1
 800ccf0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800ccf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ccf8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ccfc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800cd00:	7812      	ldrb	r2, [r2, #0]
 800cd02:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800cd04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cd08:	3301      	adds	r3, #1
 800cd0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800cd0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cd12:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cd16:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800cd1a:	7812      	ldrb	r2, [r2, #0]
 800cd1c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800cd1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cd22:	3301      	adds	r3, #1
 800cd24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cd28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cd2c:	2218      	movs	r2, #24
 800cd2e:	2100      	movs	r1, #0
 800cd30:	4618      	mov	r0, r3
 800cd32:	f000 fdee 	bl	800d912 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cd36:	233f      	movs	r3, #63	; 0x3f
 800cd38:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800cd3c:	238a      	movs	r3, #138	; 0x8a
 800cd3e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cd42:	f107 0310 	add.w	r3, r7, #16
 800cd46:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cd4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cd4e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800cd52:	f107 0308 	add.w	r3, r7, #8
 800cd56:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800cd5a:	2307      	movs	r3, #7
 800cd5c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cd60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cd64:	2100      	movs	r1, #0
 800cd66:	4618      	mov	r0, r3
 800cd68:	f001 f85c 	bl	800de24 <hci_send_req>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	da01      	bge.n	800cd76 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800cd72:	23ff      	movs	r3, #255	; 0xff
 800cd74:	e02e      	b.n	800cdd4 <aci_gap_init+0x150>
  if ( resp.Status )
 800cd76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cd7a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d005      	beq.n	800cd90 <aci_gap_init+0x10c>
    return resp.Status;
 800cd84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cd88:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	e021      	b.n	800cdd4 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800cd90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cd94:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800cd98:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cd9c:	b29a      	uxth	r2, r3
 800cd9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cda2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800cdaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cdae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800cdb2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800cdb6:	b29a      	uxth	r2, r3
 800cdb8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800cdbc:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800cdbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cdc2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800cdc6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800cdca:	b29a      	uxth	r2, r3
 800cdcc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800cdd0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800cdd2:	2300      	movs	r3, #0
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd90      	pop	{r4, r7, pc}

0800cdde <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800cdde:	b580      	push	{r7, lr}
 800cde0:	b0cc      	sub	sp, #304	; 0x130
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	4602      	mov	r2, r0
 800cde6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cdea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cdee:	6019      	str	r1, [r3, #0]
 800cdf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cdf4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800cdf8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800cdfa:	f107 0310 	add.w	r3, r7, #16
 800cdfe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ce02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ce06:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800ce14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ce18:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ce1c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800ce20:	7812      	ldrb	r2, [r2, #0]
 800ce22:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ce24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ce28:	3301      	adds	r3, #1
 800ce2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800ce2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ce32:	1c58      	adds	r0, r3, #1
 800ce34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ce38:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ce3c:	781a      	ldrb	r2, [r3, #0]
 800ce3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ce42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ce46:	6819      	ldr	r1, [r3, #0]
 800ce48:	f000 fd53 	bl	800d8f2 <Osal_MemCpy>
  index_input += AdvDataLen;
 800ce4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ce50:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ce5a:	4413      	add	r3, r2
 800ce5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ce60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ce64:	2218      	movs	r2, #24
 800ce66:	2100      	movs	r1, #0
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f000 fd52 	bl	800d912 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ce6e:	233f      	movs	r3, #63	; 0x3f
 800ce70:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800ce74:	238e      	movs	r3, #142	; 0x8e
 800ce76:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ce7a:	f107 0310 	add.w	r3, r7, #16
 800ce7e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ce82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ce86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ce8a:	f107 030f 	add.w	r3, r7, #15
 800ce8e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ce92:	2301      	movs	r3, #1
 800ce94:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ce98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ce9c:	2100      	movs	r1, #0
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f000 ffc0 	bl	800de24 <hci_send_req>
 800cea4:	4603      	mov	r3, r0
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	da01      	bge.n	800ceae <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800ceaa:	23ff      	movs	r3, #255	; 0xff
 800ceac:	e004      	b.n	800ceb8 <aci_gap_update_adv_data+0xda>
  return status;
 800ceae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ceb2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ceb6:	781b      	ldrb	r3, [r3, #0]
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}

0800cec2 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800cec2:	b580      	push	{r7, lr}
 800cec4:	b088      	sub	sp, #32
 800cec6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800cec8:	2300      	movs	r3, #0
 800ceca:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cecc:	f107 0308 	add.w	r3, r7, #8
 800ced0:	2218      	movs	r2, #24
 800ced2:	2100      	movs	r1, #0
 800ced4:	4618      	mov	r0, r3
 800ced6:	f000 fd1c 	bl	800d912 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ceda:	233f      	movs	r3, #63	; 0x3f
 800cedc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800cede:	2392      	movs	r3, #146	; 0x92
 800cee0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800cee2:	1dfb      	adds	r3, r7, #7
 800cee4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800cee6:	2301      	movs	r3, #1
 800cee8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ceea:	f107 0308 	add.w	r3, r7, #8
 800ceee:	2100      	movs	r1, #0
 800cef0:	4618      	mov	r0, r3
 800cef2:	f000 ff97 	bl	800de24 <hci_send_req>
 800cef6:	4603      	mov	r3, r0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	da01      	bge.n	800cf00 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800cefc:	23ff      	movs	r3, #255	; 0xff
 800cefe:	e000      	b.n	800cf02 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800cf00:	79fb      	ldrb	r3, [r7, #7]
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	3720      	adds	r7, #32
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}

0800cf0a <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800cf0a:	b580      	push	{r7, lr}
 800cf0c:	b0cc      	sub	sp, #304	; 0x130
 800cf0e:	af00      	add	r7, sp, #0
 800cf10:	4602      	mov	r2, r0
 800cf12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cf16:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800cf1a:	801a      	strh	r2, [r3, #0]
 800cf1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cf20:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800cf24:	460a      	mov	r2, r1
 800cf26:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800cf28:	f107 0310 	add.w	r3, r7, #16
 800cf2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800cf30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cf34:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800cf38:	2200      	movs	r2, #0
 800cf3a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800cf42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cf46:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cf4a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800cf4e:	8812      	ldrh	r2, [r2, #0]
 800cf50:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800cf52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cf56:	3302      	adds	r3, #2
 800cf58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800cf5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cf60:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cf64:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800cf68:	7812      	ldrb	r2, [r2, #0]
 800cf6a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800cf6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cf70:	3301      	adds	r3, #1
 800cf72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cf76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cf7a:	2218      	movs	r2, #24
 800cf7c:	2100      	movs	r1, #0
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f000 fcc7 	bl	800d912 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cf84:	233f      	movs	r3, #63	; 0x3f
 800cf86:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800cf8a:	23a5      	movs	r3, #165	; 0xa5
 800cf8c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cf90:	f107 0310 	add.w	r3, r7, #16
 800cf94:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cf98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cf9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cfa0:	f107 030f 	add.w	r3, r7, #15
 800cfa4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cfae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cfb2:	2100      	movs	r1, #0
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f000 ff35 	bl	800de24 <hci_send_req>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	da01      	bge.n	800cfc4 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800cfc0:	23ff      	movs	r3, #255	; 0xff
 800cfc2:	e004      	b.n	800cfce <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800cfc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cfc8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800cfcc:	781b      	ldrb	r3, [r3, #0]
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b088      	sub	sp, #32
 800cfdc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cfe2:	f107 0308 	add.w	r3, r7, #8
 800cfe6:	2218      	movs	r2, #24
 800cfe8:	2100      	movs	r1, #0
 800cfea:	4618      	mov	r0, r3
 800cfec:	f000 fc91 	bl	800d912 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cff0:	233f      	movs	r3, #63	; 0x3f
 800cff2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800cff4:	f240 1301 	movw	r3, #257	; 0x101
 800cff8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800cffa:	1dfb      	adds	r3, r7, #7
 800cffc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800cffe:	2301      	movs	r3, #1
 800d000:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d002:	f107 0308 	add.w	r3, r7, #8
 800d006:	2100      	movs	r1, #0
 800d008:	4618      	mov	r0, r3
 800d00a:	f000 ff0b 	bl	800de24 <hci_send_req>
 800d00e:	4603      	mov	r3, r0
 800d010:	2b00      	cmp	r3, #0
 800d012:	da01      	bge.n	800d018 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800d014:	23ff      	movs	r3, #255	; 0xff
 800d016:	e000      	b.n	800d01a <aci_gatt_init+0x42>
  return status;
 800d018:	79fb      	ldrb	r3, [r7, #7]
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3720      	adds	r7, #32
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}

0800d022 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800d022:	b590      	push	{r4, r7, lr}
 800d024:	b0cf      	sub	sp, #316	; 0x13c
 800d026:	af00      	add	r7, sp, #0
 800d028:	4604      	mov	r4, r0
 800d02a:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800d02e:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800d032:	6001      	str	r1, [r0, #0]
 800d034:	4610      	mov	r0, r2
 800d036:	4619      	mov	r1, r3
 800d038:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d03c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800d040:	4622      	mov	r2, r4
 800d042:	701a      	strb	r2, [r3, #0]
 800d044:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d048:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800d04c:	4602      	mov	r2, r0
 800d04e:	701a      	strb	r2, [r3, #0]
 800d050:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d054:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800d058:	460a      	mov	r2, r1
 800d05a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800d05c:	f107 0310 	add.w	r3, r7, #16
 800d060:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800d064:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d068:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	2b01      	cmp	r3, #1
 800d070:	d00a      	beq.n	800d088 <aci_gatt_add_service+0x66>
 800d072:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d076:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	2b02      	cmp	r3, #2
 800d07e:	d101      	bne.n	800d084 <aci_gatt_add_service+0x62>
 800d080:	2311      	movs	r3, #17
 800d082:	e002      	b.n	800d08a <aci_gatt_add_service+0x68>
 800d084:	2301      	movs	r3, #1
 800d086:	e000      	b.n	800d08a <aci_gatt_add_service+0x68>
 800d088:	2303      	movs	r3, #3
 800d08a:	f107 0210 	add.w	r2, r7, #16
 800d08e:	4413      	add	r3, r2
 800d090:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d094:	f107 030c 	add.w	r3, r7, #12
 800d098:	2203      	movs	r2, #3
 800d09a:	2100      	movs	r1, #0
 800d09c:	4618      	mov	r0, r3
 800d09e:	f000 fc38 	bl	800d912 <Osal_MemSet>
  int index_input = 0;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800d0a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d0ac:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800d0b0:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800d0b4:	7812      	ldrb	r2, [r2, #0]
 800d0b6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d0b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d0bc:	3301      	adds	r3, #1
 800d0be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800d0c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d0c6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	2b01      	cmp	r3, #1
 800d0ce:	d002      	beq.n	800d0d6 <aci_gatt_add_service+0xb4>
 800d0d0:	2b02      	cmp	r3, #2
 800d0d2:	d004      	beq.n	800d0de <aci_gatt_add_service+0xbc>
 800d0d4:	e007      	b.n	800d0e6 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800d0d6:	2302      	movs	r3, #2
 800d0d8:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800d0dc:	e005      	b.n	800d0ea <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800d0de:	2310      	movs	r3, #16
 800d0e0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800d0e4:	e001      	b.n	800d0ea <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800d0e6:	2397      	movs	r3, #151	; 0x97
 800d0e8:	e06c      	b.n	800d1c4 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800d0ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d0ee:	1c58      	adds	r0, r3, #1
 800d0f0:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800d0f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d0f8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d0fc:	6819      	ldr	r1, [r3, #0]
 800d0fe:	f000 fbf8 	bl	800d8f2 <Osal_MemCpy>
    index_input += size;
 800d102:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800d106:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d10a:	4413      	add	r3, r2
 800d10c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800d110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d114:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800d118:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800d11c:	7812      	ldrb	r2, [r2, #0]
 800d11e:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800d120:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d124:	3301      	adds	r3, #1
 800d126:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800d12a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d12e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800d132:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800d136:	7812      	ldrb	r2, [r2, #0]
 800d138:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800d13a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d13e:	3301      	adds	r3, #1
 800d140:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d144:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d148:	2218      	movs	r2, #24
 800d14a:	2100      	movs	r1, #0
 800d14c:	4618      	mov	r0, r3
 800d14e:	f000 fbe0 	bl	800d912 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d152:	233f      	movs	r3, #63	; 0x3f
 800d154:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800d158:	f44f 7381 	mov.w	r3, #258	; 0x102
 800d15c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d160:	f107 0310 	add.w	r3, r7, #16
 800d164:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d168:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d16c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800d170:	f107 030c 	add.w	r3, r7, #12
 800d174:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800d178:	2303      	movs	r3, #3
 800d17a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d17e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d182:	2100      	movs	r1, #0
 800d184:	4618      	mov	r0, r3
 800d186:	f000 fe4d 	bl	800de24 <hci_send_req>
 800d18a:	4603      	mov	r3, r0
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	da01      	bge.n	800d194 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800d190:	23ff      	movs	r3, #255	; 0xff
 800d192:	e017      	b.n	800d1c4 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800d194:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d198:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d19c:	781b      	ldrb	r3, [r3, #0]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d005      	beq.n	800d1ae <aci_gatt_add_service+0x18c>
    return resp.Status;
 800d1a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d1a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	e00a      	b.n	800d1c4 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800d1ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d1b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d1b6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d1ba:	b29a      	uxth	r2, r3
 800d1bc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d1c0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d1c2:	2300      	movs	r3, #0
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd90      	pop	{r4, r7, pc}

0800d1ce <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800d1ce:	b590      	push	{r4, r7, lr}
 800d1d0:	b0d1      	sub	sp, #324	; 0x144
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	4604      	mov	r4, r0
 800d1d6:	4608      	mov	r0, r1
 800d1d8:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800d1dc:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800d1e0:	600a      	str	r2, [r1, #0]
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d1e8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800d1ec:	4622      	mov	r2, r4
 800d1ee:	801a      	strh	r2, [r3, #0]
 800d1f0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d1f4:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800d1f8:	4602      	mov	r2, r0
 800d1fa:	701a      	strb	r2, [r3, #0]
 800d1fc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d200:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800d204:	460a      	mov	r2, r1
 800d206:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800d208:	f107 0318 	add.w	r3, r7, #24
 800d20c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800d210:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d214:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	d00a      	beq.n	800d234 <aci_gatt_add_char+0x66>
 800d21e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d222:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	2b02      	cmp	r3, #2
 800d22a:	d101      	bne.n	800d230 <aci_gatt_add_char+0x62>
 800d22c:	2313      	movs	r3, #19
 800d22e:	e002      	b.n	800d236 <aci_gatt_add_char+0x68>
 800d230:	2303      	movs	r3, #3
 800d232:	e000      	b.n	800d236 <aci_gatt_add_char+0x68>
 800d234:	2305      	movs	r3, #5
 800d236:	f107 0218 	add.w	r2, r7, #24
 800d23a:	4413      	add	r3, r2
 800d23c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d240:	f107 0314 	add.w	r3, r7, #20
 800d244:	2203      	movs	r2, #3
 800d246:	2100      	movs	r1, #0
 800d248:	4618      	mov	r0, r3
 800d24a:	f000 fb62 	bl	800d912 <Osal_MemSet>
  int index_input = 0;
 800d24e:	2300      	movs	r3, #0
 800d250:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800d254:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800d258:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800d25c:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800d260:	8812      	ldrh	r2, [r2, #0]
 800d262:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d264:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d268:	3302      	adds	r3, #2
 800d26a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800d26e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800d272:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800d276:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800d27a:	7812      	ldrb	r2, [r2, #0]
 800d27c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d27e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d282:	3301      	adds	r3, #1
 800d284:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800d288:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d28c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800d290:	781b      	ldrb	r3, [r3, #0]
 800d292:	2b01      	cmp	r3, #1
 800d294:	d002      	beq.n	800d29c <aci_gatt_add_char+0xce>
 800d296:	2b02      	cmp	r3, #2
 800d298:	d004      	beq.n	800d2a4 <aci_gatt_add_char+0xd6>
 800d29a:	e007      	b.n	800d2ac <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800d29c:	2302      	movs	r3, #2
 800d29e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800d2a2:	e005      	b.n	800d2b0 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800d2a4:	2310      	movs	r3, #16
 800d2a6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800d2aa:	e001      	b.n	800d2b0 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800d2ac:	2397      	movs	r3, #151	; 0x97
 800d2ae:	e091      	b.n	800d3d4 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800d2b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800d2b4:	1cd8      	adds	r0, r3, #3
 800d2b6:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800d2ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d2be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d2c2:	6819      	ldr	r1, [r3, #0]
 800d2c4:	f000 fb15 	bl	800d8f2 <Osal_MemCpy>
    index_input += size;
 800d2c8:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800d2cc:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800d2d0:	4413      	add	r3, r2
 800d2d2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800d2d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d2da:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800d2de:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800d2e2:	8812      	ldrh	r2, [r2, #0]
 800d2e4:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800d2e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d2ea:	3302      	adds	r3, #2
 800d2ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800d2f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d2f4:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800d2f8:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800d2fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d2fe:	3301      	adds	r3, #1
 800d300:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800d304:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d308:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800d30c:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800d30e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d312:	3301      	adds	r3, #1
 800d314:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800d318:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d31c:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800d320:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800d322:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d326:	3301      	adds	r3, #1
 800d328:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800d32c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d330:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800d334:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800d336:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d33a:	3301      	adds	r3, #1
 800d33c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800d340:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d344:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800d348:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800d34a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d34e:	3301      	adds	r3, #1
 800d350:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d354:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d358:	2218      	movs	r2, #24
 800d35a:	2100      	movs	r1, #0
 800d35c:	4618      	mov	r0, r3
 800d35e:	f000 fad8 	bl	800d912 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d362:	233f      	movs	r3, #63	; 0x3f
 800d364:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800d368:	f44f 7382 	mov.w	r3, #260	; 0x104
 800d36c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800d370:	f107 0318 	add.w	r3, r7, #24
 800d374:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800d378:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d37c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800d380:	f107 0314 	add.w	r3, r7, #20
 800d384:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800d388:	2303      	movs	r3, #3
 800d38a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d38e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d392:	2100      	movs	r1, #0
 800d394:	4618      	mov	r0, r3
 800d396:	f000 fd45 	bl	800de24 <hci_send_req>
 800d39a:	4603      	mov	r3, r0
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	da01      	bge.n	800d3a4 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800d3a0:	23ff      	movs	r3, #255	; 0xff
 800d3a2:	e017      	b.n	800d3d4 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800d3a4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d3a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d005      	beq.n	800d3be <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800d3b2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d3b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	e00a      	b.n	800d3d4 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800d3be:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d3c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d3c6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d3ca:	b29a      	uxth	r2, r3
 800d3cc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800d3d0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d3d2:	2300      	movs	r3, #0
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd90      	pop	{r4, r7, pc}

0800d3de <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800d3de:	b5b0      	push	{r4, r5, r7, lr}
 800d3e0:	b0cc      	sub	sp, #304	; 0x130
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	4605      	mov	r5, r0
 800d3e6:	460c      	mov	r4, r1
 800d3e8:	4610      	mov	r0, r2
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d3f0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d3f4:	462a      	mov	r2, r5
 800d3f6:	801a      	strh	r2, [r3, #0]
 800d3f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d3fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d400:	4622      	mov	r2, r4
 800d402:	801a      	strh	r2, [r3, #0]
 800d404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d408:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800d40c:	4602      	mov	r2, r0
 800d40e:	701a      	strb	r2, [r3, #0]
 800d410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d414:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800d418:	460a      	mov	r2, r1
 800d41a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800d41c:	f107 0310 	add.w	r3, r7, #16
 800d420:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d428:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d42c:	2200      	movs	r2, #0
 800d42e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d430:	2300      	movs	r3, #0
 800d432:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800d436:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d43a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d43e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d442:	8812      	ldrh	r2, [r2, #0]
 800d444:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d446:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d44a:	3302      	adds	r3, #2
 800d44c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800d450:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d454:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d458:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800d45c:	8812      	ldrh	r2, [r2, #0]
 800d45e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800d460:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d464:	3302      	adds	r3, #2
 800d466:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800d46a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d46e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d472:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800d476:	7812      	ldrb	r2, [r2, #0]
 800d478:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800d47a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d47e:	3301      	adds	r3, #1
 800d480:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800d484:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d488:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d48c:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800d490:	7812      	ldrb	r2, [r2, #0]
 800d492:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d494:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d498:	3301      	adds	r3, #1
 800d49a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800d49e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d4a2:	1d98      	adds	r0, r3, #6
 800d4a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d4a8:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	461a      	mov	r2, r3
 800d4b0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800d4b4:	f000 fa1d 	bl	800d8f2 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800d4b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d4bc:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800d4c0:	781b      	ldrb	r3, [r3, #0]
 800d4c2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d4c6:	4413      	add	r3, r2
 800d4c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d4cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d4d0:	2218      	movs	r2, #24
 800d4d2:	2100      	movs	r1, #0
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f000 fa1c 	bl	800d912 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d4da:	233f      	movs	r3, #63	; 0x3f
 800d4dc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800d4e0:	f44f 7383 	mov.w	r3, #262	; 0x106
 800d4e4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d4e8:	f107 0310 	add.w	r3, r7, #16
 800d4ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d4f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d4f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d4f8:	f107 030f 	add.w	r3, r7, #15
 800d4fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d500:	2301      	movs	r3, #1
 800d502:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d506:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d50a:	2100      	movs	r1, #0
 800d50c:	4618      	mov	r0, r3
 800d50e:	f000 fc89 	bl	800de24 <hci_send_req>
 800d512:	4603      	mov	r3, r0
 800d514:	2b00      	cmp	r3, #0
 800d516:	da01      	bge.n	800d51c <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800d518:	23ff      	movs	r3, #255	; 0xff
 800d51a:	e004      	b.n	800d526 <aci_gatt_update_char_value+0x148>
  return status;
 800d51c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d520:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d524:	781b      	ldrb	r3, [r3, #0]
}
 800d526:	4618      	mov	r0, r3
 800d528:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bdb0      	pop	{r4, r5, r7, pc}

0800d530 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b0cc      	sub	sp, #304	; 0x130
 800d534:	af00      	add	r7, sp, #0
 800d536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d53a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d53e:	601a      	str	r2, [r3, #0]
 800d540:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d544:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800d548:	4602      	mov	r2, r0
 800d54a:	701a      	strb	r2, [r3, #0]
 800d54c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d550:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d554:	460a      	mov	r2, r1
 800d556:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800d558:	f107 0310 	add.w	r3, r7, #16
 800d55c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d564:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d568:	2200      	movs	r2, #0
 800d56a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d56c:	2300      	movs	r3, #0
 800d56e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800d572:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d576:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d57a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800d57e:	7812      	ldrb	r2, [r2, #0]
 800d580:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d582:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d586:	3301      	adds	r3, #1
 800d588:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800d58c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d590:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d594:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d598:	7812      	ldrb	r2, [r2, #0]
 800d59a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d59c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800d5a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d5aa:	1c98      	adds	r0, r3, #2
 800d5ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d5b0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d5b4:	781a      	ldrb	r2, [r3, #0]
 800d5b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d5ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d5be:	6819      	ldr	r1, [r3, #0]
 800d5c0:	f000 f997 	bl	800d8f2 <Osal_MemCpy>
  index_input += Length;
 800d5c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d5c8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d5cc:	781b      	ldrb	r3, [r3, #0]
 800d5ce:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d5d2:	4413      	add	r3, r2
 800d5d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d5d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d5dc:	2218      	movs	r2, #24
 800d5de:	2100      	movs	r1, #0
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f000 f996 	bl	800d912 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d5e6:	233f      	movs	r3, #63	; 0x3f
 800d5e8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800d5ec:	230c      	movs	r3, #12
 800d5ee:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d5f2:	f107 0310 	add.w	r3, r7, #16
 800d5f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d5fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d5fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d602:	f107 030f 	add.w	r3, r7, #15
 800d606:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d60a:	2301      	movs	r3, #1
 800d60c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d610:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d614:	2100      	movs	r1, #0
 800d616:	4618      	mov	r0, r3
 800d618:	f000 fc04 	bl	800de24 <hci_send_req>
 800d61c:	4603      	mov	r3, r0
 800d61e:	2b00      	cmp	r3, #0
 800d620:	da01      	bge.n	800d626 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800d622:	23ff      	movs	r3, #255	; 0xff
 800d624:	e004      	b.n	800d630 <aci_hal_write_config_data+0x100>
  return status;
 800d626:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d62a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d62e:	781b      	ldrb	r3, [r3, #0]
}
 800d630:	4618      	mov	r0, r3
 800d632:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}

0800d63a <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800d63a:	b580      	push	{r7, lr}
 800d63c:	b0cc      	sub	sp, #304	; 0x130
 800d63e:	af00      	add	r7, sp, #0
 800d640:	4602      	mov	r2, r0
 800d642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d646:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800d64a:	701a      	strb	r2, [r3, #0]
 800d64c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d650:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d654:	460a      	mov	r2, r1
 800d656:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800d658:	f107 0310 	add.w	r3, r7, #16
 800d65c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d664:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d668:	2200      	movs	r2, #0
 800d66a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d66c:	2300      	movs	r3, #0
 800d66e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800d672:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d676:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d67a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800d67e:	7812      	ldrb	r2, [r2, #0]
 800d680:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d682:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d686:	3301      	adds	r3, #1
 800d688:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800d68c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d690:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d694:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d698:	7812      	ldrb	r2, [r2, #0]
 800d69a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d69c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d6a0:	3301      	adds	r3, #1
 800d6a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d6a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d6aa:	2218      	movs	r2, #24
 800d6ac:	2100      	movs	r1, #0
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f000 f92f 	bl	800d912 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d6b4:	233f      	movs	r3, #63	; 0x3f
 800d6b6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800d6ba:	230f      	movs	r3, #15
 800d6bc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d6c0:	f107 0310 	add.w	r3, r7, #16
 800d6c4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d6c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d6cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d6d0:	f107 030f 	add.w	r3, r7, #15
 800d6d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d6d8:	2301      	movs	r3, #1
 800d6da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d6de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d6e2:	2100      	movs	r1, #0
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f000 fb9d 	bl	800de24 <hci_send_req>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	da01      	bge.n	800d6f4 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800d6f0:	23ff      	movs	r3, #255	; 0xff
 800d6f2:	e004      	b.n	800d6fe <aci_hal_set_tx_power_level+0xc4>
  return status;
 800d6f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d6f8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d6fc:	781b      	ldrb	r3, [r3, #0]
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}

0800d708 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b0cc      	sub	sp, #304	; 0x130
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	4602      	mov	r2, r0
 800d710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d714:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d718:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800d71a:	f107 0310 	add.w	r3, r7, #16
 800d71e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d726:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d72a:	2200      	movs	r2, #0
 800d72c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d72e:	2300      	movs	r3, #0
 800d730:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800d734:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d738:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d73c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d740:	8812      	ldrh	r2, [r2, #0]
 800d742:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d744:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d748:	3302      	adds	r3, #2
 800d74a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d74e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d752:	2218      	movs	r2, #24
 800d754:	2100      	movs	r1, #0
 800d756:	4618      	mov	r0, r3
 800d758:	f000 f8db 	bl	800d912 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d75c:	233f      	movs	r3, #63	; 0x3f
 800d75e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800d762:	2318      	movs	r3, #24
 800d764:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d768:	f107 0310 	add.w	r3, r7, #16
 800d76c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d770:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d774:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d778:	f107 030f 	add.w	r3, r7, #15
 800d77c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d780:	2301      	movs	r3, #1
 800d782:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d786:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d78a:	2100      	movs	r1, #0
 800d78c:	4618      	mov	r0, r3
 800d78e:	f000 fb49 	bl	800de24 <hci_send_req>
 800d792:	4603      	mov	r3, r0
 800d794:	2b00      	cmp	r3, #0
 800d796:	da01      	bge.n	800d79c <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800d798:	23ff      	movs	r3, #255	; 0xff
 800d79a:	e004      	b.n	800d7a6 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800d79c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d7a0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d7a4:	781b      	ldrb	r3, [r3, #0]
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b088      	sub	sp, #32
 800d7b4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d7ba:	f107 0308 	add.w	r3, r7, #8
 800d7be:	2218      	movs	r2, #24
 800d7c0:	2100      	movs	r1, #0
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f000 f8a5 	bl	800d912 <Osal_MemSet>
  rq.ogf = 0x03;
 800d7c8:	2303      	movs	r3, #3
 800d7ca:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800d7cc:	2303      	movs	r3, #3
 800d7ce:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d7d0:	1dfb      	adds	r3, r7, #7
 800d7d2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d7d4:	2301      	movs	r3, #1
 800d7d6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d7d8:	f107 0308 	add.w	r3, r7, #8
 800d7dc:	2100      	movs	r1, #0
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f000 fb20 	bl	800de24 <hci_send_req>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	da01      	bge.n	800d7ee <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d7ea:	23ff      	movs	r3, #255	; 0xff
 800d7ec:	e000      	b.n	800d7f0 <hci_reset+0x40>
  return status;
 800d7ee:	79fb      	ldrb	r3, [r7, #7]
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3720      	adds	r7, #32
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}

0800d7f8 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800d7f8:	b590      	push	{r4, r7, lr}
 800d7fa:	b0cd      	sub	sp, #308	; 0x134
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	4604      	mov	r4, r0
 800d800:	4608      	mov	r0, r1
 800d802:	4611      	mov	r1, r2
 800d804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d808:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800d80c:	4622      	mov	r2, r4
 800d80e:	701a      	strb	r2, [r3, #0]
 800d810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d814:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d818:	4602      	mov	r2, r0
 800d81a:	701a      	strb	r2, [r3, #0]
 800d81c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d820:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800d824:	460a      	mov	r2, r1
 800d826:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800d828:	f107 0310 	add.w	r3, r7, #16
 800d82c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d834:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d838:	2200      	movs	r2, #0
 800d83a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d83c:	2300      	movs	r3, #0
 800d83e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800d842:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d846:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d84a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800d84e:	7812      	ldrb	r2, [r2, #0]
 800d850:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d852:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d856:	3301      	adds	r3, #1
 800d858:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800d85c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d860:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d864:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d868:	7812      	ldrb	r2, [r2, #0]
 800d86a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d86c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d870:	3301      	adds	r3, #1
 800d872:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800d876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d87a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d87e:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800d882:	7812      	ldrb	r2, [r2, #0]
 800d884:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d886:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d88a:	3301      	adds	r3, #1
 800d88c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d890:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d894:	2218      	movs	r2, #24
 800d896:	2100      	movs	r1, #0
 800d898:	4618      	mov	r0, r3
 800d89a:	f000 f83a 	bl	800d912 <Osal_MemSet>
  rq.ogf = 0x08;
 800d89e:	2308      	movs	r3, #8
 800d8a0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800d8a4:	2331      	movs	r3, #49	; 0x31
 800d8a6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d8aa:	f107 0310 	add.w	r3, r7, #16
 800d8ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d8b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d8b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d8ba:	f107 030f 	add.w	r3, r7, #15
 800d8be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d8c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d8cc:	2100      	movs	r1, #0
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f000 faa8 	bl	800de24 <hci_send_req>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	da01      	bge.n	800d8de <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800d8da:	23ff      	movs	r3, #255	; 0xff
 800d8dc:	e004      	b.n	800d8e8 <hci_le_set_default_phy+0xf0>
  return status;
 800d8de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d8e2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d8e6:	781b      	ldrb	r3, [r3, #0]
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd90      	pop	{r4, r7, pc}

0800d8f2 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800d8f2:	b580      	push	{r7, lr}
 800d8f4:	b084      	sub	sp, #16
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	60f8      	str	r0, [r7, #12]
 800d8fa:	60b9      	str	r1, [r7, #8]
 800d8fc:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800d8fe:	687a      	ldr	r2, [r7, #4]
 800d900:	68b9      	ldr	r1, [r7, #8]
 800d902:	68f8      	ldr	r0, [r7, #12]
 800d904:	f003 fa2b 	bl	8010d5e <memcpy>
 800d908:	4603      	mov	r3, r0
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3710      	adds	r7, #16
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}

0800d912 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800d912:	b580      	push	{r7, lr}
 800d914:	b084      	sub	sp, #16
 800d916:	af00      	add	r7, sp, #0
 800d918:	60f8      	str	r0, [r7, #12]
 800d91a:	60b9      	str	r1, [r7, #8]
 800d91c:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800d91e:	687a      	ldr	r2, [r7, #4]
 800d920:	68b9      	ldr	r1, [r7, #8]
 800d922:	68f8      	ldr	r0, [r7, #12]
 800d924:	f003 f99c 	bl	8010c60 <memset>
 800d928:	4603      	mov	r3, r0
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3710      	adds	r7, #16
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}

0800d932 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800d932:	b480      	push	{r7}
 800d934:	af00      	add	r7, sp, #0
  return;
 800d936:	bf00      	nop
}
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr

0800d940 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800d940:	b480      	push	{r7}
 800d942:	af00      	add	r7, sp, #0
  return;
 800d944:	bf00      	nop
}
 800d946:	46bd      	mov	sp, r7
 800d948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94c:	4770      	bx	lr

0800d94e <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800d94e:	b480      	push	{r7}
 800d950:	af00      	add	r7, sp, #0
  return;
 800d952:	bf00      	nop
}
 800d954:	46bd      	mov	sp, r7
 800d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95a:	4770      	bx	lr

0800d95c <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800d95c:	b480      	push	{r7}
 800d95e:	af00      	add	r7, sp, #0
  return;
 800d960:	bf00      	nop
}
 800d962:	46bd      	mov	sp, r7
 800d964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d968:	4770      	bx	lr

0800d96a <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800d96a:	b480      	push	{r7}
 800d96c:	af00      	add	r7, sp, #0
  return;
 800d96e:	bf00      	nop
}
 800d970:	46bd      	mov	sp, r7
 800d972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d976:	4770      	bx	lr

0800d978 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800d978:	b480      	push	{r7}
 800d97a:	af00      	add	r7, sp, #0
  return;
 800d97c:	bf00      	nop
}
 800d97e:	46bd      	mov	sp, r7
 800d980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d984:	4770      	bx	lr

0800d986 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800d986:	b480      	push	{r7}
 800d988:	af00      	add	r7, sp, #0
  return;
 800d98a:	bf00      	nop
}
 800d98c:	46bd      	mov	sp, r7
 800d98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d992:	4770      	bx	lr

0800d994 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800d994:	b480      	push	{r7}
 800d996:	af00      	add	r7, sp, #0
  return;
 800d998:	bf00      	nop
}
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr

0800d9a2 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800d9a2:	b480      	push	{r7}
 800d9a4:	af00      	add	r7, sp, #0
  return;
 800d9a6:	bf00      	nop
}
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr

0800d9b0 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	af00      	add	r7, sp, #0
  return;
 800d9b4:	bf00      	nop
}
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9bc:	4770      	bx	lr

0800d9be <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800d9be:	b480      	push	{r7}
 800d9c0:	af00      	add	r7, sp, #0
  return;
 800d9c2:	bf00      	nop
}
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ca:	4770      	bx	lr

0800d9cc <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	af00      	add	r7, sp, #0
  return;
 800d9d0:	bf00      	nop
}
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d8:	4770      	bx	lr

0800d9da <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800d9da:	b480      	push	{r7}
 800d9dc:	af00      	add	r7, sp, #0
  return;
 800d9de:	bf00      	nop
}
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e6:	4770      	bx	lr

0800d9e8 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	af00      	add	r7, sp, #0
  return;
 800d9ec:	bf00      	nop
}
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f4:	4770      	bx	lr

0800d9f6 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800d9f6:	b480      	push	{r7}
 800d9f8:	af00      	add	r7, sp, #0
  return;
 800d9fa:	bf00      	nop
}
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr

0800da04 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800da04:	b480      	push	{r7}
 800da06:	af00      	add	r7, sp, #0
  return;
 800da08:	bf00      	nop
}
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr

0800da12 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800da12:	b480      	push	{r7}
 800da14:	af00      	add	r7, sp, #0
  return;
 800da16:	bf00      	nop
}
 800da18:	46bd      	mov	sp, r7
 800da1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1e:	4770      	bx	lr

0800da20 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800da20:	b580      	push	{r7, lr}
 800da22:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800da24:	4b04      	ldr	r3, [pc, #16]	; (800da38 <SVCCTL_Init+0x18>)
 800da26:	2200      	movs	r2, #0
 800da28:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800da2a:	4b04      	ldr	r3, [pc, #16]	; (800da3c <SVCCTL_Init+0x1c>)
 800da2c:	2200      	movs	r2, #0
 800da2e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800da30:	f000 f806 	bl	800da40 <SVCCTL_SvcInit>

  return;
 800da34:	bf00      	nop
}
 800da36:	bd80      	pop	{r7, pc}
 800da38:	20000350 	.word	0x20000350
 800da3c:	20000370 	.word	0x20000370

0800da40 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	af00      	add	r7, sp, #0
  BAS_Init();
 800da44:	f7ff ff75 	bl	800d932 <BAS_Init>

  BLS_Init();
 800da48:	f7ff ff7a 	bl	800d940 <BLS_Init>

  CRS_STM_Init();
 800da4c:	f7ff ff7f 	bl	800d94e <CRS_STM_Init>

  DIS_Init();
 800da50:	f7ff ff84 	bl	800d95c <DIS_Init>

  EDS_STM_Init();
 800da54:	f7ff ff89 	bl	800d96a <EDS_STM_Init>

  HIDS_Init();
 800da58:	f7ff ff8e 	bl	800d978 <HIDS_Init>

  HRS_Init();
 800da5c:	f7ff ff93 	bl	800d986 <HRS_Init>

  HTS_Init();
 800da60:	f7ff ff98 	bl	800d994 <HTS_Init>

  IAS_Init();
 800da64:	f7ff ff9d 	bl	800d9a2 <IAS_Init>

  LLS_Init();
 800da68:	f7ff ffa2 	bl	800d9b0 <LLS_Init>

  TPS_Init();
 800da6c:	f7ff ffa7 	bl	800d9be <TPS_Init>

  MOTENV_STM_Init();
 800da70:	f7ff ffac 	bl	800d9cc <MOTENV_STM_Init>

  P2PS_STM_Init();
 800da74:	f7ff ffb1 	bl	800d9da <P2PS_STM_Init>

  ZDD_STM_Init();
 800da78:	f7ff ffb6 	bl	800d9e8 <ZDD_STM_Init>

  OTAS_STM_Init();
 800da7c:	f7ff ffbb 	bl	800d9f6 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800da80:	f7ff ffc7 	bl	800da12 <BVOPUS_STM_Init>

  MESH_Init();
 800da84:	f7ff ffbe 	bl	800da04 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800da88:	f001 fca4 	bl	800f3d4 <SVCCTL_InitCustomSvc>
  
  return;
 800da8c:	bf00      	nop
}
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800da90:	b480      	push	{r7}
 800da92:	b083      	sub	sp, #12
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800da98:	4b09      	ldr	r3, [pc, #36]	; (800dac0 <SVCCTL_RegisterSvcHandler+0x30>)
 800da9a:	7f1b      	ldrb	r3, [r3, #28]
 800da9c:	4619      	mov	r1, r3
 800da9e:	4a08      	ldr	r2, [pc, #32]	; (800dac0 <SVCCTL_RegisterSvcHandler+0x30>)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800daa6:	4b06      	ldr	r3, [pc, #24]	; (800dac0 <SVCCTL_RegisterSvcHandler+0x30>)
 800daa8:	7f1b      	ldrb	r3, [r3, #28]
 800daaa:	3301      	adds	r3, #1
 800daac:	b2da      	uxtb	r2, r3
 800daae:	4b04      	ldr	r3, [pc, #16]	; (800dac0 <SVCCTL_RegisterSvcHandler+0x30>)
 800dab0:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800dab2:	bf00      	nop
}
 800dab4:	370c      	adds	r7, #12
 800dab6:	46bd      	mov	sp, r7
 800dab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabc:	4770      	bx	lr
 800dabe:	bf00      	nop
 800dac0:	20000350 	.word	0x20000350

0800dac4 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b086      	sub	sp, #24
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	3301      	adds	r3, #1
 800dad0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800dad2:	2300      	movs	r3, #0
 800dad4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	2bff      	cmp	r3, #255	; 0xff
 800dadc:	d125      	bne.n	800db2a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800dade:	693b      	ldr	r3, [r7, #16]
 800dae0:	3302      	adds	r3, #2
 800dae2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	881b      	ldrh	r3, [r3, #0]
 800dae8:	b29b      	uxth	r3, r3
 800daea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800daee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800daf2:	d118      	bne.n	800db26 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800daf4:	2300      	movs	r3, #0
 800daf6:	757b      	strb	r3, [r7, #21]
 800daf8:	e00d      	b.n	800db16 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800dafa:	7d7b      	ldrb	r3, [r7, #21]
 800dafc:	4a1a      	ldr	r2, [pc, #104]	; (800db68 <SVCCTL_UserEvtRx+0xa4>)
 800dafe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	4798      	blx	r3
 800db06:	4603      	mov	r3, r0
 800db08:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800db0a:	7dfb      	ldrb	r3, [r7, #23]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d108      	bne.n	800db22 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800db10:	7d7b      	ldrb	r3, [r7, #21]
 800db12:	3301      	adds	r3, #1
 800db14:	757b      	strb	r3, [r7, #21]
 800db16:	4b14      	ldr	r3, [pc, #80]	; (800db68 <SVCCTL_UserEvtRx+0xa4>)
 800db18:	7f1b      	ldrb	r3, [r3, #28]
 800db1a:	7d7a      	ldrb	r2, [r7, #21]
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d3ec      	bcc.n	800dafa <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800db20:	e002      	b.n	800db28 <SVCCTL_UserEvtRx+0x64>
              break;
 800db22:	bf00      	nop
          break;
 800db24:	e000      	b.n	800db28 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800db26:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800db28:	e000      	b.n	800db2c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800db2a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800db2c:	7dfb      	ldrb	r3, [r7, #23]
 800db2e:	2b02      	cmp	r3, #2
 800db30:	d00f      	beq.n	800db52 <SVCCTL_UserEvtRx+0x8e>
 800db32:	2b02      	cmp	r3, #2
 800db34:	dc10      	bgt.n	800db58 <SVCCTL_UserEvtRx+0x94>
 800db36:	2b00      	cmp	r3, #0
 800db38:	d002      	beq.n	800db40 <SVCCTL_UserEvtRx+0x7c>
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d006      	beq.n	800db4c <SVCCTL_UserEvtRx+0x88>
 800db3e:	e00b      	b.n	800db58 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f000 ff8f 	bl	800ea64 <SVCCTL_App_Notification>
 800db46:	4603      	mov	r3, r0
 800db48:	75bb      	strb	r3, [r7, #22]
      break;
 800db4a:	e008      	b.n	800db5e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800db4c:	2301      	movs	r3, #1
 800db4e:	75bb      	strb	r3, [r7, #22]
      break;
 800db50:	e005      	b.n	800db5e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800db52:	2300      	movs	r3, #0
 800db54:	75bb      	strb	r3, [r7, #22]
      break;
 800db56:	e002      	b.n	800db5e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800db58:	2301      	movs	r3, #1
 800db5a:	75bb      	strb	r3, [r7, #22]
      break;
 800db5c:	bf00      	nop
  }

  return (return_status);
 800db5e:	7dbb      	ldrb	r3, [r7, #22]
}
 800db60:	4618      	mov	r0, r3
 800db62:	3718      	adds	r7, #24
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}
 800db68:	20000350 	.word	0x20000350

0800db6c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b088      	sub	sp, #32
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800db74:	f107 030c 	add.w	r3, r7, #12
 800db78:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800db80:	69fb      	ldr	r3, [r7, #28]
 800db82:	212e      	movs	r1, #46	; 0x2e
 800db84:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800db88:	f000 fae8 	bl	800e15c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800db8c:	69fb      	ldr	r3, [r7, #28]
 800db8e:	330b      	adds	r3, #11
 800db90:	78db      	ldrb	r3, [r3, #3]
}
 800db92:	4618      	mov	r0, r3
 800db94:	3720      	adds	r7, #32
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}

0800db9a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800db9a:	b580      	push	{r7, lr}
 800db9c:	b088      	sub	sp, #32
 800db9e:	af00      	add	r7, sp, #0
 800dba0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800dba2:	f107 030c 	add.w	r3, r7, #12
 800dba6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800dbae:	69fb      	ldr	r3, [r7, #28]
 800dbb0:	210f      	movs	r1, #15
 800dbb2:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800dbb6:	f000 fad1 	bl	800e15c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800dbba:	69fb      	ldr	r3, [r7, #28]
 800dbbc:	330b      	adds	r3, #11
 800dbbe:	78db      	ldrb	r3, [r3, #3]
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3720      	adds	r7, #32
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}

0800dbc8 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b088      	sub	sp, #32
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800dbd0:	f107 030c 	add.w	r3, r7, #12
 800dbd4:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800dbd6:	69fb      	ldr	r3, [r7, #28]
 800dbd8:	687a      	ldr	r2, [r7, #4]
 800dbda:	2110      	movs	r1, #16
 800dbdc:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800dbe0:	f000 fabc 	bl	800e15c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800dbe4:	69fb      	ldr	r3, [r7, #28]
 800dbe6:	330b      	adds	r3, #11
 800dbe8:	78db      	ldrb	r3, [r3, #3]
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3720      	adds	r7, #32
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
	...

0800dbf4 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b08b      	sub	sp, #44	; 0x2c
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800dc00:	2300      	movs	r3, #0
 800dc02:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800dc04:	2300      	movs	r3, #0
 800dc06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800dc10:	2300      	movs	r3, #0
 800dc12:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800dc14:	2300      	movs	r3, #0
 800dc16:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800dc1c:	4b4a      	ldr	r3, [pc, #296]	; (800dd48 <SHCI_GetWirelessFwInfo+0x154>)
 800dc1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc20:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800dc24:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	009b      	lsls	r3, r3, #2
 800dc2a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800dc2e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	4a44      	ldr	r2, [pc, #272]	; (800dd4c <SHCI_GetWirelessFwInfo+0x158>)
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d10f      	bne.n	800dc60 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	695b      	ldr	r3, [r3, #20]
 800dc44:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	699b      	ldr	r3, [r3, #24]
 800dc4a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	69db      	ldr	r3, [r3, #28]
 800dc50:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	68db      	ldr	r3, [r3, #12]
 800dc56:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	691b      	ldr	r3, [r3, #16]
 800dc5c:	617b      	str	r3, [r7, #20]
 800dc5e:	e01a      	b.n	800dc96 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	009b      	lsls	r3, r3, #2
 800dc64:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800dc68:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800dc6c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	691b      	ldr	r3, [r3, #16]
 800dc74:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	695b      	ldr	r3, [r3, #20]
 800dc7c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	699b      	ldr	r3, [r3, #24]
 800dc84:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	685b      	ldr	r3, [r3, #4]
 800dc8c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	689b      	ldr	r3, [r3, #8]
 800dc94:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800dc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc98:	0e1b      	lsrs	r3, r3, #24
 800dc9a:	b2da      	uxtb	r2, r3
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800dca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca2:	0c1b      	lsrs	r3, r3, #16
 800dca4:	b2da      	uxtb	r2, r3
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800dcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcac:	0a1b      	lsrs	r3, r3, #8
 800dcae:	b2da      	uxtb	r2, r3
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800dcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb6:	091b      	lsrs	r3, r3, #4
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	f003 030f 	and.w	r3, r3, #15
 800dcbe:	b2da      	uxtb	r2, r3
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800dcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc6:	b2db      	uxtb	r3, r3
 800dcc8:	f003 030f 	and.w	r3, r3, #15
 800dccc:	b2da      	uxtb	r2, r3
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800dcd2:	6a3b      	ldr	r3, [r7, #32]
 800dcd4:	0e1b      	lsrs	r3, r3, #24
 800dcd6:	b2da      	uxtb	r2, r3
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800dcdc:	6a3b      	ldr	r3, [r7, #32]
 800dcde:	0c1b      	lsrs	r3, r3, #16
 800dce0:	b2da      	uxtb	r2, r3
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800dce6:	6a3b      	ldr	r3, [r7, #32]
 800dce8:	0a1b      	lsrs	r3, r3, #8
 800dcea:	b2da      	uxtb	r2, r3
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800dcf0:	6a3b      	ldr	r3, [r7, #32]
 800dcf2:	b2da      	uxtb	r2, r3
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800dcf8:	69fb      	ldr	r3, [r7, #28]
 800dcfa:	b2da      	uxtb	r2, r3
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800dd00:	69bb      	ldr	r3, [r7, #24]
 800dd02:	0e1b      	lsrs	r3, r3, #24
 800dd04:	b2da      	uxtb	r2, r3
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	0c1b      	lsrs	r3, r3, #16
 800dd0e:	b2da      	uxtb	r2, r3
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800dd14:	69bb      	ldr	r3, [r7, #24]
 800dd16:	0a1b      	lsrs	r3, r3, #8
 800dd18:	b2da      	uxtb	r2, r3
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	0e1b      	lsrs	r3, r3, #24
 800dd22:	b2da      	uxtb	r2, r3
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	0c1b      	lsrs	r3, r3, #16
 800dd2c:	b2da      	uxtb	r2, r3
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	b2da      	uxtb	r2, r3
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800dd3a:	2300      	movs	r3, #0
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	372c      	adds	r7, #44	; 0x2c
 800dd40:	46bd      	mov	sp, r7
 800dd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd46:	4770      	bx	lr
 800dd48:	58004000 	.word	0x58004000
 800dd4c:	a94656b9 	.word	0xa94656b9

0800dd50 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b082      	sub	sp, #8
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
 800dd58:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	4a08      	ldr	r2, [pc, #32]	; (800dd80 <hci_init+0x30>)
 800dd60:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800dd62:	4a08      	ldr	r2, [pc, #32]	; (800dd84 <hci_init+0x34>)
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800dd68:	4806      	ldr	r0, [pc, #24]	; (800dd84 <hci_init+0x34>)
 800dd6a:	f000 f979 	bl	800e060 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	4618      	mov	r0, r3
 800dd74:	f000 f8da 	bl	800df2c <TlInit>

  return;
 800dd78:	bf00      	nop
}
 800dd7a:	3708      	adds	r7, #8
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}
 800dd80:	20001610 	.word	0x20001610
 800dd84:	200015e8 	.word	0x200015e8

0800dd88 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b084      	sub	sp, #16
 800dd8c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800dd8e:	4822      	ldr	r0, [pc, #136]	; (800de18 <hci_user_evt_proc+0x90>)
 800dd90:	f000 fd32 	bl	800e7f8 <LST_is_empty>
 800dd94:	4603      	mov	r3, r0
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d12b      	bne.n	800ddf2 <hci_user_evt_proc+0x6a>
 800dd9a:	4b20      	ldr	r3, [pc, #128]	; (800de1c <hci_user_evt_proc+0x94>)
 800dd9c:	781b      	ldrb	r3, [r3, #0]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d027      	beq.n	800ddf2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800dda2:	f107 030c 	add.w	r3, r7, #12
 800dda6:	4619      	mov	r1, r3
 800dda8:	481b      	ldr	r0, [pc, #108]	; (800de18 <hci_user_evt_proc+0x90>)
 800ddaa:	f000 fdb4 	bl	800e916 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800ddae:	4b1c      	ldr	r3, [pc, #112]	; (800de20 <hci_user_evt_proc+0x98>)
 800ddb0:	69db      	ldr	r3, [r3, #28]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d00c      	beq.n	800ddd0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800ddba:	2301      	movs	r3, #1
 800ddbc:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800ddbe:	4b18      	ldr	r3, [pc, #96]	; (800de20 <hci_user_evt_proc+0x98>)
 800ddc0:	69db      	ldr	r3, [r3, #28]
 800ddc2:	1d3a      	adds	r2, r7, #4
 800ddc4:	4610      	mov	r0, r2
 800ddc6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800ddc8:	793a      	ldrb	r2, [r7, #4]
 800ddca:	4b14      	ldr	r3, [pc, #80]	; (800de1c <hci_user_evt_proc+0x94>)
 800ddcc:	701a      	strb	r2, [r3, #0]
 800ddce:	e002      	b.n	800ddd6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800ddd0:	4b12      	ldr	r3, [pc, #72]	; (800de1c <hci_user_evt_proc+0x94>)
 800ddd2:	2201      	movs	r2, #1
 800ddd4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800ddd6:	4b11      	ldr	r3, [pc, #68]	; (800de1c <hci_user_evt_proc+0x94>)
 800ddd8:	781b      	ldrb	r3, [r3, #0]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d004      	beq.n	800dde8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	4618      	mov	r0, r3
 800dde2:	f000 fc0d 	bl	800e600 <TL_MM_EvtDone>
 800dde6:	e004      	b.n	800ddf2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	4619      	mov	r1, r3
 800ddec:	480a      	ldr	r0, [pc, #40]	; (800de18 <hci_user_evt_proc+0x90>)
 800ddee:	f000 fd25 	bl	800e83c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800ddf2:	4809      	ldr	r0, [pc, #36]	; (800de18 <hci_user_evt_proc+0x90>)
 800ddf4:	f000 fd00 	bl	800e7f8 <LST_is_empty>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d107      	bne.n	800de0e <hci_user_evt_proc+0x86>
 800ddfe:	4b07      	ldr	r3, [pc, #28]	; (800de1c <hci_user_evt_proc+0x94>)
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d003      	beq.n	800de0e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800de06:	4804      	ldr	r0, [pc, #16]	; (800de18 <hci_user_evt_proc+0x90>)
 800de08:	f001 f844 	bl	800ee94 <hci_notify_asynch_evt>
  }


  return;
 800de0c:	bf00      	nop
 800de0e:	bf00      	nop
}
 800de10:	3710      	adds	r7, #16
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}
 800de16:	bf00      	nop
 800de18:	20000378 	.word	0x20000378
 800de1c:	20000384 	.word	0x20000384
 800de20:	200015e8 	.word	0x200015e8

0800de24 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b088      	sub	sp, #32
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	460b      	mov	r3, r1
 800de2e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800de30:	2000      	movs	r0, #0
 800de32:	f000 f8d1 	bl	800dfd8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800de36:	2300      	movs	r3, #0
 800de38:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	885b      	ldrh	r3, [r3, #2]
 800de3e:	b21b      	sxth	r3, r3
 800de40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800de44:	b21a      	sxth	r2, r3
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	881b      	ldrh	r3, [r3, #0]
 800de4a:	029b      	lsls	r3, r3, #10
 800de4c:	b21b      	sxth	r3, r3
 800de4e:	4313      	orrs	r3, r2
 800de50:	b21b      	sxth	r3, r3
 800de52:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800de54:	4b33      	ldr	r3, [pc, #204]	; (800df24 <hci_send_req+0x100>)
 800de56:	2201      	movs	r2, #1
 800de58:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	68db      	ldr	r3, [r3, #12]
 800de5e:	b2d9      	uxtb	r1, r3
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	689a      	ldr	r2, [r3, #8]
 800de64:	8bbb      	ldrh	r3, [r7, #28]
 800de66:	4618      	mov	r0, r3
 800de68:	f000 f890 	bl	800df8c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800de6c:	e04e      	b.n	800df0c <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800de6e:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800de72:	f001 f826 	bl	800eec2 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800de76:	e043      	b.n	800df00 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800de78:	f107 030c 	add.w	r3, r7, #12
 800de7c:	4619      	mov	r1, r3
 800de7e:	482a      	ldr	r0, [pc, #168]	; (800df28 <hci_send_req+0x104>)
 800de80:	f000 fd49 	bl	800e916 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	7a5b      	ldrb	r3, [r3, #9]
 800de88:	2b0f      	cmp	r3, #15
 800de8a:	d114      	bne.n	800deb6 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	330b      	adds	r3, #11
 800de90:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	885b      	ldrh	r3, [r3, #2]
 800de96:	b29b      	uxth	r3, r3
 800de98:	8bba      	ldrh	r2, [r7, #28]
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d104      	bne.n	800dea8 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	691b      	ldr	r3, [r3, #16]
 800dea2:	693a      	ldr	r2, [r7, #16]
 800dea4:	7812      	ldrb	r2, [r2, #0]
 800dea6:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	785b      	ldrb	r3, [r3, #1]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d027      	beq.n	800df00 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800deb0:	2301      	movs	r3, #1
 800deb2:	77fb      	strb	r3, [r7, #31]
 800deb4:	e024      	b.n	800df00 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	330b      	adds	r3, #11
 800deba:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800debc:	69bb      	ldr	r3, [r7, #24]
 800debe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800dec2:	b29b      	uxth	r3, r3
 800dec4:	8bba      	ldrh	r2, [r7, #28]
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d114      	bne.n	800def4 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	7a9b      	ldrb	r3, [r3, #10]
 800dece:	3b03      	subs	r3, #3
 800ded0:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	695a      	ldr	r2, [r3, #20]
 800ded6:	7dfb      	ldrb	r3, [r7, #23]
 800ded8:	429a      	cmp	r2, r3
 800deda:	bfa8      	it	ge
 800dedc:	461a      	movge	r2, r3
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6918      	ldr	r0, [r3, #16]
 800dee6:	69bb      	ldr	r3, [r7, #24]
 800dee8:	1cd9      	adds	r1, r3, #3
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	695b      	ldr	r3, [r3, #20]
 800deee:	461a      	mov	r2, r3
 800def0:	f002 ff35 	bl	8010d5e <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800def4:	69bb      	ldr	r3, [r7, #24]
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d001      	beq.n	800df00 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800defc:	2301      	movs	r3, #1
 800defe:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800df00:	4809      	ldr	r0, [pc, #36]	; (800df28 <hci_send_req+0x104>)
 800df02:	f000 fc79 	bl	800e7f8 <LST_is_empty>
 800df06:	4603      	mov	r3, r0
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d0b5      	beq.n	800de78 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800df0c:	7ffb      	ldrb	r3, [r7, #31]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d0ad      	beq.n	800de6e <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800df12:	2001      	movs	r0, #1
 800df14:	f000 f860 	bl	800dfd8 <NotifyCmdStatus>

  return 0;
 800df18:	2300      	movs	r3, #0
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3720      	adds	r7, #32
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
 800df22:	bf00      	nop
 800df24:	20001614 	.word	0x20001614
 800df28:	20001608 	.word	0x20001608

0800df2c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b086      	sub	sp, #24
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800df34:	480f      	ldr	r0, [pc, #60]	; (800df74 <TlInit+0x48>)
 800df36:	f000 fc4f 	bl	800e7d8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800df3a:	4a0f      	ldr	r2, [pc, #60]	; (800df78 <TlInit+0x4c>)
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800df40:	480e      	ldr	r0, [pc, #56]	; (800df7c <TlInit+0x50>)
 800df42:	f000 fc49 	bl	800e7d8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800df46:	4b0e      	ldr	r3, [pc, #56]	; (800df80 <TlInit+0x54>)
 800df48:	2201      	movs	r2, #1
 800df4a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800df4c:	4b0d      	ldr	r3, [pc, #52]	; (800df84 <TlInit+0x58>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d00a      	beq.n	800df6a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800df58:	4b0b      	ldr	r3, [pc, #44]	; (800df88 <TlInit+0x5c>)
 800df5a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800df5c:	4b09      	ldr	r3, [pc, #36]	; (800df84 <TlInit+0x58>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	f107 0208 	add.w	r2, r7, #8
 800df64:	4610      	mov	r0, r2
 800df66:	4798      	blx	r3
  }

  return;
 800df68:	bf00      	nop
 800df6a:	bf00      	nop
}
 800df6c:	3718      	adds	r7, #24
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}
 800df72:	bf00      	nop
 800df74:	20001608 	.word	0x20001608
 800df78:	20000380 	.word	0x20000380
 800df7c:	20000378 	.word	0x20000378
 800df80:	20000384 	.word	0x20000384
 800df84:	200015e8 	.word	0x200015e8
 800df88:	0800e019 	.word	0x0800e019

0800df8c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b082      	sub	sp, #8
 800df90:	af00      	add	r7, sp, #0
 800df92:	4603      	mov	r3, r0
 800df94:	603a      	str	r2, [r7, #0]
 800df96:	80fb      	strh	r3, [r7, #6]
 800df98:	460b      	mov	r3, r1
 800df9a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800df9c:	4b0c      	ldr	r3, [pc, #48]	; (800dfd0 <SendCmd+0x44>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	88fa      	ldrh	r2, [r7, #6]
 800dfa2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800dfa6:	4b0a      	ldr	r3, [pc, #40]	; (800dfd0 <SendCmd+0x44>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	797a      	ldrb	r2, [r7, #5]
 800dfac:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800dfae:	4b08      	ldr	r3, [pc, #32]	; (800dfd0 <SendCmd+0x44>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	330c      	adds	r3, #12
 800dfb4:	797a      	ldrb	r2, [r7, #5]
 800dfb6:	6839      	ldr	r1, [r7, #0]
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f002 fed0 	bl	8010d5e <memcpy>

  hciContext.io.Send(0,0);
 800dfbe:	4b05      	ldr	r3, [pc, #20]	; (800dfd4 <SendCmd+0x48>)
 800dfc0:	691b      	ldr	r3, [r3, #16]
 800dfc2:	2100      	movs	r1, #0
 800dfc4:	2000      	movs	r0, #0
 800dfc6:	4798      	blx	r3

  return;
 800dfc8:	bf00      	nop
}
 800dfca:	3708      	adds	r7, #8
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}
 800dfd0:	20000380 	.word	0x20000380
 800dfd4:	200015e8 	.word	0x200015e8

0800dfd8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b082      	sub	sp, #8
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	4603      	mov	r3, r0
 800dfe0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800dfe2:	79fb      	ldrb	r3, [r7, #7]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d108      	bne.n	800dffa <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800dfe8:	4b0a      	ldr	r3, [pc, #40]	; (800e014 <NotifyCmdStatus+0x3c>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d00d      	beq.n	800e00c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800dff0:	4b08      	ldr	r3, [pc, #32]	; (800e014 <NotifyCmdStatus+0x3c>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	2000      	movs	r0, #0
 800dff6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800dff8:	e008      	b.n	800e00c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800dffa:	4b06      	ldr	r3, [pc, #24]	; (800e014 <NotifyCmdStatus+0x3c>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d004      	beq.n	800e00c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800e002:	4b04      	ldr	r3, [pc, #16]	; (800e014 <NotifyCmdStatus+0x3c>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	2001      	movs	r0, #1
 800e008:	4798      	blx	r3
  return;
 800e00a:	bf00      	nop
 800e00c:	bf00      	nop
}
 800e00e:	3708      	adds	r7, #8
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}
 800e014:	20001610 	.word	0x20001610

0800e018 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b082      	sub	sp, #8
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	7a5b      	ldrb	r3, [r3, #9]
 800e024:	2b0f      	cmp	r3, #15
 800e026:	d003      	beq.n	800e030 <TlEvtReceived+0x18>
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	7a5b      	ldrb	r3, [r3, #9]
 800e02c:	2b0e      	cmp	r3, #14
 800e02e:	d107      	bne.n	800e040 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800e030:	6879      	ldr	r1, [r7, #4]
 800e032:	4809      	ldr	r0, [pc, #36]	; (800e058 <TlEvtReceived+0x40>)
 800e034:	f000 fc28 	bl	800e888 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800e038:	2000      	movs	r0, #0
 800e03a:	f000 ff37 	bl	800eeac <hci_cmd_resp_release>
 800e03e:	e006      	b.n	800e04e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800e040:	6879      	ldr	r1, [r7, #4]
 800e042:	4806      	ldr	r0, [pc, #24]	; (800e05c <TlEvtReceived+0x44>)
 800e044:	f000 fc20 	bl	800e888 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e048:	4804      	ldr	r0, [pc, #16]	; (800e05c <TlEvtReceived+0x44>)
 800e04a:	f000 ff23 	bl	800ee94 <hci_notify_asynch_evt>
  }

  return;
 800e04e:	bf00      	nop
}
 800e050:	3708      	adds	r7, #8
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
 800e056:	bf00      	nop
 800e058:	20001608 	.word	0x20001608
 800e05c:	20000378 	.word	0x20000378

0800e060 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800e060:	b480      	push	{r7}
 800e062:	b083      	sub	sp, #12
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	4a05      	ldr	r2, [pc, #20]	; (800e080 <hci_register_io_bus+0x20>)
 800e06c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	4a04      	ldr	r2, [pc, #16]	; (800e084 <hci_register_io_bus+0x24>)
 800e072:	611a      	str	r2, [r3, #16]

  return;
 800e074:	bf00      	nop
}
 800e076:	370c      	adds	r7, #12
 800e078:	46bd      	mov	sp, r7
 800e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07e:	4770      	bx	lr
 800e080:	0800e379 	.word	0x0800e379
 800e084:	0800e3e1 	.word	0x0800e3e1

0800e088 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	4a08      	ldr	r2, [pc, #32]	; (800e0b8 <shci_init+0x30>)
 800e098:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800e09a:	4a08      	ldr	r2, [pc, #32]	; (800e0bc <shci_init+0x34>)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800e0a0:	4806      	ldr	r0, [pc, #24]	; (800e0bc <shci_init+0x34>)
 800e0a2:	f000 f915 	bl	800e2d0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f000 f898 	bl	800e1e0 <TlInit>

  return;
 800e0b0:	bf00      	nop
}
 800e0b2:	3708      	adds	r7, #8
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}
 800e0b8:	20001638 	.word	0x20001638
 800e0bc:	20001618 	.word	0x20001618

0800e0c0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b084      	sub	sp, #16
 800e0c4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e0c6:	4822      	ldr	r0, [pc, #136]	; (800e150 <shci_user_evt_proc+0x90>)
 800e0c8:	f000 fb96 	bl	800e7f8 <LST_is_empty>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d12b      	bne.n	800e12a <shci_user_evt_proc+0x6a>
 800e0d2:	4b20      	ldr	r3, [pc, #128]	; (800e154 <shci_user_evt_proc+0x94>)
 800e0d4:	781b      	ldrb	r3, [r3, #0]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d027      	beq.n	800e12a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e0da:	f107 030c 	add.w	r3, r7, #12
 800e0de:	4619      	mov	r1, r3
 800e0e0:	481b      	ldr	r0, [pc, #108]	; (800e150 <shci_user_evt_proc+0x90>)
 800e0e2:	f000 fc18 	bl	800e916 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800e0e6:	4b1c      	ldr	r3, [pc, #112]	; (800e158 <shci_user_evt_proc+0x98>)
 800e0e8:	69db      	ldr	r3, [r3, #28]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d00c      	beq.n	800e108 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e0f6:	4b18      	ldr	r3, [pc, #96]	; (800e158 <shci_user_evt_proc+0x98>)
 800e0f8:	69db      	ldr	r3, [r3, #28]
 800e0fa:	1d3a      	adds	r2, r7, #4
 800e0fc:	4610      	mov	r0, r2
 800e0fe:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800e100:	793a      	ldrb	r2, [r7, #4]
 800e102:	4b14      	ldr	r3, [pc, #80]	; (800e154 <shci_user_evt_proc+0x94>)
 800e104:	701a      	strb	r2, [r3, #0]
 800e106:	e002      	b.n	800e10e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e108:	4b12      	ldr	r3, [pc, #72]	; (800e154 <shci_user_evt_proc+0x94>)
 800e10a:	2201      	movs	r2, #1
 800e10c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800e10e:	4b11      	ldr	r3, [pc, #68]	; (800e154 <shci_user_evt_proc+0x94>)
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d004      	beq.n	800e120 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	4618      	mov	r0, r3
 800e11a:	f000 fa71 	bl	800e600 <TL_MM_EvtDone>
 800e11e:	e004      	b.n	800e12a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	4619      	mov	r1, r3
 800e124:	480a      	ldr	r0, [pc, #40]	; (800e150 <shci_user_evt_proc+0x90>)
 800e126:	f000 fb89 	bl	800e83c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e12a:	4809      	ldr	r0, [pc, #36]	; (800e150 <shci_user_evt_proc+0x90>)
 800e12c:	f000 fb64 	bl	800e7f8 <LST_is_empty>
 800e130:	4603      	mov	r3, r0
 800e132:	2b00      	cmp	r3, #0
 800e134:	d107      	bne.n	800e146 <shci_user_evt_proc+0x86>
 800e136:	4b07      	ldr	r3, [pc, #28]	; (800e154 <shci_user_evt_proc+0x94>)
 800e138:	781b      	ldrb	r3, [r3, #0]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d003      	beq.n	800e146 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800e13e:	4804      	ldr	r0, [pc, #16]	; (800e150 <shci_user_evt_proc+0x90>)
 800e140:	f7f3 f920 	bl	8001384 <shci_notify_asynch_evt>
  }


  return;
 800e144:	bf00      	nop
 800e146:	bf00      	nop
}
 800e148:	3710      	adds	r7, #16
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}
 800e14e:	bf00      	nop
 800e150:	20000388 	.word	0x20000388
 800e154:	20000398 	.word	0x20000398
 800e158:	20001618 	.word	0x20001618

0800e15c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
 800e162:	60ba      	str	r2, [r7, #8]
 800e164:	607b      	str	r3, [r7, #4]
 800e166:	4603      	mov	r3, r0
 800e168:	81fb      	strh	r3, [r7, #14]
 800e16a:	460b      	mov	r3, r1
 800e16c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800e16e:	2000      	movs	r0, #0
 800e170:	f000 f868 	bl	800e244 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800e174:	4b17      	ldr	r3, [pc, #92]	; (800e1d4 <shci_send+0x78>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	89fa      	ldrh	r2, [r7, #14]
 800e17a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800e17e:	4b15      	ldr	r3, [pc, #84]	; (800e1d4 <shci_send+0x78>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	7b7a      	ldrb	r2, [r7, #13]
 800e184:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800e186:	4b13      	ldr	r3, [pc, #76]	; (800e1d4 <shci_send+0x78>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	330c      	adds	r3, #12
 800e18c:	7b7a      	ldrb	r2, [r7, #13]
 800e18e:	68b9      	ldr	r1, [r7, #8]
 800e190:	4618      	mov	r0, r3
 800e192:	f002 fde4 	bl	8010d5e <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800e196:	4b10      	ldr	r3, [pc, #64]	; (800e1d8 <shci_send+0x7c>)
 800e198:	2201      	movs	r2, #1
 800e19a:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800e19c:	4b0f      	ldr	r3, [pc, #60]	; (800e1dc <shci_send+0x80>)
 800e19e:	691b      	ldr	r3, [r3, #16]
 800e1a0:	2100      	movs	r1, #0
 800e1a2:	2000      	movs	r0, #0
 800e1a4:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800e1a6:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800e1aa:	f7f3 f902 	bl	80013b2 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f103 0008 	add.w	r0, r3, #8
 800e1b4:	4b07      	ldr	r3, [pc, #28]	; (800e1d4 <shci_send+0x78>)
 800e1b6:	6819      	ldr	r1, [r3, #0]
 800e1b8:	4b06      	ldr	r3, [pc, #24]	; (800e1d4 <shci_send+0x78>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	789b      	ldrb	r3, [r3, #2]
 800e1be:	3303      	adds	r3, #3
 800e1c0:	461a      	mov	r2, r3
 800e1c2:	f002 fdcc 	bl	8010d5e <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e1c6:	2001      	movs	r0, #1
 800e1c8:	f000 f83c 	bl	800e244 <Cmd_SetStatus>

  return;
 800e1cc:	bf00      	nop
}
 800e1ce:	3710      	adds	r7, #16
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}
 800e1d4:	20000394 	.word	0x20000394
 800e1d8:	2000163c 	.word	0x2000163c
 800e1dc:	20001618 	.word	0x20001618

0800e1e0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b086      	sub	sp, #24
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800e1e8:	4a10      	ldr	r2, [pc, #64]	; (800e22c <TlInit+0x4c>)
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800e1ee:	4810      	ldr	r0, [pc, #64]	; (800e230 <TlInit+0x50>)
 800e1f0:	f000 faf2 	bl	800e7d8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e1f4:	2001      	movs	r0, #1
 800e1f6:	f000 f825 	bl	800e244 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e1fa:	4b0e      	ldr	r3, [pc, #56]	; (800e234 <TlInit+0x54>)
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800e200:	4b0d      	ldr	r3, [pc, #52]	; (800e238 <TlInit+0x58>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d00c      	beq.n	800e222 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800e20c:	4b0b      	ldr	r3, [pc, #44]	; (800e23c <TlInit+0x5c>)
 800e20e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800e210:	4b0b      	ldr	r3, [pc, #44]	; (800e240 <TlInit+0x60>)
 800e212:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800e214:	4b08      	ldr	r3, [pc, #32]	; (800e238 <TlInit+0x58>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f107 020c 	add.w	r2, r7, #12
 800e21c:	4610      	mov	r0, r2
 800e21e:	4798      	blx	r3
  }

  return;
 800e220:	bf00      	nop
 800e222:	bf00      	nop
}
 800e224:	3718      	adds	r7, #24
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}
 800e22a:	bf00      	nop
 800e22c:	20000394 	.word	0x20000394
 800e230:	20000388 	.word	0x20000388
 800e234:	20000398 	.word	0x20000398
 800e238:	20001618 	.word	0x20001618
 800e23c:	0800e295 	.word	0x0800e295
 800e240:	0800e2ad 	.word	0x0800e2ad

0800e244 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af00      	add	r7, sp, #0
 800e24a:	4603      	mov	r3, r0
 800e24c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800e24e:	79fb      	ldrb	r3, [r7, #7]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d10b      	bne.n	800e26c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800e254:	4b0d      	ldr	r3, [pc, #52]	; (800e28c <Cmd_SetStatus+0x48>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d003      	beq.n	800e264 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800e25c:	4b0b      	ldr	r3, [pc, #44]	; (800e28c <Cmd_SetStatus+0x48>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	2000      	movs	r0, #0
 800e262:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800e264:	4b0a      	ldr	r3, [pc, #40]	; (800e290 <Cmd_SetStatus+0x4c>)
 800e266:	2200      	movs	r2, #0
 800e268:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800e26a:	e00b      	b.n	800e284 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800e26c:	4b08      	ldr	r3, [pc, #32]	; (800e290 <Cmd_SetStatus+0x4c>)
 800e26e:	2201      	movs	r2, #1
 800e270:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800e272:	4b06      	ldr	r3, [pc, #24]	; (800e28c <Cmd_SetStatus+0x48>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d004      	beq.n	800e284 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800e27a:	4b04      	ldr	r3, [pc, #16]	; (800e28c <Cmd_SetStatus+0x48>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	2001      	movs	r0, #1
 800e280:	4798      	blx	r3
  return;
 800e282:	bf00      	nop
 800e284:	bf00      	nop
}
 800e286:	3708      	adds	r7, #8
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}
 800e28c:	20001638 	.word	0x20001638
 800e290:	20000390 	.word	0x20000390

0800e294 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b082      	sub	sp, #8
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800e29c:	2000      	movs	r0, #0
 800e29e:	f7f3 f87d 	bl	800139c <shci_cmd_resp_release>

  return;
 800e2a2:	bf00      	nop
}
 800e2a4:	3708      	adds	r7, #8
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
	...

0800e2ac <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b082      	sub	sp, #8
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800e2b4:	6879      	ldr	r1, [r7, #4]
 800e2b6:	4805      	ldr	r0, [pc, #20]	; (800e2cc <TlUserEvtReceived+0x20>)
 800e2b8:	f000 fae6 	bl	800e888 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e2bc:	4803      	ldr	r0, [pc, #12]	; (800e2cc <TlUserEvtReceived+0x20>)
 800e2be:	f7f3 f861 	bl	8001384 <shci_notify_asynch_evt>

  return;
 800e2c2:	bf00      	nop
}
 800e2c4:	3708      	adds	r7, #8
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}
 800e2ca:	bf00      	nop
 800e2cc:	20000388 	.word	0x20000388

0800e2d0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	b083      	sub	sp, #12
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	4a05      	ldr	r2, [pc, #20]	; (800e2f0 <shci_register_io_bus+0x20>)
 800e2dc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	4a04      	ldr	r2, [pc, #16]	; (800e2f4 <shci_register_io_bus+0x24>)
 800e2e2:	611a      	str	r2, [r3, #16]

  return;
 800e2e4:	bf00      	nop
}
 800e2e6:	370c      	adds	r7, #12
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ee:	4770      	bx	lr
 800e2f0:	0800e48d 	.word	0x0800e48d
 800e2f4:	0800e4e1 	.word	0x0800e4e1

0800e2f8 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800e2fc:	f001 fbba 	bl	800fa74 <HW_IPCC_Enable>

  return;
 800e300:	bf00      	nop
}
 800e302:	bd80      	pop	{r7, pc}

0800e304 <TL_Init>:


void TL_Init( void )
{
 800e304:	b580      	push	{r7, lr}
 800e306:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800e308:	4b10      	ldr	r3, [pc, #64]	; (800e34c <TL_Init+0x48>)
 800e30a:	4a11      	ldr	r2, [pc, #68]	; (800e350 <TL_Init+0x4c>)
 800e30c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800e30e:	4b0f      	ldr	r3, [pc, #60]	; (800e34c <TL_Init+0x48>)
 800e310:	4a10      	ldr	r2, [pc, #64]	; (800e354 <TL_Init+0x50>)
 800e312:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800e314:	4b0d      	ldr	r3, [pc, #52]	; (800e34c <TL_Init+0x48>)
 800e316:	4a10      	ldr	r2, [pc, #64]	; (800e358 <TL_Init+0x54>)
 800e318:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800e31a:	4b0c      	ldr	r3, [pc, #48]	; (800e34c <TL_Init+0x48>)
 800e31c:	4a0f      	ldr	r2, [pc, #60]	; (800e35c <TL_Init+0x58>)
 800e31e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800e320:	4b0a      	ldr	r3, [pc, #40]	; (800e34c <TL_Init+0x48>)
 800e322:	4a0f      	ldr	r2, [pc, #60]	; (800e360 <TL_Init+0x5c>)
 800e324:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800e326:	4b09      	ldr	r3, [pc, #36]	; (800e34c <TL_Init+0x48>)
 800e328:	4a0e      	ldr	r2, [pc, #56]	; (800e364 <TL_Init+0x60>)
 800e32a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800e32c:	4b07      	ldr	r3, [pc, #28]	; (800e34c <TL_Init+0x48>)
 800e32e:	4a0e      	ldr	r2, [pc, #56]	; (800e368 <TL_Init+0x64>)
 800e330:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800e332:	4b06      	ldr	r3, [pc, #24]	; (800e34c <TL_Init+0x48>)
 800e334:	4a0d      	ldr	r2, [pc, #52]	; (800e36c <TL_Init+0x68>)
 800e336:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800e338:	4b04      	ldr	r3, [pc, #16]	; (800e34c <TL_Init+0x48>)
 800e33a:	4a0d      	ldr	r2, [pc, #52]	; (800e370 <TL_Init+0x6c>)
 800e33c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800e33e:	4b03      	ldr	r3, [pc, #12]	; (800e34c <TL_Init+0x48>)
 800e340:	4a0c      	ldr	r2, [pc, #48]	; (800e374 <TL_Init+0x70>)
 800e342:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800e344:	f001 fbaa 	bl	800fa9c <HW_IPCC_Init>

  return;
 800e348:	bf00      	nop
}
 800e34a:	bd80      	pop	{r7, pc}
 800e34c:	20030000 	.word	0x20030000
 800e350:	20030028 	.word	0x20030028
 800e354:	20030048 	.word	0x20030048
 800e358:	20030058 	.word	0x20030058
 800e35c:	20030068 	.word	0x20030068
 800e360:	20030070 	.word	0x20030070
 800e364:	20030078 	.word	0x20030078
 800e368:	20030080 	.word	0x20030080
 800e36c:	2003009c 	.word	0x2003009c
 800e370:	200300a0 	.word	0x200300a0
 800e374:	200300ac 	.word	0x200300ac

0800e378 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b084      	sub	sp, #16
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800e384:	4811      	ldr	r0, [pc, #68]	; (800e3cc <TL_BLE_Init+0x54>)
 800e386:	f000 fa27 	bl	800e7d8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800e38a:	4b11      	ldr	r3, [pc, #68]	; (800e3d0 <TL_BLE_Init+0x58>)
 800e38c:	685b      	ldr	r3, [r3, #4]
 800e38e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	689a      	ldr	r2, [r3, #8]
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	68da      	ldr	r2, [r3, #12]
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	4a0c      	ldr	r2, [pc, #48]	; (800e3d4 <TL_BLE_Init+0x5c>)
 800e3a4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	4a08      	ldr	r2, [pc, #32]	; (800e3cc <TL_BLE_Init+0x54>)
 800e3aa:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800e3ac:	f001 fb8c 	bl	800fac8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	4a08      	ldr	r2, [pc, #32]	; (800e3d8 <TL_BLE_Init+0x60>)
 800e3b6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	685b      	ldr	r3, [r3, #4]
 800e3bc:	4a07      	ldr	r2, [pc, #28]	; (800e3dc <TL_BLE_Init+0x64>)
 800e3be:	6013      	str	r3, [r2, #0]

  return 0;
 800e3c0:	2300      	movs	r3, #0
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3710      	adds	r7, #16
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}
 800e3ca:	bf00      	nop
 800e3cc:	200300c8 	.word	0x200300c8
 800e3d0:	20030000 	.word	0x20030000
 800e3d4:	20030a58 	.word	0x20030a58
 800e3d8:	20001648 	.word	0x20001648
 800e3dc:	2000164c 	.word	0x2000164c

0800e3e0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b082      	sub	sp, #8
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	460b      	mov	r3, r1
 800e3ea:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800e3ec:	4b09      	ldr	r3, [pc, #36]	; (800e414 <TL_BLE_SendCmd+0x34>)
 800e3ee:	685b      	ldr	r3, [r3, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	2201      	movs	r2, #1
 800e3f4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800e3f6:	4b07      	ldr	r3, [pc, #28]	; (800e414 <TL_BLE_SendCmd+0x34>)
 800e3f8:	685b      	ldr	r3, [r3, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	4619      	mov	r1, r3
 800e3fe:	2001      	movs	r0, #1
 800e400:	f000 f96c 	bl	800e6dc <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800e404:	f001 fb6a 	bl	800fadc <HW_IPCC_BLE_SendCmd>

  return 0;
 800e408:	2300      	movs	r3, #0
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3708      	adds	r7, #8
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	20030000 	.word	0x20030000

0800e418 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b082      	sub	sp, #8
 800e41c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800e41e:	e01c      	b.n	800e45a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800e420:	1d3b      	adds	r3, r7, #4
 800e422:	4619      	mov	r1, r3
 800e424:	4812      	ldr	r0, [pc, #72]	; (800e470 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e426:	f000 fa76 	bl	800e916 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	7a5b      	ldrb	r3, [r3, #9]
 800e42e:	2b0f      	cmp	r3, #15
 800e430:	d003      	beq.n	800e43a <HW_IPCC_BLE_RxEvtNot+0x22>
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	7a5b      	ldrb	r3, [r3, #9]
 800e436:	2b0e      	cmp	r3, #14
 800e438:	d105      	bne.n	800e446 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	4619      	mov	r1, r3
 800e43e:	2002      	movs	r0, #2
 800e440:	f000 f94c 	bl	800e6dc <OutputDbgTrace>
 800e444:	e004      	b.n	800e450 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	4619      	mov	r1, r3
 800e44a:	2003      	movs	r0, #3
 800e44c:	f000 f946 	bl	800e6dc <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800e450:	4b08      	ldr	r3, [pc, #32]	; (800e474 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	687a      	ldr	r2, [r7, #4]
 800e456:	4610      	mov	r0, r2
 800e458:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800e45a:	4805      	ldr	r0, [pc, #20]	; (800e470 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e45c:	f000 f9cc 	bl	800e7f8 <LST_is_empty>
 800e460:	4603      	mov	r3, r0
 800e462:	2b00      	cmp	r3, #0
 800e464:	d0dc      	beq.n	800e420 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800e466:	bf00      	nop
}
 800e468:	3708      	adds	r7, #8
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}
 800e46e:	bf00      	nop
 800e470:	200300c8 	.word	0x200300c8
 800e474:	20001648 	.word	0x20001648

0800e478 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800e47c:	4b02      	ldr	r3, [pc, #8]	; (800e488 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	4798      	blx	r3

  return;
 800e482:	bf00      	nop
}
 800e484:	bd80      	pop	{r7, pc}
 800e486:	bf00      	nop
 800e488:	2000164c 	.word	0x2000164c

0800e48c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800e498:	480d      	ldr	r0, [pc, #52]	; (800e4d0 <TL_SYS_Init+0x44>)
 800e49a:	f000 f99d 	bl	800e7d8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800e49e:	4b0d      	ldr	r3, [pc, #52]	; (800e4d4 <TL_SYS_Init+0x48>)
 800e4a0:	68db      	ldr	r3, [r3, #12]
 800e4a2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	689a      	ldr	r2, [r3, #8]
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	4a08      	ldr	r2, [pc, #32]	; (800e4d0 <TL_SYS_Init+0x44>)
 800e4b0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800e4b2:	f001 fb35 	bl	800fb20 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	4a07      	ldr	r2, [pc, #28]	; (800e4d8 <TL_SYS_Init+0x4c>)
 800e4bc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	685b      	ldr	r3, [r3, #4]
 800e4c2:	4a06      	ldr	r2, [pc, #24]	; (800e4dc <TL_SYS_Init+0x50>)
 800e4c4:	6013      	str	r3, [r2, #0]

  return 0;
 800e4c6:	2300      	movs	r3, #0
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3710      	adds	r7, #16
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}
 800e4d0:	200300d0 	.word	0x200300d0
 800e4d4:	20030000 	.word	0x20030000
 800e4d8:	20001650 	.word	0x20001650
 800e4dc:	20001654 	.word	0x20001654

0800e4e0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b082      	sub	sp, #8
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
 800e4e8:	460b      	mov	r3, r1
 800e4ea:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800e4ec:	4b09      	ldr	r3, [pc, #36]	; (800e514 <TL_SYS_SendCmd+0x34>)
 800e4ee:	68db      	ldr	r3, [r3, #12]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	2210      	movs	r2, #16
 800e4f4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800e4f6:	4b07      	ldr	r3, [pc, #28]	; (800e514 <TL_SYS_SendCmd+0x34>)
 800e4f8:	68db      	ldr	r3, [r3, #12]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	4619      	mov	r1, r3
 800e4fe:	2004      	movs	r0, #4
 800e500:	f000 f8ec 	bl	800e6dc <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800e504:	f001 fb16 	bl	800fb34 <HW_IPCC_SYS_SendCmd>

  return 0;
 800e508:	2300      	movs	r3, #0
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	3708      	adds	r7, #8
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
 800e512:	bf00      	nop
 800e514:	20030000 	.word	0x20030000

0800e518 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e51c:	4b07      	ldr	r3, [pc, #28]	; (800e53c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800e51e:	68db      	ldr	r3, [r3, #12]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	4619      	mov	r1, r3
 800e524:	2005      	movs	r0, #5
 800e526:	f000 f8d9 	bl	800e6dc <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e52a:	4b05      	ldr	r3, [pc, #20]	; (800e540 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	4a03      	ldr	r2, [pc, #12]	; (800e53c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800e530:	68d2      	ldr	r2, [r2, #12]
 800e532:	6812      	ldr	r2, [r2, #0]
 800e534:	4610      	mov	r0, r2
 800e536:	4798      	blx	r3

  return;
 800e538:	bf00      	nop
}
 800e53a:	bd80      	pop	{r7, pc}
 800e53c:	20030000 	.word	0x20030000
 800e540:	20001650 	.word	0x20001650

0800e544 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b082      	sub	sp, #8
 800e548:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800e54a:	e00e      	b.n	800e56a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800e54c:	1d3b      	adds	r3, r7, #4
 800e54e:	4619      	mov	r1, r3
 800e550:	480b      	ldr	r0, [pc, #44]	; (800e580 <HW_IPCC_SYS_EvtNot+0x3c>)
 800e552:	f000 f9e0 	bl	800e916 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	4619      	mov	r1, r3
 800e55a:	2006      	movs	r0, #6
 800e55c:	f000 f8be 	bl	800e6dc <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800e560:	4b08      	ldr	r3, [pc, #32]	; (800e584 <HW_IPCC_SYS_EvtNot+0x40>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	687a      	ldr	r2, [r7, #4]
 800e566:	4610      	mov	r0, r2
 800e568:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800e56a:	4805      	ldr	r0, [pc, #20]	; (800e580 <HW_IPCC_SYS_EvtNot+0x3c>)
 800e56c:	f000 f944 	bl	800e7f8 <LST_is_empty>
 800e570:	4603      	mov	r3, r0
 800e572:	2b00      	cmp	r3, #0
 800e574:	d0ea      	beq.n	800e54c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800e576:	bf00      	nop
}
 800e578:	3708      	adds	r7, #8
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}
 800e57e:	bf00      	nop
 800e580:	200300d0 	.word	0x200300d0
 800e584:	20001654 	.word	0x20001654

0800e588 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b082      	sub	sp, #8
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800e590:	4817      	ldr	r0, [pc, #92]	; (800e5f0 <TL_MM_Init+0x68>)
 800e592:	f000 f921 	bl	800e7d8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800e596:	4817      	ldr	r0, [pc, #92]	; (800e5f4 <TL_MM_Init+0x6c>)
 800e598:	f000 f91e 	bl	800e7d8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800e59c:	4b16      	ldr	r3, [pc, #88]	; (800e5f8 <TL_MM_Init+0x70>)
 800e59e:	691b      	ldr	r3, [r3, #16]
 800e5a0:	4a16      	ldr	r2, [pc, #88]	; (800e5fc <TL_MM_Init+0x74>)
 800e5a2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800e5a4:	4b15      	ldr	r3, [pc, #84]	; (800e5fc <TL_MM_Init+0x74>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	687a      	ldr	r2, [r7, #4]
 800e5aa:	6892      	ldr	r2, [r2, #8]
 800e5ac:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800e5ae:	4b13      	ldr	r3, [pc, #76]	; (800e5fc <TL_MM_Init+0x74>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	687a      	ldr	r2, [r7, #4]
 800e5b4:	68d2      	ldr	r2, [r2, #12]
 800e5b6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800e5b8:	4b10      	ldr	r3, [pc, #64]	; (800e5fc <TL_MM_Init+0x74>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4a0c      	ldr	r2, [pc, #48]	; (800e5f0 <TL_MM_Init+0x68>)
 800e5be:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800e5c0:	4b0e      	ldr	r3, [pc, #56]	; (800e5fc <TL_MM_Init+0x74>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	687a      	ldr	r2, [r7, #4]
 800e5c6:	6812      	ldr	r2, [r2, #0]
 800e5c8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800e5ca:	4b0c      	ldr	r3, [pc, #48]	; (800e5fc <TL_MM_Init+0x74>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	687a      	ldr	r2, [r7, #4]
 800e5d0:	6852      	ldr	r2, [r2, #4]
 800e5d2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800e5d4:	4b09      	ldr	r3, [pc, #36]	; (800e5fc <TL_MM_Init+0x74>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	687a      	ldr	r2, [r7, #4]
 800e5da:	6912      	ldr	r2, [r2, #16]
 800e5dc:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800e5de:	4b07      	ldr	r3, [pc, #28]	; (800e5fc <TL_MM_Init+0x74>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	687a      	ldr	r2, [r7, #4]
 800e5e4:	6952      	ldr	r2, [r2, #20]
 800e5e6:	619a      	str	r2, [r3, #24]

  return;
 800e5e8:	bf00      	nop
}
 800e5ea:	3708      	adds	r7, #8
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}
 800e5f0:	200300b8 	.word	0x200300b8
 800e5f4:	20001640 	.word	0x20001640
 800e5f8:	20030000 	.word	0x20030000
 800e5fc:	20001658 	.word	0x20001658

0800e600 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b082      	sub	sp, #8
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800e608:	6879      	ldr	r1, [r7, #4]
 800e60a:	4807      	ldr	r0, [pc, #28]	; (800e628 <TL_MM_EvtDone+0x28>)
 800e60c:	f000 f93c 	bl	800e888 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800e610:	6879      	ldr	r1, [r7, #4]
 800e612:	2000      	movs	r0, #0
 800e614:	f000 f862 	bl	800e6dc <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800e618:	4804      	ldr	r0, [pc, #16]	; (800e62c <TL_MM_EvtDone+0x2c>)
 800e61a:	f001 fab1 	bl	800fb80 <HW_IPCC_MM_SendFreeBuf>

  return;
 800e61e:	bf00      	nop
}
 800e620:	3708      	adds	r7, #8
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}
 800e626:	bf00      	nop
 800e628:	20001640 	.word	0x20001640
 800e62c:	0800e631 	.word	0x0800e631

0800e630 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b082      	sub	sp, #8
 800e634:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800e636:	e00c      	b.n	800e652 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800e638:	1d3b      	adds	r3, r7, #4
 800e63a:	4619      	mov	r1, r3
 800e63c:	480a      	ldr	r0, [pc, #40]	; (800e668 <SendFreeBuf+0x38>)
 800e63e:	f000 f96a 	bl	800e916 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800e642:	4b0a      	ldr	r3, [pc, #40]	; (800e66c <SendFreeBuf+0x3c>)
 800e644:	691b      	ldr	r3, [r3, #16]
 800e646:	691b      	ldr	r3, [r3, #16]
 800e648:	687a      	ldr	r2, [r7, #4]
 800e64a:	4611      	mov	r1, r2
 800e64c:	4618      	mov	r0, r3
 800e64e:	f000 f91b 	bl	800e888 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800e652:	4805      	ldr	r0, [pc, #20]	; (800e668 <SendFreeBuf+0x38>)
 800e654:	f000 f8d0 	bl	800e7f8 <LST_is_empty>
 800e658:	4603      	mov	r3, r0
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d0ec      	beq.n	800e638 <SendFreeBuf+0x8>
  }

  return;
 800e65e:	bf00      	nop
}
 800e660:	3708      	adds	r7, #8
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}
 800e666:	bf00      	nop
 800e668:	20001640 	.word	0x20001640
 800e66c:	20030000 	.word	0x20030000

0800e670 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800e670:	b580      	push	{r7, lr}
 800e672:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800e674:	4805      	ldr	r0, [pc, #20]	; (800e68c <TL_TRACES_Init+0x1c>)
 800e676:	f000 f8af 	bl	800e7d8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800e67a:	4b05      	ldr	r3, [pc, #20]	; (800e690 <TL_TRACES_Init+0x20>)
 800e67c:	695b      	ldr	r3, [r3, #20]
 800e67e:	4a03      	ldr	r2, [pc, #12]	; (800e68c <TL_TRACES_Init+0x1c>)
 800e680:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800e682:	f001 fab3 	bl	800fbec <HW_IPCC_TRACES_Init>

  return;
 800e686:	bf00      	nop
}
 800e688:	bd80      	pop	{r7, pc}
 800e68a:	bf00      	nop
 800e68c:	200300c0 	.word	0x200300c0
 800e690:	20030000 	.word	0x20030000

0800e694 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b082      	sub	sp, #8
 800e698:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800e69a:	e008      	b.n	800e6ae <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800e69c:	1d3b      	adds	r3, r7, #4
 800e69e:	4619      	mov	r1, r3
 800e6a0:	4808      	ldr	r0, [pc, #32]	; (800e6c4 <HW_IPCC_TRACES_EvtNot+0x30>)
 800e6a2:	f000 f938 	bl	800e916 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f000 f80d 	bl	800e6c8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800e6ae:	4805      	ldr	r0, [pc, #20]	; (800e6c4 <HW_IPCC_TRACES_EvtNot+0x30>)
 800e6b0:	f000 f8a2 	bl	800e7f8 <LST_is_empty>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d0f0      	beq.n	800e69c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800e6ba:	bf00      	nop
}
 800e6bc:	3708      	adds	r7, #8
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}
 800e6c2:	bf00      	nop
 800e6c4:	200300c0 	.word	0x200300c0

0800e6c8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b083      	sub	sp, #12
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800e6d0:	bf00      	nop
 800e6d2:	370c      	adds	r7, #12
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr

0800e6dc <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800e6dc:	b480      	push	{r7}
 800e6de:	b085      	sub	sp, #20
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	6039      	str	r1, [r7, #0]
 800e6e6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800e6e8:	79fb      	ldrb	r3, [r7, #7]
 800e6ea:	2b06      	cmp	r3, #6
 800e6ec:	d845      	bhi.n	800e77a <OutputDbgTrace+0x9e>
 800e6ee:	a201      	add	r2, pc, #4	; (adr r2, 800e6f4 <OutputDbgTrace+0x18>)
 800e6f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6f4:	0800e711 	.word	0x0800e711
 800e6f8:	0800e735 	.word	0x0800e735
 800e6fc:	0800e73b 	.word	0x0800e73b
 800e700:	0800e74f 	.word	0x0800e74f
 800e704:	0800e75b 	.word	0x0800e75b
 800e708:	0800e761 	.word	0x0800e761
 800e70c:	0800e76f 	.word	0x0800e76f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	7a5b      	ldrb	r3, [r3, #9]
 800e718:	2bff      	cmp	r3, #255	; 0xff
 800e71a:	d005      	beq.n	800e728 <OutputDbgTrace+0x4c>
 800e71c:	2bff      	cmp	r3, #255	; 0xff
 800e71e:	dc05      	bgt.n	800e72c <OutputDbgTrace+0x50>
 800e720:	2b0e      	cmp	r3, #14
 800e722:	d005      	beq.n	800e730 <OutputDbgTrace+0x54>
 800e724:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800e726:	e001      	b.n	800e72c <OutputDbgTrace+0x50>
          break;
 800e728:	bf00      	nop
 800e72a:	e027      	b.n	800e77c <OutputDbgTrace+0xa0>
          break;
 800e72c:	bf00      	nop
 800e72e:	e025      	b.n	800e77c <OutputDbgTrace+0xa0>
          break;
 800e730:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800e732:	e023      	b.n	800e77c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800e738:	e020      	b.n	800e77c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	7a5b      	ldrb	r3, [r3, #9]
 800e742:	2b0e      	cmp	r3, #14
 800e744:	d001      	beq.n	800e74a <OutputDbgTrace+0x6e>
 800e746:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800e748:	e000      	b.n	800e74c <OutputDbgTrace+0x70>
          break;
 800e74a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e74c:	e016      	b.n	800e77c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	7a5b      	ldrb	r3, [r3, #9]
 800e756:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e758:	e010      	b.n	800e77c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800e75e:	e00d      	b.n	800e77c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	7a5b      	ldrb	r3, [r3, #9]
 800e768:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800e76a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e76c:	e006      	b.n	800e77c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	7a5b      	ldrb	r3, [r3, #9]
 800e776:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e778:	e000      	b.n	800e77c <OutputDbgTrace+0xa0>

    default:
      break;
 800e77a:	bf00      	nop
  }

  return;
 800e77c:	bf00      	nop
}
 800e77e:	3714      	adds	r7, #20
 800e780:	46bd      	mov	sp, r7
 800e782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e786:	4770      	bx	lr

0800e788 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800e788:	b480      	push	{r7}
 800e78a:	b085      	sub	sp, #20
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	4603      	mov	r3, r0
 800e790:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800e792:	4b0f      	ldr	r3, [pc, #60]	; (800e7d0 <OTP_Read+0x48>)
 800e794:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800e796:	e002      	b.n	800e79e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	3b08      	subs	r3, #8
 800e79c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	3307      	adds	r3, #7
 800e7a2:	781b      	ldrb	r3, [r3, #0]
 800e7a4:	79fa      	ldrb	r2, [r7, #7]
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d003      	beq.n	800e7b2 <OTP_Read+0x2a>
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	4a09      	ldr	r2, [pc, #36]	; (800e7d4 <OTP_Read+0x4c>)
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	d1f2      	bne.n	800e798 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	3307      	adds	r3, #7
 800e7b6:	781b      	ldrb	r3, [r3, #0]
 800e7b8:	79fa      	ldrb	r2, [r7, #7]
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	d001      	beq.n	800e7c2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3714      	adds	r7, #20
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ce:	4770      	bx	lr
 800e7d0:	1fff73f8 	.word	0x1fff73f8
 800e7d4:	1fff7000 	.word	0x1fff7000

0800e7d8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b083      	sub	sp, #12
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	687a      	ldr	r2, [r7, #4]
 800e7e4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	687a      	ldr	r2, [r7, #4]
 800e7ea:	605a      	str	r2, [r3, #4]
}
 800e7ec:	bf00      	nop
 800e7ee:	370c      	adds	r7, #12
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f6:	4770      	bx	lr

0800e7f8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b087      	sub	sp, #28
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e800:	f3ef 8310 	mrs	r3, PRIMASK
 800e804:	60fb      	str	r3, [r7, #12]
  return(result);
 800e806:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e808:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800e80a:	b672      	cpsid	i
}
 800e80c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	687a      	ldr	r2, [r7, #4]
 800e814:	429a      	cmp	r2, r3
 800e816:	d102      	bne.n	800e81e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800e818:	2301      	movs	r3, #1
 800e81a:	75fb      	strb	r3, [r7, #23]
 800e81c:	e001      	b.n	800e822 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800e81e:	2300      	movs	r3, #0
 800e820:	75fb      	strb	r3, [r7, #23]
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	f383 8810 	msr	PRIMASK, r3
}
 800e82c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800e82e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e830:	4618      	mov	r0, r3
 800e832:	371c      	adds	r7, #28
 800e834:	46bd      	mov	sp, r7
 800e836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83a:	4770      	bx	lr

0800e83c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800e83c:	b480      	push	{r7}
 800e83e:	b087      	sub	sp, #28
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
 800e844:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e846:	f3ef 8310 	mrs	r3, PRIMASK
 800e84a:	60fb      	str	r3, [r7, #12]
  return(result);
 800e84c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e84e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e850:	b672      	cpsid	i
}
 800e852:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681a      	ldr	r2, [r3, #0]
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	687a      	ldr	r2, [r7, #4]
 800e860:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	683a      	ldr	r2, [r7, #0]
 800e866:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	683a      	ldr	r2, [r7, #0]
 800e86e:	605a      	str	r2, [r3, #4]
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e874:	693b      	ldr	r3, [r7, #16]
 800e876:	f383 8810 	msr	PRIMASK, r3
}
 800e87a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e87c:	bf00      	nop
 800e87e:	371c      	adds	r7, #28
 800e880:	46bd      	mov	sp, r7
 800e882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e886:	4770      	bx	lr

0800e888 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800e888:	b480      	push	{r7}
 800e88a:	b087      	sub	sp, #28
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e892:	f3ef 8310 	mrs	r3, PRIMASK
 800e896:	60fb      	str	r3, [r7, #12]
  return(result);
 800e898:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e89a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e89c:	b672      	cpsid	i
}
 800e89e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	687a      	ldr	r2, [r7, #4]
 800e8a4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	685a      	ldr	r2, [r3, #4]
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	683a      	ldr	r2, [r7, #0]
 800e8b2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	685b      	ldr	r3, [r3, #4]
 800e8b8:	683a      	ldr	r2, [r7, #0]
 800e8ba:	601a      	str	r2, [r3, #0]
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e8c0:	693b      	ldr	r3, [r7, #16]
 800e8c2:	f383 8810 	msr	PRIMASK, r3
}
 800e8c6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e8c8:	bf00      	nop
 800e8ca:	371c      	adds	r7, #28
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d2:	4770      	bx	lr

0800e8d4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b087      	sub	sp, #28
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8dc:	f3ef 8310 	mrs	r3, PRIMASK
 800e8e0:	60fb      	str	r3, [r7, #12]
  return(result);
 800e8e2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e8e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e8e6:	b672      	cpsid	i
}
 800e8e8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	687a      	ldr	r2, [r7, #4]
 800e8f0:	6812      	ldr	r2, [r2, #0]
 800e8f2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	6852      	ldr	r2, [r2, #4]
 800e8fc:	605a      	str	r2, [r3, #4]
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e902:	693b      	ldr	r3, [r7, #16]
 800e904:	f383 8810 	msr	PRIMASK, r3
}
 800e908:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e90a:	bf00      	nop
 800e90c:	371c      	adds	r7, #28
 800e90e:	46bd      	mov	sp, r7
 800e910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e914:	4770      	bx	lr

0800e916 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800e916:	b580      	push	{r7, lr}
 800e918:	b086      	sub	sp, #24
 800e91a:	af00      	add	r7, sp, #0
 800e91c:	6078      	str	r0, [r7, #4]
 800e91e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e920:	f3ef 8310 	mrs	r3, PRIMASK
 800e924:	60fb      	str	r3, [r7, #12]
  return(result);
 800e926:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e928:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e92a:	b672      	cpsid	i
}
 800e92c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681a      	ldr	r2, [r3, #0]
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	4618      	mov	r0, r3
 800e93c:	f7ff ffca 	bl	800e8d4 <LST_remove_node>
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e944:	693b      	ldr	r3, [r7, #16]
 800e946:	f383 8810 	msr	PRIMASK, r3
}
 800e94a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e94c:	bf00      	nop
 800e94e:	3718      	adds	r7, #24
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}

0800e954 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800e954:	b480      	push	{r7}
 800e956:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800e958:	4b03      	ldr	r3, [pc, #12]	; (800e968 <LL_FLASH_GetUDN+0x14>)
 800e95a:	681b      	ldr	r3, [r3, #0]
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	46bd      	mov	sp, r7
 800e960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e964:	4770      	bx	lr
 800e966:	bf00      	nop
 800e968:	1fff7580 	.word	0x1fff7580

0800e96c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800e96c:	b480      	push	{r7}
 800e96e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800e970:	4b03      	ldr	r3, [pc, #12]	; (800e980 <LL_FLASH_GetDeviceID+0x14>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	b2db      	uxtb	r3, r3
}
 800e976:	4618      	mov	r0, r3
 800e978:	46bd      	mov	sp, r7
 800e97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97e:	4770      	bx	lr
 800e980:	1fff7584 	.word	0x1fff7584

0800e984 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800e984:	b480      	push	{r7}
 800e986:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800e988:	4b03      	ldr	r3, [pc, #12]	; (800e998 <LL_FLASH_GetSTCompanyID+0x14>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	0a1b      	lsrs	r3, r3, #8
}
 800e98e:	4618      	mov	r0, r3
 800e990:	46bd      	mov	sp, r7
 800e992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e996:	4770      	bx	lr
 800e998:	1fff7584 	.word	0x1fff7584

0800e99c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800e99c:	b5b0      	push	{r4, r5, r7, lr}
 800e99e:	b090      	sub	sp, #64	; 0x40
 800e9a0:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800e9a2:	2392      	movs	r3, #146	; 0x92
 800e9a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  UTIL_SEQ_RegTask(1 << CFG_TASK_SEND_NOTIF, UTIL_SEQ_RFU, myTask);
 800e9a8:	4a29      	ldr	r2, [pc, #164]	; (800ea50 <APP_BLE_Init+0xb4>)
 800e9aa:	2100      	movs	r1, #0
 800e9ac:	2008      	movs	r0, #8
 800e9ae:	f001 fa71 	bl	800fe94 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1 << CFG_TASK_SEND_NOTIF, CFG_SCH_PRIO_0);
 800e9b2:	2100      	movs	r1, #0
 800e9b4:	2008      	movs	r0, #8
 800e9b6:	f001 fa8f 	bl	800fed8 <UTIL_SEQ_SetTask>

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800e9ba:	4b26      	ldr	r3, [pc, #152]	; (800ea54 <APP_BLE_Init+0xb8>)
 800e9bc:	1d3c      	adds	r4, r7, #4
 800e9be:	461d      	mov	r5, r3
 800e9c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e9c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e9c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e9cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e9d0:	c403      	stmia	r4!, {r0, r1}
 800e9d2:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800e9d4:	f000 f906 	bl	800ebe4 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800e9d8:	2101      	movs	r1, #1
 800e9da:	2002      	movs	r0, #2
 800e9dc:	f001 f92e 	bl	800fc3c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800e9e0:	4a1d      	ldr	r2, [pc, #116]	; (800ea58 <APP_BLE_Init+0xbc>)
 800e9e2:	2100      	movs	r1, #0
 800e9e4:	2002      	movs	r0, #2
 800e9e6:	f001 fa55 	bl	800fe94 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800e9ea:	1d3b      	adds	r3, r7, #4
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f7ff f8bd 	bl	800db6c <SHCI_C2_BLE_Init>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800e9f8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d001      	beq.n	800ea04 <APP_BLE_Init+0x68>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800ea00:	f7f8 fa20 	bl	8006e44 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800ea04:	f000 f904 	bl	800ec10 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800ea08:	f7ff f80a 	bl	800da20 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ea0c:	4b13      	ldr	r3, [pc, #76]	; (800ea5c <APP_BLE_Init+0xc0>)
 800ea0e:	2200      	movs	r2, #0
 800ea10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800ea14:	4b11      	ldr	r3, [pc, #68]	; (800ea5c <APP_BLE_Init+0xc0>)
 800ea16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea1a:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800ea1c:	4a10      	ldr	r2, [pc, #64]	; (800ea60 <APP_BLE_Init+0xc4>)
 800ea1e:	2100      	movs	r1, #0
 800ea20:	2001      	movs	r0, #1
 800ea22:	f001 fa37 	bl	800fe94 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800ea26:	2006      	movs	r0, #6
 800ea28:	f7fe fe6e 	bl	800d708 <aci_hal_set_radio_activity_mask>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800ea32:	f000 fb79 	bl	800f128 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800ea36:	4b09      	ldr	r3, [pc, #36]	; (800ea5c <APP_BLE_Init+0xc0>)
 800ea38:	2200      	movs	r2, #0
 800ea3a:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800ea3c:	4b07      	ldr	r3, [pc, #28]	; (800ea5c <APP_BLE_Init+0xc0>)
 800ea3e:	2200      	movs	r2, #0
 800ea40:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800ea42:	2001      	movs	r0, #1
 800ea44:	f000 f998 	bl	800ed78 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800ea48:	bf00      	nop
}
 800ea4a:	3740      	adds	r7, #64	; 0x40
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bdb0      	pop	{r4, r5, r7, pc}
 800ea50:	0800ef49 	.word	0x0800ef49
 800ea54:	080146f0 	.word	0x080146f0
 800ea58:	0800dd89 	.word	0x0800dd89
 800ea5c:	20001664 	.word	0x20001664
 800ea60:	0800ee61 	.word	0x0800ee61

0800ea64 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b08a      	sub	sp, #40	; 0x28
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800ea6c:	2392      	movs	r3, #146	; 0x92
 800ea6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	3301      	adds	r3, #1
 800ea76:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800ea78:	6a3b      	ldr	r3, [r7, #32]
 800ea7a:	781b      	ldrb	r3, [r3, #0]
 800ea7c:	2bff      	cmp	r3, #255	; 0xff
 800ea7e:	d053      	beq.n	800eb28 <SVCCTL_App_Notification+0xc4>
 800ea80:	2bff      	cmp	r3, #255	; 0xff
 800ea82:	f300 80a1 	bgt.w	800ebc8 <SVCCTL_App_Notification+0x164>
 800ea86:	2b05      	cmp	r3, #5
 800ea88:	d002      	beq.n	800ea90 <SVCCTL_App_Notification+0x2c>
 800ea8a:	2b3e      	cmp	r3, #62	; 0x3e
 800ea8c:	d020      	beq.n	800ead0 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800ea8e:	e09b      	b.n	800ebc8 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800ea90:	6a3b      	ldr	r3, [r7, #32]
 800ea92:	3302      	adds	r3, #2
 800ea94:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ea9c:	b29a      	uxth	r2, r3
 800ea9e:	4b4e      	ldr	r3, [pc, #312]	; (800ebd8 <SVCCTL_App_Notification+0x174>)
 800eaa0:	8adb      	ldrh	r3, [r3, #22]
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	d106      	bne.n	800eab4 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800eaa6:	4b4c      	ldr	r3, [pc, #304]	; (800ebd8 <SVCCTL_App_Notification+0x174>)
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800eaac:	4b4a      	ldr	r3, [pc, #296]	; (800ebd8 <SVCCTL_App_Notification+0x174>)
 800eaae:	2200      	movs	r2, #0
 800eab0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800eab4:	2001      	movs	r0, #1
 800eab6:	f000 f95f 	bl	800ed78 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800eaba:	4b48      	ldr	r3, [pc, #288]	; (800ebdc <SVCCTL_App_Notification+0x178>)
 800eabc:	2201      	movs	r2, #1
 800eabe:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800eac0:	4b45      	ldr	r3, [pc, #276]	; (800ebd8 <SVCCTL_App_Notification+0x174>)
 800eac2:	8ada      	ldrh	r2, [r3, #22]
 800eac4:	4b45      	ldr	r3, [pc, #276]	; (800ebdc <SVCCTL_App_Notification+0x178>)
 800eac6:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800eac8:	4844      	ldr	r0, [pc, #272]	; (800ebdc <SVCCTL_App_Notification+0x178>)
 800eaca:	f000 fb19 	bl	800f100 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800eace:	e07e      	b.n	800ebce <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800ead0:	6a3b      	ldr	r3, [r7, #32]
 800ead2:	3302      	adds	r3, #2
 800ead4:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	781b      	ldrb	r3, [r3, #0]
 800eada:	2b01      	cmp	r3, #1
 800eadc:	d001      	beq.n	800eae2 <SVCCTL_App_Notification+0x7e>
 800eade:	2b03      	cmp	r3, #3
          break;
 800eae0:	e021      	b.n	800eb26 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	3301      	adds	r3, #1
 800eae6:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800eae8:	4b3b      	ldr	r3, [pc, #236]	; (800ebd8 <SVCCTL_App_Notification+0x174>)
 800eaea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eaee:	2b04      	cmp	r3, #4
 800eaf0:	d104      	bne.n	800eafc <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800eaf2:	4b39      	ldr	r3, [pc, #228]	; (800ebd8 <SVCCTL_App_Notification+0x174>)
 800eaf4:	2206      	movs	r2, #6
 800eaf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800eafa:	e003      	b.n	800eb04 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800eafc:	4b36      	ldr	r3, [pc, #216]	; (800ebd8 <SVCCTL_App_Notification+0x174>)
 800eafe:	2205      	movs	r2, #5
 800eb00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800eb0a:	b29a      	uxth	r2, r3
 800eb0c:	4b32      	ldr	r3, [pc, #200]	; (800ebd8 <SVCCTL_App_Notification+0x174>)
 800eb0e:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800eb10:	4b32      	ldr	r3, [pc, #200]	; (800ebdc <SVCCTL_App_Notification+0x178>)
 800eb12:	2200      	movs	r2, #0
 800eb14:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800eb16:	4b30      	ldr	r3, [pc, #192]	; (800ebd8 <SVCCTL_App_Notification+0x174>)
 800eb18:	8ada      	ldrh	r2, [r3, #22]
 800eb1a:	4b30      	ldr	r3, [pc, #192]	; (800ebdc <SVCCTL_App_Notification+0x178>)
 800eb1c:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800eb1e:	482f      	ldr	r0, [pc, #188]	; (800ebdc <SVCCTL_App_Notification+0x178>)
 800eb20:	f000 faee 	bl	800f100 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800eb24:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800eb26:	e052      	b.n	800ebce <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800eb28:	6a3b      	ldr	r3, [r7, #32]
 800eb2a:	3302      	adds	r3, #2
 800eb2c:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800eb2e:	69fb      	ldr	r3, [r7, #28]
 800eb30:	881b      	ldrh	r3, [r3, #0]
 800eb32:	b29b      	uxth	r3, r3
 800eb34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb38:	d040      	beq.n	800ebbc <SVCCTL_App_Notification+0x158>
 800eb3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb3e:	dc45      	bgt.n	800ebcc <SVCCTL_App_Notification+0x168>
 800eb40:	2b04      	cmp	r3, #4
 800eb42:	d03d      	beq.n	800ebc0 <SVCCTL_App_Notification+0x15c>
 800eb44:	2b04      	cmp	r3, #4
 800eb46:	db41      	blt.n	800ebcc <SVCCTL_App_Notification+0x168>
 800eb48:	f240 420a 	movw	r2, #1034	; 0x40a
 800eb4c:	4293      	cmp	r3, r2
 800eb4e:	dc3d      	bgt.n	800ebcc <SVCCTL_App_Notification+0x168>
 800eb50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb54:	dd3a      	ble.n	800ebcc <SVCCTL_App_Notification+0x168>
 800eb56:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800eb5a:	2b09      	cmp	r3, #9
 800eb5c:	d836      	bhi.n	800ebcc <SVCCTL_App_Notification+0x168>
 800eb5e:	a201      	add	r2, pc, #4	; (adr r2, 800eb64 <SVCCTL_App_Notification+0x100>)
 800eb60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb64:	0800ebb5 	.word	0x0800ebb5
 800eb68:	0800eb8d 	.word	0x0800eb8d
 800eb6c:	0800ebcd 	.word	0x0800ebcd
 800eb70:	0800ebcd 	.word	0x0800ebcd
 800eb74:	0800ebcd 	.word	0x0800ebcd
 800eb78:	0800ebcd 	.word	0x0800ebcd
 800eb7c:	0800ebc5 	.word	0x0800ebc5
 800eb80:	0800ebcd 	.word	0x0800ebcd
 800eb84:	0800eba1 	.word	0x0800eba1
 800eb88:	0800ebc5 	.word	0x0800ebc5
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800eb8c:	4b12      	ldr	r3, [pc, #72]	; (800ebd8 <SVCCTL_App_Notification+0x174>)
 800eb8e:	8adb      	ldrh	r3, [r3, #22]
 800eb90:	4913      	ldr	r1, [pc, #76]	; (800ebe0 <SVCCTL_App_Notification+0x17c>)
 800eb92:	4618      	mov	r0, r3
 800eb94:	f7fe f80f 	bl	800cbb6 <aci_gap_pass_key_resp>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800eb9e:	e012      	b.n	800ebc6 <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800eba0:	4b0d      	ldr	r3, [pc, #52]	; (800ebd8 <SVCCTL_App_Notification+0x174>)
 800eba2:	8adb      	ldrh	r3, [r3, #22]
 800eba4:	2101      	movs	r1, #1
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7fe f9af 	bl	800cf0a <aci_gap_numeric_comparison_value_confirm_yesno>
 800ebac:	4603      	mov	r3, r0
 800ebae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800ebb2:	e008      	b.n	800ebc6 <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800ebb4:	69fb      	ldr	r3, [r7, #28]
 800ebb6:	3302      	adds	r3, #2
 800ebb8:	61bb      	str	r3, [r7, #24]
          break;
 800ebba:	e004      	b.n	800ebc6 <SVCCTL_App_Notification+0x162>
          break;
 800ebbc:	bf00      	nop
 800ebbe:	e005      	b.n	800ebcc <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800ebc0:	bf00      	nop
 800ebc2:	e003      	b.n	800ebcc <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800ebc4:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800ebc6:	e001      	b.n	800ebcc <SVCCTL_App_Notification+0x168>
      break;
 800ebc8:	bf00      	nop
 800ebca:	e000      	b.n	800ebce <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800ebcc:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800ebce:	2301      	movs	r3, #1
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3728      	adds	r7, #40	; 0x28
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}
 800ebd8:	20001664 	.word	0x20001664
 800ebdc:	200016e8 	.word	0x200016e8
 800ebe0:	0001b207 	.word	0x0001b207

0800ebe4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b082      	sub	sp, #8
 800ebe8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800ebea:	4b06      	ldr	r3, [pc, #24]	; (800ec04 <Ble_Tl_Init+0x20>)
 800ebec:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800ebee:	4b06      	ldr	r3, [pc, #24]	; (800ec08 <Ble_Tl_Init+0x24>)
 800ebf0:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800ebf2:	463b      	mov	r3, r7
 800ebf4:	4619      	mov	r1, r3
 800ebf6:	4805      	ldr	r0, [pc, #20]	; (800ec0c <Ble_Tl_Init+0x28>)
 800ebf8:	f7ff f8aa 	bl	800dd50 <hci_init>

  return;
 800ebfc:	bf00      	nop
}
 800ebfe:	3708      	adds	r7, #8
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}
 800ec04:	200300d8 	.word	0x200300d8
 800ec08:	0800ef11 	.word	0x0800ef11
 800ec0c:	0800eed9 	.word	0x0800eed9

0800ec10 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800ec10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec12:	b08d      	sub	sp, #52	; 0x34
 800ec14:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800ec16:	2300      	movs	r3, #0
 800ec18:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ec1a:	2392      	movs	r3, #146	; 0x92
 800ec1c:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800ec1e:	f7fe fdc7 	bl	800d7b0 <hci_reset>
 800ec22:	4603      	mov	r3, r0
 800ec24:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800ec26:	f000 f8d7 	bl	800edd8 <BleGetBdAddress>
 800ec2a:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800ec2c:	693a      	ldr	r2, [r7, #16]
 800ec2e:	2106      	movs	r1, #6
 800ec30:	2000      	movs	r0, #0
 800ec32:	f7fe fc7d 	bl	800d530 <aci_hal_write_config_data>
 800ec36:	4603      	mov	r3, r0
 800ec38:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800ec3a:	4a4a      	ldr	r2, [pc, #296]	; (800ed64 <Ble_Hci_Gap_Gatt_Init+0x154>)
 800ec3c:	2110      	movs	r1, #16
 800ec3e:	2018      	movs	r0, #24
 800ec40:	f7fe fc76 	bl	800d530 <aci_hal_write_config_data>
 800ec44:	4603      	mov	r3, r0
 800ec46:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800ec48:	4a47      	ldr	r2, [pc, #284]	; (800ed68 <Ble_Hci_Gap_Gatt_Init+0x158>)
 800ec4a:	2110      	movs	r1, #16
 800ec4c:	2008      	movs	r0, #8
 800ec4e:	f7fe fc6f 	bl	800d530 <aci_hal_write_config_data>
 800ec52:	4603      	mov	r3, r0
 800ec54:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800ec56:	2118      	movs	r1, #24
 800ec58:	2001      	movs	r0, #1
 800ec5a:	f7fe fcee 	bl	800d63a <aci_hal_set_tx_power_level>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800ec62:	f7fe f9b9 	bl	800cfd8 <aci_gatt_init>
 800ec66:	4603      	mov	r3, r0
 800ec68:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800ec6e:	7bfb      	ldrb	r3, [r7, #15]
 800ec70:	f043 0301 	orr.w	r3, r3, #1
 800ec74:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800ec76:	7bfb      	ldrb	r3, [r7, #15]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d01f      	beq.n	800ecbc <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800ec7c:	4b3b      	ldr	r3, [pc, #236]	; (800ed6c <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800ec7e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800ec80:	1dba      	adds	r2, r7, #6
 800ec82:	7bf8      	ldrb	r0, [r7, #15]
 800ec84:	1cbb      	adds	r3, r7, #2
 800ec86:	9301      	str	r3, [sp, #4]
 800ec88:	1d3b      	adds	r3, r7, #4
 800ec8a:	9300      	str	r3, [sp, #0]
 800ec8c:	4613      	mov	r3, r2
 800ec8e:	2208      	movs	r2, #8
 800ec90:	2100      	movs	r1, #0
 800ec92:	f7fd fff7 	bl	800cc84 <aci_gap_init>
 800ec96:	4603      	mov	r3, r0
 800ec98:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800ec9a:	88fc      	ldrh	r4, [r7, #6]
 800ec9c:	88bd      	ldrh	r5, [r7, #4]
 800ec9e:	68b8      	ldr	r0, [r7, #8]
 800eca0:	f7f1 fabe 	bl	8000220 <strlen>
 800eca4:	4603      	mov	r3, r0
 800eca6:	b2da      	uxtb	r2, r3
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	9300      	str	r3, [sp, #0]
 800ecac:	4613      	mov	r3, r2
 800ecae:	2200      	movs	r2, #0
 800ecb0:	4629      	mov	r1, r5
 800ecb2:	4620      	mov	r0, r4
 800ecb4:	f7fe fb93 	bl	800d3de <aci_gatt_update_char_value>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800ecbc:	88f8      	ldrh	r0, [r7, #6]
 800ecbe:	8879      	ldrh	r1, [r7, #2]
 800ecc0:	463b      	mov	r3, r7
 800ecc2:	9300      	str	r3, [sp, #0]
 800ecc4:	2302      	movs	r3, #2
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	f7fe fb89 	bl	800d3de <aci_gatt_update_char_value>
 800eccc:	4603      	mov	r3, r0
 800ecce:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800ecd0:	2202      	movs	r2, #2
 800ecd2:	2102      	movs	r1, #2
 800ecd4:	2000      	movs	r0, #0
 800ecd6:	f7fe fd8f 	bl	800d7f8 <hci_le_set_default_phy>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800ecde:	4b24      	ldr	r3, [pc, #144]	; (800ed70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ece0:	2201      	movs	r2, #1
 800ece2:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800ece4:	4b22      	ldr	r3, [pc, #136]	; (800ed70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ece6:	781b      	ldrb	r3, [r3, #0]
 800ece8:	4618      	mov	r0, r3
 800ecea:	f7fd fe4c 	bl	800c986 <aci_gap_set_io_capability>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800ecf2:	4b1f      	ldr	r3, [pc, #124]	; (800ed70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ecf4:	2201      	movs	r2, #1
 800ecf6:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800ecf8:	4b1d      	ldr	r3, [pc, #116]	; (800ed70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ecfa:	2208      	movs	r2, #8
 800ecfc:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800ecfe:	4b1c      	ldr	r3, [pc, #112]	; (800ed70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ed00:	2210      	movs	r2, #16
 800ed02:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800ed04:	4b1a      	ldr	r3, [pc, #104]	; (800ed70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ed06:	2200      	movs	r2, #0
 800ed08:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800ed0a:	4b19      	ldr	r3, [pc, #100]	; (800ed70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ed0c:	4a19      	ldr	r2, [pc, #100]	; (800ed74 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800ed0e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800ed10:	4b17      	ldr	r3, [pc, #92]	; (800ed70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ed12:	2200      	movs	r2, #0
 800ed14:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800ed16:	4b16      	ldr	r3, [pc, #88]	; (800ed70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ed18:	789c      	ldrb	r4, [r3, #2]
 800ed1a:	4b15      	ldr	r3, [pc, #84]	; (800ed70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ed1c:	785d      	ldrb	r5, [r3, #1]
 800ed1e:	4b14      	ldr	r3, [pc, #80]	; (800ed70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ed20:	791b      	ldrb	r3, [r3, #4]
 800ed22:	4a13      	ldr	r2, [pc, #76]	; (800ed70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ed24:	7952      	ldrb	r2, [r2, #5]
 800ed26:	4912      	ldr	r1, [pc, #72]	; (800ed70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ed28:	78c9      	ldrb	r1, [r1, #3]
 800ed2a:	4811      	ldr	r0, [pc, #68]	; (800ed70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ed2c:	6880      	ldr	r0, [r0, #8]
 800ed2e:	2600      	movs	r6, #0
 800ed30:	9604      	str	r6, [sp, #16]
 800ed32:	9003      	str	r0, [sp, #12]
 800ed34:	9102      	str	r1, [sp, #8]
 800ed36:	9201      	str	r2, [sp, #4]
 800ed38:	9300      	str	r3, [sp, #0]
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	2201      	movs	r2, #1
 800ed3e:	4629      	mov	r1, r5
 800ed40:	4620      	mov	r0, r4
 800ed42:	f7fd fe74 	bl	800ca2e <aci_gap_set_authentication_requirement>
 800ed46:	4603      	mov	r3, r0
 800ed48:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800ed4a:	4b09      	ldr	r3, [pc, #36]	; (800ed70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ed4c:	789b      	ldrb	r3, [r3, #2]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d003      	beq.n	800ed5a <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800ed52:	f7fe f8b6 	bl	800cec2 <aci_gap_configure_filter_accept_list>
 800ed56:	4603      	mov	r3, r0
 800ed58:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800ed5a:	bf00      	nop
 800ed5c:	371c      	adds	r7, #28
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed62:	bf00      	nop
 800ed64:	08014938 	.word	0x08014938
 800ed68:	08014948 	.word	0x08014948
 800ed6c:	0801472c 	.word	0x0801472c
 800ed70:	20001664 	.word	0x20001664
 800ed74:	0001b207 	.word	0x0001b207

0800ed78 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b08c      	sub	sp, #48	; 0x30
 800ed7c:	af08      	add	r7, sp, #32
 800ed7e:	4603      	mov	r3, r0
 800ed80:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ed82:	2392      	movs	r3, #146	; 0x92
 800ed84:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800ed86:	4a12      	ldr	r2, [pc, #72]	; (800edd0 <Adv_Request+0x58>)
 800ed88:	79fb      	ldrb	r3, [r7, #7]
 800ed8a:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800ed8e:	2300      	movs	r3, #0
 800ed90:	9306      	str	r3, [sp, #24]
 800ed92:	2300      	movs	r3, #0
 800ed94:	9305      	str	r3, [sp, #20]
 800ed96:	2300      	movs	r3, #0
 800ed98:	9304      	str	r3, [sp, #16]
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	9303      	str	r3, [sp, #12]
 800ed9e:	2300      	movs	r3, #0
 800eda0:	9302      	str	r3, [sp, #8]
 800eda2:	2300      	movs	r3, #0
 800eda4:	9301      	str	r3, [sp, #4]
 800eda6:	2300      	movs	r3, #0
 800eda8:	9300      	str	r3, [sp, #0]
 800edaa:	2300      	movs	r3, #0
 800edac:	22a0      	movs	r2, #160	; 0xa0
 800edae:	2180      	movs	r1, #128	; 0x80
 800edb0:	2000      	movs	r0, #0
 800edb2:	f7fd fcee 	bl	800c792 <aci_gap_set_discoverable>
 800edb6:	4603      	mov	r3, r0
 800edb8:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800edba:	4906      	ldr	r1, [pc, #24]	; (800edd4 <Adv_Request+0x5c>)
 800edbc:	2009      	movs	r0, #9
 800edbe:	f7fe f80e 	bl	800cdde <aci_gap_update_adv_data>
 800edc2:	4603      	mov	r3, r0
 800edc4:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800edc6:	bf00      	nop
}
 800edc8:	3710      	adds	r7, #16
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}
 800edce:	bf00      	nop
 800edd0:	20001664 	.word	0x20001664
 800edd4:	20000160 	.word	0x20000160

0800edd8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b086      	sub	sp, #24
 800eddc:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800edde:	f7ff fdb9 	bl	800e954 <LL_FLASH_GetUDN>
 800ede2:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edea:	d023      	beq.n	800ee34 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800edec:	f7ff fdca 	bl	800e984 <LL_FLASH_GetSTCompanyID>
 800edf0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800edf2:	f7ff fdbb 	bl	800e96c <LL_FLASH_GetDeviceID>
 800edf6:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800edf8:	693b      	ldr	r3, [r7, #16]
 800edfa:	b2da      	uxtb	r2, r3
 800edfc:	4b16      	ldr	r3, [pc, #88]	; (800ee58 <BleGetBdAddress+0x80>)
 800edfe:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800ee00:	693b      	ldr	r3, [r7, #16]
 800ee02:	0a1b      	lsrs	r3, r3, #8
 800ee04:	b2da      	uxtb	r2, r3
 800ee06:	4b14      	ldr	r3, [pc, #80]	; (800ee58 <BleGetBdAddress+0x80>)
 800ee08:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	b2da      	uxtb	r2, r3
 800ee0e:	4b12      	ldr	r3, [pc, #72]	; (800ee58 <BleGetBdAddress+0x80>)
 800ee10:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	b2da      	uxtb	r2, r3
 800ee16:	4b10      	ldr	r3, [pc, #64]	; (800ee58 <BleGetBdAddress+0x80>)
 800ee18:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	0a1b      	lsrs	r3, r3, #8
 800ee1e:	b2da      	uxtb	r2, r3
 800ee20:	4b0d      	ldr	r3, [pc, #52]	; (800ee58 <BleGetBdAddress+0x80>)
 800ee22:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	0c1b      	lsrs	r3, r3, #16
 800ee28:	b2da      	uxtb	r2, r3
 800ee2a:	4b0b      	ldr	r3, [pc, #44]	; (800ee58 <BleGetBdAddress+0x80>)
 800ee2c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800ee2e:	4b0a      	ldr	r3, [pc, #40]	; (800ee58 <BleGetBdAddress+0x80>)
 800ee30:	617b      	str	r3, [r7, #20]
 800ee32:	e00b      	b.n	800ee4c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800ee34:	2000      	movs	r0, #0
 800ee36:	f7ff fca7 	bl	800e788 <OTP_Read>
 800ee3a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d002      	beq.n	800ee48 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	617b      	str	r3, [r7, #20]
 800ee46:	e001      	b.n	800ee4c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800ee48:	4b04      	ldr	r3, [pc, #16]	; (800ee5c <BleGetBdAddress+0x84>)
 800ee4a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800ee4c:	697b      	ldr	r3, [r7, #20]
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3718      	adds	r7, #24
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
 800ee56:	bf00      	nop
 800ee58:	2000165c 	.word	0x2000165c
 800ee5c:	08014930 	.word	0x08014930

0800ee60 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b082      	sub	sp, #8
 800ee64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800ee66:	4b0a      	ldr	r3, [pc, #40]	; (800ee90 <Adv_Cancel+0x30>)
 800ee68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ee6c:	2b05      	cmp	r3, #5
 800ee6e:	d00a      	beq.n	800ee86 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ee70:	2392      	movs	r3, #146	; 0x92
 800ee72:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800ee74:	f7fd fc69 	bl	800c74a <aci_gap_set_non_discoverable>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ee7c:	4b04      	ldr	r3, [pc, #16]	; (800ee90 <Adv_Cancel+0x30>)
 800ee7e:	2200      	movs	r2, #0
 800ee80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800ee84:	bf00      	nop
 800ee86:	bf00      	nop
}
 800ee88:	3708      	adds	r7, #8
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	20001664 	.word	0x20001664

0800ee94 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b082      	sub	sp, #8
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800ee9c:	2100      	movs	r1, #0
 800ee9e:	2002      	movs	r0, #2
 800eea0:	f001 f81a 	bl	800fed8 <UTIL_SEQ_SetTask>

  return;
 800eea4:	bf00      	nop
}
 800eea6:	3708      	adds	r7, #8
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}

0800eeac <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b082      	sub	sp, #8
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800eeb4:	2001      	movs	r0, #1
 800eeb6:	f001 f87b 	bl	800ffb0 <UTIL_SEQ_SetEvt>

  return;
 800eeba:	bf00      	nop
}
 800eebc:	3708      	adds	r7, #8
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}

0800eec2 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800eec2:	b580      	push	{r7, lr}
 800eec4:	b082      	sub	sp, #8
 800eec6:	af00      	add	r7, sp, #0
 800eec8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800eeca:	2001      	movs	r0, #1
 800eecc:	f001 f890 	bl	800fff0 <UTIL_SEQ_WaitEvt>

  return;
 800eed0:	bf00      	nop
}
 800eed2:	3708      	adds	r7, #8
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b084      	sub	sp, #16
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	685b      	ldr	r3, [r3, #4]
 800eee8:	3308      	adds	r3, #8
 800eeea:	4618      	mov	r0, r3
 800eeec:	f7fe fdea 	bl	800dac4 <SVCCTL_UserEvtRx>
 800eef0:	4603      	mov	r3, r0
 800eef2:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800eef4:	7afb      	ldrb	r3, [r7, #11]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d003      	beq.n	800ef02 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	2201      	movs	r2, #1
 800eefe:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800ef00:	e003      	b.n	800ef0a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	2200      	movs	r2, #0
 800ef06:	701a      	strb	r2, [r3, #0]
  return;
 800ef08:	bf00      	nop
}
 800ef0a:	3710      	adds	r7, #16
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}

0800ef10 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b084      	sub	sp, #16
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	4603      	mov	r3, r0
 800ef18:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800ef1a:	79fb      	ldrb	r3, [r7, #7]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d002      	beq.n	800ef26 <BLE_StatusNot+0x16>
 800ef20:	2b01      	cmp	r3, #1
 800ef22:	d006      	beq.n	800ef32 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800ef24:	e00b      	b.n	800ef3e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800ef26:	2303      	movs	r3, #3
 800ef28:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800ef2a:	68f8      	ldr	r0, [r7, #12]
 800ef2c:	f001 f800 	bl	800ff30 <UTIL_SEQ_PauseTask>
      break;
 800ef30:	e005      	b.n	800ef3e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800ef32:	2303      	movs	r3, #3
 800ef34:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800ef36:	68f8      	ldr	r0, [r7, #12]
 800ef38:	f001 f81a 	bl	800ff70 <UTIL_SEQ_ResumeTask>
      break;
 800ef3c:	bf00      	nop
  }

  return;
 800ef3e:	bf00      	nop
}
 800ef40:	3710      	adds	r7, #16
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
	...

0800ef48 <myTask>:
static void Custom_Tdata_Update_Char(void);
static void Custom_Tdata_Send_Notification(void);

/* USER CODE BEGIN PFP */
void myTask(void)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b082      	sub	sp, #8
 800ef4c:	af00      	add	r7, sp, #0
    static uint32_t charValue2 = 0;
    static uint32_t charValue3 = 0;
    static uint32_t charValue4 = 0;
    static uint32_t charValue5 = 0;

    uint32_t currentTick = HAL_GetTick();
 800ef4e:	f7f8 fbbd 	bl	80076cc <HAL_GetTick>
 800ef52:	6078      	str	r0, [r7, #4]

    if (currentTick - lastNotificationTime >= NOTIFICATION_INTERVAL_MS) {
 800ef54:	4b4c      	ldr	r3, [pc, #304]	; (800f088 <myTask+0x140>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	687a      	ldr	r2, [r7, #4]
 800ef5a:	1ad3      	subs	r3, r2, r3
 800ef5c:	2b09      	cmp	r3, #9
 800ef5e:	f240 808b 	bls.w	800f078 <myTask+0x130>
        if (UpdateCharData[0] == 180) {
 800ef62:	4b4a      	ldr	r3, [pc, #296]	; (800f08c <myTask+0x144>)
 800ef64:	781b      	ldrb	r3, [r3, #0]
 800ef66:	2bb4      	cmp	r3, #180	; 0xb4
 800ef68:	d103      	bne.n	800ef72 <myTask+0x2a>
            UpdateCharData[0] = 0;
 800ef6a:	4b48      	ldr	r3, [pc, #288]	; (800f08c <myTask+0x144>)
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	701a      	strb	r2, [r3, #0]
 800ef70:	e005      	b.n	800ef7e <myTask+0x36>
        } else {
            UpdateCharData[0] += 5;
 800ef72:	4b46      	ldr	r3, [pc, #280]	; (800f08c <myTask+0x144>)
 800ef74:	781b      	ldrb	r3, [r3, #0]
 800ef76:	3305      	adds	r3, #5
 800ef78:	b2da      	uxtb	r2, r3
 800ef7a:	4b44      	ldr	r3, [pc, #272]	; (800f08c <myTask+0x144>)
 800ef7c:	701a      	strb	r2, [r3, #0]
        }
        Custom_F1_Update_Char();
 800ef7e:	f000 f8db 	bl	800f138 <Custom_F1_Update_Char>

        charValue2 += 1;
 800ef82:	4b43      	ldr	r3, [pc, #268]	; (800f090 <myTask+0x148>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	3301      	adds	r3, #1
 800ef88:	4a41      	ldr	r2, [pc, #260]	; (800f090 <myTask+0x148>)
 800ef8a:	6013      	str	r3, [r2, #0]
        UpdateCharData2[0] = (charValue2 >> 24) & 0xFF;
 800ef8c:	4b40      	ldr	r3, [pc, #256]	; (800f090 <myTask+0x148>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	0e1b      	lsrs	r3, r3, #24
 800ef92:	b2da      	uxtb	r2, r3
 800ef94:	4b3f      	ldr	r3, [pc, #252]	; (800f094 <myTask+0x14c>)
 800ef96:	701a      	strb	r2, [r3, #0]
        UpdateCharData2[1] = (charValue2 >> 16) & 0xFF;
 800ef98:	4b3d      	ldr	r3, [pc, #244]	; (800f090 <myTask+0x148>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	0c1b      	lsrs	r3, r3, #16
 800ef9e:	b2da      	uxtb	r2, r3
 800efa0:	4b3c      	ldr	r3, [pc, #240]	; (800f094 <myTask+0x14c>)
 800efa2:	705a      	strb	r2, [r3, #1]
        UpdateCharData2[2] = (charValue2 >> 8) & 0xFF;
 800efa4:	4b3a      	ldr	r3, [pc, #232]	; (800f090 <myTask+0x148>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	0a1b      	lsrs	r3, r3, #8
 800efaa:	b2da      	uxtb	r2, r3
 800efac:	4b39      	ldr	r3, [pc, #228]	; (800f094 <myTask+0x14c>)
 800efae:	709a      	strb	r2, [r3, #2]
        UpdateCharData2[3] = charValue2 & 0xFF;
 800efb0:	4b37      	ldr	r3, [pc, #220]	; (800f090 <myTask+0x148>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	b2da      	uxtb	r2, r3
 800efb6:	4b37      	ldr	r3, [pc, #220]	; (800f094 <myTask+0x14c>)
 800efb8:	70da      	strb	r2, [r3, #3]
        Custom_F2_Update_Char();
 800efba:	f000 f8d1 	bl	800f160 <Custom_F2_Update_Char>

        charValue3 += 2;
 800efbe:	4b36      	ldr	r3, [pc, #216]	; (800f098 <myTask+0x150>)
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	3302      	adds	r3, #2
 800efc4:	4a34      	ldr	r2, [pc, #208]	; (800f098 <myTask+0x150>)
 800efc6:	6013      	str	r3, [r2, #0]
        UpdateCharData3[0] = (charValue3 >> 24) & 0xFF;
 800efc8:	4b33      	ldr	r3, [pc, #204]	; (800f098 <myTask+0x150>)
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	0e1b      	lsrs	r3, r3, #24
 800efce:	b2da      	uxtb	r2, r3
 800efd0:	4b32      	ldr	r3, [pc, #200]	; (800f09c <myTask+0x154>)
 800efd2:	701a      	strb	r2, [r3, #0]
        UpdateCharData3[1] = (charValue3 >> 16) & 0xFF;
 800efd4:	4b30      	ldr	r3, [pc, #192]	; (800f098 <myTask+0x150>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	0c1b      	lsrs	r3, r3, #16
 800efda:	b2da      	uxtb	r2, r3
 800efdc:	4b2f      	ldr	r3, [pc, #188]	; (800f09c <myTask+0x154>)
 800efde:	705a      	strb	r2, [r3, #1]
        UpdateCharData3[2] = (charValue3 >> 8) & 0xFF;
 800efe0:	4b2d      	ldr	r3, [pc, #180]	; (800f098 <myTask+0x150>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	0a1b      	lsrs	r3, r3, #8
 800efe6:	b2da      	uxtb	r2, r3
 800efe8:	4b2c      	ldr	r3, [pc, #176]	; (800f09c <myTask+0x154>)
 800efea:	709a      	strb	r2, [r3, #2]
        UpdateCharData3[3] = charValue3 & 0xFF;
 800efec:	4b2a      	ldr	r3, [pc, #168]	; (800f098 <myTask+0x150>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	b2da      	uxtb	r2, r3
 800eff2:	4b2a      	ldr	r3, [pc, #168]	; (800f09c <myTask+0x154>)
 800eff4:	70da      	strb	r2, [r3, #3]
        Custom_F3_Update_Char();
 800eff6:	f000 f8c7 	bl	800f188 <Custom_F3_Update_Char>

        charValue4 += 3;
 800effa:	4b29      	ldr	r3, [pc, #164]	; (800f0a0 <myTask+0x158>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	3303      	adds	r3, #3
 800f000:	4a27      	ldr	r2, [pc, #156]	; (800f0a0 <myTask+0x158>)
 800f002:	6013      	str	r3, [r2, #0]
        UpdateCharData4[0] = (charValue4 >> 24) & 0xFF;
 800f004:	4b26      	ldr	r3, [pc, #152]	; (800f0a0 <myTask+0x158>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	0e1b      	lsrs	r3, r3, #24
 800f00a:	b2da      	uxtb	r2, r3
 800f00c:	4b25      	ldr	r3, [pc, #148]	; (800f0a4 <myTask+0x15c>)
 800f00e:	701a      	strb	r2, [r3, #0]
        UpdateCharData4[1] = (charValue4 >> 16) & 0xFF;
 800f010:	4b23      	ldr	r3, [pc, #140]	; (800f0a0 <myTask+0x158>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	0c1b      	lsrs	r3, r3, #16
 800f016:	b2da      	uxtb	r2, r3
 800f018:	4b22      	ldr	r3, [pc, #136]	; (800f0a4 <myTask+0x15c>)
 800f01a:	705a      	strb	r2, [r3, #1]
        UpdateCharData4[2] = (charValue4 >> 8) & 0xFF;
 800f01c:	4b20      	ldr	r3, [pc, #128]	; (800f0a0 <myTask+0x158>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	0a1b      	lsrs	r3, r3, #8
 800f022:	b2da      	uxtb	r2, r3
 800f024:	4b1f      	ldr	r3, [pc, #124]	; (800f0a4 <myTask+0x15c>)
 800f026:	709a      	strb	r2, [r3, #2]
        UpdateCharData4[3] = charValue4 & 0xFF;
 800f028:	4b1d      	ldr	r3, [pc, #116]	; (800f0a0 <myTask+0x158>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	b2da      	uxtb	r2, r3
 800f02e:	4b1d      	ldr	r3, [pc, #116]	; (800f0a4 <myTask+0x15c>)
 800f030:	70da      	strb	r2, [r3, #3]
        Custom_F4_Update_Char();
 800f032:	f000 f8bd 	bl	800f1b0 <Custom_F4_Update_Char>

        charValue5 += 4;
 800f036:	4b1c      	ldr	r3, [pc, #112]	; (800f0a8 <myTask+0x160>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	3304      	adds	r3, #4
 800f03c:	4a1a      	ldr	r2, [pc, #104]	; (800f0a8 <myTask+0x160>)
 800f03e:	6013      	str	r3, [r2, #0]
        UpdateCharData5[0] = (charValue5 >> 24) & 0xFF;
 800f040:	4b19      	ldr	r3, [pc, #100]	; (800f0a8 <myTask+0x160>)
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	0e1b      	lsrs	r3, r3, #24
 800f046:	b2da      	uxtb	r2, r3
 800f048:	4b18      	ldr	r3, [pc, #96]	; (800f0ac <myTask+0x164>)
 800f04a:	701a      	strb	r2, [r3, #0]
        UpdateCharData5[1] = (charValue5 >> 16) & 0xFF;
 800f04c:	4b16      	ldr	r3, [pc, #88]	; (800f0a8 <myTask+0x160>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	0c1b      	lsrs	r3, r3, #16
 800f052:	b2da      	uxtb	r2, r3
 800f054:	4b15      	ldr	r3, [pc, #84]	; (800f0ac <myTask+0x164>)
 800f056:	705a      	strb	r2, [r3, #1]
        UpdateCharData5[2] = (charValue5 >> 8) & 0xFF;
 800f058:	4b13      	ldr	r3, [pc, #76]	; (800f0a8 <myTask+0x160>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	0a1b      	lsrs	r3, r3, #8
 800f05e:	b2da      	uxtb	r2, r3
 800f060:	4b12      	ldr	r3, [pc, #72]	; (800f0ac <myTask+0x164>)
 800f062:	709a      	strb	r2, [r3, #2]
        UpdateCharData5[3] = charValue5 & 0xFF;
 800f064:	4b10      	ldr	r3, [pc, #64]	; (800f0a8 <myTask+0x160>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	b2da      	uxtb	r2, r3
 800f06a:	4b10      	ldr	r3, [pc, #64]	; (800f0ac <myTask+0x164>)
 800f06c:	70da      	strb	r2, [r3, #3]
        Custom_Tdata_Update_Char();
 800f06e:	f000 f8b3 	bl	800f1d8 <Custom_Tdata_Update_Char>

        lastNotificationTime = currentTick;
 800f072:	4a05      	ldr	r2, [pc, #20]	; (800f088 <myTask+0x140>)
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6013      	str	r3, [r2, #0]
    }

    UTIL_SEQ_SetTask(1<<CFG_TASK_SEND_NOTIF, CFG_SCH_PRIO_0);
 800f078:	2100      	movs	r1, #0
 800f07a:	2008      	movs	r0, #8
 800f07c:	f000 ff2c 	bl	800fed8 <UTIL_SEQ_SetTask>
}
 800f080:	bf00      	nop
 800f082:	3708      	adds	r7, #8
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}
 800f088:	200017e4 	.word	0x200017e4
 800f08c:	200016ec 	.word	0x200016ec
 800f090:	200017f8 	.word	0x200017f8
 800f094:	200017e8 	.word	0x200017e8
 800f098:	200017fc 	.word	0x200017fc
 800f09c:	200017ec 	.word	0x200017ec
 800f0a0:	20001800 	.word	0x20001800
 800f0a4:	200017f0 	.word	0x200017f0
 800f0a8:	20001804 	.word	0x20001804
 800f0ac:	200017f4 	.word	0x200017f4

0800f0b0 <Custom_STM_App_Notification>:
 */
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800f0b0:	b480      	push	{r7}
 800f0b2:	b083      	sub	sp, #12
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	781b      	ldrb	r3, [r3, #0]
 800f0bc:	2b09      	cmp	r3, #9
 800f0be:	d817      	bhi.n	800f0f0 <Custom_STM_App_Notification+0x40>
 800f0c0:	a201      	add	r2, pc, #4	; (adr r2, 800f0c8 <Custom_STM_App_Notification+0x18>)
 800f0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0c6:	bf00      	nop
 800f0c8:	0800f0f1 	.word	0x0800f0f1
 800f0cc:	0800f0f1 	.word	0x0800f0f1
 800f0d0:	0800f0f1 	.word	0x0800f0f1
 800f0d4:	0800f0f1 	.word	0x0800f0f1
 800f0d8:	0800f0f1 	.word	0x0800f0f1
 800f0dc:	0800f0f1 	.word	0x0800f0f1
 800f0e0:	0800f0f1 	.word	0x0800f0f1
 800f0e4:	0800f0f1 	.word	0x0800f0f1
 800f0e8:	0800f0f1 	.word	0x0800f0f1
 800f0ec:	0800f0f1 	.word	0x0800f0f1

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800f0f0:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800f0f2:	bf00      	nop
}
 800f0f4:	370c      	adds	r7, #12
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fc:	4770      	bx	lr
 800f0fe:	bf00      	nop

0800f100 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800f100:	b480      	push	{r7}
 800f102:	b083      	sub	sp, #12
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	781b      	ldrb	r3, [r3, #0]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d002      	beq.n	800f116 <Custom_APP_Notification+0x16>
 800f110:	2b01      	cmp	r3, #1
 800f112:	d002      	beq.n	800f11a <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800f114:	e002      	b.n	800f11c <Custom_APP_Notification+0x1c>
      break;
 800f116:	bf00      	nop
 800f118:	e000      	b.n	800f11c <Custom_APP_Notification+0x1c>
      break;
 800f11a:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800f11c:	bf00      	nop
}
 800f11e:	370c      	adds	r7, #12
 800f120:	46bd      	mov	sp, r7
 800f122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f126:	4770      	bx	lr

0800f128 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800f128:	b480      	push	{r7}
 800f12a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800f12c:	bf00      	nop
}
 800f12e:	46bd      	mov	sp, r7
 800f130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f134:	4770      	bx	lr
	...

0800f138 <Custom_F1_Update_Char>:
 *
 *************************************************************/

/* handData */
void Custom_F1_Update_Char(void) /* Property Read */
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b082      	sub	sp, #8
 800f13c:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800f13e:	2300      	movs	r3, #0
 800f140:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN F1_UC_1*/

  /* USER CODE END F1_UC_1*/

  if (updateflag != 0)
 800f142:	79fb      	ldrb	r3, [r7, #7]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d004      	beq.n	800f152 <Custom_F1_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_F1, (uint8_t *)UpdateCharData);
 800f148:	4904      	ldr	r1, [pc, #16]	; (800f15c <Custom_F1_Update_Char+0x24>)
 800f14a:	2000      	movs	r0, #0
 800f14c:	f000 faa6 	bl	800f69c <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN F1_UC_Last*/

  /* USER CODE END F1_UC_Last*/
  return;
 800f150:	bf00      	nop
 800f152:	bf00      	nop
}
 800f154:	3708      	adds	r7, #8
 800f156:	46bd      	mov	sp, r7
 800f158:	bd80      	pop	{r7, pc}
 800f15a:	bf00      	nop
 800f15c:	200016ec 	.word	0x200016ec

0800f160 <Custom_F2_Update_Char>:

  return;
}

void Custom_F2_Update_Char(void) /* Property Read */
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b082      	sub	sp, #8
 800f164:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800f166:	2300      	movs	r3, #0
 800f168:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN F2_UC_1*/

  /* USER CODE END F2_UC_1*/

  if (updateflag != 0)
 800f16a:	79fb      	ldrb	r3, [r7, #7]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d004      	beq.n	800f17a <Custom_F2_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_F2, (uint8_t *)UpdateCharData);
 800f170:	4904      	ldr	r1, [pc, #16]	; (800f184 <Custom_F2_Update_Char+0x24>)
 800f172:	2001      	movs	r0, #1
 800f174:	f000 fa92 	bl	800f69c <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN F2_UC_Last*/

  /* USER CODE END F2_UC_Last*/
  return;
 800f178:	bf00      	nop
 800f17a:	bf00      	nop
}
 800f17c:	3708      	adds	r7, #8
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}
 800f182:	bf00      	nop
 800f184:	200016ec 	.word	0x200016ec

0800f188 <Custom_F3_Update_Char>:

  return;
}

void Custom_F3_Update_Char(void) /* Property Read */
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b082      	sub	sp, #8
 800f18c:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800f18e:	2300      	movs	r3, #0
 800f190:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN F3_UC_1*/

  /* USER CODE END F3_UC_1*/

  if (updateflag != 0)
 800f192:	79fb      	ldrb	r3, [r7, #7]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d004      	beq.n	800f1a2 <Custom_F3_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_F3, (uint8_t *)UpdateCharData);
 800f198:	4904      	ldr	r1, [pc, #16]	; (800f1ac <Custom_F3_Update_Char+0x24>)
 800f19a:	2002      	movs	r0, #2
 800f19c:	f000 fa7e 	bl	800f69c <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN F3_UC_Last*/

  /* USER CODE END F3_UC_Last*/
  return;
 800f1a0:	bf00      	nop
 800f1a2:	bf00      	nop
}
 800f1a4:	3708      	adds	r7, #8
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	200016ec 	.word	0x200016ec

0800f1b0 <Custom_F4_Update_Char>:

  return;
}

void Custom_F4_Update_Char(void) /* Property Read */
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b082      	sub	sp, #8
 800f1b4:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN F4_UC_1*/

  /* USER CODE END F4_UC_1*/

  if (updateflag != 0)
 800f1ba:	79fb      	ldrb	r3, [r7, #7]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d004      	beq.n	800f1ca <Custom_F4_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_F4, (uint8_t *)UpdateCharData);
 800f1c0:	4904      	ldr	r1, [pc, #16]	; (800f1d4 <Custom_F4_Update_Char+0x24>)
 800f1c2:	2003      	movs	r0, #3
 800f1c4:	f000 fa6a 	bl	800f69c <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN F4_UC_Last*/

  /* USER CODE END F4_UC_Last*/
  return;
 800f1c8:	bf00      	nop
 800f1ca:	bf00      	nop
}
 800f1cc:	3708      	adds	r7, #8
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}
 800f1d2:	bf00      	nop
 800f1d4:	200016ec 	.word	0x200016ec

0800f1d8 <Custom_Tdata_Update_Char>:

  return;
}

void Custom_Tdata_Update_Char(void) /* Property Read */
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b082      	sub	sp, #8
 800f1dc:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Tdata_UC_1*/

  /* USER CODE END Tdata_UC_1*/

  if (updateflag != 0)
 800f1e2:	79fb      	ldrb	r3, [r7, #7]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d004      	beq.n	800f1f2 <Custom_Tdata_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_TDATA, (uint8_t *)UpdateCharData);
 800f1e8:	4904      	ldr	r1, [pc, #16]	; (800f1fc <Custom_Tdata_Update_Char+0x24>)
 800f1ea:	2004      	movs	r0, #4
 800f1ec:	f000 fa56 	bl	800f69c <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Tdata_UC_Last*/

  /* USER CODE END Tdata_UC_Last*/
  return;
 800f1f0:	bf00      	nop
 800f1f2:	bf00      	nop
}
 800f1f4:	3708      	adds	r7, #8
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}
 800f1fa:	bf00      	nop
 800f1fc:	200016ec 	.word	0x200016ec

0800f200 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b08a      	sub	sp, #40	; 0x28
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800f208:	2300      	movs	r3, #0
 800f20a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	3301      	adds	r3, #1
 800f212:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800f214:	6a3b      	ldr	r3, [r7, #32]
 800f216:	781b      	ldrb	r3, [r3, #0]
 800f218:	2bff      	cmp	r3, #255	; 0xff
 800f21a:	f040 80d1 	bne.w	800f3c0 <Custom_STM_Event_Handler+0x1c0>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800f21e:	6a3b      	ldr	r3, [r7, #32]
 800f220:	3302      	adds	r3, #2
 800f222:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 800f224:	69fb      	ldr	r3, [r7, #28]
 800f226:	881b      	ldrh	r3, [r3, #0]
 800f228:	b29b      	uxth	r3, r3
 800f22a:	f640 4214 	movw	r2, #3092	; 0xc14
 800f22e:	4293      	cmp	r3, r2
 800f230:	f000 80c0 	beq.w	800f3b4 <Custom_STM_Event_Handler+0x1b4>
 800f234:	f640 4214 	movw	r2, #3092	; 0xc14
 800f238:	4293      	cmp	r3, r2
 800f23a:	f300 80bd 	bgt.w	800f3b8 <Custom_STM_Event_Handler+0x1b8>
 800f23e:	f640 4201 	movw	r2, #3073	; 0xc01
 800f242:	4293      	cmp	r3, r2
 800f244:	d003      	beq.n	800f24e <Custom_STM_Event_Handler+0x4e>
 800f246:	f640 4213 	movw	r2, #3091	; 0xc13
 800f24a:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800f24c:	e0b7      	b.n	800f3be <Custom_STM_Event_Handler+0x1be>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800f24e:	69fb      	ldr	r3, [r7, #28]
 800f250:	3302      	adds	r3, #2
 800f252:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomF1Hdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800f254:	69bb      	ldr	r3, [r7, #24]
 800f256:	885b      	ldrh	r3, [r3, #2]
 800f258:	b29b      	uxth	r3, r3
 800f25a:	461a      	mov	r2, r3
 800f25c:	4b5c      	ldr	r3, [pc, #368]	; (800f3d0 <Custom_STM_Event_Handler+0x1d0>)
 800f25e:	885b      	ldrh	r3, [r3, #2]
 800f260:	3302      	adds	r3, #2
 800f262:	429a      	cmp	r2, r3
 800f264:	d119      	bne.n	800f29a <Custom_STM_Event_Handler+0x9a>
            return_value = SVCCTL_EvtAckFlowEnable;
 800f266:	2301      	movs	r3, #1
 800f268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 800f26c:	69bb      	ldr	r3, [r7, #24]
 800f26e:	7a1b      	ldrb	r3, [r3, #8]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d002      	beq.n	800f27a <Custom_STM_Event_Handler+0x7a>
 800f274:	2b01      	cmp	r3, #1
 800f276:	d008      	beq.n	800f28a <Custom_STM_Event_Handler+0x8a>
              break;
 800f278:	e09b      	b.n	800f3b2 <Custom_STM_Event_Handler+0x1b2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_F1_NOTIFY_DISABLED_EVT;
 800f27a:	2301      	movs	r3, #1
 800f27c:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800f27e:	f107 0308 	add.w	r3, r7, #8
 800f282:	4618      	mov	r0, r3
 800f284:	f7ff ff14 	bl	800f0b0 <Custom_STM_App_Notification>
                break;
 800f288:	e093      	b.n	800f3b2 <Custom_STM_Event_Handler+0x1b2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_F1_NOTIFY_ENABLED_EVT;
 800f28a:	2300      	movs	r3, #0
 800f28c:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800f28e:	f107 0308 	add.w	r3, r7, #8
 800f292:	4618      	mov	r0, r3
 800f294:	f7ff ff0c 	bl	800f0b0 <Custom_STM_App_Notification>
                break;
 800f298:	e08b      	b.n	800f3b2 <Custom_STM_Event_Handler+0x1b2>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomF2Hdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800f29a:	69bb      	ldr	r3, [r7, #24]
 800f29c:	885b      	ldrh	r3, [r3, #2]
 800f29e:	b29b      	uxth	r3, r3
 800f2a0:	461a      	mov	r2, r3
 800f2a2:	4b4b      	ldr	r3, [pc, #300]	; (800f3d0 <Custom_STM_Event_Handler+0x1d0>)
 800f2a4:	889b      	ldrh	r3, [r3, #4]
 800f2a6:	3302      	adds	r3, #2
 800f2a8:	429a      	cmp	r2, r3
 800f2aa:	d119      	bne.n	800f2e0 <Custom_STM_Event_Handler+0xe0>
            return_value = SVCCTL_EvtAckFlowEnable;
 800f2ac:	2301      	movs	r3, #1
 800f2ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 800f2b2:	69bb      	ldr	r3, [r7, #24]
 800f2b4:	7a1b      	ldrb	r3, [r3, #8]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d002      	beq.n	800f2c0 <Custom_STM_Event_Handler+0xc0>
 800f2ba:	2b01      	cmp	r3, #1
 800f2bc:	d008      	beq.n	800f2d0 <Custom_STM_Event_Handler+0xd0>
              break;
 800f2be:	e078      	b.n	800f3b2 <Custom_STM_Event_Handler+0x1b2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_F2_NOTIFY_DISABLED_EVT;
 800f2c0:	2303      	movs	r3, #3
 800f2c2:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800f2c4:	f107 0308 	add.w	r3, r7, #8
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f7ff fef1 	bl	800f0b0 <Custom_STM_App_Notification>
                break;
 800f2ce:	e070      	b.n	800f3b2 <Custom_STM_Event_Handler+0x1b2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_F2_NOTIFY_ENABLED_EVT;
 800f2d0:	2302      	movs	r3, #2
 800f2d2:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800f2d4:	f107 0308 	add.w	r3, r7, #8
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f7ff fee9 	bl	800f0b0 <Custom_STM_App_Notification>
                break;
 800f2de:	e068      	b.n	800f3b2 <Custom_STM_Event_Handler+0x1b2>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomF3Hdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800f2e0:	69bb      	ldr	r3, [r7, #24]
 800f2e2:	885b      	ldrh	r3, [r3, #2]
 800f2e4:	b29b      	uxth	r3, r3
 800f2e6:	461a      	mov	r2, r3
 800f2e8:	4b39      	ldr	r3, [pc, #228]	; (800f3d0 <Custom_STM_Event_Handler+0x1d0>)
 800f2ea:	88db      	ldrh	r3, [r3, #6]
 800f2ec:	3302      	adds	r3, #2
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d119      	bne.n	800f326 <Custom_STM_Event_Handler+0x126>
            return_value = SVCCTL_EvtAckFlowEnable;
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 800f2f8:	69bb      	ldr	r3, [r7, #24]
 800f2fa:	7a1b      	ldrb	r3, [r3, #8]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d002      	beq.n	800f306 <Custom_STM_Event_Handler+0x106>
 800f300:	2b01      	cmp	r3, #1
 800f302:	d008      	beq.n	800f316 <Custom_STM_Event_Handler+0x116>
              break;
 800f304:	e055      	b.n	800f3b2 <Custom_STM_Event_Handler+0x1b2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_F3_NOTIFY_DISABLED_EVT;
 800f306:	2305      	movs	r3, #5
 800f308:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800f30a:	f107 0308 	add.w	r3, r7, #8
 800f30e:	4618      	mov	r0, r3
 800f310:	f7ff fece 	bl	800f0b0 <Custom_STM_App_Notification>
                break;
 800f314:	e04d      	b.n	800f3b2 <Custom_STM_Event_Handler+0x1b2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_F3_NOTIFY_ENABLED_EVT;
 800f316:	2304      	movs	r3, #4
 800f318:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800f31a:	f107 0308 	add.w	r3, r7, #8
 800f31e:	4618      	mov	r0, r3
 800f320:	f7ff fec6 	bl	800f0b0 <Custom_STM_App_Notification>
                break;
 800f324:	e045      	b.n	800f3b2 <Custom_STM_Event_Handler+0x1b2>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomF4Hdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800f326:	69bb      	ldr	r3, [r7, #24]
 800f328:	885b      	ldrh	r3, [r3, #2]
 800f32a:	b29b      	uxth	r3, r3
 800f32c:	461a      	mov	r2, r3
 800f32e:	4b28      	ldr	r3, [pc, #160]	; (800f3d0 <Custom_STM_Event_Handler+0x1d0>)
 800f330:	891b      	ldrh	r3, [r3, #8]
 800f332:	3302      	adds	r3, #2
 800f334:	429a      	cmp	r2, r3
 800f336:	d119      	bne.n	800f36c <Custom_STM_Event_Handler+0x16c>
            return_value = SVCCTL_EvtAckFlowEnable;
 800f338:	2301      	movs	r3, #1
 800f33a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 800f33e:	69bb      	ldr	r3, [r7, #24]
 800f340:	7a1b      	ldrb	r3, [r3, #8]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d002      	beq.n	800f34c <Custom_STM_Event_Handler+0x14c>
 800f346:	2b01      	cmp	r3, #1
 800f348:	d008      	beq.n	800f35c <Custom_STM_Event_Handler+0x15c>
              break;
 800f34a:	e032      	b.n	800f3b2 <Custom_STM_Event_Handler+0x1b2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_F4_NOTIFY_DISABLED_EVT;
 800f34c:	2307      	movs	r3, #7
 800f34e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800f350:	f107 0308 	add.w	r3, r7, #8
 800f354:	4618      	mov	r0, r3
 800f356:	f7ff feab 	bl	800f0b0 <Custom_STM_App_Notification>
                break;
 800f35a:	e02a      	b.n	800f3b2 <Custom_STM_Event_Handler+0x1b2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_F4_NOTIFY_ENABLED_EVT;
 800f35c:	2306      	movs	r3, #6
 800f35e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800f360:	f107 0308 	add.w	r3, r7, #8
 800f364:	4618      	mov	r0, r3
 800f366:	f7ff fea3 	bl	800f0b0 <Custom_STM_App_Notification>
                break;
 800f36a:	e022      	b.n	800f3b2 <Custom_STM_Event_Handler+0x1b2>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomTdataHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800f36c:	69bb      	ldr	r3, [r7, #24]
 800f36e:	885b      	ldrh	r3, [r3, #2]
 800f370:	b29b      	uxth	r3, r3
 800f372:	461a      	mov	r2, r3
 800f374:	4b16      	ldr	r3, [pc, #88]	; (800f3d0 <Custom_STM_Event_Handler+0x1d0>)
 800f376:	895b      	ldrh	r3, [r3, #10]
 800f378:	3302      	adds	r3, #2
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d11e      	bne.n	800f3bc <Custom_STM_Event_Handler+0x1bc>
            return_value = SVCCTL_EvtAckFlowEnable;
 800f37e:	2301      	movs	r3, #1
 800f380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 800f384:	69bb      	ldr	r3, [r7, #24]
 800f386:	7a1b      	ldrb	r3, [r3, #8]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d002      	beq.n	800f392 <Custom_STM_Event_Handler+0x192>
 800f38c:	2b01      	cmp	r3, #1
 800f38e:	d008      	beq.n	800f3a2 <Custom_STM_Event_Handler+0x1a2>
              break;
 800f390:	e00f      	b.n	800f3b2 <Custom_STM_Event_Handler+0x1b2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_TDATA_NOTIFY_DISABLED_EVT;
 800f392:	2309      	movs	r3, #9
 800f394:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800f396:	f107 0308 	add.w	r3, r7, #8
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7ff fe88 	bl	800f0b0 <Custom_STM_App_Notification>
                break;
 800f3a0:	e007      	b.n	800f3b2 <Custom_STM_Event_Handler+0x1b2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_TDATA_NOTIFY_ENABLED_EVT;
 800f3a2:	2308      	movs	r3, #8
 800f3a4:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800f3a6:	f107 0308 	add.w	r3, r7, #8
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f7ff fe80 	bl	800f0b0 <Custom_STM_App_Notification>
                break;
 800f3b0:	bf00      	nop
          break;
 800f3b2:	e003      	b.n	800f3bc <Custom_STM_Event_Handler+0x1bc>
          break;
 800f3b4:	bf00      	nop
 800f3b6:	e004      	b.n	800f3c2 <Custom_STM_Event_Handler+0x1c2>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800f3b8:	bf00      	nop
 800f3ba:	e002      	b.n	800f3c2 <Custom_STM_Event_Handler+0x1c2>
          break;
 800f3bc:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800f3be:	e000      	b.n	800f3c2 <Custom_STM_Event_Handler+0x1c2>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800f3c0:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800f3c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	3728      	adds	r7, #40	; 0x28
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd80      	pop	{r7, pc}
 800f3ce:	bf00      	nop
 800f3d0:	20001808 	.word	0x20001808

0800f3d4 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b08c      	sub	sp, #48	; 0x30
 800f3d8:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f3da:	2392      	movs	r3, #146	; 0x92
 800f3dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800f3de:	48a3      	ldr	r0, [pc, #652]	; (800f66c <SVCCTL_InitCustomSvc+0x298>)
 800f3e0:	f7fe fb56 	bl	800da90 <SVCCTL_RegisterSvcHandler>
   *                              = 16
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 16;
 800f3e4:	2310      	movs	r3, #16
 800f3e6:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_HANDDATA_UUID(uuid.Char_UUID_128);
 800f3e8:	238f      	movs	r3, #143	; 0x8f
 800f3ea:	713b      	strb	r3, [r7, #4]
 800f3ec:	23e5      	movs	r3, #229	; 0xe5
 800f3ee:	717b      	strb	r3, [r7, #5]
 800f3f0:	23b3      	movs	r3, #179	; 0xb3
 800f3f2:	71bb      	strb	r3, [r7, #6]
 800f3f4:	23d5      	movs	r3, #213	; 0xd5
 800f3f6:	71fb      	strb	r3, [r7, #7]
 800f3f8:	232e      	movs	r3, #46	; 0x2e
 800f3fa:	723b      	strb	r3, [r7, #8]
 800f3fc:	237f      	movs	r3, #127	; 0x7f
 800f3fe:	727b      	strb	r3, [r7, #9]
 800f400:	234a      	movs	r3, #74	; 0x4a
 800f402:	72bb      	strb	r3, [r7, #10]
 800f404:	2398      	movs	r3, #152	; 0x98
 800f406:	72fb      	strb	r3, [r7, #11]
 800f408:	232a      	movs	r3, #42	; 0x2a
 800f40a:	733b      	strb	r3, [r7, #12]
 800f40c:	2348      	movs	r3, #72	; 0x48
 800f40e:	737b      	strb	r3, [r7, #13]
 800f410:	237a      	movs	r3, #122	; 0x7a
 800f412:	73bb      	strb	r3, [r7, #14]
 800f414:	23cc      	movs	r3, #204	; 0xcc
 800f416:	73fb      	strb	r3, [r7, #15]
 800f418:	2300      	movs	r3, #0
 800f41a:	743b      	strb	r3, [r7, #16]
 800f41c:	2300      	movs	r3, #0
 800f41e:	747b      	strb	r3, [r7, #17]
 800f420:	2300      	movs	r3, #0
 800f422:	74bb      	strb	r3, [r7, #18]
 800f424:	2300      	movs	r3, #0
 800f426:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800f428:	7dbb      	ldrb	r3, [r7, #22]
 800f42a:	1d39      	adds	r1, r7, #4
 800f42c:	4a90      	ldr	r2, [pc, #576]	; (800f670 <SVCCTL_InitCustomSvc+0x29c>)
 800f42e:	9200      	str	r2, [sp, #0]
 800f430:	2201      	movs	r2, #1
 800f432:	2002      	movs	r0, #2
 800f434:	f7fd fdf5 	bl	800d022 <aci_gatt_add_service>
 800f438:	4603      	mov	r3, r0
 800f43a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  fingerOne
   */
  COPY_FINGERONE_UUID(uuid.Char_UUID_128);
 800f43c:	2319      	movs	r3, #25
 800f43e:	713b      	strb	r3, [r7, #4]
 800f440:	23ed      	movs	r3, #237	; 0xed
 800f442:	717b      	strb	r3, [r7, #5]
 800f444:	2382      	movs	r3, #130	; 0x82
 800f446:	71bb      	strb	r3, [r7, #6]
 800f448:	23ae      	movs	r3, #174	; 0xae
 800f44a:	71fb      	strb	r3, [r7, #7]
 800f44c:	23ed      	movs	r3, #237	; 0xed
 800f44e:	723b      	strb	r3, [r7, #8]
 800f450:	2321      	movs	r3, #33	; 0x21
 800f452:	727b      	strb	r3, [r7, #9]
 800f454:	234c      	movs	r3, #76	; 0x4c
 800f456:	72bb      	strb	r3, [r7, #10]
 800f458:	239d      	movs	r3, #157	; 0x9d
 800f45a:	72fb      	strb	r3, [r7, #11]
 800f45c:	2341      	movs	r3, #65	; 0x41
 800f45e:	733b      	strb	r3, [r7, #12]
 800f460:	2345      	movs	r3, #69	; 0x45
 800f462:	737b      	strb	r3, [r7, #13]
 800f464:	2322      	movs	r3, #34	; 0x22
 800f466:	73bb      	strb	r3, [r7, #14]
 800f468:	238e      	movs	r3, #142	; 0x8e
 800f46a:	73fb      	strb	r3, [r7, #15]
 800f46c:	2300      	movs	r3, #0
 800f46e:	743b      	strb	r3, [r7, #16]
 800f470:	2300      	movs	r3, #0
 800f472:	747b      	strb	r3, [r7, #17]
 800f474:	2300      	movs	r3, #0
 800f476:	74bb      	strb	r3, [r7, #18]
 800f478:	2300      	movs	r3, #0
 800f47a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomHndataHdle,
 800f47c:	4b7c      	ldr	r3, [pc, #496]	; (800f670 <SVCCTL_InitCustomSvc+0x29c>)
 800f47e:	8818      	ldrh	r0, [r3, #0]
 800f480:	4b7c      	ldr	r3, [pc, #496]	; (800f674 <SVCCTL_InitCustomSvc+0x2a0>)
 800f482:	781b      	ldrb	r3, [r3, #0]
 800f484:	b29b      	uxth	r3, r3
 800f486:	1d3a      	adds	r2, r7, #4
 800f488:	497b      	ldr	r1, [pc, #492]	; (800f678 <SVCCTL_InitCustomSvc+0x2a4>)
 800f48a:	9105      	str	r1, [sp, #20]
 800f48c:	2100      	movs	r1, #0
 800f48e:	9104      	str	r1, [sp, #16]
 800f490:	2110      	movs	r1, #16
 800f492:	9103      	str	r1, [sp, #12]
 800f494:	2107      	movs	r1, #7
 800f496:	9102      	str	r1, [sp, #8]
 800f498:	2100      	movs	r1, #0
 800f49a:	9101      	str	r1, [sp, #4]
 800f49c:	2110      	movs	r1, #16
 800f49e:	9100      	str	r1, [sp, #0]
 800f4a0:	2102      	movs	r1, #2
 800f4a2:	f7fd fe94 	bl	800d1ce <aci_gatt_add_char>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  fingerTwo
   */
  COPY_FINGERTWO_UUID(uuid.Char_UUID_128);
 800f4aa:	2319      	movs	r3, #25
 800f4ac:	713b      	strb	r3, [r7, #4]
 800f4ae:	23ed      	movs	r3, #237	; 0xed
 800f4b0:	717b      	strb	r3, [r7, #5]
 800f4b2:	2382      	movs	r3, #130	; 0x82
 800f4b4:	71bb      	strb	r3, [r7, #6]
 800f4b6:	23ae      	movs	r3, #174	; 0xae
 800f4b8:	71fb      	strb	r3, [r7, #7]
 800f4ba:	23ed      	movs	r3, #237	; 0xed
 800f4bc:	723b      	strb	r3, [r7, #8]
 800f4be:	2321      	movs	r3, #33	; 0x21
 800f4c0:	727b      	strb	r3, [r7, #9]
 800f4c2:	234c      	movs	r3, #76	; 0x4c
 800f4c4:	72bb      	strb	r3, [r7, #10]
 800f4c6:	239d      	movs	r3, #157	; 0x9d
 800f4c8:	72fb      	strb	r3, [r7, #11]
 800f4ca:	2341      	movs	r3, #65	; 0x41
 800f4cc:	733b      	strb	r3, [r7, #12]
 800f4ce:	2345      	movs	r3, #69	; 0x45
 800f4d0:	737b      	strb	r3, [r7, #13]
 800f4d2:	2322      	movs	r3, #34	; 0x22
 800f4d4:	73bb      	strb	r3, [r7, #14]
 800f4d6:	238e      	movs	r3, #142	; 0x8e
 800f4d8:	73fb      	strb	r3, [r7, #15]
 800f4da:	2300      	movs	r3, #0
 800f4dc:	743b      	strb	r3, [r7, #16]
 800f4de:	2310      	movs	r3, #16
 800f4e0:	747b      	strb	r3, [r7, #17]
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	74bb      	strb	r3, [r7, #18]
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomHndataHdle,
 800f4ea:	4b61      	ldr	r3, [pc, #388]	; (800f670 <SVCCTL_InitCustomSvc+0x29c>)
 800f4ec:	8818      	ldrh	r0, [r3, #0]
 800f4ee:	4b63      	ldr	r3, [pc, #396]	; (800f67c <SVCCTL_InitCustomSvc+0x2a8>)
 800f4f0:	781b      	ldrb	r3, [r3, #0]
 800f4f2:	b29b      	uxth	r3, r3
 800f4f4:	1d3a      	adds	r2, r7, #4
 800f4f6:	4962      	ldr	r1, [pc, #392]	; (800f680 <SVCCTL_InitCustomSvc+0x2ac>)
 800f4f8:	9105      	str	r1, [sp, #20]
 800f4fa:	2100      	movs	r1, #0
 800f4fc:	9104      	str	r1, [sp, #16]
 800f4fe:	2110      	movs	r1, #16
 800f500:	9103      	str	r1, [sp, #12]
 800f502:	2107      	movs	r1, #7
 800f504:	9102      	str	r1, [sp, #8]
 800f506:	2100      	movs	r1, #0
 800f508:	9101      	str	r1, [sp, #4]
 800f50a:	2110      	movs	r1, #16
 800f50c:	9100      	str	r1, [sp, #0]
 800f50e:	2102      	movs	r1, #2
 800f510:	f7fd fe5d 	bl	800d1ce <aci_gatt_add_char>
 800f514:	4603      	mov	r3, r0
 800f516:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char2 */
  /**
   *  fingerThree
   */
  COPY_FINGERTHREE_UUID(uuid.Char_UUID_128);
 800f518:	2319      	movs	r3, #25
 800f51a:	713b      	strb	r3, [r7, #4]
 800f51c:	23ed      	movs	r3, #237	; 0xed
 800f51e:	717b      	strb	r3, [r7, #5]
 800f520:	2382      	movs	r3, #130	; 0x82
 800f522:	71bb      	strb	r3, [r7, #6]
 800f524:	23ae      	movs	r3, #174	; 0xae
 800f526:	71fb      	strb	r3, [r7, #7]
 800f528:	23ed      	movs	r3, #237	; 0xed
 800f52a:	723b      	strb	r3, [r7, #8]
 800f52c:	2321      	movs	r3, #33	; 0x21
 800f52e:	727b      	strb	r3, [r7, #9]
 800f530:	234c      	movs	r3, #76	; 0x4c
 800f532:	72bb      	strb	r3, [r7, #10]
 800f534:	239d      	movs	r3, #157	; 0x9d
 800f536:	72fb      	strb	r3, [r7, #11]
 800f538:	2341      	movs	r3, #65	; 0x41
 800f53a:	733b      	strb	r3, [r7, #12]
 800f53c:	2345      	movs	r3, #69	; 0x45
 800f53e:	737b      	strb	r3, [r7, #13]
 800f540:	2322      	movs	r3, #34	; 0x22
 800f542:	73bb      	strb	r3, [r7, #14]
 800f544:	238e      	movs	r3, #142	; 0x8e
 800f546:	73fb      	strb	r3, [r7, #15]
 800f548:	2300      	movs	r3, #0
 800f54a:	743b      	strb	r3, [r7, #16]
 800f54c:	2320      	movs	r3, #32
 800f54e:	747b      	strb	r3, [r7, #17]
 800f550:	2300      	movs	r3, #0
 800f552:	74bb      	strb	r3, [r7, #18]
 800f554:	2300      	movs	r3, #0
 800f556:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomHndataHdle,
 800f558:	4b45      	ldr	r3, [pc, #276]	; (800f670 <SVCCTL_InitCustomSvc+0x29c>)
 800f55a:	8818      	ldrh	r0, [r3, #0]
 800f55c:	4b49      	ldr	r3, [pc, #292]	; (800f684 <SVCCTL_InitCustomSvc+0x2b0>)
 800f55e:	781b      	ldrb	r3, [r3, #0]
 800f560:	b29b      	uxth	r3, r3
 800f562:	1d3a      	adds	r2, r7, #4
 800f564:	4948      	ldr	r1, [pc, #288]	; (800f688 <SVCCTL_InitCustomSvc+0x2b4>)
 800f566:	9105      	str	r1, [sp, #20]
 800f568:	2100      	movs	r1, #0
 800f56a:	9104      	str	r1, [sp, #16]
 800f56c:	2110      	movs	r1, #16
 800f56e:	9103      	str	r1, [sp, #12]
 800f570:	2107      	movs	r1, #7
 800f572:	9102      	str	r1, [sp, #8]
 800f574:	2100      	movs	r1, #0
 800f576:	9101      	str	r1, [sp, #4]
 800f578:	2110      	movs	r1, #16
 800f57a:	9100      	str	r1, [sp, #0]
 800f57c:	2102      	movs	r1, #2
 800f57e:	f7fd fe26 	bl	800d1ce <aci_gatt_add_char>
 800f582:	4603      	mov	r3, r0
 800f584:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char3 */
  /**
   *  fingerFour
   */
  COPY_FINGERFOUR_UUID(uuid.Char_UUID_128);
 800f586:	2319      	movs	r3, #25
 800f588:	713b      	strb	r3, [r7, #4]
 800f58a:	23ed      	movs	r3, #237	; 0xed
 800f58c:	717b      	strb	r3, [r7, #5]
 800f58e:	2382      	movs	r3, #130	; 0x82
 800f590:	71bb      	strb	r3, [r7, #6]
 800f592:	23ae      	movs	r3, #174	; 0xae
 800f594:	71fb      	strb	r3, [r7, #7]
 800f596:	23ed      	movs	r3, #237	; 0xed
 800f598:	723b      	strb	r3, [r7, #8]
 800f59a:	2321      	movs	r3, #33	; 0x21
 800f59c:	727b      	strb	r3, [r7, #9]
 800f59e:	234c      	movs	r3, #76	; 0x4c
 800f5a0:	72bb      	strb	r3, [r7, #10]
 800f5a2:	239d      	movs	r3, #157	; 0x9d
 800f5a4:	72fb      	strb	r3, [r7, #11]
 800f5a6:	2341      	movs	r3, #65	; 0x41
 800f5a8:	733b      	strb	r3, [r7, #12]
 800f5aa:	2345      	movs	r3, #69	; 0x45
 800f5ac:	737b      	strb	r3, [r7, #13]
 800f5ae:	2322      	movs	r3, #34	; 0x22
 800f5b0:	73bb      	strb	r3, [r7, #14]
 800f5b2:	238e      	movs	r3, #142	; 0x8e
 800f5b4:	73fb      	strb	r3, [r7, #15]
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	743b      	strb	r3, [r7, #16]
 800f5ba:	2330      	movs	r3, #48	; 0x30
 800f5bc:	747b      	strb	r3, [r7, #17]
 800f5be:	2300      	movs	r3, #0
 800f5c0:	74bb      	strb	r3, [r7, #18]
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomHndataHdle,
 800f5c6:	4b2a      	ldr	r3, [pc, #168]	; (800f670 <SVCCTL_InitCustomSvc+0x29c>)
 800f5c8:	8818      	ldrh	r0, [r3, #0]
 800f5ca:	4b30      	ldr	r3, [pc, #192]	; (800f68c <SVCCTL_InitCustomSvc+0x2b8>)
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	b29b      	uxth	r3, r3
 800f5d0:	1d3a      	adds	r2, r7, #4
 800f5d2:	492f      	ldr	r1, [pc, #188]	; (800f690 <SVCCTL_InitCustomSvc+0x2bc>)
 800f5d4:	9105      	str	r1, [sp, #20]
 800f5d6:	2100      	movs	r1, #0
 800f5d8:	9104      	str	r1, [sp, #16]
 800f5da:	2110      	movs	r1, #16
 800f5dc:	9103      	str	r1, [sp, #12]
 800f5de:	2107      	movs	r1, #7
 800f5e0:	9102      	str	r1, [sp, #8]
 800f5e2:	2100      	movs	r1, #0
 800f5e4:	9101      	str	r1, [sp, #4]
 800f5e6:	2110      	movs	r1, #16
 800f5e8:	9100      	str	r1, [sp, #0]
 800f5ea:	2102      	movs	r1, #2
 800f5ec:	f7fd fdef 	bl	800d1ce <aci_gatt_add_char>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char4 */
  /**
   *  thumbData
   */
  COPY_THUMBDATA_UUID(uuid.Char_UUID_128);
 800f5f4:	2319      	movs	r3, #25
 800f5f6:	713b      	strb	r3, [r7, #4]
 800f5f8:	23ed      	movs	r3, #237	; 0xed
 800f5fa:	717b      	strb	r3, [r7, #5]
 800f5fc:	2382      	movs	r3, #130	; 0x82
 800f5fe:	71bb      	strb	r3, [r7, #6]
 800f600:	23ae      	movs	r3, #174	; 0xae
 800f602:	71fb      	strb	r3, [r7, #7]
 800f604:	23ed      	movs	r3, #237	; 0xed
 800f606:	723b      	strb	r3, [r7, #8]
 800f608:	2321      	movs	r3, #33	; 0x21
 800f60a:	727b      	strb	r3, [r7, #9]
 800f60c:	234c      	movs	r3, #76	; 0x4c
 800f60e:	72bb      	strb	r3, [r7, #10]
 800f610:	239d      	movs	r3, #157	; 0x9d
 800f612:	72fb      	strb	r3, [r7, #11]
 800f614:	2341      	movs	r3, #65	; 0x41
 800f616:	733b      	strb	r3, [r7, #12]
 800f618:	2345      	movs	r3, #69	; 0x45
 800f61a:	737b      	strb	r3, [r7, #13]
 800f61c:	2322      	movs	r3, #34	; 0x22
 800f61e:	73bb      	strb	r3, [r7, #14]
 800f620:	238e      	movs	r3, #142	; 0x8e
 800f622:	73fb      	strb	r3, [r7, #15]
 800f624:	2300      	movs	r3, #0
 800f626:	743b      	strb	r3, [r7, #16]
 800f628:	2340      	movs	r3, #64	; 0x40
 800f62a:	747b      	strb	r3, [r7, #17]
 800f62c:	2300      	movs	r3, #0
 800f62e:	74bb      	strb	r3, [r7, #18]
 800f630:	2300      	movs	r3, #0
 800f632:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomHndataHdle,
 800f634:	4b0e      	ldr	r3, [pc, #56]	; (800f670 <SVCCTL_InitCustomSvc+0x29c>)
 800f636:	8818      	ldrh	r0, [r3, #0]
 800f638:	4b16      	ldr	r3, [pc, #88]	; (800f694 <SVCCTL_InitCustomSvc+0x2c0>)
 800f63a:	781b      	ldrb	r3, [r3, #0]
 800f63c:	b29b      	uxth	r3, r3
 800f63e:	1d3a      	adds	r2, r7, #4
 800f640:	4915      	ldr	r1, [pc, #84]	; (800f698 <SVCCTL_InitCustomSvc+0x2c4>)
 800f642:	9105      	str	r1, [sp, #20]
 800f644:	2100      	movs	r1, #0
 800f646:	9104      	str	r1, [sp, #16]
 800f648:	2110      	movs	r1, #16
 800f64a:	9103      	str	r1, [sp, #12]
 800f64c:	2107      	movs	r1, #7
 800f64e:	9102      	str	r1, [sp, #8]
 800f650:	2100      	movs	r1, #0
 800f652:	9101      	str	r1, [sp, #4]
 800f654:	2110      	movs	r1, #16
 800f656:	9100      	str	r1, [sp, #0]
 800f658:	2102      	movs	r1, #2
 800f65a:	f7fd fdb8 	bl	800d1ce <aci_gatt_add_char>
 800f65e:	4603      	mov	r3, r0
 800f660:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800f662:	bf00      	nop
}
 800f664:	3718      	adds	r7, #24
 800f666:	46bd      	mov	sp, r7
 800f668:	bd80      	pop	{r7, pc}
 800f66a:	bf00      	nop
 800f66c:	0800f201 	.word	0x0800f201
 800f670:	20001808 	.word	0x20001808
 800f674:	20000169 	.word	0x20000169
 800f678:	2000180a 	.word	0x2000180a
 800f67c:	2000016a 	.word	0x2000016a
 800f680:	2000180c 	.word	0x2000180c
 800f684:	2000016b 	.word	0x2000016b
 800f688:	2000180e 	.word	0x2000180e
 800f68c:	2000016c 	.word	0x2000016c
 800f690:	20001810 	.word	0x20001810
 800f694:	2000016d 	.word	0x2000016d
 800f698:	20001812 	.word	0x20001812

0800f69c <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b086      	sub	sp, #24
 800f6a0:	af02      	add	r7, sp, #8
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	6039      	str	r1, [r7, #0]
 800f6a6:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f6a8:	2392      	movs	r3, #146	; 0x92
 800f6aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800f6ac:	79fb      	ldrb	r3, [r7, #7]
 800f6ae:	2b04      	cmp	r3, #4
 800f6b0:	d857      	bhi.n	800f762 <Custom_STM_App_Update_Char+0xc6>
 800f6b2:	a201      	add	r2, pc, #4	; (adr r2, 800f6b8 <Custom_STM_App_Update_Char+0x1c>)
 800f6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6b8:	0800f6cd 	.word	0x0800f6cd
 800f6bc:	0800f6eb 	.word	0x0800f6eb
 800f6c0:	0800f709 	.word	0x0800f709
 800f6c4:	0800f727 	.word	0x0800f727
 800f6c8:	0800f745 	.word	0x0800f745
  {

    case CUSTOM_STM_F1:
      ret = aci_gatt_update_char_value(CustomContext.CustomHndataHdle,
 800f6cc:	4b28      	ldr	r3, [pc, #160]	; (800f770 <Custom_STM_App_Update_Char+0xd4>)
 800f6ce:	8818      	ldrh	r0, [r3, #0]
 800f6d0:	4b27      	ldr	r3, [pc, #156]	; (800f770 <Custom_STM_App_Update_Char+0xd4>)
 800f6d2:	8859      	ldrh	r1, [r3, #2]
 800f6d4:	4b27      	ldr	r3, [pc, #156]	; (800f774 <Custom_STM_App_Update_Char+0xd8>)
 800f6d6:	781a      	ldrb	r2, [r3, #0]
 800f6d8:	683b      	ldr	r3, [r7, #0]
 800f6da:	9300      	str	r3, [sp, #0]
 800f6dc:	4613      	mov	r3, r2
 800f6de:	2200      	movs	r2, #0
 800f6e0:	f7fd fe7d 	bl	800d3de <aci_gatt_update_char_value>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value F1 command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 800f6e8:	e03c      	b.n	800f764 <Custom_STM_App_Update_Char+0xc8>

    case CUSTOM_STM_F2:
      ret = aci_gatt_update_char_value(CustomContext.CustomHndataHdle,
 800f6ea:	4b21      	ldr	r3, [pc, #132]	; (800f770 <Custom_STM_App_Update_Char+0xd4>)
 800f6ec:	8818      	ldrh	r0, [r3, #0]
 800f6ee:	4b20      	ldr	r3, [pc, #128]	; (800f770 <Custom_STM_App_Update_Char+0xd4>)
 800f6f0:	8899      	ldrh	r1, [r3, #4]
 800f6f2:	4b21      	ldr	r3, [pc, #132]	; (800f778 <Custom_STM_App_Update_Char+0xdc>)
 800f6f4:	781a      	ldrb	r2, [r3, #0]
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	9300      	str	r3, [sp, #0]
 800f6fa:	4613      	mov	r3, r2
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	f7fd fe6e 	bl	800d3de <aci_gatt_update_char_value>
 800f702:	4603      	mov	r3, r0
 800f704:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value F2 command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;
 800f706:	e02d      	b.n	800f764 <Custom_STM_App_Update_Char+0xc8>

    case CUSTOM_STM_F3:
      ret = aci_gatt_update_char_value(CustomContext.CustomHndataHdle,
 800f708:	4b19      	ldr	r3, [pc, #100]	; (800f770 <Custom_STM_App_Update_Char+0xd4>)
 800f70a:	8818      	ldrh	r0, [r3, #0]
 800f70c:	4b18      	ldr	r3, [pc, #96]	; (800f770 <Custom_STM_App_Update_Char+0xd4>)
 800f70e:	88d9      	ldrh	r1, [r3, #6]
 800f710:	4b1a      	ldr	r3, [pc, #104]	; (800f77c <Custom_STM_App_Update_Char+0xe0>)
 800f712:	781a      	ldrb	r2, [r3, #0]
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	9300      	str	r3, [sp, #0]
 800f718:	4613      	mov	r3, r2
 800f71a:	2200      	movs	r2, #0
 800f71c:	f7fd fe5f 	bl	800d3de <aci_gatt_update_char_value>
 800f720:	4603      	mov	r3, r0
 800f722:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value F3 command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_3*/
      break;
 800f724:	e01e      	b.n	800f764 <Custom_STM_App_Update_Char+0xc8>

    case CUSTOM_STM_F4:
      ret = aci_gatt_update_char_value(CustomContext.CustomHndataHdle,
 800f726:	4b12      	ldr	r3, [pc, #72]	; (800f770 <Custom_STM_App_Update_Char+0xd4>)
 800f728:	8818      	ldrh	r0, [r3, #0]
 800f72a:	4b11      	ldr	r3, [pc, #68]	; (800f770 <Custom_STM_App_Update_Char+0xd4>)
 800f72c:	8919      	ldrh	r1, [r3, #8]
 800f72e:	4b14      	ldr	r3, [pc, #80]	; (800f780 <Custom_STM_App_Update_Char+0xe4>)
 800f730:	781a      	ldrb	r2, [r3, #0]
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	9300      	str	r3, [sp, #0]
 800f736:	4613      	mov	r3, r2
 800f738:	2200      	movs	r2, #0
 800f73a:	f7fd fe50 	bl	800d3de <aci_gatt_update_char_value>
 800f73e:	4603      	mov	r3, r0
 800f740:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value F4 command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_4*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_4*/
      break;
 800f742:	e00f      	b.n	800f764 <Custom_STM_App_Update_Char+0xc8>

    case CUSTOM_STM_TDATA:
      ret = aci_gatt_update_char_value(CustomContext.CustomHndataHdle,
 800f744:	4b0a      	ldr	r3, [pc, #40]	; (800f770 <Custom_STM_App_Update_Char+0xd4>)
 800f746:	8818      	ldrh	r0, [r3, #0]
 800f748:	4b09      	ldr	r3, [pc, #36]	; (800f770 <Custom_STM_App_Update_Char+0xd4>)
 800f74a:	8959      	ldrh	r1, [r3, #10]
 800f74c:	4b0d      	ldr	r3, [pc, #52]	; (800f784 <Custom_STM_App_Update_Char+0xe8>)
 800f74e:	781a      	ldrb	r2, [r3, #0]
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	9300      	str	r3, [sp, #0]
 800f754:	4613      	mov	r3, r2
 800f756:	2200      	movs	r2, #0
 800f758:	f7fd fe41 	bl	800d3de <aci_gatt_update_char_value>
 800f75c:	4603      	mov	r3, r0
 800f75e:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value TDATA command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_5*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_5*/
      break;
 800f760:	e000      	b.n	800f764 <Custom_STM_App_Update_Char+0xc8>

    default:
      break;
 800f762:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800f764:	7bfb      	ldrb	r3, [r7, #15]
}
 800f766:	4618      	mov	r0, r3
 800f768:	3710      	adds	r7, #16
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}
 800f76e:	bf00      	nop
 800f770:	20001808 	.word	0x20001808
 800f774:	20000169 	.word	0x20000169
 800f778:	2000016a 	.word	0x2000016a
 800f77c:	2000016b 	.word	0x2000016b
 800f780:	2000016c 	.word	0x2000016c
 800f784:	2000016d 	.word	0x2000016d

0800f788 <LL_PWR_EnableBootC2>:
{
 800f788:	b480      	push	{r7}
 800f78a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800f78c:	4b05      	ldr	r3, [pc, #20]	; (800f7a4 <LL_PWR_EnableBootC2+0x1c>)
 800f78e:	68db      	ldr	r3, [r3, #12]
 800f790:	4a04      	ldr	r2, [pc, #16]	; (800f7a4 <LL_PWR_EnableBootC2+0x1c>)
 800f792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f796:	60d3      	str	r3, [r2, #12]
}
 800f798:	bf00      	nop
 800f79a:	46bd      	mov	sp, r7
 800f79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a0:	4770      	bx	lr
 800f7a2:	bf00      	nop
 800f7a4:	58000400 	.word	0x58000400

0800f7a8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800f7a8:	b480      	push	{r7}
 800f7aa:	b083      	sub	sp, #12
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800f7b0:	4b06      	ldr	r3, [pc, #24]	; (800f7cc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800f7b2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800f7b6:	4905      	ldr	r1, [pc, #20]	; (800f7cc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	4313      	orrs	r3, r2
 800f7bc:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800f7c0:	bf00      	nop
 800f7c2:	370c      	adds	r7, #12
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ca:	4770      	bx	lr
 800f7cc:	58000800 	.word	0x58000800

0800f7d0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800f7d0:	b480      	push	{r7}
 800f7d2:	b083      	sub	sp, #12
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800f7d8:	4b05      	ldr	r3, [pc, #20]	; (800f7f0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800f7da:	6a1a      	ldr	r2, [r3, #32]
 800f7dc:	4904      	ldr	r1, [pc, #16]	; (800f7f0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	4313      	orrs	r3, r2
 800f7e2:	620b      	str	r3, [r1, #32]
}
 800f7e4:	bf00      	nop
 800f7e6:	370c      	adds	r7, #12
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ee:	4770      	bx	lr
 800f7f0:	58000800 	.word	0x58000800

0800f7f4 <LL_AHB3_GRP1_EnableClock>:
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b085      	sub	sp, #20
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800f7fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f800:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f802:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	4313      	orrs	r3, r2
 800f80a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800f80c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f810:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	4013      	ands	r3, r2
 800f816:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f818:	68fb      	ldr	r3, [r7, #12]
}
 800f81a:	bf00      	nop
 800f81c:	3714      	adds	r7, #20
 800f81e:	46bd      	mov	sp, r7
 800f820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f824:	4770      	bx	lr

0800f826 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800f826:	b480      	push	{r7}
 800f828:	b085      	sub	sp, #20
 800f82a:	af00      	add	r7, sp, #0
 800f82c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800f82e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f832:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800f836:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	4313      	orrs	r3, r2
 800f83e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800f842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f846:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	4013      	ands	r3, r2
 800f84e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f850:	68fb      	ldr	r3, [r7, #12]
}
 800f852:	bf00      	nop
 800f854:	3714      	adds	r7, #20
 800f856:	46bd      	mov	sp, r7
 800f858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85c:	4770      	bx	lr

0800f85e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800f85e:	b480      	push	{r7}
 800f860:	b083      	sub	sp, #12
 800f862:	af00      	add	r7, sp, #0
 800f864:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	601a      	str	r2, [r3, #0]
}
 800f872:	bf00      	nop
 800f874:	370c      	adds	r7, #12
 800f876:	46bd      	mov	sp, r7
 800f878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87c:	4770      	bx	lr

0800f87e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800f87e:	b480      	push	{r7}
 800f880:	b083      	sub	sp, #12
 800f882:	af00      	add	r7, sp, #0
 800f884:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	f043 0201 	orr.w	r2, r3, #1
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	601a      	str	r2, [r3, #0]
}
 800f892:	bf00      	nop
 800f894:	370c      	adds	r7, #12
 800f896:	46bd      	mov	sp, r7
 800f898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89c:	4770      	bx	lr

0800f89e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f89e:	b480      	push	{r7}
 800f8a0:	b083      	sub	sp, #12
 800f8a2:	af00      	add	r7, sp, #0
 800f8a4:	6078      	str	r0, [r7, #4]
 800f8a6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	685a      	ldr	r2, [r3, #4]
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	041b      	lsls	r3, r3, #16
 800f8b0:	43db      	mvns	r3, r3
 800f8b2:	401a      	ands	r2, r3
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	605a      	str	r2, [r3, #4]
}
 800f8b8:	bf00      	nop
 800f8ba:	370c      	adds	r7, #12
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c2:	4770      	bx	lr

0800f8c4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f8c4:	b480      	push	{r7}
 800f8c6:	b083      	sub	sp, #12
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
 800f8cc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	685a      	ldr	r2, [r3, #4]
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	041b      	lsls	r3, r3, #16
 800f8d6:	431a      	orrs	r2, r3
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	605a      	str	r2, [r3, #4]
}
 800f8dc:	bf00      	nop
 800f8de:	370c      	adds	r7, #12
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e6:	4770      	bx	lr

0800f8e8 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b083      	sub	sp, #12
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	685a      	ldr	r2, [r3, #4]
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	43db      	mvns	r3, r3
 800f8fa:	401a      	ands	r2, r3
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	605a      	str	r2, [r3, #4]
}
 800f900:	bf00      	nop
 800f902:	370c      	adds	r7, #12
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr

0800f90c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b083      	sub	sp, #12
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
 800f914:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	683a      	ldr	r2, [r7, #0]
 800f91a:	609a      	str	r2, [r3, #8]
}
 800f91c:	bf00      	nop
 800f91e:	370c      	adds	r7, #12
 800f920:	46bd      	mov	sp, r7
 800f922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f926:	4770      	bx	lr

0800f928 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f928:	b480      	push	{r7}
 800f92a:	b083      	sub	sp, #12
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
 800f930:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	041a      	lsls	r2, r3, #16
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	609a      	str	r2, [r3, #8]
}
 800f93a:	bf00      	nop
 800f93c:	370c      	adds	r7, #12
 800f93e:	46bd      	mov	sp, r7
 800f940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f944:	4770      	bx	lr

0800f946 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800f946:	b480      	push	{r7}
 800f948:	b083      	sub	sp, #12
 800f94a:	af00      	add	r7, sp, #0
 800f94c:	6078      	str	r0, [r7, #4]
 800f94e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	68da      	ldr	r2, [r3, #12]
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	4013      	ands	r3, r2
 800f958:	683a      	ldr	r2, [r7, #0]
 800f95a:	429a      	cmp	r2, r3
 800f95c:	d101      	bne.n	800f962 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800f95e:	2301      	movs	r3, #1
 800f960:	e000      	b.n	800f964 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800f962:	2300      	movs	r3, #0
}
 800f964:	4618      	mov	r0, r3
 800f966:	370c      	adds	r7, #12
 800f968:	46bd      	mov	sp, r7
 800f96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96e:	4770      	bx	lr

0800f970 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800f970:	b480      	push	{r7}
 800f972:	b083      	sub	sp, #12
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
 800f978:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	69da      	ldr	r2, [r3, #28]
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	4013      	ands	r3, r2
 800f982:	683a      	ldr	r2, [r7, #0]
 800f984:	429a      	cmp	r2, r3
 800f986:	d101      	bne.n	800f98c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800f988:	2301      	movs	r3, #1
 800f98a:	e000      	b.n	800f98e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800f98c:	2300      	movs	r3, #0
}
 800f98e:	4618      	mov	r0, r3
 800f990:	370c      	adds	r7, #12
 800f992:	46bd      	mov	sp, r7
 800f994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f998:	4770      	bx	lr
	...

0800f99c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800f9a0:	2102      	movs	r1, #2
 800f9a2:	4818      	ldr	r0, [pc, #96]	; (800fa04 <HW_IPCC_Rx_Handler+0x68>)
 800f9a4:	f7ff ffe4 	bl	800f970 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d008      	beq.n	800f9c0 <HW_IPCC_Rx_Handler+0x24>
 800f9ae:	4b15      	ldr	r3, [pc, #84]	; (800fa04 <HW_IPCC_Rx_Handler+0x68>)
 800f9b0:	685b      	ldr	r3, [r3, #4]
 800f9b2:	f003 0302 	and.w	r3, r3, #2
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d102      	bne.n	800f9c0 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800f9ba:	f000 f8d5 	bl	800fb68 <HW_IPCC_SYS_EvtHandler>
 800f9be:	e01e      	b.n	800f9fe <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800f9c0:	2101      	movs	r1, #1
 800f9c2:	4810      	ldr	r0, [pc, #64]	; (800fa04 <HW_IPCC_Rx_Handler+0x68>)
 800f9c4:	f7ff ffd4 	bl	800f970 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d008      	beq.n	800f9e0 <HW_IPCC_Rx_Handler+0x44>
 800f9ce:	4b0d      	ldr	r3, [pc, #52]	; (800fa04 <HW_IPCC_Rx_Handler+0x68>)
 800f9d0:	685b      	ldr	r3, [r3, #4]
 800f9d2:	f003 0301 	and.w	r3, r3, #1
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d102      	bne.n	800f9e0 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800f9da:	f000 f889 	bl	800faf0 <HW_IPCC_BLE_EvtHandler>
 800f9de:	e00e      	b.n	800f9fe <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800f9e0:	2108      	movs	r1, #8
 800f9e2:	4808      	ldr	r0, [pc, #32]	; (800fa04 <HW_IPCC_Rx_Handler+0x68>)
 800f9e4:	f7ff ffc4 	bl	800f970 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d008      	beq.n	800fa00 <HW_IPCC_Rx_Handler+0x64>
 800f9ee:	4b05      	ldr	r3, [pc, #20]	; (800fa04 <HW_IPCC_Rx_Handler+0x68>)
 800f9f0:	685b      	ldr	r3, [r3, #4]
 800f9f2:	f003 0308 	and.w	r3, r3, #8
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d102      	bne.n	800fa00 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800f9fa:	f000 f901 	bl	800fc00 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800f9fe:	bf00      	nop
 800fa00:	bf00      	nop
}
 800fa02:	bd80      	pop	{r7, pc}
 800fa04:	58000c00 	.word	0x58000c00

0800fa08 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800fa0c:	2102      	movs	r1, #2
 800fa0e:	4818      	ldr	r0, [pc, #96]	; (800fa70 <HW_IPCC_Tx_Handler+0x68>)
 800fa10:	f7ff ff99 	bl	800f946 <LL_C1_IPCC_IsActiveFlag_CHx>
 800fa14:	4603      	mov	r3, r0
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d108      	bne.n	800fa2c <HW_IPCC_Tx_Handler+0x24>
 800fa1a:	4b15      	ldr	r3, [pc, #84]	; (800fa70 <HW_IPCC_Tx_Handler+0x68>)
 800fa1c:	685b      	ldr	r3, [r3, #4]
 800fa1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d102      	bne.n	800fa2c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800fa26:	f000 f893 	bl	800fb50 <HW_IPCC_SYS_CmdEvtHandler>
 800fa2a:	e01e      	b.n	800fa6a <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800fa2c:	2108      	movs	r1, #8
 800fa2e:	4810      	ldr	r0, [pc, #64]	; (800fa70 <HW_IPCC_Tx_Handler+0x68>)
 800fa30:	f7ff ff89 	bl	800f946 <LL_C1_IPCC_IsActiveFlag_CHx>
 800fa34:	4603      	mov	r3, r0
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d108      	bne.n	800fa4c <HW_IPCC_Tx_Handler+0x44>
 800fa3a:	4b0d      	ldr	r3, [pc, #52]	; (800fa70 <HW_IPCC_Tx_Handler+0x68>)
 800fa3c:	685b      	ldr	r3, [r3, #4]
 800fa3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d102      	bne.n	800fa4c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800fa46:	f000 f8bd 	bl	800fbc4 <HW_IPCC_MM_FreeBufHandler>
 800fa4a:	e00e      	b.n	800fa6a <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800fa4c:	2120      	movs	r1, #32
 800fa4e:	4808      	ldr	r0, [pc, #32]	; (800fa70 <HW_IPCC_Tx_Handler+0x68>)
 800fa50:	f7ff ff79 	bl	800f946 <LL_C1_IPCC_IsActiveFlag_CHx>
 800fa54:	4603      	mov	r3, r0
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d108      	bne.n	800fa6c <HW_IPCC_Tx_Handler+0x64>
 800fa5a:	4b05      	ldr	r3, [pc, #20]	; (800fa70 <HW_IPCC_Tx_Handler+0x68>)
 800fa5c:	685b      	ldr	r3, [r3, #4]
 800fa5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d102      	bne.n	800fa6c <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800fa66:	f000 f84f 	bl	800fb08 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800fa6a:	bf00      	nop
 800fa6c:	bf00      	nop
}
 800fa6e:	bd80      	pop	{r7, pc}
 800fa70:	58000c00 	.word	0x58000c00

0800fa74 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800fa78:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800fa7c:	f7ff fed3 	bl	800f826 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800fa80:	f44f 7000 	mov.w	r0, #512	; 0x200
 800fa84:	f7ff fea4 	bl	800f7d0 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800fa88:	f44f 7000 	mov.w	r0, #512	; 0x200
 800fa8c:	f7ff fe8c 	bl	800f7a8 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800fa90:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800fa92:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800fa94:	f7ff fe78 	bl	800f788 <LL_PWR_EnableBootC2>

  return;
 800fa98:	bf00      	nop
}
 800fa9a:	bd80      	pop	{r7, pc}

0800fa9c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800faa0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800faa4:	f7ff fea6 	bl	800f7f4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800faa8:	4806      	ldr	r0, [pc, #24]	; (800fac4 <HW_IPCC_Init+0x28>)
 800faaa:	f7ff fee8 	bl	800f87e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800faae:	4805      	ldr	r0, [pc, #20]	; (800fac4 <HW_IPCC_Init+0x28>)
 800fab0:	f7ff fed5 	bl	800f85e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800fab4:	202c      	movs	r0, #44	; 0x2c
 800fab6:	f7f7 ff82 	bl	80079be <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800faba:	202d      	movs	r0, #45	; 0x2d
 800fabc:	f7f7 ff7f 	bl	80079be <HAL_NVIC_EnableIRQ>

  return;
 800fac0:	bf00      	nop
}
 800fac2:	bd80      	pop	{r7, pc}
 800fac4:	58000c00 	.word	0x58000c00

0800fac8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800facc:	2101      	movs	r1, #1
 800face:	4802      	ldr	r0, [pc, #8]	; (800fad8 <HW_IPCC_BLE_Init+0x10>)
 800fad0:	f7ff ff0a 	bl	800f8e8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800fad4:	bf00      	nop
}
 800fad6:	bd80      	pop	{r7, pc}
 800fad8:	58000c00 	.word	0x58000c00

0800fadc <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800fae0:	2101      	movs	r1, #1
 800fae2:	4802      	ldr	r0, [pc, #8]	; (800faec <HW_IPCC_BLE_SendCmd+0x10>)
 800fae4:	f7ff ff20 	bl	800f928 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800fae8:	bf00      	nop
}
 800faea:	bd80      	pop	{r7, pc}
 800faec:	58000c00 	.word	0x58000c00

0800faf0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800faf4:	f7fe fc90 	bl	800e418 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800faf8:	2101      	movs	r1, #1
 800fafa:	4802      	ldr	r0, [pc, #8]	; (800fb04 <HW_IPCC_BLE_EvtHandler+0x14>)
 800fafc:	f7ff ff06 	bl	800f90c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800fb00:	bf00      	nop
}
 800fb02:	bd80      	pop	{r7, pc}
 800fb04:	58000c00 	.word	0x58000c00

0800fb08 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800fb0c:	2120      	movs	r1, #32
 800fb0e:	4803      	ldr	r0, [pc, #12]	; (800fb1c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800fb10:	f7ff fed8 	bl	800f8c4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800fb14:	f7fe fcb0 	bl	800e478 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800fb18:	bf00      	nop
}
 800fb1a:	bd80      	pop	{r7, pc}
 800fb1c:	58000c00 	.word	0x58000c00

0800fb20 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800fb24:	2102      	movs	r1, #2
 800fb26:	4802      	ldr	r0, [pc, #8]	; (800fb30 <HW_IPCC_SYS_Init+0x10>)
 800fb28:	f7ff fede 	bl	800f8e8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800fb2c:	bf00      	nop
}
 800fb2e:	bd80      	pop	{r7, pc}
 800fb30:	58000c00 	.word	0x58000c00

0800fb34 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800fb38:	2102      	movs	r1, #2
 800fb3a:	4804      	ldr	r0, [pc, #16]	; (800fb4c <HW_IPCC_SYS_SendCmd+0x18>)
 800fb3c:	f7ff fef4 	bl	800f928 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800fb40:	2102      	movs	r1, #2
 800fb42:	4802      	ldr	r0, [pc, #8]	; (800fb4c <HW_IPCC_SYS_SendCmd+0x18>)
 800fb44:	f7ff feab 	bl	800f89e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800fb48:	bf00      	nop
}
 800fb4a:	bd80      	pop	{r7, pc}
 800fb4c:	58000c00 	.word	0x58000c00

0800fb50 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800fb54:	2102      	movs	r1, #2
 800fb56:	4803      	ldr	r0, [pc, #12]	; (800fb64 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800fb58:	f7ff feb4 	bl	800f8c4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800fb5c:	f7fe fcdc 	bl	800e518 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800fb60:	bf00      	nop
}
 800fb62:	bd80      	pop	{r7, pc}
 800fb64:	58000c00 	.word	0x58000c00

0800fb68 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800fb6c:	f7fe fcea 	bl	800e544 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800fb70:	2102      	movs	r1, #2
 800fb72:	4802      	ldr	r0, [pc, #8]	; (800fb7c <HW_IPCC_SYS_EvtHandler+0x14>)
 800fb74:	f7ff feca 	bl	800f90c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800fb78:	bf00      	nop
}
 800fb7a:	bd80      	pop	{r7, pc}
 800fb7c:	58000c00 	.word	0x58000c00

0800fb80 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b082      	sub	sp, #8
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800fb88:	2108      	movs	r1, #8
 800fb8a:	480c      	ldr	r0, [pc, #48]	; (800fbbc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800fb8c:	f7ff fedb 	bl	800f946 <LL_C1_IPCC_IsActiveFlag_CHx>
 800fb90:	4603      	mov	r3, r0
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d007      	beq.n	800fba6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800fb96:	4a0a      	ldr	r2, [pc, #40]	; (800fbc0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800fb9c:	2108      	movs	r1, #8
 800fb9e:	4807      	ldr	r0, [pc, #28]	; (800fbbc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800fba0:	f7ff fe7d 	bl	800f89e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800fba4:	e006      	b.n	800fbb4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800fbaa:	2108      	movs	r1, #8
 800fbac:	4803      	ldr	r0, [pc, #12]	; (800fbbc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800fbae:	f7ff febb 	bl	800f928 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800fbb2:	bf00      	nop
}
 800fbb4:	3708      	adds	r7, #8
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	bd80      	pop	{r7, pc}
 800fbba:	bf00      	nop
 800fbbc:	58000c00 	.word	0x58000c00
 800fbc0:	20001814 	.word	0x20001814

0800fbc4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800fbc8:	2108      	movs	r1, #8
 800fbca:	4806      	ldr	r0, [pc, #24]	; (800fbe4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800fbcc:	f7ff fe7a 	bl	800f8c4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800fbd0:	4b05      	ldr	r3, [pc, #20]	; (800fbe8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800fbd6:	2108      	movs	r1, #8
 800fbd8:	4802      	ldr	r0, [pc, #8]	; (800fbe4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800fbda:	f7ff fea5 	bl	800f928 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800fbde:	bf00      	nop
}
 800fbe0:	bd80      	pop	{r7, pc}
 800fbe2:	bf00      	nop
 800fbe4:	58000c00 	.word	0x58000c00
 800fbe8:	20001814 	.word	0x20001814

0800fbec <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800fbf0:	2108      	movs	r1, #8
 800fbf2:	4802      	ldr	r0, [pc, #8]	; (800fbfc <HW_IPCC_TRACES_Init+0x10>)
 800fbf4:	f7ff fe78 	bl	800f8e8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800fbf8:	bf00      	nop
}
 800fbfa:	bd80      	pop	{r7, pc}
 800fbfc:	58000c00 	.word	0x58000c00

0800fc00 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800fc04:	f7fe fd46 	bl	800e694 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800fc08:	2108      	movs	r1, #8
 800fc0a:	4802      	ldr	r0, [pc, #8]	; (800fc14 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800fc0c:	f7ff fe7e 	bl	800f90c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800fc10:	bf00      	nop
}
 800fc12:	bd80      	pop	{r7, pc}
 800fc14:	58000c00 	.word	0x58000c00

0800fc18 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800fc18:	b480      	push	{r7}
 800fc1a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800fc1c:	4b05      	ldr	r3, [pc, #20]	; (800fc34 <UTIL_LPM_Init+0x1c>)
 800fc1e:	2200      	movs	r2, #0
 800fc20:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800fc22:	4b05      	ldr	r3, [pc, #20]	; (800fc38 <UTIL_LPM_Init+0x20>)
 800fc24:	2200      	movs	r2, #0
 800fc26:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800fc28:	bf00      	nop
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc30:	4770      	bx	lr
 800fc32:	bf00      	nop
 800fc34:	20001818 	.word	0x20001818
 800fc38:	2000181c 	.word	0x2000181c

0800fc3c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800fc3c:	b480      	push	{r7}
 800fc3e:	b087      	sub	sp, #28
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
 800fc44:	460b      	mov	r3, r1
 800fc46:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fc48:	f3ef 8310 	mrs	r3, PRIMASK
 800fc4c:	613b      	str	r3, [r7, #16]
  return(result);
 800fc4e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800fc50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fc52:	b672      	cpsid	i
}
 800fc54:	bf00      	nop
  
  switch(state)
 800fc56:	78fb      	ldrb	r3, [r7, #3]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d008      	beq.n	800fc6e <UTIL_LPM_SetOffMode+0x32>
 800fc5c:	2b01      	cmp	r3, #1
 800fc5e:	d10e      	bne.n	800fc7e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800fc60:	4b0d      	ldr	r3, [pc, #52]	; (800fc98 <UTIL_LPM_SetOffMode+0x5c>)
 800fc62:	681a      	ldr	r2, [r3, #0]
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	4313      	orrs	r3, r2
 800fc68:	4a0b      	ldr	r2, [pc, #44]	; (800fc98 <UTIL_LPM_SetOffMode+0x5c>)
 800fc6a:	6013      	str	r3, [r2, #0]
      break;
 800fc6c:	e008      	b.n	800fc80 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	43da      	mvns	r2, r3
 800fc72:	4b09      	ldr	r3, [pc, #36]	; (800fc98 <UTIL_LPM_SetOffMode+0x5c>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	4013      	ands	r3, r2
 800fc78:	4a07      	ldr	r2, [pc, #28]	; (800fc98 <UTIL_LPM_SetOffMode+0x5c>)
 800fc7a:	6013      	str	r3, [r2, #0]
      break;
 800fc7c:	e000      	b.n	800fc80 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800fc7e:	bf00      	nop
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	f383 8810 	msr	PRIMASK, r3
}
 800fc8a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800fc8c:	bf00      	nop
 800fc8e:	371c      	adds	r7, #28
 800fc90:	46bd      	mov	sp, r7
 800fc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc96:	4770      	bx	lr
 800fc98:	2000181c 	.word	0x2000181c

0800fc9c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b090      	sub	sp, #64	; 0x40
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800fca4:	4b73      	ldr	r3, [pc, #460]	; (800fe74 <UTIL_SEQ_Run+0x1d8>)
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800fcaa:	4b72      	ldr	r3, [pc, #456]	; (800fe74 <UTIL_SEQ_Run+0x1d8>)
 800fcac:	681a      	ldr	r2, [r3, #0]
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	4013      	ands	r3, r2
 800fcb2:	4a70      	ldr	r2, [pc, #448]	; (800fe74 <UTIL_SEQ_Run+0x1d8>)
 800fcb4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800fcb6:	4b70      	ldr	r3, [pc, #448]	; (800fe78 <UTIL_SEQ_Run+0x1dc>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800fcbc:	4b6f      	ldr	r3, [pc, #444]	; (800fe7c <UTIL_SEQ_Run+0x1e0>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800fcc2:	4b6f      	ldr	r3, [pc, #444]	; (800fe80 <UTIL_SEQ_Run+0x1e4>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800fcc8:	4b6e      	ldr	r3, [pc, #440]	; (800fe84 <UTIL_SEQ_Run+0x1e8>)
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800fcce:	e08d      	b.n	800fdec <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800fcd4:	e002      	b.n	800fcdc <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800fcd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcd8:	3301      	adds	r3, #1
 800fcda:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800fcdc:	4a6a      	ldr	r2, [pc, #424]	; (800fe88 <UTIL_SEQ_Run+0x1ec>)
 800fcde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fce0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800fce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce6:	401a      	ands	r2, r3
 800fce8:	4b62      	ldr	r3, [pc, #392]	; (800fe74 <UTIL_SEQ_Run+0x1d8>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	4013      	ands	r3, r2
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d0f1      	beq.n	800fcd6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800fcf2:	4a65      	ldr	r2, [pc, #404]	; (800fe88 <UTIL_SEQ_Run+0x1ec>)
 800fcf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcf6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800fcfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcfc:	401a      	ands	r2, r3
 800fcfe:	4b5d      	ldr	r3, [pc, #372]	; (800fe74 <UTIL_SEQ_Run+0x1d8>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	4013      	ands	r3, r2
 800fd04:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800fd06:	4a60      	ldr	r2, [pc, #384]	; (800fe88 <UTIL_SEQ_Run+0x1ec>)
 800fd08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd0a:	00db      	lsls	r3, r3, #3
 800fd0c:	4413      	add	r3, r2
 800fd0e:	685a      	ldr	r2, [r3, #4]
 800fd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd12:	4013      	ands	r3, r2
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d106      	bne.n	800fd26 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800fd18:	4a5b      	ldr	r2, [pc, #364]	; (800fe88 <UTIL_SEQ_Run+0x1ec>)
 800fd1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd1c:	00db      	lsls	r3, r3, #3
 800fd1e:	4413      	add	r3, r2
 800fd20:	f04f 32ff 	mov.w	r2, #4294967295
 800fd24:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800fd26:	4a58      	ldr	r2, [pc, #352]	; (800fe88 <UTIL_SEQ_Run+0x1ec>)
 800fd28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd2a:	00db      	lsls	r3, r3, #3
 800fd2c:	4413      	add	r3, r2
 800fd2e:	685a      	ldr	r2, [r3, #4]
 800fd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd32:	4013      	ands	r3, r2
 800fd34:	4618      	mov	r0, r3
 800fd36:	f000 f9b3 	bl	80100a0 <SEQ_BitPosition>
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	461a      	mov	r2, r3
 800fd3e:	4b53      	ldr	r3, [pc, #332]	; (800fe8c <UTIL_SEQ_Run+0x1f0>)
 800fd40:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800fd42:	4a51      	ldr	r2, [pc, #324]	; (800fe88 <UTIL_SEQ_Run+0x1ec>)
 800fd44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd46:	00db      	lsls	r3, r3, #3
 800fd48:	4413      	add	r3, r2
 800fd4a:	685a      	ldr	r2, [r3, #4]
 800fd4c:	4b4f      	ldr	r3, [pc, #316]	; (800fe8c <UTIL_SEQ_Run+0x1f0>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	2101      	movs	r1, #1
 800fd52:	fa01 f303 	lsl.w	r3, r1, r3
 800fd56:	43db      	mvns	r3, r3
 800fd58:	401a      	ands	r2, r3
 800fd5a:	494b      	ldr	r1, [pc, #300]	; (800fe88 <UTIL_SEQ_Run+0x1ec>)
 800fd5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd5e:	00db      	lsls	r3, r3, #3
 800fd60:	440b      	add	r3, r1
 800fd62:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd64:	f3ef 8310 	mrs	r3, PRIMASK
 800fd68:	61bb      	str	r3, [r7, #24]
  return(result);
 800fd6a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800fd6c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800fd6e:	b672      	cpsid	i
}
 800fd70:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800fd72:	4b46      	ldr	r3, [pc, #280]	; (800fe8c <UTIL_SEQ_Run+0x1f0>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	2201      	movs	r2, #1
 800fd78:	fa02 f303 	lsl.w	r3, r2, r3
 800fd7c:	43da      	mvns	r2, r3
 800fd7e:	4b3e      	ldr	r3, [pc, #248]	; (800fe78 <UTIL_SEQ_Run+0x1dc>)
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	4013      	ands	r3, r2
 800fd84:	4a3c      	ldr	r2, [pc, #240]	; (800fe78 <UTIL_SEQ_Run+0x1dc>)
 800fd86:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800fd88:	2302      	movs	r3, #2
 800fd8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd8c:	e013      	b.n	800fdb6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800fd8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd90:	3b01      	subs	r3, #1
 800fd92:	4a3d      	ldr	r2, [pc, #244]	; (800fe88 <UTIL_SEQ_Run+0x1ec>)
 800fd94:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800fd98:	4b3c      	ldr	r3, [pc, #240]	; (800fe8c <UTIL_SEQ_Run+0x1f0>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	2201      	movs	r2, #1
 800fd9e:	fa02 f303 	lsl.w	r3, r2, r3
 800fda2:	43da      	mvns	r2, r3
 800fda4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fda6:	3b01      	subs	r3, #1
 800fda8:	400a      	ands	r2, r1
 800fdaa:	4937      	ldr	r1, [pc, #220]	; (800fe88 <UTIL_SEQ_Run+0x1ec>)
 800fdac:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800fdb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdb2:	3b01      	subs	r3, #1
 800fdb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fdb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d1e8      	bne.n	800fd8e <UTIL_SEQ_Run+0xf2>
 800fdbc:	6a3b      	ldr	r3, [r7, #32]
 800fdbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fdc0:	697b      	ldr	r3, [r7, #20]
 800fdc2:	f383 8810 	msr	PRIMASK, r3
}
 800fdc6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800fdc8:	4b30      	ldr	r3, [pc, #192]	; (800fe8c <UTIL_SEQ_Run+0x1f0>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	4a30      	ldr	r2, [pc, #192]	; (800fe90 <UTIL_SEQ_Run+0x1f4>)
 800fdce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdd2:	4798      	blx	r3

    local_taskset = TaskSet;
 800fdd4:	4b28      	ldr	r3, [pc, #160]	; (800fe78 <UTIL_SEQ_Run+0x1dc>)
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800fdda:	4b28      	ldr	r3, [pc, #160]	; (800fe7c <UTIL_SEQ_Run+0x1e0>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800fde0:	4b27      	ldr	r3, [pc, #156]	; (800fe80 <UTIL_SEQ_Run+0x1e4>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800fde6:	4b27      	ldr	r3, [pc, #156]	; (800fe84 <UTIL_SEQ_Run+0x1e8>)
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800fdec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdf0:	401a      	ands	r2, r3
 800fdf2:	4b20      	ldr	r3, [pc, #128]	; (800fe74 <UTIL_SEQ_Run+0x1d8>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	4013      	ands	r3, r2
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d005      	beq.n	800fe08 <UTIL_SEQ_Run+0x16c>
 800fdfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe00:	4013      	ands	r3, r2
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	f43f af64 	beq.w	800fcd0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800fe08:	4b20      	ldr	r3, [pc, #128]	; (800fe8c <UTIL_SEQ_Run+0x1f0>)
 800fe0a:	f04f 32ff 	mov.w	r2, #4294967295
 800fe0e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800fe10:	f000 f938 	bl	8010084 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe14:	f3ef 8310 	mrs	r3, PRIMASK
 800fe18:	613b      	str	r3, [r7, #16]
  return(result);
 800fe1a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800fe1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800fe1e:	b672      	cpsid	i
}
 800fe20:	bf00      	nop
  local_taskset = TaskSet;
 800fe22:	4b15      	ldr	r3, [pc, #84]	; (800fe78 <UTIL_SEQ_Run+0x1dc>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800fe28:	4b14      	ldr	r3, [pc, #80]	; (800fe7c <UTIL_SEQ_Run+0x1e0>)
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800fe2e:	4b14      	ldr	r3, [pc, #80]	; (800fe80 <UTIL_SEQ_Run+0x1e4>)
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800fe34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe38:	401a      	ands	r2, r3
 800fe3a:	4b0e      	ldr	r3, [pc, #56]	; (800fe74 <UTIL_SEQ_Run+0x1d8>)
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	4013      	ands	r3, r2
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d107      	bne.n	800fe54 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800fe44:	4b0f      	ldr	r3, [pc, #60]	; (800fe84 <UTIL_SEQ_Run+0x1e8>)
 800fe46:	681a      	ldr	r2, [r3, #0]
 800fe48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe4a:	4013      	ands	r3, r2
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d101      	bne.n	800fe54 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800fe50:	f7f1 fa84 	bl	800135c <UTIL_SEQ_Idle>
 800fe54:	69fb      	ldr	r3, [r7, #28]
 800fe56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	f383 8810 	msr	PRIMASK, r3
}
 800fe5e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800fe60:	f000 f917 	bl	8010092 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800fe64:	4a03      	ldr	r2, [pc, #12]	; (800fe74 <UTIL_SEQ_Run+0x1d8>)
 800fe66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe68:	6013      	str	r3, [r2, #0]

  return;
 800fe6a:	bf00      	nop
}
 800fe6c:	3740      	adds	r7, #64	; 0x40
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}
 800fe72:	bf00      	nop
 800fe74:	20000174 	.word	0x20000174
 800fe78:	20001820 	.word	0x20001820
 800fe7c:	20001824 	.word	0x20001824
 800fe80:	20000170 	.word	0x20000170
 800fe84:	20001828 	.word	0x20001828
 800fe88:	200018b0 	.word	0x200018b0
 800fe8c:	2000182c 	.word	0x2000182c
 800fe90:	20001830 	.word	0x20001830

0800fe94 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b088      	sub	sp, #32
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	60f8      	str	r0, [r7, #12]
 800fe9c:	60b9      	str	r1, [r7, #8]
 800fe9e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fea0:	f3ef 8310 	mrs	r3, PRIMASK
 800fea4:	617b      	str	r3, [r7, #20]
  return(result);
 800fea6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800fea8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800feaa:	b672      	cpsid	i
}
 800feac:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800feae:	68f8      	ldr	r0, [r7, #12]
 800feb0:	f000 f8f6 	bl	80100a0 <SEQ_BitPosition>
 800feb4:	4603      	mov	r3, r0
 800feb6:	4619      	mov	r1, r3
 800feb8:	4a06      	ldr	r2, [pc, #24]	; (800fed4 <UTIL_SEQ_RegTask+0x40>)
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800fec0:	69fb      	ldr	r3, [r7, #28]
 800fec2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fec4:	69bb      	ldr	r3, [r7, #24]
 800fec6:	f383 8810 	msr	PRIMASK, r3
}
 800feca:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800fecc:	bf00      	nop
}
 800fece:	3720      	adds	r7, #32
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}
 800fed4:	20001830 	.word	0x20001830

0800fed8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800fed8:	b480      	push	{r7}
 800feda:	b087      	sub	sp, #28
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fee2:	f3ef 8310 	mrs	r3, PRIMASK
 800fee6:	60fb      	str	r3, [r7, #12]
  return(result);
 800fee8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800feea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800feec:	b672      	cpsid	i
}
 800feee:	bf00      	nop

  TaskSet |= TaskId_bm;
 800fef0:	4b0d      	ldr	r3, [pc, #52]	; (800ff28 <UTIL_SEQ_SetTask+0x50>)
 800fef2:	681a      	ldr	r2, [r3, #0]
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	4313      	orrs	r3, r2
 800fef8:	4a0b      	ldr	r2, [pc, #44]	; (800ff28 <UTIL_SEQ_SetTask+0x50>)
 800fefa:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800fefc:	4a0b      	ldr	r2, [pc, #44]	; (800ff2c <UTIL_SEQ_SetTask+0x54>)
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	431a      	orrs	r2, r3
 800ff08:	4908      	ldr	r1, [pc, #32]	; (800ff2c <UTIL_SEQ_SetTask+0x54>)
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800ff10:	697b      	ldr	r3, [r7, #20]
 800ff12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ff14:	693b      	ldr	r3, [r7, #16]
 800ff16:	f383 8810 	msr	PRIMASK, r3
}
 800ff1a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ff1c:	bf00      	nop
}
 800ff1e:	371c      	adds	r7, #28
 800ff20:	46bd      	mov	sp, r7
 800ff22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff26:	4770      	bx	lr
 800ff28:	20001820 	.word	0x20001820
 800ff2c:	200018b0 	.word	0x200018b0

0800ff30 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800ff30:	b480      	push	{r7}
 800ff32:	b087      	sub	sp, #28
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff38:	f3ef 8310 	mrs	r3, PRIMASK
 800ff3c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ff3e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ff40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ff42:	b672      	cpsid	i
}
 800ff44:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	43da      	mvns	r2, r3
 800ff4a:	4b08      	ldr	r3, [pc, #32]	; (800ff6c <UTIL_SEQ_PauseTask+0x3c>)
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	4013      	ands	r3, r2
 800ff50:	4a06      	ldr	r2, [pc, #24]	; (800ff6c <UTIL_SEQ_PauseTask+0x3c>)
 800ff52:	6013      	str	r3, [r2, #0]
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	f383 8810 	msr	PRIMASK, r3
}
 800ff5e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ff60:	bf00      	nop
}
 800ff62:	371c      	adds	r7, #28
 800ff64:	46bd      	mov	sp, r7
 800ff66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6a:	4770      	bx	lr
 800ff6c:	20000170 	.word	0x20000170

0800ff70 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800ff70:	b480      	push	{r7}
 800ff72:	b087      	sub	sp, #28
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff78:	f3ef 8310 	mrs	r3, PRIMASK
 800ff7c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ff7e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ff80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ff82:	b672      	cpsid	i
}
 800ff84:	bf00      	nop

  TaskMask |= TaskId_bm;
 800ff86:	4b09      	ldr	r3, [pc, #36]	; (800ffac <UTIL_SEQ_ResumeTask+0x3c>)
 800ff88:	681a      	ldr	r2, [r3, #0]
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	4313      	orrs	r3, r2
 800ff8e:	4a07      	ldr	r2, [pc, #28]	; (800ffac <UTIL_SEQ_ResumeTask+0x3c>)
 800ff90:	6013      	str	r3, [r2, #0]
 800ff92:	697b      	ldr	r3, [r7, #20]
 800ff94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ff96:	693b      	ldr	r3, [r7, #16]
 800ff98:	f383 8810 	msr	PRIMASK, r3
}
 800ff9c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ff9e:	bf00      	nop
}
 800ffa0:	371c      	adds	r7, #28
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa8:	4770      	bx	lr
 800ffaa:	bf00      	nop
 800ffac:	20000170 	.word	0x20000170

0800ffb0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b087      	sub	sp, #28
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ffb8:	f3ef 8310 	mrs	r3, PRIMASK
 800ffbc:	60fb      	str	r3, [r7, #12]
  return(result);
 800ffbe:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ffc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ffc2:	b672      	cpsid	i
}
 800ffc4:	bf00      	nop

  EvtSet |= EvtId_bm;
 800ffc6:	4b09      	ldr	r3, [pc, #36]	; (800ffec <UTIL_SEQ_SetEvt+0x3c>)
 800ffc8:	681a      	ldr	r2, [r3, #0]
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	4313      	orrs	r3, r2
 800ffce:	4a07      	ldr	r2, [pc, #28]	; (800ffec <UTIL_SEQ_SetEvt+0x3c>)
 800ffd0:	6013      	str	r3, [r2, #0]
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ffd6:	693b      	ldr	r3, [r7, #16]
 800ffd8:	f383 8810 	msr	PRIMASK, r3
}
 800ffdc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ffde:	bf00      	nop
}
 800ffe0:	371c      	adds	r7, #28
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe8:	4770      	bx	lr
 800ffea:	bf00      	nop
 800ffec:	20001824 	.word	0x20001824

0800fff0 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b088      	sub	sp, #32
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800fff8:	4b1f      	ldr	r3, [pc, #124]	; (8010078 <UTIL_SEQ_WaitEvt+0x88>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800fffe:	4b1e      	ldr	r3, [pc, #120]	; (8010078 <UTIL_SEQ_WaitEvt+0x88>)
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010006:	d102      	bne.n	801000e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8010008:	2300      	movs	r3, #0
 801000a:	61fb      	str	r3, [r7, #28]
 801000c:	e005      	b.n	801001a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 801000e:	4b1a      	ldr	r3, [pc, #104]	; (8010078 <UTIL_SEQ_WaitEvt+0x88>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	2201      	movs	r2, #1
 8010014:	fa02 f303 	lsl.w	r3, r2, r3
 8010018:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 801001a:	4b18      	ldr	r3, [pc, #96]	; (801007c <UTIL_SEQ_WaitEvt+0x8c>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8010020:	4a16      	ldr	r2, [pc, #88]	; (801007c <UTIL_SEQ_WaitEvt+0x8c>)
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8010026:	e003      	b.n	8010030 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8010028:	6879      	ldr	r1, [r7, #4]
 801002a:	69f8      	ldr	r0, [r7, #28]
 801002c:	f7f1 f99d 	bl	800136a <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8010030:	4b13      	ldr	r3, [pc, #76]	; (8010080 <UTIL_SEQ_WaitEvt+0x90>)
 8010032:	681a      	ldr	r2, [r3, #0]
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	4013      	ands	r3, r2
 8010038:	2b00      	cmp	r3, #0
 801003a:	d0f5      	beq.n	8010028 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 801003c:	4a0e      	ldr	r2, [pc, #56]	; (8010078 <UTIL_SEQ_WaitEvt+0x88>)
 801003e:	69bb      	ldr	r3, [r7, #24]
 8010040:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010042:	f3ef 8310 	mrs	r3, PRIMASK
 8010046:	60bb      	str	r3, [r7, #8]
  return(result);
 8010048:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801004a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801004c:	b672      	cpsid	i
}
 801004e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	43da      	mvns	r2, r3
 8010054:	4b0a      	ldr	r3, [pc, #40]	; (8010080 <UTIL_SEQ_WaitEvt+0x90>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	4013      	ands	r3, r2
 801005a:	4a09      	ldr	r2, [pc, #36]	; (8010080 <UTIL_SEQ_WaitEvt+0x90>)
 801005c:	6013      	str	r3, [r2, #0]
 801005e:	693b      	ldr	r3, [r7, #16]
 8010060:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	f383 8810 	msr	PRIMASK, r3
}
 8010068:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 801006a:	4a04      	ldr	r2, [pc, #16]	; (801007c <UTIL_SEQ_WaitEvt+0x8c>)
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	6013      	str	r3, [r2, #0]
  return;
 8010070:	bf00      	nop
}
 8010072:	3720      	adds	r7, #32
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}
 8010078:	2000182c 	.word	0x2000182c
 801007c:	20001828 	.word	0x20001828
 8010080:	20001824 	.word	0x20001824

08010084 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8010084:	b480      	push	{r7}
 8010086:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8010088:	bf00      	nop
}
 801008a:	46bd      	mov	sp, r7
 801008c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010090:	4770      	bx	lr

08010092 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8010092:	b480      	push	{r7}
 8010094:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8010096:	bf00      	nop
}
 8010098:	46bd      	mov	sp, r7
 801009a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009e:	4770      	bx	lr

080100a0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80100a0:	b480      	push	{r7}
 80100a2:	b085      	sub	sp, #20
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80100a8:	2300      	movs	r3, #0
 80100aa:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80100b0:	68bb      	ldr	r3, [r7, #8]
 80100b2:	0c1b      	lsrs	r3, r3, #16
 80100b4:	041b      	lsls	r3, r3, #16
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d104      	bne.n	80100c4 <SEQ_BitPosition+0x24>
 80100ba:	2310      	movs	r3, #16
 80100bc:	73fb      	strb	r3, [r7, #15]
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	041b      	lsls	r3, r3, #16
 80100c2:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80100c4:	68bb      	ldr	r3, [r7, #8]
 80100c6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d105      	bne.n	80100da <SEQ_BitPosition+0x3a>
 80100ce:	7bfb      	ldrb	r3, [r7, #15]
 80100d0:	3308      	adds	r3, #8
 80100d2:	73fb      	strb	r3, [r7, #15]
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	021b      	lsls	r3, r3, #8
 80100d8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d105      	bne.n	80100f0 <SEQ_BitPosition+0x50>
 80100e4:	7bfb      	ldrb	r3, [r7, #15]
 80100e6:	3304      	adds	r3, #4
 80100e8:	73fb      	strb	r3, [r7, #15]
 80100ea:	68bb      	ldr	r3, [r7, #8]
 80100ec:	011b      	lsls	r3, r3, #4
 80100ee:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	0f1b      	lsrs	r3, r3, #28
 80100f4:	4a07      	ldr	r2, [pc, #28]	; (8010114 <SEQ_BitPosition+0x74>)
 80100f6:	5cd2      	ldrb	r2, [r2, r3]
 80100f8:	7bfb      	ldrb	r3, [r7, #15]
 80100fa:	4413      	add	r3, r2
 80100fc:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80100fe:	7bfb      	ldrb	r3, [r7, #15]
 8010100:	f1c3 031f 	rsb	r3, r3, #31
 8010104:	b2db      	uxtb	r3, r3
}
 8010106:	4618      	mov	r0, r3
 8010108:	3714      	adds	r7, #20
 801010a:	46bd      	mov	sp, r7
 801010c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010110:	4770      	bx	lr
 8010112:	bf00      	nop
 8010114:	08014958 	.word	0x08014958

08010118 <__cvt>:
 8010118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801011c:	ec55 4b10 	vmov	r4, r5, d0
 8010120:	2d00      	cmp	r5, #0
 8010122:	460e      	mov	r6, r1
 8010124:	4619      	mov	r1, r3
 8010126:	462b      	mov	r3, r5
 8010128:	bfbb      	ittet	lt
 801012a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801012e:	461d      	movlt	r5, r3
 8010130:	2300      	movge	r3, #0
 8010132:	232d      	movlt	r3, #45	; 0x2d
 8010134:	700b      	strb	r3, [r1, #0]
 8010136:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010138:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801013c:	4691      	mov	r9, r2
 801013e:	f023 0820 	bic.w	r8, r3, #32
 8010142:	bfbc      	itt	lt
 8010144:	4622      	movlt	r2, r4
 8010146:	4614      	movlt	r4, r2
 8010148:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801014c:	d005      	beq.n	801015a <__cvt+0x42>
 801014e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010152:	d100      	bne.n	8010156 <__cvt+0x3e>
 8010154:	3601      	adds	r6, #1
 8010156:	2102      	movs	r1, #2
 8010158:	e000      	b.n	801015c <__cvt+0x44>
 801015a:	2103      	movs	r1, #3
 801015c:	ab03      	add	r3, sp, #12
 801015e:	9301      	str	r3, [sp, #4]
 8010160:	ab02      	add	r3, sp, #8
 8010162:	9300      	str	r3, [sp, #0]
 8010164:	ec45 4b10 	vmov	d0, r4, r5
 8010168:	4653      	mov	r3, sl
 801016a:	4632      	mov	r2, r6
 801016c:	f000 fe90 	bl	8010e90 <_dtoa_r>
 8010170:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010174:	4607      	mov	r7, r0
 8010176:	d102      	bne.n	801017e <__cvt+0x66>
 8010178:	f019 0f01 	tst.w	r9, #1
 801017c:	d022      	beq.n	80101c4 <__cvt+0xac>
 801017e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010182:	eb07 0906 	add.w	r9, r7, r6
 8010186:	d110      	bne.n	80101aa <__cvt+0x92>
 8010188:	783b      	ldrb	r3, [r7, #0]
 801018a:	2b30      	cmp	r3, #48	; 0x30
 801018c:	d10a      	bne.n	80101a4 <__cvt+0x8c>
 801018e:	2200      	movs	r2, #0
 8010190:	2300      	movs	r3, #0
 8010192:	4620      	mov	r0, r4
 8010194:	4629      	mov	r1, r5
 8010196:	f7f0 fc6f 	bl	8000a78 <__aeabi_dcmpeq>
 801019a:	b918      	cbnz	r0, 80101a4 <__cvt+0x8c>
 801019c:	f1c6 0601 	rsb	r6, r6, #1
 80101a0:	f8ca 6000 	str.w	r6, [sl]
 80101a4:	f8da 3000 	ldr.w	r3, [sl]
 80101a8:	4499      	add	r9, r3
 80101aa:	2200      	movs	r2, #0
 80101ac:	2300      	movs	r3, #0
 80101ae:	4620      	mov	r0, r4
 80101b0:	4629      	mov	r1, r5
 80101b2:	f7f0 fc61 	bl	8000a78 <__aeabi_dcmpeq>
 80101b6:	b108      	cbz	r0, 80101bc <__cvt+0xa4>
 80101b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80101bc:	2230      	movs	r2, #48	; 0x30
 80101be:	9b03      	ldr	r3, [sp, #12]
 80101c0:	454b      	cmp	r3, r9
 80101c2:	d307      	bcc.n	80101d4 <__cvt+0xbc>
 80101c4:	9b03      	ldr	r3, [sp, #12]
 80101c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80101c8:	1bdb      	subs	r3, r3, r7
 80101ca:	4638      	mov	r0, r7
 80101cc:	6013      	str	r3, [r2, #0]
 80101ce:	b004      	add	sp, #16
 80101d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101d4:	1c59      	adds	r1, r3, #1
 80101d6:	9103      	str	r1, [sp, #12]
 80101d8:	701a      	strb	r2, [r3, #0]
 80101da:	e7f0      	b.n	80101be <__cvt+0xa6>

080101dc <__exponent>:
 80101dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80101de:	4603      	mov	r3, r0
 80101e0:	2900      	cmp	r1, #0
 80101e2:	bfb8      	it	lt
 80101e4:	4249      	neglt	r1, r1
 80101e6:	f803 2b02 	strb.w	r2, [r3], #2
 80101ea:	bfb4      	ite	lt
 80101ec:	222d      	movlt	r2, #45	; 0x2d
 80101ee:	222b      	movge	r2, #43	; 0x2b
 80101f0:	2909      	cmp	r1, #9
 80101f2:	7042      	strb	r2, [r0, #1]
 80101f4:	dd2a      	ble.n	801024c <__exponent+0x70>
 80101f6:	f10d 0207 	add.w	r2, sp, #7
 80101fa:	4617      	mov	r7, r2
 80101fc:	260a      	movs	r6, #10
 80101fe:	4694      	mov	ip, r2
 8010200:	fb91 f5f6 	sdiv	r5, r1, r6
 8010204:	fb06 1415 	mls	r4, r6, r5, r1
 8010208:	3430      	adds	r4, #48	; 0x30
 801020a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801020e:	460c      	mov	r4, r1
 8010210:	2c63      	cmp	r4, #99	; 0x63
 8010212:	f102 32ff 	add.w	r2, r2, #4294967295
 8010216:	4629      	mov	r1, r5
 8010218:	dcf1      	bgt.n	80101fe <__exponent+0x22>
 801021a:	3130      	adds	r1, #48	; 0x30
 801021c:	f1ac 0402 	sub.w	r4, ip, #2
 8010220:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010224:	1c41      	adds	r1, r0, #1
 8010226:	4622      	mov	r2, r4
 8010228:	42ba      	cmp	r2, r7
 801022a:	d30a      	bcc.n	8010242 <__exponent+0x66>
 801022c:	f10d 0209 	add.w	r2, sp, #9
 8010230:	eba2 020c 	sub.w	r2, r2, ip
 8010234:	42bc      	cmp	r4, r7
 8010236:	bf88      	it	hi
 8010238:	2200      	movhi	r2, #0
 801023a:	4413      	add	r3, r2
 801023c:	1a18      	subs	r0, r3, r0
 801023e:	b003      	add	sp, #12
 8010240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010242:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010246:	f801 5f01 	strb.w	r5, [r1, #1]!
 801024a:	e7ed      	b.n	8010228 <__exponent+0x4c>
 801024c:	2330      	movs	r3, #48	; 0x30
 801024e:	3130      	adds	r1, #48	; 0x30
 8010250:	7083      	strb	r3, [r0, #2]
 8010252:	70c1      	strb	r1, [r0, #3]
 8010254:	1d03      	adds	r3, r0, #4
 8010256:	e7f1      	b.n	801023c <__exponent+0x60>

08010258 <_printf_float>:
 8010258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801025c:	ed2d 8b02 	vpush	{d8}
 8010260:	b08d      	sub	sp, #52	; 0x34
 8010262:	460c      	mov	r4, r1
 8010264:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010268:	4616      	mov	r6, r2
 801026a:	461f      	mov	r7, r3
 801026c:	4605      	mov	r5, r0
 801026e:	f000 fcff 	bl	8010c70 <_localeconv_r>
 8010272:	f8d0 a000 	ldr.w	sl, [r0]
 8010276:	4650      	mov	r0, sl
 8010278:	f7ef ffd2 	bl	8000220 <strlen>
 801027c:	2300      	movs	r3, #0
 801027e:	930a      	str	r3, [sp, #40]	; 0x28
 8010280:	6823      	ldr	r3, [r4, #0]
 8010282:	9305      	str	r3, [sp, #20]
 8010284:	f8d8 3000 	ldr.w	r3, [r8]
 8010288:	f894 b018 	ldrb.w	fp, [r4, #24]
 801028c:	3307      	adds	r3, #7
 801028e:	f023 0307 	bic.w	r3, r3, #7
 8010292:	f103 0208 	add.w	r2, r3, #8
 8010296:	f8c8 2000 	str.w	r2, [r8]
 801029a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801029e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80102a2:	9307      	str	r3, [sp, #28]
 80102a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80102a8:	ee08 0a10 	vmov	s16, r0
 80102ac:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80102b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80102b4:	4b9e      	ldr	r3, [pc, #632]	; (8010530 <_printf_float+0x2d8>)
 80102b6:	f04f 32ff 	mov.w	r2, #4294967295
 80102ba:	f7f0 fc0f 	bl	8000adc <__aeabi_dcmpun>
 80102be:	bb88      	cbnz	r0, 8010324 <_printf_float+0xcc>
 80102c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80102c4:	4b9a      	ldr	r3, [pc, #616]	; (8010530 <_printf_float+0x2d8>)
 80102c6:	f04f 32ff 	mov.w	r2, #4294967295
 80102ca:	f7f0 fbe9 	bl	8000aa0 <__aeabi_dcmple>
 80102ce:	bb48      	cbnz	r0, 8010324 <_printf_float+0xcc>
 80102d0:	2200      	movs	r2, #0
 80102d2:	2300      	movs	r3, #0
 80102d4:	4640      	mov	r0, r8
 80102d6:	4649      	mov	r1, r9
 80102d8:	f7f0 fbd8 	bl	8000a8c <__aeabi_dcmplt>
 80102dc:	b110      	cbz	r0, 80102e4 <_printf_float+0x8c>
 80102de:	232d      	movs	r3, #45	; 0x2d
 80102e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80102e4:	4a93      	ldr	r2, [pc, #588]	; (8010534 <_printf_float+0x2dc>)
 80102e6:	4b94      	ldr	r3, [pc, #592]	; (8010538 <_printf_float+0x2e0>)
 80102e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80102ec:	bf94      	ite	ls
 80102ee:	4690      	movls	r8, r2
 80102f0:	4698      	movhi	r8, r3
 80102f2:	2303      	movs	r3, #3
 80102f4:	6123      	str	r3, [r4, #16]
 80102f6:	9b05      	ldr	r3, [sp, #20]
 80102f8:	f023 0304 	bic.w	r3, r3, #4
 80102fc:	6023      	str	r3, [r4, #0]
 80102fe:	f04f 0900 	mov.w	r9, #0
 8010302:	9700      	str	r7, [sp, #0]
 8010304:	4633      	mov	r3, r6
 8010306:	aa0b      	add	r2, sp, #44	; 0x2c
 8010308:	4621      	mov	r1, r4
 801030a:	4628      	mov	r0, r5
 801030c:	f000 f9da 	bl	80106c4 <_printf_common>
 8010310:	3001      	adds	r0, #1
 8010312:	f040 8090 	bne.w	8010436 <_printf_float+0x1de>
 8010316:	f04f 30ff 	mov.w	r0, #4294967295
 801031a:	b00d      	add	sp, #52	; 0x34
 801031c:	ecbd 8b02 	vpop	{d8}
 8010320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010324:	4642      	mov	r2, r8
 8010326:	464b      	mov	r3, r9
 8010328:	4640      	mov	r0, r8
 801032a:	4649      	mov	r1, r9
 801032c:	f7f0 fbd6 	bl	8000adc <__aeabi_dcmpun>
 8010330:	b140      	cbz	r0, 8010344 <_printf_float+0xec>
 8010332:	464b      	mov	r3, r9
 8010334:	2b00      	cmp	r3, #0
 8010336:	bfbc      	itt	lt
 8010338:	232d      	movlt	r3, #45	; 0x2d
 801033a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801033e:	4a7f      	ldr	r2, [pc, #508]	; (801053c <_printf_float+0x2e4>)
 8010340:	4b7f      	ldr	r3, [pc, #508]	; (8010540 <_printf_float+0x2e8>)
 8010342:	e7d1      	b.n	80102e8 <_printf_float+0x90>
 8010344:	6863      	ldr	r3, [r4, #4]
 8010346:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801034a:	9206      	str	r2, [sp, #24]
 801034c:	1c5a      	adds	r2, r3, #1
 801034e:	d13f      	bne.n	80103d0 <_printf_float+0x178>
 8010350:	2306      	movs	r3, #6
 8010352:	6063      	str	r3, [r4, #4]
 8010354:	9b05      	ldr	r3, [sp, #20]
 8010356:	6861      	ldr	r1, [r4, #4]
 8010358:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801035c:	2300      	movs	r3, #0
 801035e:	9303      	str	r3, [sp, #12]
 8010360:	ab0a      	add	r3, sp, #40	; 0x28
 8010362:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010366:	ab09      	add	r3, sp, #36	; 0x24
 8010368:	ec49 8b10 	vmov	d0, r8, r9
 801036c:	9300      	str	r3, [sp, #0]
 801036e:	6022      	str	r2, [r4, #0]
 8010370:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010374:	4628      	mov	r0, r5
 8010376:	f7ff fecf 	bl	8010118 <__cvt>
 801037a:	9b06      	ldr	r3, [sp, #24]
 801037c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801037e:	2b47      	cmp	r3, #71	; 0x47
 8010380:	4680      	mov	r8, r0
 8010382:	d108      	bne.n	8010396 <_printf_float+0x13e>
 8010384:	1cc8      	adds	r0, r1, #3
 8010386:	db02      	blt.n	801038e <_printf_float+0x136>
 8010388:	6863      	ldr	r3, [r4, #4]
 801038a:	4299      	cmp	r1, r3
 801038c:	dd41      	ble.n	8010412 <_printf_float+0x1ba>
 801038e:	f1ab 0302 	sub.w	r3, fp, #2
 8010392:	fa5f fb83 	uxtb.w	fp, r3
 8010396:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801039a:	d820      	bhi.n	80103de <_printf_float+0x186>
 801039c:	3901      	subs	r1, #1
 801039e:	465a      	mov	r2, fp
 80103a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80103a4:	9109      	str	r1, [sp, #36]	; 0x24
 80103a6:	f7ff ff19 	bl	80101dc <__exponent>
 80103aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80103ac:	1813      	adds	r3, r2, r0
 80103ae:	2a01      	cmp	r2, #1
 80103b0:	4681      	mov	r9, r0
 80103b2:	6123      	str	r3, [r4, #16]
 80103b4:	dc02      	bgt.n	80103bc <_printf_float+0x164>
 80103b6:	6822      	ldr	r2, [r4, #0]
 80103b8:	07d2      	lsls	r2, r2, #31
 80103ba:	d501      	bpl.n	80103c0 <_printf_float+0x168>
 80103bc:	3301      	adds	r3, #1
 80103be:	6123      	str	r3, [r4, #16]
 80103c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d09c      	beq.n	8010302 <_printf_float+0xaa>
 80103c8:	232d      	movs	r3, #45	; 0x2d
 80103ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80103ce:	e798      	b.n	8010302 <_printf_float+0xaa>
 80103d0:	9a06      	ldr	r2, [sp, #24]
 80103d2:	2a47      	cmp	r2, #71	; 0x47
 80103d4:	d1be      	bne.n	8010354 <_printf_float+0xfc>
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d1bc      	bne.n	8010354 <_printf_float+0xfc>
 80103da:	2301      	movs	r3, #1
 80103dc:	e7b9      	b.n	8010352 <_printf_float+0xfa>
 80103de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80103e2:	d118      	bne.n	8010416 <_printf_float+0x1be>
 80103e4:	2900      	cmp	r1, #0
 80103e6:	6863      	ldr	r3, [r4, #4]
 80103e8:	dd0b      	ble.n	8010402 <_printf_float+0x1aa>
 80103ea:	6121      	str	r1, [r4, #16]
 80103ec:	b913      	cbnz	r3, 80103f4 <_printf_float+0x19c>
 80103ee:	6822      	ldr	r2, [r4, #0]
 80103f0:	07d0      	lsls	r0, r2, #31
 80103f2:	d502      	bpl.n	80103fa <_printf_float+0x1a2>
 80103f4:	3301      	adds	r3, #1
 80103f6:	440b      	add	r3, r1
 80103f8:	6123      	str	r3, [r4, #16]
 80103fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80103fc:	f04f 0900 	mov.w	r9, #0
 8010400:	e7de      	b.n	80103c0 <_printf_float+0x168>
 8010402:	b913      	cbnz	r3, 801040a <_printf_float+0x1b2>
 8010404:	6822      	ldr	r2, [r4, #0]
 8010406:	07d2      	lsls	r2, r2, #31
 8010408:	d501      	bpl.n	801040e <_printf_float+0x1b6>
 801040a:	3302      	adds	r3, #2
 801040c:	e7f4      	b.n	80103f8 <_printf_float+0x1a0>
 801040e:	2301      	movs	r3, #1
 8010410:	e7f2      	b.n	80103f8 <_printf_float+0x1a0>
 8010412:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010418:	4299      	cmp	r1, r3
 801041a:	db05      	blt.n	8010428 <_printf_float+0x1d0>
 801041c:	6823      	ldr	r3, [r4, #0]
 801041e:	6121      	str	r1, [r4, #16]
 8010420:	07d8      	lsls	r0, r3, #31
 8010422:	d5ea      	bpl.n	80103fa <_printf_float+0x1a2>
 8010424:	1c4b      	adds	r3, r1, #1
 8010426:	e7e7      	b.n	80103f8 <_printf_float+0x1a0>
 8010428:	2900      	cmp	r1, #0
 801042a:	bfd4      	ite	le
 801042c:	f1c1 0202 	rsble	r2, r1, #2
 8010430:	2201      	movgt	r2, #1
 8010432:	4413      	add	r3, r2
 8010434:	e7e0      	b.n	80103f8 <_printf_float+0x1a0>
 8010436:	6823      	ldr	r3, [r4, #0]
 8010438:	055a      	lsls	r2, r3, #21
 801043a:	d407      	bmi.n	801044c <_printf_float+0x1f4>
 801043c:	6923      	ldr	r3, [r4, #16]
 801043e:	4642      	mov	r2, r8
 8010440:	4631      	mov	r1, r6
 8010442:	4628      	mov	r0, r5
 8010444:	47b8      	blx	r7
 8010446:	3001      	adds	r0, #1
 8010448:	d12c      	bne.n	80104a4 <_printf_float+0x24c>
 801044a:	e764      	b.n	8010316 <_printf_float+0xbe>
 801044c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010450:	f240 80e0 	bls.w	8010614 <_printf_float+0x3bc>
 8010454:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010458:	2200      	movs	r2, #0
 801045a:	2300      	movs	r3, #0
 801045c:	f7f0 fb0c 	bl	8000a78 <__aeabi_dcmpeq>
 8010460:	2800      	cmp	r0, #0
 8010462:	d034      	beq.n	80104ce <_printf_float+0x276>
 8010464:	4a37      	ldr	r2, [pc, #220]	; (8010544 <_printf_float+0x2ec>)
 8010466:	2301      	movs	r3, #1
 8010468:	4631      	mov	r1, r6
 801046a:	4628      	mov	r0, r5
 801046c:	47b8      	blx	r7
 801046e:	3001      	adds	r0, #1
 8010470:	f43f af51 	beq.w	8010316 <_printf_float+0xbe>
 8010474:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010478:	429a      	cmp	r2, r3
 801047a:	db02      	blt.n	8010482 <_printf_float+0x22a>
 801047c:	6823      	ldr	r3, [r4, #0]
 801047e:	07d8      	lsls	r0, r3, #31
 8010480:	d510      	bpl.n	80104a4 <_printf_float+0x24c>
 8010482:	ee18 3a10 	vmov	r3, s16
 8010486:	4652      	mov	r2, sl
 8010488:	4631      	mov	r1, r6
 801048a:	4628      	mov	r0, r5
 801048c:	47b8      	blx	r7
 801048e:	3001      	adds	r0, #1
 8010490:	f43f af41 	beq.w	8010316 <_printf_float+0xbe>
 8010494:	f04f 0800 	mov.w	r8, #0
 8010498:	f104 091a 	add.w	r9, r4, #26
 801049c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801049e:	3b01      	subs	r3, #1
 80104a0:	4543      	cmp	r3, r8
 80104a2:	dc09      	bgt.n	80104b8 <_printf_float+0x260>
 80104a4:	6823      	ldr	r3, [r4, #0]
 80104a6:	079b      	lsls	r3, r3, #30
 80104a8:	f100 8107 	bmi.w	80106ba <_printf_float+0x462>
 80104ac:	68e0      	ldr	r0, [r4, #12]
 80104ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104b0:	4298      	cmp	r0, r3
 80104b2:	bfb8      	it	lt
 80104b4:	4618      	movlt	r0, r3
 80104b6:	e730      	b.n	801031a <_printf_float+0xc2>
 80104b8:	2301      	movs	r3, #1
 80104ba:	464a      	mov	r2, r9
 80104bc:	4631      	mov	r1, r6
 80104be:	4628      	mov	r0, r5
 80104c0:	47b8      	blx	r7
 80104c2:	3001      	adds	r0, #1
 80104c4:	f43f af27 	beq.w	8010316 <_printf_float+0xbe>
 80104c8:	f108 0801 	add.w	r8, r8, #1
 80104cc:	e7e6      	b.n	801049c <_printf_float+0x244>
 80104ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	dc39      	bgt.n	8010548 <_printf_float+0x2f0>
 80104d4:	4a1b      	ldr	r2, [pc, #108]	; (8010544 <_printf_float+0x2ec>)
 80104d6:	2301      	movs	r3, #1
 80104d8:	4631      	mov	r1, r6
 80104da:	4628      	mov	r0, r5
 80104dc:	47b8      	blx	r7
 80104de:	3001      	adds	r0, #1
 80104e0:	f43f af19 	beq.w	8010316 <_printf_float+0xbe>
 80104e4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80104e8:	4313      	orrs	r3, r2
 80104ea:	d102      	bne.n	80104f2 <_printf_float+0x29a>
 80104ec:	6823      	ldr	r3, [r4, #0]
 80104ee:	07d9      	lsls	r1, r3, #31
 80104f0:	d5d8      	bpl.n	80104a4 <_printf_float+0x24c>
 80104f2:	ee18 3a10 	vmov	r3, s16
 80104f6:	4652      	mov	r2, sl
 80104f8:	4631      	mov	r1, r6
 80104fa:	4628      	mov	r0, r5
 80104fc:	47b8      	blx	r7
 80104fe:	3001      	adds	r0, #1
 8010500:	f43f af09 	beq.w	8010316 <_printf_float+0xbe>
 8010504:	f04f 0900 	mov.w	r9, #0
 8010508:	f104 0a1a 	add.w	sl, r4, #26
 801050c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801050e:	425b      	negs	r3, r3
 8010510:	454b      	cmp	r3, r9
 8010512:	dc01      	bgt.n	8010518 <_printf_float+0x2c0>
 8010514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010516:	e792      	b.n	801043e <_printf_float+0x1e6>
 8010518:	2301      	movs	r3, #1
 801051a:	4652      	mov	r2, sl
 801051c:	4631      	mov	r1, r6
 801051e:	4628      	mov	r0, r5
 8010520:	47b8      	blx	r7
 8010522:	3001      	adds	r0, #1
 8010524:	f43f aef7 	beq.w	8010316 <_printf_float+0xbe>
 8010528:	f109 0901 	add.w	r9, r9, #1
 801052c:	e7ee      	b.n	801050c <_printf_float+0x2b4>
 801052e:	bf00      	nop
 8010530:	7fefffff 	.word	0x7fefffff
 8010534:	08014968 	.word	0x08014968
 8010538:	0801496c 	.word	0x0801496c
 801053c:	08014970 	.word	0x08014970
 8010540:	08014974 	.word	0x08014974
 8010544:	08014978 	.word	0x08014978
 8010548:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801054a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801054c:	429a      	cmp	r2, r3
 801054e:	bfa8      	it	ge
 8010550:	461a      	movge	r2, r3
 8010552:	2a00      	cmp	r2, #0
 8010554:	4691      	mov	r9, r2
 8010556:	dc37      	bgt.n	80105c8 <_printf_float+0x370>
 8010558:	f04f 0b00 	mov.w	fp, #0
 801055c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010560:	f104 021a 	add.w	r2, r4, #26
 8010564:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010566:	9305      	str	r3, [sp, #20]
 8010568:	eba3 0309 	sub.w	r3, r3, r9
 801056c:	455b      	cmp	r3, fp
 801056e:	dc33      	bgt.n	80105d8 <_printf_float+0x380>
 8010570:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010574:	429a      	cmp	r2, r3
 8010576:	db3b      	blt.n	80105f0 <_printf_float+0x398>
 8010578:	6823      	ldr	r3, [r4, #0]
 801057a:	07da      	lsls	r2, r3, #31
 801057c:	d438      	bmi.n	80105f0 <_printf_float+0x398>
 801057e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010582:	eba2 0903 	sub.w	r9, r2, r3
 8010586:	9b05      	ldr	r3, [sp, #20]
 8010588:	1ad2      	subs	r2, r2, r3
 801058a:	4591      	cmp	r9, r2
 801058c:	bfa8      	it	ge
 801058e:	4691      	movge	r9, r2
 8010590:	f1b9 0f00 	cmp.w	r9, #0
 8010594:	dc35      	bgt.n	8010602 <_printf_float+0x3aa>
 8010596:	f04f 0800 	mov.w	r8, #0
 801059a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801059e:	f104 0a1a 	add.w	sl, r4, #26
 80105a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80105a6:	1a9b      	subs	r3, r3, r2
 80105a8:	eba3 0309 	sub.w	r3, r3, r9
 80105ac:	4543      	cmp	r3, r8
 80105ae:	f77f af79 	ble.w	80104a4 <_printf_float+0x24c>
 80105b2:	2301      	movs	r3, #1
 80105b4:	4652      	mov	r2, sl
 80105b6:	4631      	mov	r1, r6
 80105b8:	4628      	mov	r0, r5
 80105ba:	47b8      	blx	r7
 80105bc:	3001      	adds	r0, #1
 80105be:	f43f aeaa 	beq.w	8010316 <_printf_float+0xbe>
 80105c2:	f108 0801 	add.w	r8, r8, #1
 80105c6:	e7ec      	b.n	80105a2 <_printf_float+0x34a>
 80105c8:	4613      	mov	r3, r2
 80105ca:	4631      	mov	r1, r6
 80105cc:	4642      	mov	r2, r8
 80105ce:	4628      	mov	r0, r5
 80105d0:	47b8      	blx	r7
 80105d2:	3001      	adds	r0, #1
 80105d4:	d1c0      	bne.n	8010558 <_printf_float+0x300>
 80105d6:	e69e      	b.n	8010316 <_printf_float+0xbe>
 80105d8:	2301      	movs	r3, #1
 80105da:	4631      	mov	r1, r6
 80105dc:	4628      	mov	r0, r5
 80105de:	9205      	str	r2, [sp, #20]
 80105e0:	47b8      	blx	r7
 80105e2:	3001      	adds	r0, #1
 80105e4:	f43f ae97 	beq.w	8010316 <_printf_float+0xbe>
 80105e8:	9a05      	ldr	r2, [sp, #20]
 80105ea:	f10b 0b01 	add.w	fp, fp, #1
 80105ee:	e7b9      	b.n	8010564 <_printf_float+0x30c>
 80105f0:	ee18 3a10 	vmov	r3, s16
 80105f4:	4652      	mov	r2, sl
 80105f6:	4631      	mov	r1, r6
 80105f8:	4628      	mov	r0, r5
 80105fa:	47b8      	blx	r7
 80105fc:	3001      	adds	r0, #1
 80105fe:	d1be      	bne.n	801057e <_printf_float+0x326>
 8010600:	e689      	b.n	8010316 <_printf_float+0xbe>
 8010602:	9a05      	ldr	r2, [sp, #20]
 8010604:	464b      	mov	r3, r9
 8010606:	4442      	add	r2, r8
 8010608:	4631      	mov	r1, r6
 801060a:	4628      	mov	r0, r5
 801060c:	47b8      	blx	r7
 801060e:	3001      	adds	r0, #1
 8010610:	d1c1      	bne.n	8010596 <_printf_float+0x33e>
 8010612:	e680      	b.n	8010316 <_printf_float+0xbe>
 8010614:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010616:	2a01      	cmp	r2, #1
 8010618:	dc01      	bgt.n	801061e <_printf_float+0x3c6>
 801061a:	07db      	lsls	r3, r3, #31
 801061c:	d53a      	bpl.n	8010694 <_printf_float+0x43c>
 801061e:	2301      	movs	r3, #1
 8010620:	4642      	mov	r2, r8
 8010622:	4631      	mov	r1, r6
 8010624:	4628      	mov	r0, r5
 8010626:	47b8      	blx	r7
 8010628:	3001      	adds	r0, #1
 801062a:	f43f ae74 	beq.w	8010316 <_printf_float+0xbe>
 801062e:	ee18 3a10 	vmov	r3, s16
 8010632:	4652      	mov	r2, sl
 8010634:	4631      	mov	r1, r6
 8010636:	4628      	mov	r0, r5
 8010638:	47b8      	blx	r7
 801063a:	3001      	adds	r0, #1
 801063c:	f43f ae6b 	beq.w	8010316 <_printf_float+0xbe>
 8010640:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010644:	2200      	movs	r2, #0
 8010646:	2300      	movs	r3, #0
 8010648:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801064c:	f7f0 fa14 	bl	8000a78 <__aeabi_dcmpeq>
 8010650:	b9d8      	cbnz	r0, 801068a <_printf_float+0x432>
 8010652:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010656:	f108 0201 	add.w	r2, r8, #1
 801065a:	4631      	mov	r1, r6
 801065c:	4628      	mov	r0, r5
 801065e:	47b8      	blx	r7
 8010660:	3001      	adds	r0, #1
 8010662:	d10e      	bne.n	8010682 <_printf_float+0x42a>
 8010664:	e657      	b.n	8010316 <_printf_float+0xbe>
 8010666:	2301      	movs	r3, #1
 8010668:	4652      	mov	r2, sl
 801066a:	4631      	mov	r1, r6
 801066c:	4628      	mov	r0, r5
 801066e:	47b8      	blx	r7
 8010670:	3001      	adds	r0, #1
 8010672:	f43f ae50 	beq.w	8010316 <_printf_float+0xbe>
 8010676:	f108 0801 	add.w	r8, r8, #1
 801067a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801067c:	3b01      	subs	r3, #1
 801067e:	4543      	cmp	r3, r8
 8010680:	dcf1      	bgt.n	8010666 <_printf_float+0x40e>
 8010682:	464b      	mov	r3, r9
 8010684:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010688:	e6da      	b.n	8010440 <_printf_float+0x1e8>
 801068a:	f04f 0800 	mov.w	r8, #0
 801068e:	f104 0a1a 	add.w	sl, r4, #26
 8010692:	e7f2      	b.n	801067a <_printf_float+0x422>
 8010694:	2301      	movs	r3, #1
 8010696:	4642      	mov	r2, r8
 8010698:	e7df      	b.n	801065a <_printf_float+0x402>
 801069a:	2301      	movs	r3, #1
 801069c:	464a      	mov	r2, r9
 801069e:	4631      	mov	r1, r6
 80106a0:	4628      	mov	r0, r5
 80106a2:	47b8      	blx	r7
 80106a4:	3001      	adds	r0, #1
 80106a6:	f43f ae36 	beq.w	8010316 <_printf_float+0xbe>
 80106aa:	f108 0801 	add.w	r8, r8, #1
 80106ae:	68e3      	ldr	r3, [r4, #12]
 80106b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80106b2:	1a5b      	subs	r3, r3, r1
 80106b4:	4543      	cmp	r3, r8
 80106b6:	dcf0      	bgt.n	801069a <_printf_float+0x442>
 80106b8:	e6f8      	b.n	80104ac <_printf_float+0x254>
 80106ba:	f04f 0800 	mov.w	r8, #0
 80106be:	f104 0919 	add.w	r9, r4, #25
 80106c2:	e7f4      	b.n	80106ae <_printf_float+0x456>

080106c4 <_printf_common>:
 80106c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106c8:	4616      	mov	r6, r2
 80106ca:	4699      	mov	r9, r3
 80106cc:	688a      	ldr	r2, [r1, #8]
 80106ce:	690b      	ldr	r3, [r1, #16]
 80106d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80106d4:	4293      	cmp	r3, r2
 80106d6:	bfb8      	it	lt
 80106d8:	4613      	movlt	r3, r2
 80106da:	6033      	str	r3, [r6, #0]
 80106dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80106e0:	4607      	mov	r7, r0
 80106e2:	460c      	mov	r4, r1
 80106e4:	b10a      	cbz	r2, 80106ea <_printf_common+0x26>
 80106e6:	3301      	adds	r3, #1
 80106e8:	6033      	str	r3, [r6, #0]
 80106ea:	6823      	ldr	r3, [r4, #0]
 80106ec:	0699      	lsls	r1, r3, #26
 80106ee:	bf42      	ittt	mi
 80106f0:	6833      	ldrmi	r3, [r6, #0]
 80106f2:	3302      	addmi	r3, #2
 80106f4:	6033      	strmi	r3, [r6, #0]
 80106f6:	6825      	ldr	r5, [r4, #0]
 80106f8:	f015 0506 	ands.w	r5, r5, #6
 80106fc:	d106      	bne.n	801070c <_printf_common+0x48>
 80106fe:	f104 0a19 	add.w	sl, r4, #25
 8010702:	68e3      	ldr	r3, [r4, #12]
 8010704:	6832      	ldr	r2, [r6, #0]
 8010706:	1a9b      	subs	r3, r3, r2
 8010708:	42ab      	cmp	r3, r5
 801070a:	dc26      	bgt.n	801075a <_printf_common+0x96>
 801070c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010710:	1e13      	subs	r3, r2, #0
 8010712:	6822      	ldr	r2, [r4, #0]
 8010714:	bf18      	it	ne
 8010716:	2301      	movne	r3, #1
 8010718:	0692      	lsls	r2, r2, #26
 801071a:	d42b      	bmi.n	8010774 <_printf_common+0xb0>
 801071c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010720:	4649      	mov	r1, r9
 8010722:	4638      	mov	r0, r7
 8010724:	47c0      	blx	r8
 8010726:	3001      	adds	r0, #1
 8010728:	d01e      	beq.n	8010768 <_printf_common+0xa4>
 801072a:	6823      	ldr	r3, [r4, #0]
 801072c:	6922      	ldr	r2, [r4, #16]
 801072e:	f003 0306 	and.w	r3, r3, #6
 8010732:	2b04      	cmp	r3, #4
 8010734:	bf02      	ittt	eq
 8010736:	68e5      	ldreq	r5, [r4, #12]
 8010738:	6833      	ldreq	r3, [r6, #0]
 801073a:	1aed      	subeq	r5, r5, r3
 801073c:	68a3      	ldr	r3, [r4, #8]
 801073e:	bf0c      	ite	eq
 8010740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010744:	2500      	movne	r5, #0
 8010746:	4293      	cmp	r3, r2
 8010748:	bfc4      	itt	gt
 801074a:	1a9b      	subgt	r3, r3, r2
 801074c:	18ed      	addgt	r5, r5, r3
 801074e:	2600      	movs	r6, #0
 8010750:	341a      	adds	r4, #26
 8010752:	42b5      	cmp	r5, r6
 8010754:	d11a      	bne.n	801078c <_printf_common+0xc8>
 8010756:	2000      	movs	r0, #0
 8010758:	e008      	b.n	801076c <_printf_common+0xa8>
 801075a:	2301      	movs	r3, #1
 801075c:	4652      	mov	r2, sl
 801075e:	4649      	mov	r1, r9
 8010760:	4638      	mov	r0, r7
 8010762:	47c0      	blx	r8
 8010764:	3001      	adds	r0, #1
 8010766:	d103      	bne.n	8010770 <_printf_common+0xac>
 8010768:	f04f 30ff 	mov.w	r0, #4294967295
 801076c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010770:	3501      	adds	r5, #1
 8010772:	e7c6      	b.n	8010702 <_printf_common+0x3e>
 8010774:	18e1      	adds	r1, r4, r3
 8010776:	1c5a      	adds	r2, r3, #1
 8010778:	2030      	movs	r0, #48	; 0x30
 801077a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801077e:	4422      	add	r2, r4
 8010780:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010784:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010788:	3302      	adds	r3, #2
 801078a:	e7c7      	b.n	801071c <_printf_common+0x58>
 801078c:	2301      	movs	r3, #1
 801078e:	4622      	mov	r2, r4
 8010790:	4649      	mov	r1, r9
 8010792:	4638      	mov	r0, r7
 8010794:	47c0      	blx	r8
 8010796:	3001      	adds	r0, #1
 8010798:	d0e6      	beq.n	8010768 <_printf_common+0xa4>
 801079a:	3601      	adds	r6, #1
 801079c:	e7d9      	b.n	8010752 <_printf_common+0x8e>
	...

080107a0 <_printf_i>:
 80107a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80107a4:	7e0f      	ldrb	r7, [r1, #24]
 80107a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80107a8:	2f78      	cmp	r7, #120	; 0x78
 80107aa:	4691      	mov	r9, r2
 80107ac:	4680      	mov	r8, r0
 80107ae:	460c      	mov	r4, r1
 80107b0:	469a      	mov	sl, r3
 80107b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80107b6:	d807      	bhi.n	80107c8 <_printf_i+0x28>
 80107b8:	2f62      	cmp	r7, #98	; 0x62
 80107ba:	d80a      	bhi.n	80107d2 <_printf_i+0x32>
 80107bc:	2f00      	cmp	r7, #0
 80107be:	f000 80d4 	beq.w	801096a <_printf_i+0x1ca>
 80107c2:	2f58      	cmp	r7, #88	; 0x58
 80107c4:	f000 80c0 	beq.w	8010948 <_printf_i+0x1a8>
 80107c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80107cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80107d0:	e03a      	b.n	8010848 <_printf_i+0xa8>
 80107d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80107d6:	2b15      	cmp	r3, #21
 80107d8:	d8f6      	bhi.n	80107c8 <_printf_i+0x28>
 80107da:	a101      	add	r1, pc, #4	; (adr r1, 80107e0 <_printf_i+0x40>)
 80107dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80107e0:	08010839 	.word	0x08010839
 80107e4:	0801084d 	.word	0x0801084d
 80107e8:	080107c9 	.word	0x080107c9
 80107ec:	080107c9 	.word	0x080107c9
 80107f0:	080107c9 	.word	0x080107c9
 80107f4:	080107c9 	.word	0x080107c9
 80107f8:	0801084d 	.word	0x0801084d
 80107fc:	080107c9 	.word	0x080107c9
 8010800:	080107c9 	.word	0x080107c9
 8010804:	080107c9 	.word	0x080107c9
 8010808:	080107c9 	.word	0x080107c9
 801080c:	08010951 	.word	0x08010951
 8010810:	08010879 	.word	0x08010879
 8010814:	0801090b 	.word	0x0801090b
 8010818:	080107c9 	.word	0x080107c9
 801081c:	080107c9 	.word	0x080107c9
 8010820:	08010973 	.word	0x08010973
 8010824:	080107c9 	.word	0x080107c9
 8010828:	08010879 	.word	0x08010879
 801082c:	080107c9 	.word	0x080107c9
 8010830:	080107c9 	.word	0x080107c9
 8010834:	08010913 	.word	0x08010913
 8010838:	682b      	ldr	r3, [r5, #0]
 801083a:	1d1a      	adds	r2, r3, #4
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	602a      	str	r2, [r5, #0]
 8010840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010848:	2301      	movs	r3, #1
 801084a:	e09f      	b.n	801098c <_printf_i+0x1ec>
 801084c:	6820      	ldr	r0, [r4, #0]
 801084e:	682b      	ldr	r3, [r5, #0]
 8010850:	0607      	lsls	r7, r0, #24
 8010852:	f103 0104 	add.w	r1, r3, #4
 8010856:	6029      	str	r1, [r5, #0]
 8010858:	d501      	bpl.n	801085e <_printf_i+0xbe>
 801085a:	681e      	ldr	r6, [r3, #0]
 801085c:	e003      	b.n	8010866 <_printf_i+0xc6>
 801085e:	0646      	lsls	r6, r0, #25
 8010860:	d5fb      	bpl.n	801085a <_printf_i+0xba>
 8010862:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010866:	2e00      	cmp	r6, #0
 8010868:	da03      	bge.n	8010872 <_printf_i+0xd2>
 801086a:	232d      	movs	r3, #45	; 0x2d
 801086c:	4276      	negs	r6, r6
 801086e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010872:	485a      	ldr	r0, [pc, #360]	; (80109dc <_printf_i+0x23c>)
 8010874:	230a      	movs	r3, #10
 8010876:	e012      	b.n	801089e <_printf_i+0xfe>
 8010878:	682b      	ldr	r3, [r5, #0]
 801087a:	6820      	ldr	r0, [r4, #0]
 801087c:	1d19      	adds	r1, r3, #4
 801087e:	6029      	str	r1, [r5, #0]
 8010880:	0605      	lsls	r5, r0, #24
 8010882:	d501      	bpl.n	8010888 <_printf_i+0xe8>
 8010884:	681e      	ldr	r6, [r3, #0]
 8010886:	e002      	b.n	801088e <_printf_i+0xee>
 8010888:	0641      	lsls	r1, r0, #25
 801088a:	d5fb      	bpl.n	8010884 <_printf_i+0xe4>
 801088c:	881e      	ldrh	r6, [r3, #0]
 801088e:	4853      	ldr	r0, [pc, #332]	; (80109dc <_printf_i+0x23c>)
 8010890:	2f6f      	cmp	r7, #111	; 0x6f
 8010892:	bf0c      	ite	eq
 8010894:	2308      	moveq	r3, #8
 8010896:	230a      	movne	r3, #10
 8010898:	2100      	movs	r1, #0
 801089a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801089e:	6865      	ldr	r5, [r4, #4]
 80108a0:	60a5      	str	r5, [r4, #8]
 80108a2:	2d00      	cmp	r5, #0
 80108a4:	bfa2      	ittt	ge
 80108a6:	6821      	ldrge	r1, [r4, #0]
 80108a8:	f021 0104 	bicge.w	r1, r1, #4
 80108ac:	6021      	strge	r1, [r4, #0]
 80108ae:	b90e      	cbnz	r6, 80108b4 <_printf_i+0x114>
 80108b0:	2d00      	cmp	r5, #0
 80108b2:	d04b      	beq.n	801094c <_printf_i+0x1ac>
 80108b4:	4615      	mov	r5, r2
 80108b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80108ba:	fb03 6711 	mls	r7, r3, r1, r6
 80108be:	5dc7      	ldrb	r7, [r0, r7]
 80108c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80108c4:	4637      	mov	r7, r6
 80108c6:	42bb      	cmp	r3, r7
 80108c8:	460e      	mov	r6, r1
 80108ca:	d9f4      	bls.n	80108b6 <_printf_i+0x116>
 80108cc:	2b08      	cmp	r3, #8
 80108ce:	d10b      	bne.n	80108e8 <_printf_i+0x148>
 80108d0:	6823      	ldr	r3, [r4, #0]
 80108d2:	07de      	lsls	r6, r3, #31
 80108d4:	d508      	bpl.n	80108e8 <_printf_i+0x148>
 80108d6:	6923      	ldr	r3, [r4, #16]
 80108d8:	6861      	ldr	r1, [r4, #4]
 80108da:	4299      	cmp	r1, r3
 80108dc:	bfde      	ittt	le
 80108de:	2330      	movle	r3, #48	; 0x30
 80108e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80108e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80108e8:	1b52      	subs	r2, r2, r5
 80108ea:	6122      	str	r2, [r4, #16]
 80108ec:	f8cd a000 	str.w	sl, [sp]
 80108f0:	464b      	mov	r3, r9
 80108f2:	aa03      	add	r2, sp, #12
 80108f4:	4621      	mov	r1, r4
 80108f6:	4640      	mov	r0, r8
 80108f8:	f7ff fee4 	bl	80106c4 <_printf_common>
 80108fc:	3001      	adds	r0, #1
 80108fe:	d14a      	bne.n	8010996 <_printf_i+0x1f6>
 8010900:	f04f 30ff 	mov.w	r0, #4294967295
 8010904:	b004      	add	sp, #16
 8010906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801090a:	6823      	ldr	r3, [r4, #0]
 801090c:	f043 0320 	orr.w	r3, r3, #32
 8010910:	6023      	str	r3, [r4, #0]
 8010912:	4833      	ldr	r0, [pc, #204]	; (80109e0 <_printf_i+0x240>)
 8010914:	2778      	movs	r7, #120	; 0x78
 8010916:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801091a:	6823      	ldr	r3, [r4, #0]
 801091c:	6829      	ldr	r1, [r5, #0]
 801091e:	061f      	lsls	r7, r3, #24
 8010920:	f851 6b04 	ldr.w	r6, [r1], #4
 8010924:	d402      	bmi.n	801092c <_printf_i+0x18c>
 8010926:	065f      	lsls	r7, r3, #25
 8010928:	bf48      	it	mi
 801092a:	b2b6      	uxthmi	r6, r6
 801092c:	07df      	lsls	r7, r3, #31
 801092e:	bf48      	it	mi
 8010930:	f043 0320 	orrmi.w	r3, r3, #32
 8010934:	6029      	str	r1, [r5, #0]
 8010936:	bf48      	it	mi
 8010938:	6023      	strmi	r3, [r4, #0]
 801093a:	b91e      	cbnz	r6, 8010944 <_printf_i+0x1a4>
 801093c:	6823      	ldr	r3, [r4, #0]
 801093e:	f023 0320 	bic.w	r3, r3, #32
 8010942:	6023      	str	r3, [r4, #0]
 8010944:	2310      	movs	r3, #16
 8010946:	e7a7      	b.n	8010898 <_printf_i+0xf8>
 8010948:	4824      	ldr	r0, [pc, #144]	; (80109dc <_printf_i+0x23c>)
 801094a:	e7e4      	b.n	8010916 <_printf_i+0x176>
 801094c:	4615      	mov	r5, r2
 801094e:	e7bd      	b.n	80108cc <_printf_i+0x12c>
 8010950:	682b      	ldr	r3, [r5, #0]
 8010952:	6826      	ldr	r6, [r4, #0]
 8010954:	6961      	ldr	r1, [r4, #20]
 8010956:	1d18      	adds	r0, r3, #4
 8010958:	6028      	str	r0, [r5, #0]
 801095a:	0635      	lsls	r5, r6, #24
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	d501      	bpl.n	8010964 <_printf_i+0x1c4>
 8010960:	6019      	str	r1, [r3, #0]
 8010962:	e002      	b.n	801096a <_printf_i+0x1ca>
 8010964:	0670      	lsls	r0, r6, #25
 8010966:	d5fb      	bpl.n	8010960 <_printf_i+0x1c0>
 8010968:	8019      	strh	r1, [r3, #0]
 801096a:	2300      	movs	r3, #0
 801096c:	6123      	str	r3, [r4, #16]
 801096e:	4615      	mov	r5, r2
 8010970:	e7bc      	b.n	80108ec <_printf_i+0x14c>
 8010972:	682b      	ldr	r3, [r5, #0]
 8010974:	1d1a      	adds	r2, r3, #4
 8010976:	602a      	str	r2, [r5, #0]
 8010978:	681d      	ldr	r5, [r3, #0]
 801097a:	6862      	ldr	r2, [r4, #4]
 801097c:	2100      	movs	r1, #0
 801097e:	4628      	mov	r0, r5
 8010980:	f7ef fbfe 	bl	8000180 <memchr>
 8010984:	b108      	cbz	r0, 801098a <_printf_i+0x1ea>
 8010986:	1b40      	subs	r0, r0, r5
 8010988:	6060      	str	r0, [r4, #4]
 801098a:	6863      	ldr	r3, [r4, #4]
 801098c:	6123      	str	r3, [r4, #16]
 801098e:	2300      	movs	r3, #0
 8010990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010994:	e7aa      	b.n	80108ec <_printf_i+0x14c>
 8010996:	6923      	ldr	r3, [r4, #16]
 8010998:	462a      	mov	r2, r5
 801099a:	4649      	mov	r1, r9
 801099c:	4640      	mov	r0, r8
 801099e:	47d0      	blx	sl
 80109a0:	3001      	adds	r0, #1
 80109a2:	d0ad      	beq.n	8010900 <_printf_i+0x160>
 80109a4:	6823      	ldr	r3, [r4, #0]
 80109a6:	079b      	lsls	r3, r3, #30
 80109a8:	d413      	bmi.n	80109d2 <_printf_i+0x232>
 80109aa:	68e0      	ldr	r0, [r4, #12]
 80109ac:	9b03      	ldr	r3, [sp, #12]
 80109ae:	4298      	cmp	r0, r3
 80109b0:	bfb8      	it	lt
 80109b2:	4618      	movlt	r0, r3
 80109b4:	e7a6      	b.n	8010904 <_printf_i+0x164>
 80109b6:	2301      	movs	r3, #1
 80109b8:	4632      	mov	r2, r6
 80109ba:	4649      	mov	r1, r9
 80109bc:	4640      	mov	r0, r8
 80109be:	47d0      	blx	sl
 80109c0:	3001      	adds	r0, #1
 80109c2:	d09d      	beq.n	8010900 <_printf_i+0x160>
 80109c4:	3501      	adds	r5, #1
 80109c6:	68e3      	ldr	r3, [r4, #12]
 80109c8:	9903      	ldr	r1, [sp, #12]
 80109ca:	1a5b      	subs	r3, r3, r1
 80109cc:	42ab      	cmp	r3, r5
 80109ce:	dcf2      	bgt.n	80109b6 <_printf_i+0x216>
 80109d0:	e7eb      	b.n	80109aa <_printf_i+0x20a>
 80109d2:	2500      	movs	r5, #0
 80109d4:	f104 0619 	add.w	r6, r4, #25
 80109d8:	e7f5      	b.n	80109c6 <_printf_i+0x226>
 80109da:	bf00      	nop
 80109dc:	0801497a 	.word	0x0801497a
 80109e0:	0801498b 	.word	0x0801498b

080109e4 <std>:
 80109e4:	2300      	movs	r3, #0
 80109e6:	b510      	push	{r4, lr}
 80109e8:	4604      	mov	r4, r0
 80109ea:	e9c0 3300 	strd	r3, r3, [r0]
 80109ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80109f2:	6083      	str	r3, [r0, #8]
 80109f4:	8181      	strh	r1, [r0, #12]
 80109f6:	6643      	str	r3, [r0, #100]	; 0x64
 80109f8:	81c2      	strh	r2, [r0, #14]
 80109fa:	6183      	str	r3, [r0, #24]
 80109fc:	4619      	mov	r1, r3
 80109fe:	2208      	movs	r2, #8
 8010a00:	305c      	adds	r0, #92	; 0x5c
 8010a02:	f000 f92d 	bl	8010c60 <memset>
 8010a06:	4b0d      	ldr	r3, [pc, #52]	; (8010a3c <std+0x58>)
 8010a08:	6263      	str	r3, [r4, #36]	; 0x24
 8010a0a:	4b0d      	ldr	r3, [pc, #52]	; (8010a40 <std+0x5c>)
 8010a0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8010a0e:	4b0d      	ldr	r3, [pc, #52]	; (8010a44 <std+0x60>)
 8010a10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010a12:	4b0d      	ldr	r3, [pc, #52]	; (8010a48 <std+0x64>)
 8010a14:	6323      	str	r3, [r4, #48]	; 0x30
 8010a16:	4b0d      	ldr	r3, [pc, #52]	; (8010a4c <std+0x68>)
 8010a18:	6224      	str	r4, [r4, #32]
 8010a1a:	429c      	cmp	r4, r3
 8010a1c:	d006      	beq.n	8010a2c <std+0x48>
 8010a1e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010a22:	4294      	cmp	r4, r2
 8010a24:	d002      	beq.n	8010a2c <std+0x48>
 8010a26:	33d0      	adds	r3, #208	; 0xd0
 8010a28:	429c      	cmp	r4, r3
 8010a2a:	d105      	bne.n	8010a38 <std+0x54>
 8010a2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a34:	f000 b990 	b.w	8010d58 <__retarget_lock_init_recursive>
 8010a38:	bd10      	pop	{r4, pc}
 8010a3a:	bf00      	nop
 8010a3c:	08010b69 	.word	0x08010b69
 8010a40:	08010b8b 	.word	0x08010b8b
 8010a44:	08010bc3 	.word	0x08010bc3
 8010a48:	08010be7 	.word	0x08010be7
 8010a4c:	200018c0 	.word	0x200018c0

08010a50 <stdio_exit_handler>:
 8010a50:	4a02      	ldr	r2, [pc, #8]	; (8010a5c <stdio_exit_handler+0xc>)
 8010a52:	4903      	ldr	r1, [pc, #12]	; (8010a60 <stdio_exit_handler+0x10>)
 8010a54:	4803      	ldr	r0, [pc, #12]	; (8010a64 <stdio_exit_handler+0x14>)
 8010a56:	f000 b869 	b.w	8010b2c <_fwalk_sglue>
 8010a5a:	bf00      	nop
 8010a5c:	20000178 	.word	0x20000178
 8010a60:	080129b1 	.word	0x080129b1
 8010a64:	20000184 	.word	0x20000184

08010a68 <cleanup_stdio>:
 8010a68:	6841      	ldr	r1, [r0, #4]
 8010a6a:	4b0c      	ldr	r3, [pc, #48]	; (8010a9c <cleanup_stdio+0x34>)
 8010a6c:	4299      	cmp	r1, r3
 8010a6e:	b510      	push	{r4, lr}
 8010a70:	4604      	mov	r4, r0
 8010a72:	d001      	beq.n	8010a78 <cleanup_stdio+0x10>
 8010a74:	f001 ff9c 	bl	80129b0 <_fflush_r>
 8010a78:	68a1      	ldr	r1, [r4, #8]
 8010a7a:	4b09      	ldr	r3, [pc, #36]	; (8010aa0 <cleanup_stdio+0x38>)
 8010a7c:	4299      	cmp	r1, r3
 8010a7e:	d002      	beq.n	8010a86 <cleanup_stdio+0x1e>
 8010a80:	4620      	mov	r0, r4
 8010a82:	f001 ff95 	bl	80129b0 <_fflush_r>
 8010a86:	68e1      	ldr	r1, [r4, #12]
 8010a88:	4b06      	ldr	r3, [pc, #24]	; (8010aa4 <cleanup_stdio+0x3c>)
 8010a8a:	4299      	cmp	r1, r3
 8010a8c:	d004      	beq.n	8010a98 <cleanup_stdio+0x30>
 8010a8e:	4620      	mov	r0, r4
 8010a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a94:	f001 bf8c 	b.w	80129b0 <_fflush_r>
 8010a98:	bd10      	pop	{r4, pc}
 8010a9a:	bf00      	nop
 8010a9c:	200018c0 	.word	0x200018c0
 8010aa0:	20001928 	.word	0x20001928
 8010aa4:	20001990 	.word	0x20001990

08010aa8 <global_stdio_init.part.0>:
 8010aa8:	b510      	push	{r4, lr}
 8010aaa:	4b0b      	ldr	r3, [pc, #44]	; (8010ad8 <global_stdio_init.part.0+0x30>)
 8010aac:	4c0b      	ldr	r4, [pc, #44]	; (8010adc <global_stdio_init.part.0+0x34>)
 8010aae:	4a0c      	ldr	r2, [pc, #48]	; (8010ae0 <global_stdio_init.part.0+0x38>)
 8010ab0:	601a      	str	r2, [r3, #0]
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	2104      	movs	r1, #4
 8010ab8:	f7ff ff94 	bl	80109e4 <std>
 8010abc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010ac0:	2201      	movs	r2, #1
 8010ac2:	2109      	movs	r1, #9
 8010ac4:	f7ff ff8e 	bl	80109e4 <std>
 8010ac8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010acc:	2202      	movs	r2, #2
 8010ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ad2:	2112      	movs	r1, #18
 8010ad4:	f7ff bf86 	b.w	80109e4 <std>
 8010ad8:	200019f8 	.word	0x200019f8
 8010adc:	200018c0 	.word	0x200018c0
 8010ae0:	08010a51 	.word	0x08010a51

08010ae4 <__sfp_lock_acquire>:
 8010ae4:	4801      	ldr	r0, [pc, #4]	; (8010aec <__sfp_lock_acquire+0x8>)
 8010ae6:	f000 b938 	b.w	8010d5a <__retarget_lock_acquire_recursive>
 8010aea:	bf00      	nop
 8010aec:	20001a01 	.word	0x20001a01

08010af0 <__sfp_lock_release>:
 8010af0:	4801      	ldr	r0, [pc, #4]	; (8010af8 <__sfp_lock_release+0x8>)
 8010af2:	f000 b933 	b.w	8010d5c <__retarget_lock_release_recursive>
 8010af6:	bf00      	nop
 8010af8:	20001a01 	.word	0x20001a01

08010afc <__sinit>:
 8010afc:	b510      	push	{r4, lr}
 8010afe:	4604      	mov	r4, r0
 8010b00:	f7ff fff0 	bl	8010ae4 <__sfp_lock_acquire>
 8010b04:	6a23      	ldr	r3, [r4, #32]
 8010b06:	b11b      	cbz	r3, 8010b10 <__sinit+0x14>
 8010b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b0c:	f7ff bff0 	b.w	8010af0 <__sfp_lock_release>
 8010b10:	4b04      	ldr	r3, [pc, #16]	; (8010b24 <__sinit+0x28>)
 8010b12:	6223      	str	r3, [r4, #32]
 8010b14:	4b04      	ldr	r3, [pc, #16]	; (8010b28 <__sinit+0x2c>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d1f5      	bne.n	8010b08 <__sinit+0xc>
 8010b1c:	f7ff ffc4 	bl	8010aa8 <global_stdio_init.part.0>
 8010b20:	e7f2      	b.n	8010b08 <__sinit+0xc>
 8010b22:	bf00      	nop
 8010b24:	08010a69 	.word	0x08010a69
 8010b28:	200019f8 	.word	0x200019f8

08010b2c <_fwalk_sglue>:
 8010b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b30:	4607      	mov	r7, r0
 8010b32:	4688      	mov	r8, r1
 8010b34:	4614      	mov	r4, r2
 8010b36:	2600      	movs	r6, #0
 8010b38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010b3c:	f1b9 0901 	subs.w	r9, r9, #1
 8010b40:	d505      	bpl.n	8010b4e <_fwalk_sglue+0x22>
 8010b42:	6824      	ldr	r4, [r4, #0]
 8010b44:	2c00      	cmp	r4, #0
 8010b46:	d1f7      	bne.n	8010b38 <_fwalk_sglue+0xc>
 8010b48:	4630      	mov	r0, r6
 8010b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b4e:	89ab      	ldrh	r3, [r5, #12]
 8010b50:	2b01      	cmp	r3, #1
 8010b52:	d907      	bls.n	8010b64 <_fwalk_sglue+0x38>
 8010b54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010b58:	3301      	adds	r3, #1
 8010b5a:	d003      	beq.n	8010b64 <_fwalk_sglue+0x38>
 8010b5c:	4629      	mov	r1, r5
 8010b5e:	4638      	mov	r0, r7
 8010b60:	47c0      	blx	r8
 8010b62:	4306      	orrs	r6, r0
 8010b64:	3568      	adds	r5, #104	; 0x68
 8010b66:	e7e9      	b.n	8010b3c <_fwalk_sglue+0x10>

08010b68 <__sread>:
 8010b68:	b510      	push	{r4, lr}
 8010b6a:	460c      	mov	r4, r1
 8010b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b70:	f000 f8a4 	bl	8010cbc <_read_r>
 8010b74:	2800      	cmp	r0, #0
 8010b76:	bfab      	itete	ge
 8010b78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010b7a:	89a3      	ldrhlt	r3, [r4, #12]
 8010b7c:	181b      	addge	r3, r3, r0
 8010b7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010b82:	bfac      	ite	ge
 8010b84:	6563      	strge	r3, [r4, #84]	; 0x54
 8010b86:	81a3      	strhlt	r3, [r4, #12]
 8010b88:	bd10      	pop	{r4, pc}

08010b8a <__swrite>:
 8010b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b8e:	461f      	mov	r7, r3
 8010b90:	898b      	ldrh	r3, [r1, #12]
 8010b92:	05db      	lsls	r3, r3, #23
 8010b94:	4605      	mov	r5, r0
 8010b96:	460c      	mov	r4, r1
 8010b98:	4616      	mov	r6, r2
 8010b9a:	d505      	bpl.n	8010ba8 <__swrite+0x1e>
 8010b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ba0:	2302      	movs	r3, #2
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	f000 f878 	bl	8010c98 <_lseek_r>
 8010ba8:	89a3      	ldrh	r3, [r4, #12]
 8010baa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010bae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010bb2:	81a3      	strh	r3, [r4, #12]
 8010bb4:	4632      	mov	r2, r6
 8010bb6:	463b      	mov	r3, r7
 8010bb8:	4628      	mov	r0, r5
 8010bba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010bbe:	f000 b88f 	b.w	8010ce0 <_write_r>

08010bc2 <__sseek>:
 8010bc2:	b510      	push	{r4, lr}
 8010bc4:	460c      	mov	r4, r1
 8010bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bca:	f000 f865 	bl	8010c98 <_lseek_r>
 8010bce:	1c43      	adds	r3, r0, #1
 8010bd0:	89a3      	ldrh	r3, [r4, #12]
 8010bd2:	bf15      	itete	ne
 8010bd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8010bd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010bda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010bde:	81a3      	strheq	r3, [r4, #12]
 8010be0:	bf18      	it	ne
 8010be2:	81a3      	strhne	r3, [r4, #12]
 8010be4:	bd10      	pop	{r4, pc}

08010be6 <__sclose>:
 8010be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bea:	f000 b845 	b.w	8010c78 <_close_r>

08010bee <_vsniprintf_r>:
 8010bee:	b530      	push	{r4, r5, lr}
 8010bf0:	4614      	mov	r4, r2
 8010bf2:	2c00      	cmp	r4, #0
 8010bf4:	b09b      	sub	sp, #108	; 0x6c
 8010bf6:	4605      	mov	r5, r0
 8010bf8:	461a      	mov	r2, r3
 8010bfa:	da05      	bge.n	8010c08 <_vsniprintf_r+0x1a>
 8010bfc:	238b      	movs	r3, #139	; 0x8b
 8010bfe:	6003      	str	r3, [r0, #0]
 8010c00:	f04f 30ff 	mov.w	r0, #4294967295
 8010c04:	b01b      	add	sp, #108	; 0x6c
 8010c06:	bd30      	pop	{r4, r5, pc}
 8010c08:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010c0c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010c10:	bf14      	ite	ne
 8010c12:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010c16:	4623      	moveq	r3, r4
 8010c18:	9302      	str	r3, [sp, #8]
 8010c1a:	9305      	str	r3, [sp, #20]
 8010c1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010c20:	9100      	str	r1, [sp, #0]
 8010c22:	9104      	str	r1, [sp, #16]
 8010c24:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010c28:	4669      	mov	r1, sp
 8010c2a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010c2c:	f001 fbf8 	bl	8012420 <_svfiprintf_r>
 8010c30:	1c43      	adds	r3, r0, #1
 8010c32:	bfbc      	itt	lt
 8010c34:	238b      	movlt	r3, #139	; 0x8b
 8010c36:	602b      	strlt	r3, [r5, #0]
 8010c38:	2c00      	cmp	r4, #0
 8010c3a:	d0e3      	beq.n	8010c04 <_vsniprintf_r+0x16>
 8010c3c:	9b00      	ldr	r3, [sp, #0]
 8010c3e:	2200      	movs	r2, #0
 8010c40:	701a      	strb	r2, [r3, #0]
 8010c42:	e7df      	b.n	8010c04 <_vsniprintf_r+0x16>

08010c44 <vsniprintf>:
 8010c44:	b507      	push	{r0, r1, r2, lr}
 8010c46:	9300      	str	r3, [sp, #0]
 8010c48:	4613      	mov	r3, r2
 8010c4a:	460a      	mov	r2, r1
 8010c4c:	4601      	mov	r1, r0
 8010c4e:	4803      	ldr	r0, [pc, #12]	; (8010c5c <vsniprintf+0x18>)
 8010c50:	6800      	ldr	r0, [r0, #0]
 8010c52:	f7ff ffcc 	bl	8010bee <_vsniprintf_r>
 8010c56:	b003      	add	sp, #12
 8010c58:	f85d fb04 	ldr.w	pc, [sp], #4
 8010c5c:	200001d0 	.word	0x200001d0

08010c60 <memset>:
 8010c60:	4402      	add	r2, r0
 8010c62:	4603      	mov	r3, r0
 8010c64:	4293      	cmp	r3, r2
 8010c66:	d100      	bne.n	8010c6a <memset+0xa>
 8010c68:	4770      	bx	lr
 8010c6a:	f803 1b01 	strb.w	r1, [r3], #1
 8010c6e:	e7f9      	b.n	8010c64 <memset+0x4>

08010c70 <_localeconv_r>:
 8010c70:	4800      	ldr	r0, [pc, #0]	; (8010c74 <_localeconv_r+0x4>)
 8010c72:	4770      	bx	lr
 8010c74:	200002c4 	.word	0x200002c4

08010c78 <_close_r>:
 8010c78:	b538      	push	{r3, r4, r5, lr}
 8010c7a:	4d06      	ldr	r5, [pc, #24]	; (8010c94 <_close_r+0x1c>)
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	4604      	mov	r4, r0
 8010c80:	4608      	mov	r0, r1
 8010c82:	602b      	str	r3, [r5, #0]
 8010c84:	f7f6 fbbd 	bl	8007402 <_close>
 8010c88:	1c43      	adds	r3, r0, #1
 8010c8a:	d102      	bne.n	8010c92 <_close_r+0x1a>
 8010c8c:	682b      	ldr	r3, [r5, #0]
 8010c8e:	b103      	cbz	r3, 8010c92 <_close_r+0x1a>
 8010c90:	6023      	str	r3, [r4, #0]
 8010c92:	bd38      	pop	{r3, r4, r5, pc}
 8010c94:	200019fc 	.word	0x200019fc

08010c98 <_lseek_r>:
 8010c98:	b538      	push	{r3, r4, r5, lr}
 8010c9a:	4d07      	ldr	r5, [pc, #28]	; (8010cb8 <_lseek_r+0x20>)
 8010c9c:	4604      	mov	r4, r0
 8010c9e:	4608      	mov	r0, r1
 8010ca0:	4611      	mov	r1, r2
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	602a      	str	r2, [r5, #0]
 8010ca6:	461a      	mov	r2, r3
 8010ca8:	f7f6 fbd2 	bl	8007450 <_lseek>
 8010cac:	1c43      	adds	r3, r0, #1
 8010cae:	d102      	bne.n	8010cb6 <_lseek_r+0x1e>
 8010cb0:	682b      	ldr	r3, [r5, #0]
 8010cb2:	b103      	cbz	r3, 8010cb6 <_lseek_r+0x1e>
 8010cb4:	6023      	str	r3, [r4, #0]
 8010cb6:	bd38      	pop	{r3, r4, r5, pc}
 8010cb8:	200019fc 	.word	0x200019fc

08010cbc <_read_r>:
 8010cbc:	b538      	push	{r3, r4, r5, lr}
 8010cbe:	4d07      	ldr	r5, [pc, #28]	; (8010cdc <_read_r+0x20>)
 8010cc0:	4604      	mov	r4, r0
 8010cc2:	4608      	mov	r0, r1
 8010cc4:	4611      	mov	r1, r2
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	602a      	str	r2, [r5, #0]
 8010cca:	461a      	mov	r2, r3
 8010ccc:	f7f6 fb60 	bl	8007390 <_read>
 8010cd0:	1c43      	adds	r3, r0, #1
 8010cd2:	d102      	bne.n	8010cda <_read_r+0x1e>
 8010cd4:	682b      	ldr	r3, [r5, #0]
 8010cd6:	b103      	cbz	r3, 8010cda <_read_r+0x1e>
 8010cd8:	6023      	str	r3, [r4, #0]
 8010cda:	bd38      	pop	{r3, r4, r5, pc}
 8010cdc:	200019fc 	.word	0x200019fc

08010ce0 <_write_r>:
 8010ce0:	b538      	push	{r3, r4, r5, lr}
 8010ce2:	4d07      	ldr	r5, [pc, #28]	; (8010d00 <_write_r+0x20>)
 8010ce4:	4604      	mov	r4, r0
 8010ce6:	4608      	mov	r0, r1
 8010ce8:	4611      	mov	r1, r2
 8010cea:	2200      	movs	r2, #0
 8010cec:	602a      	str	r2, [r5, #0]
 8010cee:	461a      	mov	r2, r3
 8010cf0:	f7f6 fb6b 	bl	80073ca <_write>
 8010cf4:	1c43      	adds	r3, r0, #1
 8010cf6:	d102      	bne.n	8010cfe <_write_r+0x1e>
 8010cf8:	682b      	ldr	r3, [r5, #0]
 8010cfa:	b103      	cbz	r3, 8010cfe <_write_r+0x1e>
 8010cfc:	6023      	str	r3, [r4, #0]
 8010cfe:	bd38      	pop	{r3, r4, r5, pc}
 8010d00:	200019fc 	.word	0x200019fc

08010d04 <__errno>:
 8010d04:	4b01      	ldr	r3, [pc, #4]	; (8010d0c <__errno+0x8>)
 8010d06:	6818      	ldr	r0, [r3, #0]
 8010d08:	4770      	bx	lr
 8010d0a:	bf00      	nop
 8010d0c:	200001d0 	.word	0x200001d0

08010d10 <__libc_init_array>:
 8010d10:	b570      	push	{r4, r5, r6, lr}
 8010d12:	4d0d      	ldr	r5, [pc, #52]	; (8010d48 <__libc_init_array+0x38>)
 8010d14:	4c0d      	ldr	r4, [pc, #52]	; (8010d4c <__libc_init_array+0x3c>)
 8010d16:	1b64      	subs	r4, r4, r5
 8010d18:	10a4      	asrs	r4, r4, #2
 8010d1a:	2600      	movs	r6, #0
 8010d1c:	42a6      	cmp	r6, r4
 8010d1e:	d109      	bne.n	8010d34 <__libc_init_array+0x24>
 8010d20:	4d0b      	ldr	r5, [pc, #44]	; (8010d50 <__libc_init_array+0x40>)
 8010d22:	4c0c      	ldr	r4, [pc, #48]	; (8010d54 <__libc_init_array+0x44>)
 8010d24:	f002 ffd0 	bl	8013cc8 <_init>
 8010d28:	1b64      	subs	r4, r4, r5
 8010d2a:	10a4      	asrs	r4, r4, #2
 8010d2c:	2600      	movs	r6, #0
 8010d2e:	42a6      	cmp	r6, r4
 8010d30:	d105      	bne.n	8010d3e <__libc_init_array+0x2e>
 8010d32:	bd70      	pop	{r4, r5, r6, pc}
 8010d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d38:	4798      	blx	r3
 8010d3a:	3601      	adds	r6, #1
 8010d3c:	e7ee      	b.n	8010d1c <__libc_init_array+0xc>
 8010d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d42:	4798      	blx	r3
 8010d44:	3601      	adds	r6, #1
 8010d46:	e7f2      	b.n	8010d2e <__libc_init_array+0x1e>
 8010d48:	08014d18 	.word	0x08014d18
 8010d4c:	08014d18 	.word	0x08014d18
 8010d50:	08014d18 	.word	0x08014d18
 8010d54:	08014d1c 	.word	0x08014d1c

08010d58 <__retarget_lock_init_recursive>:
 8010d58:	4770      	bx	lr

08010d5a <__retarget_lock_acquire_recursive>:
 8010d5a:	4770      	bx	lr

08010d5c <__retarget_lock_release_recursive>:
 8010d5c:	4770      	bx	lr

08010d5e <memcpy>:
 8010d5e:	440a      	add	r2, r1
 8010d60:	4291      	cmp	r1, r2
 8010d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8010d66:	d100      	bne.n	8010d6a <memcpy+0xc>
 8010d68:	4770      	bx	lr
 8010d6a:	b510      	push	{r4, lr}
 8010d6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010d74:	4291      	cmp	r1, r2
 8010d76:	d1f9      	bne.n	8010d6c <memcpy+0xe>
 8010d78:	bd10      	pop	{r4, pc}

08010d7a <quorem>:
 8010d7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d7e:	6903      	ldr	r3, [r0, #16]
 8010d80:	690c      	ldr	r4, [r1, #16]
 8010d82:	42a3      	cmp	r3, r4
 8010d84:	4607      	mov	r7, r0
 8010d86:	db7e      	blt.n	8010e86 <quorem+0x10c>
 8010d88:	3c01      	subs	r4, #1
 8010d8a:	f101 0814 	add.w	r8, r1, #20
 8010d8e:	f100 0514 	add.w	r5, r0, #20
 8010d92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010d96:	9301      	str	r3, [sp, #4]
 8010d98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010d9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010da0:	3301      	adds	r3, #1
 8010da2:	429a      	cmp	r2, r3
 8010da4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010da8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010dac:	fbb2 f6f3 	udiv	r6, r2, r3
 8010db0:	d331      	bcc.n	8010e16 <quorem+0x9c>
 8010db2:	f04f 0e00 	mov.w	lr, #0
 8010db6:	4640      	mov	r0, r8
 8010db8:	46ac      	mov	ip, r5
 8010dba:	46f2      	mov	sl, lr
 8010dbc:	f850 2b04 	ldr.w	r2, [r0], #4
 8010dc0:	b293      	uxth	r3, r2
 8010dc2:	fb06 e303 	mla	r3, r6, r3, lr
 8010dc6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010dca:	0c1a      	lsrs	r2, r3, #16
 8010dcc:	b29b      	uxth	r3, r3
 8010dce:	ebaa 0303 	sub.w	r3, sl, r3
 8010dd2:	f8dc a000 	ldr.w	sl, [ip]
 8010dd6:	fa13 f38a 	uxtah	r3, r3, sl
 8010dda:	fb06 220e 	mla	r2, r6, lr, r2
 8010dde:	9300      	str	r3, [sp, #0]
 8010de0:	9b00      	ldr	r3, [sp, #0]
 8010de2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010de6:	b292      	uxth	r2, r2
 8010de8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010dec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010df0:	f8bd 3000 	ldrh.w	r3, [sp]
 8010df4:	4581      	cmp	r9, r0
 8010df6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010dfa:	f84c 3b04 	str.w	r3, [ip], #4
 8010dfe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010e02:	d2db      	bcs.n	8010dbc <quorem+0x42>
 8010e04:	f855 300b 	ldr.w	r3, [r5, fp]
 8010e08:	b92b      	cbnz	r3, 8010e16 <quorem+0x9c>
 8010e0a:	9b01      	ldr	r3, [sp, #4]
 8010e0c:	3b04      	subs	r3, #4
 8010e0e:	429d      	cmp	r5, r3
 8010e10:	461a      	mov	r2, r3
 8010e12:	d32c      	bcc.n	8010e6e <quorem+0xf4>
 8010e14:	613c      	str	r4, [r7, #16]
 8010e16:	4638      	mov	r0, r7
 8010e18:	f001 f9a8 	bl	801216c <__mcmp>
 8010e1c:	2800      	cmp	r0, #0
 8010e1e:	db22      	blt.n	8010e66 <quorem+0xec>
 8010e20:	3601      	adds	r6, #1
 8010e22:	4629      	mov	r1, r5
 8010e24:	2000      	movs	r0, #0
 8010e26:	f858 2b04 	ldr.w	r2, [r8], #4
 8010e2a:	f8d1 c000 	ldr.w	ip, [r1]
 8010e2e:	b293      	uxth	r3, r2
 8010e30:	1ac3      	subs	r3, r0, r3
 8010e32:	0c12      	lsrs	r2, r2, #16
 8010e34:	fa13 f38c 	uxtah	r3, r3, ip
 8010e38:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8010e3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010e40:	b29b      	uxth	r3, r3
 8010e42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010e46:	45c1      	cmp	r9, r8
 8010e48:	f841 3b04 	str.w	r3, [r1], #4
 8010e4c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010e50:	d2e9      	bcs.n	8010e26 <quorem+0xac>
 8010e52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010e56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010e5a:	b922      	cbnz	r2, 8010e66 <quorem+0xec>
 8010e5c:	3b04      	subs	r3, #4
 8010e5e:	429d      	cmp	r5, r3
 8010e60:	461a      	mov	r2, r3
 8010e62:	d30a      	bcc.n	8010e7a <quorem+0x100>
 8010e64:	613c      	str	r4, [r7, #16]
 8010e66:	4630      	mov	r0, r6
 8010e68:	b003      	add	sp, #12
 8010e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e6e:	6812      	ldr	r2, [r2, #0]
 8010e70:	3b04      	subs	r3, #4
 8010e72:	2a00      	cmp	r2, #0
 8010e74:	d1ce      	bne.n	8010e14 <quorem+0x9a>
 8010e76:	3c01      	subs	r4, #1
 8010e78:	e7c9      	b.n	8010e0e <quorem+0x94>
 8010e7a:	6812      	ldr	r2, [r2, #0]
 8010e7c:	3b04      	subs	r3, #4
 8010e7e:	2a00      	cmp	r2, #0
 8010e80:	d1f0      	bne.n	8010e64 <quorem+0xea>
 8010e82:	3c01      	subs	r4, #1
 8010e84:	e7eb      	b.n	8010e5e <quorem+0xe4>
 8010e86:	2000      	movs	r0, #0
 8010e88:	e7ee      	b.n	8010e68 <quorem+0xee>
 8010e8a:	0000      	movs	r0, r0
 8010e8c:	0000      	movs	r0, r0
	...

08010e90 <_dtoa_r>:
 8010e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e94:	ed2d 8b04 	vpush	{d8-d9}
 8010e98:	69c5      	ldr	r5, [r0, #28]
 8010e9a:	b093      	sub	sp, #76	; 0x4c
 8010e9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010ea0:	ec57 6b10 	vmov	r6, r7, d0
 8010ea4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010ea8:	9107      	str	r1, [sp, #28]
 8010eaa:	4604      	mov	r4, r0
 8010eac:	920a      	str	r2, [sp, #40]	; 0x28
 8010eae:	930d      	str	r3, [sp, #52]	; 0x34
 8010eb0:	b975      	cbnz	r5, 8010ed0 <_dtoa_r+0x40>
 8010eb2:	2010      	movs	r0, #16
 8010eb4:	f000 fe2a 	bl	8011b0c <malloc>
 8010eb8:	4602      	mov	r2, r0
 8010eba:	61e0      	str	r0, [r4, #28]
 8010ebc:	b920      	cbnz	r0, 8010ec8 <_dtoa_r+0x38>
 8010ebe:	4bae      	ldr	r3, [pc, #696]	; (8011178 <_dtoa_r+0x2e8>)
 8010ec0:	21ef      	movs	r1, #239	; 0xef
 8010ec2:	48ae      	ldr	r0, [pc, #696]	; (801117c <_dtoa_r+0x2ec>)
 8010ec4:	f001 fe5c 	bl	8012b80 <__assert_func>
 8010ec8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010ecc:	6005      	str	r5, [r0, #0]
 8010ece:	60c5      	str	r5, [r0, #12]
 8010ed0:	69e3      	ldr	r3, [r4, #28]
 8010ed2:	6819      	ldr	r1, [r3, #0]
 8010ed4:	b151      	cbz	r1, 8010eec <_dtoa_r+0x5c>
 8010ed6:	685a      	ldr	r2, [r3, #4]
 8010ed8:	604a      	str	r2, [r1, #4]
 8010eda:	2301      	movs	r3, #1
 8010edc:	4093      	lsls	r3, r2
 8010ede:	608b      	str	r3, [r1, #8]
 8010ee0:	4620      	mov	r0, r4
 8010ee2:	f000 ff07 	bl	8011cf4 <_Bfree>
 8010ee6:	69e3      	ldr	r3, [r4, #28]
 8010ee8:	2200      	movs	r2, #0
 8010eea:	601a      	str	r2, [r3, #0]
 8010eec:	1e3b      	subs	r3, r7, #0
 8010eee:	bfbb      	ittet	lt
 8010ef0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010ef4:	9303      	strlt	r3, [sp, #12]
 8010ef6:	2300      	movge	r3, #0
 8010ef8:	2201      	movlt	r2, #1
 8010efa:	bfac      	ite	ge
 8010efc:	f8c8 3000 	strge.w	r3, [r8]
 8010f00:	f8c8 2000 	strlt.w	r2, [r8]
 8010f04:	4b9e      	ldr	r3, [pc, #632]	; (8011180 <_dtoa_r+0x2f0>)
 8010f06:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8010f0a:	ea33 0308 	bics.w	r3, r3, r8
 8010f0e:	d11b      	bne.n	8010f48 <_dtoa_r+0xb8>
 8010f10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010f12:	f242 730f 	movw	r3, #9999	; 0x270f
 8010f16:	6013      	str	r3, [r2, #0]
 8010f18:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8010f1c:	4333      	orrs	r3, r6
 8010f1e:	f000 8593 	beq.w	8011a48 <_dtoa_r+0xbb8>
 8010f22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010f24:	b963      	cbnz	r3, 8010f40 <_dtoa_r+0xb0>
 8010f26:	4b97      	ldr	r3, [pc, #604]	; (8011184 <_dtoa_r+0x2f4>)
 8010f28:	e027      	b.n	8010f7a <_dtoa_r+0xea>
 8010f2a:	4b97      	ldr	r3, [pc, #604]	; (8011188 <_dtoa_r+0x2f8>)
 8010f2c:	9300      	str	r3, [sp, #0]
 8010f2e:	3308      	adds	r3, #8
 8010f30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010f32:	6013      	str	r3, [r2, #0]
 8010f34:	9800      	ldr	r0, [sp, #0]
 8010f36:	b013      	add	sp, #76	; 0x4c
 8010f38:	ecbd 8b04 	vpop	{d8-d9}
 8010f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f40:	4b90      	ldr	r3, [pc, #576]	; (8011184 <_dtoa_r+0x2f4>)
 8010f42:	9300      	str	r3, [sp, #0]
 8010f44:	3303      	adds	r3, #3
 8010f46:	e7f3      	b.n	8010f30 <_dtoa_r+0xa0>
 8010f48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	ec51 0b17 	vmov	r0, r1, d7
 8010f52:	eeb0 8a47 	vmov.f32	s16, s14
 8010f56:	eef0 8a67 	vmov.f32	s17, s15
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	f7ef fd8c 	bl	8000a78 <__aeabi_dcmpeq>
 8010f60:	4681      	mov	r9, r0
 8010f62:	b160      	cbz	r0, 8010f7e <_dtoa_r+0xee>
 8010f64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010f66:	2301      	movs	r3, #1
 8010f68:	6013      	str	r3, [r2, #0]
 8010f6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	f000 8568 	beq.w	8011a42 <_dtoa_r+0xbb2>
 8010f72:	4b86      	ldr	r3, [pc, #536]	; (801118c <_dtoa_r+0x2fc>)
 8010f74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010f76:	6013      	str	r3, [r2, #0]
 8010f78:	3b01      	subs	r3, #1
 8010f7a:	9300      	str	r3, [sp, #0]
 8010f7c:	e7da      	b.n	8010f34 <_dtoa_r+0xa4>
 8010f7e:	aa10      	add	r2, sp, #64	; 0x40
 8010f80:	a911      	add	r1, sp, #68	; 0x44
 8010f82:	4620      	mov	r0, r4
 8010f84:	eeb0 0a48 	vmov.f32	s0, s16
 8010f88:	eef0 0a68 	vmov.f32	s1, s17
 8010f8c:	f001 f994 	bl	80122b8 <__d2b>
 8010f90:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010f94:	4682      	mov	sl, r0
 8010f96:	2d00      	cmp	r5, #0
 8010f98:	d07f      	beq.n	801109a <_dtoa_r+0x20a>
 8010f9a:	ee18 3a90 	vmov	r3, s17
 8010f9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010fa2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010fa6:	ec51 0b18 	vmov	r0, r1, d8
 8010faa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010fae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010fb2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8010fb6:	4619      	mov	r1, r3
 8010fb8:	2200      	movs	r2, #0
 8010fba:	4b75      	ldr	r3, [pc, #468]	; (8011190 <_dtoa_r+0x300>)
 8010fbc:	f7ef f93c 	bl	8000238 <__aeabi_dsub>
 8010fc0:	a367      	add	r3, pc, #412	; (adr r3, 8011160 <_dtoa_r+0x2d0>)
 8010fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc6:	f7ef faef 	bl	80005a8 <__aeabi_dmul>
 8010fca:	a367      	add	r3, pc, #412	; (adr r3, 8011168 <_dtoa_r+0x2d8>)
 8010fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fd0:	f7ef f934 	bl	800023c <__adddf3>
 8010fd4:	4606      	mov	r6, r0
 8010fd6:	4628      	mov	r0, r5
 8010fd8:	460f      	mov	r7, r1
 8010fda:	f7ef fa7b 	bl	80004d4 <__aeabi_i2d>
 8010fde:	a364      	add	r3, pc, #400	; (adr r3, 8011170 <_dtoa_r+0x2e0>)
 8010fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fe4:	f7ef fae0 	bl	80005a8 <__aeabi_dmul>
 8010fe8:	4602      	mov	r2, r0
 8010fea:	460b      	mov	r3, r1
 8010fec:	4630      	mov	r0, r6
 8010fee:	4639      	mov	r1, r7
 8010ff0:	f7ef f924 	bl	800023c <__adddf3>
 8010ff4:	4606      	mov	r6, r0
 8010ff6:	460f      	mov	r7, r1
 8010ff8:	f7ef fd86 	bl	8000b08 <__aeabi_d2iz>
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	4683      	mov	fp, r0
 8011000:	2300      	movs	r3, #0
 8011002:	4630      	mov	r0, r6
 8011004:	4639      	mov	r1, r7
 8011006:	f7ef fd41 	bl	8000a8c <__aeabi_dcmplt>
 801100a:	b148      	cbz	r0, 8011020 <_dtoa_r+0x190>
 801100c:	4658      	mov	r0, fp
 801100e:	f7ef fa61 	bl	80004d4 <__aeabi_i2d>
 8011012:	4632      	mov	r2, r6
 8011014:	463b      	mov	r3, r7
 8011016:	f7ef fd2f 	bl	8000a78 <__aeabi_dcmpeq>
 801101a:	b908      	cbnz	r0, 8011020 <_dtoa_r+0x190>
 801101c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011020:	f1bb 0f16 	cmp.w	fp, #22
 8011024:	d857      	bhi.n	80110d6 <_dtoa_r+0x246>
 8011026:	4b5b      	ldr	r3, [pc, #364]	; (8011194 <_dtoa_r+0x304>)
 8011028:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011030:	ec51 0b18 	vmov	r0, r1, d8
 8011034:	f7ef fd2a 	bl	8000a8c <__aeabi_dcmplt>
 8011038:	2800      	cmp	r0, #0
 801103a:	d04e      	beq.n	80110da <_dtoa_r+0x24a>
 801103c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011040:	2300      	movs	r3, #0
 8011042:	930c      	str	r3, [sp, #48]	; 0x30
 8011044:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011046:	1b5b      	subs	r3, r3, r5
 8011048:	1e5a      	subs	r2, r3, #1
 801104a:	bf45      	ittet	mi
 801104c:	f1c3 0301 	rsbmi	r3, r3, #1
 8011050:	9305      	strmi	r3, [sp, #20]
 8011052:	2300      	movpl	r3, #0
 8011054:	2300      	movmi	r3, #0
 8011056:	9206      	str	r2, [sp, #24]
 8011058:	bf54      	ite	pl
 801105a:	9305      	strpl	r3, [sp, #20]
 801105c:	9306      	strmi	r3, [sp, #24]
 801105e:	f1bb 0f00 	cmp.w	fp, #0
 8011062:	db3c      	blt.n	80110de <_dtoa_r+0x24e>
 8011064:	9b06      	ldr	r3, [sp, #24]
 8011066:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801106a:	445b      	add	r3, fp
 801106c:	9306      	str	r3, [sp, #24]
 801106e:	2300      	movs	r3, #0
 8011070:	9308      	str	r3, [sp, #32]
 8011072:	9b07      	ldr	r3, [sp, #28]
 8011074:	2b09      	cmp	r3, #9
 8011076:	d868      	bhi.n	801114a <_dtoa_r+0x2ba>
 8011078:	2b05      	cmp	r3, #5
 801107a:	bfc4      	itt	gt
 801107c:	3b04      	subgt	r3, #4
 801107e:	9307      	strgt	r3, [sp, #28]
 8011080:	9b07      	ldr	r3, [sp, #28]
 8011082:	f1a3 0302 	sub.w	r3, r3, #2
 8011086:	bfcc      	ite	gt
 8011088:	2500      	movgt	r5, #0
 801108a:	2501      	movle	r5, #1
 801108c:	2b03      	cmp	r3, #3
 801108e:	f200 8085 	bhi.w	801119c <_dtoa_r+0x30c>
 8011092:	e8df f003 	tbb	[pc, r3]
 8011096:	3b2e      	.short	0x3b2e
 8011098:	5839      	.short	0x5839
 801109a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801109e:	441d      	add	r5, r3
 80110a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80110a4:	2b20      	cmp	r3, #32
 80110a6:	bfc1      	itttt	gt
 80110a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80110ac:	fa08 f803 	lslgt.w	r8, r8, r3
 80110b0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80110b4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80110b8:	bfd6      	itet	le
 80110ba:	f1c3 0320 	rsble	r3, r3, #32
 80110be:	ea48 0003 	orrgt.w	r0, r8, r3
 80110c2:	fa06 f003 	lslle.w	r0, r6, r3
 80110c6:	f7ef f9f5 	bl	80004b4 <__aeabi_ui2d>
 80110ca:	2201      	movs	r2, #1
 80110cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80110d0:	3d01      	subs	r5, #1
 80110d2:	920e      	str	r2, [sp, #56]	; 0x38
 80110d4:	e76f      	b.n	8010fb6 <_dtoa_r+0x126>
 80110d6:	2301      	movs	r3, #1
 80110d8:	e7b3      	b.n	8011042 <_dtoa_r+0x1b2>
 80110da:	900c      	str	r0, [sp, #48]	; 0x30
 80110dc:	e7b2      	b.n	8011044 <_dtoa_r+0x1b4>
 80110de:	9b05      	ldr	r3, [sp, #20]
 80110e0:	eba3 030b 	sub.w	r3, r3, fp
 80110e4:	9305      	str	r3, [sp, #20]
 80110e6:	f1cb 0300 	rsb	r3, fp, #0
 80110ea:	9308      	str	r3, [sp, #32]
 80110ec:	2300      	movs	r3, #0
 80110ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80110f0:	e7bf      	b.n	8011072 <_dtoa_r+0x1e2>
 80110f2:	2300      	movs	r3, #0
 80110f4:	9309      	str	r3, [sp, #36]	; 0x24
 80110f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	dc52      	bgt.n	80111a2 <_dtoa_r+0x312>
 80110fc:	2301      	movs	r3, #1
 80110fe:	9301      	str	r3, [sp, #4]
 8011100:	9304      	str	r3, [sp, #16]
 8011102:	461a      	mov	r2, r3
 8011104:	920a      	str	r2, [sp, #40]	; 0x28
 8011106:	e00b      	b.n	8011120 <_dtoa_r+0x290>
 8011108:	2301      	movs	r3, #1
 801110a:	e7f3      	b.n	80110f4 <_dtoa_r+0x264>
 801110c:	2300      	movs	r3, #0
 801110e:	9309      	str	r3, [sp, #36]	; 0x24
 8011110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011112:	445b      	add	r3, fp
 8011114:	9301      	str	r3, [sp, #4]
 8011116:	3301      	adds	r3, #1
 8011118:	2b01      	cmp	r3, #1
 801111a:	9304      	str	r3, [sp, #16]
 801111c:	bfb8      	it	lt
 801111e:	2301      	movlt	r3, #1
 8011120:	69e0      	ldr	r0, [r4, #28]
 8011122:	2100      	movs	r1, #0
 8011124:	2204      	movs	r2, #4
 8011126:	f102 0614 	add.w	r6, r2, #20
 801112a:	429e      	cmp	r6, r3
 801112c:	d93d      	bls.n	80111aa <_dtoa_r+0x31a>
 801112e:	6041      	str	r1, [r0, #4]
 8011130:	4620      	mov	r0, r4
 8011132:	f000 fd9f 	bl	8011c74 <_Balloc>
 8011136:	9000      	str	r0, [sp, #0]
 8011138:	2800      	cmp	r0, #0
 801113a:	d139      	bne.n	80111b0 <_dtoa_r+0x320>
 801113c:	4b16      	ldr	r3, [pc, #88]	; (8011198 <_dtoa_r+0x308>)
 801113e:	4602      	mov	r2, r0
 8011140:	f240 11af 	movw	r1, #431	; 0x1af
 8011144:	e6bd      	b.n	8010ec2 <_dtoa_r+0x32>
 8011146:	2301      	movs	r3, #1
 8011148:	e7e1      	b.n	801110e <_dtoa_r+0x27e>
 801114a:	2501      	movs	r5, #1
 801114c:	2300      	movs	r3, #0
 801114e:	9307      	str	r3, [sp, #28]
 8011150:	9509      	str	r5, [sp, #36]	; 0x24
 8011152:	f04f 33ff 	mov.w	r3, #4294967295
 8011156:	9301      	str	r3, [sp, #4]
 8011158:	9304      	str	r3, [sp, #16]
 801115a:	2200      	movs	r2, #0
 801115c:	2312      	movs	r3, #18
 801115e:	e7d1      	b.n	8011104 <_dtoa_r+0x274>
 8011160:	636f4361 	.word	0x636f4361
 8011164:	3fd287a7 	.word	0x3fd287a7
 8011168:	8b60c8b3 	.word	0x8b60c8b3
 801116c:	3fc68a28 	.word	0x3fc68a28
 8011170:	509f79fb 	.word	0x509f79fb
 8011174:	3fd34413 	.word	0x3fd34413
 8011178:	080149a9 	.word	0x080149a9
 801117c:	080149c0 	.word	0x080149c0
 8011180:	7ff00000 	.word	0x7ff00000
 8011184:	080149a5 	.word	0x080149a5
 8011188:	0801499c 	.word	0x0801499c
 801118c:	08014979 	.word	0x08014979
 8011190:	3ff80000 	.word	0x3ff80000
 8011194:	08014ab0 	.word	0x08014ab0
 8011198:	08014a18 	.word	0x08014a18
 801119c:	2301      	movs	r3, #1
 801119e:	9309      	str	r3, [sp, #36]	; 0x24
 80111a0:	e7d7      	b.n	8011152 <_dtoa_r+0x2c2>
 80111a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111a4:	9301      	str	r3, [sp, #4]
 80111a6:	9304      	str	r3, [sp, #16]
 80111a8:	e7ba      	b.n	8011120 <_dtoa_r+0x290>
 80111aa:	3101      	adds	r1, #1
 80111ac:	0052      	lsls	r2, r2, #1
 80111ae:	e7ba      	b.n	8011126 <_dtoa_r+0x296>
 80111b0:	69e3      	ldr	r3, [r4, #28]
 80111b2:	9a00      	ldr	r2, [sp, #0]
 80111b4:	601a      	str	r2, [r3, #0]
 80111b6:	9b04      	ldr	r3, [sp, #16]
 80111b8:	2b0e      	cmp	r3, #14
 80111ba:	f200 80a8 	bhi.w	801130e <_dtoa_r+0x47e>
 80111be:	2d00      	cmp	r5, #0
 80111c0:	f000 80a5 	beq.w	801130e <_dtoa_r+0x47e>
 80111c4:	f1bb 0f00 	cmp.w	fp, #0
 80111c8:	dd38      	ble.n	801123c <_dtoa_r+0x3ac>
 80111ca:	4bc0      	ldr	r3, [pc, #768]	; (80114cc <_dtoa_r+0x63c>)
 80111cc:	f00b 020f 	and.w	r2, fp, #15
 80111d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80111d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80111d8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80111dc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80111e0:	d019      	beq.n	8011216 <_dtoa_r+0x386>
 80111e2:	4bbb      	ldr	r3, [pc, #748]	; (80114d0 <_dtoa_r+0x640>)
 80111e4:	ec51 0b18 	vmov	r0, r1, d8
 80111e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80111ec:	f7ef fb06 	bl	80007fc <__aeabi_ddiv>
 80111f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80111f4:	f008 080f 	and.w	r8, r8, #15
 80111f8:	2503      	movs	r5, #3
 80111fa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80114d0 <_dtoa_r+0x640>
 80111fe:	f1b8 0f00 	cmp.w	r8, #0
 8011202:	d10a      	bne.n	801121a <_dtoa_r+0x38a>
 8011204:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011208:	4632      	mov	r2, r6
 801120a:	463b      	mov	r3, r7
 801120c:	f7ef faf6 	bl	80007fc <__aeabi_ddiv>
 8011210:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011214:	e02b      	b.n	801126e <_dtoa_r+0x3de>
 8011216:	2502      	movs	r5, #2
 8011218:	e7ef      	b.n	80111fa <_dtoa_r+0x36a>
 801121a:	f018 0f01 	tst.w	r8, #1
 801121e:	d008      	beq.n	8011232 <_dtoa_r+0x3a2>
 8011220:	4630      	mov	r0, r6
 8011222:	4639      	mov	r1, r7
 8011224:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011228:	f7ef f9be 	bl	80005a8 <__aeabi_dmul>
 801122c:	3501      	adds	r5, #1
 801122e:	4606      	mov	r6, r0
 8011230:	460f      	mov	r7, r1
 8011232:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011236:	f109 0908 	add.w	r9, r9, #8
 801123a:	e7e0      	b.n	80111fe <_dtoa_r+0x36e>
 801123c:	f000 809f 	beq.w	801137e <_dtoa_r+0x4ee>
 8011240:	f1cb 0600 	rsb	r6, fp, #0
 8011244:	4ba1      	ldr	r3, [pc, #644]	; (80114cc <_dtoa_r+0x63c>)
 8011246:	4fa2      	ldr	r7, [pc, #648]	; (80114d0 <_dtoa_r+0x640>)
 8011248:	f006 020f 	and.w	r2, r6, #15
 801124c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011254:	ec51 0b18 	vmov	r0, r1, d8
 8011258:	f7ef f9a6 	bl	80005a8 <__aeabi_dmul>
 801125c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011260:	1136      	asrs	r6, r6, #4
 8011262:	2300      	movs	r3, #0
 8011264:	2502      	movs	r5, #2
 8011266:	2e00      	cmp	r6, #0
 8011268:	d17e      	bne.n	8011368 <_dtoa_r+0x4d8>
 801126a:	2b00      	cmp	r3, #0
 801126c:	d1d0      	bne.n	8011210 <_dtoa_r+0x380>
 801126e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011270:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011274:	2b00      	cmp	r3, #0
 8011276:	f000 8084 	beq.w	8011382 <_dtoa_r+0x4f2>
 801127a:	4b96      	ldr	r3, [pc, #600]	; (80114d4 <_dtoa_r+0x644>)
 801127c:	2200      	movs	r2, #0
 801127e:	4640      	mov	r0, r8
 8011280:	4649      	mov	r1, r9
 8011282:	f7ef fc03 	bl	8000a8c <__aeabi_dcmplt>
 8011286:	2800      	cmp	r0, #0
 8011288:	d07b      	beq.n	8011382 <_dtoa_r+0x4f2>
 801128a:	9b04      	ldr	r3, [sp, #16]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d078      	beq.n	8011382 <_dtoa_r+0x4f2>
 8011290:	9b01      	ldr	r3, [sp, #4]
 8011292:	2b00      	cmp	r3, #0
 8011294:	dd39      	ble.n	801130a <_dtoa_r+0x47a>
 8011296:	4b90      	ldr	r3, [pc, #576]	; (80114d8 <_dtoa_r+0x648>)
 8011298:	2200      	movs	r2, #0
 801129a:	4640      	mov	r0, r8
 801129c:	4649      	mov	r1, r9
 801129e:	f7ef f983 	bl	80005a8 <__aeabi_dmul>
 80112a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80112a6:	9e01      	ldr	r6, [sp, #4]
 80112a8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80112ac:	3501      	adds	r5, #1
 80112ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80112b2:	4628      	mov	r0, r5
 80112b4:	f7ef f90e 	bl	80004d4 <__aeabi_i2d>
 80112b8:	4642      	mov	r2, r8
 80112ba:	464b      	mov	r3, r9
 80112bc:	f7ef f974 	bl	80005a8 <__aeabi_dmul>
 80112c0:	4b86      	ldr	r3, [pc, #536]	; (80114dc <_dtoa_r+0x64c>)
 80112c2:	2200      	movs	r2, #0
 80112c4:	f7ee ffba 	bl	800023c <__adddf3>
 80112c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80112cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80112d0:	9303      	str	r3, [sp, #12]
 80112d2:	2e00      	cmp	r6, #0
 80112d4:	d158      	bne.n	8011388 <_dtoa_r+0x4f8>
 80112d6:	4b82      	ldr	r3, [pc, #520]	; (80114e0 <_dtoa_r+0x650>)
 80112d8:	2200      	movs	r2, #0
 80112da:	4640      	mov	r0, r8
 80112dc:	4649      	mov	r1, r9
 80112de:	f7ee ffab 	bl	8000238 <__aeabi_dsub>
 80112e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80112e6:	4680      	mov	r8, r0
 80112e8:	4689      	mov	r9, r1
 80112ea:	f7ef fbed 	bl	8000ac8 <__aeabi_dcmpgt>
 80112ee:	2800      	cmp	r0, #0
 80112f0:	f040 8296 	bne.w	8011820 <_dtoa_r+0x990>
 80112f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80112f8:	4640      	mov	r0, r8
 80112fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80112fe:	4649      	mov	r1, r9
 8011300:	f7ef fbc4 	bl	8000a8c <__aeabi_dcmplt>
 8011304:	2800      	cmp	r0, #0
 8011306:	f040 8289 	bne.w	801181c <_dtoa_r+0x98c>
 801130a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801130e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011310:	2b00      	cmp	r3, #0
 8011312:	f2c0 814e 	blt.w	80115b2 <_dtoa_r+0x722>
 8011316:	f1bb 0f0e 	cmp.w	fp, #14
 801131a:	f300 814a 	bgt.w	80115b2 <_dtoa_r+0x722>
 801131e:	4b6b      	ldr	r3, [pc, #428]	; (80114cc <_dtoa_r+0x63c>)
 8011320:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011324:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801132a:	2b00      	cmp	r3, #0
 801132c:	f280 80dc 	bge.w	80114e8 <_dtoa_r+0x658>
 8011330:	9b04      	ldr	r3, [sp, #16]
 8011332:	2b00      	cmp	r3, #0
 8011334:	f300 80d8 	bgt.w	80114e8 <_dtoa_r+0x658>
 8011338:	f040 826f 	bne.w	801181a <_dtoa_r+0x98a>
 801133c:	4b68      	ldr	r3, [pc, #416]	; (80114e0 <_dtoa_r+0x650>)
 801133e:	2200      	movs	r2, #0
 8011340:	4640      	mov	r0, r8
 8011342:	4649      	mov	r1, r9
 8011344:	f7ef f930 	bl	80005a8 <__aeabi_dmul>
 8011348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801134c:	f7ef fbb2 	bl	8000ab4 <__aeabi_dcmpge>
 8011350:	9e04      	ldr	r6, [sp, #16]
 8011352:	4637      	mov	r7, r6
 8011354:	2800      	cmp	r0, #0
 8011356:	f040 8245 	bne.w	80117e4 <_dtoa_r+0x954>
 801135a:	9d00      	ldr	r5, [sp, #0]
 801135c:	2331      	movs	r3, #49	; 0x31
 801135e:	f805 3b01 	strb.w	r3, [r5], #1
 8011362:	f10b 0b01 	add.w	fp, fp, #1
 8011366:	e241      	b.n	80117ec <_dtoa_r+0x95c>
 8011368:	07f2      	lsls	r2, r6, #31
 801136a:	d505      	bpl.n	8011378 <_dtoa_r+0x4e8>
 801136c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011370:	f7ef f91a 	bl	80005a8 <__aeabi_dmul>
 8011374:	3501      	adds	r5, #1
 8011376:	2301      	movs	r3, #1
 8011378:	1076      	asrs	r6, r6, #1
 801137a:	3708      	adds	r7, #8
 801137c:	e773      	b.n	8011266 <_dtoa_r+0x3d6>
 801137e:	2502      	movs	r5, #2
 8011380:	e775      	b.n	801126e <_dtoa_r+0x3de>
 8011382:	9e04      	ldr	r6, [sp, #16]
 8011384:	465f      	mov	r7, fp
 8011386:	e792      	b.n	80112ae <_dtoa_r+0x41e>
 8011388:	9900      	ldr	r1, [sp, #0]
 801138a:	4b50      	ldr	r3, [pc, #320]	; (80114cc <_dtoa_r+0x63c>)
 801138c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011390:	4431      	add	r1, r6
 8011392:	9102      	str	r1, [sp, #8]
 8011394:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011396:	eeb0 9a47 	vmov.f32	s18, s14
 801139a:	eef0 9a67 	vmov.f32	s19, s15
 801139e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80113a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80113a6:	2900      	cmp	r1, #0
 80113a8:	d044      	beq.n	8011434 <_dtoa_r+0x5a4>
 80113aa:	494e      	ldr	r1, [pc, #312]	; (80114e4 <_dtoa_r+0x654>)
 80113ac:	2000      	movs	r0, #0
 80113ae:	f7ef fa25 	bl	80007fc <__aeabi_ddiv>
 80113b2:	ec53 2b19 	vmov	r2, r3, d9
 80113b6:	f7ee ff3f 	bl	8000238 <__aeabi_dsub>
 80113ba:	9d00      	ldr	r5, [sp, #0]
 80113bc:	ec41 0b19 	vmov	d9, r0, r1
 80113c0:	4649      	mov	r1, r9
 80113c2:	4640      	mov	r0, r8
 80113c4:	f7ef fba0 	bl	8000b08 <__aeabi_d2iz>
 80113c8:	4606      	mov	r6, r0
 80113ca:	f7ef f883 	bl	80004d4 <__aeabi_i2d>
 80113ce:	4602      	mov	r2, r0
 80113d0:	460b      	mov	r3, r1
 80113d2:	4640      	mov	r0, r8
 80113d4:	4649      	mov	r1, r9
 80113d6:	f7ee ff2f 	bl	8000238 <__aeabi_dsub>
 80113da:	3630      	adds	r6, #48	; 0x30
 80113dc:	f805 6b01 	strb.w	r6, [r5], #1
 80113e0:	ec53 2b19 	vmov	r2, r3, d9
 80113e4:	4680      	mov	r8, r0
 80113e6:	4689      	mov	r9, r1
 80113e8:	f7ef fb50 	bl	8000a8c <__aeabi_dcmplt>
 80113ec:	2800      	cmp	r0, #0
 80113ee:	d164      	bne.n	80114ba <_dtoa_r+0x62a>
 80113f0:	4642      	mov	r2, r8
 80113f2:	464b      	mov	r3, r9
 80113f4:	4937      	ldr	r1, [pc, #220]	; (80114d4 <_dtoa_r+0x644>)
 80113f6:	2000      	movs	r0, #0
 80113f8:	f7ee ff1e 	bl	8000238 <__aeabi_dsub>
 80113fc:	ec53 2b19 	vmov	r2, r3, d9
 8011400:	f7ef fb44 	bl	8000a8c <__aeabi_dcmplt>
 8011404:	2800      	cmp	r0, #0
 8011406:	f040 80b6 	bne.w	8011576 <_dtoa_r+0x6e6>
 801140a:	9b02      	ldr	r3, [sp, #8]
 801140c:	429d      	cmp	r5, r3
 801140e:	f43f af7c 	beq.w	801130a <_dtoa_r+0x47a>
 8011412:	4b31      	ldr	r3, [pc, #196]	; (80114d8 <_dtoa_r+0x648>)
 8011414:	ec51 0b19 	vmov	r0, r1, d9
 8011418:	2200      	movs	r2, #0
 801141a:	f7ef f8c5 	bl	80005a8 <__aeabi_dmul>
 801141e:	4b2e      	ldr	r3, [pc, #184]	; (80114d8 <_dtoa_r+0x648>)
 8011420:	ec41 0b19 	vmov	d9, r0, r1
 8011424:	2200      	movs	r2, #0
 8011426:	4640      	mov	r0, r8
 8011428:	4649      	mov	r1, r9
 801142a:	f7ef f8bd 	bl	80005a8 <__aeabi_dmul>
 801142e:	4680      	mov	r8, r0
 8011430:	4689      	mov	r9, r1
 8011432:	e7c5      	b.n	80113c0 <_dtoa_r+0x530>
 8011434:	ec51 0b17 	vmov	r0, r1, d7
 8011438:	f7ef f8b6 	bl	80005a8 <__aeabi_dmul>
 801143c:	9b02      	ldr	r3, [sp, #8]
 801143e:	9d00      	ldr	r5, [sp, #0]
 8011440:	930f      	str	r3, [sp, #60]	; 0x3c
 8011442:	ec41 0b19 	vmov	d9, r0, r1
 8011446:	4649      	mov	r1, r9
 8011448:	4640      	mov	r0, r8
 801144a:	f7ef fb5d 	bl	8000b08 <__aeabi_d2iz>
 801144e:	4606      	mov	r6, r0
 8011450:	f7ef f840 	bl	80004d4 <__aeabi_i2d>
 8011454:	3630      	adds	r6, #48	; 0x30
 8011456:	4602      	mov	r2, r0
 8011458:	460b      	mov	r3, r1
 801145a:	4640      	mov	r0, r8
 801145c:	4649      	mov	r1, r9
 801145e:	f7ee feeb 	bl	8000238 <__aeabi_dsub>
 8011462:	f805 6b01 	strb.w	r6, [r5], #1
 8011466:	9b02      	ldr	r3, [sp, #8]
 8011468:	429d      	cmp	r5, r3
 801146a:	4680      	mov	r8, r0
 801146c:	4689      	mov	r9, r1
 801146e:	f04f 0200 	mov.w	r2, #0
 8011472:	d124      	bne.n	80114be <_dtoa_r+0x62e>
 8011474:	4b1b      	ldr	r3, [pc, #108]	; (80114e4 <_dtoa_r+0x654>)
 8011476:	ec51 0b19 	vmov	r0, r1, d9
 801147a:	f7ee fedf 	bl	800023c <__adddf3>
 801147e:	4602      	mov	r2, r0
 8011480:	460b      	mov	r3, r1
 8011482:	4640      	mov	r0, r8
 8011484:	4649      	mov	r1, r9
 8011486:	f7ef fb1f 	bl	8000ac8 <__aeabi_dcmpgt>
 801148a:	2800      	cmp	r0, #0
 801148c:	d173      	bne.n	8011576 <_dtoa_r+0x6e6>
 801148e:	ec53 2b19 	vmov	r2, r3, d9
 8011492:	4914      	ldr	r1, [pc, #80]	; (80114e4 <_dtoa_r+0x654>)
 8011494:	2000      	movs	r0, #0
 8011496:	f7ee fecf 	bl	8000238 <__aeabi_dsub>
 801149a:	4602      	mov	r2, r0
 801149c:	460b      	mov	r3, r1
 801149e:	4640      	mov	r0, r8
 80114a0:	4649      	mov	r1, r9
 80114a2:	f7ef faf3 	bl	8000a8c <__aeabi_dcmplt>
 80114a6:	2800      	cmp	r0, #0
 80114a8:	f43f af2f 	beq.w	801130a <_dtoa_r+0x47a>
 80114ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80114ae:	1e6b      	subs	r3, r5, #1
 80114b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80114b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80114b6:	2b30      	cmp	r3, #48	; 0x30
 80114b8:	d0f8      	beq.n	80114ac <_dtoa_r+0x61c>
 80114ba:	46bb      	mov	fp, r7
 80114bc:	e04a      	b.n	8011554 <_dtoa_r+0x6c4>
 80114be:	4b06      	ldr	r3, [pc, #24]	; (80114d8 <_dtoa_r+0x648>)
 80114c0:	f7ef f872 	bl	80005a8 <__aeabi_dmul>
 80114c4:	4680      	mov	r8, r0
 80114c6:	4689      	mov	r9, r1
 80114c8:	e7bd      	b.n	8011446 <_dtoa_r+0x5b6>
 80114ca:	bf00      	nop
 80114cc:	08014ab0 	.word	0x08014ab0
 80114d0:	08014a88 	.word	0x08014a88
 80114d4:	3ff00000 	.word	0x3ff00000
 80114d8:	40240000 	.word	0x40240000
 80114dc:	401c0000 	.word	0x401c0000
 80114e0:	40140000 	.word	0x40140000
 80114e4:	3fe00000 	.word	0x3fe00000
 80114e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80114ec:	9d00      	ldr	r5, [sp, #0]
 80114ee:	4642      	mov	r2, r8
 80114f0:	464b      	mov	r3, r9
 80114f2:	4630      	mov	r0, r6
 80114f4:	4639      	mov	r1, r7
 80114f6:	f7ef f981 	bl	80007fc <__aeabi_ddiv>
 80114fa:	f7ef fb05 	bl	8000b08 <__aeabi_d2iz>
 80114fe:	9001      	str	r0, [sp, #4]
 8011500:	f7ee ffe8 	bl	80004d4 <__aeabi_i2d>
 8011504:	4642      	mov	r2, r8
 8011506:	464b      	mov	r3, r9
 8011508:	f7ef f84e 	bl	80005a8 <__aeabi_dmul>
 801150c:	4602      	mov	r2, r0
 801150e:	460b      	mov	r3, r1
 8011510:	4630      	mov	r0, r6
 8011512:	4639      	mov	r1, r7
 8011514:	f7ee fe90 	bl	8000238 <__aeabi_dsub>
 8011518:	9e01      	ldr	r6, [sp, #4]
 801151a:	9f04      	ldr	r7, [sp, #16]
 801151c:	3630      	adds	r6, #48	; 0x30
 801151e:	f805 6b01 	strb.w	r6, [r5], #1
 8011522:	9e00      	ldr	r6, [sp, #0]
 8011524:	1bae      	subs	r6, r5, r6
 8011526:	42b7      	cmp	r7, r6
 8011528:	4602      	mov	r2, r0
 801152a:	460b      	mov	r3, r1
 801152c:	d134      	bne.n	8011598 <_dtoa_r+0x708>
 801152e:	f7ee fe85 	bl	800023c <__adddf3>
 8011532:	4642      	mov	r2, r8
 8011534:	464b      	mov	r3, r9
 8011536:	4606      	mov	r6, r0
 8011538:	460f      	mov	r7, r1
 801153a:	f7ef fac5 	bl	8000ac8 <__aeabi_dcmpgt>
 801153e:	b9c8      	cbnz	r0, 8011574 <_dtoa_r+0x6e4>
 8011540:	4642      	mov	r2, r8
 8011542:	464b      	mov	r3, r9
 8011544:	4630      	mov	r0, r6
 8011546:	4639      	mov	r1, r7
 8011548:	f7ef fa96 	bl	8000a78 <__aeabi_dcmpeq>
 801154c:	b110      	cbz	r0, 8011554 <_dtoa_r+0x6c4>
 801154e:	9b01      	ldr	r3, [sp, #4]
 8011550:	07db      	lsls	r3, r3, #31
 8011552:	d40f      	bmi.n	8011574 <_dtoa_r+0x6e4>
 8011554:	4651      	mov	r1, sl
 8011556:	4620      	mov	r0, r4
 8011558:	f000 fbcc 	bl	8011cf4 <_Bfree>
 801155c:	2300      	movs	r3, #0
 801155e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011560:	702b      	strb	r3, [r5, #0]
 8011562:	f10b 0301 	add.w	r3, fp, #1
 8011566:	6013      	str	r3, [r2, #0]
 8011568:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801156a:	2b00      	cmp	r3, #0
 801156c:	f43f ace2 	beq.w	8010f34 <_dtoa_r+0xa4>
 8011570:	601d      	str	r5, [r3, #0]
 8011572:	e4df      	b.n	8010f34 <_dtoa_r+0xa4>
 8011574:	465f      	mov	r7, fp
 8011576:	462b      	mov	r3, r5
 8011578:	461d      	mov	r5, r3
 801157a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801157e:	2a39      	cmp	r2, #57	; 0x39
 8011580:	d106      	bne.n	8011590 <_dtoa_r+0x700>
 8011582:	9a00      	ldr	r2, [sp, #0]
 8011584:	429a      	cmp	r2, r3
 8011586:	d1f7      	bne.n	8011578 <_dtoa_r+0x6e8>
 8011588:	9900      	ldr	r1, [sp, #0]
 801158a:	2230      	movs	r2, #48	; 0x30
 801158c:	3701      	adds	r7, #1
 801158e:	700a      	strb	r2, [r1, #0]
 8011590:	781a      	ldrb	r2, [r3, #0]
 8011592:	3201      	adds	r2, #1
 8011594:	701a      	strb	r2, [r3, #0]
 8011596:	e790      	b.n	80114ba <_dtoa_r+0x62a>
 8011598:	4ba3      	ldr	r3, [pc, #652]	; (8011828 <_dtoa_r+0x998>)
 801159a:	2200      	movs	r2, #0
 801159c:	f7ef f804 	bl	80005a8 <__aeabi_dmul>
 80115a0:	2200      	movs	r2, #0
 80115a2:	2300      	movs	r3, #0
 80115a4:	4606      	mov	r6, r0
 80115a6:	460f      	mov	r7, r1
 80115a8:	f7ef fa66 	bl	8000a78 <__aeabi_dcmpeq>
 80115ac:	2800      	cmp	r0, #0
 80115ae:	d09e      	beq.n	80114ee <_dtoa_r+0x65e>
 80115b0:	e7d0      	b.n	8011554 <_dtoa_r+0x6c4>
 80115b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80115b4:	2a00      	cmp	r2, #0
 80115b6:	f000 80ca 	beq.w	801174e <_dtoa_r+0x8be>
 80115ba:	9a07      	ldr	r2, [sp, #28]
 80115bc:	2a01      	cmp	r2, #1
 80115be:	f300 80ad 	bgt.w	801171c <_dtoa_r+0x88c>
 80115c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80115c4:	2a00      	cmp	r2, #0
 80115c6:	f000 80a5 	beq.w	8011714 <_dtoa_r+0x884>
 80115ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80115ce:	9e08      	ldr	r6, [sp, #32]
 80115d0:	9d05      	ldr	r5, [sp, #20]
 80115d2:	9a05      	ldr	r2, [sp, #20]
 80115d4:	441a      	add	r2, r3
 80115d6:	9205      	str	r2, [sp, #20]
 80115d8:	9a06      	ldr	r2, [sp, #24]
 80115da:	2101      	movs	r1, #1
 80115dc:	441a      	add	r2, r3
 80115de:	4620      	mov	r0, r4
 80115e0:	9206      	str	r2, [sp, #24]
 80115e2:	f000 fc3d 	bl	8011e60 <__i2b>
 80115e6:	4607      	mov	r7, r0
 80115e8:	b165      	cbz	r5, 8011604 <_dtoa_r+0x774>
 80115ea:	9b06      	ldr	r3, [sp, #24]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	dd09      	ble.n	8011604 <_dtoa_r+0x774>
 80115f0:	42ab      	cmp	r3, r5
 80115f2:	9a05      	ldr	r2, [sp, #20]
 80115f4:	bfa8      	it	ge
 80115f6:	462b      	movge	r3, r5
 80115f8:	1ad2      	subs	r2, r2, r3
 80115fa:	9205      	str	r2, [sp, #20]
 80115fc:	9a06      	ldr	r2, [sp, #24]
 80115fe:	1aed      	subs	r5, r5, r3
 8011600:	1ad3      	subs	r3, r2, r3
 8011602:	9306      	str	r3, [sp, #24]
 8011604:	9b08      	ldr	r3, [sp, #32]
 8011606:	b1f3      	cbz	r3, 8011646 <_dtoa_r+0x7b6>
 8011608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801160a:	2b00      	cmp	r3, #0
 801160c:	f000 80a3 	beq.w	8011756 <_dtoa_r+0x8c6>
 8011610:	2e00      	cmp	r6, #0
 8011612:	dd10      	ble.n	8011636 <_dtoa_r+0x7a6>
 8011614:	4639      	mov	r1, r7
 8011616:	4632      	mov	r2, r6
 8011618:	4620      	mov	r0, r4
 801161a:	f000 fce1 	bl	8011fe0 <__pow5mult>
 801161e:	4652      	mov	r2, sl
 8011620:	4601      	mov	r1, r0
 8011622:	4607      	mov	r7, r0
 8011624:	4620      	mov	r0, r4
 8011626:	f000 fc31 	bl	8011e8c <__multiply>
 801162a:	4651      	mov	r1, sl
 801162c:	4680      	mov	r8, r0
 801162e:	4620      	mov	r0, r4
 8011630:	f000 fb60 	bl	8011cf4 <_Bfree>
 8011634:	46c2      	mov	sl, r8
 8011636:	9b08      	ldr	r3, [sp, #32]
 8011638:	1b9a      	subs	r2, r3, r6
 801163a:	d004      	beq.n	8011646 <_dtoa_r+0x7b6>
 801163c:	4651      	mov	r1, sl
 801163e:	4620      	mov	r0, r4
 8011640:	f000 fcce 	bl	8011fe0 <__pow5mult>
 8011644:	4682      	mov	sl, r0
 8011646:	2101      	movs	r1, #1
 8011648:	4620      	mov	r0, r4
 801164a:	f000 fc09 	bl	8011e60 <__i2b>
 801164e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011650:	2b00      	cmp	r3, #0
 8011652:	4606      	mov	r6, r0
 8011654:	f340 8081 	ble.w	801175a <_dtoa_r+0x8ca>
 8011658:	461a      	mov	r2, r3
 801165a:	4601      	mov	r1, r0
 801165c:	4620      	mov	r0, r4
 801165e:	f000 fcbf 	bl	8011fe0 <__pow5mult>
 8011662:	9b07      	ldr	r3, [sp, #28]
 8011664:	2b01      	cmp	r3, #1
 8011666:	4606      	mov	r6, r0
 8011668:	dd7a      	ble.n	8011760 <_dtoa_r+0x8d0>
 801166a:	f04f 0800 	mov.w	r8, #0
 801166e:	6933      	ldr	r3, [r6, #16]
 8011670:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011674:	6918      	ldr	r0, [r3, #16]
 8011676:	f000 fba5 	bl	8011dc4 <__hi0bits>
 801167a:	f1c0 0020 	rsb	r0, r0, #32
 801167e:	9b06      	ldr	r3, [sp, #24]
 8011680:	4418      	add	r0, r3
 8011682:	f010 001f 	ands.w	r0, r0, #31
 8011686:	f000 8094 	beq.w	80117b2 <_dtoa_r+0x922>
 801168a:	f1c0 0320 	rsb	r3, r0, #32
 801168e:	2b04      	cmp	r3, #4
 8011690:	f340 8085 	ble.w	801179e <_dtoa_r+0x90e>
 8011694:	9b05      	ldr	r3, [sp, #20]
 8011696:	f1c0 001c 	rsb	r0, r0, #28
 801169a:	4403      	add	r3, r0
 801169c:	9305      	str	r3, [sp, #20]
 801169e:	9b06      	ldr	r3, [sp, #24]
 80116a0:	4403      	add	r3, r0
 80116a2:	4405      	add	r5, r0
 80116a4:	9306      	str	r3, [sp, #24]
 80116a6:	9b05      	ldr	r3, [sp, #20]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	dd05      	ble.n	80116b8 <_dtoa_r+0x828>
 80116ac:	4651      	mov	r1, sl
 80116ae:	461a      	mov	r2, r3
 80116b0:	4620      	mov	r0, r4
 80116b2:	f000 fcef 	bl	8012094 <__lshift>
 80116b6:	4682      	mov	sl, r0
 80116b8:	9b06      	ldr	r3, [sp, #24]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	dd05      	ble.n	80116ca <_dtoa_r+0x83a>
 80116be:	4631      	mov	r1, r6
 80116c0:	461a      	mov	r2, r3
 80116c2:	4620      	mov	r0, r4
 80116c4:	f000 fce6 	bl	8012094 <__lshift>
 80116c8:	4606      	mov	r6, r0
 80116ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d072      	beq.n	80117b6 <_dtoa_r+0x926>
 80116d0:	4631      	mov	r1, r6
 80116d2:	4650      	mov	r0, sl
 80116d4:	f000 fd4a 	bl	801216c <__mcmp>
 80116d8:	2800      	cmp	r0, #0
 80116da:	da6c      	bge.n	80117b6 <_dtoa_r+0x926>
 80116dc:	2300      	movs	r3, #0
 80116de:	4651      	mov	r1, sl
 80116e0:	220a      	movs	r2, #10
 80116e2:	4620      	mov	r0, r4
 80116e4:	f000 fb28 	bl	8011d38 <__multadd>
 80116e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80116ee:	4682      	mov	sl, r0
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	f000 81b0 	beq.w	8011a56 <_dtoa_r+0xbc6>
 80116f6:	2300      	movs	r3, #0
 80116f8:	4639      	mov	r1, r7
 80116fa:	220a      	movs	r2, #10
 80116fc:	4620      	mov	r0, r4
 80116fe:	f000 fb1b 	bl	8011d38 <__multadd>
 8011702:	9b01      	ldr	r3, [sp, #4]
 8011704:	2b00      	cmp	r3, #0
 8011706:	4607      	mov	r7, r0
 8011708:	f300 8096 	bgt.w	8011838 <_dtoa_r+0x9a8>
 801170c:	9b07      	ldr	r3, [sp, #28]
 801170e:	2b02      	cmp	r3, #2
 8011710:	dc59      	bgt.n	80117c6 <_dtoa_r+0x936>
 8011712:	e091      	b.n	8011838 <_dtoa_r+0x9a8>
 8011714:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011716:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801171a:	e758      	b.n	80115ce <_dtoa_r+0x73e>
 801171c:	9b04      	ldr	r3, [sp, #16]
 801171e:	1e5e      	subs	r6, r3, #1
 8011720:	9b08      	ldr	r3, [sp, #32]
 8011722:	42b3      	cmp	r3, r6
 8011724:	bfbf      	itttt	lt
 8011726:	9b08      	ldrlt	r3, [sp, #32]
 8011728:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801172a:	9608      	strlt	r6, [sp, #32]
 801172c:	1af3      	sublt	r3, r6, r3
 801172e:	bfb4      	ite	lt
 8011730:	18d2      	addlt	r2, r2, r3
 8011732:	1b9e      	subge	r6, r3, r6
 8011734:	9b04      	ldr	r3, [sp, #16]
 8011736:	bfbc      	itt	lt
 8011738:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801173a:	2600      	movlt	r6, #0
 801173c:	2b00      	cmp	r3, #0
 801173e:	bfb7      	itett	lt
 8011740:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8011744:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8011748:	1a9d      	sublt	r5, r3, r2
 801174a:	2300      	movlt	r3, #0
 801174c:	e741      	b.n	80115d2 <_dtoa_r+0x742>
 801174e:	9e08      	ldr	r6, [sp, #32]
 8011750:	9d05      	ldr	r5, [sp, #20]
 8011752:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011754:	e748      	b.n	80115e8 <_dtoa_r+0x758>
 8011756:	9a08      	ldr	r2, [sp, #32]
 8011758:	e770      	b.n	801163c <_dtoa_r+0x7ac>
 801175a:	9b07      	ldr	r3, [sp, #28]
 801175c:	2b01      	cmp	r3, #1
 801175e:	dc19      	bgt.n	8011794 <_dtoa_r+0x904>
 8011760:	9b02      	ldr	r3, [sp, #8]
 8011762:	b9bb      	cbnz	r3, 8011794 <_dtoa_r+0x904>
 8011764:	9b03      	ldr	r3, [sp, #12]
 8011766:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801176a:	b99b      	cbnz	r3, 8011794 <_dtoa_r+0x904>
 801176c:	9b03      	ldr	r3, [sp, #12]
 801176e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011772:	0d1b      	lsrs	r3, r3, #20
 8011774:	051b      	lsls	r3, r3, #20
 8011776:	b183      	cbz	r3, 801179a <_dtoa_r+0x90a>
 8011778:	9b05      	ldr	r3, [sp, #20]
 801177a:	3301      	adds	r3, #1
 801177c:	9305      	str	r3, [sp, #20]
 801177e:	9b06      	ldr	r3, [sp, #24]
 8011780:	3301      	adds	r3, #1
 8011782:	9306      	str	r3, [sp, #24]
 8011784:	f04f 0801 	mov.w	r8, #1
 8011788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801178a:	2b00      	cmp	r3, #0
 801178c:	f47f af6f 	bne.w	801166e <_dtoa_r+0x7de>
 8011790:	2001      	movs	r0, #1
 8011792:	e774      	b.n	801167e <_dtoa_r+0x7ee>
 8011794:	f04f 0800 	mov.w	r8, #0
 8011798:	e7f6      	b.n	8011788 <_dtoa_r+0x8f8>
 801179a:	4698      	mov	r8, r3
 801179c:	e7f4      	b.n	8011788 <_dtoa_r+0x8f8>
 801179e:	d082      	beq.n	80116a6 <_dtoa_r+0x816>
 80117a0:	9a05      	ldr	r2, [sp, #20]
 80117a2:	331c      	adds	r3, #28
 80117a4:	441a      	add	r2, r3
 80117a6:	9205      	str	r2, [sp, #20]
 80117a8:	9a06      	ldr	r2, [sp, #24]
 80117aa:	441a      	add	r2, r3
 80117ac:	441d      	add	r5, r3
 80117ae:	9206      	str	r2, [sp, #24]
 80117b0:	e779      	b.n	80116a6 <_dtoa_r+0x816>
 80117b2:	4603      	mov	r3, r0
 80117b4:	e7f4      	b.n	80117a0 <_dtoa_r+0x910>
 80117b6:	9b04      	ldr	r3, [sp, #16]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	dc37      	bgt.n	801182c <_dtoa_r+0x99c>
 80117bc:	9b07      	ldr	r3, [sp, #28]
 80117be:	2b02      	cmp	r3, #2
 80117c0:	dd34      	ble.n	801182c <_dtoa_r+0x99c>
 80117c2:	9b04      	ldr	r3, [sp, #16]
 80117c4:	9301      	str	r3, [sp, #4]
 80117c6:	9b01      	ldr	r3, [sp, #4]
 80117c8:	b963      	cbnz	r3, 80117e4 <_dtoa_r+0x954>
 80117ca:	4631      	mov	r1, r6
 80117cc:	2205      	movs	r2, #5
 80117ce:	4620      	mov	r0, r4
 80117d0:	f000 fab2 	bl	8011d38 <__multadd>
 80117d4:	4601      	mov	r1, r0
 80117d6:	4606      	mov	r6, r0
 80117d8:	4650      	mov	r0, sl
 80117da:	f000 fcc7 	bl	801216c <__mcmp>
 80117de:	2800      	cmp	r0, #0
 80117e0:	f73f adbb 	bgt.w	801135a <_dtoa_r+0x4ca>
 80117e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117e6:	9d00      	ldr	r5, [sp, #0]
 80117e8:	ea6f 0b03 	mvn.w	fp, r3
 80117ec:	f04f 0800 	mov.w	r8, #0
 80117f0:	4631      	mov	r1, r6
 80117f2:	4620      	mov	r0, r4
 80117f4:	f000 fa7e 	bl	8011cf4 <_Bfree>
 80117f8:	2f00      	cmp	r7, #0
 80117fa:	f43f aeab 	beq.w	8011554 <_dtoa_r+0x6c4>
 80117fe:	f1b8 0f00 	cmp.w	r8, #0
 8011802:	d005      	beq.n	8011810 <_dtoa_r+0x980>
 8011804:	45b8      	cmp	r8, r7
 8011806:	d003      	beq.n	8011810 <_dtoa_r+0x980>
 8011808:	4641      	mov	r1, r8
 801180a:	4620      	mov	r0, r4
 801180c:	f000 fa72 	bl	8011cf4 <_Bfree>
 8011810:	4639      	mov	r1, r7
 8011812:	4620      	mov	r0, r4
 8011814:	f000 fa6e 	bl	8011cf4 <_Bfree>
 8011818:	e69c      	b.n	8011554 <_dtoa_r+0x6c4>
 801181a:	2600      	movs	r6, #0
 801181c:	4637      	mov	r7, r6
 801181e:	e7e1      	b.n	80117e4 <_dtoa_r+0x954>
 8011820:	46bb      	mov	fp, r7
 8011822:	4637      	mov	r7, r6
 8011824:	e599      	b.n	801135a <_dtoa_r+0x4ca>
 8011826:	bf00      	nop
 8011828:	40240000 	.word	0x40240000
 801182c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801182e:	2b00      	cmp	r3, #0
 8011830:	f000 80c8 	beq.w	80119c4 <_dtoa_r+0xb34>
 8011834:	9b04      	ldr	r3, [sp, #16]
 8011836:	9301      	str	r3, [sp, #4]
 8011838:	2d00      	cmp	r5, #0
 801183a:	dd05      	ble.n	8011848 <_dtoa_r+0x9b8>
 801183c:	4639      	mov	r1, r7
 801183e:	462a      	mov	r2, r5
 8011840:	4620      	mov	r0, r4
 8011842:	f000 fc27 	bl	8012094 <__lshift>
 8011846:	4607      	mov	r7, r0
 8011848:	f1b8 0f00 	cmp.w	r8, #0
 801184c:	d05b      	beq.n	8011906 <_dtoa_r+0xa76>
 801184e:	6879      	ldr	r1, [r7, #4]
 8011850:	4620      	mov	r0, r4
 8011852:	f000 fa0f 	bl	8011c74 <_Balloc>
 8011856:	4605      	mov	r5, r0
 8011858:	b928      	cbnz	r0, 8011866 <_dtoa_r+0x9d6>
 801185a:	4b83      	ldr	r3, [pc, #524]	; (8011a68 <_dtoa_r+0xbd8>)
 801185c:	4602      	mov	r2, r0
 801185e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8011862:	f7ff bb2e 	b.w	8010ec2 <_dtoa_r+0x32>
 8011866:	693a      	ldr	r2, [r7, #16]
 8011868:	3202      	adds	r2, #2
 801186a:	0092      	lsls	r2, r2, #2
 801186c:	f107 010c 	add.w	r1, r7, #12
 8011870:	300c      	adds	r0, #12
 8011872:	f7ff fa74 	bl	8010d5e <memcpy>
 8011876:	2201      	movs	r2, #1
 8011878:	4629      	mov	r1, r5
 801187a:	4620      	mov	r0, r4
 801187c:	f000 fc0a 	bl	8012094 <__lshift>
 8011880:	9b00      	ldr	r3, [sp, #0]
 8011882:	3301      	adds	r3, #1
 8011884:	9304      	str	r3, [sp, #16]
 8011886:	e9dd 2300 	ldrd	r2, r3, [sp]
 801188a:	4413      	add	r3, r2
 801188c:	9308      	str	r3, [sp, #32]
 801188e:	9b02      	ldr	r3, [sp, #8]
 8011890:	f003 0301 	and.w	r3, r3, #1
 8011894:	46b8      	mov	r8, r7
 8011896:	9306      	str	r3, [sp, #24]
 8011898:	4607      	mov	r7, r0
 801189a:	9b04      	ldr	r3, [sp, #16]
 801189c:	4631      	mov	r1, r6
 801189e:	3b01      	subs	r3, #1
 80118a0:	4650      	mov	r0, sl
 80118a2:	9301      	str	r3, [sp, #4]
 80118a4:	f7ff fa69 	bl	8010d7a <quorem>
 80118a8:	4641      	mov	r1, r8
 80118aa:	9002      	str	r0, [sp, #8]
 80118ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80118b0:	4650      	mov	r0, sl
 80118b2:	f000 fc5b 	bl	801216c <__mcmp>
 80118b6:	463a      	mov	r2, r7
 80118b8:	9005      	str	r0, [sp, #20]
 80118ba:	4631      	mov	r1, r6
 80118bc:	4620      	mov	r0, r4
 80118be:	f000 fc71 	bl	80121a4 <__mdiff>
 80118c2:	68c2      	ldr	r2, [r0, #12]
 80118c4:	4605      	mov	r5, r0
 80118c6:	bb02      	cbnz	r2, 801190a <_dtoa_r+0xa7a>
 80118c8:	4601      	mov	r1, r0
 80118ca:	4650      	mov	r0, sl
 80118cc:	f000 fc4e 	bl	801216c <__mcmp>
 80118d0:	4602      	mov	r2, r0
 80118d2:	4629      	mov	r1, r5
 80118d4:	4620      	mov	r0, r4
 80118d6:	9209      	str	r2, [sp, #36]	; 0x24
 80118d8:	f000 fa0c 	bl	8011cf4 <_Bfree>
 80118dc:	9b07      	ldr	r3, [sp, #28]
 80118de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80118e0:	9d04      	ldr	r5, [sp, #16]
 80118e2:	ea43 0102 	orr.w	r1, r3, r2
 80118e6:	9b06      	ldr	r3, [sp, #24]
 80118e8:	4319      	orrs	r1, r3
 80118ea:	d110      	bne.n	801190e <_dtoa_r+0xa7e>
 80118ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80118f0:	d029      	beq.n	8011946 <_dtoa_r+0xab6>
 80118f2:	9b05      	ldr	r3, [sp, #20]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	dd02      	ble.n	80118fe <_dtoa_r+0xa6e>
 80118f8:	9b02      	ldr	r3, [sp, #8]
 80118fa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80118fe:	9b01      	ldr	r3, [sp, #4]
 8011900:	f883 9000 	strb.w	r9, [r3]
 8011904:	e774      	b.n	80117f0 <_dtoa_r+0x960>
 8011906:	4638      	mov	r0, r7
 8011908:	e7ba      	b.n	8011880 <_dtoa_r+0x9f0>
 801190a:	2201      	movs	r2, #1
 801190c:	e7e1      	b.n	80118d2 <_dtoa_r+0xa42>
 801190e:	9b05      	ldr	r3, [sp, #20]
 8011910:	2b00      	cmp	r3, #0
 8011912:	db04      	blt.n	801191e <_dtoa_r+0xa8e>
 8011914:	9907      	ldr	r1, [sp, #28]
 8011916:	430b      	orrs	r3, r1
 8011918:	9906      	ldr	r1, [sp, #24]
 801191a:	430b      	orrs	r3, r1
 801191c:	d120      	bne.n	8011960 <_dtoa_r+0xad0>
 801191e:	2a00      	cmp	r2, #0
 8011920:	dded      	ble.n	80118fe <_dtoa_r+0xa6e>
 8011922:	4651      	mov	r1, sl
 8011924:	2201      	movs	r2, #1
 8011926:	4620      	mov	r0, r4
 8011928:	f000 fbb4 	bl	8012094 <__lshift>
 801192c:	4631      	mov	r1, r6
 801192e:	4682      	mov	sl, r0
 8011930:	f000 fc1c 	bl	801216c <__mcmp>
 8011934:	2800      	cmp	r0, #0
 8011936:	dc03      	bgt.n	8011940 <_dtoa_r+0xab0>
 8011938:	d1e1      	bne.n	80118fe <_dtoa_r+0xa6e>
 801193a:	f019 0f01 	tst.w	r9, #1
 801193e:	d0de      	beq.n	80118fe <_dtoa_r+0xa6e>
 8011940:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011944:	d1d8      	bne.n	80118f8 <_dtoa_r+0xa68>
 8011946:	9a01      	ldr	r2, [sp, #4]
 8011948:	2339      	movs	r3, #57	; 0x39
 801194a:	7013      	strb	r3, [r2, #0]
 801194c:	462b      	mov	r3, r5
 801194e:	461d      	mov	r5, r3
 8011950:	3b01      	subs	r3, #1
 8011952:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011956:	2a39      	cmp	r2, #57	; 0x39
 8011958:	d06c      	beq.n	8011a34 <_dtoa_r+0xba4>
 801195a:	3201      	adds	r2, #1
 801195c:	701a      	strb	r2, [r3, #0]
 801195e:	e747      	b.n	80117f0 <_dtoa_r+0x960>
 8011960:	2a00      	cmp	r2, #0
 8011962:	dd07      	ble.n	8011974 <_dtoa_r+0xae4>
 8011964:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011968:	d0ed      	beq.n	8011946 <_dtoa_r+0xab6>
 801196a:	9a01      	ldr	r2, [sp, #4]
 801196c:	f109 0301 	add.w	r3, r9, #1
 8011970:	7013      	strb	r3, [r2, #0]
 8011972:	e73d      	b.n	80117f0 <_dtoa_r+0x960>
 8011974:	9b04      	ldr	r3, [sp, #16]
 8011976:	9a08      	ldr	r2, [sp, #32]
 8011978:	f803 9c01 	strb.w	r9, [r3, #-1]
 801197c:	4293      	cmp	r3, r2
 801197e:	d043      	beq.n	8011a08 <_dtoa_r+0xb78>
 8011980:	4651      	mov	r1, sl
 8011982:	2300      	movs	r3, #0
 8011984:	220a      	movs	r2, #10
 8011986:	4620      	mov	r0, r4
 8011988:	f000 f9d6 	bl	8011d38 <__multadd>
 801198c:	45b8      	cmp	r8, r7
 801198e:	4682      	mov	sl, r0
 8011990:	f04f 0300 	mov.w	r3, #0
 8011994:	f04f 020a 	mov.w	r2, #10
 8011998:	4641      	mov	r1, r8
 801199a:	4620      	mov	r0, r4
 801199c:	d107      	bne.n	80119ae <_dtoa_r+0xb1e>
 801199e:	f000 f9cb 	bl	8011d38 <__multadd>
 80119a2:	4680      	mov	r8, r0
 80119a4:	4607      	mov	r7, r0
 80119a6:	9b04      	ldr	r3, [sp, #16]
 80119a8:	3301      	adds	r3, #1
 80119aa:	9304      	str	r3, [sp, #16]
 80119ac:	e775      	b.n	801189a <_dtoa_r+0xa0a>
 80119ae:	f000 f9c3 	bl	8011d38 <__multadd>
 80119b2:	4639      	mov	r1, r7
 80119b4:	4680      	mov	r8, r0
 80119b6:	2300      	movs	r3, #0
 80119b8:	220a      	movs	r2, #10
 80119ba:	4620      	mov	r0, r4
 80119bc:	f000 f9bc 	bl	8011d38 <__multadd>
 80119c0:	4607      	mov	r7, r0
 80119c2:	e7f0      	b.n	80119a6 <_dtoa_r+0xb16>
 80119c4:	9b04      	ldr	r3, [sp, #16]
 80119c6:	9301      	str	r3, [sp, #4]
 80119c8:	9d00      	ldr	r5, [sp, #0]
 80119ca:	4631      	mov	r1, r6
 80119cc:	4650      	mov	r0, sl
 80119ce:	f7ff f9d4 	bl	8010d7a <quorem>
 80119d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80119d6:	9b00      	ldr	r3, [sp, #0]
 80119d8:	f805 9b01 	strb.w	r9, [r5], #1
 80119dc:	1aea      	subs	r2, r5, r3
 80119de:	9b01      	ldr	r3, [sp, #4]
 80119e0:	4293      	cmp	r3, r2
 80119e2:	dd07      	ble.n	80119f4 <_dtoa_r+0xb64>
 80119e4:	4651      	mov	r1, sl
 80119e6:	2300      	movs	r3, #0
 80119e8:	220a      	movs	r2, #10
 80119ea:	4620      	mov	r0, r4
 80119ec:	f000 f9a4 	bl	8011d38 <__multadd>
 80119f0:	4682      	mov	sl, r0
 80119f2:	e7ea      	b.n	80119ca <_dtoa_r+0xb3a>
 80119f4:	9b01      	ldr	r3, [sp, #4]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	bfc8      	it	gt
 80119fa:	461d      	movgt	r5, r3
 80119fc:	9b00      	ldr	r3, [sp, #0]
 80119fe:	bfd8      	it	le
 8011a00:	2501      	movle	r5, #1
 8011a02:	441d      	add	r5, r3
 8011a04:	f04f 0800 	mov.w	r8, #0
 8011a08:	4651      	mov	r1, sl
 8011a0a:	2201      	movs	r2, #1
 8011a0c:	4620      	mov	r0, r4
 8011a0e:	f000 fb41 	bl	8012094 <__lshift>
 8011a12:	4631      	mov	r1, r6
 8011a14:	4682      	mov	sl, r0
 8011a16:	f000 fba9 	bl	801216c <__mcmp>
 8011a1a:	2800      	cmp	r0, #0
 8011a1c:	dc96      	bgt.n	801194c <_dtoa_r+0xabc>
 8011a1e:	d102      	bne.n	8011a26 <_dtoa_r+0xb96>
 8011a20:	f019 0f01 	tst.w	r9, #1
 8011a24:	d192      	bne.n	801194c <_dtoa_r+0xabc>
 8011a26:	462b      	mov	r3, r5
 8011a28:	461d      	mov	r5, r3
 8011a2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011a2e:	2a30      	cmp	r2, #48	; 0x30
 8011a30:	d0fa      	beq.n	8011a28 <_dtoa_r+0xb98>
 8011a32:	e6dd      	b.n	80117f0 <_dtoa_r+0x960>
 8011a34:	9a00      	ldr	r2, [sp, #0]
 8011a36:	429a      	cmp	r2, r3
 8011a38:	d189      	bne.n	801194e <_dtoa_r+0xabe>
 8011a3a:	f10b 0b01 	add.w	fp, fp, #1
 8011a3e:	2331      	movs	r3, #49	; 0x31
 8011a40:	e796      	b.n	8011970 <_dtoa_r+0xae0>
 8011a42:	4b0a      	ldr	r3, [pc, #40]	; (8011a6c <_dtoa_r+0xbdc>)
 8011a44:	f7ff ba99 	b.w	8010f7a <_dtoa_r+0xea>
 8011a48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	f47f aa6d 	bne.w	8010f2a <_dtoa_r+0x9a>
 8011a50:	4b07      	ldr	r3, [pc, #28]	; (8011a70 <_dtoa_r+0xbe0>)
 8011a52:	f7ff ba92 	b.w	8010f7a <_dtoa_r+0xea>
 8011a56:	9b01      	ldr	r3, [sp, #4]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	dcb5      	bgt.n	80119c8 <_dtoa_r+0xb38>
 8011a5c:	9b07      	ldr	r3, [sp, #28]
 8011a5e:	2b02      	cmp	r3, #2
 8011a60:	f73f aeb1 	bgt.w	80117c6 <_dtoa_r+0x936>
 8011a64:	e7b0      	b.n	80119c8 <_dtoa_r+0xb38>
 8011a66:	bf00      	nop
 8011a68:	08014a18 	.word	0x08014a18
 8011a6c:	08014978 	.word	0x08014978
 8011a70:	0801499c 	.word	0x0801499c

08011a74 <_free_r>:
 8011a74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011a76:	2900      	cmp	r1, #0
 8011a78:	d044      	beq.n	8011b04 <_free_r+0x90>
 8011a7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a7e:	9001      	str	r0, [sp, #4]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	f1a1 0404 	sub.w	r4, r1, #4
 8011a86:	bfb8      	it	lt
 8011a88:	18e4      	addlt	r4, r4, r3
 8011a8a:	f000 f8e7 	bl	8011c5c <__malloc_lock>
 8011a8e:	4a1e      	ldr	r2, [pc, #120]	; (8011b08 <_free_r+0x94>)
 8011a90:	9801      	ldr	r0, [sp, #4]
 8011a92:	6813      	ldr	r3, [r2, #0]
 8011a94:	b933      	cbnz	r3, 8011aa4 <_free_r+0x30>
 8011a96:	6063      	str	r3, [r4, #4]
 8011a98:	6014      	str	r4, [r2, #0]
 8011a9a:	b003      	add	sp, #12
 8011a9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011aa0:	f000 b8e2 	b.w	8011c68 <__malloc_unlock>
 8011aa4:	42a3      	cmp	r3, r4
 8011aa6:	d908      	bls.n	8011aba <_free_r+0x46>
 8011aa8:	6825      	ldr	r5, [r4, #0]
 8011aaa:	1961      	adds	r1, r4, r5
 8011aac:	428b      	cmp	r3, r1
 8011aae:	bf01      	itttt	eq
 8011ab0:	6819      	ldreq	r1, [r3, #0]
 8011ab2:	685b      	ldreq	r3, [r3, #4]
 8011ab4:	1949      	addeq	r1, r1, r5
 8011ab6:	6021      	streq	r1, [r4, #0]
 8011ab8:	e7ed      	b.n	8011a96 <_free_r+0x22>
 8011aba:	461a      	mov	r2, r3
 8011abc:	685b      	ldr	r3, [r3, #4]
 8011abe:	b10b      	cbz	r3, 8011ac4 <_free_r+0x50>
 8011ac0:	42a3      	cmp	r3, r4
 8011ac2:	d9fa      	bls.n	8011aba <_free_r+0x46>
 8011ac4:	6811      	ldr	r1, [r2, #0]
 8011ac6:	1855      	adds	r5, r2, r1
 8011ac8:	42a5      	cmp	r5, r4
 8011aca:	d10b      	bne.n	8011ae4 <_free_r+0x70>
 8011acc:	6824      	ldr	r4, [r4, #0]
 8011ace:	4421      	add	r1, r4
 8011ad0:	1854      	adds	r4, r2, r1
 8011ad2:	42a3      	cmp	r3, r4
 8011ad4:	6011      	str	r1, [r2, #0]
 8011ad6:	d1e0      	bne.n	8011a9a <_free_r+0x26>
 8011ad8:	681c      	ldr	r4, [r3, #0]
 8011ada:	685b      	ldr	r3, [r3, #4]
 8011adc:	6053      	str	r3, [r2, #4]
 8011ade:	440c      	add	r4, r1
 8011ae0:	6014      	str	r4, [r2, #0]
 8011ae2:	e7da      	b.n	8011a9a <_free_r+0x26>
 8011ae4:	d902      	bls.n	8011aec <_free_r+0x78>
 8011ae6:	230c      	movs	r3, #12
 8011ae8:	6003      	str	r3, [r0, #0]
 8011aea:	e7d6      	b.n	8011a9a <_free_r+0x26>
 8011aec:	6825      	ldr	r5, [r4, #0]
 8011aee:	1961      	adds	r1, r4, r5
 8011af0:	428b      	cmp	r3, r1
 8011af2:	bf04      	itt	eq
 8011af4:	6819      	ldreq	r1, [r3, #0]
 8011af6:	685b      	ldreq	r3, [r3, #4]
 8011af8:	6063      	str	r3, [r4, #4]
 8011afa:	bf04      	itt	eq
 8011afc:	1949      	addeq	r1, r1, r5
 8011afe:	6021      	streq	r1, [r4, #0]
 8011b00:	6054      	str	r4, [r2, #4]
 8011b02:	e7ca      	b.n	8011a9a <_free_r+0x26>
 8011b04:	b003      	add	sp, #12
 8011b06:	bd30      	pop	{r4, r5, pc}
 8011b08:	20001a04 	.word	0x20001a04

08011b0c <malloc>:
 8011b0c:	4b02      	ldr	r3, [pc, #8]	; (8011b18 <malloc+0xc>)
 8011b0e:	4601      	mov	r1, r0
 8011b10:	6818      	ldr	r0, [r3, #0]
 8011b12:	f000 b823 	b.w	8011b5c <_malloc_r>
 8011b16:	bf00      	nop
 8011b18:	200001d0 	.word	0x200001d0

08011b1c <sbrk_aligned>:
 8011b1c:	b570      	push	{r4, r5, r6, lr}
 8011b1e:	4e0e      	ldr	r6, [pc, #56]	; (8011b58 <sbrk_aligned+0x3c>)
 8011b20:	460c      	mov	r4, r1
 8011b22:	6831      	ldr	r1, [r6, #0]
 8011b24:	4605      	mov	r5, r0
 8011b26:	b911      	cbnz	r1, 8011b2e <sbrk_aligned+0x12>
 8011b28:	f001 f81a 	bl	8012b60 <_sbrk_r>
 8011b2c:	6030      	str	r0, [r6, #0]
 8011b2e:	4621      	mov	r1, r4
 8011b30:	4628      	mov	r0, r5
 8011b32:	f001 f815 	bl	8012b60 <_sbrk_r>
 8011b36:	1c43      	adds	r3, r0, #1
 8011b38:	d00a      	beq.n	8011b50 <sbrk_aligned+0x34>
 8011b3a:	1cc4      	adds	r4, r0, #3
 8011b3c:	f024 0403 	bic.w	r4, r4, #3
 8011b40:	42a0      	cmp	r0, r4
 8011b42:	d007      	beq.n	8011b54 <sbrk_aligned+0x38>
 8011b44:	1a21      	subs	r1, r4, r0
 8011b46:	4628      	mov	r0, r5
 8011b48:	f001 f80a 	bl	8012b60 <_sbrk_r>
 8011b4c:	3001      	adds	r0, #1
 8011b4e:	d101      	bne.n	8011b54 <sbrk_aligned+0x38>
 8011b50:	f04f 34ff 	mov.w	r4, #4294967295
 8011b54:	4620      	mov	r0, r4
 8011b56:	bd70      	pop	{r4, r5, r6, pc}
 8011b58:	20001a08 	.word	0x20001a08

08011b5c <_malloc_r>:
 8011b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b60:	1ccd      	adds	r5, r1, #3
 8011b62:	f025 0503 	bic.w	r5, r5, #3
 8011b66:	3508      	adds	r5, #8
 8011b68:	2d0c      	cmp	r5, #12
 8011b6a:	bf38      	it	cc
 8011b6c:	250c      	movcc	r5, #12
 8011b6e:	2d00      	cmp	r5, #0
 8011b70:	4607      	mov	r7, r0
 8011b72:	db01      	blt.n	8011b78 <_malloc_r+0x1c>
 8011b74:	42a9      	cmp	r1, r5
 8011b76:	d905      	bls.n	8011b84 <_malloc_r+0x28>
 8011b78:	230c      	movs	r3, #12
 8011b7a:	603b      	str	r3, [r7, #0]
 8011b7c:	2600      	movs	r6, #0
 8011b7e:	4630      	mov	r0, r6
 8011b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011c58 <_malloc_r+0xfc>
 8011b88:	f000 f868 	bl	8011c5c <__malloc_lock>
 8011b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8011b90:	461c      	mov	r4, r3
 8011b92:	bb5c      	cbnz	r4, 8011bec <_malloc_r+0x90>
 8011b94:	4629      	mov	r1, r5
 8011b96:	4638      	mov	r0, r7
 8011b98:	f7ff ffc0 	bl	8011b1c <sbrk_aligned>
 8011b9c:	1c43      	adds	r3, r0, #1
 8011b9e:	4604      	mov	r4, r0
 8011ba0:	d155      	bne.n	8011c4e <_malloc_r+0xf2>
 8011ba2:	f8d8 4000 	ldr.w	r4, [r8]
 8011ba6:	4626      	mov	r6, r4
 8011ba8:	2e00      	cmp	r6, #0
 8011baa:	d145      	bne.n	8011c38 <_malloc_r+0xdc>
 8011bac:	2c00      	cmp	r4, #0
 8011bae:	d048      	beq.n	8011c42 <_malloc_r+0xe6>
 8011bb0:	6823      	ldr	r3, [r4, #0]
 8011bb2:	4631      	mov	r1, r6
 8011bb4:	4638      	mov	r0, r7
 8011bb6:	eb04 0903 	add.w	r9, r4, r3
 8011bba:	f000 ffd1 	bl	8012b60 <_sbrk_r>
 8011bbe:	4581      	cmp	r9, r0
 8011bc0:	d13f      	bne.n	8011c42 <_malloc_r+0xe6>
 8011bc2:	6821      	ldr	r1, [r4, #0]
 8011bc4:	1a6d      	subs	r5, r5, r1
 8011bc6:	4629      	mov	r1, r5
 8011bc8:	4638      	mov	r0, r7
 8011bca:	f7ff ffa7 	bl	8011b1c <sbrk_aligned>
 8011bce:	3001      	adds	r0, #1
 8011bd0:	d037      	beq.n	8011c42 <_malloc_r+0xe6>
 8011bd2:	6823      	ldr	r3, [r4, #0]
 8011bd4:	442b      	add	r3, r5
 8011bd6:	6023      	str	r3, [r4, #0]
 8011bd8:	f8d8 3000 	ldr.w	r3, [r8]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d038      	beq.n	8011c52 <_malloc_r+0xf6>
 8011be0:	685a      	ldr	r2, [r3, #4]
 8011be2:	42a2      	cmp	r2, r4
 8011be4:	d12b      	bne.n	8011c3e <_malloc_r+0xe2>
 8011be6:	2200      	movs	r2, #0
 8011be8:	605a      	str	r2, [r3, #4]
 8011bea:	e00f      	b.n	8011c0c <_malloc_r+0xb0>
 8011bec:	6822      	ldr	r2, [r4, #0]
 8011bee:	1b52      	subs	r2, r2, r5
 8011bf0:	d41f      	bmi.n	8011c32 <_malloc_r+0xd6>
 8011bf2:	2a0b      	cmp	r2, #11
 8011bf4:	d917      	bls.n	8011c26 <_malloc_r+0xca>
 8011bf6:	1961      	adds	r1, r4, r5
 8011bf8:	42a3      	cmp	r3, r4
 8011bfa:	6025      	str	r5, [r4, #0]
 8011bfc:	bf18      	it	ne
 8011bfe:	6059      	strne	r1, [r3, #4]
 8011c00:	6863      	ldr	r3, [r4, #4]
 8011c02:	bf08      	it	eq
 8011c04:	f8c8 1000 	streq.w	r1, [r8]
 8011c08:	5162      	str	r2, [r4, r5]
 8011c0a:	604b      	str	r3, [r1, #4]
 8011c0c:	4638      	mov	r0, r7
 8011c0e:	f104 060b 	add.w	r6, r4, #11
 8011c12:	f000 f829 	bl	8011c68 <__malloc_unlock>
 8011c16:	f026 0607 	bic.w	r6, r6, #7
 8011c1a:	1d23      	adds	r3, r4, #4
 8011c1c:	1af2      	subs	r2, r6, r3
 8011c1e:	d0ae      	beq.n	8011b7e <_malloc_r+0x22>
 8011c20:	1b9b      	subs	r3, r3, r6
 8011c22:	50a3      	str	r3, [r4, r2]
 8011c24:	e7ab      	b.n	8011b7e <_malloc_r+0x22>
 8011c26:	42a3      	cmp	r3, r4
 8011c28:	6862      	ldr	r2, [r4, #4]
 8011c2a:	d1dd      	bne.n	8011be8 <_malloc_r+0x8c>
 8011c2c:	f8c8 2000 	str.w	r2, [r8]
 8011c30:	e7ec      	b.n	8011c0c <_malloc_r+0xb0>
 8011c32:	4623      	mov	r3, r4
 8011c34:	6864      	ldr	r4, [r4, #4]
 8011c36:	e7ac      	b.n	8011b92 <_malloc_r+0x36>
 8011c38:	4634      	mov	r4, r6
 8011c3a:	6876      	ldr	r6, [r6, #4]
 8011c3c:	e7b4      	b.n	8011ba8 <_malloc_r+0x4c>
 8011c3e:	4613      	mov	r3, r2
 8011c40:	e7cc      	b.n	8011bdc <_malloc_r+0x80>
 8011c42:	230c      	movs	r3, #12
 8011c44:	603b      	str	r3, [r7, #0]
 8011c46:	4638      	mov	r0, r7
 8011c48:	f000 f80e 	bl	8011c68 <__malloc_unlock>
 8011c4c:	e797      	b.n	8011b7e <_malloc_r+0x22>
 8011c4e:	6025      	str	r5, [r4, #0]
 8011c50:	e7dc      	b.n	8011c0c <_malloc_r+0xb0>
 8011c52:	605b      	str	r3, [r3, #4]
 8011c54:	deff      	udf	#255	; 0xff
 8011c56:	bf00      	nop
 8011c58:	20001a04 	.word	0x20001a04

08011c5c <__malloc_lock>:
 8011c5c:	4801      	ldr	r0, [pc, #4]	; (8011c64 <__malloc_lock+0x8>)
 8011c5e:	f7ff b87c 	b.w	8010d5a <__retarget_lock_acquire_recursive>
 8011c62:	bf00      	nop
 8011c64:	20001a00 	.word	0x20001a00

08011c68 <__malloc_unlock>:
 8011c68:	4801      	ldr	r0, [pc, #4]	; (8011c70 <__malloc_unlock+0x8>)
 8011c6a:	f7ff b877 	b.w	8010d5c <__retarget_lock_release_recursive>
 8011c6e:	bf00      	nop
 8011c70:	20001a00 	.word	0x20001a00

08011c74 <_Balloc>:
 8011c74:	b570      	push	{r4, r5, r6, lr}
 8011c76:	69c6      	ldr	r6, [r0, #28]
 8011c78:	4604      	mov	r4, r0
 8011c7a:	460d      	mov	r5, r1
 8011c7c:	b976      	cbnz	r6, 8011c9c <_Balloc+0x28>
 8011c7e:	2010      	movs	r0, #16
 8011c80:	f7ff ff44 	bl	8011b0c <malloc>
 8011c84:	4602      	mov	r2, r0
 8011c86:	61e0      	str	r0, [r4, #28]
 8011c88:	b920      	cbnz	r0, 8011c94 <_Balloc+0x20>
 8011c8a:	4b18      	ldr	r3, [pc, #96]	; (8011cec <_Balloc+0x78>)
 8011c8c:	4818      	ldr	r0, [pc, #96]	; (8011cf0 <_Balloc+0x7c>)
 8011c8e:	216b      	movs	r1, #107	; 0x6b
 8011c90:	f000 ff76 	bl	8012b80 <__assert_func>
 8011c94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011c98:	6006      	str	r6, [r0, #0]
 8011c9a:	60c6      	str	r6, [r0, #12]
 8011c9c:	69e6      	ldr	r6, [r4, #28]
 8011c9e:	68f3      	ldr	r3, [r6, #12]
 8011ca0:	b183      	cbz	r3, 8011cc4 <_Balloc+0x50>
 8011ca2:	69e3      	ldr	r3, [r4, #28]
 8011ca4:	68db      	ldr	r3, [r3, #12]
 8011ca6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011caa:	b9b8      	cbnz	r0, 8011cdc <_Balloc+0x68>
 8011cac:	2101      	movs	r1, #1
 8011cae:	fa01 f605 	lsl.w	r6, r1, r5
 8011cb2:	1d72      	adds	r2, r6, #5
 8011cb4:	0092      	lsls	r2, r2, #2
 8011cb6:	4620      	mov	r0, r4
 8011cb8:	f000 ff80 	bl	8012bbc <_calloc_r>
 8011cbc:	b160      	cbz	r0, 8011cd8 <_Balloc+0x64>
 8011cbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011cc2:	e00e      	b.n	8011ce2 <_Balloc+0x6e>
 8011cc4:	2221      	movs	r2, #33	; 0x21
 8011cc6:	2104      	movs	r1, #4
 8011cc8:	4620      	mov	r0, r4
 8011cca:	f000 ff77 	bl	8012bbc <_calloc_r>
 8011cce:	69e3      	ldr	r3, [r4, #28]
 8011cd0:	60f0      	str	r0, [r6, #12]
 8011cd2:	68db      	ldr	r3, [r3, #12]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d1e4      	bne.n	8011ca2 <_Balloc+0x2e>
 8011cd8:	2000      	movs	r0, #0
 8011cda:	bd70      	pop	{r4, r5, r6, pc}
 8011cdc:	6802      	ldr	r2, [r0, #0]
 8011cde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011ce8:	e7f7      	b.n	8011cda <_Balloc+0x66>
 8011cea:	bf00      	nop
 8011cec:	080149a9 	.word	0x080149a9
 8011cf0:	08014a29 	.word	0x08014a29

08011cf4 <_Bfree>:
 8011cf4:	b570      	push	{r4, r5, r6, lr}
 8011cf6:	69c6      	ldr	r6, [r0, #28]
 8011cf8:	4605      	mov	r5, r0
 8011cfa:	460c      	mov	r4, r1
 8011cfc:	b976      	cbnz	r6, 8011d1c <_Bfree+0x28>
 8011cfe:	2010      	movs	r0, #16
 8011d00:	f7ff ff04 	bl	8011b0c <malloc>
 8011d04:	4602      	mov	r2, r0
 8011d06:	61e8      	str	r0, [r5, #28]
 8011d08:	b920      	cbnz	r0, 8011d14 <_Bfree+0x20>
 8011d0a:	4b09      	ldr	r3, [pc, #36]	; (8011d30 <_Bfree+0x3c>)
 8011d0c:	4809      	ldr	r0, [pc, #36]	; (8011d34 <_Bfree+0x40>)
 8011d0e:	218f      	movs	r1, #143	; 0x8f
 8011d10:	f000 ff36 	bl	8012b80 <__assert_func>
 8011d14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011d18:	6006      	str	r6, [r0, #0]
 8011d1a:	60c6      	str	r6, [r0, #12]
 8011d1c:	b13c      	cbz	r4, 8011d2e <_Bfree+0x3a>
 8011d1e:	69eb      	ldr	r3, [r5, #28]
 8011d20:	6862      	ldr	r2, [r4, #4]
 8011d22:	68db      	ldr	r3, [r3, #12]
 8011d24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011d28:	6021      	str	r1, [r4, #0]
 8011d2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011d2e:	bd70      	pop	{r4, r5, r6, pc}
 8011d30:	080149a9 	.word	0x080149a9
 8011d34:	08014a29 	.word	0x08014a29

08011d38 <__multadd>:
 8011d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d3c:	690d      	ldr	r5, [r1, #16]
 8011d3e:	4607      	mov	r7, r0
 8011d40:	460c      	mov	r4, r1
 8011d42:	461e      	mov	r6, r3
 8011d44:	f101 0c14 	add.w	ip, r1, #20
 8011d48:	2000      	movs	r0, #0
 8011d4a:	f8dc 3000 	ldr.w	r3, [ip]
 8011d4e:	b299      	uxth	r1, r3
 8011d50:	fb02 6101 	mla	r1, r2, r1, r6
 8011d54:	0c1e      	lsrs	r6, r3, #16
 8011d56:	0c0b      	lsrs	r3, r1, #16
 8011d58:	fb02 3306 	mla	r3, r2, r6, r3
 8011d5c:	b289      	uxth	r1, r1
 8011d5e:	3001      	adds	r0, #1
 8011d60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011d64:	4285      	cmp	r5, r0
 8011d66:	f84c 1b04 	str.w	r1, [ip], #4
 8011d6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011d6e:	dcec      	bgt.n	8011d4a <__multadd+0x12>
 8011d70:	b30e      	cbz	r6, 8011db6 <__multadd+0x7e>
 8011d72:	68a3      	ldr	r3, [r4, #8]
 8011d74:	42ab      	cmp	r3, r5
 8011d76:	dc19      	bgt.n	8011dac <__multadd+0x74>
 8011d78:	6861      	ldr	r1, [r4, #4]
 8011d7a:	4638      	mov	r0, r7
 8011d7c:	3101      	adds	r1, #1
 8011d7e:	f7ff ff79 	bl	8011c74 <_Balloc>
 8011d82:	4680      	mov	r8, r0
 8011d84:	b928      	cbnz	r0, 8011d92 <__multadd+0x5a>
 8011d86:	4602      	mov	r2, r0
 8011d88:	4b0c      	ldr	r3, [pc, #48]	; (8011dbc <__multadd+0x84>)
 8011d8a:	480d      	ldr	r0, [pc, #52]	; (8011dc0 <__multadd+0x88>)
 8011d8c:	21ba      	movs	r1, #186	; 0xba
 8011d8e:	f000 fef7 	bl	8012b80 <__assert_func>
 8011d92:	6922      	ldr	r2, [r4, #16]
 8011d94:	3202      	adds	r2, #2
 8011d96:	f104 010c 	add.w	r1, r4, #12
 8011d9a:	0092      	lsls	r2, r2, #2
 8011d9c:	300c      	adds	r0, #12
 8011d9e:	f7fe ffde 	bl	8010d5e <memcpy>
 8011da2:	4621      	mov	r1, r4
 8011da4:	4638      	mov	r0, r7
 8011da6:	f7ff ffa5 	bl	8011cf4 <_Bfree>
 8011daa:	4644      	mov	r4, r8
 8011dac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011db0:	3501      	adds	r5, #1
 8011db2:	615e      	str	r6, [r3, #20]
 8011db4:	6125      	str	r5, [r4, #16]
 8011db6:	4620      	mov	r0, r4
 8011db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dbc:	08014a18 	.word	0x08014a18
 8011dc0:	08014a29 	.word	0x08014a29

08011dc4 <__hi0bits>:
 8011dc4:	0c03      	lsrs	r3, r0, #16
 8011dc6:	041b      	lsls	r3, r3, #16
 8011dc8:	b9d3      	cbnz	r3, 8011e00 <__hi0bits+0x3c>
 8011dca:	0400      	lsls	r0, r0, #16
 8011dcc:	2310      	movs	r3, #16
 8011dce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011dd2:	bf04      	itt	eq
 8011dd4:	0200      	lsleq	r0, r0, #8
 8011dd6:	3308      	addeq	r3, #8
 8011dd8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011ddc:	bf04      	itt	eq
 8011dde:	0100      	lsleq	r0, r0, #4
 8011de0:	3304      	addeq	r3, #4
 8011de2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011de6:	bf04      	itt	eq
 8011de8:	0080      	lsleq	r0, r0, #2
 8011dea:	3302      	addeq	r3, #2
 8011dec:	2800      	cmp	r0, #0
 8011dee:	db05      	blt.n	8011dfc <__hi0bits+0x38>
 8011df0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011df4:	f103 0301 	add.w	r3, r3, #1
 8011df8:	bf08      	it	eq
 8011dfa:	2320      	moveq	r3, #32
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	4770      	bx	lr
 8011e00:	2300      	movs	r3, #0
 8011e02:	e7e4      	b.n	8011dce <__hi0bits+0xa>

08011e04 <__lo0bits>:
 8011e04:	6803      	ldr	r3, [r0, #0]
 8011e06:	f013 0207 	ands.w	r2, r3, #7
 8011e0a:	d00c      	beq.n	8011e26 <__lo0bits+0x22>
 8011e0c:	07d9      	lsls	r1, r3, #31
 8011e0e:	d422      	bmi.n	8011e56 <__lo0bits+0x52>
 8011e10:	079a      	lsls	r2, r3, #30
 8011e12:	bf49      	itett	mi
 8011e14:	085b      	lsrmi	r3, r3, #1
 8011e16:	089b      	lsrpl	r3, r3, #2
 8011e18:	6003      	strmi	r3, [r0, #0]
 8011e1a:	2201      	movmi	r2, #1
 8011e1c:	bf5c      	itt	pl
 8011e1e:	6003      	strpl	r3, [r0, #0]
 8011e20:	2202      	movpl	r2, #2
 8011e22:	4610      	mov	r0, r2
 8011e24:	4770      	bx	lr
 8011e26:	b299      	uxth	r1, r3
 8011e28:	b909      	cbnz	r1, 8011e2e <__lo0bits+0x2a>
 8011e2a:	0c1b      	lsrs	r3, r3, #16
 8011e2c:	2210      	movs	r2, #16
 8011e2e:	b2d9      	uxtb	r1, r3
 8011e30:	b909      	cbnz	r1, 8011e36 <__lo0bits+0x32>
 8011e32:	3208      	adds	r2, #8
 8011e34:	0a1b      	lsrs	r3, r3, #8
 8011e36:	0719      	lsls	r1, r3, #28
 8011e38:	bf04      	itt	eq
 8011e3a:	091b      	lsreq	r3, r3, #4
 8011e3c:	3204      	addeq	r2, #4
 8011e3e:	0799      	lsls	r1, r3, #30
 8011e40:	bf04      	itt	eq
 8011e42:	089b      	lsreq	r3, r3, #2
 8011e44:	3202      	addeq	r2, #2
 8011e46:	07d9      	lsls	r1, r3, #31
 8011e48:	d403      	bmi.n	8011e52 <__lo0bits+0x4e>
 8011e4a:	085b      	lsrs	r3, r3, #1
 8011e4c:	f102 0201 	add.w	r2, r2, #1
 8011e50:	d003      	beq.n	8011e5a <__lo0bits+0x56>
 8011e52:	6003      	str	r3, [r0, #0]
 8011e54:	e7e5      	b.n	8011e22 <__lo0bits+0x1e>
 8011e56:	2200      	movs	r2, #0
 8011e58:	e7e3      	b.n	8011e22 <__lo0bits+0x1e>
 8011e5a:	2220      	movs	r2, #32
 8011e5c:	e7e1      	b.n	8011e22 <__lo0bits+0x1e>
	...

08011e60 <__i2b>:
 8011e60:	b510      	push	{r4, lr}
 8011e62:	460c      	mov	r4, r1
 8011e64:	2101      	movs	r1, #1
 8011e66:	f7ff ff05 	bl	8011c74 <_Balloc>
 8011e6a:	4602      	mov	r2, r0
 8011e6c:	b928      	cbnz	r0, 8011e7a <__i2b+0x1a>
 8011e6e:	4b05      	ldr	r3, [pc, #20]	; (8011e84 <__i2b+0x24>)
 8011e70:	4805      	ldr	r0, [pc, #20]	; (8011e88 <__i2b+0x28>)
 8011e72:	f240 1145 	movw	r1, #325	; 0x145
 8011e76:	f000 fe83 	bl	8012b80 <__assert_func>
 8011e7a:	2301      	movs	r3, #1
 8011e7c:	6144      	str	r4, [r0, #20]
 8011e7e:	6103      	str	r3, [r0, #16]
 8011e80:	bd10      	pop	{r4, pc}
 8011e82:	bf00      	nop
 8011e84:	08014a18 	.word	0x08014a18
 8011e88:	08014a29 	.word	0x08014a29

08011e8c <__multiply>:
 8011e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e90:	4691      	mov	r9, r2
 8011e92:	690a      	ldr	r2, [r1, #16]
 8011e94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011e98:	429a      	cmp	r2, r3
 8011e9a:	bfb8      	it	lt
 8011e9c:	460b      	movlt	r3, r1
 8011e9e:	460c      	mov	r4, r1
 8011ea0:	bfbc      	itt	lt
 8011ea2:	464c      	movlt	r4, r9
 8011ea4:	4699      	movlt	r9, r3
 8011ea6:	6927      	ldr	r7, [r4, #16]
 8011ea8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011eac:	68a3      	ldr	r3, [r4, #8]
 8011eae:	6861      	ldr	r1, [r4, #4]
 8011eb0:	eb07 060a 	add.w	r6, r7, sl
 8011eb4:	42b3      	cmp	r3, r6
 8011eb6:	b085      	sub	sp, #20
 8011eb8:	bfb8      	it	lt
 8011eba:	3101      	addlt	r1, #1
 8011ebc:	f7ff feda 	bl	8011c74 <_Balloc>
 8011ec0:	b930      	cbnz	r0, 8011ed0 <__multiply+0x44>
 8011ec2:	4602      	mov	r2, r0
 8011ec4:	4b44      	ldr	r3, [pc, #272]	; (8011fd8 <__multiply+0x14c>)
 8011ec6:	4845      	ldr	r0, [pc, #276]	; (8011fdc <__multiply+0x150>)
 8011ec8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011ecc:	f000 fe58 	bl	8012b80 <__assert_func>
 8011ed0:	f100 0514 	add.w	r5, r0, #20
 8011ed4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011ed8:	462b      	mov	r3, r5
 8011eda:	2200      	movs	r2, #0
 8011edc:	4543      	cmp	r3, r8
 8011ede:	d321      	bcc.n	8011f24 <__multiply+0x98>
 8011ee0:	f104 0314 	add.w	r3, r4, #20
 8011ee4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011ee8:	f109 0314 	add.w	r3, r9, #20
 8011eec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011ef0:	9202      	str	r2, [sp, #8]
 8011ef2:	1b3a      	subs	r2, r7, r4
 8011ef4:	3a15      	subs	r2, #21
 8011ef6:	f022 0203 	bic.w	r2, r2, #3
 8011efa:	3204      	adds	r2, #4
 8011efc:	f104 0115 	add.w	r1, r4, #21
 8011f00:	428f      	cmp	r7, r1
 8011f02:	bf38      	it	cc
 8011f04:	2204      	movcc	r2, #4
 8011f06:	9201      	str	r2, [sp, #4]
 8011f08:	9a02      	ldr	r2, [sp, #8]
 8011f0a:	9303      	str	r3, [sp, #12]
 8011f0c:	429a      	cmp	r2, r3
 8011f0e:	d80c      	bhi.n	8011f2a <__multiply+0x9e>
 8011f10:	2e00      	cmp	r6, #0
 8011f12:	dd03      	ble.n	8011f1c <__multiply+0x90>
 8011f14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d05b      	beq.n	8011fd4 <__multiply+0x148>
 8011f1c:	6106      	str	r6, [r0, #16]
 8011f1e:	b005      	add	sp, #20
 8011f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f24:	f843 2b04 	str.w	r2, [r3], #4
 8011f28:	e7d8      	b.n	8011edc <__multiply+0x50>
 8011f2a:	f8b3 a000 	ldrh.w	sl, [r3]
 8011f2e:	f1ba 0f00 	cmp.w	sl, #0
 8011f32:	d024      	beq.n	8011f7e <__multiply+0xf2>
 8011f34:	f104 0e14 	add.w	lr, r4, #20
 8011f38:	46a9      	mov	r9, r5
 8011f3a:	f04f 0c00 	mov.w	ip, #0
 8011f3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011f42:	f8d9 1000 	ldr.w	r1, [r9]
 8011f46:	fa1f fb82 	uxth.w	fp, r2
 8011f4a:	b289      	uxth	r1, r1
 8011f4c:	fb0a 110b 	mla	r1, sl, fp, r1
 8011f50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011f54:	f8d9 2000 	ldr.w	r2, [r9]
 8011f58:	4461      	add	r1, ip
 8011f5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011f5e:	fb0a c20b 	mla	r2, sl, fp, ip
 8011f62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011f66:	b289      	uxth	r1, r1
 8011f68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011f6c:	4577      	cmp	r7, lr
 8011f6e:	f849 1b04 	str.w	r1, [r9], #4
 8011f72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011f76:	d8e2      	bhi.n	8011f3e <__multiply+0xb2>
 8011f78:	9a01      	ldr	r2, [sp, #4]
 8011f7a:	f845 c002 	str.w	ip, [r5, r2]
 8011f7e:	9a03      	ldr	r2, [sp, #12]
 8011f80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011f84:	3304      	adds	r3, #4
 8011f86:	f1b9 0f00 	cmp.w	r9, #0
 8011f8a:	d021      	beq.n	8011fd0 <__multiply+0x144>
 8011f8c:	6829      	ldr	r1, [r5, #0]
 8011f8e:	f104 0c14 	add.w	ip, r4, #20
 8011f92:	46ae      	mov	lr, r5
 8011f94:	f04f 0a00 	mov.w	sl, #0
 8011f98:	f8bc b000 	ldrh.w	fp, [ip]
 8011f9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011fa0:	fb09 220b 	mla	r2, r9, fp, r2
 8011fa4:	4452      	add	r2, sl
 8011fa6:	b289      	uxth	r1, r1
 8011fa8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011fac:	f84e 1b04 	str.w	r1, [lr], #4
 8011fb0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011fb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011fb8:	f8be 1000 	ldrh.w	r1, [lr]
 8011fbc:	fb09 110a 	mla	r1, r9, sl, r1
 8011fc0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011fc4:	4567      	cmp	r7, ip
 8011fc6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011fca:	d8e5      	bhi.n	8011f98 <__multiply+0x10c>
 8011fcc:	9a01      	ldr	r2, [sp, #4]
 8011fce:	50a9      	str	r1, [r5, r2]
 8011fd0:	3504      	adds	r5, #4
 8011fd2:	e799      	b.n	8011f08 <__multiply+0x7c>
 8011fd4:	3e01      	subs	r6, #1
 8011fd6:	e79b      	b.n	8011f10 <__multiply+0x84>
 8011fd8:	08014a18 	.word	0x08014a18
 8011fdc:	08014a29 	.word	0x08014a29

08011fe0 <__pow5mult>:
 8011fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fe4:	4615      	mov	r5, r2
 8011fe6:	f012 0203 	ands.w	r2, r2, #3
 8011fea:	4606      	mov	r6, r0
 8011fec:	460f      	mov	r7, r1
 8011fee:	d007      	beq.n	8012000 <__pow5mult+0x20>
 8011ff0:	4c25      	ldr	r4, [pc, #148]	; (8012088 <__pow5mult+0xa8>)
 8011ff2:	3a01      	subs	r2, #1
 8011ff4:	2300      	movs	r3, #0
 8011ff6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011ffa:	f7ff fe9d 	bl	8011d38 <__multadd>
 8011ffe:	4607      	mov	r7, r0
 8012000:	10ad      	asrs	r5, r5, #2
 8012002:	d03d      	beq.n	8012080 <__pow5mult+0xa0>
 8012004:	69f4      	ldr	r4, [r6, #28]
 8012006:	b97c      	cbnz	r4, 8012028 <__pow5mult+0x48>
 8012008:	2010      	movs	r0, #16
 801200a:	f7ff fd7f 	bl	8011b0c <malloc>
 801200e:	4602      	mov	r2, r0
 8012010:	61f0      	str	r0, [r6, #28]
 8012012:	b928      	cbnz	r0, 8012020 <__pow5mult+0x40>
 8012014:	4b1d      	ldr	r3, [pc, #116]	; (801208c <__pow5mult+0xac>)
 8012016:	481e      	ldr	r0, [pc, #120]	; (8012090 <__pow5mult+0xb0>)
 8012018:	f240 11b3 	movw	r1, #435	; 0x1b3
 801201c:	f000 fdb0 	bl	8012b80 <__assert_func>
 8012020:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012024:	6004      	str	r4, [r0, #0]
 8012026:	60c4      	str	r4, [r0, #12]
 8012028:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801202c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012030:	b94c      	cbnz	r4, 8012046 <__pow5mult+0x66>
 8012032:	f240 2171 	movw	r1, #625	; 0x271
 8012036:	4630      	mov	r0, r6
 8012038:	f7ff ff12 	bl	8011e60 <__i2b>
 801203c:	2300      	movs	r3, #0
 801203e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012042:	4604      	mov	r4, r0
 8012044:	6003      	str	r3, [r0, #0]
 8012046:	f04f 0900 	mov.w	r9, #0
 801204a:	07eb      	lsls	r3, r5, #31
 801204c:	d50a      	bpl.n	8012064 <__pow5mult+0x84>
 801204e:	4639      	mov	r1, r7
 8012050:	4622      	mov	r2, r4
 8012052:	4630      	mov	r0, r6
 8012054:	f7ff ff1a 	bl	8011e8c <__multiply>
 8012058:	4639      	mov	r1, r7
 801205a:	4680      	mov	r8, r0
 801205c:	4630      	mov	r0, r6
 801205e:	f7ff fe49 	bl	8011cf4 <_Bfree>
 8012062:	4647      	mov	r7, r8
 8012064:	106d      	asrs	r5, r5, #1
 8012066:	d00b      	beq.n	8012080 <__pow5mult+0xa0>
 8012068:	6820      	ldr	r0, [r4, #0]
 801206a:	b938      	cbnz	r0, 801207c <__pow5mult+0x9c>
 801206c:	4622      	mov	r2, r4
 801206e:	4621      	mov	r1, r4
 8012070:	4630      	mov	r0, r6
 8012072:	f7ff ff0b 	bl	8011e8c <__multiply>
 8012076:	6020      	str	r0, [r4, #0]
 8012078:	f8c0 9000 	str.w	r9, [r0]
 801207c:	4604      	mov	r4, r0
 801207e:	e7e4      	b.n	801204a <__pow5mult+0x6a>
 8012080:	4638      	mov	r0, r7
 8012082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012086:	bf00      	nop
 8012088:	08014b78 	.word	0x08014b78
 801208c:	080149a9 	.word	0x080149a9
 8012090:	08014a29 	.word	0x08014a29

08012094 <__lshift>:
 8012094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012098:	460c      	mov	r4, r1
 801209a:	6849      	ldr	r1, [r1, #4]
 801209c:	6923      	ldr	r3, [r4, #16]
 801209e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80120a2:	68a3      	ldr	r3, [r4, #8]
 80120a4:	4607      	mov	r7, r0
 80120a6:	4691      	mov	r9, r2
 80120a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80120ac:	f108 0601 	add.w	r6, r8, #1
 80120b0:	42b3      	cmp	r3, r6
 80120b2:	db0b      	blt.n	80120cc <__lshift+0x38>
 80120b4:	4638      	mov	r0, r7
 80120b6:	f7ff fddd 	bl	8011c74 <_Balloc>
 80120ba:	4605      	mov	r5, r0
 80120bc:	b948      	cbnz	r0, 80120d2 <__lshift+0x3e>
 80120be:	4602      	mov	r2, r0
 80120c0:	4b28      	ldr	r3, [pc, #160]	; (8012164 <__lshift+0xd0>)
 80120c2:	4829      	ldr	r0, [pc, #164]	; (8012168 <__lshift+0xd4>)
 80120c4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80120c8:	f000 fd5a 	bl	8012b80 <__assert_func>
 80120cc:	3101      	adds	r1, #1
 80120ce:	005b      	lsls	r3, r3, #1
 80120d0:	e7ee      	b.n	80120b0 <__lshift+0x1c>
 80120d2:	2300      	movs	r3, #0
 80120d4:	f100 0114 	add.w	r1, r0, #20
 80120d8:	f100 0210 	add.w	r2, r0, #16
 80120dc:	4618      	mov	r0, r3
 80120de:	4553      	cmp	r3, sl
 80120e0:	db33      	blt.n	801214a <__lshift+0xb6>
 80120e2:	6920      	ldr	r0, [r4, #16]
 80120e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80120e8:	f104 0314 	add.w	r3, r4, #20
 80120ec:	f019 091f 	ands.w	r9, r9, #31
 80120f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80120f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80120f8:	d02b      	beq.n	8012152 <__lshift+0xbe>
 80120fa:	f1c9 0e20 	rsb	lr, r9, #32
 80120fe:	468a      	mov	sl, r1
 8012100:	2200      	movs	r2, #0
 8012102:	6818      	ldr	r0, [r3, #0]
 8012104:	fa00 f009 	lsl.w	r0, r0, r9
 8012108:	4310      	orrs	r0, r2
 801210a:	f84a 0b04 	str.w	r0, [sl], #4
 801210e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012112:	459c      	cmp	ip, r3
 8012114:	fa22 f20e 	lsr.w	r2, r2, lr
 8012118:	d8f3      	bhi.n	8012102 <__lshift+0x6e>
 801211a:	ebac 0304 	sub.w	r3, ip, r4
 801211e:	3b15      	subs	r3, #21
 8012120:	f023 0303 	bic.w	r3, r3, #3
 8012124:	3304      	adds	r3, #4
 8012126:	f104 0015 	add.w	r0, r4, #21
 801212a:	4584      	cmp	ip, r0
 801212c:	bf38      	it	cc
 801212e:	2304      	movcc	r3, #4
 8012130:	50ca      	str	r2, [r1, r3]
 8012132:	b10a      	cbz	r2, 8012138 <__lshift+0xa4>
 8012134:	f108 0602 	add.w	r6, r8, #2
 8012138:	3e01      	subs	r6, #1
 801213a:	4638      	mov	r0, r7
 801213c:	612e      	str	r6, [r5, #16]
 801213e:	4621      	mov	r1, r4
 8012140:	f7ff fdd8 	bl	8011cf4 <_Bfree>
 8012144:	4628      	mov	r0, r5
 8012146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801214a:	f842 0f04 	str.w	r0, [r2, #4]!
 801214e:	3301      	adds	r3, #1
 8012150:	e7c5      	b.n	80120de <__lshift+0x4a>
 8012152:	3904      	subs	r1, #4
 8012154:	f853 2b04 	ldr.w	r2, [r3], #4
 8012158:	f841 2f04 	str.w	r2, [r1, #4]!
 801215c:	459c      	cmp	ip, r3
 801215e:	d8f9      	bhi.n	8012154 <__lshift+0xc0>
 8012160:	e7ea      	b.n	8012138 <__lshift+0xa4>
 8012162:	bf00      	nop
 8012164:	08014a18 	.word	0x08014a18
 8012168:	08014a29 	.word	0x08014a29

0801216c <__mcmp>:
 801216c:	b530      	push	{r4, r5, lr}
 801216e:	6902      	ldr	r2, [r0, #16]
 8012170:	690c      	ldr	r4, [r1, #16]
 8012172:	1b12      	subs	r2, r2, r4
 8012174:	d10e      	bne.n	8012194 <__mcmp+0x28>
 8012176:	f100 0314 	add.w	r3, r0, #20
 801217a:	3114      	adds	r1, #20
 801217c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012180:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012184:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012188:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801218c:	42a5      	cmp	r5, r4
 801218e:	d003      	beq.n	8012198 <__mcmp+0x2c>
 8012190:	d305      	bcc.n	801219e <__mcmp+0x32>
 8012192:	2201      	movs	r2, #1
 8012194:	4610      	mov	r0, r2
 8012196:	bd30      	pop	{r4, r5, pc}
 8012198:	4283      	cmp	r3, r0
 801219a:	d3f3      	bcc.n	8012184 <__mcmp+0x18>
 801219c:	e7fa      	b.n	8012194 <__mcmp+0x28>
 801219e:	f04f 32ff 	mov.w	r2, #4294967295
 80121a2:	e7f7      	b.n	8012194 <__mcmp+0x28>

080121a4 <__mdiff>:
 80121a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121a8:	460c      	mov	r4, r1
 80121aa:	4606      	mov	r6, r0
 80121ac:	4611      	mov	r1, r2
 80121ae:	4620      	mov	r0, r4
 80121b0:	4690      	mov	r8, r2
 80121b2:	f7ff ffdb 	bl	801216c <__mcmp>
 80121b6:	1e05      	subs	r5, r0, #0
 80121b8:	d110      	bne.n	80121dc <__mdiff+0x38>
 80121ba:	4629      	mov	r1, r5
 80121bc:	4630      	mov	r0, r6
 80121be:	f7ff fd59 	bl	8011c74 <_Balloc>
 80121c2:	b930      	cbnz	r0, 80121d2 <__mdiff+0x2e>
 80121c4:	4b3a      	ldr	r3, [pc, #232]	; (80122b0 <__mdiff+0x10c>)
 80121c6:	4602      	mov	r2, r0
 80121c8:	f240 2137 	movw	r1, #567	; 0x237
 80121cc:	4839      	ldr	r0, [pc, #228]	; (80122b4 <__mdiff+0x110>)
 80121ce:	f000 fcd7 	bl	8012b80 <__assert_func>
 80121d2:	2301      	movs	r3, #1
 80121d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80121d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121dc:	bfa4      	itt	ge
 80121de:	4643      	movge	r3, r8
 80121e0:	46a0      	movge	r8, r4
 80121e2:	4630      	mov	r0, r6
 80121e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80121e8:	bfa6      	itte	ge
 80121ea:	461c      	movge	r4, r3
 80121ec:	2500      	movge	r5, #0
 80121ee:	2501      	movlt	r5, #1
 80121f0:	f7ff fd40 	bl	8011c74 <_Balloc>
 80121f4:	b920      	cbnz	r0, 8012200 <__mdiff+0x5c>
 80121f6:	4b2e      	ldr	r3, [pc, #184]	; (80122b0 <__mdiff+0x10c>)
 80121f8:	4602      	mov	r2, r0
 80121fa:	f240 2145 	movw	r1, #581	; 0x245
 80121fe:	e7e5      	b.n	80121cc <__mdiff+0x28>
 8012200:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012204:	6926      	ldr	r6, [r4, #16]
 8012206:	60c5      	str	r5, [r0, #12]
 8012208:	f104 0914 	add.w	r9, r4, #20
 801220c:	f108 0514 	add.w	r5, r8, #20
 8012210:	f100 0e14 	add.w	lr, r0, #20
 8012214:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012218:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801221c:	f108 0210 	add.w	r2, r8, #16
 8012220:	46f2      	mov	sl, lr
 8012222:	2100      	movs	r1, #0
 8012224:	f859 3b04 	ldr.w	r3, [r9], #4
 8012228:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801222c:	fa11 f88b 	uxtah	r8, r1, fp
 8012230:	b299      	uxth	r1, r3
 8012232:	0c1b      	lsrs	r3, r3, #16
 8012234:	eba8 0801 	sub.w	r8, r8, r1
 8012238:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801223c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012240:	fa1f f888 	uxth.w	r8, r8
 8012244:	1419      	asrs	r1, r3, #16
 8012246:	454e      	cmp	r6, r9
 8012248:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801224c:	f84a 3b04 	str.w	r3, [sl], #4
 8012250:	d8e8      	bhi.n	8012224 <__mdiff+0x80>
 8012252:	1b33      	subs	r3, r6, r4
 8012254:	3b15      	subs	r3, #21
 8012256:	f023 0303 	bic.w	r3, r3, #3
 801225a:	3304      	adds	r3, #4
 801225c:	3415      	adds	r4, #21
 801225e:	42a6      	cmp	r6, r4
 8012260:	bf38      	it	cc
 8012262:	2304      	movcc	r3, #4
 8012264:	441d      	add	r5, r3
 8012266:	4473      	add	r3, lr
 8012268:	469e      	mov	lr, r3
 801226a:	462e      	mov	r6, r5
 801226c:	4566      	cmp	r6, ip
 801226e:	d30e      	bcc.n	801228e <__mdiff+0xea>
 8012270:	f10c 0203 	add.w	r2, ip, #3
 8012274:	1b52      	subs	r2, r2, r5
 8012276:	f022 0203 	bic.w	r2, r2, #3
 801227a:	3d03      	subs	r5, #3
 801227c:	45ac      	cmp	ip, r5
 801227e:	bf38      	it	cc
 8012280:	2200      	movcc	r2, #0
 8012282:	4413      	add	r3, r2
 8012284:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012288:	b17a      	cbz	r2, 80122aa <__mdiff+0x106>
 801228a:	6107      	str	r7, [r0, #16]
 801228c:	e7a4      	b.n	80121d8 <__mdiff+0x34>
 801228e:	f856 8b04 	ldr.w	r8, [r6], #4
 8012292:	fa11 f288 	uxtah	r2, r1, r8
 8012296:	1414      	asrs	r4, r2, #16
 8012298:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801229c:	b292      	uxth	r2, r2
 801229e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80122a2:	f84e 2b04 	str.w	r2, [lr], #4
 80122a6:	1421      	asrs	r1, r4, #16
 80122a8:	e7e0      	b.n	801226c <__mdiff+0xc8>
 80122aa:	3f01      	subs	r7, #1
 80122ac:	e7ea      	b.n	8012284 <__mdiff+0xe0>
 80122ae:	bf00      	nop
 80122b0:	08014a18 	.word	0x08014a18
 80122b4:	08014a29 	.word	0x08014a29

080122b8 <__d2b>:
 80122b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80122bc:	460f      	mov	r7, r1
 80122be:	2101      	movs	r1, #1
 80122c0:	ec59 8b10 	vmov	r8, r9, d0
 80122c4:	4616      	mov	r6, r2
 80122c6:	f7ff fcd5 	bl	8011c74 <_Balloc>
 80122ca:	4604      	mov	r4, r0
 80122cc:	b930      	cbnz	r0, 80122dc <__d2b+0x24>
 80122ce:	4602      	mov	r2, r0
 80122d0:	4b24      	ldr	r3, [pc, #144]	; (8012364 <__d2b+0xac>)
 80122d2:	4825      	ldr	r0, [pc, #148]	; (8012368 <__d2b+0xb0>)
 80122d4:	f240 310f 	movw	r1, #783	; 0x30f
 80122d8:	f000 fc52 	bl	8012b80 <__assert_func>
 80122dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80122e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80122e4:	bb2d      	cbnz	r5, 8012332 <__d2b+0x7a>
 80122e6:	9301      	str	r3, [sp, #4]
 80122e8:	f1b8 0300 	subs.w	r3, r8, #0
 80122ec:	d026      	beq.n	801233c <__d2b+0x84>
 80122ee:	4668      	mov	r0, sp
 80122f0:	9300      	str	r3, [sp, #0]
 80122f2:	f7ff fd87 	bl	8011e04 <__lo0bits>
 80122f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80122fa:	b1e8      	cbz	r0, 8012338 <__d2b+0x80>
 80122fc:	f1c0 0320 	rsb	r3, r0, #32
 8012300:	fa02 f303 	lsl.w	r3, r2, r3
 8012304:	430b      	orrs	r3, r1
 8012306:	40c2      	lsrs	r2, r0
 8012308:	6163      	str	r3, [r4, #20]
 801230a:	9201      	str	r2, [sp, #4]
 801230c:	9b01      	ldr	r3, [sp, #4]
 801230e:	61a3      	str	r3, [r4, #24]
 8012310:	2b00      	cmp	r3, #0
 8012312:	bf14      	ite	ne
 8012314:	2202      	movne	r2, #2
 8012316:	2201      	moveq	r2, #1
 8012318:	6122      	str	r2, [r4, #16]
 801231a:	b1bd      	cbz	r5, 801234c <__d2b+0x94>
 801231c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012320:	4405      	add	r5, r0
 8012322:	603d      	str	r5, [r7, #0]
 8012324:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012328:	6030      	str	r0, [r6, #0]
 801232a:	4620      	mov	r0, r4
 801232c:	b003      	add	sp, #12
 801232e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012332:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012336:	e7d6      	b.n	80122e6 <__d2b+0x2e>
 8012338:	6161      	str	r1, [r4, #20]
 801233a:	e7e7      	b.n	801230c <__d2b+0x54>
 801233c:	a801      	add	r0, sp, #4
 801233e:	f7ff fd61 	bl	8011e04 <__lo0bits>
 8012342:	9b01      	ldr	r3, [sp, #4]
 8012344:	6163      	str	r3, [r4, #20]
 8012346:	3020      	adds	r0, #32
 8012348:	2201      	movs	r2, #1
 801234a:	e7e5      	b.n	8012318 <__d2b+0x60>
 801234c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012350:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012354:	6038      	str	r0, [r7, #0]
 8012356:	6918      	ldr	r0, [r3, #16]
 8012358:	f7ff fd34 	bl	8011dc4 <__hi0bits>
 801235c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012360:	e7e2      	b.n	8012328 <__d2b+0x70>
 8012362:	bf00      	nop
 8012364:	08014a18 	.word	0x08014a18
 8012368:	08014a29 	.word	0x08014a29

0801236c <__ssputs_r>:
 801236c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012370:	688e      	ldr	r6, [r1, #8]
 8012372:	461f      	mov	r7, r3
 8012374:	42be      	cmp	r6, r7
 8012376:	680b      	ldr	r3, [r1, #0]
 8012378:	4682      	mov	sl, r0
 801237a:	460c      	mov	r4, r1
 801237c:	4690      	mov	r8, r2
 801237e:	d82c      	bhi.n	80123da <__ssputs_r+0x6e>
 8012380:	898a      	ldrh	r2, [r1, #12]
 8012382:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012386:	d026      	beq.n	80123d6 <__ssputs_r+0x6a>
 8012388:	6965      	ldr	r5, [r4, #20]
 801238a:	6909      	ldr	r1, [r1, #16]
 801238c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012390:	eba3 0901 	sub.w	r9, r3, r1
 8012394:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012398:	1c7b      	adds	r3, r7, #1
 801239a:	444b      	add	r3, r9
 801239c:	106d      	asrs	r5, r5, #1
 801239e:	429d      	cmp	r5, r3
 80123a0:	bf38      	it	cc
 80123a2:	461d      	movcc	r5, r3
 80123a4:	0553      	lsls	r3, r2, #21
 80123a6:	d527      	bpl.n	80123f8 <__ssputs_r+0x8c>
 80123a8:	4629      	mov	r1, r5
 80123aa:	f7ff fbd7 	bl	8011b5c <_malloc_r>
 80123ae:	4606      	mov	r6, r0
 80123b0:	b360      	cbz	r0, 801240c <__ssputs_r+0xa0>
 80123b2:	6921      	ldr	r1, [r4, #16]
 80123b4:	464a      	mov	r2, r9
 80123b6:	f7fe fcd2 	bl	8010d5e <memcpy>
 80123ba:	89a3      	ldrh	r3, [r4, #12]
 80123bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80123c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80123c4:	81a3      	strh	r3, [r4, #12]
 80123c6:	6126      	str	r6, [r4, #16]
 80123c8:	6165      	str	r5, [r4, #20]
 80123ca:	444e      	add	r6, r9
 80123cc:	eba5 0509 	sub.w	r5, r5, r9
 80123d0:	6026      	str	r6, [r4, #0]
 80123d2:	60a5      	str	r5, [r4, #8]
 80123d4:	463e      	mov	r6, r7
 80123d6:	42be      	cmp	r6, r7
 80123d8:	d900      	bls.n	80123dc <__ssputs_r+0x70>
 80123da:	463e      	mov	r6, r7
 80123dc:	6820      	ldr	r0, [r4, #0]
 80123de:	4632      	mov	r2, r6
 80123e0:	4641      	mov	r1, r8
 80123e2:	f000 fba3 	bl	8012b2c <memmove>
 80123e6:	68a3      	ldr	r3, [r4, #8]
 80123e8:	1b9b      	subs	r3, r3, r6
 80123ea:	60a3      	str	r3, [r4, #8]
 80123ec:	6823      	ldr	r3, [r4, #0]
 80123ee:	4433      	add	r3, r6
 80123f0:	6023      	str	r3, [r4, #0]
 80123f2:	2000      	movs	r0, #0
 80123f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123f8:	462a      	mov	r2, r5
 80123fa:	f000 fc07 	bl	8012c0c <_realloc_r>
 80123fe:	4606      	mov	r6, r0
 8012400:	2800      	cmp	r0, #0
 8012402:	d1e0      	bne.n	80123c6 <__ssputs_r+0x5a>
 8012404:	6921      	ldr	r1, [r4, #16]
 8012406:	4650      	mov	r0, sl
 8012408:	f7ff fb34 	bl	8011a74 <_free_r>
 801240c:	230c      	movs	r3, #12
 801240e:	f8ca 3000 	str.w	r3, [sl]
 8012412:	89a3      	ldrh	r3, [r4, #12]
 8012414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012418:	81a3      	strh	r3, [r4, #12]
 801241a:	f04f 30ff 	mov.w	r0, #4294967295
 801241e:	e7e9      	b.n	80123f4 <__ssputs_r+0x88>

08012420 <_svfiprintf_r>:
 8012420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012424:	4698      	mov	r8, r3
 8012426:	898b      	ldrh	r3, [r1, #12]
 8012428:	061b      	lsls	r3, r3, #24
 801242a:	b09d      	sub	sp, #116	; 0x74
 801242c:	4607      	mov	r7, r0
 801242e:	460d      	mov	r5, r1
 8012430:	4614      	mov	r4, r2
 8012432:	d50e      	bpl.n	8012452 <_svfiprintf_r+0x32>
 8012434:	690b      	ldr	r3, [r1, #16]
 8012436:	b963      	cbnz	r3, 8012452 <_svfiprintf_r+0x32>
 8012438:	2140      	movs	r1, #64	; 0x40
 801243a:	f7ff fb8f 	bl	8011b5c <_malloc_r>
 801243e:	6028      	str	r0, [r5, #0]
 8012440:	6128      	str	r0, [r5, #16]
 8012442:	b920      	cbnz	r0, 801244e <_svfiprintf_r+0x2e>
 8012444:	230c      	movs	r3, #12
 8012446:	603b      	str	r3, [r7, #0]
 8012448:	f04f 30ff 	mov.w	r0, #4294967295
 801244c:	e0d0      	b.n	80125f0 <_svfiprintf_r+0x1d0>
 801244e:	2340      	movs	r3, #64	; 0x40
 8012450:	616b      	str	r3, [r5, #20]
 8012452:	2300      	movs	r3, #0
 8012454:	9309      	str	r3, [sp, #36]	; 0x24
 8012456:	2320      	movs	r3, #32
 8012458:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801245c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012460:	2330      	movs	r3, #48	; 0x30
 8012462:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012608 <_svfiprintf_r+0x1e8>
 8012466:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801246a:	f04f 0901 	mov.w	r9, #1
 801246e:	4623      	mov	r3, r4
 8012470:	469a      	mov	sl, r3
 8012472:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012476:	b10a      	cbz	r2, 801247c <_svfiprintf_r+0x5c>
 8012478:	2a25      	cmp	r2, #37	; 0x25
 801247a:	d1f9      	bne.n	8012470 <_svfiprintf_r+0x50>
 801247c:	ebba 0b04 	subs.w	fp, sl, r4
 8012480:	d00b      	beq.n	801249a <_svfiprintf_r+0x7a>
 8012482:	465b      	mov	r3, fp
 8012484:	4622      	mov	r2, r4
 8012486:	4629      	mov	r1, r5
 8012488:	4638      	mov	r0, r7
 801248a:	f7ff ff6f 	bl	801236c <__ssputs_r>
 801248e:	3001      	adds	r0, #1
 8012490:	f000 80a9 	beq.w	80125e6 <_svfiprintf_r+0x1c6>
 8012494:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012496:	445a      	add	r2, fp
 8012498:	9209      	str	r2, [sp, #36]	; 0x24
 801249a:	f89a 3000 	ldrb.w	r3, [sl]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	f000 80a1 	beq.w	80125e6 <_svfiprintf_r+0x1c6>
 80124a4:	2300      	movs	r3, #0
 80124a6:	f04f 32ff 	mov.w	r2, #4294967295
 80124aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80124ae:	f10a 0a01 	add.w	sl, sl, #1
 80124b2:	9304      	str	r3, [sp, #16]
 80124b4:	9307      	str	r3, [sp, #28]
 80124b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80124ba:	931a      	str	r3, [sp, #104]	; 0x68
 80124bc:	4654      	mov	r4, sl
 80124be:	2205      	movs	r2, #5
 80124c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124c4:	4850      	ldr	r0, [pc, #320]	; (8012608 <_svfiprintf_r+0x1e8>)
 80124c6:	f7ed fe5b 	bl	8000180 <memchr>
 80124ca:	9a04      	ldr	r2, [sp, #16]
 80124cc:	b9d8      	cbnz	r0, 8012506 <_svfiprintf_r+0xe6>
 80124ce:	06d0      	lsls	r0, r2, #27
 80124d0:	bf44      	itt	mi
 80124d2:	2320      	movmi	r3, #32
 80124d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80124d8:	0711      	lsls	r1, r2, #28
 80124da:	bf44      	itt	mi
 80124dc:	232b      	movmi	r3, #43	; 0x2b
 80124de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80124e2:	f89a 3000 	ldrb.w	r3, [sl]
 80124e6:	2b2a      	cmp	r3, #42	; 0x2a
 80124e8:	d015      	beq.n	8012516 <_svfiprintf_r+0xf6>
 80124ea:	9a07      	ldr	r2, [sp, #28]
 80124ec:	4654      	mov	r4, sl
 80124ee:	2000      	movs	r0, #0
 80124f0:	f04f 0c0a 	mov.w	ip, #10
 80124f4:	4621      	mov	r1, r4
 80124f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80124fa:	3b30      	subs	r3, #48	; 0x30
 80124fc:	2b09      	cmp	r3, #9
 80124fe:	d94d      	bls.n	801259c <_svfiprintf_r+0x17c>
 8012500:	b1b0      	cbz	r0, 8012530 <_svfiprintf_r+0x110>
 8012502:	9207      	str	r2, [sp, #28]
 8012504:	e014      	b.n	8012530 <_svfiprintf_r+0x110>
 8012506:	eba0 0308 	sub.w	r3, r0, r8
 801250a:	fa09 f303 	lsl.w	r3, r9, r3
 801250e:	4313      	orrs	r3, r2
 8012510:	9304      	str	r3, [sp, #16]
 8012512:	46a2      	mov	sl, r4
 8012514:	e7d2      	b.n	80124bc <_svfiprintf_r+0x9c>
 8012516:	9b03      	ldr	r3, [sp, #12]
 8012518:	1d19      	adds	r1, r3, #4
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	9103      	str	r1, [sp, #12]
 801251e:	2b00      	cmp	r3, #0
 8012520:	bfbb      	ittet	lt
 8012522:	425b      	neglt	r3, r3
 8012524:	f042 0202 	orrlt.w	r2, r2, #2
 8012528:	9307      	strge	r3, [sp, #28]
 801252a:	9307      	strlt	r3, [sp, #28]
 801252c:	bfb8      	it	lt
 801252e:	9204      	strlt	r2, [sp, #16]
 8012530:	7823      	ldrb	r3, [r4, #0]
 8012532:	2b2e      	cmp	r3, #46	; 0x2e
 8012534:	d10c      	bne.n	8012550 <_svfiprintf_r+0x130>
 8012536:	7863      	ldrb	r3, [r4, #1]
 8012538:	2b2a      	cmp	r3, #42	; 0x2a
 801253a:	d134      	bne.n	80125a6 <_svfiprintf_r+0x186>
 801253c:	9b03      	ldr	r3, [sp, #12]
 801253e:	1d1a      	adds	r2, r3, #4
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	9203      	str	r2, [sp, #12]
 8012544:	2b00      	cmp	r3, #0
 8012546:	bfb8      	it	lt
 8012548:	f04f 33ff 	movlt.w	r3, #4294967295
 801254c:	3402      	adds	r4, #2
 801254e:	9305      	str	r3, [sp, #20]
 8012550:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012618 <_svfiprintf_r+0x1f8>
 8012554:	7821      	ldrb	r1, [r4, #0]
 8012556:	2203      	movs	r2, #3
 8012558:	4650      	mov	r0, sl
 801255a:	f7ed fe11 	bl	8000180 <memchr>
 801255e:	b138      	cbz	r0, 8012570 <_svfiprintf_r+0x150>
 8012560:	9b04      	ldr	r3, [sp, #16]
 8012562:	eba0 000a 	sub.w	r0, r0, sl
 8012566:	2240      	movs	r2, #64	; 0x40
 8012568:	4082      	lsls	r2, r0
 801256a:	4313      	orrs	r3, r2
 801256c:	3401      	adds	r4, #1
 801256e:	9304      	str	r3, [sp, #16]
 8012570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012574:	4825      	ldr	r0, [pc, #148]	; (801260c <_svfiprintf_r+0x1ec>)
 8012576:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801257a:	2206      	movs	r2, #6
 801257c:	f7ed fe00 	bl	8000180 <memchr>
 8012580:	2800      	cmp	r0, #0
 8012582:	d038      	beq.n	80125f6 <_svfiprintf_r+0x1d6>
 8012584:	4b22      	ldr	r3, [pc, #136]	; (8012610 <_svfiprintf_r+0x1f0>)
 8012586:	bb1b      	cbnz	r3, 80125d0 <_svfiprintf_r+0x1b0>
 8012588:	9b03      	ldr	r3, [sp, #12]
 801258a:	3307      	adds	r3, #7
 801258c:	f023 0307 	bic.w	r3, r3, #7
 8012590:	3308      	adds	r3, #8
 8012592:	9303      	str	r3, [sp, #12]
 8012594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012596:	4433      	add	r3, r6
 8012598:	9309      	str	r3, [sp, #36]	; 0x24
 801259a:	e768      	b.n	801246e <_svfiprintf_r+0x4e>
 801259c:	fb0c 3202 	mla	r2, ip, r2, r3
 80125a0:	460c      	mov	r4, r1
 80125a2:	2001      	movs	r0, #1
 80125a4:	e7a6      	b.n	80124f4 <_svfiprintf_r+0xd4>
 80125a6:	2300      	movs	r3, #0
 80125a8:	3401      	adds	r4, #1
 80125aa:	9305      	str	r3, [sp, #20]
 80125ac:	4619      	mov	r1, r3
 80125ae:	f04f 0c0a 	mov.w	ip, #10
 80125b2:	4620      	mov	r0, r4
 80125b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80125b8:	3a30      	subs	r2, #48	; 0x30
 80125ba:	2a09      	cmp	r2, #9
 80125bc:	d903      	bls.n	80125c6 <_svfiprintf_r+0x1a6>
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d0c6      	beq.n	8012550 <_svfiprintf_r+0x130>
 80125c2:	9105      	str	r1, [sp, #20]
 80125c4:	e7c4      	b.n	8012550 <_svfiprintf_r+0x130>
 80125c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80125ca:	4604      	mov	r4, r0
 80125cc:	2301      	movs	r3, #1
 80125ce:	e7f0      	b.n	80125b2 <_svfiprintf_r+0x192>
 80125d0:	ab03      	add	r3, sp, #12
 80125d2:	9300      	str	r3, [sp, #0]
 80125d4:	462a      	mov	r2, r5
 80125d6:	4b0f      	ldr	r3, [pc, #60]	; (8012614 <_svfiprintf_r+0x1f4>)
 80125d8:	a904      	add	r1, sp, #16
 80125da:	4638      	mov	r0, r7
 80125dc:	f7fd fe3c 	bl	8010258 <_printf_float>
 80125e0:	1c42      	adds	r2, r0, #1
 80125e2:	4606      	mov	r6, r0
 80125e4:	d1d6      	bne.n	8012594 <_svfiprintf_r+0x174>
 80125e6:	89ab      	ldrh	r3, [r5, #12]
 80125e8:	065b      	lsls	r3, r3, #25
 80125ea:	f53f af2d 	bmi.w	8012448 <_svfiprintf_r+0x28>
 80125ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80125f0:	b01d      	add	sp, #116	; 0x74
 80125f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125f6:	ab03      	add	r3, sp, #12
 80125f8:	9300      	str	r3, [sp, #0]
 80125fa:	462a      	mov	r2, r5
 80125fc:	4b05      	ldr	r3, [pc, #20]	; (8012614 <_svfiprintf_r+0x1f4>)
 80125fe:	a904      	add	r1, sp, #16
 8012600:	4638      	mov	r0, r7
 8012602:	f7fe f8cd 	bl	80107a0 <_printf_i>
 8012606:	e7eb      	b.n	80125e0 <_svfiprintf_r+0x1c0>
 8012608:	08014b84 	.word	0x08014b84
 801260c:	08014b8e 	.word	0x08014b8e
 8012610:	08010259 	.word	0x08010259
 8012614:	0801236d 	.word	0x0801236d
 8012618:	08014b8a 	.word	0x08014b8a

0801261c <__sfputc_r>:
 801261c:	6893      	ldr	r3, [r2, #8]
 801261e:	3b01      	subs	r3, #1
 8012620:	2b00      	cmp	r3, #0
 8012622:	b410      	push	{r4}
 8012624:	6093      	str	r3, [r2, #8]
 8012626:	da08      	bge.n	801263a <__sfputc_r+0x1e>
 8012628:	6994      	ldr	r4, [r2, #24]
 801262a:	42a3      	cmp	r3, r4
 801262c:	db01      	blt.n	8012632 <__sfputc_r+0x16>
 801262e:	290a      	cmp	r1, #10
 8012630:	d103      	bne.n	801263a <__sfputc_r+0x1e>
 8012632:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012636:	f000 b9e3 	b.w	8012a00 <__swbuf_r>
 801263a:	6813      	ldr	r3, [r2, #0]
 801263c:	1c58      	adds	r0, r3, #1
 801263e:	6010      	str	r0, [r2, #0]
 8012640:	7019      	strb	r1, [r3, #0]
 8012642:	4608      	mov	r0, r1
 8012644:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012648:	4770      	bx	lr

0801264a <__sfputs_r>:
 801264a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801264c:	4606      	mov	r6, r0
 801264e:	460f      	mov	r7, r1
 8012650:	4614      	mov	r4, r2
 8012652:	18d5      	adds	r5, r2, r3
 8012654:	42ac      	cmp	r4, r5
 8012656:	d101      	bne.n	801265c <__sfputs_r+0x12>
 8012658:	2000      	movs	r0, #0
 801265a:	e007      	b.n	801266c <__sfputs_r+0x22>
 801265c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012660:	463a      	mov	r2, r7
 8012662:	4630      	mov	r0, r6
 8012664:	f7ff ffda 	bl	801261c <__sfputc_r>
 8012668:	1c43      	adds	r3, r0, #1
 801266a:	d1f3      	bne.n	8012654 <__sfputs_r+0xa>
 801266c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012670 <_vfiprintf_r>:
 8012670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012674:	460d      	mov	r5, r1
 8012676:	b09d      	sub	sp, #116	; 0x74
 8012678:	4614      	mov	r4, r2
 801267a:	4698      	mov	r8, r3
 801267c:	4606      	mov	r6, r0
 801267e:	b118      	cbz	r0, 8012688 <_vfiprintf_r+0x18>
 8012680:	6a03      	ldr	r3, [r0, #32]
 8012682:	b90b      	cbnz	r3, 8012688 <_vfiprintf_r+0x18>
 8012684:	f7fe fa3a 	bl	8010afc <__sinit>
 8012688:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801268a:	07d9      	lsls	r1, r3, #31
 801268c:	d405      	bmi.n	801269a <_vfiprintf_r+0x2a>
 801268e:	89ab      	ldrh	r3, [r5, #12]
 8012690:	059a      	lsls	r2, r3, #22
 8012692:	d402      	bmi.n	801269a <_vfiprintf_r+0x2a>
 8012694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012696:	f7fe fb60 	bl	8010d5a <__retarget_lock_acquire_recursive>
 801269a:	89ab      	ldrh	r3, [r5, #12]
 801269c:	071b      	lsls	r3, r3, #28
 801269e:	d501      	bpl.n	80126a4 <_vfiprintf_r+0x34>
 80126a0:	692b      	ldr	r3, [r5, #16]
 80126a2:	b99b      	cbnz	r3, 80126cc <_vfiprintf_r+0x5c>
 80126a4:	4629      	mov	r1, r5
 80126a6:	4630      	mov	r0, r6
 80126a8:	f000 f9e8 	bl	8012a7c <__swsetup_r>
 80126ac:	b170      	cbz	r0, 80126cc <_vfiprintf_r+0x5c>
 80126ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80126b0:	07dc      	lsls	r4, r3, #31
 80126b2:	d504      	bpl.n	80126be <_vfiprintf_r+0x4e>
 80126b4:	f04f 30ff 	mov.w	r0, #4294967295
 80126b8:	b01d      	add	sp, #116	; 0x74
 80126ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126be:	89ab      	ldrh	r3, [r5, #12]
 80126c0:	0598      	lsls	r0, r3, #22
 80126c2:	d4f7      	bmi.n	80126b4 <_vfiprintf_r+0x44>
 80126c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80126c6:	f7fe fb49 	bl	8010d5c <__retarget_lock_release_recursive>
 80126ca:	e7f3      	b.n	80126b4 <_vfiprintf_r+0x44>
 80126cc:	2300      	movs	r3, #0
 80126ce:	9309      	str	r3, [sp, #36]	; 0x24
 80126d0:	2320      	movs	r3, #32
 80126d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80126d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80126da:	2330      	movs	r3, #48	; 0x30
 80126dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012890 <_vfiprintf_r+0x220>
 80126e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80126e4:	f04f 0901 	mov.w	r9, #1
 80126e8:	4623      	mov	r3, r4
 80126ea:	469a      	mov	sl, r3
 80126ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126f0:	b10a      	cbz	r2, 80126f6 <_vfiprintf_r+0x86>
 80126f2:	2a25      	cmp	r2, #37	; 0x25
 80126f4:	d1f9      	bne.n	80126ea <_vfiprintf_r+0x7a>
 80126f6:	ebba 0b04 	subs.w	fp, sl, r4
 80126fa:	d00b      	beq.n	8012714 <_vfiprintf_r+0xa4>
 80126fc:	465b      	mov	r3, fp
 80126fe:	4622      	mov	r2, r4
 8012700:	4629      	mov	r1, r5
 8012702:	4630      	mov	r0, r6
 8012704:	f7ff ffa1 	bl	801264a <__sfputs_r>
 8012708:	3001      	adds	r0, #1
 801270a:	f000 80a9 	beq.w	8012860 <_vfiprintf_r+0x1f0>
 801270e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012710:	445a      	add	r2, fp
 8012712:	9209      	str	r2, [sp, #36]	; 0x24
 8012714:	f89a 3000 	ldrb.w	r3, [sl]
 8012718:	2b00      	cmp	r3, #0
 801271a:	f000 80a1 	beq.w	8012860 <_vfiprintf_r+0x1f0>
 801271e:	2300      	movs	r3, #0
 8012720:	f04f 32ff 	mov.w	r2, #4294967295
 8012724:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012728:	f10a 0a01 	add.w	sl, sl, #1
 801272c:	9304      	str	r3, [sp, #16]
 801272e:	9307      	str	r3, [sp, #28]
 8012730:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012734:	931a      	str	r3, [sp, #104]	; 0x68
 8012736:	4654      	mov	r4, sl
 8012738:	2205      	movs	r2, #5
 801273a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801273e:	4854      	ldr	r0, [pc, #336]	; (8012890 <_vfiprintf_r+0x220>)
 8012740:	f7ed fd1e 	bl	8000180 <memchr>
 8012744:	9a04      	ldr	r2, [sp, #16]
 8012746:	b9d8      	cbnz	r0, 8012780 <_vfiprintf_r+0x110>
 8012748:	06d1      	lsls	r1, r2, #27
 801274a:	bf44      	itt	mi
 801274c:	2320      	movmi	r3, #32
 801274e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012752:	0713      	lsls	r3, r2, #28
 8012754:	bf44      	itt	mi
 8012756:	232b      	movmi	r3, #43	; 0x2b
 8012758:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801275c:	f89a 3000 	ldrb.w	r3, [sl]
 8012760:	2b2a      	cmp	r3, #42	; 0x2a
 8012762:	d015      	beq.n	8012790 <_vfiprintf_r+0x120>
 8012764:	9a07      	ldr	r2, [sp, #28]
 8012766:	4654      	mov	r4, sl
 8012768:	2000      	movs	r0, #0
 801276a:	f04f 0c0a 	mov.w	ip, #10
 801276e:	4621      	mov	r1, r4
 8012770:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012774:	3b30      	subs	r3, #48	; 0x30
 8012776:	2b09      	cmp	r3, #9
 8012778:	d94d      	bls.n	8012816 <_vfiprintf_r+0x1a6>
 801277a:	b1b0      	cbz	r0, 80127aa <_vfiprintf_r+0x13a>
 801277c:	9207      	str	r2, [sp, #28]
 801277e:	e014      	b.n	80127aa <_vfiprintf_r+0x13a>
 8012780:	eba0 0308 	sub.w	r3, r0, r8
 8012784:	fa09 f303 	lsl.w	r3, r9, r3
 8012788:	4313      	orrs	r3, r2
 801278a:	9304      	str	r3, [sp, #16]
 801278c:	46a2      	mov	sl, r4
 801278e:	e7d2      	b.n	8012736 <_vfiprintf_r+0xc6>
 8012790:	9b03      	ldr	r3, [sp, #12]
 8012792:	1d19      	adds	r1, r3, #4
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	9103      	str	r1, [sp, #12]
 8012798:	2b00      	cmp	r3, #0
 801279a:	bfbb      	ittet	lt
 801279c:	425b      	neglt	r3, r3
 801279e:	f042 0202 	orrlt.w	r2, r2, #2
 80127a2:	9307      	strge	r3, [sp, #28]
 80127a4:	9307      	strlt	r3, [sp, #28]
 80127a6:	bfb8      	it	lt
 80127a8:	9204      	strlt	r2, [sp, #16]
 80127aa:	7823      	ldrb	r3, [r4, #0]
 80127ac:	2b2e      	cmp	r3, #46	; 0x2e
 80127ae:	d10c      	bne.n	80127ca <_vfiprintf_r+0x15a>
 80127b0:	7863      	ldrb	r3, [r4, #1]
 80127b2:	2b2a      	cmp	r3, #42	; 0x2a
 80127b4:	d134      	bne.n	8012820 <_vfiprintf_r+0x1b0>
 80127b6:	9b03      	ldr	r3, [sp, #12]
 80127b8:	1d1a      	adds	r2, r3, #4
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	9203      	str	r2, [sp, #12]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	bfb8      	it	lt
 80127c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80127c6:	3402      	adds	r4, #2
 80127c8:	9305      	str	r3, [sp, #20]
 80127ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80128a0 <_vfiprintf_r+0x230>
 80127ce:	7821      	ldrb	r1, [r4, #0]
 80127d0:	2203      	movs	r2, #3
 80127d2:	4650      	mov	r0, sl
 80127d4:	f7ed fcd4 	bl	8000180 <memchr>
 80127d8:	b138      	cbz	r0, 80127ea <_vfiprintf_r+0x17a>
 80127da:	9b04      	ldr	r3, [sp, #16]
 80127dc:	eba0 000a 	sub.w	r0, r0, sl
 80127e0:	2240      	movs	r2, #64	; 0x40
 80127e2:	4082      	lsls	r2, r0
 80127e4:	4313      	orrs	r3, r2
 80127e6:	3401      	adds	r4, #1
 80127e8:	9304      	str	r3, [sp, #16]
 80127ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127ee:	4829      	ldr	r0, [pc, #164]	; (8012894 <_vfiprintf_r+0x224>)
 80127f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80127f4:	2206      	movs	r2, #6
 80127f6:	f7ed fcc3 	bl	8000180 <memchr>
 80127fa:	2800      	cmp	r0, #0
 80127fc:	d03f      	beq.n	801287e <_vfiprintf_r+0x20e>
 80127fe:	4b26      	ldr	r3, [pc, #152]	; (8012898 <_vfiprintf_r+0x228>)
 8012800:	bb1b      	cbnz	r3, 801284a <_vfiprintf_r+0x1da>
 8012802:	9b03      	ldr	r3, [sp, #12]
 8012804:	3307      	adds	r3, #7
 8012806:	f023 0307 	bic.w	r3, r3, #7
 801280a:	3308      	adds	r3, #8
 801280c:	9303      	str	r3, [sp, #12]
 801280e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012810:	443b      	add	r3, r7
 8012812:	9309      	str	r3, [sp, #36]	; 0x24
 8012814:	e768      	b.n	80126e8 <_vfiprintf_r+0x78>
 8012816:	fb0c 3202 	mla	r2, ip, r2, r3
 801281a:	460c      	mov	r4, r1
 801281c:	2001      	movs	r0, #1
 801281e:	e7a6      	b.n	801276e <_vfiprintf_r+0xfe>
 8012820:	2300      	movs	r3, #0
 8012822:	3401      	adds	r4, #1
 8012824:	9305      	str	r3, [sp, #20]
 8012826:	4619      	mov	r1, r3
 8012828:	f04f 0c0a 	mov.w	ip, #10
 801282c:	4620      	mov	r0, r4
 801282e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012832:	3a30      	subs	r2, #48	; 0x30
 8012834:	2a09      	cmp	r2, #9
 8012836:	d903      	bls.n	8012840 <_vfiprintf_r+0x1d0>
 8012838:	2b00      	cmp	r3, #0
 801283a:	d0c6      	beq.n	80127ca <_vfiprintf_r+0x15a>
 801283c:	9105      	str	r1, [sp, #20]
 801283e:	e7c4      	b.n	80127ca <_vfiprintf_r+0x15a>
 8012840:	fb0c 2101 	mla	r1, ip, r1, r2
 8012844:	4604      	mov	r4, r0
 8012846:	2301      	movs	r3, #1
 8012848:	e7f0      	b.n	801282c <_vfiprintf_r+0x1bc>
 801284a:	ab03      	add	r3, sp, #12
 801284c:	9300      	str	r3, [sp, #0]
 801284e:	462a      	mov	r2, r5
 8012850:	4b12      	ldr	r3, [pc, #72]	; (801289c <_vfiprintf_r+0x22c>)
 8012852:	a904      	add	r1, sp, #16
 8012854:	4630      	mov	r0, r6
 8012856:	f7fd fcff 	bl	8010258 <_printf_float>
 801285a:	4607      	mov	r7, r0
 801285c:	1c78      	adds	r0, r7, #1
 801285e:	d1d6      	bne.n	801280e <_vfiprintf_r+0x19e>
 8012860:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012862:	07d9      	lsls	r1, r3, #31
 8012864:	d405      	bmi.n	8012872 <_vfiprintf_r+0x202>
 8012866:	89ab      	ldrh	r3, [r5, #12]
 8012868:	059a      	lsls	r2, r3, #22
 801286a:	d402      	bmi.n	8012872 <_vfiprintf_r+0x202>
 801286c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801286e:	f7fe fa75 	bl	8010d5c <__retarget_lock_release_recursive>
 8012872:	89ab      	ldrh	r3, [r5, #12]
 8012874:	065b      	lsls	r3, r3, #25
 8012876:	f53f af1d 	bmi.w	80126b4 <_vfiprintf_r+0x44>
 801287a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801287c:	e71c      	b.n	80126b8 <_vfiprintf_r+0x48>
 801287e:	ab03      	add	r3, sp, #12
 8012880:	9300      	str	r3, [sp, #0]
 8012882:	462a      	mov	r2, r5
 8012884:	4b05      	ldr	r3, [pc, #20]	; (801289c <_vfiprintf_r+0x22c>)
 8012886:	a904      	add	r1, sp, #16
 8012888:	4630      	mov	r0, r6
 801288a:	f7fd ff89 	bl	80107a0 <_printf_i>
 801288e:	e7e4      	b.n	801285a <_vfiprintf_r+0x1ea>
 8012890:	08014b84 	.word	0x08014b84
 8012894:	08014b8e 	.word	0x08014b8e
 8012898:	08010259 	.word	0x08010259
 801289c:	0801264b 	.word	0x0801264b
 80128a0:	08014b8a 	.word	0x08014b8a

080128a4 <__sflush_r>:
 80128a4:	898a      	ldrh	r2, [r1, #12]
 80128a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128aa:	4605      	mov	r5, r0
 80128ac:	0710      	lsls	r0, r2, #28
 80128ae:	460c      	mov	r4, r1
 80128b0:	d458      	bmi.n	8012964 <__sflush_r+0xc0>
 80128b2:	684b      	ldr	r3, [r1, #4]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	dc05      	bgt.n	80128c4 <__sflush_r+0x20>
 80128b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	dc02      	bgt.n	80128c4 <__sflush_r+0x20>
 80128be:	2000      	movs	r0, #0
 80128c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80128c6:	2e00      	cmp	r6, #0
 80128c8:	d0f9      	beq.n	80128be <__sflush_r+0x1a>
 80128ca:	2300      	movs	r3, #0
 80128cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80128d0:	682f      	ldr	r7, [r5, #0]
 80128d2:	6a21      	ldr	r1, [r4, #32]
 80128d4:	602b      	str	r3, [r5, #0]
 80128d6:	d032      	beq.n	801293e <__sflush_r+0x9a>
 80128d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80128da:	89a3      	ldrh	r3, [r4, #12]
 80128dc:	075a      	lsls	r2, r3, #29
 80128de:	d505      	bpl.n	80128ec <__sflush_r+0x48>
 80128e0:	6863      	ldr	r3, [r4, #4]
 80128e2:	1ac0      	subs	r0, r0, r3
 80128e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80128e6:	b10b      	cbz	r3, 80128ec <__sflush_r+0x48>
 80128e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80128ea:	1ac0      	subs	r0, r0, r3
 80128ec:	2300      	movs	r3, #0
 80128ee:	4602      	mov	r2, r0
 80128f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80128f2:	6a21      	ldr	r1, [r4, #32]
 80128f4:	4628      	mov	r0, r5
 80128f6:	47b0      	blx	r6
 80128f8:	1c43      	adds	r3, r0, #1
 80128fa:	89a3      	ldrh	r3, [r4, #12]
 80128fc:	d106      	bne.n	801290c <__sflush_r+0x68>
 80128fe:	6829      	ldr	r1, [r5, #0]
 8012900:	291d      	cmp	r1, #29
 8012902:	d82b      	bhi.n	801295c <__sflush_r+0xb8>
 8012904:	4a29      	ldr	r2, [pc, #164]	; (80129ac <__sflush_r+0x108>)
 8012906:	410a      	asrs	r2, r1
 8012908:	07d6      	lsls	r6, r2, #31
 801290a:	d427      	bmi.n	801295c <__sflush_r+0xb8>
 801290c:	2200      	movs	r2, #0
 801290e:	6062      	str	r2, [r4, #4]
 8012910:	04d9      	lsls	r1, r3, #19
 8012912:	6922      	ldr	r2, [r4, #16]
 8012914:	6022      	str	r2, [r4, #0]
 8012916:	d504      	bpl.n	8012922 <__sflush_r+0x7e>
 8012918:	1c42      	adds	r2, r0, #1
 801291a:	d101      	bne.n	8012920 <__sflush_r+0x7c>
 801291c:	682b      	ldr	r3, [r5, #0]
 801291e:	b903      	cbnz	r3, 8012922 <__sflush_r+0x7e>
 8012920:	6560      	str	r0, [r4, #84]	; 0x54
 8012922:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012924:	602f      	str	r7, [r5, #0]
 8012926:	2900      	cmp	r1, #0
 8012928:	d0c9      	beq.n	80128be <__sflush_r+0x1a>
 801292a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801292e:	4299      	cmp	r1, r3
 8012930:	d002      	beq.n	8012938 <__sflush_r+0x94>
 8012932:	4628      	mov	r0, r5
 8012934:	f7ff f89e 	bl	8011a74 <_free_r>
 8012938:	2000      	movs	r0, #0
 801293a:	6360      	str	r0, [r4, #52]	; 0x34
 801293c:	e7c0      	b.n	80128c0 <__sflush_r+0x1c>
 801293e:	2301      	movs	r3, #1
 8012940:	4628      	mov	r0, r5
 8012942:	47b0      	blx	r6
 8012944:	1c41      	adds	r1, r0, #1
 8012946:	d1c8      	bne.n	80128da <__sflush_r+0x36>
 8012948:	682b      	ldr	r3, [r5, #0]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d0c5      	beq.n	80128da <__sflush_r+0x36>
 801294e:	2b1d      	cmp	r3, #29
 8012950:	d001      	beq.n	8012956 <__sflush_r+0xb2>
 8012952:	2b16      	cmp	r3, #22
 8012954:	d101      	bne.n	801295a <__sflush_r+0xb6>
 8012956:	602f      	str	r7, [r5, #0]
 8012958:	e7b1      	b.n	80128be <__sflush_r+0x1a>
 801295a:	89a3      	ldrh	r3, [r4, #12]
 801295c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012960:	81a3      	strh	r3, [r4, #12]
 8012962:	e7ad      	b.n	80128c0 <__sflush_r+0x1c>
 8012964:	690f      	ldr	r7, [r1, #16]
 8012966:	2f00      	cmp	r7, #0
 8012968:	d0a9      	beq.n	80128be <__sflush_r+0x1a>
 801296a:	0793      	lsls	r3, r2, #30
 801296c:	680e      	ldr	r6, [r1, #0]
 801296e:	bf08      	it	eq
 8012970:	694b      	ldreq	r3, [r1, #20]
 8012972:	600f      	str	r7, [r1, #0]
 8012974:	bf18      	it	ne
 8012976:	2300      	movne	r3, #0
 8012978:	eba6 0807 	sub.w	r8, r6, r7
 801297c:	608b      	str	r3, [r1, #8]
 801297e:	f1b8 0f00 	cmp.w	r8, #0
 8012982:	dd9c      	ble.n	80128be <__sflush_r+0x1a>
 8012984:	6a21      	ldr	r1, [r4, #32]
 8012986:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012988:	4643      	mov	r3, r8
 801298a:	463a      	mov	r2, r7
 801298c:	4628      	mov	r0, r5
 801298e:	47b0      	blx	r6
 8012990:	2800      	cmp	r0, #0
 8012992:	dc06      	bgt.n	80129a2 <__sflush_r+0xfe>
 8012994:	89a3      	ldrh	r3, [r4, #12]
 8012996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801299a:	81a3      	strh	r3, [r4, #12]
 801299c:	f04f 30ff 	mov.w	r0, #4294967295
 80129a0:	e78e      	b.n	80128c0 <__sflush_r+0x1c>
 80129a2:	4407      	add	r7, r0
 80129a4:	eba8 0800 	sub.w	r8, r8, r0
 80129a8:	e7e9      	b.n	801297e <__sflush_r+0xda>
 80129aa:	bf00      	nop
 80129ac:	dfbffffe 	.word	0xdfbffffe

080129b0 <_fflush_r>:
 80129b0:	b538      	push	{r3, r4, r5, lr}
 80129b2:	690b      	ldr	r3, [r1, #16]
 80129b4:	4605      	mov	r5, r0
 80129b6:	460c      	mov	r4, r1
 80129b8:	b913      	cbnz	r3, 80129c0 <_fflush_r+0x10>
 80129ba:	2500      	movs	r5, #0
 80129bc:	4628      	mov	r0, r5
 80129be:	bd38      	pop	{r3, r4, r5, pc}
 80129c0:	b118      	cbz	r0, 80129ca <_fflush_r+0x1a>
 80129c2:	6a03      	ldr	r3, [r0, #32]
 80129c4:	b90b      	cbnz	r3, 80129ca <_fflush_r+0x1a>
 80129c6:	f7fe f899 	bl	8010afc <__sinit>
 80129ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d0f3      	beq.n	80129ba <_fflush_r+0xa>
 80129d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80129d4:	07d0      	lsls	r0, r2, #31
 80129d6:	d404      	bmi.n	80129e2 <_fflush_r+0x32>
 80129d8:	0599      	lsls	r1, r3, #22
 80129da:	d402      	bmi.n	80129e2 <_fflush_r+0x32>
 80129dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129de:	f7fe f9bc 	bl	8010d5a <__retarget_lock_acquire_recursive>
 80129e2:	4628      	mov	r0, r5
 80129e4:	4621      	mov	r1, r4
 80129e6:	f7ff ff5d 	bl	80128a4 <__sflush_r>
 80129ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80129ec:	07da      	lsls	r2, r3, #31
 80129ee:	4605      	mov	r5, r0
 80129f0:	d4e4      	bmi.n	80129bc <_fflush_r+0xc>
 80129f2:	89a3      	ldrh	r3, [r4, #12]
 80129f4:	059b      	lsls	r3, r3, #22
 80129f6:	d4e1      	bmi.n	80129bc <_fflush_r+0xc>
 80129f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129fa:	f7fe f9af 	bl	8010d5c <__retarget_lock_release_recursive>
 80129fe:	e7dd      	b.n	80129bc <_fflush_r+0xc>

08012a00 <__swbuf_r>:
 8012a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a02:	460e      	mov	r6, r1
 8012a04:	4614      	mov	r4, r2
 8012a06:	4605      	mov	r5, r0
 8012a08:	b118      	cbz	r0, 8012a12 <__swbuf_r+0x12>
 8012a0a:	6a03      	ldr	r3, [r0, #32]
 8012a0c:	b90b      	cbnz	r3, 8012a12 <__swbuf_r+0x12>
 8012a0e:	f7fe f875 	bl	8010afc <__sinit>
 8012a12:	69a3      	ldr	r3, [r4, #24]
 8012a14:	60a3      	str	r3, [r4, #8]
 8012a16:	89a3      	ldrh	r3, [r4, #12]
 8012a18:	071a      	lsls	r2, r3, #28
 8012a1a:	d525      	bpl.n	8012a68 <__swbuf_r+0x68>
 8012a1c:	6923      	ldr	r3, [r4, #16]
 8012a1e:	b31b      	cbz	r3, 8012a68 <__swbuf_r+0x68>
 8012a20:	6823      	ldr	r3, [r4, #0]
 8012a22:	6922      	ldr	r2, [r4, #16]
 8012a24:	1a98      	subs	r0, r3, r2
 8012a26:	6963      	ldr	r3, [r4, #20]
 8012a28:	b2f6      	uxtb	r6, r6
 8012a2a:	4283      	cmp	r3, r0
 8012a2c:	4637      	mov	r7, r6
 8012a2e:	dc04      	bgt.n	8012a3a <__swbuf_r+0x3a>
 8012a30:	4621      	mov	r1, r4
 8012a32:	4628      	mov	r0, r5
 8012a34:	f7ff ffbc 	bl	80129b0 <_fflush_r>
 8012a38:	b9e0      	cbnz	r0, 8012a74 <__swbuf_r+0x74>
 8012a3a:	68a3      	ldr	r3, [r4, #8]
 8012a3c:	3b01      	subs	r3, #1
 8012a3e:	60a3      	str	r3, [r4, #8]
 8012a40:	6823      	ldr	r3, [r4, #0]
 8012a42:	1c5a      	adds	r2, r3, #1
 8012a44:	6022      	str	r2, [r4, #0]
 8012a46:	701e      	strb	r6, [r3, #0]
 8012a48:	6962      	ldr	r2, [r4, #20]
 8012a4a:	1c43      	adds	r3, r0, #1
 8012a4c:	429a      	cmp	r2, r3
 8012a4e:	d004      	beq.n	8012a5a <__swbuf_r+0x5a>
 8012a50:	89a3      	ldrh	r3, [r4, #12]
 8012a52:	07db      	lsls	r3, r3, #31
 8012a54:	d506      	bpl.n	8012a64 <__swbuf_r+0x64>
 8012a56:	2e0a      	cmp	r6, #10
 8012a58:	d104      	bne.n	8012a64 <__swbuf_r+0x64>
 8012a5a:	4621      	mov	r1, r4
 8012a5c:	4628      	mov	r0, r5
 8012a5e:	f7ff ffa7 	bl	80129b0 <_fflush_r>
 8012a62:	b938      	cbnz	r0, 8012a74 <__swbuf_r+0x74>
 8012a64:	4638      	mov	r0, r7
 8012a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a68:	4621      	mov	r1, r4
 8012a6a:	4628      	mov	r0, r5
 8012a6c:	f000 f806 	bl	8012a7c <__swsetup_r>
 8012a70:	2800      	cmp	r0, #0
 8012a72:	d0d5      	beq.n	8012a20 <__swbuf_r+0x20>
 8012a74:	f04f 37ff 	mov.w	r7, #4294967295
 8012a78:	e7f4      	b.n	8012a64 <__swbuf_r+0x64>
	...

08012a7c <__swsetup_r>:
 8012a7c:	b538      	push	{r3, r4, r5, lr}
 8012a7e:	4b2a      	ldr	r3, [pc, #168]	; (8012b28 <__swsetup_r+0xac>)
 8012a80:	4605      	mov	r5, r0
 8012a82:	6818      	ldr	r0, [r3, #0]
 8012a84:	460c      	mov	r4, r1
 8012a86:	b118      	cbz	r0, 8012a90 <__swsetup_r+0x14>
 8012a88:	6a03      	ldr	r3, [r0, #32]
 8012a8a:	b90b      	cbnz	r3, 8012a90 <__swsetup_r+0x14>
 8012a8c:	f7fe f836 	bl	8010afc <__sinit>
 8012a90:	89a3      	ldrh	r3, [r4, #12]
 8012a92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012a96:	0718      	lsls	r0, r3, #28
 8012a98:	d422      	bmi.n	8012ae0 <__swsetup_r+0x64>
 8012a9a:	06d9      	lsls	r1, r3, #27
 8012a9c:	d407      	bmi.n	8012aae <__swsetup_r+0x32>
 8012a9e:	2309      	movs	r3, #9
 8012aa0:	602b      	str	r3, [r5, #0]
 8012aa2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012aa6:	81a3      	strh	r3, [r4, #12]
 8012aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8012aac:	e034      	b.n	8012b18 <__swsetup_r+0x9c>
 8012aae:	0758      	lsls	r0, r3, #29
 8012ab0:	d512      	bpl.n	8012ad8 <__swsetup_r+0x5c>
 8012ab2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012ab4:	b141      	cbz	r1, 8012ac8 <__swsetup_r+0x4c>
 8012ab6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012aba:	4299      	cmp	r1, r3
 8012abc:	d002      	beq.n	8012ac4 <__swsetup_r+0x48>
 8012abe:	4628      	mov	r0, r5
 8012ac0:	f7fe ffd8 	bl	8011a74 <_free_r>
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	6363      	str	r3, [r4, #52]	; 0x34
 8012ac8:	89a3      	ldrh	r3, [r4, #12]
 8012aca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012ace:	81a3      	strh	r3, [r4, #12]
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	6063      	str	r3, [r4, #4]
 8012ad4:	6923      	ldr	r3, [r4, #16]
 8012ad6:	6023      	str	r3, [r4, #0]
 8012ad8:	89a3      	ldrh	r3, [r4, #12]
 8012ada:	f043 0308 	orr.w	r3, r3, #8
 8012ade:	81a3      	strh	r3, [r4, #12]
 8012ae0:	6923      	ldr	r3, [r4, #16]
 8012ae2:	b94b      	cbnz	r3, 8012af8 <__swsetup_r+0x7c>
 8012ae4:	89a3      	ldrh	r3, [r4, #12]
 8012ae6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012aee:	d003      	beq.n	8012af8 <__swsetup_r+0x7c>
 8012af0:	4621      	mov	r1, r4
 8012af2:	4628      	mov	r0, r5
 8012af4:	f000 f8fe 	bl	8012cf4 <__smakebuf_r>
 8012af8:	89a0      	ldrh	r0, [r4, #12]
 8012afa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012afe:	f010 0301 	ands.w	r3, r0, #1
 8012b02:	d00a      	beq.n	8012b1a <__swsetup_r+0x9e>
 8012b04:	2300      	movs	r3, #0
 8012b06:	60a3      	str	r3, [r4, #8]
 8012b08:	6963      	ldr	r3, [r4, #20]
 8012b0a:	425b      	negs	r3, r3
 8012b0c:	61a3      	str	r3, [r4, #24]
 8012b0e:	6923      	ldr	r3, [r4, #16]
 8012b10:	b943      	cbnz	r3, 8012b24 <__swsetup_r+0xa8>
 8012b12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012b16:	d1c4      	bne.n	8012aa2 <__swsetup_r+0x26>
 8012b18:	bd38      	pop	{r3, r4, r5, pc}
 8012b1a:	0781      	lsls	r1, r0, #30
 8012b1c:	bf58      	it	pl
 8012b1e:	6963      	ldrpl	r3, [r4, #20]
 8012b20:	60a3      	str	r3, [r4, #8]
 8012b22:	e7f4      	b.n	8012b0e <__swsetup_r+0x92>
 8012b24:	2000      	movs	r0, #0
 8012b26:	e7f7      	b.n	8012b18 <__swsetup_r+0x9c>
 8012b28:	200001d0 	.word	0x200001d0

08012b2c <memmove>:
 8012b2c:	4288      	cmp	r0, r1
 8012b2e:	b510      	push	{r4, lr}
 8012b30:	eb01 0402 	add.w	r4, r1, r2
 8012b34:	d902      	bls.n	8012b3c <memmove+0x10>
 8012b36:	4284      	cmp	r4, r0
 8012b38:	4623      	mov	r3, r4
 8012b3a:	d807      	bhi.n	8012b4c <memmove+0x20>
 8012b3c:	1e43      	subs	r3, r0, #1
 8012b3e:	42a1      	cmp	r1, r4
 8012b40:	d008      	beq.n	8012b54 <memmove+0x28>
 8012b42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012b4a:	e7f8      	b.n	8012b3e <memmove+0x12>
 8012b4c:	4402      	add	r2, r0
 8012b4e:	4601      	mov	r1, r0
 8012b50:	428a      	cmp	r2, r1
 8012b52:	d100      	bne.n	8012b56 <memmove+0x2a>
 8012b54:	bd10      	pop	{r4, pc}
 8012b56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012b5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012b5e:	e7f7      	b.n	8012b50 <memmove+0x24>

08012b60 <_sbrk_r>:
 8012b60:	b538      	push	{r3, r4, r5, lr}
 8012b62:	4d06      	ldr	r5, [pc, #24]	; (8012b7c <_sbrk_r+0x1c>)
 8012b64:	2300      	movs	r3, #0
 8012b66:	4604      	mov	r4, r0
 8012b68:	4608      	mov	r0, r1
 8012b6a:	602b      	str	r3, [r5, #0]
 8012b6c:	f7f4 fc7e 	bl	800746c <_sbrk>
 8012b70:	1c43      	adds	r3, r0, #1
 8012b72:	d102      	bne.n	8012b7a <_sbrk_r+0x1a>
 8012b74:	682b      	ldr	r3, [r5, #0]
 8012b76:	b103      	cbz	r3, 8012b7a <_sbrk_r+0x1a>
 8012b78:	6023      	str	r3, [r4, #0]
 8012b7a:	bd38      	pop	{r3, r4, r5, pc}
 8012b7c:	200019fc 	.word	0x200019fc

08012b80 <__assert_func>:
 8012b80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012b82:	4614      	mov	r4, r2
 8012b84:	461a      	mov	r2, r3
 8012b86:	4b09      	ldr	r3, [pc, #36]	; (8012bac <__assert_func+0x2c>)
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	4605      	mov	r5, r0
 8012b8c:	68d8      	ldr	r0, [r3, #12]
 8012b8e:	b14c      	cbz	r4, 8012ba4 <__assert_func+0x24>
 8012b90:	4b07      	ldr	r3, [pc, #28]	; (8012bb0 <__assert_func+0x30>)
 8012b92:	9100      	str	r1, [sp, #0]
 8012b94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012b98:	4906      	ldr	r1, [pc, #24]	; (8012bb4 <__assert_func+0x34>)
 8012b9a:	462b      	mov	r3, r5
 8012b9c:	f000 f872 	bl	8012c84 <fiprintf>
 8012ba0:	f000 f906 	bl	8012db0 <abort>
 8012ba4:	4b04      	ldr	r3, [pc, #16]	; (8012bb8 <__assert_func+0x38>)
 8012ba6:	461c      	mov	r4, r3
 8012ba8:	e7f3      	b.n	8012b92 <__assert_func+0x12>
 8012baa:	bf00      	nop
 8012bac:	200001d0 	.word	0x200001d0
 8012bb0:	08014b9f 	.word	0x08014b9f
 8012bb4:	08014bac 	.word	0x08014bac
 8012bb8:	08014bda 	.word	0x08014bda

08012bbc <_calloc_r>:
 8012bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012bbe:	fba1 2402 	umull	r2, r4, r1, r2
 8012bc2:	b94c      	cbnz	r4, 8012bd8 <_calloc_r+0x1c>
 8012bc4:	4611      	mov	r1, r2
 8012bc6:	9201      	str	r2, [sp, #4]
 8012bc8:	f7fe ffc8 	bl	8011b5c <_malloc_r>
 8012bcc:	9a01      	ldr	r2, [sp, #4]
 8012bce:	4605      	mov	r5, r0
 8012bd0:	b930      	cbnz	r0, 8012be0 <_calloc_r+0x24>
 8012bd2:	4628      	mov	r0, r5
 8012bd4:	b003      	add	sp, #12
 8012bd6:	bd30      	pop	{r4, r5, pc}
 8012bd8:	220c      	movs	r2, #12
 8012bda:	6002      	str	r2, [r0, #0]
 8012bdc:	2500      	movs	r5, #0
 8012bde:	e7f8      	b.n	8012bd2 <_calloc_r+0x16>
 8012be0:	4621      	mov	r1, r4
 8012be2:	f7fe f83d 	bl	8010c60 <memset>
 8012be6:	e7f4      	b.n	8012bd2 <_calloc_r+0x16>

08012be8 <__ascii_mbtowc>:
 8012be8:	b082      	sub	sp, #8
 8012bea:	b901      	cbnz	r1, 8012bee <__ascii_mbtowc+0x6>
 8012bec:	a901      	add	r1, sp, #4
 8012bee:	b142      	cbz	r2, 8012c02 <__ascii_mbtowc+0x1a>
 8012bf0:	b14b      	cbz	r3, 8012c06 <__ascii_mbtowc+0x1e>
 8012bf2:	7813      	ldrb	r3, [r2, #0]
 8012bf4:	600b      	str	r3, [r1, #0]
 8012bf6:	7812      	ldrb	r2, [r2, #0]
 8012bf8:	1e10      	subs	r0, r2, #0
 8012bfa:	bf18      	it	ne
 8012bfc:	2001      	movne	r0, #1
 8012bfe:	b002      	add	sp, #8
 8012c00:	4770      	bx	lr
 8012c02:	4610      	mov	r0, r2
 8012c04:	e7fb      	b.n	8012bfe <__ascii_mbtowc+0x16>
 8012c06:	f06f 0001 	mvn.w	r0, #1
 8012c0a:	e7f8      	b.n	8012bfe <__ascii_mbtowc+0x16>

08012c0c <_realloc_r>:
 8012c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c10:	4680      	mov	r8, r0
 8012c12:	4614      	mov	r4, r2
 8012c14:	460e      	mov	r6, r1
 8012c16:	b921      	cbnz	r1, 8012c22 <_realloc_r+0x16>
 8012c18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c1c:	4611      	mov	r1, r2
 8012c1e:	f7fe bf9d 	b.w	8011b5c <_malloc_r>
 8012c22:	b92a      	cbnz	r2, 8012c30 <_realloc_r+0x24>
 8012c24:	f7fe ff26 	bl	8011a74 <_free_r>
 8012c28:	4625      	mov	r5, r4
 8012c2a:	4628      	mov	r0, r5
 8012c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c30:	f000 f8c5 	bl	8012dbe <_malloc_usable_size_r>
 8012c34:	4284      	cmp	r4, r0
 8012c36:	4607      	mov	r7, r0
 8012c38:	d802      	bhi.n	8012c40 <_realloc_r+0x34>
 8012c3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012c3e:	d812      	bhi.n	8012c66 <_realloc_r+0x5a>
 8012c40:	4621      	mov	r1, r4
 8012c42:	4640      	mov	r0, r8
 8012c44:	f7fe ff8a 	bl	8011b5c <_malloc_r>
 8012c48:	4605      	mov	r5, r0
 8012c4a:	2800      	cmp	r0, #0
 8012c4c:	d0ed      	beq.n	8012c2a <_realloc_r+0x1e>
 8012c4e:	42bc      	cmp	r4, r7
 8012c50:	4622      	mov	r2, r4
 8012c52:	4631      	mov	r1, r6
 8012c54:	bf28      	it	cs
 8012c56:	463a      	movcs	r2, r7
 8012c58:	f7fe f881 	bl	8010d5e <memcpy>
 8012c5c:	4631      	mov	r1, r6
 8012c5e:	4640      	mov	r0, r8
 8012c60:	f7fe ff08 	bl	8011a74 <_free_r>
 8012c64:	e7e1      	b.n	8012c2a <_realloc_r+0x1e>
 8012c66:	4635      	mov	r5, r6
 8012c68:	e7df      	b.n	8012c2a <_realloc_r+0x1e>

08012c6a <__ascii_wctomb>:
 8012c6a:	b149      	cbz	r1, 8012c80 <__ascii_wctomb+0x16>
 8012c6c:	2aff      	cmp	r2, #255	; 0xff
 8012c6e:	bf85      	ittet	hi
 8012c70:	238a      	movhi	r3, #138	; 0x8a
 8012c72:	6003      	strhi	r3, [r0, #0]
 8012c74:	700a      	strbls	r2, [r1, #0]
 8012c76:	f04f 30ff 	movhi.w	r0, #4294967295
 8012c7a:	bf98      	it	ls
 8012c7c:	2001      	movls	r0, #1
 8012c7e:	4770      	bx	lr
 8012c80:	4608      	mov	r0, r1
 8012c82:	4770      	bx	lr

08012c84 <fiprintf>:
 8012c84:	b40e      	push	{r1, r2, r3}
 8012c86:	b503      	push	{r0, r1, lr}
 8012c88:	4601      	mov	r1, r0
 8012c8a:	ab03      	add	r3, sp, #12
 8012c8c:	4805      	ldr	r0, [pc, #20]	; (8012ca4 <fiprintf+0x20>)
 8012c8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c92:	6800      	ldr	r0, [r0, #0]
 8012c94:	9301      	str	r3, [sp, #4]
 8012c96:	f7ff fceb 	bl	8012670 <_vfiprintf_r>
 8012c9a:	b002      	add	sp, #8
 8012c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ca0:	b003      	add	sp, #12
 8012ca2:	4770      	bx	lr
 8012ca4:	200001d0 	.word	0x200001d0

08012ca8 <__swhatbuf_r>:
 8012ca8:	b570      	push	{r4, r5, r6, lr}
 8012caa:	460c      	mov	r4, r1
 8012cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cb0:	2900      	cmp	r1, #0
 8012cb2:	b096      	sub	sp, #88	; 0x58
 8012cb4:	4615      	mov	r5, r2
 8012cb6:	461e      	mov	r6, r3
 8012cb8:	da0d      	bge.n	8012cd6 <__swhatbuf_r+0x2e>
 8012cba:	89a3      	ldrh	r3, [r4, #12]
 8012cbc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012cc0:	f04f 0100 	mov.w	r1, #0
 8012cc4:	bf0c      	ite	eq
 8012cc6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012cca:	2340      	movne	r3, #64	; 0x40
 8012ccc:	2000      	movs	r0, #0
 8012cce:	6031      	str	r1, [r6, #0]
 8012cd0:	602b      	str	r3, [r5, #0]
 8012cd2:	b016      	add	sp, #88	; 0x58
 8012cd4:	bd70      	pop	{r4, r5, r6, pc}
 8012cd6:	466a      	mov	r2, sp
 8012cd8:	f000 f848 	bl	8012d6c <_fstat_r>
 8012cdc:	2800      	cmp	r0, #0
 8012cde:	dbec      	blt.n	8012cba <__swhatbuf_r+0x12>
 8012ce0:	9901      	ldr	r1, [sp, #4]
 8012ce2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012ce6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012cea:	4259      	negs	r1, r3
 8012cec:	4159      	adcs	r1, r3
 8012cee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012cf2:	e7eb      	b.n	8012ccc <__swhatbuf_r+0x24>

08012cf4 <__smakebuf_r>:
 8012cf4:	898b      	ldrh	r3, [r1, #12]
 8012cf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012cf8:	079d      	lsls	r5, r3, #30
 8012cfa:	4606      	mov	r6, r0
 8012cfc:	460c      	mov	r4, r1
 8012cfe:	d507      	bpl.n	8012d10 <__smakebuf_r+0x1c>
 8012d00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012d04:	6023      	str	r3, [r4, #0]
 8012d06:	6123      	str	r3, [r4, #16]
 8012d08:	2301      	movs	r3, #1
 8012d0a:	6163      	str	r3, [r4, #20]
 8012d0c:	b002      	add	sp, #8
 8012d0e:	bd70      	pop	{r4, r5, r6, pc}
 8012d10:	ab01      	add	r3, sp, #4
 8012d12:	466a      	mov	r2, sp
 8012d14:	f7ff ffc8 	bl	8012ca8 <__swhatbuf_r>
 8012d18:	9900      	ldr	r1, [sp, #0]
 8012d1a:	4605      	mov	r5, r0
 8012d1c:	4630      	mov	r0, r6
 8012d1e:	f7fe ff1d 	bl	8011b5c <_malloc_r>
 8012d22:	b948      	cbnz	r0, 8012d38 <__smakebuf_r+0x44>
 8012d24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d28:	059a      	lsls	r2, r3, #22
 8012d2a:	d4ef      	bmi.n	8012d0c <__smakebuf_r+0x18>
 8012d2c:	f023 0303 	bic.w	r3, r3, #3
 8012d30:	f043 0302 	orr.w	r3, r3, #2
 8012d34:	81a3      	strh	r3, [r4, #12]
 8012d36:	e7e3      	b.n	8012d00 <__smakebuf_r+0xc>
 8012d38:	89a3      	ldrh	r3, [r4, #12]
 8012d3a:	6020      	str	r0, [r4, #0]
 8012d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d40:	81a3      	strh	r3, [r4, #12]
 8012d42:	9b00      	ldr	r3, [sp, #0]
 8012d44:	6163      	str	r3, [r4, #20]
 8012d46:	9b01      	ldr	r3, [sp, #4]
 8012d48:	6120      	str	r0, [r4, #16]
 8012d4a:	b15b      	cbz	r3, 8012d64 <__smakebuf_r+0x70>
 8012d4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d50:	4630      	mov	r0, r6
 8012d52:	f000 f81d 	bl	8012d90 <_isatty_r>
 8012d56:	b128      	cbz	r0, 8012d64 <__smakebuf_r+0x70>
 8012d58:	89a3      	ldrh	r3, [r4, #12]
 8012d5a:	f023 0303 	bic.w	r3, r3, #3
 8012d5e:	f043 0301 	orr.w	r3, r3, #1
 8012d62:	81a3      	strh	r3, [r4, #12]
 8012d64:	89a3      	ldrh	r3, [r4, #12]
 8012d66:	431d      	orrs	r5, r3
 8012d68:	81a5      	strh	r5, [r4, #12]
 8012d6a:	e7cf      	b.n	8012d0c <__smakebuf_r+0x18>

08012d6c <_fstat_r>:
 8012d6c:	b538      	push	{r3, r4, r5, lr}
 8012d6e:	4d07      	ldr	r5, [pc, #28]	; (8012d8c <_fstat_r+0x20>)
 8012d70:	2300      	movs	r3, #0
 8012d72:	4604      	mov	r4, r0
 8012d74:	4608      	mov	r0, r1
 8012d76:	4611      	mov	r1, r2
 8012d78:	602b      	str	r3, [r5, #0]
 8012d7a:	f7f4 fb4e 	bl	800741a <_fstat>
 8012d7e:	1c43      	adds	r3, r0, #1
 8012d80:	d102      	bne.n	8012d88 <_fstat_r+0x1c>
 8012d82:	682b      	ldr	r3, [r5, #0]
 8012d84:	b103      	cbz	r3, 8012d88 <_fstat_r+0x1c>
 8012d86:	6023      	str	r3, [r4, #0]
 8012d88:	bd38      	pop	{r3, r4, r5, pc}
 8012d8a:	bf00      	nop
 8012d8c:	200019fc 	.word	0x200019fc

08012d90 <_isatty_r>:
 8012d90:	b538      	push	{r3, r4, r5, lr}
 8012d92:	4d06      	ldr	r5, [pc, #24]	; (8012dac <_isatty_r+0x1c>)
 8012d94:	2300      	movs	r3, #0
 8012d96:	4604      	mov	r4, r0
 8012d98:	4608      	mov	r0, r1
 8012d9a:	602b      	str	r3, [r5, #0]
 8012d9c:	f7f4 fb4d 	bl	800743a <_isatty>
 8012da0:	1c43      	adds	r3, r0, #1
 8012da2:	d102      	bne.n	8012daa <_isatty_r+0x1a>
 8012da4:	682b      	ldr	r3, [r5, #0]
 8012da6:	b103      	cbz	r3, 8012daa <_isatty_r+0x1a>
 8012da8:	6023      	str	r3, [r4, #0]
 8012daa:	bd38      	pop	{r3, r4, r5, pc}
 8012dac:	200019fc 	.word	0x200019fc

08012db0 <abort>:
 8012db0:	b508      	push	{r3, lr}
 8012db2:	2006      	movs	r0, #6
 8012db4:	f000 f834 	bl	8012e20 <raise>
 8012db8:	2001      	movs	r0, #1
 8012dba:	f7f4 fadf 	bl	800737c <_exit>

08012dbe <_malloc_usable_size_r>:
 8012dbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012dc2:	1f18      	subs	r0, r3, #4
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	bfbc      	itt	lt
 8012dc8:	580b      	ldrlt	r3, [r1, r0]
 8012dca:	18c0      	addlt	r0, r0, r3
 8012dcc:	4770      	bx	lr

08012dce <_raise_r>:
 8012dce:	291f      	cmp	r1, #31
 8012dd0:	b538      	push	{r3, r4, r5, lr}
 8012dd2:	4604      	mov	r4, r0
 8012dd4:	460d      	mov	r5, r1
 8012dd6:	d904      	bls.n	8012de2 <_raise_r+0x14>
 8012dd8:	2316      	movs	r3, #22
 8012dda:	6003      	str	r3, [r0, #0]
 8012ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8012de0:	bd38      	pop	{r3, r4, r5, pc}
 8012de2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012de4:	b112      	cbz	r2, 8012dec <_raise_r+0x1e>
 8012de6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012dea:	b94b      	cbnz	r3, 8012e00 <_raise_r+0x32>
 8012dec:	4620      	mov	r0, r4
 8012dee:	f000 f831 	bl	8012e54 <_getpid_r>
 8012df2:	462a      	mov	r2, r5
 8012df4:	4601      	mov	r1, r0
 8012df6:	4620      	mov	r0, r4
 8012df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012dfc:	f000 b818 	b.w	8012e30 <_kill_r>
 8012e00:	2b01      	cmp	r3, #1
 8012e02:	d00a      	beq.n	8012e1a <_raise_r+0x4c>
 8012e04:	1c59      	adds	r1, r3, #1
 8012e06:	d103      	bne.n	8012e10 <_raise_r+0x42>
 8012e08:	2316      	movs	r3, #22
 8012e0a:	6003      	str	r3, [r0, #0]
 8012e0c:	2001      	movs	r0, #1
 8012e0e:	e7e7      	b.n	8012de0 <_raise_r+0x12>
 8012e10:	2400      	movs	r4, #0
 8012e12:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012e16:	4628      	mov	r0, r5
 8012e18:	4798      	blx	r3
 8012e1a:	2000      	movs	r0, #0
 8012e1c:	e7e0      	b.n	8012de0 <_raise_r+0x12>
	...

08012e20 <raise>:
 8012e20:	4b02      	ldr	r3, [pc, #8]	; (8012e2c <raise+0xc>)
 8012e22:	4601      	mov	r1, r0
 8012e24:	6818      	ldr	r0, [r3, #0]
 8012e26:	f7ff bfd2 	b.w	8012dce <_raise_r>
 8012e2a:	bf00      	nop
 8012e2c:	200001d0 	.word	0x200001d0

08012e30 <_kill_r>:
 8012e30:	b538      	push	{r3, r4, r5, lr}
 8012e32:	4d07      	ldr	r5, [pc, #28]	; (8012e50 <_kill_r+0x20>)
 8012e34:	2300      	movs	r3, #0
 8012e36:	4604      	mov	r4, r0
 8012e38:	4608      	mov	r0, r1
 8012e3a:	4611      	mov	r1, r2
 8012e3c:	602b      	str	r3, [r5, #0]
 8012e3e:	f7f4 fa8d 	bl	800735c <_kill>
 8012e42:	1c43      	adds	r3, r0, #1
 8012e44:	d102      	bne.n	8012e4c <_kill_r+0x1c>
 8012e46:	682b      	ldr	r3, [r5, #0]
 8012e48:	b103      	cbz	r3, 8012e4c <_kill_r+0x1c>
 8012e4a:	6023      	str	r3, [r4, #0]
 8012e4c:	bd38      	pop	{r3, r4, r5, pc}
 8012e4e:	bf00      	nop
 8012e50:	200019fc 	.word	0x200019fc

08012e54 <_getpid_r>:
 8012e54:	f7f4 ba7a 	b.w	800734c <_getpid>

08012e58 <pow>:
 8012e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e5a:	ed2d 8b02 	vpush	{d8}
 8012e5e:	eeb0 8a40 	vmov.f32	s16, s0
 8012e62:	eef0 8a60 	vmov.f32	s17, s1
 8012e66:	ec55 4b11 	vmov	r4, r5, d1
 8012e6a:	f000 f871 	bl	8012f50 <__ieee754_pow>
 8012e6e:	4622      	mov	r2, r4
 8012e70:	462b      	mov	r3, r5
 8012e72:	4620      	mov	r0, r4
 8012e74:	4629      	mov	r1, r5
 8012e76:	ec57 6b10 	vmov	r6, r7, d0
 8012e7a:	f7ed fe2f 	bl	8000adc <__aeabi_dcmpun>
 8012e7e:	2800      	cmp	r0, #0
 8012e80:	d13b      	bne.n	8012efa <pow+0xa2>
 8012e82:	ec51 0b18 	vmov	r0, r1, d8
 8012e86:	2200      	movs	r2, #0
 8012e88:	2300      	movs	r3, #0
 8012e8a:	f7ed fdf5 	bl	8000a78 <__aeabi_dcmpeq>
 8012e8e:	b1b8      	cbz	r0, 8012ec0 <pow+0x68>
 8012e90:	2200      	movs	r2, #0
 8012e92:	2300      	movs	r3, #0
 8012e94:	4620      	mov	r0, r4
 8012e96:	4629      	mov	r1, r5
 8012e98:	f7ed fdee 	bl	8000a78 <__aeabi_dcmpeq>
 8012e9c:	2800      	cmp	r0, #0
 8012e9e:	d146      	bne.n	8012f2e <pow+0xd6>
 8012ea0:	ec45 4b10 	vmov	d0, r4, r5
 8012ea4:	f000 f848 	bl	8012f38 <finite>
 8012ea8:	b338      	cbz	r0, 8012efa <pow+0xa2>
 8012eaa:	2200      	movs	r2, #0
 8012eac:	2300      	movs	r3, #0
 8012eae:	4620      	mov	r0, r4
 8012eb0:	4629      	mov	r1, r5
 8012eb2:	f7ed fdeb 	bl	8000a8c <__aeabi_dcmplt>
 8012eb6:	b300      	cbz	r0, 8012efa <pow+0xa2>
 8012eb8:	f7fd ff24 	bl	8010d04 <__errno>
 8012ebc:	2322      	movs	r3, #34	; 0x22
 8012ebe:	e01b      	b.n	8012ef8 <pow+0xa0>
 8012ec0:	ec47 6b10 	vmov	d0, r6, r7
 8012ec4:	f000 f838 	bl	8012f38 <finite>
 8012ec8:	b9e0      	cbnz	r0, 8012f04 <pow+0xac>
 8012eca:	eeb0 0a48 	vmov.f32	s0, s16
 8012ece:	eef0 0a68 	vmov.f32	s1, s17
 8012ed2:	f000 f831 	bl	8012f38 <finite>
 8012ed6:	b1a8      	cbz	r0, 8012f04 <pow+0xac>
 8012ed8:	ec45 4b10 	vmov	d0, r4, r5
 8012edc:	f000 f82c 	bl	8012f38 <finite>
 8012ee0:	b180      	cbz	r0, 8012f04 <pow+0xac>
 8012ee2:	4632      	mov	r2, r6
 8012ee4:	463b      	mov	r3, r7
 8012ee6:	4630      	mov	r0, r6
 8012ee8:	4639      	mov	r1, r7
 8012eea:	f7ed fdf7 	bl	8000adc <__aeabi_dcmpun>
 8012eee:	2800      	cmp	r0, #0
 8012ef0:	d0e2      	beq.n	8012eb8 <pow+0x60>
 8012ef2:	f7fd ff07 	bl	8010d04 <__errno>
 8012ef6:	2321      	movs	r3, #33	; 0x21
 8012ef8:	6003      	str	r3, [r0, #0]
 8012efa:	ecbd 8b02 	vpop	{d8}
 8012efe:	ec47 6b10 	vmov	d0, r6, r7
 8012f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f04:	2200      	movs	r2, #0
 8012f06:	2300      	movs	r3, #0
 8012f08:	4630      	mov	r0, r6
 8012f0a:	4639      	mov	r1, r7
 8012f0c:	f7ed fdb4 	bl	8000a78 <__aeabi_dcmpeq>
 8012f10:	2800      	cmp	r0, #0
 8012f12:	d0f2      	beq.n	8012efa <pow+0xa2>
 8012f14:	eeb0 0a48 	vmov.f32	s0, s16
 8012f18:	eef0 0a68 	vmov.f32	s1, s17
 8012f1c:	f000 f80c 	bl	8012f38 <finite>
 8012f20:	2800      	cmp	r0, #0
 8012f22:	d0ea      	beq.n	8012efa <pow+0xa2>
 8012f24:	ec45 4b10 	vmov	d0, r4, r5
 8012f28:	f000 f806 	bl	8012f38 <finite>
 8012f2c:	e7c3      	b.n	8012eb6 <pow+0x5e>
 8012f2e:	4f01      	ldr	r7, [pc, #4]	; (8012f34 <pow+0xdc>)
 8012f30:	2600      	movs	r6, #0
 8012f32:	e7e2      	b.n	8012efa <pow+0xa2>
 8012f34:	3ff00000 	.word	0x3ff00000

08012f38 <finite>:
 8012f38:	b082      	sub	sp, #8
 8012f3a:	ed8d 0b00 	vstr	d0, [sp]
 8012f3e:	9801      	ldr	r0, [sp, #4]
 8012f40:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012f44:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012f48:	0fc0      	lsrs	r0, r0, #31
 8012f4a:	b002      	add	sp, #8
 8012f4c:	4770      	bx	lr
	...

08012f50 <__ieee754_pow>:
 8012f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f54:	ed2d 8b06 	vpush	{d8-d10}
 8012f58:	b089      	sub	sp, #36	; 0x24
 8012f5a:	ed8d 1b00 	vstr	d1, [sp]
 8012f5e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8012f62:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8012f66:	ea58 0102 	orrs.w	r1, r8, r2
 8012f6a:	ec57 6b10 	vmov	r6, r7, d0
 8012f6e:	d115      	bne.n	8012f9c <__ieee754_pow+0x4c>
 8012f70:	19b3      	adds	r3, r6, r6
 8012f72:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8012f76:	4152      	adcs	r2, r2
 8012f78:	4299      	cmp	r1, r3
 8012f7a:	4b89      	ldr	r3, [pc, #548]	; (80131a0 <__ieee754_pow+0x250>)
 8012f7c:	4193      	sbcs	r3, r2
 8012f7e:	f080 84d1 	bcs.w	8013924 <__ieee754_pow+0x9d4>
 8012f82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012f86:	4630      	mov	r0, r6
 8012f88:	4639      	mov	r1, r7
 8012f8a:	f7ed f957 	bl	800023c <__adddf3>
 8012f8e:	ec41 0b10 	vmov	d0, r0, r1
 8012f92:	b009      	add	sp, #36	; 0x24
 8012f94:	ecbd 8b06 	vpop	{d8-d10}
 8012f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f9c:	4b81      	ldr	r3, [pc, #516]	; (80131a4 <__ieee754_pow+0x254>)
 8012f9e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8012fa2:	429c      	cmp	r4, r3
 8012fa4:	ee10 aa10 	vmov	sl, s0
 8012fa8:	463d      	mov	r5, r7
 8012faa:	dc06      	bgt.n	8012fba <__ieee754_pow+0x6a>
 8012fac:	d101      	bne.n	8012fb2 <__ieee754_pow+0x62>
 8012fae:	2e00      	cmp	r6, #0
 8012fb0:	d1e7      	bne.n	8012f82 <__ieee754_pow+0x32>
 8012fb2:	4598      	cmp	r8, r3
 8012fb4:	dc01      	bgt.n	8012fba <__ieee754_pow+0x6a>
 8012fb6:	d10f      	bne.n	8012fd8 <__ieee754_pow+0x88>
 8012fb8:	b172      	cbz	r2, 8012fd8 <__ieee754_pow+0x88>
 8012fba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8012fbe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8012fc2:	ea55 050a 	orrs.w	r5, r5, sl
 8012fc6:	d1dc      	bne.n	8012f82 <__ieee754_pow+0x32>
 8012fc8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012fcc:	18db      	adds	r3, r3, r3
 8012fce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8012fd2:	4152      	adcs	r2, r2
 8012fd4:	429d      	cmp	r5, r3
 8012fd6:	e7d0      	b.n	8012f7a <__ieee754_pow+0x2a>
 8012fd8:	2d00      	cmp	r5, #0
 8012fda:	da3b      	bge.n	8013054 <__ieee754_pow+0x104>
 8012fdc:	4b72      	ldr	r3, [pc, #456]	; (80131a8 <__ieee754_pow+0x258>)
 8012fde:	4598      	cmp	r8, r3
 8012fe0:	dc51      	bgt.n	8013086 <__ieee754_pow+0x136>
 8012fe2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8012fe6:	4598      	cmp	r8, r3
 8012fe8:	f340 84ab 	ble.w	8013942 <__ieee754_pow+0x9f2>
 8012fec:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012ff0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012ff4:	2b14      	cmp	r3, #20
 8012ff6:	dd0f      	ble.n	8013018 <__ieee754_pow+0xc8>
 8012ff8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012ffc:	fa22 f103 	lsr.w	r1, r2, r3
 8013000:	fa01 f303 	lsl.w	r3, r1, r3
 8013004:	4293      	cmp	r3, r2
 8013006:	f040 849c 	bne.w	8013942 <__ieee754_pow+0x9f2>
 801300a:	f001 0101 	and.w	r1, r1, #1
 801300e:	f1c1 0302 	rsb	r3, r1, #2
 8013012:	9304      	str	r3, [sp, #16]
 8013014:	b182      	cbz	r2, 8013038 <__ieee754_pow+0xe8>
 8013016:	e05f      	b.n	80130d8 <__ieee754_pow+0x188>
 8013018:	2a00      	cmp	r2, #0
 801301a:	d15b      	bne.n	80130d4 <__ieee754_pow+0x184>
 801301c:	f1c3 0314 	rsb	r3, r3, #20
 8013020:	fa48 f103 	asr.w	r1, r8, r3
 8013024:	fa01 f303 	lsl.w	r3, r1, r3
 8013028:	4543      	cmp	r3, r8
 801302a:	f040 8487 	bne.w	801393c <__ieee754_pow+0x9ec>
 801302e:	f001 0101 	and.w	r1, r1, #1
 8013032:	f1c1 0302 	rsb	r3, r1, #2
 8013036:	9304      	str	r3, [sp, #16]
 8013038:	4b5c      	ldr	r3, [pc, #368]	; (80131ac <__ieee754_pow+0x25c>)
 801303a:	4598      	cmp	r8, r3
 801303c:	d132      	bne.n	80130a4 <__ieee754_pow+0x154>
 801303e:	f1b9 0f00 	cmp.w	r9, #0
 8013042:	f280 8477 	bge.w	8013934 <__ieee754_pow+0x9e4>
 8013046:	4959      	ldr	r1, [pc, #356]	; (80131ac <__ieee754_pow+0x25c>)
 8013048:	4632      	mov	r2, r6
 801304a:	463b      	mov	r3, r7
 801304c:	2000      	movs	r0, #0
 801304e:	f7ed fbd5 	bl	80007fc <__aeabi_ddiv>
 8013052:	e79c      	b.n	8012f8e <__ieee754_pow+0x3e>
 8013054:	2300      	movs	r3, #0
 8013056:	9304      	str	r3, [sp, #16]
 8013058:	2a00      	cmp	r2, #0
 801305a:	d13d      	bne.n	80130d8 <__ieee754_pow+0x188>
 801305c:	4b51      	ldr	r3, [pc, #324]	; (80131a4 <__ieee754_pow+0x254>)
 801305e:	4598      	cmp	r8, r3
 8013060:	d1ea      	bne.n	8013038 <__ieee754_pow+0xe8>
 8013062:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013066:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801306a:	ea53 030a 	orrs.w	r3, r3, sl
 801306e:	f000 8459 	beq.w	8013924 <__ieee754_pow+0x9d4>
 8013072:	4b4f      	ldr	r3, [pc, #316]	; (80131b0 <__ieee754_pow+0x260>)
 8013074:	429c      	cmp	r4, r3
 8013076:	dd08      	ble.n	801308a <__ieee754_pow+0x13a>
 8013078:	f1b9 0f00 	cmp.w	r9, #0
 801307c:	f2c0 8456 	blt.w	801392c <__ieee754_pow+0x9dc>
 8013080:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013084:	e783      	b.n	8012f8e <__ieee754_pow+0x3e>
 8013086:	2302      	movs	r3, #2
 8013088:	e7e5      	b.n	8013056 <__ieee754_pow+0x106>
 801308a:	f1b9 0f00 	cmp.w	r9, #0
 801308e:	f04f 0000 	mov.w	r0, #0
 8013092:	f04f 0100 	mov.w	r1, #0
 8013096:	f6bf af7a 	bge.w	8012f8e <__ieee754_pow+0x3e>
 801309a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801309e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80130a2:	e774      	b.n	8012f8e <__ieee754_pow+0x3e>
 80130a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80130a8:	d106      	bne.n	80130b8 <__ieee754_pow+0x168>
 80130aa:	4632      	mov	r2, r6
 80130ac:	463b      	mov	r3, r7
 80130ae:	4630      	mov	r0, r6
 80130b0:	4639      	mov	r1, r7
 80130b2:	f7ed fa79 	bl	80005a8 <__aeabi_dmul>
 80130b6:	e76a      	b.n	8012f8e <__ieee754_pow+0x3e>
 80130b8:	4b3e      	ldr	r3, [pc, #248]	; (80131b4 <__ieee754_pow+0x264>)
 80130ba:	4599      	cmp	r9, r3
 80130bc:	d10c      	bne.n	80130d8 <__ieee754_pow+0x188>
 80130be:	2d00      	cmp	r5, #0
 80130c0:	db0a      	blt.n	80130d8 <__ieee754_pow+0x188>
 80130c2:	ec47 6b10 	vmov	d0, r6, r7
 80130c6:	b009      	add	sp, #36	; 0x24
 80130c8:	ecbd 8b06 	vpop	{d8-d10}
 80130cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130d0:	f000 bd20 	b.w	8013b14 <__ieee754_sqrt>
 80130d4:	2300      	movs	r3, #0
 80130d6:	9304      	str	r3, [sp, #16]
 80130d8:	ec47 6b10 	vmov	d0, r6, r7
 80130dc:	f000 fc62 	bl	80139a4 <fabs>
 80130e0:	ec51 0b10 	vmov	r0, r1, d0
 80130e4:	f1ba 0f00 	cmp.w	sl, #0
 80130e8:	d129      	bne.n	801313e <__ieee754_pow+0x1ee>
 80130ea:	b124      	cbz	r4, 80130f6 <__ieee754_pow+0x1a6>
 80130ec:	4b2f      	ldr	r3, [pc, #188]	; (80131ac <__ieee754_pow+0x25c>)
 80130ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80130f2:	429a      	cmp	r2, r3
 80130f4:	d123      	bne.n	801313e <__ieee754_pow+0x1ee>
 80130f6:	f1b9 0f00 	cmp.w	r9, #0
 80130fa:	da05      	bge.n	8013108 <__ieee754_pow+0x1b8>
 80130fc:	4602      	mov	r2, r0
 80130fe:	460b      	mov	r3, r1
 8013100:	2000      	movs	r0, #0
 8013102:	492a      	ldr	r1, [pc, #168]	; (80131ac <__ieee754_pow+0x25c>)
 8013104:	f7ed fb7a 	bl	80007fc <__aeabi_ddiv>
 8013108:	2d00      	cmp	r5, #0
 801310a:	f6bf af40 	bge.w	8012f8e <__ieee754_pow+0x3e>
 801310e:	9b04      	ldr	r3, [sp, #16]
 8013110:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013114:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013118:	431c      	orrs	r4, r3
 801311a:	d108      	bne.n	801312e <__ieee754_pow+0x1de>
 801311c:	4602      	mov	r2, r0
 801311e:	460b      	mov	r3, r1
 8013120:	4610      	mov	r0, r2
 8013122:	4619      	mov	r1, r3
 8013124:	f7ed f888 	bl	8000238 <__aeabi_dsub>
 8013128:	4602      	mov	r2, r0
 801312a:	460b      	mov	r3, r1
 801312c:	e78f      	b.n	801304e <__ieee754_pow+0xfe>
 801312e:	9b04      	ldr	r3, [sp, #16]
 8013130:	2b01      	cmp	r3, #1
 8013132:	f47f af2c 	bne.w	8012f8e <__ieee754_pow+0x3e>
 8013136:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801313a:	4619      	mov	r1, r3
 801313c:	e727      	b.n	8012f8e <__ieee754_pow+0x3e>
 801313e:	0feb      	lsrs	r3, r5, #31
 8013140:	3b01      	subs	r3, #1
 8013142:	9306      	str	r3, [sp, #24]
 8013144:	9a06      	ldr	r2, [sp, #24]
 8013146:	9b04      	ldr	r3, [sp, #16]
 8013148:	4313      	orrs	r3, r2
 801314a:	d102      	bne.n	8013152 <__ieee754_pow+0x202>
 801314c:	4632      	mov	r2, r6
 801314e:	463b      	mov	r3, r7
 8013150:	e7e6      	b.n	8013120 <__ieee754_pow+0x1d0>
 8013152:	4b19      	ldr	r3, [pc, #100]	; (80131b8 <__ieee754_pow+0x268>)
 8013154:	4598      	cmp	r8, r3
 8013156:	f340 80fb 	ble.w	8013350 <__ieee754_pow+0x400>
 801315a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801315e:	4598      	cmp	r8, r3
 8013160:	4b13      	ldr	r3, [pc, #76]	; (80131b0 <__ieee754_pow+0x260>)
 8013162:	dd0c      	ble.n	801317e <__ieee754_pow+0x22e>
 8013164:	429c      	cmp	r4, r3
 8013166:	dc0f      	bgt.n	8013188 <__ieee754_pow+0x238>
 8013168:	f1b9 0f00 	cmp.w	r9, #0
 801316c:	da0f      	bge.n	801318e <__ieee754_pow+0x23e>
 801316e:	2000      	movs	r0, #0
 8013170:	b009      	add	sp, #36	; 0x24
 8013172:	ecbd 8b06 	vpop	{d8-d10}
 8013176:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801317a:	f000 bcc2 	b.w	8013b02 <__math_oflow>
 801317e:	429c      	cmp	r4, r3
 8013180:	dbf2      	blt.n	8013168 <__ieee754_pow+0x218>
 8013182:	4b0a      	ldr	r3, [pc, #40]	; (80131ac <__ieee754_pow+0x25c>)
 8013184:	429c      	cmp	r4, r3
 8013186:	dd19      	ble.n	80131bc <__ieee754_pow+0x26c>
 8013188:	f1b9 0f00 	cmp.w	r9, #0
 801318c:	dcef      	bgt.n	801316e <__ieee754_pow+0x21e>
 801318e:	2000      	movs	r0, #0
 8013190:	b009      	add	sp, #36	; 0x24
 8013192:	ecbd 8b06 	vpop	{d8-d10}
 8013196:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801319a:	f000 bca9 	b.w	8013af0 <__math_uflow>
 801319e:	bf00      	nop
 80131a0:	fff00000 	.word	0xfff00000
 80131a4:	7ff00000 	.word	0x7ff00000
 80131a8:	433fffff 	.word	0x433fffff
 80131ac:	3ff00000 	.word	0x3ff00000
 80131b0:	3fefffff 	.word	0x3fefffff
 80131b4:	3fe00000 	.word	0x3fe00000
 80131b8:	41e00000 	.word	0x41e00000
 80131bc:	4b60      	ldr	r3, [pc, #384]	; (8013340 <__ieee754_pow+0x3f0>)
 80131be:	2200      	movs	r2, #0
 80131c0:	f7ed f83a 	bl	8000238 <__aeabi_dsub>
 80131c4:	a354      	add	r3, pc, #336	; (adr r3, 8013318 <__ieee754_pow+0x3c8>)
 80131c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ca:	4604      	mov	r4, r0
 80131cc:	460d      	mov	r5, r1
 80131ce:	f7ed f9eb 	bl	80005a8 <__aeabi_dmul>
 80131d2:	a353      	add	r3, pc, #332	; (adr r3, 8013320 <__ieee754_pow+0x3d0>)
 80131d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131d8:	4606      	mov	r6, r0
 80131da:	460f      	mov	r7, r1
 80131dc:	4620      	mov	r0, r4
 80131de:	4629      	mov	r1, r5
 80131e0:	f7ed f9e2 	bl	80005a8 <__aeabi_dmul>
 80131e4:	4b57      	ldr	r3, [pc, #348]	; (8013344 <__ieee754_pow+0x3f4>)
 80131e6:	4682      	mov	sl, r0
 80131e8:	468b      	mov	fp, r1
 80131ea:	2200      	movs	r2, #0
 80131ec:	4620      	mov	r0, r4
 80131ee:	4629      	mov	r1, r5
 80131f0:	f7ed f9da 	bl	80005a8 <__aeabi_dmul>
 80131f4:	4602      	mov	r2, r0
 80131f6:	460b      	mov	r3, r1
 80131f8:	a14b      	add	r1, pc, #300	; (adr r1, 8013328 <__ieee754_pow+0x3d8>)
 80131fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131fe:	f7ed f81b 	bl	8000238 <__aeabi_dsub>
 8013202:	4622      	mov	r2, r4
 8013204:	462b      	mov	r3, r5
 8013206:	f7ed f9cf 	bl	80005a8 <__aeabi_dmul>
 801320a:	4602      	mov	r2, r0
 801320c:	460b      	mov	r3, r1
 801320e:	2000      	movs	r0, #0
 8013210:	494d      	ldr	r1, [pc, #308]	; (8013348 <__ieee754_pow+0x3f8>)
 8013212:	f7ed f811 	bl	8000238 <__aeabi_dsub>
 8013216:	4622      	mov	r2, r4
 8013218:	4680      	mov	r8, r0
 801321a:	4689      	mov	r9, r1
 801321c:	462b      	mov	r3, r5
 801321e:	4620      	mov	r0, r4
 8013220:	4629      	mov	r1, r5
 8013222:	f7ed f9c1 	bl	80005a8 <__aeabi_dmul>
 8013226:	4602      	mov	r2, r0
 8013228:	460b      	mov	r3, r1
 801322a:	4640      	mov	r0, r8
 801322c:	4649      	mov	r1, r9
 801322e:	f7ed f9bb 	bl	80005a8 <__aeabi_dmul>
 8013232:	a33f      	add	r3, pc, #252	; (adr r3, 8013330 <__ieee754_pow+0x3e0>)
 8013234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013238:	f7ed f9b6 	bl	80005a8 <__aeabi_dmul>
 801323c:	4602      	mov	r2, r0
 801323e:	460b      	mov	r3, r1
 8013240:	4650      	mov	r0, sl
 8013242:	4659      	mov	r1, fp
 8013244:	f7ec fff8 	bl	8000238 <__aeabi_dsub>
 8013248:	4602      	mov	r2, r0
 801324a:	460b      	mov	r3, r1
 801324c:	4680      	mov	r8, r0
 801324e:	4689      	mov	r9, r1
 8013250:	4630      	mov	r0, r6
 8013252:	4639      	mov	r1, r7
 8013254:	f7ec fff2 	bl	800023c <__adddf3>
 8013258:	2000      	movs	r0, #0
 801325a:	4632      	mov	r2, r6
 801325c:	463b      	mov	r3, r7
 801325e:	4604      	mov	r4, r0
 8013260:	460d      	mov	r5, r1
 8013262:	f7ec ffe9 	bl	8000238 <__aeabi_dsub>
 8013266:	4602      	mov	r2, r0
 8013268:	460b      	mov	r3, r1
 801326a:	4640      	mov	r0, r8
 801326c:	4649      	mov	r1, r9
 801326e:	f7ec ffe3 	bl	8000238 <__aeabi_dsub>
 8013272:	9b04      	ldr	r3, [sp, #16]
 8013274:	9a06      	ldr	r2, [sp, #24]
 8013276:	3b01      	subs	r3, #1
 8013278:	4313      	orrs	r3, r2
 801327a:	4682      	mov	sl, r0
 801327c:	468b      	mov	fp, r1
 801327e:	f040 81e7 	bne.w	8013650 <__ieee754_pow+0x700>
 8013282:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8013338 <__ieee754_pow+0x3e8>
 8013286:	eeb0 8a47 	vmov.f32	s16, s14
 801328a:	eef0 8a67 	vmov.f32	s17, s15
 801328e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013292:	2600      	movs	r6, #0
 8013294:	4632      	mov	r2, r6
 8013296:	463b      	mov	r3, r7
 8013298:	e9dd 0100 	ldrd	r0, r1, [sp]
 801329c:	f7ec ffcc 	bl	8000238 <__aeabi_dsub>
 80132a0:	4622      	mov	r2, r4
 80132a2:	462b      	mov	r3, r5
 80132a4:	f7ed f980 	bl	80005a8 <__aeabi_dmul>
 80132a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80132ac:	4680      	mov	r8, r0
 80132ae:	4689      	mov	r9, r1
 80132b0:	4650      	mov	r0, sl
 80132b2:	4659      	mov	r1, fp
 80132b4:	f7ed f978 	bl	80005a8 <__aeabi_dmul>
 80132b8:	4602      	mov	r2, r0
 80132ba:	460b      	mov	r3, r1
 80132bc:	4640      	mov	r0, r8
 80132be:	4649      	mov	r1, r9
 80132c0:	f7ec ffbc 	bl	800023c <__adddf3>
 80132c4:	4632      	mov	r2, r6
 80132c6:	463b      	mov	r3, r7
 80132c8:	4680      	mov	r8, r0
 80132ca:	4689      	mov	r9, r1
 80132cc:	4620      	mov	r0, r4
 80132ce:	4629      	mov	r1, r5
 80132d0:	f7ed f96a 	bl	80005a8 <__aeabi_dmul>
 80132d4:	460b      	mov	r3, r1
 80132d6:	4604      	mov	r4, r0
 80132d8:	460d      	mov	r5, r1
 80132da:	4602      	mov	r2, r0
 80132dc:	4649      	mov	r1, r9
 80132de:	4640      	mov	r0, r8
 80132e0:	f7ec ffac 	bl	800023c <__adddf3>
 80132e4:	4b19      	ldr	r3, [pc, #100]	; (801334c <__ieee754_pow+0x3fc>)
 80132e6:	4299      	cmp	r1, r3
 80132e8:	ec45 4b19 	vmov	d9, r4, r5
 80132ec:	4606      	mov	r6, r0
 80132ee:	460f      	mov	r7, r1
 80132f0:	468b      	mov	fp, r1
 80132f2:	f340 82f0 	ble.w	80138d6 <__ieee754_pow+0x986>
 80132f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80132fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80132fe:	4303      	orrs	r3, r0
 8013300:	f000 81e4 	beq.w	80136cc <__ieee754_pow+0x77c>
 8013304:	ec51 0b18 	vmov	r0, r1, d8
 8013308:	2200      	movs	r2, #0
 801330a:	2300      	movs	r3, #0
 801330c:	f7ed fbbe 	bl	8000a8c <__aeabi_dcmplt>
 8013310:	3800      	subs	r0, #0
 8013312:	bf18      	it	ne
 8013314:	2001      	movne	r0, #1
 8013316:	e72b      	b.n	8013170 <__ieee754_pow+0x220>
 8013318:	60000000 	.word	0x60000000
 801331c:	3ff71547 	.word	0x3ff71547
 8013320:	f85ddf44 	.word	0xf85ddf44
 8013324:	3e54ae0b 	.word	0x3e54ae0b
 8013328:	55555555 	.word	0x55555555
 801332c:	3fd55555 	.word	0x3fd55555
 8013330:	652b82fe 	.word	0x652b82fe
 8013334:	3ff71547 	.word	0x3ff71547
 8013338:	00000000 	.word	0x00000000
 801333c:	bff00000 	.word	0xbff00000
 8013340:	3ff00000 	.word	0x3ff00000
 8013344:	3fd00000 	.word	0x3fd00000
 8013348:	3fe00000 	.word	0x3fe00000
 801334c:	408fffff 	.word	0x408fffff
 8013350:	4bd5      	ldr	r3, [pc, #852]	; (80136a8 <__ieee754_pow+0x758>)
 8013352:	402b      	ands	r3, r5
 8013354:	2200      	movs	r2, #0
 8013356:	b92b      	cbnz	r3, 8013364 <__ieee754_pow+0x414>
 8013358:	4bd4      	ldr	r3, [pc, #848]	; (80136ac <__ieee754_pow+0x75c>)
 801335a:	f7ed f925 	bl	80005a8 <__aeabi_dmul>
 801335e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8013362:	460c      	mov	r4, r1
 8013364:	1523      	asrs	r3, r4, #20
 8013366:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801336a:	4413      	add	r3, r2
 801336c:	9305      	str	r3, [sp, #20]
 801336e:	4bd0      	ldr	r3, [pc, #832]	; (80136b0 <__ieee754_pow+0x760>)
 8013370:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013374:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8013378:	429c      	cmp	r4, r3
 801337a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801337e:	dd08      	ble.n	8013392 <__ieee754_pow+0x442>
 8013380:	4bcc      	ldr	r3, [pc, #816]	; (80136b4 <__ieee754_pow+0x764>)
 8013382:	429c      	cmp	r4, r3
 8013384:	f340 8162 	ble.w	801364c <__ieee754_pow+0x6fc>
 8013388:	9b05      	ldr	r3, [sp, #20]
 801338a:	3301      	adds	r3, #1
 801338c:	9305      	str	r3, [sp, #20]
 801338e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8013392:	2400      	movs	r4, #0
 8013394:	00e3      	lsls	r3, r4, #3
 8013396:	9307      	str	r3, [sp, #28]
 8013398:	4bc7      	ldr	r3, [pc, #796]	; (80136b8 <__ieee754_pow+0x768>)
 801339a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801339e:	ed93 7b00 	vldr	d7, [r3]
 80133a2:	4629      	mov	r1, r5
 80133a4:	ec53 2b17 	vmov	r2, r3, d7
 80133a8:	eeb0 9a47 	vmov.f32	s18, s14
 80133ac:	eef0 9a67 	vmov.f32	s19, s15
 80133b0:	4682      	mov	sl, r0
 80133b2:	f7ec ff41 	bl	8000238 <__aeabi_dsub>
 80133b6:	4652      	mov	r2, sl
 80133b8:	4606      	mov	r6, r0
 80133ba:	460f      	mov	r7, r1
 80133bc:	462b      	mov	r3, r5
 80133be:	ec51 0b19 	vmov	r0, r1, d9
 80133c2:	f7ec ff3b 	bl	800023c <__adddf3>
 80133c6:	4602      	mov	r2, r0
 80133c8:	460b      	mov	r3, r1
 80133ca:	2000      	movs	r0, #0
 80133cc:	49bb      	ldr	r1, [pc, #748]	; (80136bc <__ieee754_pow+0x76c>)
 80133ce:	f7ed fa15 	bl	80007fc <__aeabi_ddiv>
 80133d2:	ec41 0b1a 	vmov	d10, r0, r1
 80133d6:	4602      	mov	r2, r0
 80133d8:	460b      	mov	r3, r1
 80133da:	4630      	mov	r0, r6
 80133dc:	4639      	mov	r1, r7
 80133de:	f7ed f8e3 	bl	80005a8 <__aeabi_dmul>
 80133e2:	2300      	movs	r3, #0
 80133e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80133e8:	9302      	str	r3, [sp, #8]
 80133ea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80133ee:	46ab      	mov	fp, r5
 80133f0:	106d      	asrs	r5, r5, #1
 80133f2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80133f6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80133fa:	ec41 0b18 	vmov	d8, r0, r1
 80133fe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8013402:	2200      	movs	r2, #0
 8013404:	4640      	mov	r0, r8
 8013406:	4649      	mov	r1, r9
 8013408:	4614      	mov	r4, r2
 801340a:	461d      	mov	r5, r3
 801340c:	f7ed f8cc 	bl	80005a8 <__aeabi_dmul>
 8013410:	4602      	mov	r2, r0
 8013412:	460b      	mov	r3, r1
 8013414:	4630      	mov	r0, r6
 8013416:	4639      	mov	r1, r7
 8013418:	f7ec ff0e 	bl	8000238 <__aeabi_dsub>
 801341c:	ec53 2b19 	vmov	r2, r3, d9
 8013420:	4606      	mov	r6, r0
 8013422:	460f      	mov	r7, r1
 8013424:	4620      	mov	r0, r4
 8013426:	4629      	mov	r1, r5
 8013428:	f7ec ff06 	bl	8000238 <__aeabi_dsub>
 801342c:	4602      	mov	r2, r0
 801342e:	460b      	mov	r3, r1
 8013430:	4650      	mov	r0, sl
 8013432:	4659      	mov	r1, fp
 8013434:	f7ec ff00 	bl	8000238 <__aeabi_dsub>
 8013438:	4642      	mov	r2, r8
 801343a:	464b      	mov	r3, r9
 801343c:	f7ed f8b4 	bl	80005a8 <__aeabi_dmul>
 8013440:	4602      	mov	r2, r0
 8013442:	460b      	mov	r3, r1
 8013444:	4630      	mov	r0, r6
 8013446:	4639      	mov	r1, r7
 8013448:	f7ec fef6 	bl	8000238 <__aeabi_dsub>
 801344c:	ec53 2b1a 	vmov	r2, r3, d10
 8013450:	f7ed f8aa 	bl	80005a8 <__aeabi_dmul>
 8013454:	ec53 2b18 	vmov	r2, r3, d8
 8013458:	ec41 0b19 	vmov	d9, r0, r1
 801345c:	ec51 0b18 	vmov	r0, r1, d8
 8013460:	f7ed f8a2 	bl	80005a8 <__aeabi_dmul>
 8013464:	a37c      	add	r3, pc, #496	; (adr r3, 8013658 <__ieee754_pow+0x708>)
 8013466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801346a:	4604      	mov	r4, r0
 801346c:	460d      	mov	r5, r1
 801346e:	f7ed f89b 	bl	80005a8 <__aeabi_dmul>
 8013472:	a37b      	add	r3, pc, #492	; (adr r3, 8013660 <__ieee754_pow+0x710>)
 8013474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013478:	f7ec fee0 	bl	800023c <__adddf3>
 801347c:	4622      	mov	r2, r4
 801347e:	462b      	mov	r3, r5
 8013480:	f7ed f892 	bl	80005a8 <__aeabi_dmul>
 8013484:	a378      	add	r3, pc, #480	; (adr r3, 8013668 <__ieee754_pow+0x718>)
 8013486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801348a:	f7ec fed7 	bl	800023c <__adddf3>
 801348e:	4622      	mov	r2, r4
 8013490:	462b      	mov	r3, r5
 8013492:	f7ed f889 	bl	80005a8 <__aeabi_dmul>
 8013496:	a376      	add	r3, pc, #472	; (adr r3, 8013670 <__ieee754_pow+0x720>)
 8013498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801349c:	f7ec fece 	bl	800023c <__adddf3>
 80134a0:	4622      	mov	r2, r4
 80134a2:	462b      	mov	r3, r5
 80134a4:	f7ed f880 	bl	80005a8 <__aeabi_dmul>
 80134a8:	a373      	add	r3, pc, #460	; (adr r3, 8013678 <__ieee754_pow+0x728>)
 80134aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ae:	f7ec fec5 	bl	800023c <__adddf3>
 80134b2:	4622      	mov	r2, r4
 80134b4:	462b      	mov	r3, r5
 80134b6:	f7ed f877 	bl	80005a8 <__aeabi_dmul>
 80134ba:	a371      	add	r3, pc, #452	; (adr r3, 8013680 <__ieee754_pow+0x730>)
 80134bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134c0:	f7ec febc 	bl	800023c <__adddf3>
 80134c4:	4622      	mov	r2, r4
 80134c6:	4606      	mov	r6, r0
 80134c8:	460f      	mov	r7, r1
 80134ca:	462b      	mov	r3, r5
 80134cc:	4620      	mov	r0, r4
 80134ce:	4629      	mov	r1, r5
 80134d0:	f7ed f86a 	bl	80005a8 <__aeabi_dmul>
 80134d4:	4602      	mov	r2, r0
 80134d6:	460b      	mov	r3, r1
 80134d8:	4630      	mov	r0, r6
 80134da:	4639      	mov	r1, r7
 80134dc:	f7ed f864 	bl	80005a8 <__aeabi_dmul>
 80134e0:	4642      	mov	r2, r8
 80134e2:	4604      	mov	r4, r0
 80134e4:	460d      	mov	r5, r1
 80134e6:	464b      	mov	r3, r9
 80134e8:	ec51 0b18 	vmov	r0, r1, d8
 80134ec:	f7ec fea6 	bl	800023c <__adddf3>
 80134f0:	ec53 2b19 	vmov	r2, r3, d9
 80134f4:	f7ed f858 	bl	80005a8 <__aeabi_dmul>
 80134f8:	4622      	mov	r2, r4
 80134fa:	462b      	mov	r3, r5
 80134fc:	f7ec fe9e 	bl	800023c <__adddf3>
 8013500:	4642      	mov	r2, r8
 8013502:	4682      	mov	sl, r0
 8013504:	468b      	mov	fp, r1
 8013506:	464b      	mov	r3, r9
 8013508:	4640      	mov	r0, r8
 801350a:	4649      	mov	r1, r9
 801350c:	f7ed f84c 	bl	80005a8 <__aeabi_dmul>
 8013510:	4b6b      	ldr	r3, [pc, #428]	; (80136c0 <__ieee754_pow+0x770>)
 8013512:	2200      	movs	r2, #0
 8013514:	4606      	mov	r6, r0
 8013516:	460f      	mov	r7, r1
 8013518:	f7ec fe90 	bl	800023c <__adddf3>
 801351c:	4652      	mov	r2, sl
 801351e:	465b      	mov	r3, fp
 8013520:	f7ec fe8c 	bl	800023c <__adddf3>
 8013524:	2000      	movs	r0, #0
 8013526:	4604      	mov	r4, r0
 8013528:	460d      	mov	r5, r1
 801352a:	4602      	mov	r2, r0
 801352c:	460b      	mov	r3, r1
 801352e:	4640      	mov	r0, r8
 8013530:	4649      	mov	r1, r9
 8013532:	f7ed f839 	bl	80005a8 <__aeabi_dmul>
 8013536:	4b62      	ldr	r3, [pc, #392]	; (80136c0 <__ieee754_pow+0x770>)
 8013538:	4680      	mov	r8, r0
 801353a:	4689      	mov	r9, r1
 801353c:	2200      	movs	r2, #0
 801353e:	4620      	mov	r0, r4
 8013540:	4629      	mov	r1, r5
 8013542:	f7ec fe79 	bl	8000238 <__aeabi_dsub>
 8013546:	4632      	mov	r2, r6
 8013548:	463b      	mov	r3, r7
 801354a:	f7ec fe75 	bl	8000238 <__aeabi_dsub>
 801354e:	4602      	mov	r2, r0
 8013550:	460b      	mov	r3, r1
 8013552:	4650      	mov	r0, sl
 8013554:	4659      	mov	r1, fp
 8013556:	f7ec fe6f 	bl	8000238 <__aeabi_dsub>
 801355a:	ec53 2b18 	vmov	r2, r3, d8
 801355e:	f7ed f823 	bl	80005a8 <__aeabi_dmul>
 8013562:	4622      	mov	r2, r4
 8013564:	4606      	mov	r6, r0
 8013566:	460f      	mov	r7, r1
 8013568:	462b      	mov	r3, r5
 801356a:	ec51 0b19 	vmov	r0, r1, d9
 801356e:	f7ed f81b 	bl	80005a8 <__aeabi_dmul>
 8013572:	4602      	mov	r2, r0
 8013574:	460b      	mov	r3, r1
 8013576:	4630      	mov	r0, r6
 8013578:	4639      	mov	r1, r7
 801357a:	f7ec fe5f 	bl	800023c <__adddf3>
 801357e:	4606      	mov	r6, r0
 8013580:	460f      	mov	r7, r1
 8013582:	4602      	mov	r2, r0
 8013584:	460b      	mov	r3, r1
 8013586:	4640      	mov	r0, r8
 8013588:	4649      	mov	r1, r9
 801358a:	f7ec fe57 	bl	800023c <__adddf3>
 801358e:	a33e      	add	r3, pc, #248	; (adr r3, 8013688 <__ieee754_pow+0x738>)
 8013590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013594:	2000      	movs	r0, #0
 8013596:	4604      	mov	r4, r0
 8013598:	460d      	mov	r5, r1
 801359a:	f7ed f805 	bl	80005a8 <__aeabi_dmul>
 801359e:	4642      	mov	r2, r8
 80135a0:	ec41 0b18 	vmov	d8, r0, r1
 80135a4:	464b      	mov	r3, r9
 80135a6:	4620      	mov	r0, r4
 80135a8:	4629      	mov	r1, r5
 80135aa:	f7ec fe45 	bl	8000238 <__aeabi_dsub>
 80135ae:	4602      	mov	r2, r0
 80135b0:	460b      	mov	r3, r1
 80135b2:	4630      	mov	r0, r6
 80135b4:	4639      	mov	r1, r7
 80135b6:	f7ec fe3f 	bl	8000238 <__aeabi_dsub>
 80135ba:	a335      	add	r3, pc, #212	; (adr r3, 8013690 <__ieee754_pow+0x740>)
 80135bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135c0:	f7ec fff2 	bl	80005a8 <__aeabi_dmul>
 80135c4:	a334      	add	r3, pc, #208	; (adr r3, 8013698 <__ieee754_pow+0x748>)
 80135c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ca:	4606      	mov	r6, r0
 80135cc:	460f      	mov	r7, r1
 80135ce:	4620      	mov	r0, r4
 80135d0:	4629      	mov	r1, r5
 80135d2:	f7ec ffe9 	bl	80005a8 <__aeabi_dmul>
 80135d6:	4602      	mov	r2, r0
 80135d8:	460b      	mov	r3, r1
 80135da:	4630      	mov	r0, r6
 80135dc:	4639      	mov	r1, r7
 80135de:	f7ec fe2d 	bl	800023c <__adddf3>
 80135e2:	9a07      	ldr	r2, [sp, #28]
 80135e4:	4b37      	ldr	r3, [pc, #220]	; (80136c4 <__ieee754_pow+0x774>)
 80135e6:	4413      	add	r3, r2
 80135e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ec:	f7ec fe26 	bl	800023c <__adddf3>
 80135f0:	4682      	mov	sl, r0
 80135f2:	9805      	ldr	r0, [sp, #20]
 80135f4:	468b      	mov	fp, r1
 80135f6:	f7ec ff6d 	bl	80004d4 <__aeabi_i2d>
 80135fa:	9a07      	ldr	r2, [sp, #28]
 80135fc:	4b32      	ldr	r3, [pc, #200]	; (80136c8 <__ieee754_pow+0x778>)
 80135fe:	4413      	add	r3, r2
 8013600:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013604:	4606      	mov	r6, r0
 8013606:	460f      	mov	r7, r1
 8013608:	4652      	mov	r2, sl
 801360a:	465b      	mov	r3, fp
 801360c:	ec51 0b18 	vmov	r0, r1, d8
 8013610:	f7ec fe14 	bl	800023c <__adddf3>
 8013614:	4642      	mov	r2, r8
 8013616:	464b      	mov	r3, r9
 8013618:	f7ec fe10 	bl	800023c <__adddf3>
 801361c:	4632      	mov	r2, r6
 801361e:	463b      	mov	r3, r7
 8013620:	f7ec fe0c 	bl	800023c <__adddf3>
 8013624:	2000      	movs	r0, #0
 8013626:	4632      	mov	r2, r6
 8013628:	463b      	mov	r3, r7
 801362a:	4604      	mov	r4, r0
 801362c:	460d      	mov	r5, r1
 801362e:	f7ec fe03 	bl	8000238 <__aeabi_dsub>
 8013632:	4642      	mov	r2, r8
 8013634:	464b      	mov	r3, r9
 8013636:	f7ec fdff 	bl	8000238 <__aeabi_dsub>
 801363a:	ec53 2b18 	vmov	r2, r3, d8
 801363e:	f7ec fdfb 	bl	8000238 <__aeabi_dsub>
 8013642:	4602      	mov	r2, r0
 8013644:	460b      	mov	r3, r1
 8013646:	4650      	mov	r0, sl
 8013648:	4659      	mov	r1, fp
 801364a:	e610      	b.n	801326e <__ieee754_pow+0x31e>
 801364c:	2401      	movs	r4, #1
 801364e:	e6a1      	b.n	8013394 <__ieee754_pow+0x444>
 8013650:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80136a0 <__ieee754_pow+0x750>
 8013654:	e617      	b.n	8013286 <__ieee754_pow+0x336>
 8013656:	bf00      	nop
 8013658:	4a454eef 	.word	0x4a454eef
 801365c:	3fca7e28 	.word	0x3fca7e28
 8013660:	93c9db65 	.word	0x93c9db65
 8013664:	3fcd864a 	.word	0x3fcd864a
 8013668:	a91d4101 	.word	0xa91d4101
 801366c:	3fd17460 	.word	0x3fd17460
 8013670:	518f264d 	.word	0x518f264d
 8013674:	3fd55555 	.word	0x3fd55555
 8013678:	db6fabff 	.word	0xdb6fabff
 801367c:	3fdb6db6 	.word	0x3fdb6db6
 8013680:	33333303 	.word	0x33333303
 8013684:	3fe33333 	.word	0x3fe33333
 8013688:	e0000000 	.word	0xe0000000
 801368c:	3feec709 	.word	0x3feec709
 8013690:	dc3a03fd 	.word	0xdc3a03fd
 8013694:	3feec709 	.word	0x3feec709
 8013698:	145b01f5 	.word	0x145b01f5
 801369c:	be3e2fe0 	.word	0xbe3e2fe0
 80136a0:	00000000 	.word	0x00000000
 80136a4:	3ff00000 	.word	0x3ff00000
 80136a8:	7ff00000 	.word	0x7ff00000
 80136ac:	43400000 	.word	0x43400000
 80136b0:	0003988e 	.word	0x0003988e
 80136b4:	000bb679 	.word	0x000bb679
 80136b8:	08014ce0 	.word	0x08014ce0
 80136bc:	3ff00000 	.word	0x3ff00000
 80136c0:	40080000 	.word	0x40080000
 80136c4:	08014d00 	.word	0x08014d00
 80136c8:	08014cf0 	.word	0x08014cf0
 80136cc:	a3b3      	add	r3, pc, #716	; (adr r3, 801399c <__ieee754_pow+0xa4c>)
 80136ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136d2:	4640      	mov	r0, r8
 80136d4:	4649      	mov	r1, r9
 80136d6:	f7ec fdb1 	bl	800023c <__adddf3>
 80136da:	4622      	mov	r2, r4
 80136dc:	ec41 0b1a 	vmov	d10, r0, r1
 80136e0:	462b      	mov	r3, r5
 80136e2:	4630      	mov	r0, r6
 80136e4:	4639      	mov	r1, r7
 80136e6:	f7ec fda7 	bl	8000238 <__aeabi_dsub>
 80136ea:	4602      	mov	r2, r0
 80136ec:	460b      	mov	r3, r1
 80136ee:	ec51 0b1a 	vmov	r0, r1, d10
 80136f2:	f7ed f9e9 	bl	8000ac8 <__aeabi_dcmpgt>
 80136f6:	2800      	cmp	r0, #0
 80136f8:	f47f ae04 	bne.w	8013304 <__ieee754_pow+0x3b4>
 80136fc:	4aa2      	ldr	r2, [pc, #648]	; (8013988 <__ieee754_pow+0xa38>)
 80136fe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013702:	4293      	cmp	r3, r2
 8013704:	f340 8107 	ble.w	8013916 <__ieee754_pow+0x9c6>
 8013708:	151b      	asrs	r3, r3, #20
 801370a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801370e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8013712:	fa4a fa03 	asr.w	sl, sl, r3
 8013716:	44da      	add	sl, fp
 8013718:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801371c:	489b      	ldr	r0, [pc, #620]	; (801398c <__ieee754_pow+0xa3c>)
 801371e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8013722:	4108      	asrs	r0, r1
 8013724:	ea00 030a 	and.w	r3, r0, sl
 8013728:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801372c:	f1c1 0114 	rsb	r1, r1, #20
 8013730:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8013734:	fa4a fa01 	asr.w	sl, sl, r1
 8013738:	f1bb 0f00 	cmp.w	fp, #0
 801373c:	f04f 0200 	mov.w	r2, #0
 8013740:	4620      	mov	r0, r4
 8013742:	4629      	mov	r1, r5
 8013744:	bfb8      	it	lt
 8013746:	f1ca 0a00 	rsblt	sl, sl, #0
 801374a:	f7ec fd75 	bl	8000238 <__aeabi_dsub>
 801374e:	ec41 0b19 	vmov	d9, r0, r1
 8013752:	4642      	mov	r2, r8
 8013754:	464b      	mov	r3, r9
 8013756:	ec51 0b19 	vmov	r0, r1, d9
 801375a:	f7ec fd6f 	bl	800023c <__adddf3>
 801375e:	a37a      	add	r3, pc, #488	; (adr r3, 8013948 <__ieee754_pow+0x9f8>)
 8013760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013764:	2000      	movs	r0, #0
 8013766:	4604      	mov	r4, r0
 8013768:	460d      	mov	r5, r1
 801376a:	f7ec ff1d 	bl	80005a8 <__aeabi_dmul>
 801376e:	ec53 2b19 	vmov	r2, r3, d9
 8013772:	4606      	mov	r6, r0
 8013774:	460f      	mov	r7, r1
 8013776:	4620      	mov	r0, r4
 8013778:	4629      	mov	r1, r5
 801377a:	f7ec fd5d 	bl	8000238 <__aeabi_dsub>
 801377e:	4602      	mov	r2, r0
 8013780:	460b      	mov	r3, r1
 8013782:	4640      	mov	r0, r8
 8013784:	4649      	mov	r1, r9
 8013786:	f7ec fd57 	bl	8000238 <__aeabi_dsub>
 801378a:	a371      	add	r3, pc, #452	; (adr r3, 8013950 <__ieee754_pow+0xa00>)
 801378c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013790:	f7ec ff0a 	bl	80005a8 <__aeabi_dmul>
 8013794:	a370      	add	r3, pc, #448	; (adr r3, 8013958 <__ieee754_pow+0xa08>)
 8013796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801379a:	4680      	mov	r8, r0
 801379c:	4689      	mov	r9, r1
 801379e:	4620      	mov	r0, r4
 80137a0:	4629      	mov	r1, r5
 80137a2:	f7ec ff01 	bl	80005a8 <__aeabi_dmul>
 80137a6:	4602      	mov	r2, r0
 80137a8:	460b      	mov	r3, r1
 80137aa:	4640      	mov	r0, r8
 80137ac:	4649      	mov	r1, r9
 80137ae:	f7ec fd45 	bl	800023c <__adddf3>
 80137b2:	4604      	mov	r4, r0
 80137b4:	460d      	mov	r5, r1
 80137b6:	4602      	mov	r2, r0
 80137b8:	460b      	mov	r3, r1
 80137ba:	4630      	mov	r0, r6
 80137bc:	4639      	mov	r1, r7
 80137be:	f7ec fd3d 	bl	800023c <__adddf3>
 80137c2:	4632      	mov	r2, r6
 80137c4:	463b      	mov	r3, r7
 80137c6:	4680      	mov	r8, r0
 80137c8:	4689      	mov	r9, r1
 80137ca:	f7ec fd35 	bl	8000238 <__aeabi_dsub>
 80137ce:	4602      	mov	r2, r0
 80137d0:	460b      	mov	r3, r1
 80137d2:	4620      	mov	r0, r4
 80137d4:	4629      	mov	r1, r5
 80137d6:	f7ec fd2f 	bl	8000238 <__aeabi_dsub>
 80137da:	4642      	mov	r2, r8
 80137dc:	4606      	mov	r6, r0
 80137de:	460f      	mov	r7, r1
 80137e0:	464b      	mov	r3, r9
 80137e2:	4640      	mov	r0, r8
 80137e4:	4649      	mov	r1, r9
 80137e6:	f7ec fedf 	bl	80005a8 <__aeabi_dmul>
 80137ea:	a35d      	add	r3, pc, #372	; (adr r3, 8013960 <__ieee754_pow+0xa10>)
 80137ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137f0:	4604      	mov	r4, r0
 80137f2:	460d      	mov	r5, r1
 80137f4:	f7ec fed8 	bl	80005a8 <__aeabi_dmul>
 80137f8:	a35b      	add	r3, pc, #364	; (adr r3, 8013968 <__ieee754_pow+0xa18>)
 80137fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137fe:	f7ec fd1b 	bl	8000238 <__aeabi_dsub>
 8013802:	4622      	mov	r2, r4
 8013804:	462b      	mov	r3, r5
 8013806:	f7ec fecf 	bl	80005a8 <__aeabi_dmul>
 801380a:	a359      	add	r3, pc, #356	; (adr r3, 8013970 <__ieee754_pow+0xa20>)
 801380c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013810:	f7ec fd14 	bl	800023c <__adddf3>
 8013814:	4622      	mov	r2, r4
 8013816:	462b      	mov	r3, r5
 8013818:	f7ec fec6 	bl	80005a8 <__aeabi_dmul>
 801381c:	a356      	add	r3, pc, #344	; (adr r3, 8013978 <__ieee754_pow+0xa28>)
 801381e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013822:	f7ec fd09 	bl	8000238 <__aeabi_dsub>
 8013826:	4622      	mov	r2, r4
 8013828:	462b      	mov	r3, r5
 801382a:	f7ec febd 	bl	80005a8 <__aeabi_dmul>
 801382e:	a354      	add	r3, pc, #336	; (adr r3, 8013980 <__ieee754_pow+0xa30>)
 8013830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013834:	f7ec fd02 	bl	800023c <__adddf3>
 8013838:	4622      	mov	r2, r4
 801383a:	462b      	mov	r3, r5
 801383c:	f7ec feb4 	bl	80005a8 <__aeabi_dmul>
 8013840:	4602      	mov	r2, r0
 8013842:	460b      	mov	r3, r1
 8013844:	4640      	mov	r0, r8
 8013846:	4649      	mov	r1, r9
 8013848:	f7ec fcf6 	bl	8000238 <__aeabi_dsub>
 801384c:	4604      	mov	r4, r0
 801384e:	460d      	mov	r5, r1
 8013850:	4602      	mov	r2, r0
 8013852:	460b      	mov	r3, r1
 8013854:	4640      	mov	r0, r8
 8013856:	4649      	mov	r1, r9
 8013858:	f7ec fea6 	bl	80005a8 <__aeabi_dmul>
 801385c:	2200      	movs	r2, #0
 801385e:	ec41 0b19 	vmov	d9, r0, r1
 8013862:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013866:	4620      	mov	r0, r4
 8013868:	4629      	mov	r1, r5
 801386a:	f7ec fce5 	bl	8000238 <__aeabi_dsub>
 801386e:	4602      	mov	r2, r0
 8013870:	460b      	mov	r3, r1
 8013872:	ec51 0b19 	vmov	r0, r1, d9
 8013876:	f7ec ffc1 	bl	80007fc <__aeabi_ddiv>
 801387a:	4632      	mov	r2, r6
 801387c:	4604      	mov	r4, r0
 801387e:	460d      	mov	r5, r1
 8013880:	463b      	mov	r3, r7
 8013882:	4640      	mov	r0, r8
 8013884:	4649      	mov	r1, r9
 8013886:	f7ec fe8f 	bl	80005a8 <__aeabi_dmul>
 801388a:	4632      	mov	r2, r6
 801388c:	463b      	mov	r3, r7
 801388e:	f7ec fcd5 	bl	800023c <__adddf3>
 8013892:	4602      	mov	r2, r0
 8013894:	460b      	mov	r3, r1
 8013896:	4620      	mov	r0, r4
 8013898:	4629      	mov	r1, r5
 801389a:	f7ec fccd 	bl	8000238 <__aeabi_dsub>
 801389e:	4642      	mov	r2, r8
 80138a0:	464b      	mov	r3, r9
 80138a2:	f7ec fcc9 	bl	8000238 <__aeabi_dsub>
 80138a6:	460b      	mov	r3, r1
 80138a8:	4602      	mov	r2, r0
 80138aa:	4939      	ldr	r1, [pc, #228]	; (8013990 <__ieee754_pow+0xa40>)
 80138ac:	2000      	movs	r0, #0
 80138ae:	f7ec fcc3 	bl	8000238 <__aeabi_dsub>
 80138b2:	ec41 0b10 	vmov	d0, r0, r1
 80138b6:	ee10 3a90 	vmov	r3, s1
 80138ba:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80138be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80138c2:	da2b      	bge.n	801391c <__ieee754_pow+0x9cc>
 80138c4:	4650      	mov	r0, sl
 80138c6:	f000 f877 	bl	80139b8 <scalbn>
 80138ca:	ec51 0b10 	vmov	r0, r1, d0
 80138ce:	ec53 2b18 	vmov	r2, r3, d8
 80138d2:	f7ff bbee 	b.w	80130b2 <__ieee754_pow+0x162>
 80138d6:	4b2f      	ldr	r3, [pc, #188]	; (8013994 <__ieee754_pow+0xa44>)
 80138d8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80138dc:	429e      	cmp	r6, r3
 80138de:	f77f af0d 	ble.w	80136fc <__ieee754_pow+0x7ac>
 80138e2:	4b2d      	ldr	r3, [pc, #180]	; (8013998 <__ieee754_pow+0xa48>)
 80138e4:	440b      	add	r3, r1
 80138e6:	4303      	orrs	r3, r0
 80138e8:	d009      	beq.n	80138fe <__ieee754_pow+0x9ae>
 80138ea:	ec51 0b18 	vmov	r0, r1, d8
 80138ee:	2200      	movs	r2, #0
 80138f0:	2300      	movs	r3, #0
 80138f2:	f7ed f8cb 	bl	8000a8c <__aeabi_dcmplt>
 80138f6:	3800      	subs	r0, #0
 80138f8:	bf18      	it	ne
 80138fa:	2001      	movne	r0, #1
 80138fc:	e448      	b.n	8013190 <__ieee754_pow+0x240>
 80138fe:	4622      	mov	r2, r4
 8013900:	462b      	mov	r3, r5
 8013902:	f7ec fc99 	bl	8000238 <__aeabi_dsub>
 8013906:	4642      	mov	r2, r8
 8013908:	464b      	mov	r3, r9
 801390a:	f7ed f8d3 	bl	8000ab4 <__aeabi_dcmpge>
 801390e:	2800      	cmp	r0, #0
 8013910:	f43f aef4 	beq.w	80136fc <__ieee754_pow+0x7ac>
 8013914:	e7e9      	b.n	80138ea <__ieee754_pow+0x99a>
 8013916:	f04f 0a00 	mov.w	sl, #0
 801391a:	e71a      	b.n	8013752 <__ieee754_pow+0x802>
 801391c:	ec51 0b10 	vmov	r0, r1, d0
 8013920:	4619      	mov	r1, r3
 8013922:	e7d4      	b.n	80138ce <__ieee754_pow+0x97e>
 8013924:	491a      	ldr	r1, [pc, #104]	; (8013990 <__ieee754_pow+0xa40>)
 8013926:	2000      	movs	r0, #0
 8013928:	f7ff bb31 	b.w	8012f8e <__ieee754_pow+0x3e>
 801392c:	2000      	movs	r0, #0
 801392e:	2100      	movs	r1, #0
 8013930:	f7ff bb2d 	b.w	8012f8e <__ieee754_pow+0x3e>
 8013934:	4630      	mov	r0, r6
 8013936:	4639      	mov	r1, r7
 8013938:	f7ff bb29 	b.w	8012f8e <__ieee754_pow+0x3e>
 801393c:	9204      	str	r2, [sp, #16]
 801393e:	f7ff bb7b 	b.w	8013038 <__ieee754_pow+0xe8>
 8013942:	2300      	movs	r3, #0
 8013944:	f7ff bb65 	b.w	8013012 <__ieee754_pow+0xc2>
 8013948:	00000000 	.word	0x00000000
 801394c:	3fe62e43 	.word	0x3fe62e43
 8013950:	fefa39ef 	.word	0xfefa39ef
 8013954:	3fe62e42 	.word	0x3fe62e42
 8013958:	0ca86c39 	.word	0x0ca86c39
 801395c:	be205c61 	.word	0xbe205c61
 8013960:	72bea4d0 	.word	0x72bea4d0
 8013964:	3e663769 	.word	0x3e663769
 8013968:	c5d26bf1 	.word	0xc5d26bf1
 801396c:	3ebbbd41 	.word	0x3ebbbd41
 8013970:	af25de2c 	.word	0xaf25de2c
 8013974:	3f11566a 	.word	0x3f11566a
 8013978:	16bebd93 	.word	0x16bebd93
 801397c:	3f66c16c 	.word	0x3f66c16c
 8013980:	5555553e 	.word	0x5555553e
 8013984:	3fc55555 	.word	0x3fc55555
 8013988:	3fe00000 	.word	0x3fe00000
 801398c:	fff00000 	.word	0xfff00000
 8013990:	3ff00000 	.word	0x3ff00000
 8013994:	4090cbff 	.word	0x4090cbff
 8013998:	3f6f3400 	.word	0x3f6f3400
 801399c:	652b82fe 	.word	0x652b82fe
 80139a0:	3c971547 	.word	0x3c971547

080139a4 <fabs>:
 80139a4:	ec51 0b10 	vmov	r0, r1, d0
 80139a8:	ee10 2a10 	vmov	r2, s0
 80139ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80139b0:	ec43 2b10 	vmov	d0, r2, r3
 80139b4:	4770      	bx	lr
	...

080139b8 <scalbn>:
 80139b8:	b570      	push	{r4, r5, r6, lr}
 80139ba:	ec55 4b10 	vmov	r4, r5, d0
 80139be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80139c2:	4606      	mov	r6, r0
 80139c4:	462b      	mov	r3, r5
 80139c6:	b999      	cbnz	r1, 80139f0 <scalbn+0x38>
 80139c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80139cc:	4323      	orrs	r3, r4
 80139ce:	d03f      	beq.n	8013a50 <scalbn+0x98>
 80139d0:	4b35      	ldr	r3, [pc, #212]	; (8013aa8 <scalbn+0xf0>)
 80139d2:	4629      	mov	r1, r5
 80139d4:	ee10 0a10 	vmov	r0, s0
 80139d8:	2200      	movs	r2, #0
 80139da:	f7ec fde5 	bl	80005a8 <__aeabi_dmul>
 80139de:	4b33      	ldr	r3, [pc, #204]	; (8013aac <scalbn+0xf4>)
 80139e0:	429e      	cmp	r6, r3
 80139e2:	4604      	mov	r4, r0
 80139e4:	460d      	mov	r5, r1
 80139e6:	da10      	bge.n	8013a0a <scalbn+0x52>
 80139e8:	a327      	add	r3, pc, #156	; (adr r3, 8013a88 <scalbn+0xd0>)
 80139ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ee:	e01f      	b.n	8013a30 <scalbn+0x78>
 80139f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80139f4:	4291      	cmp	r1, r2
 80139f6:	d10c      	bne.n	8013a12 <scalbn+0x5a>
 80139f8:	ee10 2a10 	vmov	r2, s0
 80139fc:	4620      	mov	r0, r4
 80139fe:	4629      	mov	r1, r5
 8013a00:	f7ec fc1c 	bl	800023c <__adddf3>
 8013a04:	4604      	mov	r4, r0
 8013a06:	460d      	mov	r5, r1
 8013a08:	e022      	b.n	8013a50 <scalbn+0x98>
 8013a0a:	460b      	mov	r3, r1
 8013a0c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013a10:	3936      	subs	r1, #54	; 0x36
 8013a12:	f24c 3250 	movw	r2, #50000	; 0xc350
 8013a16:	4296      	cmp	r6, r2
 8013a18:	dd0d      	ble.n	8013a36 <scalbn+0x7e>
 8013a1a:	2d00      	cmp	r5, #0
 8013a1c:	a11c      	add	r1, pc, #112	; (adr r1, 8013a90 <scalbn+0xd8>)
 8013a1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a22:	da02      	bge.n	8013a2a <scalbn+0x72>
 8013a24:	a11c      	add	r1, pc, #112	; (adr r1, 8013a98 <scalbn+0xe0>)
 8013a26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a2a:	a319      	add	r3, pc, #100	; (adr r3, 8013a90 <scalbn+0xd8>)
 8013a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a30:	f7ec fdba 	bl	80005a8 <__aeabi_dmul>
 8013a34:	e7e6      	b.n	8013a04 <scalbn+0x4c>
 8013a36:	1872      	adds	r2, r6, r1
 8013a38:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013a3c:	428a      	cmp	r2, r1
 8013a3e:	dcec      	bgt.n	8013a1a <scalbn+0x62>
 8013a40:	2a00      	cmp	r2, #0
 8013a42:	dd08      	ble.n	8013a56 <scalbn+0x9e>
 8013a44:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013a48:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013a4c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013a50:	ec45 4b10 	vmov	d0, r4, r5
 8013a54:	bd70      	pop	{r4, r5, r6, pc}
 8013a56:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013a5a:	da08      	bge.n	8013a6e <scalbn+0xb6>
 8013a5c:	2d00      	cmp	r5, #0
 8013a5e:	a10a      	add	r1, pc, #40	; (adr r1, 8013a88 <scalbn+0xd0>)
 8013a60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a64:	dac0      	bge.n	80139e8 <scalbn+0x30>
 8013a66:	a10e      	add	r1, pc, #56	; (adr r1, 8013aa0 <scalbn+0xe8>)
 8013a68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a6c:	e7bc      	b.n	80139e8 <scalbn+0x30>
 8013a6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013a72:	3236      	adds	r2, #54	; 0x36
 8013a74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013a78:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013a7c:	4620      	mov	r0, r4
 8013a7e:	4b0c      	ldr	r3, [pc, #48]	; (8013ab0 <scalbn+0xf8>)
 8013a80:	2200      	movs	r2, #0
 8013a82:	e7d5      	b.n	8013a30 <scalbn+0x78>
 8013a84:	f3af 8000 	nop.w
 8013a88:	c2f8f359 	.word	0xc2f8f359
 8013a8c:	01a56e1f 	.word	0x01a56e1f
 8013a90:	8800759c 	.word	0x8800759c
 8013a94:	7e37e43c 	.word	0x7e37e43c
 8013a98:	8800759c 	.word	0x8800759c
 8013a9c:	fe37e43c 	.word	0xfe37e43c
 8013aa0:	c2f8f359 	.word	0xc2f8f359
 8013aa4:	81a56e1f 	.word	0x81a56e1f
 8013aa8:	43500000 	.word	0x43500000
 8013aac:	ffff3cb0 	.word	0xffff3cb0
 8013ab0:	3c900000 	.word	0x3c900000

08013ab4 <with_errno>:
 8013ab4:	b570      	push	{r4, r5, r6, lr}
 8013ab6:	4604      	mov	r4, r0
 8013ab8:	460d      	mov	r5, r1
 8013aba:	4616      	mov	r6, r2
 8013abc:	f7fd f922 	bl	8010d04 <__errno>
 8013ac0:	4629      	mov	r1, r5
 8013ac2:	6006      	str	r6, [r0, #0]
 8013ac4:	4620      	mov	r0, r4
 8013ac6:	bd70      	pop	{r4, r5, r6, pc}

08013ac8 <xflow>:
 8013ac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013aca:	4614      	mov	r4, r2
 8013acc:	461d      	mov	r5, r3
 8013ace:	b108      	cbz	r0, 8013ad4 <xflow+0xc>
 8013ad0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013ad4:	e9cd 2300 	strd	r2, r3, [sp]
 8013ad8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013adc:	4620      	mov	r0, r4
 8013ade:	4629      	mov	r1, r5
 8013ae0:	f7ec fd62 	bl	80005a8 <__aeabi_dmul>
 8013ae4:	2222      	movs	r2, #34	; 0x22
 8013ae6:	b003      	add	sp, #12
 8013ae8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013aec:	f7ff bfe2 	b.w	8013ab4 <with_errno>

08013af0 <__math_uflow>:
 8013af0:	b508      	push	{r3, lr}
 8013af2:	2200      	movs	r2, #0
 8013af4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013af8:	f7ff ffe6 	bl	8013ac8 <xflow>
 8013afc:	ec41 0b10 	vmov	d0, r0, r1
 8013b00:	bd08      	pop	{r3, pc}

08013b02 <__math_oflow>:
 8013b02:	b508      	push	{r3, lr}
 8013b04:	2200      	movs	r2, #0
 8013b06:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8013b0a:	f7ff ffdd 	bl	8013ac8 <xflow>
 8013b0e:	ec41 0b10 	vmov	d0, r0, r1
 8013b12:	bd08      	pop	{r3, pc}

08013b14 <__ieee754_sqrt>:
 8013b14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b18:	ec55 4b10 	vmov	r4, r5, d0
 8013b1c:	4e67      	ldr	r6, [pc, #412]	; (8013cbc <__ieee754_sqrt+0x1a8>)
 8013b1e:	43ae      	bics	r6, r5
 8013b20:	ee10 0a10 	vmov	r0, s0
 8013b24:	ee10 2a10 	vmov	r2, s0
 8013b28:	4629      	mov	r1, r5
 8013b2a:	462b      	mov	r3, r5
 8013b2c:	d10d      	bne.n	8013b4a <__ieee754_sqrt+0x36>
 8013b2e:	f7ec fd3b 	bl	80005a8 <__aeabi_dmul>
 8013b32:	4602      	mov	r2, r0
 8013b34:	460b      	mov	r3, r1
 8013b36:	4620      	mov	r0, r4
 8013b38:	4629      	mov	r1, r5
 8013b3a:	f7ec fb7f 	bl	800023c <__adddf3>
 8013b3e:	4604      	mov	r4, r0
 8013b40:	460d      	mov	r5, r1
 8013b42:	ec45 4b10 	vmov	d0, r4, r5
 8013b46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b4a:	2d00      	cmp	r5, #0
 8013b4c:	dc0b      	bgt.n	8013b66 <__ieee754_sqrt+0x52>
 8013b4e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013b52:	4326      	orrs	r6, r4
 8013b54:	d0f5      	beq.n	8013b42 <__ieee754_sqrt+0x2e>
 8013b56:	b135      	cbz	r5, 8013b66 <__ieee754_sqrt+0x52>
 8013b58:	f7ec fb6e 	bl	8000238 <__aeabi_dsub>
 8013b5c:	4602      	mov	r2, r0
 8013b5e:	460b      	mov	r3, r1
 8013b60:	f7ec fe4c 	bl	80007fc <__aeabi_ddiv>
 8013b64:	e7eb      	b.n	8013b3e <__ieee754_sqrt+0x2a>
 8013b66:	1509      	asrs	r1, r1, #20
 8013b68:	f000 808d 	beq.w	8013c86 <__ieee754_sqrt+0x172>
 8013b6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013b70:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8013b74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013b78:	07c9      	lsls	r1, r1, #31
 8013b7a:	bf5c      	itt	pl
 8013b7c:	005b      	lslpl	r3, r3, #1
 8013b7e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8013b82:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013b86:	bf58      	it	pl
 8013b88:	0052      	lslpl	r2, r2, #1
 8013b8a:	2500      	movs	r5, #0
 8013b8c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8013b90:	1076      	asrs	r6, r6, #1
 8013b92:	0052      	lsls	r2, r2, #1
 8013b94:	f04f 0e16 	mov.w	lr, #22
 8013b98:	46ac      	mov	ip, r5
 8013b9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013b9e:	eb0c 0001 	add.w	r0, ip, r1
 8013ba2:	4298      	cmp	r0, r3
 8013ba4:	bfde      	ittt	le
 8013ba6:	1a1b      	suble	r3, r3, r0
 8013ba8:	eb00 0c01 	addle.w	ip, r0, r1
 8013bac:	186d      	addle	r5, r5, r1
 8013bae:	005b      	lsls	r3, r3, #1
 8013bb0:	f1be 0e01 	subs.w	lr, lr, #1
 8013bb4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8013bb8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8013bbc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8013bc0:	d1ed      	bne.n	8013b9e <__ieee754_sqrt+0x8a>
 8013bc2:	4674      	mov	r4, lr
 8013bc4:	2720      	movs	r7, #32
 8013bc6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8013bca:	4563      	cmp	r3, ip
 8013bcc:	eb01 000e 	add.w	r0, r1, lr
 8013bd0:	dc02      	bgt.n	8013bd8 <__ieee754_sqrt+0xc4>
 8013bd2:	d113      	bne.n	8013bfc <__ieee754_sqrt+0xe8>
 8013bd4:	4290      	cmp	r0, r2
 8013bd6:	d811      	bhi.n	8013bfc <__ieee754_sqrt+0xe8>
 8013bd8:	2800      	cmp	r0, #0
 8013bda:	eb00 0e01 	add.w	lr, r0, r1
 8013bde:	da57      	bge.n	8013c90 <__ieee754_sqrt+0x17c>
 8013be0:	f1be 0f00 	cmp.w	lr, #0
 8013be4:	db54      	blt.n	8013c90 <__ieee754_sqrt+0x17c>
 8013be6:	f10c 0801 	add.w	r8, ip, #1
 8013bea:	eba3 030c 	sub.w	r3, r3, ip
 8013bee:	4290      	cmp	r0, r2
 8013bf0:	bf88      	it	hi
 8013bf2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8013bf6:	1a12      	subs	r2, r2, r0
 8013bf8:	440c      	add	r4, r1
 8013bfa:	46c4      	mov	ip, r8
 8013bfc:	005b      	lsls	r3, r3, #1
 8013bfe:	3f01      	subs	r7, #1
 8013c00:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8013c04:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8013c08:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8013c0c:	d1dd      	bne.n	8013bca <__ieee754_sqrt+0xb6>
 8013c0e:	4313      	orrs	r3, r2
 8013c10:	d01b      	beq.n	8013c4a <__ieee754_sqrt+0x136>
 8013c12:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8013cc0 <__ieee754_sqrt+0x1ac>
 8013c16:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8013cc4 <__ieee754_sqrt+0x1b0>
 8013c1a:	e9da 0100 	ldrd	r0, r1, [sl]
 8013c1e:	e9db 2300 	ldrd	r2, r3, [fp]
 8013c22:	f7ec fb09 	bl	8000238 <__aeabi_dsub>
 8013c26:	e9da 8900 	ldrd	r8, r9, [sl]
 8013c2a:	4602      	mov	r2, r0
 8013c2c:	460b      	mov	r3, r1
 8013c2e:	4640      	mov	r0, r8
 8013c30:	4649      	mov	r1, r9
 8013c32:	f7ec ff35 	bl	8000aa0 <__aeabi_dcmple>
 8013c36:	b140      	cbz	r0, 8013c4a <__ieee754_sqrt+0x136>
 8013c38:	f1b4 3fff 	cmp.w	r4, #4294967295
 8013c3c:	e9da 0100 	ldrd	r0, r1, [sl]
 8013c40:	e9db 2300 	ldrd	r2, r3, [fp]
 8013c44:	d126      	bne.n	8013c94 <__ieee754_sqrt+0x180>
 8013c46:	3501      	adds	r5, #1
 8013c48:	463c      	mov	r4, r7
 8013c4a:	106a      	asrs	r2, r5, #1
 8013c4c:	0863      	lsrs	r3, r4, #1
 8013c4e:	07e9      	lsls	r1, r5, #31
 8013c50:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8013c54:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8013c58:	bf48      	it	mi
 8013c5a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8013c5e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8013c62:	461c      	mov	r4, r3
 8013c64:	e76d      	b.n	8013b42 <__ieee754_sqrt+0x2e>
 8013c66:	0ad3      	lsrs	r3, r2, #11
 8013c68:	3815      	subs	r0, #21
 8013c6a:	0552      	lsls	r2, r2, #21
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d0fa      	beq.n	8013c66 <__ieee754_sqrt+0x152>
 8013c70:	02dc      	lsls	r4, r3, #11
 8013c72:	d50a      	bpl.n	8013c8a <__ieee754_sqrt+0x176>
 8013c74:	f1c1 0420 	rsb	r4, r1, #32
 8013c78:	fa22 f404 	lsr.w	r4, r2, r4
 8013c7c:	1e4d      	subs	r5, r1, #1
 8013c7e:	408a      	lsls	r2, r1
 8013c80:	4323      	orrs	r3, r4
 8013c82:	1b41      	subs	r1, r0, r5
 8013c84:	e772      	b.n	8013b6c <__ieee754_sqrt+0x58>
 8013c86:	4608      	mov	r0, r1
 8013c88:	e7f0      	b.n	8013c6c <__ieee754_sqrt+0x158>
 8013c8a:	005b      	lsls	r3, r3, #1
 8013c8c:	3101      	adds	r1, #1
 8013c8e:	e7ef      	b.n	8013c70 <__ieee754_sqrt+0x15c>
 8013c90:	46e0      	mov	r8, ip
 8013c92:	e7aa      	b.n	8013bea <__ieee754_sqrt+0xd6>
 8013c94:	f7ec fad2 	bl	800023c <__adddf3>
 8013c98:	e9da 8900 	ldrd	r8, r9, [sl]
 8013c9c:	4602      	mov	r2, r0
 8013c9e:	460b      	mov	r3, r1
 8013ca0:	4640      	mov	r0, r8
 8013ca2:	4649      	mov	r1, r9
 8013ca4:	f7ec fef2 	bl	8000a8c <__aeabi_dcmplt>
 8013ca8:	b120      	cbz	r0, 8013cb4 <__ieee754_sqrt+0x1a0>
 8013caa:	1ca0      	adds	r0, r4, #2
 8013cac:	bf08      	it	eq
 8013cae:	3501      	addeq	r5, #1
 8013cb0:	3402      	adds	r4, #2
 8013cb2:	e7ca      	b.n	8013c4a <__ieee754_sqrt+0x136>
 8013cb4:	3401      	adds	r4, #1
 8013cb6:	f024 0401 	bic.w	r4, r4, #1
 8013cba:	e7c6      	b.n	8013c4a <__ieee754_sqrt+0x136>
 8013cbc:	7ff00000 	.word	0x7ff00000
 8013cc0:	20000340 	.word	0x20000340
 8013cc4:	20000348 	.word	0x20000348

08013cc8 <_init>:
 8013cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cca:	bf00      	nop
 8013ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cce:	bc08      	pop	{r3}
 8013cd0:	469e      	mov	lr, r3
 8013cd2:	4770      	bx	lr

08013cd4 <_fini>:
 8013cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cd6:	bf00      	nop
 8013cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cda:	bc08      	pop	{r3}
 8013cdc:	469e      	mov	lr, r3
 8013cde:	4770      	bx	lr
