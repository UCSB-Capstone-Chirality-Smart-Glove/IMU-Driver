
BT-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017588  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001268  080176c8  080176c8  000276c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018930  08018930  00028930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018938  08018938  00028938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801893c  0801893c  0002893c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000348  20000008  08018940  00030008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000041  20000350  08018c88  00030350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000394  08018cc9  00030394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f84  200003a8  08018cda  000303a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000332c  08018cda  0003332c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00050000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00050000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08018cda  000401e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .comment      00000043  00000000  00000000  00040a97  2**0
                  CONTENTS, READONLY
 16 .debug_info   0004c226  00000000  00000000  00040ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00008c17  00000000  00000000  0008cd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00004010  00000000  00000000  00095918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00003186  00000000  00000000  00099928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000345bc  00000000  00000000  0009caae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0004aa61  00000000  00000000  000d106a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0011f244  00000000  00000000  0011bacb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  000123ec  00000000  00000000  0023ad10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000052  00000000  00000000  0024d0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200003a8 	.word	0x200003a8
 800015c:	00000000 	.word	0x00000000
 8000160:	080176b0 	.word	0x080176b0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200003ac 	.word	0x200003ac
 800017c:	080176b0 	.word	0x080176b0

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000ef4:	b5b0      	push	{r4, r5, r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <APPD_EnableCPU2+0x34>)
 8000efc:	1d3c      	adds	r4, r7, #4
 8000efe:	461d      	mov	r5, r3
 8000f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f08:	c403      	stmia	r4!, {r0, r1}
 8000f0a:	8022      	strh	r2, [r4, #0]
 8000f0c:	3402      	adds	r4, #2
 8000f0e:	0c13      	lsrs	r3, r2, #16
 8000f10:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000f12:	f00d ff23 	bl	800ed5c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f00d fa26 	bl	800e36a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000f1e:	bf00      	nop
}
 8000f20:	3720      	adds	r7, #32
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bdb0      	pop	{r4, r5, r7, pc}
 8000f26:	bf00      	nop
 8000f28:	080176c8 	.word	0x080176c8

08000f2c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <LL_C2_PWR_SetPowerMode+0x28>)
 8000f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f3a:	f023 0207 	bic.w	r2, r3, #7
 8000f3e:	4905      	ldr	r1, [pc, #20]	; (8000f54 <LL_C2_PWR_SetPowerMode+0x28>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	58000400 	.word	0x58000400

08000f58 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <LL_EXTI_EnableIT_32_63+0x24>)
 8000f62:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000f66:	4905      	ldr	r1, [pc, #20]	; (8000f7c <LL_EXTI_EnableIT_32_63+0x24>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	58000800 	.word	0x58000800

08000f80 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000f8e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f9a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	cafecafe 	.word	0xcafecafe

08000fbc <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000fce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	608b      	str	r3, [r1, #8]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <LL_DBGMCU_GetDeviceID+0x18>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e0042000 	.word	0xe0042000

08001000 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <LL_DBGMCU_GetRevisionID+0x18>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	0c1b      	lsrs	r3, r3, #16
 800100a:	b29b      	uxth	r3, r3
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e0042000 	.word	0xe0042000

0800101c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	22ff      	movs	r2, #255	; 0xff
 8001028:	625a      	str	r2, [r3, #36]	; 0x24
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	22ca      	movs	r2, #202	; 0xca
 8001042:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2253      	movs	r2, #83	; 0x53
 8001048:	625a      	str	r2, [r3, #36]	; 0x24
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f023 0207 	bic.w	r2, r3, #7
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	431a      	orrs	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	609a      	str	r2, [r3, #8]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <MX_APPE_Config+0x18>)
 8001082:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001086:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001088:	f000 f824 	bl	80010d4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800108c:	f000 f829 	bl	80010e2 <Config_HSE>

  return;
 8001090:	bf00      	nop
}
 8001092:	bd80      	pop	{r7, pc}
 8001094:	58004000 	.word	0x58004000

08001098 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 800109c:	f000 f835 	bl	800110a <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80010a0:	f000 f84e 	bl	8001140 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80010a4:	4903      	ldr	r1, [pc, #12]	; (80010b4 <MX_APPE_Init+0x1c>)
 80010a6:	2000      	movs	r0, #0
 80010a8:	f005 f954 	bl	8006354 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80010ac:	f000 f856 	bl	800115c <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80010b0:	bf00      	nop
}
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20001100 	.word	0x20001100

080010b8 <Init_Smps>:

void Init_Smps(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80010bc:	bf00      	nop
}
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <Init_Exti>:

void Init_Exti(void)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80010ca:	2050      	movs	r0, #80	; 0x50
 80010cc:	f7ff ff44 	bl	8000f58 <LL_EXTI_EnableIT_32_63>

  return;
 80010d0:	bf00      	nop
}
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80010d8:	bf00      	nop
}
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80010e8:	2000      	movs	r0, #0
 80010ea:	f00d fe9f 	bl	800ee2c <OTP_Read>
 80010ee:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d005      	beq.n	8001102 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	799b      	ldrb	r3, [r3, #6]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ff40 	bl	8000f80 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001100:	bf00      	nop
 8001102:	bf00      	nop
}
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <System_Init>:

static void System_Init(void)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	af00      	add	r7, sp, #0
  Init_Smps();
 800110e:	f7ff ffd3 	bl	80010b8 <Init_Smps>

  Init_Exti();
 8001112:	f7ff ffd8 	bl	80010c6 <Init_Exti>

  Init_Rtc();
 8001116:	f000 f803 	bl	8001120 <Init_Rtc>

  return;
 800111a:	bf00      	nop
}
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001124:	4805      	ldr	r0, [pc, #20]	; (800113c <Init_Rtc+0x1c>)
 8001126:	f7ff ff86 	bl	8001036 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800112a:	2100      	movs	r1, #0
 800112c:	4803      	ldr	r0, [pc, #12]	; (800113c <Init_Rtc+0x1c>)
 800112e:	f7ff ff92 	bl	8001056 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001132:	4802      	ldr	r0, [pc, #8]	; (800113c <Init_Rtc+0x1c>)
 8001134:	f7ff ff72 	bl	800101c <LL_RTC_EnableWriteProtection>

  return;
 8001138:	bf00      	nop
}
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40002800 	.word	0x40002800

08001140 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001144:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001148:	f7ff ff38 	bl	8000fbc <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800114c:	f012 fc42 	bl	80139d4 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001150:	2004      	movs	r0, #4
 8001152:	f7ff feeb 	bl	8000f2c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001156:	bf00      	nop
}
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 8001162:	f00d fcb7 	bl	800ead4 <TL_Init>

  MtxShciId = osMutexNew(NULL);
 8001166:	2000      	movs	r0, #0
 8001168:	f00e f950 	bl	800f40c <osMutexNew>
 800116c:	4603      	mov	r3, r0
 800116e:	4a17      	ldr	r2, [pc, #92]	; (80011cc <appe_Tl_Init+0x70>)
 8001170:	6013      	str	r3, [r2, #0]
  SemShciId = osSemaphoreNew(1, 0, NULL); /*< Create the semaphore and make it busy at initialization */
 8001172:	2200      	movs	r2, #0
 8001174:	2100      	movs	r1, #0
 8001176:	2001      	movs	r0, #1
 8001178:	f00e fa56 	bl	800f628 <osSemaphoreNew>
 800117c:	4603      	mov	r3, r0
 800117e:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <appe_Tl_Init+0x74>)
 8001180:	6013      	str	r3, [r2, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 8001182:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <appe_Tl_Init+0x78>)
 8001184:	2100      	movs	r1, #0
 8001186:	4814      	ldr	r0, [pc, #80]	; (80011d8 <appe_Tl_Init+0x7c>)
 8001188:	f00d ffc4 	bl	800f114 <osThreadNew>
 800118c:	4603      	mov	r3, r0
 800118e:	4a13      	ldr	r2, [pc, #76]	; (80011dc <appe_Tl_Init+0x80>)
 8001190:	6013      	str	r3, [r2, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <appe_Tl_Init+0x84>)
 8001194:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <appe_Tl_Init+0x88>)
 8001198:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800119a:	463b      	mov	r3, r7
 800119c:	4619      	mov	r1, r3
 800119e:	4812      	ldr	r0, [pc, #72]	; (80011e8 <appe_Tl_Init+0x8c>)
 80011a0:	f00d fb5a 	bl	800e858 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <appe_Tl_Init+0x90>)
 80011a6:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <appe_Tl_Init+0x94>)
 80011aa:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <appe_Tl_Init+0x98>)
 80011ae:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80011b0:	f240 533c 	movw	r3, #1340	; 0x53c
 80011b4:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	4618      	mov	r0, r3
 80011bc:	f00d fd5a 	bl	800ec74 <TL_MM_Init>

  TL_Enable();
 80011c0:	f00d fc82 	bl	800eac8 <TL_Enable>

  return;
 80011c4:	bf00      	nop
}
 80011c6:	3720      	adds	r7, #32
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200003c4 	.word	0x200003c4
 80011d0:	200003c8 	.word	0x200003c8
 80011d4:	080183b8 	.word	0x080183b8
 80011d8:	0800134b 	.word	0x0800134b
 80011dc:	200003cc 	.word	0x200003cc
 80011e0:	20030734 	.word	0x20030734
 80011e4:	080011f9 	.word	0x080011f9
 80011e8:	08001239 	.word	0x08001239
 80011ec:	2003094c 	.word	0x2003094c
 80011f0:	20030840 	.word	0x20030840
 80011f4:	200301f8 	.word	0x200301f8

080011f8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  switch (status)
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d002      	beq.n	800120e <APPE_SysStatusNot+0x16>
 8001208:	2b01      	cmp	r3, #1
 800120a:	d008      	beq.n	800121e <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease(MtxShciId);
      break;

    default:
      break;
 800120c:	e00d      	b.n	800122a <APPE_SysStatusNot+0x32>
      osMutexAcquire(MtxShciId, osWaitForever);
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <APPE_SysStatusNot+0x3c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f04f 31ff 	mov.w	r1, #4294967295
 8001216:	4618      	mov	r0, r3
 8001218:	f00e f97e 	bl	800f518 <osMutexAcquire>
      break;
 800121c:	e005      	b.n	800122a <APPE_SysStatusNot+0x32>
      osMutexRelease(MtxShciId);
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <APPE_SysStatusNot+0x3c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f00e f9c3 	bl	800f5ae <osMutexRelease>
      break;
 8001228:	bf00      	nop
  }
  return;
 800122a:	bf00      	nop
}
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200003c4 	.word	0x200003c4

08001238 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	330b      	adds	r3, #11
 8001246:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	b29b      	uxth	r3, r3
 800124e:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8001252:	2b07      	cmp	r3, #7
 8001254:	d81f      	bhi.n	8001296 <APPE_SysUserEvtRx+0x5e>
 8001256:	a201      	add	r2, pc, #4	; (adr r2, 800125c <APPE_SysUserEvtRx+0x24>)
 8001258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800125c:	0800127d 	.word	0x0800127d
 8001260:	0800128f 	.word	0x0800128f
 8001264:	08001297 	.word	0x08001297
 8001268:	08001297 	.word	0x08001297
 800126c:	08001297 	.word	0x08001297
 8001270:	08001297 	.word	0x08001297
 8001274:	08001297 	.word	0x08001297
 8001278:	08001297 	.word	0x08001297
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	4618      	mov	r0, r3
 8001282:	f00d f89f 	bl	800e3c4 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 f81b 	bl	80012c2 <APPE_SysEvtReadyProcessing>
    break;
 800128c:	e004      	b.n	8001298 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 f806 	bl	80012a0 <APPE_SysEvtError>
    break;
 8001294:	e000      	b.n	8001298 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8001296:	bf00      	nop
  }

  return;
 8001298:	bf00      	nop
}
 800129a:	3720      	adds	r7, #32
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	330b      	adds	r3, #11
 80012ae:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	3302      	adds	r3, #2
 80012b4:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80012b6:	bf00      	nop
}
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b08a      	sub	sp, #40	; 0x28
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80012d8:	2300      	movs	r3, #0
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	330b      	adds	r3, #11
 80012e6:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	3302      	adds	r3, #2
 80012ec:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d11d      	bne.n	8001332 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80012f6:	f7ff fdfd 	bl	8000ef4 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80012fa:	230f      	movs	r3, #15
 80012fc:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80012fe:	237f      	movs	r3, #127	; 0x7f
 8001300:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001302:	f7ff fe7d 	bl	8001000 <LL_DBGMCU_GetRevisionID>
 8001306:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8001308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130a:	b29b      	uxth	r3, r3
 800130c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800130e:	f7ff fe69 	bl	8000fe4 <LL_DBGMCU_GetDeviceID>
 8001312:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	b29b      	uxth	r3, r3
 8001318:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800131a:	f107 0308 	add.w	r3, r7, #8
 800131e:	4618      	mov	r0, r3
 8001320:	f00d f83a 	bl	800e398 <SHCI_C2_Config>

    APP_BLE_Init();
 8001324:	f011 fe3e 	bl	8012fa4 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001328:	2100      	movs	r1, #0
 800132a:	2001      	movs	r0, #1
 800132c:	f012 fb64 	bl	80139f8 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001330:	e007      	b.n	8001342 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d103      	bne.n	8001342 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]
  return;
 8001340:	bf00      	nop
 8001342:	bf00      	nop
}
 8001344:	3728      	adds	r7, #40	; 0x28
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8001352:	f04f 32ff 	mov.w	r2, #4294967295
 8001356:	2100      	movs	r1, #0
 8001358:	2001      	movs	r0, #1
 800135a:	f00d ffbb 	bl	800f2d4 <osThreadFlagsWait>
     shci_user_evt_proc();
 800135e:	f00d fa97 	bl	800e890 <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8001362:	e7f6      	b.n	8001352 <ShciUserEvtProcess+0x8>

08001364 <shci_notify_asynch_evt>:
    __WFI();
  }
}

void shci_notify_asynch_evt(void* pdata)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId, 1);
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <shci_notify_asynch_evt+0x1c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2101      	movs	r1, #1
 8001372:	4618      	mov	r0, r3
 8001374:	f00d ff60 	bl	800f238 <osThreadFlagsSet>
  return;
 8001378:	bf00      	nop
}
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200003cc 	.word	0x200003cc

08001384 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease(SemShciId);
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <shci_cmd_resp_release+0x1c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f00e fa25 	bl	800f7e0 <osSemaphoreRelease>
  return;
 8001396:	bf00      	nop
}
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200003c8 	.word	0x200003c8

080013a4 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire(SemShciId, osWaitForever);
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <shci_cmd_resp_wait+0x20>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f04f 31ff 	mov.w	r1, #4294967295
 80013b4:	4618      	mov	r0, r3
 80013b6:	f00e f9c1 	bl	800f73c <osSemaphoreAcquire>
  return;
 80013ba:	bf00      	nop
}
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200003c8 	.word	0x200003c8

080013c8 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <bmi3_init>:
/*!
 * @brief This API is the entry point for bmi3 sensor. It reads and validates the
 * chip-id of the sensor.
 */
int8_t bmi3_init(struct bmi3_dev *dev)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b084      	sub	sp, #16
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to assign chip id */
    uint8_t chip_id[2] = { 0 };
 80013e6:	2300      	movs	r3, #0
 80013e8:	81bb      	strh	r3, [r7, #12]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 feae 	bl	800214c <null_ptr_check>
 80013f0:	4603      	mov	r3, r0
 80013f2:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI3_OK)
 80013f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d10d      	bne.n	8001418 <bmi3_init+0x3a>
    {
        dev->chip_id = 0;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]

        /* An extra dummy byte is read during SPI read */
        if (dev->intf == BMI3_SPI_INTF)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	7a5b      	ldrb	r3, [r3, #9]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d103      	bne.n	8001412 <bmi3_init+0x34>
        {
            dev->dummy_byte = 1;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	72da      	strb	r2, [r3, #11]
 8001410:	e002      	b.n	8001418 <bmi3_init+0x3a>
        }
        else
        {
            dev->dummy_byte = 2;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2202      	movs	r2, #2
 8001416:	72da      	strb	r2, [r3, #11]
        }
    }

    if (rslt == BMI3_OK)
 8001418:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d118      	bne.n	8001452 <bmi3_init+0x74>
    {
        /* Perform soft-reset to bring all register values to their default values */
        rslt = bmi3_soft_reset(dev);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 f8d3 	bl	80015cc <bmi3_soft_reset>
 8001426:	4603      	mov	r3, r0
 8001428:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 800142a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10f      	bne.n	8001452 <bmi3_init+0x74>
        {
            /* Read chip-id of the BMI3 sensor */
            rslt = bmi3_get_regs(BMI3_REG_CHIP_ID, chip_id, 2, dev);
 8001432:	f107 010c 	add.w	r1, r7, #12
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2202      	movs	r2, #2
 800143a:	2000      	movs	r0, #0
 800143c:	f000 f821 	bl	8001482 <bmi3_get_regs>
 8001440:	4603      	mov	r3, r0
 8001442:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI3_OK)
 8001444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <bmi3_init+0x74>
            {
                dev->chip_id = chip_id[0];
 800144c:	7b3a      	ldrb	r2, [r7, #12]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (rslt == BMI3_OK)
 8001452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10d      	bne.n	8001476 <bmi3_init+0x98>
    {
        if (((chip_id[1] & BMI3_REV_ID_MASK) >> BMI3_REV_ID_POS) == BMI3_ENABLE)
 800145a:	7b7b      	ldrb	r3, [r7, #13]
 800145c:	091b      	lsrs	r3, r3, #4
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b01      	cmp	r3, #1
 8001462:	d104      	bne.n	800146e <bmi3_init+0x90>
        {
            dev->accel_bit_width = BMI3_ACC_DP_OFF_XYZ_14_BIT_MASK;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800146a:	839a      	strh	r2, [r3, #28]
 800146c:	e003      	b.n	8001476 <bmi3_init+0x98>
        }
        else
        {
            dev->accel_bit_width = BMI3_ACC_DP_OFF_XYZ_13_BIT_MASK;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001474:	839a      	strh	r2, [r3, #28]
        }
    }

    return rslt;
 8001476:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <bmi3_get_regs>:
 * @note For most of the registers auto address increment applies, with the
 * exception of a few special registers, which trap the address. For e.g.,
 * Register address - 0x03.
 */
int8_t bmi3_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, struct bmi3_dev *dev)
{
 8001482:	b590      	push	{r4, r7, lr}
 8001484:	b0a7      	sub	sp, #156	; 0x9c
 8001486:	af00      	add	r7, sp, #0
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	4603      	mov	r3, r0
 800148e:	73fb      	strb	r3, [r7, #15]
 8001490:	4613      	mov	r3, r2
 8001492:	81bb      	strh	r3, [r7, #12]

    /* Variable to define temporary buffer */
    uint8_t temp_buf[BMI3_MAX_LEN];

    /* Variable to define loop */
    uint16_t index = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 fe56 	bl	800214c <null_ptr_check>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    if ((rslt == BMI3_OK) && (data != NULL))
 80014a6:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d145      	bne.n	800153a <bmi3_get_regs+0xb8>
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d042      	beq.n	800153a <bmi3_get_regs+0xb8>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI3_SPI_INTF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7a5b      	ldrb	r3, [r3, #9]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d103      	bne.n	80014c4 <bmi3_get_regs+0x42>
        {
            reg_addr = (reg_addr | BMI3_SPI_RD_MASK);
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014c2:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, temp_buf, len + dev->dummy_byte, dev->intf_ptr);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691c      	ldr	r4, [r3, #16]
 80014c8:	89bb      	ldrh	r3, [r7, #12]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	7ad2      	ldrb	r2, [r2, #11]
 80014ce:	4413      	add	r3, r2
 80014d0:	461a      	mov	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f107 0114 	add.w	r1, r7, #20
 80014da:	7bf8      	ldrb	r0, [r7, #15]
 80014dc:	47a0      	blx	r4
 80014de:	4603      	mov	r3, r0
 80014e0:	461a      	mov	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	729a      	strb	r2, [r3, #10]
        dev->delay_us(2, dev->intf_ptr);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6852      	ldr	r2, [r2, #4]
 80014ee:	4611      	mov	r1, r2
 80014f0:	2002      	movs	r0, #2
 80014f2:	4798      	blx	r3

        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d119      	bne.n	8001532 <bmi3_get_regs+0xb0>
        {
            /* Read the data from the position next to dummy byte */
            while (index < len)
 80014fe:	e012      	b.n	8001526 <bmi3_get_regs+0xa4>
            {
                data[index] = temp_buf[index + dev->dummy_byte];
 8001500:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	7ad2      	ldrb	r2, [r2, #11]
 8001508:	441a      	add	r2, r3
 800150a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800150e:	68b9      	ldr	r1, [r7, #8]
 8001510:	440b      	add	r3, r1
 8001512:	3298      	adds	r2, #152	; 0x98
 8001514:	443a      	add	r2, r7
 8001516:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 800151a:	701a      	strb	r2, [r3, #0]
                index++;
 800151c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001520:	3301      	adds	r3, #1
 8001522:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
            while (index < len)
 8001526:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 800152a:	89bb      	ldrh	r3, [r7, #12]
 800152c:	429a      	cmp	r2, r3
 800152e:	d3e7      	bcc.n	8001500 <bmi3_get_regs+0x7e>
        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 8001530:	e006      	b.n	8001540 <bmi3_get_regs+0xbe>
            }
        }
        else
        {
            rslt = BMI3_E_COM_FAIL;
 8001532:	23fe      	movs	r3, #254	; 0xfe
 8001534:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 8001538:	e002      	b.n	8001540 <bmi3_get_regs+0xbe>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800153a:	23ff      	movs	r3, #255	; 0xff
 800153c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    }

    return rslt;
 8001540:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 8001544:	4618      	mov	r0, r3
 8001546:	379c      	adds	r7, #156	; 0x9c
 8001548:	46bd      	mov	sp, r7
 800154a:	bd90      	pop	{r4, r7, pc}

0800154c <bmi3_set_regs>:

/*!
 * @brief This API writes data to the given register address of bmi3 sensor.
 */
int8_t bmi3_set_regs(uint8_t reg_addr, const uint8_t *data, uint16_t len, struct bmi3_dev *dev)
{
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	4603      	mov	r3, r0
 8001558:	73fb      	strb	r3, [r7, #15]
 800155a:	4613      	mov	r3, r2
 800155c:	81bb      	strh	r3, [r7, #12]
    /* Variable to store result of API */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 fdf4 	bl	800214c <null_ptr_check>
 8001564:	4603      	mov	r3, r0
 8001566:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (data != NULL))
 8001568:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d125      	bne.n	80015bc <bmi3_set_regs+0x70>
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d022      	beq.n	80015bc <bmi3_set_regs+0x70>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI3_SPI_INTF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	7a5b      	ldrb	r3, [r3, #9]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d103      	bne.n	8001586 <bmi3_set_regs+0x3a>
        {
            reg_addr = (reg_addr & BMI3_SPI_WR_MASK);
 800157e:	7bfb      	ldrb	r3, [r7, #15]
 8001580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001584:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->write(reg_addr, data, len, dev->intf_ptr);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695c      	ldr	r4, [r3, #20]
 800158a:	89ba      	ldrh	r2, [r7, #12]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	7bf8      	ldrb	r0, [r7, #15]
 8001592:	68b9      	ldr	r1, [r7, #8]
 8001594:	47a0      	blx	r4
 8001596:	4603      	mov	r3, r0
 8001598:	461a      	mov	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	729a      	strb	r2, [r3, #10]
        dev->delay_us(2, dev->intf_ptr);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	6852      	ldr	r2, [r2, #4]
 80015a6:	4611      	mov	r1, r2
 80015a8:	2002      	movs	r0, #2
 80015aa:	4798      	blx	r3

        if (dev->intf_rslt != BMI3_INTF_RET_SUCCESS)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d004      	beq.n	80015c0 <bmi3_set_regs+0x74>
        {
            rslt = BMI3_E_COM_FAIL;
 80015b6:	23fe      	movs	r3, #254	; 0xfe
 80015b8:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMI3_INTF_RET_SUCCESS)
 80015ba:	e001      	b.n	80015c0 <bmi3_set_regs+0x74>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80015bc:	23ff      	movs	r3, #255	; 0xff
 80015be:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80015c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	371c      	adds	r7, #28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd90      	pop	{r4, r7, pc}

080015cc <bmi3_soft_reset>:
/*!
 * @brief This API resets bmi3 sensor. All registers are overwritten with
 * their default values.
 */
int8_t bmi3_soft_reset(struct bmi3_dev *dev)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to read the dummy byte */
    uint8_t dummy_byte[2] = { 0 };
 80015d4:	2300      	movs	r3, #0
 80015d6:	83bb      	strh	r3, [r7, #28]

    /* Variable to store feature data array */
    uint8_t feature_data[2] = { 0x2c, 0x01 };
 80015d8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80015dc:	833b      	strh	r3, [r7, #24]

    /* Variable to enable feature engine bit */
    uint8_t feature_engine_en[2] = { BMI3_ENABLE, 0 };
 80015de:	2301      	movs	r3, #1
 80015e0:	82bb      	strh	r3, [r7, #20]

    /* Variable to store status value for feature engine enable */
    uint8_t reg_data[2] = { 0 };
 80015e2:	2300      	movs	r3, #0
 80015e4:	823b      	strh	r3, [r7, #16]

    /* Array variable to store feature IO status */
    uint8_t feature_io_status[2] = { BMI3_ENABLE, 0 };
 80015e6:	2301      	movs	r3, #1
 80015e8:	81bb      	strh	r3, [r7, #12]

    uint8_t loop = 1;
 80015ea:	2301      	movs	r3, #1
 80015ec:	77bb      	strb	r3, [r7, #30]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 fdac 	bl	800214c <null_ptr_check>
 80015f4:	4603      	mov	r3, r0
 80015f6:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMI3_OK)
 80015f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d16f      	bne.n	80016e0 <bmi3_soft_reset+0x114>
    {
        /* Reset bmi3 device */
        rslt = bmi3_set_command_register(BMI3_CMD_SOFT_RESET, dev);
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	f64d 60af 	movw	r0, #57007	; 0xdeaf
 8001606:	f000 f873 	bl	80016f0 <bmi3_set_command_register>
 800160a:	4603      	mov	r3, r0
 800160c:	77fb      	strb	r3, [r7, #31]
        dev->delay_us(BMI3_SOFT_RESET_DELAY, dev->intf_ptr);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6852      	ldr	r2, [r2, #4]
 8001616:	4611      	mov	r1, r2
 8001618:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800161c:	4798      	blx	r3

        /* Performing a dummy read after a soft-reset */
        if ((rslt == BMI3_OK) && (dev->intf == BMI3_SPI_INTF))
 800161e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10c      	bne.n	8001640 <bmi3_soft_reset+0x74>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	7a5b      	ldrb	r3, [r3, #9]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d108      	bne.n	8001640 <bmi3_soft_reset+0x74>
        {
            rslt = bmi3_get_regs(BMI3_REG_CHIP_ID, dummy_byte, 2, dev);
 800162e:	f107 011c 	add.w	r1, r7, #28
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2202      	movs	r2, #2
 8001636:	2000      	movs	r0, #0
 8001638:	f7ff ff23 	bl	8001482 <bmi3_get_regs>
 800163c:	4603      	mov	r3, r0
 800163e:	77fb      	strb	r3, [r7, #31]
        }

        /* Enabling Feature engine */
        if (rslt == BMI3_OK)
 8001640:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d108      	bne.n	800165a <bmi3_soft_reset+0x8e>
        {
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_IO2, feature_data, 2, dev);
 8001648:	f107 0118 	add.w	r1, r7, #24
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2202      	movs	r2, #2
 8001650:	2012      	movs	r0, #18
 8001652:	f7ff ff7b 	bl	800154c <bmi3_set_regs>
 8001656:	4603      	mov	r3, r0
 8001658:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMI3_OK)
 800165a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d108      	bne.n	8001674 <bmi3_soft_reset+0xa8>
        {
            /* Enabling feature status bit */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_IO_STATUS, feature_io_status, 2, dev);
 8001662:	f107 010c 	add.w	r1, r7, #12
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2202      	movs	r2, #2
 800166a:	2014      	movs	r0, #20
 800166c:	f7ff ff6e 	bl	800154c <bmi3_set_regs>
 8001670:	4603      	mov	r3, r0
 8001672:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMI3_OK)
 8001674:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d108      	bne.n	800168e <bmi3_soft_reset+0xc2>
        {
            /* Enable feature engine bit */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_CTRL, feature_engine_en, 2, dev);
 800167c:	f107 0114 	add.w	r1, r7, #20
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2202      	movs	r2, #2
 8001684:	2040      	movs	r0, #64	; 0x40
 8001686:	f7ff ff61 	bl	800154c <bmi3_set_regs>
 800168a:	4603      	mov	r3, r0
 800168c:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMI3_OK)
 800168e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d124      	bne.n	80016e0 <bmi3_soft_reset+0x114>
        {
            /* Checking the status bit for feature engine enable */
            while (loop <= 10)
 8001696:	e020      	b.n	80016da <bmi3_soft_reset+0x10e>
            {
                dev->delay_us(100000, dev->intf_ptr);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6852      	ldr	r2, [r2, #4]
 80016a0:	4611      	mov	r1, r2
 80016a2:	4812      	ldr	r0, [pc, #72]	; (80016ec <bmi3_soft_reset+0x120>)
 80016a4:	4798      	blx	r3

                rslt = bmi3_get_regs(BMI3_REG_FEATURE_IO1, reg_data, 2, dev);
 80016a6:	f107 0110 	add.w	r1, r7, #16
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2202      	movs	r2, #2
 80016ae:	2011      	movs	r0, #17
 80016b0:	f7ff fee7 	bl	8001482 <bmi3_get_regs>
 80016b4:	4603      	mov	r3, r0
 80016b6:	77fb      	strb	r3, [r7, #31]

                if (rslt == BMI3_OK)
 80016b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d109      	bne.n	80016d4 <bmi3_soft_reset+0x108>
                {
                    if (reg_data[0] & BMI3_FEATURE_ENGINE_ENABLE_MASK)
 80016c0:	7c3b      	ldrb	r3, [r7, #16]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d002      	beq.n	80016d0 <bmi3_soft_reset+0x104>
                    {
                        rslt = BMI3_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	77fb      	strb	r3, [r7, #31]

                        break;
 80016ce:	e007      	b.n	80016e0 <bmi3_soft_reset+0x114>
                    }
                    else
                    {
                        rslt = BMI3_E_FEATURE_ENGINE_STATUS;
 80016d0:	23f2      	movs	r3, #242	; 0xf2
 80016d2:	77fb      	strb	r3, [r7, #31]
                    }
                }

                loop++;
 80016d4:	7fbb      	ldrb	r3, [r7, #30]
 80016d6:	3301      	adds	r3, #1
 80016d8:	77bb      	strb	r3, [r7, #30]
            while (loop <= 10)
 80016da:	7fbb      	ldrb	r3, [r7, #30]
 80016dc:	2b0a      	cmp	r3, #10
 80016de:	d9db      	bls.n	8001698 <bmi3_soft_reset+0xcc>
            }
        }
    }

    return rslt;
 80016e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3720      	adds	r7, #32
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	000186a0 	.word	0x000186a0

080016f0 <bmi3_set_command_register>:

/*!
 * @brief This API writes the available sensor specific commands to the sensor.
 */
int8_t bmi3_set_command_register(uint16_t command, struct bmi3_dev *dev)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	6039      	str	r1, [r7, #0]
 80016fa:	80fb      	strh	r3, [r7, #6]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array variable to store command value */
    uint8_t reg_data[2] = { 0 };
 80016fc:	2300      	movs	r3, #0
 80016fe:	81bb      	strh	r3, [r7, #12]

    reg_data[0] = (uint8_t)(command & BMI3_SET_LOW_BYTE);
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	733b      	strb	r3, [r7, #12]
    reg_data[1] = (uint8_t)((command & BMI3_SET_HIGH_BYTE) >> 8);
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	b29b      	uxth	r3, r3
 800170c:	b2db      	uxtb	r3, r3
 800170e:	737b      	strb	r3, [r7, #13]

    /* Set the command in the command register */
    rslt = bmi3_set_regs(BMI3_REG_CMD, reg_data, 2, dev);
 8001710:	f107 010c 	add.w	r1, r7, #12
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	2202      	movs	r2, #2
 8001718:	207e      	movs	r0, #126	; 0x7e
 800171a:	f7ff ff17 	bl	800154c <bmi3_set_regs>
 800171e:	4603      	mov	r3, r0
 8001720:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8001722:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <bmi3_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi3_set_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	460b      	mov	r3, r1
 800173a:	607a      	str	r2, [r7, #4]
 800173c:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 fd04 	bl	800214c <null_ptr_check>
 8001744:	4603      	mov	r3, r0
 8001746:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 8001748:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800174c:	2b00      	cmp	r3, #0
 800174e:	f040 80f1 	bne.w	8001934 <bmi3_set_sensor_config+0x204>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 80ed 	beq.w	8001934 <bmi3_set_sensor_config+0x204>
    {
        for (loop = 0; loop < n_sens; loop++)
 800175a:	2300      	movs	r3, #0
 800175c:	75bb      	strb	r3, [r7, #22]
 800175e:	e0e3      	b.n	8001928 <bmi3_set_sensor_config+0x1f8>
        {
            switch (sens_cfg[loop].type)
 8001760:	7dbb      	ldrb	r3, [r7, #22]
 8001762:	222e      	movs	r2, #46	; 0x2e
 8001764:	fb02 f303 	mul.w	r3, r2, r3
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	4413      	add	r3, r2
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b0c      	cmp	r3, #12
 8001770:	f200 80d4 	bhi.w	800191c <bmi3_set_sensor_config+0x1ec>
 8001774:	a201      	add	r2, pc, #4	; (adr r2, 800177c <bmi3_set_sensor_config+0x4c>)
 8001776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177a:	bf00      	nop
 800177c:	080017b1 	.word	0x080017b1
 8001780:	080017cd 	.word	0x080017cd
 8001784:	08001821 	.word	0x08001821
 8001788:	080017e9 	.word	0x080017e9
 800178c:	08001805 	.word	0x08001805
 8001790:	08001891 	.word	0x08001891
 8001794:	08001859 	.word	0x08001859
 8001798:	08001875 	.word	0x08001875
 800179c:	0800183d 	.word	0x0800183d
 80017a0:	080018ad 	.word	0x080018ad
 80017a4:	080018c9 	.word	0x080018c9
 80017a8:	080018e5 	.word	0x080018e5
 80017ac:	08001901 	.word	0x08001901
            {
                case BMI3_ACCEL:
                    rslt = set_accel_config(&sens_cfg[loop].cfg.acc, dev);
 80017b0:	7dbb      	ldrb	r3, [r7, #22]
 80017b2:	222e      	movs	r2, #46	; 0x2e
 80017b4:	fb02 f303 	mul.w	r3, r2, r3
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	4413      	add	r3, r2
 80017bc:	3302      	adds	r3, #2
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 f9cb 	bl	8001b5c <set_accel_config>
 80017c6:	4603      	mov	r3, r0
 80017c8:	75fb      	strb	r3, [r7, #23]
                    break;
 80017ca:	e0aa      	b.n	8001922 <bmi3_set_sensor_config+0x1f2>

                case BMI3_GYRO:
                    rslt = set_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 80017cc:	7dbb      	ldrb	r3, [r7, #22]
 80017ce:	222e      	movs	r2, #46	; 0x2e
 80017d0:	fb02 f303 	mul.w	r3, r2, r3
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	4413      	add	r3, r2
 80017d8:	3302      	adds	r3, #2
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 fb60 	bl	8001ea2 <set_gyro_config>
 80017e2:	4603      	mov	r3, r0
 80017e4:	75fb      	strb	r3, [r7, #23]
                    break;
 80017e6:	e09c      	b.n	8001922 <bmi3_set_sensor_config+0x1f2>

                case BMI3_ANY_MOTION:
                    rslt = set_any_motion_config(&sens_cfg[loop].cfg.any_motion, dev);
 80017e8:	7dbb      	ldrb	r3, [r7, #22]
 80017ea:	222e      	movs	r2, #46	; 0x2e
 80017ec:	fb02 f303 	mul.w	r3, r2, r3
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	4413      	add	r3, r2
 80017f4:	3302      	adds	r3, #2
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 fd5b 	bl	80022b4 <set_any_motion_config>
 80017fe:	4603      	mov	r3, r0
 8001800:	75fb      	strb	r3, [r7, #23]
                    break;
 8001802:	e08e      	b.n	8001922 <bmi3_set_sensor_config+0x1f2>

                case BMI3_NO_MOTION:
                    rslt = set_no_motion_config(&sens_cfg[loop].cfg.no_motion, dev);
 8001804:	7dbb      	ldrb	r3, [r7, #22]
 8001806:	222e      	movs	r2, #46	; 0x2e
 8001808:	fb02 f303 	mul.w	r3, r2, r3
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	4413      	add	r3, r2
 8001810:	3302      	adds	r3, #2
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	4618      	mov	r0, r3
 8001816:	f000 fec4 	bl	80025a2 <set_no_motion_config>
 800181a:	4603      	mov	r3, r0
 800181c:	75fb      	strb	r3, [r7, #23]
                    break;
 800181e:	e080      	b.n	8001922 <bmi3_set_sensor_config+0x1f2>

                case BMI3_SIG_MOTION:
                    rslt = set_sig_motion_config(&sens_cfg[loop].cfg.sig_motion, dev);
 8001820:	7dbb      	ldrb	r3, [r7, #22]
 8001822:	222e      	movs	r2, #46	; 0x2e
 8001824:	fb02 f303 	mul.w	r3, r2, r3
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	3302      	adds	r3, #2
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4618      	mov	r0, r3
 8001832:	f001 f921 	bl	8002a78 <set_sig_motion_config>
 8001836:	4603      	mov	r3, r0
 8001838:	75fb      	strb	r3, [r7, #23]
                    break;
 800183a:	e072      	b.n	8001922 <bmi3_set_sensor_config+0x1f2>

                case BMI3_FLAT:
                    rslt = set_flat_config(&sens_cfg[loop].cfg.flat, dev);
 800183c:	7dbb      	ldrb	r3, [r7, #22]
 800183e:	222e      	movs	r2, #46	; 0x2e
 8001840:	fb02 f303 	mul.w	r3, r2, r3
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	4413      	add	r3, r2
 8001848:	3302      	adds	r3, #2
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	f001 f801 	bl	8002854 <set_flat_config>
 8001852:	4603      	mov	r3, r0
 8001854:	75fb      	strb	r3, [r7, #23]
                    break;
 8001856:	e064      	b.n	8001922 <bmi3_set_sensor_config+0x1f2>

                case BMI3_TILT:
                    rslt = set_tilt_config(&sens_cfg[loop].cfg.tilt, dev);
 8001858:	7dbb      	ldrb	r3, [r7, #22]
 800185a:	222e      	movs	r2, #46	; 0x2e
 800185c:	fb02 f303 	mul.w	r3, r2, r3
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	4413      	add	r3, r2
 8001864:	3302      	adds	r3, #2
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4618      	mov	r0, r3
 800186a:	f001 fa39 	bl	8002ce0 <set_tilt_config>
 800186e:	4603      	mov	r3, r0
 8001870:	75fb      	strb	r3, [r7, #23]
                    break;
 8001872:	e056      	b.n	8001922 <bmi3_set_sensor_config+0x1f2>

                case BMI3_ORIENTATION:
                    rslt = set_orientation_config(&sens_cfg[loop].cfg.orientation, dev);
 8001874:	7dbb      	ldrb	r3, [r7, #22]
 8001876:	222e      	movs	r2, #46	; 0x2e
 8001878:	fb02 f303 	mul.w	r3, r2, r3
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	4413      	add	r3, r2
 8001880:	3302      	adds	r3, #2
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4618      	mov	r0, r3
 8001886:	f001 fb1a 	bl	8002ebe <set_orientation_config>
 800188a:	4603      	mov	r3, r0
 800188c:	75fb      	strb	r3, [r7, #23]
                    break;
 800188e:	e048      	b.n	8001922 <bmi3_set_sensor_config+0x1f2>

                case BMI3_STEP_COUNTER:
                    rslt = set_step_config(&sens_cfg[loop].cfg.step_counter, dev);
 8001890:	7dbb      	ldrb	r3, [r7, #22]
 8001892:	222e      	movs	r2, #46	; 0x2e
 8001894:	fb02 f303 	mul.w	r3, r2, r3
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	4413      	add	r3, r2
 800189c:	3302      	adds	r3, #2
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f001 fdce 	bl	8003442 <set_step_config>
 80018a6:	4603      	mov	r3, r0
 80018a8:	75fb      	strb	r3, [r7, #23]
                    break;
 80018aa:	e03a      	b.n	8001922 <bmi3_set_sensor_config+0x1f2>

                case BMI3_TAP:
                    rslt = set_tap_config(&sens_cfg[loop].cfg.tap, dev);
 80018ac:	7dbb      	ldrb	r3, [r7, #22]
 80018ae:	222e      	movs	r2, #46	; 0x2e
 80018b0:	fb02 f303 	mul.w	r3, r2, r3
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	4413      	add	r3, r2
 80018b8:	3302      	adds	r3, #2
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	4618      	mov	r0, r3
 80018be:	f002 f910 	bl	8003ae2 <set_tap_config>
 80018c2:	4603      	mov	r3, r0
 80018c4:	75fb      	strb	r3, [r7, #23]
                    break;
 80018c6:	e02c      	b.n	8001922 <bmi3_set_sensor_config+0x1f2>

                case BMI3_ALT_ACCEL:
                    rslt = set_alternate_accel_config(&sens_cfg[loop].cfg.alt_acc, dev);
 80018c8:	7dbb      	ldrb	r3, [r7, #22]
 80018ca:	222e      	movs	r2, #46	; 0x2e
 80018cc:	fb02 f303 	mul.w	r3, r2, r3
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	4413      	add	r3, r2
 80018d4:	3302      	adds	r3, #2
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4618      	mov	r0, r3
 80018da:	f002 fa0a 	bl	8003cf2 <set_alternate_accel_config>
 80018de:	4603      	mov	r3, r0
 80018e0:	75fb      	strb	r3, [r7, #23]
                    break;
 80018e2:	e01e      	b.n	8001922 <bmi3_set_sensor_config+0x1f2>

                case BMI3_ALT_GYRO:
                    rslt = set_alternate_gyro_config(&sens_cfg[loop].cfg.alt_gyr, dev);
 80018e4:	7dbb      	ldrb	r3, [r7, #22]
 80018e6:	222e      	movs	r2, #46	; 0x2e
 80018e8:	fb02 f303 	mul.w	r3, r2, r3
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	3302      	adds	r3, #2
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f002 fa86 	bl	8003e06 <set_alternate_gyro_config>
 80018fa:	4603      	mov	r3, r0
 80018fc:	75fb      	strb	r3, [r7, #23]
                    break;
 80018fe:	e010      	b.n	8001922 <bmi3_set_sensor_config+0x1f2>

                case BMI3_ALT_AUTO_CONFIG:
                    rslt = set_alternate_auto_config(&sens_cfg[loop].cfg.alt_auto_cfg, dev);
 8001900:	7dbb      	ldrb	r3, [r7, #22]
 8001902:	222e      	movs	r2, #46	; 0x2e
 8001904:	fb02 f303 	mul.w	r3, r2, r3
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	3302      	adds	r3, #2
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	4618      	mov	r0, r3
 8001912:	f002 fb02 	bl	8003f1a <set_alternate_auto_config>
 8001916:	4603      	mov	r3, r0
 8001918:	75fb      	strb	r3, [r7, #23]
                    break;
 800191a:	e002      	b.n	8001922 <bmi3_set_sensor_config+0x1f2>

                default:
                    rslt = BMI3_E_INVALID_SENSOR;
 800191c:	23fa      	movs	r3, #250	; 0xfa
 800191e:	75fb      	strb	r3, [r7, #23]
                    break;
 8001920:	bf00      	nop
        for (loop = 0; loop < n_sens; loop++)
 8001922:	7dbb      	ldrb	r3, [r7, #22]
 8001924:	3301      	adds	r3, #1
 8001926:	75bb      	strb	r3, [r7, #22]
 8001928:	7dba      	ldrb	r2, [r7, #22]
 800192a:	7afb      	ldrb	r3, [r7, #11]
 800192c:	429a      	cmp	r2, r3
 800192e:	f4ff af17 	bcc.w	8001760 <bmi3_set_sensor_config+0x30>
    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 8001932:	e001      	b.n	8001938 <bmi3_set_sensor_config+0x208>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001934:	23ff      	movs	r3, #255	; 0xff
 8001936:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001938:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <bmi3_get_sensor_config>:

/*!
 * @brief This API gets the sensor/feature configuration.
 */
int8_t bmi3_get_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	460b      	mov	r3, r1
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	72fb      	strb	r3, [r7, #11]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to define loop */
    uint8_t loop = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 fbf8 	bl	800214c <null_ptr_check>
 800195c:	4603      	mov	r3, r0
 800195e:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 8001960:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001964:	2b00      	cmp	r3, #0
 8001966:	f040 80f1 	bne.w	8001b4c <bmi3_get_sensor_config+0x208>
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80ed 	beq.w	8001b4c <bmi3_get_sensor_config+0x208>
    {
        for (loop = 0; loop < n_sens; loop++)
 8001972:	2300      	movs	r3, #0
 8001974:	75bb      	strb	r3, [r7, #22]
 8001976:	e0e3      	b.n	8001b40 <bmi3_get_sensor_config+0x1fc>
        {
            switch (sens_cfg[loop].type)
 8001978:	7dbb      	ldrb	r3, [r7, #22]
 800197a:	222e      	movs	r2, #46	; 0x2e
 800197c:	fb02 f303 	mul.w	r3, r2, r3
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	4413      	add	r3, r2
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b0c      	cmp	r3, #12
 8001988:	f200 80d4 	bhi.w	8001b34 <bmi3_get_sensor_config+0x1f0>
 800198c:	a201      	add	r2, pc, #4	; (adr r2, 8001994 <bmi3_get_sensor_config+0x50>)
 800198e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001992:	bf00      	nop
 8001994:	080019c9 	.word	0x080019c9
 8001998:	080019e5 	.word	0x080019e5
 800199c:	08001a39 	.word	0x08001a39
 80019a0:	08001a01 	.word	0x08001a01
 80019a4:	08001a1d 	.word	0x08001a1d
 80019a8:	08001aa9 	.word	0x08001aa9
 80019ac:	08001a71 	.word	0x08001a71
 80019b0:	08001a8d 	.word	0x08001a8d
 80019b4:	08001a55 	.word	0x08001a55
 80019b8:	08001ac5 	.word	0x08001ac5
 80019bc:	08001ae1 	.word	0x08001ae1
 80019c0:	08001afd 	.word	0x08001afd
 80019c4:	08001b19 	.word	0x08001b19
            {
                case BMI3_ACCEL:
                    rslt = get_accel_config(&sens_cfg[loop].cfg.acc, dev);
 80019c8:	7dbb      	ldrb	r3, [r7, #22]
 80019ca:	222e      	movs	r2, #46	; 0x2e
 80019cc:	fb02 f303 	mul.w	r3, r2, r3
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	4413      	add	r3, r2
 80019d4:	3302      	adds	r3, #2
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 f975 	bl	8001cc8 <get_accel_config>
 80019de:	4603      	mov	r3, r0
 80019e0:	75fb      	strb	r3, [r7, #23]
                    break;
 80019e2:	e0aa      	b.n	8001b3a <bmi3_get_sensor_config+0x1f6>

                case BMI3_GYRO:
                    rslt = get_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 80019e4:	7dbb      	ldrb	r3, [r7, #22]
 80019e6:	222e      	movs	r2, #46	; 0x2e
 80019e8:	fb02 f303 	mul.w	r3, r2, r3
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	4413      	add	r3, r2
 80019f0:	3302      	adds	r3, #2
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 fb5c 	bl	80020b2 <get_gyro_config>
 80019fa:	4603      	mov	r3, r0
 80019fc:	75fb      	strb	r3, [r7, #23]
                    break;
 80019fe:	e09c      	b.n	8001b3a <bmi3_get_sensor_config+0x1f6>

                case BMI3_ANY_MOTION:
                    rslt = get_any_motion_config(&sens_cfg[loop].cfg.any_motion, dev);
 8001a00:	7dbb      	ldrb	r3, [r7, #22]
 8001a02:	222e      	movs	r2, #46	; 0x2e
 8001a04:	fb02 f303 	mul.w	r3, r2, r3
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 fbbb 	bl	800218c <get_any_motion_config>
 8001a16:	4603      	mov	r3, r0
 8001a18:	75fb      	strb	r3, [r7, #23]
                    break;
 8001a1a:	e08e      	b.n	8001b3a <bmi3_get_sensor_config+0x1f6>

                case BMI3_NO_MOTION:
                    rslt = get_no_motion_config(&sens_cfg[loop].cfg.no_motion, dev);
 8001a1c:	7dbb      	ldrb	r3, [r7, #22]
 8001a1e:	222e      	movs	r2, #46	; 0x2e
 8001a20:	fb02 f303 	mul.w	r3, r2, r3
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	3302      	adds	r3, #2
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f000 fd24 	bl	800247a <get_no_motion_config>
 8001a32:	4603      	mov	r3, r0
 8001a34:	75fb      	strb	r3, [r7, #23]
                    break;
 8001a36:	e080      	b.n	8001b3a <bmi3_get_sensor_config+0x1f6>

                case BMI3_SIG_MOTION:
                    rslt = get_sig_motion_config(&sens_cfg[loop].cfg.sig_motion, dev);
 8001a38:	7dbb      	ldrb	r3, [r7, #22]
 8001a3a:	222e      	movs	r2, #46	; 0x2e
 8001a3c:	fb02 f303 	mul.w	r3, r2, r3
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	3302      	adds	r3, #2
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 ff89 	bl	8002960 <get_sig_motion_config>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	75fb      	strb	r3, [r7, #23]
                    break;
 8001a52:	e072      	b.n	8001b3a <bmi3_get_sensor_config+0x1f6>

                case BMI3_FLAT:
                    rslt = get_flat_config(&sens_cfg[loop].cfg.flat, dev);
 8001a54:	7dbb      	ldrb	r3, [r7, #22]
 8001a56:	222e      	movs	r2, #46	; 0x2e
 8001a58:	fb02 f303 	mul.w	r3, r2, r3
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	4413      	add	r3, r2
 8001a60:	3302      	adds	r3, #2
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f000 fe7b 	bl	8002760 <get_flat_config>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	75fb      	strb	r3, [r7, #23]
                    break;
 8001a6e:	e064      	b.n	8001b3a <bmi3_get_sensor_config+0x1f6>

                case BMI3_TILT:
                    rslt = get_tilt_config(&sens_cfg[loop].cfg.tilt, dev);
 8001a70:	7dbb      	ldrb	r3, [r7, #22]
 8001a72:	222e      	movs	r2, #46	; 0x2e
 8001a74:	fb02 f303 	mul.w	r3, r2, r3
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3302      	adds	r3, #2
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f001 f8bf 	bl	8002c04 <get_tilt_config>
 8001a86:	4603      	mov	r3, r0
 8001a88:	75fb      	strb	r3, [r7, #23]
                    break;
 8001a8a:	e056      	b.n	8001b3a <bmi3_get_sensor_config+0x1f6>

                case BMI3_ORIENTATION:
                    rslt = get_orientation_config(&sens_cfg[loop].cfg.orientation, dev);
 8001a8c:	7dbb      	ldrb	r3, [r7, #22]
 8001a8e:	222e      	movs	r2, #46	; 0x2e
 8001a90:	fb02 f303 	mul.w	r3, r2, r3
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	4413      	add	r3, r2
 8001a98:	3302      	adds	r3, #2
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f001 f982 	bl	8002da6 <get_orientation_config>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	75fb      	strb	r3, [r7, #23]
                    break;
 8001aa6:	e048      	b.n	8001b3a <bmi3_get_sensor_config+0x1f6>

                case BMI3_STEP_COUNTER:
                    rslt = get_step_config(&sens_cfg[loop].cfg.step_counter, dev);
 8001aa8:	7dbb      	ldrb	r3, [r7, #22]
 8001aaa:	222e      	movs	r2, #46	; 0x2e
 8001aac:	fb02 f303 	mul.w	r3, r2, r3
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f001 faba 	bl	8003032 <get_step_config>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	75fb      	strb	r3, [r7, #23]
                    break;
 8001ac2:	e03a      	b.n	8001b3a <bmi3_get_sensor_config+0x1f6>

                case BMI3_TAP:
                    rslt = get_tap_config(&sens_cfg[loop].cfg.tap, dev);
 8001ac4:	7dbb      	ldrb	r3, [r7, #22]
 8001ac6:	222e      	movs	r2, #46	; 0x2e
 8001ac8:	fb02 f303 	mul.w	r3, r2, r3
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f001 ff44 	bl	8003962 <get_tap_config>
 8001ada:	4603      	mov	r3, r0
 8001adc:	75fb      	strb	r3, [r7, #23]
                    break;
 8001ade:	e02c      	b.n	8001b3a <bmi3_get_sensor_config+0x1f6>

                case BMI3_ALT_ACCEL:
                    rslt = get_alternate_accel_config(&sens_cfg[loop].cfg.alt_acc, dev);
 8001ae0:	7dbb      	ldrb	r3, [r7, #22]
 8001ae2:	222e      	movs	r2, #46	; 0x2e
 8001ae4:	fb02 f303 	mul.w	r3, r2, r3
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	4413      	add	r3, r2
 8001aec:	3302      	adds	r3, #2
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f002 f94b 	bl	8003d8c <get_alternate_accel_config>
 8001af6:	4603      	mov	r3, r0
 8001af8:	75fb      	strb	r3, [r7, #23]
                    break;
 8001afa:	e01e      	b.n	8001b3a <bmi3_get_sensor_config+0x1f6>

                case BMI3_ALT_GYRO:
                    rslt = get_alternate_gyro_config(&sens_cfg[loop].cfg.alt_gyr, dev);
 8001afc:	7dbb      	ldrb	r3, [r7, #22]
 8001afe:	222e      	movs	r2, #46	; 0x2e
 8001b00:	fb02 f303 	mul.w	r3, r2, r3
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	3302      	adds	r3, #2
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f002 f9c7 	bl	8003ea0 <get_alternate_gyro_config>
 8001b12:	4603      	mov	r3, r0
 8001b14:	75fb      	strb	r3, [r7, #23]
                    break;
 8001b16:	e010      	b.n	8001b3a <bmi3_get_sensor_config+0x1f6>

                case BMI3_ALT_AUTO_CONFIG:
                    rslt = get_alternate_auto_config(&sens_cfg[loop].cfg.alt_auto_cfg, dev);
 8001b18:	7dbb      	ldrb	r3, [r7, #22]
 8001b1a:	222e      	movs	r2, #46	; 0x2e
 8001b1c:	fb02 f303 	mul.w	r3, r2, r3
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	4413      	add	r3, r2
 8001b24:	3302      	adds	r3, #2
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f002 fa40 	bl	8003fae <get_alternate_auto_config>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	75fb      	strb	r3, [r7, #23]
                    break;
 8001b32:	e002      	b.n	8001b3a <bmi3_get_sensor_config+0x1f6>

                default:
                    rslt = BMI3_E_INVALID_SENSOR;
 8001b34:	23fa      	movs	r3, #250	; 0xfa
 8001b36:	75fb      	strb	r3, [r7, #23]
                    break;
 8001b38:	bf00      	nop
        for (loop = 0; loop < n_sens; loop++)
 8001b3a:	7dbb      	ldrb	r3, [r7, #22]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	75bb      	strb	r3, [r7, #22]
 8001b40:	7dba      	ldrb	r2, [r7, #22]
 8001b42:	7afb      	ldrb	r3, [r7, #11]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	f4ff af17 	bcc.w	8001978 <bmi3_get_sensor_config+0x34>
    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 8001b4a:	e001      	b.n	8001b50 <bmi3_get_sensor_config+0x20c>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001b4c:	23ff      	movs	r3, #255	; 0xff
 8001b4e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001b50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <set_accel_config>:
/*!
 * @brief This internal API sets accelerometer configurations like ODR, accel mode,
 * bandwidth, average samples and range.
 */
static int8_t set_accel_config(struct bmi3_accel_config *config, struct bmi3_dev *dev)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8001b66:	2300      	movs	r3, #0
 8001b68:	813b      	strh	r3, [r7, #8]

    uint16_t odr, range, bwp, avg_num, acc_mode;

    if (config != NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 80a3 	beq.w	8001cb8 <set_accel_config+0x15c>
    {
        /* Validate bandwidth and averaging samples */
        rslt = validate_bw_avg_acc_mode(&config->bwp, &config->acc_mode, &config->avg_num, dev);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	1c58      	adds	r0, r3, #1
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	1c99      	adds	r1, r3, #2
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	1d1a      	adds	r2, r3, #4
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	f000 f8ef 	bl	8001d62 <validate_bw_avg_acc_mode>
 8001b84:	4603      	mov	r3, r0
 8001b86:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001b88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d108      	bne.n	8001ba2 <set_accel_config+0x46>
        {
            /* Validate ODR and range */
            rslt = validate_acc_odr_range(&config->odr, &config->range, dev);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3303      	adds	r3, #3
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f000 f91d 	bl	8001dd8 <validate_acc_odr_range>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMI3_OK)
 8001ba2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d11f      	bne.n	8001bea <set_accel_config+0x8e>
        {
            if (config->acc_mode == BMI3_ACC_MODE_LOW_PWR)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	789b      	ldrb	r3, [r3, #2]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d109      	bne.n	8001bc6 <set_accel_config+0x6a>
            {
                rslt = validate_acc_odr_avg(config->odr, config->avg_num);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	781a      	ldrb	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	791b      	ldrb	r3, [r3, #4]
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	f002 fa31 	bl	8004024 <validate_acc_odr_avg>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	75fb      	strb	r3, [r7, #23]
            }

            if ((config->acc_mode == BMI3_ACC_MODE_NORMAL) || (config->acc_mode == BMI3_ACC_MODE_HIGH_PERF))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	789b      	ldrb	r3, [r3, #2]
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d003      	beq.n	8001bd6 <set_accel_config+0x7a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	789b      	ldrb	r3, [r3, #2]
 8001bd2:	2b07      	cmp	r3, #7
 8001bd4:	d109      	bne.n	8001bea <set_accel_config+0x8e>
            {
                if ((config->odr >= BMI3_ACC_ODR_0_78HZ) && (config->odr <= BMI3_ACC_ODR_6_25HZ))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d005      	beq.n	8001bea <set_accel_config+0x8e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d801      	bhi.n	8001bea <set_accel_config+0x8e>
                {
                    rslt = BMI3_E_ACC_INVALID_CFG;
 8001be6:	23fc      	movs	r3, #252	; 0xfc
 8001be8:	75fb      	strb	r3, [r7, #23]
                }
            }
        }

        if (rslt == BMI3_OK)
 8001bea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d15f      	bne.n	8001cb2 <set_accel_config+0x156>
        {
            /* Set accelerometer ODR */
            odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_ACC_ODR, config->odr);
 8001bf2:	7a3b      	ldrb	r3, [r7, #8]
 8001bf4:	b21b      	sxth	r3, r3
 8001bf6:	f023 030f 	bic.w	r3, r3, #15
 8001bfa:	b21a      	sxth	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	b21b      	sxth	r3, r3
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	b21b      	sxth	r3, r3
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	b21b      	sxth	r3, r3
 8001c0c:	82bb      	strh	r3, [r7, #20]

            /* Set accelerometer range */
            range = BMI3_SET_BITS(reg_data[0], BMI3_ACC_RANGE, config->range);
 8001c0e:	7a3b      	ldrb	r3, [r7, #8]
 8001c10:	b21b      	sxth	r3, r3
 8001c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c16:	b21a      	sxth	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	78db      	ldrb	r3, [r3, #3]
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	b21b      	sxth	r3, r3
 8001c20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c24:	b21b      	sxth	r3, r3
 8001c26:	4313      	orrs	r3, r2
 8001c28:	b21b      	sxth	r3, r3
 8001c2a:	827b      	strh	r3, [r7, #18]

            /* Set accelerometer bandwidth */
            bwp = BMI3_SET_BITS(reg_data[0], BMI3_ACC_BW, config->bwp);
 8001c2c:	7a3b      	ldrb	r3, [r7, #8]
 8001c2e:	b21b      	sxth	r3, r3
 8001c30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c34:	b21a      	sxth	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	785b      	ldrb	r3, [r3, #1]
 8001c3a:	01db      	lsls	r3, r3, #7
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	4313      	orrs	r3, r2
 8001c44:	b21b      	sxth	r3, r3
 8001c46:	823b      	strh	r3, [r7, #16]

            /* Set accelerometer average number of samples */
            avg_num = BMI3_SET_BITS(reg_data[1], BMI3_ACC_AVG_NUM, config->avg_num);
 8001c48:	7a7b      	ldrb	r3, [r7, #9]
 8001c4a:	b21a      	sxth	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	791b      	ldrb	r3, [r3, #4]
 8001c50:	021b      	lsls	r3, r3, #8
 8001c52:	b21b      	sxth	r3, r3
 8001c54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c58:	b21b      	sxth	r3, r3
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	b21b      	sxth	r3, r3
 8001c5e:	81fb      	strh	r3, [r7, #14]

            /* Set accelerometer accel mode */
            acc_mode = BMI3_SET_BITS(reg_data[1], BMI3_ACC_MODE, config->acc_mode);
 8001c60:	7a7b      	ldrb	r3, [r7, #9]
 8001c62:	b21a      	sxth	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	789b      	ldrb	r3, [r3, #2]
 8001c68:	031b      	lsls	r3, r3, #12
 8001c6a:	b21b      	sxth	r3, r3
 8001c6c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001c70:	b21b      	sxth	r3, r3
 8001c72:	4313      	orrs	r3, r2
 8001c74:	b21b      	sxth	r3, r3
 8001c76:	81bb      	strh	r3, [r7, #12]

            reg_data[0] = (uint8_t)(odr | range | bwp);
 8001c78:	8abb      	ldrh	r3, [r7, #20]
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	8a7b      	ldrh	r3, [r7, #18]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	4313      	orrs	r3, r2
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	8a3b      	ldrh	r3, [r7, #16]
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	723b      	strb	r3, [r7, #8]
            reg_data[1] = (uint8_t)((avg_num | acc_mode) >> 8);
 8001c8e:	89fa      	ldrh	r2, [r7, #14]
 8001c90:	89bb      	ldrh	r3, [r7, #12]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	0a1b      	lsrs	r3, r3, #8
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	727b      	strb	r3, [r7, #9]

            /* Set configurations for accel */
            rslt = bmi3_set_regs(BMI3_REG_ACC_CONF, reg_data, 2, dev);
 8001c9e:	f107 0108 	add.w	r1, r7, #8
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	2020      	movs	r0, #32
 8001ca8:	f7ff fc50 	bl	800154c <bmi3_set_regs>
 8001cac:	4603      	mov	r3, r0
 8001cae:	75fb      	strb	r3, [r7, #23]
 8001cb0:	e004      	b.n	8001cbc <set_accel_config+0x160>
        }
        else
        {
            rslt = BMI3_E_ACC_INVALID_CFG;
 8001cb2:	23fc      	movs	r3, #252	; 0xfc
 8001cb4:	75fb      	strb	r3, [r7, #23]
 8001cb6:	e001      	b.n	8001cbc <set_accel_config+0x160>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001cb8:	23ff      	movs	r3, #255	; 0xff
 8001cba:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001cbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <get_accel_config>:
/*!
 * @brief This internal API gets accelerometer configurations like ODR,
 * bandwidth, accel mode, average samples and gravity range.
 */
static int8_t get_accel_config(struct bmi3_accel_config *config, struct bmi3_dev *dev)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d03a      	beq.n	8001d52 <get_accel_config+0x8a>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_ACC_CONF, data_array, 2, dev);
 8001cdc:	f107 0108 	add.w	r1, r7, #8
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	2020      	movs	r0, #32
 8001ce6:	f7ff fbcc 	bl	8001482 <bmi3_get_regs>
 8001cea:	4603      	mov	r3, r0
 8001cec:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8001cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d12f      	bne.n	8001d56 <get_accel_config+0x8e>
        {
            reg_data = data_array[0];
 8001cf6:	7a3b      	ldrb	r3, [r7, #8]
 8001cf8:	81bb      	strh	r3, [r7, #12]

            /* Get accelerometer ODR */
            config->odr = BMI3_GET_BIT_POS0(reg_data, BMI3_ACC_ODR);
 8001cfa:	89bb      	ldrh	r3, [r7, #12]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	701a      	strb	r2, [r3, #0]

            /* Get accelerometer range */
            config->range = BMI3_GET_BITS(reg_data, BMI3_ACC_RANGE);
 8001d08:	89bb      	ldrh	r3, [r7, #12]
 8001d0a:	111b      	asrs	r3, r3, #4
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	70da      	strb	r2, [r3, #3]

            /* Get accelerometer bandwidth */
            config->bwp = BMI3_GET_BITS(reg_data, BMI3_ACC_BW);
 8001d18:	89bb      	ldrh	r3, [r7, #12]
 8001d1a:	11db      	asrs	r3, r3, #7
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	705a      	strb	r2, [r3, #1]

            reg_data = (uint16_t)data_array[1] << 8;
 8001d28:	7a7b      	ldrb	r3, [r7, #9]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	021b      	lsls	r3, r3, #8
 8001d2e:	81bb      	strh	r3, [r7, #12]

            /* Get accelerometer average samples */
            config->avg_num = BMI3_GET_BITS(reg_data, BMI3_ACC_AVG_NUM);
 8001d30:	89bb      	ldrh	r3, [r7, #12]
 8001d32:	121b      	asrs	r3, r3, #8
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	711a      	strb	r2, [r3, #4]

            /* Get accel mode */
            config->acc_mode = BMI3_GET_BITS(reg_data, BMI3_ACC_MODE);
 8001d40:	89bb      	ldrh	r3, [r7, #12]
 8001d42:	131b      	asrs	r3, r3, #12
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	709a      	strb	r2, [r3, #2]
 8001d50:	e001      	b.n	8001d56 <get_accel_config+0x8e>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001d52:	23ff      	movs	r3, #255	; 0xff
 8001d54:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <validate_bw_avg_acc_mode>:
/*!
 * @brief This internal API validates bandwidth and accel mode of the
 * accelerometer set by the user.
 */
static int8_t validate_bw_avg_acc_mode(uint8_t *bandwidth, uint8_t *acc_mode, uint8_t *avg_num, struct bmi3_dev *dev)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	60f8      	str	r0, [r7, #12]
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	603b      	str	r3, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    if ((bandwidth != NULL) && (acc_mode != NULL) && (avg_num != NULL))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d026      	beq.n	8001dc4 <validate_bw_avg_acc_mode+0x62>
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d023      	beq.n	8001dc4 <validate_bw_avg_acc_mode+0x62>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d020      	beq.n	8001dc4 <validate_bw_avg_acc_mode+0x62>
    {
        /* Validate and auto-correct accel mode */
        rslt = check_boundary_val(acc_mode, BMI3_ACC_MODE_DISABLE, BMI3_ACC_MODE_HIGH_PERF, dev);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2207      	movs	r2, #7
 8001d86:	2100      	movs	r1, #0
 8001d88:	68b8      	ldr	r0, [r7, #8]
 8001d8a:	f000 f84e 	bl	8001e2a <check_boundary_val>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001d92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d117      	bne.n	8001dca <validate_bw_avg_acc_mode+0x68>
        {
            /* Validate for averaging number of samples */
            rslt = check_boundary_val(avg_num, BMI3_ACC_AVG1, BMI3_ACC_AVG64, dev);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	2206      	movs	r2, #6
 8001d9e:	2100      	movs	r1, #0
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f842 	bl	8001e2a <check_boundary_val>
 8001da6:	4603      	mov	r3, r0
 8001da8:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8001daa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10b      	bne.n	8001dca <validate_bw_avg_acc_mode+0x68>
            {
                /* Validate bandwidth */
                rslt = check_boundary_val(bandwidth, BMI3_ACC_BW_ODR_HALF, BMI3_ACC_BW_ODR_QUARTER, dev);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	2201      	movs	r2, #1
 8001db6:	2100      	movs	r1, #0
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f000 f836 	bl	8001e2a <check_boundary_val>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 8001dc2:	e002      	b.n	8001dca <validate_bw_avg_acc_mode+0x68>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001dc4:	23ff      	movs	r3, #255	; 0xff
 8001dc6:	75fb      	strb	r3, [r7, #23]
 8001dc8:	e000      	b.n	8001dcc <validate_bw_avg_acc_mode+0x6a>
        if (rslt == BMI3_OK)
 8001dca:	bf00      	nop
    }

    return rslt;
 8001dcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <validate_acc_odr_range>:
/*!
 * @brief This internal API validates ODR and range of the accelerometer set by
 * the user.
 */
static int8_t validate_acc_odr_range(uint8_t *odr, uint8_t *range, struct bmi3_dev *dev)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    if ((odr != NULL) && (range != NULL))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d017      	beq.n	8001e1a <validate_acc_odr_range+0x42>
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d014      	beq.n	8001e1a <validate_acc_odr_range+0x42>
    {
        /* Validate and auto correct ODR */
        rslt = check_boundary_val(odr, BMI3_ACC_ODR_0_78HZ, BMI3_ACC_ODR_6400HZ, dev);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	220e      	movs	r2, #14
 8001df4:	2101      	movs	r1, #1
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f000 f817 	bl	8001e2a <check_boundary_val>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001e00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d10a      	bne.n	8001e1e <validate_acc_odr_range+0x46>
        {
            /* Validate and auto correct Range */
            rslt = check_boundary_val(range, BMI3_ACC_RANGE_2G, BMI3_ACC_RANGE_16G, dev);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	68b8      	ldr	r0, [r7, #8]
 8001e10:	f000 f80b 	bl	8001e2a <check_boundary_val>
 8001e14:	4603      	mov	r3, r0
 8001e16:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 8001e18:	e001      	b.n	8001e1e <validate_acc_odr_range+0x46>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001e1a:	23ff      	movs	r3, #255	; 0xff
 8001e1c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001e1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <check_boundary_val>:

/*!
 * @brief This internal API is used to validate the boundary conditions.
 */
static int8_t check_boundary_val(uint8_t *val, uint8_t min, uint8_t max, struct bmi3_dev *dev)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b086      	sub	sp, #24
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	60f8      	str	r0, [r7, #12]
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	72fb      	strb	r3, [r7, #11]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	72bb      	strb	r3, [r7, #10]
    /* Variable to store result of API */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f985 	bl	800214c <null_ptr_check>
 8001e42:	4603      	mov	r3, r0
 8001e44:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (val != NULL))
 8001e46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d121      	bne.n	8001e92 <check_boundary_val+0x68>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d01e      	beq.n	8001e92 <check_boundary_val+0x68>
    {
        /* Check if value is below minimum value */
        if (*val < min)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	7afa      	ldrb	r2, [r7, #11]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d909      	bls.n	8001e72 <check_boundary_val+0x48>
        {
            /* Auto correct the invalid value to minimum value */
            *val = min;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	7afa      	ldrb	r2, [r7, #11]
 8001e62:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI3_I_MIN_VALUE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	7a1b      	ldrb	r3, [r3, #8]
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	721a      	strb	r2, [r3, #8]
        }

        /* Check if value is above maximum value */
        if (*val > max)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	7aba      	ldrb	r2, [r7, #10]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d20c      	bcs.n	8001e96 <check_boundary_val+0x6c>
        {
            /* Auto correct the invalid value to maximum value */
            *val = max;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	7aba      	ldrb	r2, [r7, #10]
 8001e80:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI3_I_MAX_VALUE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	7a1b      	ldrb	r3, [r3, #8]
 8001e86:	f043 0302 	orr.w	r3, r3, #2
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	721a      	strb	r2, [r3, #8]
        if (*val > max)
 8001e90:	e001      	b.n	8001e96 <check_boundary_val+0x6c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001e92:	23ff      	movs	r3, #255	; 0xff
 8001e94:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001e96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <set_gyro_config>:
/*!
 * @brief This internal API sets gyroscope configurations like ODR,
 * bandwidth, gyro mode, average samples and dps range.
 */
static int8_t set_gyro_config(struct bmi3_gyro_config *config, struct bmi3_dev *dev)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8001eac:	2300      	movs	r3, #0
 8001eae:	813b      	strh	r3, [r7, #8]

    uint16_t odr, range, bwp, avg_num, gyr_mode;

    if (config != NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 8091 	beq.w	8001fda <set_gyro_config+0x138>
    {
        /* Validate bandwidth, average samples and mode */
        rslt = validate_bw_avg_gyr_mode(&config->bwp, &config->gyr_mode, &config->avg_num, dev);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	1c58      	adds	r0, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	1c99      	adds	r1, r3, #2
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	1d1a      	adds	r2, r3, #4
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	f000 f890 	bl	8001fea <validate_bw_avg_gyr_mode>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001ece:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d108      	bne.n	8001ee8 <set_gyro_config+0x46>
        {
            /* Validate ODR and range */
            rslt = validate_gyr_odr_range(&config->odr, &config->range, dev);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3303      	adds	r3, #3
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f000 f8be 	bl	8002060 <validate_gyr_odr_range>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMI3_OK)
 8001ee8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10d      	bne.n	8001f0c <set_gyro_config+0x6a>
        {
            if (config->gyr_mode == BMI3_GYR_MODE_LOW_PWR)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	789b      	ldrb	r3, [r3, #2]
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d109      	bne.n	8001f0c <set_gyro_config+0x6a>
            {
                rslt = validate_gyr_odr_avg(config->odr, config->avg_num);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	781a      	ldrb	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	791b      	ldrb	r3, [r3, #4]
 8001f00:	4619      	mov	r1, r3
 8001f02:	4610      	mov	r0, r2
 8001f04:	f002 f96c 	bl	80041e0 <validate_gyr_odr_avg>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	75fb      	strb	r3, [r7, #23]
            }
        }

        if (rslt == BMI3_OK)
 8001f0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d15f      	bne.n	8001fd4 <set_gyro_config+0x132>
        {
            /* Set gyroscope ODR */
            odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_GYR_ODR, config->odr);
 8001f14:	7a3b      	ldrb	r3, [r7, #8]
 8001f16:	b21b      	sxth	r3, r3
 8001f18:	f023 030f 	bic.w	r3, r3, #15
 8001f1c:	b21a      	sxth	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	b21b      	sxth	r3, r3
 8001f24:	f003 030f 	and.w	r3, r3, #15
 8001f28:	b21b      	sxth	r3, r3
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	b21b      	sxth	r3, r3
 8001f2e:	82bb      	strh	r3, [r7, #20]

            /* Set gyroscope range */
            range = BMI3_SET_BITS(reg_data[0], BMI3_GYR_RANGE, config->range);
 8001f30:	7a3b      	ldrb	r3, [r7, #8]
 8001f32:	b21b      	sxth	r3, r3
 8001f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f38:	b21a      	sxth	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	78db      	ldrb	r3, [r3, #3]
 8001f3e:	011b      	lsls	r3, r3, #4
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f46:	b21b      	sxth	r3, r3
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	827b      	strh	r3, [r7, #18]

            /* Set gyroscope bandwidth */
            bwp = BMI3_SET_BITS(reg_data[0], BMI3_GYR_BW, config->bwp);
 8001f4e:	7a3b      	ldrb	r3, [r7, #8]
 8001f50:	b21b      	sxth	r3, r3
 8001f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f56:	b21a      	sxth	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	785b      	ldrb	r3, [r3, #1]
 8001f5c:	01db      	lsls	r3, r3, #7
 8001f5e:	b21b      	sxth	r3, r3
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	b21b      	sxth	r3, r3
 8001f64:	4313      	orrs	r3, r2
 8001f66:	b21b      	sxth	r3, r3
 8001f68:	823b      	strh	r3, [r7, #16]

            /* Set gyroscope average sample */
            avg_num = BMI3_SET_BITS(reg_data[1], BMI3_GYR_AVG_NUM, config->avg_num);
 8001f6a:	7a7b      	ldrb	r3, [r7, #9]
 8001f6c:	b21a      	sxth	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	791b      	ldrb	r3, [r3, #4]
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	b21b      	sxth	r3, r3
 8001f76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f7a:	b21b      	sxth	r3, r3
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	81fb      	strh	r3, [r7, #14]

            /* Set gyroscope mode */
            gyr_mode = BMI3_SET_BITS(reg_data[1], BMI3_GYR_MODE, config->gyr_mode);
 8001f82:	7a7b      	ldrb	r3, [r7, #9]
 8001f84:	b21a      	sxth	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	789b      	ldrb	r3, [r3, #2]
 8001f8a:	031b      	lsls	r3, r3, #12
 8001f8c:	b21b      	sxth	r3, r3
 8001f8e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001f92:	b21b      	sxth	r3, r3
 8001f94:	4313      	orrs	r3, r2
 8001f96:	b21b      	sxth	r3, r3
 8001f98:	81bb      	strh	r3, [r7, #12]

            reg_data[0] = (uint8_t)(odr | range | bwp);
 8001f9a:	8abb      	ldrh	r3, [r7, #20]
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	8a7b      	ldrh	r3, [r7, #18]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	8a3b      	ldrh	r3, [r7, #16]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	4313      	orrs	r3, r2
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	723b      	strb	r3, [r7, #8]
            reg_data[1] = (uint8_t)((avg_num | gyr_mode) >> 8);
 8001fb0:	89fa      	ldrh	r2, [r7, #14]
 8001fb2:	89bb      	ldrh	r3, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	727b      	strb	r3, [r7, #9]

            /* Set gyro configurations */
            rslt = bmi3_set_regs(BMI3_REG_GYR_CONF, reg_data, 2, dev);
 8001fc0:	f107 0108 	add.w	r1, r7, #8
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	2021      	movs	r0, #33	; 0x21
 8001fca:	f7ff fabf 	bl	800154c <bmi3_set_regs>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	75fb      	strb	r3, [r7, #23]
 8001fd2:	e004      	b.n	8001fde <set_gyro_config+0x13c>
        }
        else
        {
            rslt = BMI3_E_GYRO_INVALID_CFG;
 8001fd4:	23fb      	movs	r3, #251	; 0xfb
 8001fd6:	75fb      	strb	r3, [r7, #23]
 8001fd8:	e001      	b.n	8001fde <set_gyro_config+0x13c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001fda:	23ff      	movs	r3, #255	; 0xff
 8001fdc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001fde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <validate_bw_avg_gyr_mode>:
 */
static int8_t validate_bw_avg_gyr_mode(uint8_t *bandwidth,
                                       uint8_t *gyr_mode,
                                       const uint8_t *avg_num,
                                       struct bmi3_dev *dev)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b086      	sub	sp, #24
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	603b      	str	r3, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    if ((bandwidth != NULL) && (gyr_mode != NULL) && (avg_num != NULL))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d026      	beq.n	800204c <validate_bw_avg_gyr_mode+0x62>
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d023      	beq.n	800204c <validate_bw_avg_gyr_mode+0x62>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d020      	beq.n	800204c <validate_bw_avg_gyr_mode+0x62>
    {
        /* Validate and auto-correct gyro mode */
        rslt = check_boundary_val(gyr_mode, BMI3_GYR_MODE_DISABLE, BMI3_GYR_MODE_HIGH_PERF, dev);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	2207      	movs	r2, #7
 800200e:	2100      	movs	r1, #0
 8002010:	68b8      	ldr	r0, [r7, #8]
 8002012:	f7ff ff0a 	bl	8001e2a <check_boundary_val>
 8002016:	4603      	mov	r3, r0
 8002018:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 800201a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d117      	bne.n	8002052 <validate_bw_avg_gyr_mode+0x68>
        {
            /* Validate for averaging mode */
            rslt = check_boundary_val(bandwidth, BMI3_GYR_AVG1, BMI3_GYR_AVG64, dev);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	2206      	movs	r2, #6
 8002026:	2100      	movs	r1, #0
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f7ff fefe 	bl	8001e2a <check_boundary_val>
 800202e:	4603      	mov	r3, r0
 8002030:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8002032:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10b      	bne.n	8002052 <validate_bw_avg_gyr_mode+0x68>
            {
                /* Validate for bandwidth */
                rslt = check_boundary_val(bandwidth, BMI3_GYR_BW_ODR_HALF, BMI3_GYR_BW_ODR_QUARTER, dev);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2201      	movs	r2, #1
 800203e:	2100      	movs	r1, #0
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f7ff fef2 	bl	8001e2a <check_boundary_val>
 8002046:	4603      	mov	r3, r0
 8002048:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 800204a:	e002      	b.n	8002052 <validate_bw_avg_gyr_mode+0x68>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800204c:	23ff      	movs	r3, #255	; 0xff
 800204e:	75fb      	strb	r3, [r7, #23]
 8002050:	e000      	b.n	8002054 <validate_bw_avg_gyr_mode+0x6a>
        if (rslt == BMI3_OK)
 8002052:	bf00      	nop
    }

    return rslt;
 8002054:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <validate_gyr_odr_range>:
/*!
 * @brief This internal API validates ODR and range of the gyroscope set by
 * the user.
 */
static int8_t validate_gyr_odr_range(uint8_t *odr, uint8_t *range, struct bmi3_dev *dev)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    if ((odr != NULL) && (range != NULL))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d017      	beq.n	80020a2 <validate_gyr_odr_range+0x42>
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d014      	beq.n	80020a2 <validate_gyr_odr_range+0x42>
    {
        /* Validate and auto correct ODR */
        rslt = check_boundary_val(odr, BMI3_GYR_ODR_0_78HZ, BMI3_GYR_ODR_6400HZ, dev);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	220e      	movs	r2, #14
 800207c:	2101      	movs	r1, #1
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f7ff fed3 	bl	8001e2a <check_boundary_val>
 8002084:	4603      	mov	r3, r0
 8002086:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8002088:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10a      	bne.n	80020a6 <validate_gyr_odr_range+0x46>
        {
            /* Validate and auto correct Range */
            rslt = check_boundary_val(range, BMI3_GYR_RANGE_125DPS, BMI3_GYR_RANGE_2000DPS, dev);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2204      	movs	r2, #4
 8002094:	2100      	movs	r1, #0
 8002096:	68b8      	ldr	r0, [r7, #8]
 8002098:	f7ff fec7 	bl	8001e2a <check_boundary_val>
 800209c:	4603      	mov	r3, r0
 800209e:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 80020a0:	e001      	b.n	80020a6 <validate_gyr_odr_range+0x46>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80020a2:	23ff      	movs	r3, #255	; 0xff
 80020a4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80020a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <get_gyro_config>:
/*!
 * @brief This internal API gets gyroscope configurations like ODR, gyro mode,
 * bandwidth, averaging samples and range.
 */
static int8_t get_gyro_config(struct bmi3_gyro_config *config, struct bmi3_dev *dev)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b084      	sub	sp, #16
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 80020bc:	2300      	movs	r3, #0
 80020be:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d03a      	beq.n	800213c <get_gyro_config+0x8a>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_GYR_CONF, data_array, 2, dev);
 80020c6:	f107 0108 	add.w	r1, r7, #8
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2202      	movs	r2, #2
 80020ce:	2021      	movs	r0, #33	; 0x21
 80020d0:	f7ff f9d7 	bl	8001482 <bmi3_get_regs>
 80020d4:	4603      	mov	r3, r0
 80020d6:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 80020d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d12f      	bne.n	8002140 <get_gyro_config+0x8e>
        {
            reg_data = data_array[0];
 80020e0:	7a3b      	ldrb	r3, [r7, #8]
 80020e2:	81bb      	strh	r3, [r7, #12]

            /* Get gyro ODR */
            config->odr = BMI3_GET_BIT_POS0(reg_data, BMI3_GYR_ODR);
 80020e4:	89bb      	ldrh	r3, [r7, #12]
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	f003 030f 	and.w	r3, r3, #15
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	701a      	strb	r2, [r3, #0]

            /* Get gyro range */
            config->range = BMI3_GET_BITS(reg_data, BMI3_GYR_RANGE);
 80020f2:	89bb      	ldrh	r3, [r7, #12]
 80020f4:	111b      	asrs	r3, r3, #4
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	70da      	strb	r2, [r3, #3]

            /* Get gyro bandwidth */
            config->bwp = BMI3_GET_BITS(reg_data, BMI3_GYR_BW);
 8002102:	89bb      	ldrh	r3, [r7, #12]
 8002104:	11db      	asrs	r3, r3, #7
 8002106:	b2db      	uxtb	r3, r3
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	b2da      	uxtb	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	705a      	strb	r2, [r3, #1]

            reg_data = (uint16_t)data_array[1] << 8;
 8002112:	7a7b      	ldrb	r3, [r7, #9]
 8002114:	b29b      	uxth	r3, r3
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	81bb      	strh	r3, [r7, #12]

            /* Get gyro average sample */
            config->avg_num = BMI3_GET_BITS(reg_data, BMI3_GYR_AVG_NUM);
 800211a:	89bb      	ldrh	r3, [r7, #12]
 800211c:	121b      	asrs	r3, r3, #8
 800211e:	b2db      	uxtb	r3, r3
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	b2da      	uxtb	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	711a      	strb	r2, [r3, #4]

            /* Get gyro mode */
            config->gyr_mode = BMI3_GET_BITS(reg_data, BMI3_GYR_MODE);
 800212a:	89bb      	ldrh	r3, [r7, #12]
 800212c:	131b      	asrs	r3, r3, #12
 800212e:	b2db      	uxtb	r3, r3
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	b2da      	uxtb	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	709a      	strb	r2, [r3, #2]
 800213a:	e001      	b.n	8002140 <get_gyro_config+0x8e>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800213c:	23ff      	movs	r3, #255	; 0xff
 800213e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002140:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi3_dev *dev)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00b      	beq.n	8002172 <null_ptr_check+0x26>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d007      	beq.n	8002172 <null_ptr_check+0x26>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <null_ptr_check+0x26>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d102      	bne.n	8002178 <null_ptr_check+0x2c>
    {
        rslt = BMI3_E_NULL_PTR;
 8002172:	23ff      	movs	r3, #255	; 0xff
 8002174:	73fb      	strb	r3, [r7, #15]
 8002176:	e001      	b.n	800217c <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI3_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800217c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <get_any_motion_config>:
/*!
 * @brief This internal API gets any-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t get_any_motion_config(struct bmi3_any_motion_config *config, struct bmi3_dev *dev)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t any_mot_config[6] = { 0 };
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	2300      	movs	r3, #0
 800219c:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of any-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ANY_MOTION, 0 };
 800219e:	2305      	movs	r3, #5
 80021a0:	81bb      	strh	r3, [r7, #12]

    uint8_t idx = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	77bb      	strb	r3, [r7, #30]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d07b      	beq.n	80022a4 <get_any_motion_config+0x118>
    {
        /* Set the any-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80021ac:	f107 010c 	add.w	r1, r7, #12
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	2202      	movs	r2, #2
 80021b4:	2041      	movs	r0, #65	; 0x41
 80021b6:	f7ff f9c9 	bl	800154c <bmi3_set_regs>
 80021ba:	4603      	mov	r3, r0
 80021bc:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 80021be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d170      	bne.n	80022a8 <get_any_motion_config+0x11c>
        {
            /* Get the configuration from the feature engine register where any-motion feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, any_mot_config, 6, dev);
 80021c6:	f107 0110 	add.w	r1, r7, #16
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	2206      	movs	r2, #6
 80021ce:	2042      	movs	r0, #66	; 0x42
 80021d0:	f7ff f957 	bl	8001482 <bmi3_get_regs>
 80021d4:	4603      	mov	r3, r0
 80021d6:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 80021d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d163      	bne.n	80022a8 <get_any_motion_config+0x11c>
            {
                /* Get word to calculate threshold and accel reference up from same word */
                lsb = (uint16_t) any_mot_config[idx++];
 80021e0:	7fbb      	ldrb	r3, [r7, #30]
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	77ba      	strb	r2, [r7, #30]
 80021e6:	3320      	adds	r3, #32
 80021e8:	443b      	add	r3, r7
 80021ea:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80021ee:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) any_mot_config[idx++] << 8);
 80021f0:	7fbb      	ldrb	r3, [r7, #30]
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	77ba      	strb	r2, [r7, #30]
 80021f6:	3320      	adds	r3, #32
 80021f8:	443b      	add	r3, r7
 80021fa:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	021b      	lsls	r3, r3, #8
 8002202:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8002204:	8bba      	ldrh	r2, [r7, #28]
 8002206:	8b7b      	ldrh	r3, [r7, #26]
 8002208:	4313      	orrs	r3, r2
 800220a:	833b      	strh	r3, [r7, #24]

                /* Get threshold */
                config->slope_thres = (lsb_msb & BMI3_ANY_NO_SLOPE_THRESHOLD_MASK);
 800220c:	8b3b      	ldrh	r3, [r7, #24]
 800220e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002212:	b29a      	uxth	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	805a      	strh	r2, [r3, #2]

                /* Get accel reference up */
                config->acc_ref_up = (lsb_msb & BMI3_ANY_NO_ACC_REF_UP_MASK) >> BMI3_ANY_NO_ACC_REF_UP_POS;
 8002218:	8b3b      	ldrh	r3, [r7, #24]
 800221a:	131b      	asrs	r3, r3, #12
 800221c:	b2db      	uxtb	r3, r3
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	b2da      	uxtb	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate hysteresis from the word */
                lsb = (uint16_t) any_mot_config[idx++];
 8002228:	7fbb      	ldrb	r3, [r7, #30]
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	77ba      	strb	r2, [r7, #30]
 800222e:	3320      	adds	r3, #32
 8002230:	443b      	add	r3, r7
 8002232:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002236:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) any_mot_config[idx++] << 8);
 8002238:	7fbb      	ldrb	r3, [r7, #30]
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	77ba      	strb	r2, [r7, #30]
 800223e:	3320      	adds	r3, #32
 8002240:	443b      	add	r3, r7
 8002242:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002246:	b29b      	uxth	r3, r3
 8002248:	021b      	lsls	r3, r3, #8
 800224a:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 800224c:	8bba      	ldrh	r2, [r7, #28]
 800224e:	8b7b      	ldrh	r3, [r7, #26]
 8002250:	4313      	orrs	r3, r2
 8002252:	833b      	strh	r3, [r7, #24]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_ANY_NO_HYSTERESIS_MASK);
 8002254:	8b3b      	ldrh	r3, [r7, #24]
 8002256:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800225a:	b29a      	uxth	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate duration and wait time from the same word */
                lsb = (uint16_t) any_mot_config[idx++];
 8002260:	7fbb      	ldrb	r3, [r7, #30]
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	77ba      	strb	r2, [r7, #30]
 8002266:	3320      	adds	r3, #32
 8002268:	443b      	add	r3, r7
 800226a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800226e:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) any_mot_config[idx++] << 8);
 8002270:	7fbb      	ldrb	r3, [r7, #30]
 8002272:	1c5a      	adds	r2, r3, #1
 8002274:	77ba      	strb	r2, [r7, #30]
 8002276:	3320      	adds	r3, #32
 8002278:	443b      	add	r3, r7
 800227a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800227e:	b29b      	uxth	r3, r3
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8002284:	8bba      	ldrh	r2, [r7, #28]
 8002286:	8b7b      	ldrh	r3, [r7, #26]
 8002288:	4313      	orrs	r3, r2
 800228a:	833b      	strh	r3, [r7, #24]

                /* Get duration */
                config->duration = (lsb_msb & BMI3_ANY_NO_DURATION_MASK);
 800228c:	8b3b      	ldrh	r3, [r7, #24]
 800228e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002292:	b29a      	uxth	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	801a      	strh	r2, [r3, #0]

                /* Get wait time */
                config->wait_time = (lsb_msb & BMI3_ANY_NO_WAIT_TIME_MASK) >> BMI3_ANY_NO_WAIT_TIME_POS;
 8002298:	8b3b      	ldrh	r3, [r7, #24]
 800229a:	0b5b      	lsrs	r3, r3, #13
 800229c:	b29a      	uxth	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	811a      	strh	r2, [r3, #8]
 80022a2:	e001      	b.n	80022a8 <get_any_motion_config+0x11c>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80022a4:	23ff      	movs	r3, #255	; 0xff
 80022a6:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80022a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3720      	adds	r7, #32
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <set_any_motion_config>:
/*!
 * @brief This internal API sets any-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t set_any_motion_config(const struct bmi3_any_motion_config *config, struct bmi3_dev *dev)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08e      	sub	sp, #56	; 0x38
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of any-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ANY_MOTION, 0 };
 80022be:	2305      	movs	r3, #5
 80022c0:	83bb      	strh	r3, [r7, #28]

    /* Array to define the feature configuration */
    uint8_t any_mot_config[6] = { 0 };
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	2300      	movs	r3, #0
 80022c8:	833b      	strh	r3, [r7, #24]

    uint8_t data_array[6] = { 0 };
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	2300      	movs	r3, #0
 80022d0:	823b      	strh	r3, [r7, #16]
    uint16_t acc_ref_up;

    /* Wait time for clearing the event after slope is below threshold */
    uint16_t wait_time;

    if (config != NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 80c7 	beq.w	8002468 <set_any_motion_config+0x1b4>
    {
        /* Set the any-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80022da:	f107 011c 	add.w	r1, r7, #28
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2202      	movs	r2, #2
 80022e2:	2041      	movs	r0, #65	; 0x41
 80022e4:	f7ff f932 	bl	800154c <bmi3_set_regs>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        if (rslt == BMI3_OK)
 80022ee:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f040 80bb 	bne.w	800246e <set_any_motion_config+0x1ba>
        {
            /* Set threshold for lsb 8 bits */
            threshold1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 80022f8:	7b3b      	ldrb	r3, [r7, #12]
 80022fa:	b21b      	sxth	r3, r3
 80022fc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002300:	f023 030f 	bic.w	r3, r3, #15
 8002304:	b21a      	sxth	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	885b      	ldrh	r3, [r3, #2]
 800230a:	b21b      	sxth	r3, r3
 800230c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002310:	b21b      	sxth	r3, r3
 8002312:	4313      	orrs	r3, r2
 8002314:	b21b      	sxth	r3, r3
 8002316:	86bb      	strh	r3, [r7, #52]	; 0x34

            threshold = ((uint16_t)data_array[1] << 8);
 8002318:	7b7b      	ldrb	r3, [r7, #13]
 800231a:	b29b      	uxth	r3, r3
 800231c:	021b      	lsls	r3, r3, #8
 800231e:	867b      	strh	r3, [r7, #50]	; 0x32

            /* Set threshold for msb 8 bits */
            threshold2 = BMI3_SET_BIT_POS0(threshold, BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 8002320:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002324:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002328:	f023 030f 	bic.w	r3, r3, #15
 800232c:	b21a      	sxth	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	885b      	ldrh	r3, [r3, #2]
 8002332:	b21b      	sxth	r3, r3
 8002334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002338:	b21b      	sxth	r3, r3
 800233a:	4313      	orrs	r3, r2
 800233c:	b21b      	sxth	r3, r3
 800233e:	863b      	strh	r3, [r7, #48]	; 0x30

            /* Set accel reference */
            acc_ref_up = ((uint16_t)data_array[1] << 8);
 8002340:	7b7b      	ldrb	r3, [r7, #13]
 8002342:	b29b      	uxth	r3, r3
 8002344:	021b      	lsls	r3, r3, #8
 8002346:	85fb      	strh	r3, [r7, #46]	; 0x2e

            acc_ref_up = BMI3_SET_BITS(acc_ref_up, BMI3_ANY_NO_ACC_REF_UP, config->acc_ref_up);
 8002348:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800234c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002350:	b21a      	sxth	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	791b      	ldrb	r3, [r3, #4]
 8002356:	031b      	lsls	r3, r3, #12
 8002358:	b21b      	sxth	r3, r3
 800235a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800235e:	b21b      	sxth	r3, r3
 8002360:	4313      	orrs	r3, r2
 8002362:	b21b      	sxth	r3, r3
 8002364:	85fb      	strh	r3, [r7, #46]	; 0x2e

            /* Set hysteresis for lsb 8 bits */
            hysteresis1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 8002366:	7bbb      	ldrb	r3, [r7, #14]
 8002368:	b21b      	sxth	r3, r3
 800236a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800236e:	f023 0303 	bic.w	r3, r3, #3
 8002372:	b21a      	sxth	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	88db      	ldrh	r3, [r3, #6]
 8002378:	b21b      	sxth	r3, r3
 800237a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800237e:	b21b      	sxth	r3, r3
 8002380:	4313      	orrs	r3, r2
 8002382:	b21b      	sxth	r3, r3
 8002384:	85bb      	strh	r3, [r7, #44]	; 0x2c

            hysteresis = ((uint16_t)data_array[2] << 8);
 8002386:	7bbb      	ldrb	r3, [r7, #14]
 8002388:	b29b      	uxth	r3, r3
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	857b      	strh	r3, [r7, #42]	; 0x2a

            /* Set hysteresis for msb 8 bits */
            hysteresis2 = BMI3_SET_BIT_POS0(hysteresis, BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 800238e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002392:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002396:	f023 0303 	bic.w	r3, r3, #3
 800239a:	b21a      	sxth	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	88db      	ldrh	r3, [r3, #6]
 80023a0:	b21b      	sxth	r3, r3
 80023a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023a6:	b21b      	sxth	r3, r3
 80023a8:	4313      	orrs	r3, r2
 80023aa:	b21b      	sxth	r3, r3
 80023ac:	853b      	strh	r3, [r7, #40]	; 0x28

            /* Set duration for lsb 8 bits */
            duration1 = BMI3_SET_BIT_POS0(data_array[3], BMI3_ANY_NO_DURATION, config->duration);
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
 80023b0:	b21b      	sxth	r3, r3
 80023b2:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80023b6:	f023 031f 	bic.w	r3, r3, #31
 80023ba:	b21a      	sxth	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	b21b      	sxth	r3, r3
 80023c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023c6:	b21b      	sxth	r3, r3
 80023c8:	4313      	orrs	r3, r2
 80023ca:	b21b      	sxth	r3, r3
 80023cc:	84fb      	strh	r3, [r7, #38]	; 0x26

            duration = ((uint16_t)data_array[4] << 8);
 80023ce:	7c3b      	ldrb	r3, [r7, #16]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	021b      	lsls	r3, r3, #8
 80023d4:	84bb      	strh	r3, [r7, #36]	; 0x24

            /* Set duration for msb 8 bits */
            duration2 = BMI3_SET_BIT_POS0(duration, BMI3_ANY_NO_DURATION, config->duration);
 80023d6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80023da:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80023de:	f023 031f 	bic.w	r3, r3, #31
 80023e2:	b21a      	sxth	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	b21b      	sxth	r3, r3
 80023ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023ee:	b21b      	sxth	r3, r3
 80023f0:	4313      	orrs	r3, r2
 80023f2:	b21b      	sxth	r3, r3
 80023f4:	847b      	strh	r3, [r7, #34]	; 0x22

            wait_time1 = ((uint16_t)data_array[5] << 8);
 80023f6:	7c7b      	ldrb	r3, [r7, #17]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	021b      	lsls	r3, r3, #8
 80023fc:	843b      	strh	r3, [r7, #32]

            /* Set wait time */
            wait_time = BMI3_SET_BITS(wait_time1, BMI3_ANY_NO_WAIT_TIME, config->wait_time);
 80023fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002402:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002406:	b21a      	sxth	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	891b      	ldrh	r3, [r3, #8]
 800240c:	035b      	lsls	r3, r3, #13
 800240e:	b21b      	sxth	r3, r3
 8002410:	4313      	orrs	r3, r2
 8002412:	b21b      	sxth	r3, r3
 8002414:	83fb      	strh	r3, [r7, #30]

            any_mot_config[0] = (uint8_t)threshold1;
 8002416:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002418:	b2db      	uxtb	r3, r3
 800241a:	753b      	strb	r3, [r7, #20]
            any_mot_config[1] = (uint8_t)((threshold2 | acc_ref_up) >> 8);
 800241c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800241e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002420:	4313      	orrs	r3, r2
 8002422:	b29b      	uxth	r3, r3
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	b29b      	uxth	r3, r3
 8002428:	b2db      	uxtb	r3, r3
 800242a:	757b      	strb	r3, [r7, #21]
            any_mot_config[2] = (uint8_t)(hysteresis1);
 800242c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800242e:	b2db      	uxtb	r3, r3
 8002430:	75bb      	strb	r3, [r7, #22]
            any_mot_config[3] = (uint8_t)((hysteresis2) >> 8);
 8002432:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002434:	0a1b      	lsrs	r3, r3, #8
 8002436:	b29b      	uxth	r3, r3
 8002438:	b2db      	uxtb	r3, r3
 800243a:	75fb      	strb	r3, [r7, #23]
            any_mot_config[4] = (uint8_t)(duration1);
 800243c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800243e:	b2db      	uxtb	r3, r3
 8002440:	763b      	strb	r3, [r7, #24]
            any_mot_config[5] = (uint8_t)((duration2 | wait_time) >> 8);
 8002442:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002444:	8bfb      	ldrh	r3, [r7, #30]
 8002446:	4313      	orrs	r3, r2
 8002448:	b29b      	uxth	r3, r3
 800244a:	0a1b      	lsrs	r3, r3, #8
 800244c:	b29b      	uxth	r3, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	767b      	strb	r3, [r7, #25]

            /* Set the configurations back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, any_mot_config, 6, dev);
 8002452:	f107 0114 	add.w	r1, r7, #20
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2206      	movs	r2, #6
 800245a:	2042      	movs	r0, #66	; 0x42
 800245c:	f7ff f876 	bl	800154c <bmi3_set_regs>
 8002460:	4603      	mov	r3, r0
 8002462:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002466:	e002      	b.n	800246e <set_any_motion_config+0x1ba>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002468:	23ff      	movs	r3, #255	; 0xff
 800246a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 800246e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8002472:	4618      	mov	r0, r3
 8002474:	3738      	adds	r7, #56	; 0x38
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <get_no_motion_config>:
/*!
 * @brief This internal API gets no-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t get_no_motion_config(struct bmi3_no_motion_config *config, struct bmi3_dev *dev)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b088      	sub	sp, #32
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t no_mot_config[6] = { 0 };
 8002484:	2300      	movs	r3, #0
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	2300      	movs	r3, #0
 800248a:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of no-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_NO_MOTION, 0 };
 800248c:	2308      	movs	r3, #8
 800248e:	81bb      	strh	r3, [r7, #12]

    /* Variable to define array offset */
    uint8_t idx = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	77bb      	strb	r3, [r7, #30]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d07b      	beq.n	8002592 <get_no_motion_config+0x118>
    {
        /* Set the no-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 800249a:	f107 010c 	add.w	r1, r7, #12
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2202      	movs	r2, #2
 80024a2:	2041      	movs	r0, #65	; 0x41
 80024a4:	f7ff f852 	bl	800154c <bmi3_set_regs>
 80024a8:	4603      	mov	r3, r0
 80024aa:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 80024ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d170      	bne.n	8002596 <get_no_motion_config+0x11c>
        {
            /* Get the configuration from the feature engine register where no-motion feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, no_mot_config, 6, dev);
 80024b4:	f107 0110 	add.w	r1, r7, #16
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2206      	movs	r2, #6
 80024bc:	2042      	movs	r0, #66	; 0x42
 80024be:	f7fe ffe0 	bl	8001482 <bmi3_get_regs>
 80024c2:	4603      	mov	r3, r0
 80024c4:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 80024c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d163      	bne.n	8002596 <get_no_motion_config+0x11c>
            {
                /* Get word to calculate threshold and accel reference up from same word */
                lsb = (uint16_t) no_mot_config[idx++];
 80024ce:	7fbb      	ldrb	r3, [r7, #30]
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	77ba      	strb	r2, [r7, #30]
 80024d4:	3320      	adds	r3, #32
 80024d6:	443b      	add	r3, r7
 80024d8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80024dc:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) no_mot_config[idx++] << 8);
 80024de:	7fbb      	ldrb	r3, [r7, #30]
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	77ba      	strb	r2, [r7, #30]
 80024e4:	3320      	adds	r3, #32
 80024e6:	443b      	add	r3, r7
 80024e8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	021b      	lsls	r3, r3, #8
 80024f0:	837b      	strh	r3, [r7, #26]
                lsb_msb = (uint16_t)(lsb | msb);
 80024f2:	8bba      	ldrh	r2, [r7, #28]
 80024f4:	8b7b      	ldrh	r3, [r7, #26]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	833b      	strh	r3, [r7, #24]

                /* Get threshold */
                config->slope_thres = (lsb_msb & BMI3_ANY_NO_SLOPE_THRESHOLD_MASK);
 80024fa:	8b3b      	ldrh	r3, [r7, #24]
 80024fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002500:	b29a      	uxth	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	805a      	strh	r2, [r3, #2]

                /* Get accel reference up */
                config->acc_ref_up = (lsb_msb & BMI3_ANY_NO_ACC_REF_UP_MASK) >> BMI3_ANY_NO_ACC_REF_UP_POS;
 8002506:	8b3b      	ldrh	r3, [r7, #24]
 8002508:	131b      	asrs	r3, r3, #12
 800250a:	b2db      	uxtb	r3, r3
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	b2da      	uxtb	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate hysteresis */
                lsb = (uint16_t) no_mot_config[idx++];
 8002516:	7fbb      	ldrb	r3, [r7, #30]
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	77ba      	strb	r2, [r7, #30]
 800251c:	3320      	adds	r3, #32
 800251e:	443b      	add	r3, r7
 8002520:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002524:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) no_mot_config[idx++] << 8);
 8002526:	7fbb      	ldrb	r3, [r7, #30]
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	77ba      	strb	r2, [r7, #30]
 800252c:	3320      	adds	r3, #32
 800252e:	443b      	add	r3, r7
 8002530:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002534:	b29b      	uxth	r3, r3
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	837b      	strh	r3, [r7, #26]
                lsb_msb = (uint16_t)(lsb | msb);
 800253a:	8bba      	ldrh	r2, [r7, #28]
 800253c:	8b7b      	ldrh	r3, [r7, #26]
 800253e:	4313      	orrs	r3, r2
 8002540:	833b      	strh	r3, [r7, #24]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_ANY_NO_HYSTERESIS_MASK);
 8002542:	8b3b      	ldrh	r3, [r7, #24]
 8002544:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002548:	b29a      	uxth	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate duration and wait time from same word */
                lsb = (uint16_t) no_mot_config[idx++];
 800254e:	7fbb      	ldrb	r3, [r7, #30]
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	77ba      	strb	r2, [r7, #30]
 8002554:	3320      	adds	r3, #32
 8002556:	443b      	add	r3, r7
 8002558:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800255c:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) no_mot_config[idx++] << 8);
 800255e:	7fbb      	ldrb	r3, [r7, #30]
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	77ba      	strb	r2, [r7, #30]
 8002564:	3320      	adds	r3, #32
 8002566:	443b      	add	r3, r7
 8002568:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800256c:	b29b      	uxth	r3, r3
 800256e:	021b      	lsls	r3, r3, #8
 8002570:	837b      	strh	r3, [r7, #26]
                lsb_msb = (uint16_t)(lsb | msb);
 8002572:	8bba      	ldrh	r2, [r7, #28]
 8002574:	8b7b      	ldrh	r3, [r7, #26]
 8002576:	4313      	orrs	r3, r2
 8002578:	833b      	strh	r3, [r7, #24]

                /* Get duration */
                config->duration = (lsb_msb & BMI3_ANY_NO_DURATION_MASK);
 800257a:	8b3b      	ldrh	r3, [r7, #24]
 800257c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002580:	b29a      	uxth	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	801a      	strh	r2, [r3, #0]

                /* Get wait time */
                config->wait_time = (lsb_msb & BMI3_ANY_NO_WAIT_TIME_MASK) >> BMI3_ANY_NO_WAIT_TIME_POS;
 8002586:	8b3b      	ldrh	r3, [r7, #24]
 8002588:	0b5b      	lsrs	r3, r3, #13
 800258a:	b29a      	uxth	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	811a      	strh	r2, [r3, #8]
 8002590:	e001      	b.n	8002596 <get_no_motion_config+0x11c>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002592:	23ff      	movs	r3, #255	; 0xff
 8002594:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002596:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3720      	adds	r7, #32
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <set_no_motion_config>:
/*!
 * @brief This internal API sets no-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t set_no_motion_config(const struct bmi3_no_motion_config *config, struct bmi3_dev *dev)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b08e      	sub	sp, #56	; 0x38
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
 80025aa:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of no-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_NO_MOTION, 0 };
 80025ac:	2308      	movs	r3, #8
 80025ae:	83bb      	strh	r3, [r7, #28]

    /* Array to define the feature configuration */
    uint8_t no_mot_config[6] = { 0 };
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	2300      	movs	r3, #0
 80025b6:	833b      	strh	r3, [r7, #24]

    uint8_t data_array[6] = { 0 };
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	2300      	movs	r3, #0
 80025be:	823b      	strh	r3, [r7, #16]

    uint16_t acc_ref_up;

    uint16_t wait_time;

    if (config != NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 80c3 	beq.w	800274e <set_no_motion_config+0x1ac>
    {
        /* Set the no-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80025c8:	f107 011c 	add.w	r1, r7, #28
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2202      	movs	r2, #2
 80025d0:	2041      	movs	r0, #65	; 0x41
 80025d2:	f7fe ffbb 	bl	800154c <bmi3_set_regs>
 80025d6:	4603      	mov	r3, r0
 80025d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        if (rslt == BMI3_OK)
 80025dc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f040 80b7 	bne.w	8002754 <set_no_motion_config+0x1b2>
        {
            /* Set threshold for lsb 8 bits */
            threshold1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 80025e6:	7b3b      	ldrb	r3, [r7, #12]
 80025e8:	b21b      	sxth	r3, r3
 80025ea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80025ee:	f023 030f 	bic.w	r3, r3, #15
 80025f2:	b21a      	sxth	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	885b      	ldrh	r3, [r3, #2]
 80025f8:	b21b      	sxth	r3, r3
 80025fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fe:	b21b      	sxth	r3, r3
 8002600:	4313      	orrs	r3, r2
 8002602:	b21b      	sxth	r3, r3
 8002604:	86bb      	strh	r3, [r7, #52]	; 0x34

            threshold = ((uint16_t)data_array[1] << 8);
 8002606:	7b7b      	ldrb	r3, [r7, #13]
 8002608:	b29b      	uxth	r3, r3
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	867b      	strh	r3, [r7, #50]	; 0x32

            /* Set threshold for msb 8 bits */
            threshold2 = BMI3_SET_BIT_POS0(threshold, BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 800260e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002612:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002616:	f023 030f 	bic.w	r3, r3, #15
 800261a:	b21a      	sxth	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	885b      	ldrh	r3, [r3, #2]
 8002620:	b21b      	sxth	r3, r3
 8002622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002626:	b21b      	sxth	r3, r3
 8002628:	4313      	orrs	r3, r2
 800262a:	b21b      	sxth	r3, r3
 800262c:	863b      	strh	r3, [r7, #48]	; 0x30

            /* Set accel reference */
            acc_ref_up = BMI3_SET_BITS(threshold, BMI3_ANY_NO_ACC_REF_UP, config->acc_ref_up);
 800262e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002632:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002636:	b21a      	sxth	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	791b      	ldrb	r3, [r3, #4]
 800263c:	031b      	lsls	r3, r3, #12
 800263e:	b21b      	sxth	r3, r3
 8002640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002644:	b21b      	sxth	r3, r3
 8002646:	4313      	orrs	r3, r2
 8002648:	b21b      	sxth	r3, r3
 800264a:	85fb      	strh	r3, [r7, #46]	; 0x2e

            /* Set hysteresis for lsb 8 bits */
            hysteresis1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 800264c:	7bbb      	ldrb	r3, [r7, #14]
 800264e:	b21b      	sxth	r3, r3
 8002650:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002654:	f023 0303 	bic.w	r3, r3, #3
 8002658:	b21a      	sxth	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	88db      	ldrh	r3, [r3, #6]
 800265e:	b21b      	sxth	r3, r3
 8002660:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002664:	b21b      	sxth	r3, r3
 8002666:	4313      	orrs	r3, r2
 8002668:	b21b      	sxth	r3, r3
 800266a:	85bb      	strh	r3, [r7, #44]	; 0x2c

            hysteresis = ((uint16_t)data_array[2] << 8);
 800266c:	7bbb      	ldrb	r3, [r7, #14]
 800266e:	b29b      	uxth	r3, r3
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	857b      	strh	r3, [r7, #42]	; 0x2a

            /* Set hysteresis for msb 8 bits */
            hysteresis2 = BMI3_SET_BIT_POS0(hysteresis, BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 8002674:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002678:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800267c:	f023 0303 	bic.w	r3, r3, #3
 8002680:	b21a      	sxth	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	88db      	ldrh	r3, [r3, #6]
 8002686:	b21b      	sxth	r3, r3
 8002688:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800268c:	b21b      	sxth	r3, r3
 800268e:	4313      	orrs	r3, r2
 8002690:	b21b      	sxth	r3, r3
 8002692:	853b      	strh	r3, [r7, #40]	; 0x28

            /* Set duration for lsb 8 bits */
            duration1 = BMI3_SET_BIT_POS0(data_array[3], BMI3_ANY_NO_DURATION, config->duration);
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	b21b      	sxth	r3, r3
 8002698:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800269c:	f023 031f 	bic.w	r3, r3, #31
 80026a0:	b21a      	sxth	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	b21b      	sxth	r3, r3
 80026a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026ac:	b21b      	sxth	r3, r3
 80026ae:	4313      	orrs	r3, r2
 80026b0:	b21b      	sxth	r3, r3
 80026b2:	84fb      	strh	r3, [r7, #38]	; 0x26

            duration = ((uint16_t)data_array[4] << 8);
 80026b4:	7c3b      	ldrb	r3, [r7, #16]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	021b      	lsls	r3, r3, #8
 80026ba:	84bb      	strh	r3, [r7, #36]	; 0x24

            /* Set duration for msb 8 bits */
            duration2 = BMI3_SET_BIT_POS0(duration, BMI3_ANY_NO_DURATION, config->duration);
 80026bc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80026c0:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80026c4:	f023 031f 	bic.w	r3, r3, #31
 80026c8:	b21a      	sxth	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	b21b      	sxth	r3, r3
 80026d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026d4:	b21b      	sxth	r3, r3
 80026d6:	4313      	orrs	r3, r2
 80026d8:	b21b      	sxth	r3, r3
 80026da:	847b      	strh	r3, [r7, #34]	; 0x22

            wait_time1 = ((uint16_t)data_array[5] << 8);
 80026dc:	7c7b      	ldrb	r3, [r7, #17]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	021b      	lsls	r3, r3, #8
 80026e2:	843b      	strh	r3, [r7, #32]

            /* Set wait time */
            wait_time = BMI3_SET_BITS(wait_time1, BMI3_ANY_NO_WAIT_TIME, config->wait_time);
 80026e4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80026e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026ec:	b21a      	sxth	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	891b      	ldrh	r3, [r3, #8]
 80026f2:	035b      	lsls	r3, r3, #13
 80026f4:	b21b      	sxth	r3, r3
 80026f6:	4313      	orrs	r3, r2
 80026f8:	b21b      	sxth	r3, r3
 80026fa:	83fb      	strh	r3, [r7, #30]

            no_mot_config[0] = (uint8_t)threshold1;
 80026fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	753b      	strb	r3, [r7, #20]
            no_mot_config[1] = (uint8_t)((threshold2 | acc_ref_up) >> 8);
 8002702:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002704:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002706:	4313      	orrs	r3, r2
 8002708:	b29b      	uxth	r3, r3
 800270a:	0a1b      	lsrs	r3, r3, #8
 800270c:	b29b      	uxth	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	757b      	strb	r3, [r7, #21]
            no_mot_config[2] = (uint8_t)(hysteresis1);
 8002712:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002714:	b2db      	uxtb	r3, r3
 8002716:	75bb      	strb	r3, [r7, #22]
            no_mot_config[3] = (uint8_t)((hysteresis2) >> 8);
 8002718:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800271a:	0a1b      	lsrs	r3, r3, #8
 800271c:	b29b      	uxth	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	75fb      	strb	r3, [r7, #23]
            no_mot_config[4] = (uint8_t)(duration1);
 8002722:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002724:	b2db      	uxtb	r3, r3
 8002726:	763b      	strb	r3, [r7, #24]
            no_mot_config[5] = (uint8_t)((duration2 | wait_time) >> 8);
 8002728:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800272a:	8bfb      	ldrh	r3, [r7, #30]
 800272c:	4313      	orrs	r3, r2
 800272e:	b29b      	uxth	r3, r3
 8002730:	0a1b      	lsrs	r3, r3, #8
 8002732:	b29b      	uxth	r3, r3
 8002734:	b2db      	uxtb	r3, r3
 8002736:	767b      	strb	r3, [r7, #25]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, no_mot_config, 6, dev);
 8002738:	f107 0114 	add.w	r1, r7, #20
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2206      	movs	r2, #6
 8002740:	2042      	movs	r0, #66	; 0x42
 8002742:	f7fe ff03 	bl	800154c <bmi3_set_regs>
 8002746:	4603      	mov	r3, r0
 8002748:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800274c:	e002      	b.n	8002754 <set_no_motion_config+0x1b2>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800274e:	23ff      	movs	r3, #255	; 0xff
 8002750:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 8002754:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8002758:	4618      	mov	r0, r3
 800275a:	3738      	adds	r7, #56	; 0x38
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <get_flat_config>:
/*!
 * @brief This internal API gets flat configurations like theta, blocking,
 * hold-time, hysteresis, and slope threshold.
 */
static int8_t get_flat_config(struct bmi3_flat_config *config, struct bmi3_dev *dev)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t flat_config[4] = { 0 };
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]

    /* Array to set the base address of flat feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_FLAT, 0 };
 800276e:	230b      	movs	r3, #11
 8002770:	813b      	strh	r3, [r7, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	75bb      	strb	r3, [r7, #22]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d063      	beq.n	8002844 <get_flat_config+0xe4>
    {
        /* Set the flat base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 800277c:	f107 0108 	add.w	r1, r7, #8
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	2202      	movs	r2, #2
 8002784:	2041      	movs	r0, #65	; 0x41
 8002786:	f7fe fee1 	bl	800154c <bmi3_set_regs>
 800278a:	4603      	mov	r3, r0
 800278c:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 800278e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d158      	bne.n	8002848 <get_flat_config+0xe8>
        {
            /* Get the configuration from the feature engine register where flat feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, flat_config, 4, dev);
 8002796:	f107 010c 	add.w	r1, r7, #12
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2204      	movs	r2, #4
 800279e:	2042      	movs	r0, #66	; 0x42
 80027a0:	f7fe fe6f 	bl	8001482 <bmi3_get_regs>
 80027a4:	4603      	mov	r3, r0
 80027a6:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 80027a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d14b      	bne.n	8002848 <get_flat_config+0xe8>
            {
                /* Get word to calculate theta, blocking and hold time from the same word */
                lsb = (uint16_t) flat_config[idx++];
 80027b0:	7dbb      	ldrb	r3, [r7, #22]
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	75ba      	strb	r2, [r7, #22]
 80027b6:	3318      	adds	r3, #24
 80027b8:	443b      	add	r3, r7
 80027ba:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80027be:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) flat_config[idx++] << 8);
 80027c0:	7dbb      	ldrb	r3, [r7, #22]
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	75ba      	strb	r2, [r7, #22]
 80027c6:	3318      	adds	r3, #24
 80027c8:	443b      	add	r3, r7
 80027ca:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	021b      	lsls	r3, r3, #8
 80027d2:	827b      	strh	r3, [r7, #18]
                lsb_msb = (lsb | msb);
 80027d4:	8aba      	ldrh	r2, [r7, #20]
 80027d6:	8a7b      	ldrh	r3, [r7, #18]
 80027d8:	4313      	orrs	r3, r2
 80027da:	823b      	strh	r3, [r7, #16]

                /* Get theta */
                config->theta = lsb_msb & BMI3_FLAT_THETA_MASK;
 80027dc:	8a3b      	ldrh	r3, [r7, #16]
 80027de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	801a      	strh	r2, [r3, #0]

                /* Get blocking */
                config->blocking = (lsb_msb & BMI3_FLAT_BLOCKING_MASK) >> BMI3_FLAT_BLOCKING_POS;
 80027e8:	8a3b      	ldrh	r3, [r7, #16]
 80027ea:	119b      	asrs	r3, r3, #6
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	805a      	strh	r2, [r3, #2]

                /* Get hold time */
                config->hold_time = (lsb_msb & BMI3_FLAT_HOLD_TIME_MASK) >> BMI3_FLAT_HOLD_TIME_POS;
 80027f8:	8a3b      	ldrh	r3, [r7, #16]
 80027fa:	0a1b      	lsrs	r3, r3, #8
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate slope threshold and hysteresis from the same word */
                lsb = (uint16_t) flat_config[idx++];
 8002802:	7dbb      	ldrb	r3, [r7, #22]
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	75ba      	strb	r2, [r7, #22]
 8002808:	3318      	adds	r3, #24
 800280a:	443b      	add	r3, r7
 800280c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002810:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) flat_config[idx++] << 8);
 8002812:	7dbb      	ldrb	r3, [r7, #22]
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	75ba      	strb	r2, [r7, #22]
 8002818:	3318      	adds	r3, #24
 800281a:	443b      	add	r3, r7
 800281c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002820:	b29b      	uxth	r3, r3
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	827b      	strh	r3, [r7, #18]
                lsb_msb = lsb | msb;
 8002826:	8aba      	ldrh	r2, [r7, #20]
 8002828:	8a7b      	ldrh	r3, [r7, #18]
 800282a:	4313      	orrs	r3, r2
 800282c:	823b      	strh	r3, [r7, #16]

                /* Get slope threshold */
                config->slope_thres = lsb_msb & BMI3_FLAT_SLOPE_THRES_MASK;
 800282e:	8a3b      	ldrh	r3, [r7, #16]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	b29a      	uxth	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	811a      	strh	r2, [r3, #8]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_FLAT_HYST_MASK) >> BMI3_FLAT_HYST_POS;
 8002838:	8a3b      	ldrh	r3, [r7, #16]
 800283a:	0a1b      	lsrs	r3, r3, #8
 800283c:	b29a      	uxth	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	809a      	strh	r2, [r3, #4]
 8002842:	e001      	b.n	8002848 <get_flat_config+0xe8>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002844:	23ff      	movs	r3, #255	; 0xff
 8002846:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002848:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <set_flat_config>:
/*!
 * @brief This internal API sets flat configurations like theta, blocking,
 * hold-time, hysteresis, and slope threshold.
 */
static int8_t set_flat_config(const struct bmi3_flat_config *config, struct bmi3_dev *dev)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t flat_config[4] = { 0 };
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]

    /* Array to set the base address of flat feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_FLAT, 0 };
 8002862:	230b      	movs	r3, #11
 8002864:	81bb      	strh	r3, [r7, #12]

    uint16_t theta, blocking, holdtime, slope_thres, hyst;

    if (config != NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d071      	beq.n	8002950 <set_flat_config+0xfc>
    {
        /* Set the flat base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 800286c:	f107 010c 	add.w	r1, r7, #12
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	2202      	movs	r2, #2
 8002874:	2041      	movs	r0, #65	; 0x41
 8002876:	f7fe fe69 	bl	800154c <bmi3_set_regs>
 800287a:	4603      	mov	r3, r0
 800287c:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 800287e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d166      	bne.n	8002954 <set_flat_config+0x100>
        {
            /* Set theta */
            theta = BMI3_SET_BIT_POS0(flat_config[0], BMI3_FLAT_THETA, config->theta);
 8002886:	7c3b      	ldrb	r3, [r7, #16]
 8002888:	b21b      	sxth	r3, r3
 800288a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800288e:	b21a      	sxth	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	b21b      	sxth	r3, r3
 8002896:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800289a:	b21b      	sxth	r3, r3
 800289c:	4313      	orrs	r3, r2
 800289e:	b21b      	sxth	r3, r3
 80028a0:	83bb      	strh	r3, [r7, #28]

            /* Set blocking */
            blocking = BMI3_SET_BITS(flat_config[0], BMI3_FLAT_BLOCKING, config->blocking);
 80028a2:	7c3b      	ldrb	r3, [r7, #16]
 80028a4:	b21b      	sxth	r3, r3
 80028a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80028aa:	b21a      	sxth	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	885b      	ldrh	r3, [r3, #2]
 80028b0:	019b      	lsls	r3, r3, #6
 80028b2:	b21b      	sxth	r3, r3
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	b21b      	sxth	r3, r3
 80028b8:	4313      	orrs	r3, r2
 80028ba:	b21b      	sxth	r3, r3
 80028bc:	837b      	strh	r3, [r7, #26]

            /* Set hold time */
            holdtime = ((uint16_t)flat_config[1] << 8);
 80028be:	7c7b      	ldrb	r3, [r7, #17]
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	021b      	lsls	r3, r3, #8
 80028c4:	833b      	strh	r3, [r7, #24]
            holdtime = BMI3_SET_BITS(holdtime, BMI3_FLAT_HOLD_TIME, config->hold_time);
 80028c6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	b21a      	sxth	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	88db      	ldrh	r3, [r3, #6]
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	b21b      	sxth	r3, r3
 80028d6:	4313      	orrs	r3, r2
 80028d8:	b21b      	sxth	r3, r3
 80028da:	833b      	strh	r3, [r7, #24]

            /* Set slope threshold */
            slope_thres = BMI3_SET_BIT_POS0(flat_config[2], BMI3_FLAT_SLOPE_THRES, config->slope_thres);
 80028dc:	7cbb      	ldrb	r3, [r7, #18]
 80028de:	b21b      	sxth	r3, r3
 80028e0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028e4:	b21a      	sxth	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	891b      	ldrh	r3, [r3, #8]
 80028ea:	b21b      	sxth	r3, r3
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	b21b      	sxth	r3, r3
 80028f0:	4313      	orrs	r3, r2
 80028f2:	b21b      	sxth	r3, r3
 80028f4:	82fb      	strh	r3, [r7, #22]

            /* Set hysteresis */
            hyst = ((uint16_t)flat_config[3] << 8);
 80028f6:	7cfb      	ldrb	r3, [r7, #19]
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	021b      	lsls	r3, r3, #8
 80028fc:	82bb      	strh	r3, [r7, #20]
            hyst = BMI3_SET_BITS(hyst, BMI3_FLAT_HYST, config->hysteresis);
 80028fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	b21a      	sxth	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	889b      	ldrh	r3, [r3, #4]
 800290a:	021b      	lsls	r3, r3, #8
 800290c:	b21b      	sxth	r3, r3
 800290e:	4313      	orrs	r3, r2
 8002910:	b21b      	sxth	r3, r3
 8002912:	82bb      	strh	r3, [r7, #20]

            flat_config[0] = (uint8_t)(theta | blocking);
 8002914:	8bbb      	ldrh	r3, [r7, #28]
 8002916:	b2da      	uxtb	r2, r3
 8002918:	8b7b      	ldrh	r3, [r7, #26]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	4313      	orrs	r3, r2
 800291e:	b2db      	uxtb	r3, r3
 8002920:	743b      	strb	r3, [r7, #16]
            flat_config[1] = (uint8_t)(holdtime >> 8);
 8002922:	8b3b      	ldrh	r3, [r7, #24]
 8002924:	0a1b      	lsrs	r3, r3, #8
 8002926:	b29b      	uxth	r3, r3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	747b      	strb	r3, [r7, #17]
            flat_config[2] = (uint8_t)(slope_thres);
 800292c:	8afb      	ldrh	r3, [r7, #22]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	74bb      	strb	r3, [r7, #18]
            flat_config[3] = (uint8_t)(hyst >> 8);
 8002932:	8abb      	ldrh	r3, [r7, #20]
 8002934:	0a1b      	lsrs	r3, r3, #8
 8002936:	b29b      	uxth	r3, r3
 8002938:	b2db      	uxtb	r3, r3
 800293a:	74fb      	strb	r3, [r7, #19]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, flat_config, 4, dev);
 800293c:	f107 0110 	add.w	r1, r7, #16
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	2204      	movs	r2, #4
 8002944:	2042      	movs	r0, #66	; 0x42
 8002946:	f7fe fe01 	bl	800154c <bmi3_set_regs>
 800294a:	4603      	mov	r3, r0
 800294c:	77fb      	strb	r3, [r7, #31]
 800294e:	e001      	b.n	8002954 <set_flat_config+0x100>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002950:	23ff      	movs	r3, #255	; 0xff
 8002952:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002954:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3720      	adds	r7, #32
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <get_sig_motion_config>:
/*!
 * @brief This internal API gets sig-motion configurations like block size,
 * peak 2 peak min, mcr min, peak 2 peak max and mcr max.
 */
static int8_t get_sig_motion_config(struct bmi3_sig_motion_config *config, struct bmi3_dev *dev)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]

    /* Variable to define a word */
    uint16_t lsb_msb;

    /* Array to set the base address of sig-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_SIG_MOTION, 0 };
 800296a:	230d      	movs	r3, #13
 800296c:	81bb      	strh	r3, [r7, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	77bb      	strb	r3, [r7, #30]

    if (config != NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d077      	beq.n	8002a68 <get_sig_motion_config+0x108>
    {
        /* Set the sig-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002978:	f107 010c 	add.w	r1, r7, #12
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	2202      	movs	r2, #2
 8002980:	2041      	movs	r0, #65	; 0x41
 8002982:	f7fe fde3 	bl	800154c <bmi3_set_regs>
 8002986:	4603      	mov	r3, r0
 8002988:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 800298a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d16c      	bne.n	8002a6c <get_sig_motion_config+0x10c>
        {
            /* Get the configuration from the feature engine register where sig motion feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, sig_mot_config, 6, dev);
 8002992:	f107 0110 	add.w	r1, r7, #16
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2206      	movs	r2, #6
 800299a:	2042      	movs	r0, #66	; 0x42
 800299c:	f7fe fd71 	bl	8001482 <bmi3_get_regs>
 80029a0:	4603      	mov	r3, r0
 80029a2:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 80029a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d15f      	bne.n	8002a6c <get_sig_motion_config+0x10c>
            {
                /* Get word to calculate block size */
                lsb = (uint16_t) sig_mot_config[idx++];
 80029ac:	7fbb      	ldrb	r3, [r7, #30]
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	77ba      	strb	r2, [r7, #30]
 80029b2:	3320      	adds	r3, #32
 80029b4:	443b      	add	r3, r7
 80029b6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80029ba:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) sig_mot_config[idx++] << 8);
 80029bc:	7fbb      	ldrb	r3, [r7, #30]
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	77ba      	strb	r2, [r7, #30]
 80029c2:	3320      	adds	r3, #32
 80029c4:	443b      	add	r3, r7
 80029c6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	021b      	lsls	r3, r3, #8
 80029ce:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 80029d0:	8bba      	ldrh	r2, [r7, #28]
 80029d2:	8b7b      	ldrh	r3, [r7, #26]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	833b      	strh	r3, [r7, #24]

                /* Get block size */
                config->block_size = lsb_msb & BMI3_SIG_BLOCK_SIZE_MASK;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	8b3a      	ldrh	r2, [r7, #24]
 80029dc:	801a      	strh	r2, [r3, #0]

                /* Get word to calculate peak 2 peak minimum from the same word */
                lsb = (uint16_t) sig_mot_config[idx++];
 80029de:	7fbb      	ldrb	r3, [r7, #30]
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	77ba      	strb	r2, [r7, #30]
 80029e4:	3320      	adds	r3, #32
 80029e6:	443b      	add	r3, r7
 80029e8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80029ec:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) sig_mot_config[idx++] << 8);
 80029ee:	7fbb      	ldrb	r3, [r7, #30]
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	77ba      	strb	r2, [r7, #30]
 80029f4:	3320      	adds	r3, #32
 80029f6:	443b      	add	r3, r7
 80029f8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	021b      	lsls	r3, r3, #8
 8002a00:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8002a02:	8bba      	ldrh	r2, [r7, #28]
 8002a04:	8b7b      	ldrh	r3, [r7, #26]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	833b      	strh	r3, [r7, #24]

                /* Get peak 2 peak minimum */
                config->peak_2_peak_min = (lsb_msb & BMI3_SIG_P2P_MIN_MASK);
 8002a0a:	8b3b      	ldrh	r3, [r7, #24]
 8002a0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	805a      	strh	r2, [r3, #2]

                /* Get mcr minimum */
                config->mcr_min = (lsb_msb & BMI3_SIG_MCR_MIN_MASK) >> BMI3_SIG_MCR_MIN_POS;
 8002a16:	8b3b      	ldrh	r3, [r7, #24]
 8002a18:	0a9b      	lsrs	r3, r3, #10
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate peak 2 peak maximum and mcr maximum from the same word */
                lsb = (uint16_t) sig_mot_config[idx++];
 8002a22:	7fbb      	ldrb	r3, [r7, #30]
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	77ba      	strb	r2, [r7, #30]
 8002a28:	3320      	adds	r3, #32
 8002a2a:	443b      	add	r3, r7
 8002a2c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002a30:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) sig_mot_config[idx++] << 8);
 8002a32:	7fbb      	ldrb	r3, [r7, #30]
 8002a34:	1c5a      	adds	r2, r3, #1
 8002a36:	77ba      	strb	r2, [r7, #30]
 8002a38:	3320      	adds	r3, #32
 8002a3a:	443b      	add	r3, r7
 8002a3c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	021b      	lsls	r3, r3, #8
 8002a44:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8002a46:	8bba      	ldrh	r2, [r7, #28]
 8002a48:	8b7b      	ldrh	r3, [r7, #26]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	833b      	strh	r3, [r7, #24]

                /* Get peak 2 peak maximum */
                config->peak_2_peak_max = (lsb_msb & BMI3_SIG_P2P_MAX_MASK);
 8002a4e:	8b3b      	ldrh	r3, [r7, #24]
 8002a50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	80da      	strh	r2, [r3, #6]

                /* Get mcr maximum */
                config->mcr_max = (lsb_msb & BMI3_MCR_MAX_MASK) >> BMI3_MCR_MAX_POS;
 8002a5a:	8b3b      	ldrh	r3, [r7, #24]
 8002a5c:	0a9b      	lsrs	r3, r3, #10
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	721a      	strb	r2, [r3, #8]
 8002a66:	e001      	b.n	8002a6c <get_sig_motion_config+0x10c>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002a68:	23ff      	movs	r3, #255	; 0xff
 8002a6a:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002a6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3720      	adds	r7, #32
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <set_sig_motion_config>:
/*!
 * @brief This internal API sets sig-motion configurations like block size,
 * peak 2 peak min, mcr min, peak 2 peak max and mcr max.
 */
static int8_t set_sig_motion_config(const struct bmi3_sig_motion_config *config, struct bmi3_dev *dev)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08e      	sub	sp, #56	; 0x38
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of sig-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_SIG_MOTION, 0 };
 8002a82:	230d      	movs	r3, #13
 8002a84:	83bb      	strh	r3, [r7, #28]

    /* Array to define the feature configuration */
    uint8_t sig_mot_config[6] = { 0 };
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	833b      	strh	r3, [r7, #24]

    uint8_t data_array[6] = { 0 };
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	2300      	movs	r3, #0
 8002a94:	823b      	strh	r3, [r7, #16]

    uint16_t mcr_min;

    uint16_t mcr_max;

    if (config != NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80aa 	beq.w	8002bf2 <set_sig_motion_config+0x17a>
    {
        /* Set the sig-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002a9e:	f107 011c 	add.w	r1, r7, #28
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	2041      	movs	r0, #65	; 0x41
 8002aa8:	f7fe fd50 	bl	800154c <bmi3_set_regs>
 8002aac:	4603      	mov	r3, r0
 8002aae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        if (rslt == BMI3_OK)
 8002ab2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f040 809e 	bne.w	8002bf8 <set_sig_motion_config+0x180>
        {
            /* Set block size for lsb 8 bits */
            block_size1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_SIG_BLOCK_SIZE, config->block_size);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	86bb      	strh	r3, [r7, #52]	; 0x34

            block_size = ((uint16_t)data_array[1] << 8);
 8002ac2:	7b7b      	ldrb	r3, [r7, #13]
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	021b      	lsls	r3, r3, #8
 8002ac8:	867b      	strh	r3, [r7, #50]	; 0x32

            /* Set block size for msb 8 bits */
            block_size2 = BMI3_SET_BIT_POS0(block_size, BMI3_SIG_BLOCK_SIZE, config->block_size);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	863b      	strh	r3, [r7, #48]	; 0x30

            /* Set peak to peak minimum for lsb 8 bits */
            p2p_min1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_SIG_P2P_MIN, config->peak_2_peak_min);
 8002ad0:	7bbb      	ldrb	r3, [r7, #14]
 8002ad2:	b21b      	sxth	r3, r3
 8002ad4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ad8:	f023 0303 	bic.w	r3, r3, #3
 8002adc:	b21a      	sxth	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	885b      	ldrh	r3, [r3, #2]
 8002ae2:	b21b      	sxth	r3, r3
 8002ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ae8:	b21b      	sxth	r3, r3
 8002aea:	4313      	orrs	r3, r2
 8002aec:	b21b      	sxth	r3, r3
 8002aee:	85fb      	strh	r3, [r7, #46]	; 0x2e

            p2p_min = ((uint16_t)data_array[3] << 8);
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	85bb      	strh	r3, [r7, #44]	; 0x2c

            /* Set peak to peak minimum for msb 8 bits */
            p2p_min2 = BMI3_SET_BIT_POS0(p2p_min, BMI3_SIG_P2P_MIN, config->peak_2_peak_min);
 8002af8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002afc:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b00:	f023 0303 	bic.w	r3, r3, #3
 8002b04:	b21a      	sxth	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	885b      	ldrh	r3, [r3, #2]
 8002b0a:	b21b      	sxth	r3, r3
 8002b0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b10:	b21b      	sxth	r3, r3
 8002b12:	4313      	orrs	r3, r2
 8002b14:	b21b      	sxth	r3, r3
 8002b16:	857b      	strh	r3, [r7, #42]	; 0x2a

            mcr_min = ((uint16_t)data_array[3] << 8);
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	021b      	lsls	r3, r3, #8
 8002b1e:	853b      	strh	r3, [r7, #40]	; 0x28

            /* Set mcr minimum */
            mcr_min = BMI3_SET_BITS(mcr_min, BMI3_SIG_MCR_MIN, config->mcr_min);
 8002b20:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8002b24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b28:	b21a      	sxth	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	791b      	ldrb	r3, [r3, #4]
 8002b2e:	029b      	lsls	r3, r3, #10
 8002b30:	b21b      	sxth	r3, r3
 8002b32:	4313      	orrs	r3, r2
 8002b34:	b21b      	sxth	r3, r3
 8002b36:	853b      	strh	r3, [r7, #40]	; 0x28

            /* Set peak to peak maximum for lsb 8 bits */
            p2p_max1 = BMI3_SET_BIT_POS0(data_array[4], BMI3_SIG_P2P_MAX, config->peak_2_peak_max);
 8002b38:	7c3b      	ldrb	r3, [r7, #16]
 8002b3a:	b21b      	sxth	r3, r3
 8002b3c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b40:	f023 0303 	bic.w	r3, r3, #3
 8002b44:	b21a      	sxth	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	88db      	ldrh	r3, [r3, #6]
 8002b4a:	b21b      	sxth	r3, r3
 8002b4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b50:	b21b      	sxth	r3, r3
 8002b52:	4313      	orrs	r3, r2
 8002b54:	b21b      	sxth	r3, r3
 8002b56:	84fb      	strh	r3, [r7, #38]	; 0x26

            p2p_max = ((uint16_t)data_array[5] << 8);
 8002b58:	7c7b      	ldrb	r3, [r7, #17]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	84bb      	strh	r3, [r7, #36]	; 0x24

            /* Set peak to peak maximum for msb 8 bits */
            p2p_max2 = BMI3_SET_BIT_POS0(p2p_max, BMI3_SIG_P2P_MAX, config->peak_2_peak_max);
 8002b60:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002b64:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b68:	f023 0303 	bic.w	r3, r3, #3
 8002b6c:	b21a      	sxth	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	88db      	ldrh	r3, [r3, #6]
 8002b72:	b21b      	sxth	r3, r3
 8002b74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b78:	b21b      	sxth	r3, r3
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	b21b      	sxth	r3, r3
 8002b7e:	847b      	strh	r3, [r7, #34]	; 0x22

            mcr_max = ((uint16_t)data_array[5] << 8);
 8002b80:	7c7b      	ldrb	r3, [r7, #17]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	021b      	lsls	r3, r3, #8
 8002b86:	843b      	strh	r3, [r7, #32]

            /* Set mcr maximum */
            mcr_max = BMI3_SET_BITS(mcr_max, BMI3_MCR_MAX, config->mcr_max);
 8002b88:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002b8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b90:	b21a      	sxth	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	7a1b      	ldrb	r3, [r3, #8]
 8002b96:	029b      	lsls	r3, r3, #10
 8002b98:	b21b      	sxth	r3, r3
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	b21b      	sxth	r3, r3
 8002b9e:	843b      	strh	r3, [r7, #32]

            sig_mot_config[0] = (uint8_t)(block_size1);
 8002ba0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	753b      	strb	r3, [r7, #20]
            sig_mot_config[1] = (uint8_t)(block_size2 >> 8);
 8002ba6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	757b      	strb	r3, [r7, #21]
            sig_mot_config[2] = (uint8_t)(p2p_min1);
 8002bb0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	75bb      	strb	r3, [r7, #22]
            sig_mot_config[3] = (uint8_t)((p2p_min2 | mcr_min) >> 8);
 8002bb6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002bb8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	0a1b      	lsrs	r3, r3, #8
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	75fb      	strb	r3, [r7, #23]
            sig_mot_config[4] = (uint8_t)(p2p_max1);
 8002bc6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	763b      	strb	r3, [r7, #24]
            sig_mot_config[5] = (uint8_t)((p2p_max2 | mcr_max) >> 8);
 8002bcc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002bce:	8c3b      	ldrh	r3, [r7, #32]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	0a1b      	lsrs	r3, r3, #8
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	767b      	strb	r3, [r7, #25]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, sig_mot_config, 6, dev);
 8002bdc:	f107 0114 	add.w	r1, r7, #20
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	2206      	movs	r2, #6
 8002be4:	2042      	movs	r0, #66	; 0x42
 8002be6:	f7fe fcb1 	bl	800154c <bmi3_set_regs>
 8002bea:	4603      	mov	r3, r0
 8002bec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002bf0:	e002      	b.n	8002bf8 <set_sig_motion_config+0x180>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002bf2:	23ff      	movs	r3, #255	; 0xff
 8002bf4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 8002bf8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3738      	adds	r7, #56	; 0x38
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <get_tilt_config>:
/*!
 * @brief This internal API gets tilt configurations like segment size,
 * tilt angle, beta accel mean.
 */
static int8_t get_tilt_config(struct bmi3_tilt_config *config, struct bmi3_dev *dev)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t tilt_config[4] = { 0 };
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]

    /* Array to set the base address of tilt feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_TILT, 0 };
 8002c12:	2321      	movs	r3, #33	; 0x21
 8002c14:	813b      	strh	r3, [r7, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	75bb      	strb	r3, [r7, #22]
    uint16_t msb;

    /* Variable to define word */
    uint16_t lsb_msb;

    if (config != NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d057      	beq.n	8002cd0 <get_tilt_config+0xcc>
    {
        /* Set the tilt base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002c20:	f107 0108 	add.w	r1, r7, #8
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	2202      	movs	r2, #2
 8002c28:	2041      	movs	r0, #65	; 0x41
 8002c2a:	f7fe fc8f 	bl	800154c <bmi3_set_regs>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8002c32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d14c      	bne.n	8002cd4 <get_tilt_config+0xd0>
        {
            /* Get the configuration from the feature engine register where tilt feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, tilt_config, 4, dev);
 8002c3a:	f107 010c 	add.w	r1, r7, #12
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2204      	movs	r2, #4
 8002c42:	2042      	movs	r0, #66	; 0x42
 8002c44:	f7fe fc1d 	bl	8001482 <bmi3_get_regs>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8002c4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d13f      	bne.n	8002cd4 <get_tilt_config+0xd0>
            {
                /* Get word to calculate segment size and minimum tilt angle from the same word */
                lsb = ((uint16_t)tilt_config[idx++]);
 8002c54:	7dbb      	ldrb	r3, [r7, #22]
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	75ba      	strb	r2, [r7, #22]
 8002c5a:	3318      	adds	r3, #24
 8002c5c:	443b      	add	r3, r7
 8002c5e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002c62:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t)tilt_config[idx++]);
 8002c64:	7dbb      	ldrb	r3, [r7, #22]
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	75ba      	strb	r2, [r7, #22]
 8002c6a:	3318      	adds	r3, #24
 8002c6c:	443b      	add	r3, r7
 8002c6e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002c72:	827b      	strh	r3, [r7, #18]
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8002c74:	8a7b      	ldrh	r3, [r7, #18]
 8002c76:	021b      	lsls	r3, r3, #8
 8002c78:	b21a      	sxth	r2, r3
 8002c7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	b21b      	sxth	r3, r3
 8002c82:	823b      	strh	r3, [r7, #16]

                /* Get segment size */
                config->segment_size = lsb_msb & BMI3_TILT_SEGMENT_SIZE_MASK;
 8002c84:	8a3b      	ldrh	r3, [r7, #16]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	801a      	strh	r2, [r3, #0]

                /* Get minimum tilt angle */
                config->min_tilt_angle = (lsb_msb & BMI3_TILT_MIN_TILT_ANGLE_MASK) >> BMI3_TILT_MIN_TILT_ANGLE_POS;
 8002c8e:	8a3b      	ldrh	r3, [r7, #16]
 8002c90:	0a1b      	lsrs	r3, r3, #8
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	805a      	strh	r2, [r3, #2]

                /* Get word to calculate beta accel mean */
                lsb = ((uint16_t)tilt_config[idx++]);
 8002c98:	7dbb      	ldrb	r3, [r7, #22]
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	75ba      	strb	r2, [r7, #22]
 8002c9e:	3318      	adds	r3, #24
 8002ca0:	443b      	add	r3, r7
 8002ca2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002ca6:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t)tilt_config[idx++]);
 8002ca8:	7dbb      	ldrb	r3, [r7, #22]
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	75ba      	strb	r2, [r7, #22]
 8002cae:	3318      	adds	r3, #24
 8002cb0:	443b      	add	r3, r7
 8002cb2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002cb6:	827b      	strh	r3, [r7, #18]
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8002cb8:	8a7b      	ldrh	r3, [r7, #18]
 8002cba:	021b      	lsls	r3, r3, #8
 8002cbc:	b21a      	sxth	r2, r3
 8002cbe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	b21b      	sxth	r3, r3
 8002cc6:	823b      	strh	r3, [r7, #16]

                /* Get beta accel mean */
                config->beta_acc_mean = lsb_msb & BMI3_TILT_BETA_ACC_MEAN_MASK;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	8a3a      	ldrh	r2, [r7, #16]
 8002ccc:	809a      	strh	r2, [r3, #4]
 8002cce:	e001      	b.n	8002cd4 <get_tilt_config+0xd0>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002cd0:	23ff      	movs	r3, #255	; 0xff
 8002cd2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002cd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <set_tilt_config>:
/*!
 * @brief This internal API sets tilt configurations like segment size,
 * tilt angle, beta accel mean.
 */
static int8_t set_tilt_config(const struct bmi3_tilt_config *config, struct bmi3_dev *dev)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of tilt feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_TILT, 0 };
 8002cea:	2321      	movs	r3, #33	; 0x21
 8002cec:	823b      	strh	r3, [r7, #16]

    /* Array to define the feature configuration */
    uint8_t tilt_config[4] = { 0 };
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]

    uint8_t data_array[4] = { 0 };
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60bb      	str	r3, [r7, #8]

    uint16_t min_tilt_angle, beta_acc_mean;

    uint16_t segment_size;

    if (config != NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d04c      	beq.n	8002d96 <set_tilt_config+0xb6>
    {
        /* Set the tilt base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002cfc:	f107 0110 	add.w	r1, r7, #16
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2202      	movs	r2, #2
 8002d04:	2041      	movs	r0, #65	; 0x41
 8002d06:	f7fe fc21 	bl	800154c <bmi3_set_regs>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8002d0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d141      	bne.n	8002d9a <set_tilt_config+0xba>
        {
            /* Set segment size */
            segment_size = BMI3_SET_BIT_POS0(data_array[0], BMI3_TILT_SEGMENT_SIZE, config->segment_size);
 8002d16:	7a3b      	ldrb	r3, [r7, #8]
 8002d18:	b21b      	sxth	r3, r3
 8002d1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d1e:	b21a      	sxth	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	b21b      	sxth	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	b21b      	sxth	r3, r3
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	b21b      	sxth	r3, r3
 8002d2e:	83bb      	strh	r3, [r7, #28]

            min_tilt_angle1 = ((uint16_t)data_array[1] << 8);
 8002d30:	7a7b      	ldrb	r3, [r7, #9]
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	021b      	lsls	r3, r3, #8
 8002d36:	837b      	strh	r3, [r7, #26]

            /* Set minimum tilt angle */
            min_tilt_angle = BMI3_SET_BITS(min_tilt_angle1, BMI3_TILT_MIN_TILT_ANGLE, config->min_tilt_angle);
 8002d38:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	b21a      	sxth	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	885b      	ldrh	r3, [r3, #2]
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	b21b      	sxth	r3, r3
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	b21b      	sxth	r3, r3
 8002d4c:	833b      	strh	r3, [r7, #24]

            /* Set beta accel mean for lsb 8 bits */
            beta_acc_mean1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_TILT_BETA_ACC_MEAN, config->beta_acc_mean);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	889b      	ldrh	r3, [r3, #4]
 8002d52:	82fb      	strh	r3, [r7, #22]

            beta_acc_mean = ((uint16_t)data_array[3] << 8);
 8002d54:	7afb      	ldrb	r3, [r7, #11]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	021b      	lsls	r3, r3, #8
 8002d5a:	82bb      	strh	r3, [r7, #20]

            /* Set beta accel mean for msb 8 bits */
            beta_acc_mean2 = BMI3_SET_BIT_POS0(beta_acc_mean, BMI3_TILT_BETA_ACC_MEAN, config->beta_acc_mean);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	889b      	ldrh	r3, [r3, #4]
 8002d60:	827b      	strh	r3, [r7, #18]

            tilt_config[0] = (uint8_t)segment_size;
 8002d62:	8bbb      	ldrh	r3, [r7, #28]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	733b      	strb	r3, [r7, #12]
            tilt_config[1] = (uint8_t)(min_tilt_angle >> 8);
 8002d68:	8b3b      	ldrh	r3, [r7, #24]
 8002d6a:	0a1b      	lsrs	r3, r3, #8
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	737b      	strb	r3, [r7, #13]
            tilt_config[2] = (uint8_t)(beta_acc_mean1);
 8002d72:	8afb      	ldrh	r3, [r7, #22]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	73bb      	strb	r3, [r7, #14]
            tilt_config[3] = (uint8_t)(beta_acc_mean2 >> 8);
 8002d78:	8a7b      	ldrh	r3, [r7, #18]
 8002d7a:	0a1b      	lsrs	r3, r3, #8
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	73fb      	strb	r3, [r7, #15]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, tilt_config, 4, dev);
 8002d82:	f107 010c 	add.w	r1, r7, #12
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2204      	movs	r2, #4
 8002d8a:	2042      	movs	r0, #66	; 0x42
 8002d8c:	f7fe fbde 	bl	800154c <bmi3_set_regs>
 8002d90:	4603      	mov	r3, r0
 8002d92:	77fb      	strb	r3, [r7, #31]
 8002d94:	e001      	b.n	8002d9a <set_tilt_config+0xba>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002d96:	23ff      	movs	r3, #255	; 0xff
 8002d98:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002d9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3720      	adds	r7, #32
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <get_orientation_config>:
/*!
 * @brief This internal API gets orientation configurations like upside enable,
 * mode, blocking, theta, hold time, slope threshold and hysteresis.
 */
static int8_t get_orientation_config(struct bmi3_orientation_config *config, struct bmi3_dev *dev)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b086      	sub	sp, #24
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t orient_config[4] = { 0 };
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]

    /* Array to set the base address of orient feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ORIENT, 0 };
 8002db4:	231c      	movs	r3, #28
 8002db6:	813b      	strh	r3, [r7, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	75bb      	strb	r3, [r7, #22]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d075      	beq.n	8002eae <get_orientation_config+0x108>
    {
        /* Set the orient base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002dc2:	f107 0108 	add.w	r1, r7, #8
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	2041      	movs	r0, #65	; 0x41
 8002dcc:	f7fe fbbe 	bl	800154c <bmi3_set_regs>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8002dd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d16a      	bne.n	8002eb2 <get_orientation_config+0x10c>
        {
            /* Get the configuration from the feature engine register where orientation feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, orient_config, 4, dev);
 8002ddc:	f107 010c 	add.w	r1, r7, #12
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	2204      	movs	r2, #4
 8002de4:	2042      	movs	r0, #66	; 0x42
 8002de6:	f7fe fb4c 	bl	8001482 <bmi3_get_regs>
 8002dea:	4603      	mov	r3, r0
 8002dec:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8002dee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d15d      	bne.n	8002eb2 <get_orientation_config+0x10c>
            {
                /* Get word to calculate upside down enable, mode, blocking, theta and hold time
                 * from the same word */
                lsb = (uint16_t) orient_config[idx++];
 8002df6:	7dbb      	ldrb	r3, [r7, #22]
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	75ba      	strb	r2, [r7, #22]
 8002dfc:	3318      	adds	r3, #24
 8002dfe:	443b      	add	r3, r7
 8002e00:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002e04:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) orient_config[idx++] << 8);
 8002e06:	7dbb      	ldrb	r3, [r7, #22]
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	75ba      	strb	r2, [r7, #22]
 8002e0c:	3318      	adds	r3, #24
 8002e0e:	443b      	add	r3, r7
 8002e10:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	021b      	lsls	r3, r3, #8
 8002e18:	827b      	strh	r3, [r7, #18]
                lsb_msb = lsb | msb;
 8002e1a:	8aba      	ldrh	r2, [r7, #20]
 8002e1c:	8a7b      	ldrh	r3, [r7, #18]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	823b      	strh	r3, [r7, #16]

                /* Get upside enable */
                config->ud_en = lsb_msb & BMI3_ORIENT_UD_EN_MASK;
 8002e22:	8a3b      	ldrh	r3, [r7, #16]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	701a      	strb	r2, [r3, #0]

                /* Get mode */
                config->mode = (lsb_msb & BMI3_ORIENT_MODE_MASK) >> BMI3_ORIENT_MODE_POS;
 8002e30:	8a3b      	ldrh	r3, [r7, #16]
 8002e32:	105b      	asrs	r3, r3, #1
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	705a      	strb	r2, [r3, #1]

                /* Get blocking */
                config->blocking = (lsb_msb & BMI3_ORIENT_BLOCKING_MASK) >> BMI3_ORIENT_BLOCKING_POS;
 8002e40:	8a3b      	ldrh	r3, [r7, #16]
 8002e42:	10db      	asrs	r3, r3, #3
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	709a      	strb	r2, [r3, #2]

                /* Get theta */
                config->theta = (lsb_msb & BMI3_ORIENT_THETA_MASK) >> BMI3_ORIENT_THETA_POS;
 8002e50:	8a3b      	ldrh	r3, [r7, #16]
 8002e52:	115b      	asrs	r3, r3, #5
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	70da      	strb	r2, [r3, #3]

                /* Get hold time */
                config->hold_time = (lsb_msb & BMI3_ORIENT_HOLD_TIME_MASK) >> BMI3_ORIENT_HOLD_TIME_POS;
 8002e60:	8a3b      	ldrh	r3, [r7, #16]
 8002e62:	0adb      	lsrs	r3, r3, #11
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate slope threshold and hysteresis from the same word */
                lsb = (uint16_t) orient_config[idx++];
 8002e6c:	7dbb      	ldrb	r3, [r7, #22]
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	75ba      	strb	r2, [r7, #22]
 8002e72:	3318      	adds	r3, #24
 8002e74:	443b      	add	r3, r7
 8002e76:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002e7a:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) orient_config[idx++] << 8);
 8002e7c:	7dbb      	ldrb	r3, [r7, #22]
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	75ba      	strb	r2, [r7, #22]
 8002e82:	3318      	adds	r3, #24
 8002e84:	443b      	add	r3, r7
 8002e86:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	021b      	lsls	r3, r3, #8
 8002e8e:	827b      	strh	r3, [r7, #18]
                lsb_msb = lsb | msb;
 8002e90:	8aba      	ldrh	r2, [r7, #20]
 8002e92:	8a7b      	ldrh	r3, [r7, #18]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	823b      	strh	r3, [r7, #16]

                /* Get slope threshold */
                config->slope_thres = lsb_msb & BMI3_ORIENT_SLOPE_THRES_MASK;
 8002e98:	8a3b      	ldrh	r3, [r7, #16]
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	719a      	strb	r2, [r3, #6]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_ORIENT_HYST_MASK) >> BMI3_ORIENT_HYST_POS;
 8002ea0:	8a3b      	ldrh	r3, [r7, #16]
 8002ea2:	0a1b      	lsrs	r3, r3, #8
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	715a      	strb	r2, [r3, #5]
 8002eac:	e001      	b.n	8002eb2 <get_orientation_config+0x10c>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002eae:	23ff      	movs	r3, #255	; 0xff
 8002eb0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002eb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <set_orientation_config>:
/*!
 * @brief This internal API sets orientation configurations like upside enable,
 * mode, blocking, theta, hold time, slope threshold and hysteresis.
 */
static int8_t set_orientation_config(const struct bmi3_orientation_config *config, struct bmi3_dev *dev)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b08a      	sub	sp, #40	; 0x28
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t orient_config[4] = { 0 };
 8002ec8:	2300      	movs	r3, #0
 8002eca:	613b      	str	r3, [r7, #16]

    /* Array to set the base address of orient feature */
    uint8_t base_aadr[2] = { BMI3_BASE_ADDR_ORIENT, 0 };
 8002ecc:	231c      	movs	r3, #28
 8002ece:	81bb      	strh	r3, [r7, #12]

    uint16_t ud_en, mode, blocking, theta, theta1, holdtime, slope_thres, hyst;

    if (config != NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 80a4 	beq.w	8003020 <set_orientation_config+0x162>
    {
        /* Set the orient base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_aadr, 2, dev);
 8002ed8:	f107 010c 	add.w	r1, r7, #12
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	2041      	movs	r0, #65	; 0x41
 8002ee2:	f7fe fb33 	bl	800154c <bmi3_set_regs>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BMI3_OK)
 8002eec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f040 8098 	bne.w	8003026 <set_orientation_config+0x168>
        {
            /* Set upside down bit */
            ud_en = BMI3_SET_BIT_POS0(orient_config[0], BMI3_ORIENT_UD_EN, config->ud_en);
 8002ef6:	7c3b      	ldrb	r3, [r7, #16]
 8002ef8:	b21b      	sxth	r3, r3
 8002efa:	f023 0301 	bic.w	r3, r3, #1
 8002efe:	b21a      	sxth	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	b21b      	sxth	r3, r3
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	b21b      	sxth	r3, r3
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	b21b      	sxth	r3, r3
 8002f10:	84bb      	strh	r3, [r7, #36]	; 0x24

            /* Set mode */
            mode = BMI3_SET_BITS(orient_config[0], BMI3_ORIENT_MODE, config->mode);
 8002f12:	7c3b      	ldrb	r3, [r7, #16]
 8002f14:	b21b      	sxth	r3, r3
 8002f16:	f023 0306 	bic.w	r3, r3, #6
 8002f1a:	b21a      	sxth	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	785b      	ldrb	r3, [r3, #1]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	b21b      	sxth	r3, r3
 8002f24:	f003 0306 	and.w	r3, r3, #6
 8002f28:	b21b      	sxth	r3, r3
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	b21b      	sxth	r3, r3
 8002f2e:	847b      	strh	r3, [r7, #34]	; 0x22

            /* Set blocking */
            blocking = BMI3_SET_BITS(orient_config[0], BMI3_ORIENT_BLOCKING, config->blocking);
 8002f30:	7c3b      	ldrb	r3, [r7, #16]
 8002f32:	b21b      	sxth	r3, r3
 8002f34:	f023 0318 	bic.w	r3, r3, #24
 8002f38:	b21a      	sxth	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	789b      	ldrb	r3, [r3, #2]
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	b21b      	sxth	r3, r3
 8002f42:	f003 0318 	and.w	r3, r3, #24
 8002f46:	b21b      	sxth	r3, r3
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	b21b      	sxth	r3, r3
 8002f4c:	843b      	strh	r3, [r7, #32]

            /* Set theta for lsb 8 bits */
            theta1 = BMI3_SET_BITS(orient_config[0], BMI3_ORIENT_THETA, config->theta);
 8002f4e:	7c3b      	ldrb	r3, [r7, #16]
 8002f50:	b21b      	sxth	r3, r3
 8002f52:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8002f56:	b21a      	sxth	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	78db      	ldrb	r3, [r3, #3]
 8002f5c:	015b      	lsls	r3, r3, #5
 8002f5e:	b21b      	sxth	r3, r3
 8002f60:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8002f64:	b21b      	sxth	r3, r3
 8002f66:	4313      	orrs	r3, r2
 8002f68:	b21b      	sxth	r3, r3
 8002f6a:	83fb      	strh	r3, [r7, #30]

            theta = ((uint16_t)orient_config[1] << 8);
 8002f6c:	7c7b      	ldrb	r3, [r7, #17]
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	021b      	lsls	r3, r3, #8
 8002f72:	83bb      	strh	r3, [r7, #28]

            /* Set theta for msb 8 bits */
            theta = BMI3_SET_BITS(theta, BMI3_ORIENT_THETA, config->theta);
 8002f74:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002f78:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8002f7c:	b21a      	sxth	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	78db      	ldrb	r3, [r3, #3]
 8002f82:	015b      	lsls	r3, r3, #5
 8002f84:	b21b      	sxth	r3, r3
 8002f86:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8002f8a:	b21b      	sxth	r3, r3
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	b21b      	sxth	r3, r3
 8002f90:	83bb      	strh	r3, [r7, #28]

            /* Set hold time */
            holdtime = BMI3_SET_BITS(orient_config[1], BMI3_ORIENT_HOLD_TIME, config->hold_time);
 8002f92:	7c7b      	ldrb	r3, [r7, #17]
 8002f94:	b21a      	sxth	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	791b      	ldrb	r3, [r3, #4]
 8002f9a:	02db      	lsls	r3, r3, #11
 8002f9c:	b21b      	sxth	r3, r3
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	b21b      	sxth	r3, r3
 8002fa2:	837b      	strh	r3, [r7, #26]

            /* Set slope threshold */
            slope_thres = BMI3_SET_BIT_POS0(orient_config[2], BMI3_ORIENT_SLOPE_THRES, config->slope_thres);
 8002fa4:	7cbb      	ldrb	r3, [r7, #18]
 8002fa6:	b21b      	sxth	r3, r3
 8002fa8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fac:	b21a      	sxth	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	799b      	ldrb	r3, [r3, #6]
 8002fb2:	b21b      	sxth	r3, r3
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	b21b      	sxth	r3, r3
 8002fb8:	833b      	strh	r3, [r7, #24]

            /* Set hysteresis */
            hyst = BMI3_SET_BITS(orient_config[3], BMI3_ORIENT_HYST, config->hysteresis);
 8002fba:	7cfb      	ldrb	r3, [r7, #19]
 8002fbc:	b21a      	sxth	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	795b      	ldrb	r3, [r3, #5]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	b21b      	sxth	r3, r3
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	b21b      	sxth	r3, r3
 8002fca:	82fb      	strh	r3, [r7, #22]

            orient_config[0] = (uint8_t)(ud_en | mode | blocking | theta1);
 8002fcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	8c3b      	ldrh	r3, [r7, #32]
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	8bfb      	ldrh	r3, [r7, #30]
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	743b      	strb	r3, [r7, #16]
            orient_config[1] = (uint8_t)((theta | holdtime) >> 8);
 8002fea:	8bba      	ldrh	r2, [r7, #28]
 8002fec:	8b7b      	ldrh	r3, [r7, #26]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	0a1b      	lsrs	r3, r3, #8
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	747b      	strb	r3, [r7, #17]
            orient_config[2] = (uint8_t)(slope_thres);
 8002ffa:	8b3b      	ldrh	r3, [r7, #24]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	74bb      	strb	r3, [r7, #18]
            orient_config[3] = (uint8_t)(hyst >> 8);
 8003000:	8afb      	ldrh	r3, [r7, #22]
 8003002:	0a1b      	lsrs	r3, r3, #8
 8003004:	b29b      	uxth	r3, r3
 8003006:	b2db      	uxtb	r3, r3
 8003008:	74fb      	strb	r3, [r7, #19]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, orient_config, 4, dev);
 800300a:	f107 0110 	add.w	r1, r7, #16
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2204      	movs	r2, #4
 8003012:	2042      	movs	r0, #66	; 0x42
 8003014:	f7fe fa9a 	bl	800154c <bmi3_set_regs>
 8003018:	4603      	mov	r3, r0
 800301a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800301e:	e002      	b.n	8003026 <set_orientation_config+0x168>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003020:	23ff      	movs	r3, #255	; 0xff
 8003022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8003026:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800302a:	4618      	mov	r0, r3
 800302c:	3728      	adds	r7, #40	; 0x28
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <get_step_config>:
/*!
 * @brief This internal API gets step counter configurations like water-mark level,
 * reset counter, step counter parameters and sc_12_res.
 */
static int8_t get_step_config(struct bmi3_step_counter_config *config, struct bmi3_dev *dev)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b08c      	sub	sp, #48	; 0x30
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t step_config[24] = { 0 };
 800303c:	2300      	movs	r3, #0
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	f107 0314 	add.w	r3, r7, #20
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	605a      	str	r2, [r3, #4]
 800304a:	609a      	str	r2, [r3, #8]
 800304c:	60da      	str	r2, [r3, #12]
 800304e:	611a      	str	r2, [r3, #16]

    /* Array to set the base address of step counter feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_STEP_CNT, 0 };
 8003050:	2310      	movs	r3, #16
 8003052:	81bb      	strh	r3, [r7, #12]

    /* Variable to define array offset */
    uint8_t idx = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint16_t msb;

    /* Variable to define word */
    uint16_t lsb_msb;

    if (config != NULL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 81e7 	beq.w	8003430 <get_step_config+0x3fe>
    {
        /* Set the step counter base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003062:	f107 010c 	add.w	r1, r7, #12
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2202      	movs	r2, #2
 800306a:	2041      	movs	r0, #65	; 0x41
 800306c:	f7fe fa6e 	bl	800154c <bmi3_set_regs>
 8003070:	4603      	mov	r3, r0
 8003072:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if (rslt == BMI3_OK)
 8003076:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800307a:	2b00      	cmp	r3, #0
 800307c:	f040 81db 	bne.w	8003436 <get_step_config+0x404>
        {
            /* Get the configuration from the feature engine register where step counter feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, step_config, 24, dev);
 8003080:	f107 0110 	add.w	r1, r7, #16
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	2218      	movs	r2, #24
 8003088:	2042      	movs	r0, #66	; 0x42
 800308a:	f7fe f9fa 	bl	8001482 <bmi3_get_regs>
 800308e:	4603      	mov	r3, r0
 8003090:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            if (rslt == BMI3_OK)
 8003094:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003098:	2b00      	cmp	r3, #0
 800309a:	f040 81cc 	bne.w	8003436 <get_step_config+0x404>
            {
                /* Get word to calculate water-mark level, reset counter from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 800309e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80030a8:	3330      	adds	r3, #48	; 0x30
 80030aa:	443b      	add	r3, r7
 80030ac:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80030b0:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80030b2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80030bc:	3330      	adds	r3, #48	; 0x30
 80030be:	443b      	add	r3, r7
 80030c0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80030c4:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80030c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030c8:	021b      	lsls	r3, r3, #8
 80030ca:	b21a      	sxth	r2, r3
 80030cc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80030d0:	4313      	orrs	r3, r2
 80030d2:	b21b      	sxth	r3, r3
 80030d4:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get water-mark level */
                config->watermark_level = lsb_msb & BMI3_STEP_WATERMARK_MASK;
 80030d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80030d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030dc:	b29a      	uxth	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	801a      	strh	r2, [r3, #0]

                /* Get reset counter */
                config->reset_counter = (lsb_msb & BMI3_STEP_RESET_COUNTER_MASK) >> BMI3_STEP_RESET_COUNTER_POS;
 80030e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80030e4:	129b      	asrs	r3, r3, #10
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	805a      	strh	r2, [r3, #2]

                /* Get word to calculate minimum distance up */
                lsb = ((uint16_t)step_config[idx++]);
 80030f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80030fc:	3330      	adds	r3, #48	; 0x30
 80030fe:	443b      	add	r3, r7
 8003100:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003104:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003106:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003110:	3330      	adds	r3, #48	; 0x30
 8003112:	443b      	add	r3, r7
 8003114:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003118:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 800311a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800311c:	021b      	lsls	r3, r3, #8
 800311e:	b21a      	sxth	r2, r3
 8003120:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003124:	4313      	orrs	r3, r2
 8003126:	b21b      	sxth	r3, r3
 8003128:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get minimum distance up */
                config->env_min_dist_up = (lsb_msb & BMI3_STEP_ENV_MIN_DIST_UP_MASK);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800312e:	809a      	strh	r2, [r3, #4]

                /* Get word to calculate env coefficient up */
                lsb = ((uint16_t)step_config[idx++]);
 8003130:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800313a:	3330      	adds	r3, #48	; 0x30
 800313c:	443b      	add	r3, r7
 800313e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003142:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003144:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800314e:	3330      	adds	r3, #48	; 0x30
 8003150:	443b      	add	r3, r7
 8003152:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003156:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003158:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800315a:	021b      	lsls	r3, r3, #8
 800315c:	b21a      	sxth	r2, r3
 800315e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003162:	4313      	orrs	r3, r2
 8003164:	b21b      	sxth	r3, r3
 8003166:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get env coefficient up */
                config->env_coef_up = (lsb_msb & BMI3_STEP_ENV_COEF_UP_MASK);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800316c:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate env minimum distance down */
                lsb = ((uint16_t)step_config[idx++]);
 800316e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003178:	3330      	adds	r3, #48	; 0x30
 800317a:	443b      	add	r3, r7
 800317c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003180:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003182:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800318c:	3330      	adds	r3, #48	; 0x30
 800318e:	443b      	add	r3, r7
 8003190:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003194:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003196:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003198:	021b      	lsls	r3, r3, #8
 800319a:	b21a      	sxth	r2, r3
 800319c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80031a0:	4313      	orrs	r3, r2
 80031a2:	b21b      	sxth	r3, r3
 80031a4:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get env minimum distance down */
                config->env_min_dist_down = (lsb_msb & BMI3_STEP_ENV_MIN_DIST_DOWN_MASK);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80031aa:	811a      	strh	r2, [r3, #8]

                /* Get word to calculate env coefficient down */
                lsb = ((uint16_t)step_config[idx++]);
 80031ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80031b6:	3330      	adds	r3, #48	; 0x30
 80031b8:	443b      	add	r3, r7
 80031ba:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80031be:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80031c0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80031ca:	3330      	adds	r3, #48	; 0x30
 80031cc:	443b      	add	r3, r7
 80031ce:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80031d2:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80031d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	b21a      	sxth	r2, r3
 80031da:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80031de:	4313      	orrs	r3, r2
 80031e0:	b21b      	sxth	r3, r3
 80031e2:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get env coefficient down */
                config->env_coef_down = (lsb_msb & BMI3_STEP_ENV_COEF_DOWN_MASK);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80031e8:	815a      	strh	r2, [r3, #10]

                /* Get word to calculate mean val decay */
                lsb = ((uint16_t)step_config[idx++]);
 80031ea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80031f4:	3330      	adds	r3, #48	; 0x30
 80031f6:	443b      	add	r3, r7
 80031f8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80031fc:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80031fe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003208:	3330      	adds	r3, #48	; 0x30
 800320a:	443b      	add	r3, r7
 800320c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003210:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003212:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003214:	021b      	lsls	r3, r3, #8
 8003216:	b21a      	sxth	r2, r3
 8003218:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800321c:	4313      	orrs	r3, r2
 800321e:	b21b      	sxth	r3, r3
 8003220:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get mean val decay */
                config->mean_val_decay = (lsb_msb & BMI3_STEP_MEAN_VAL_DECAY_MASK);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003226:	819a      	strh	r2, [r3, #12]

                /* Get word to calculate mean step duration */
                lsb = ((uint16_t)step_config[idx++]);
 8003228:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003232:	3330      	adds	r3, #48	; 0x30
 8003234:	443b      	add	r3, r7
 8003236:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800323a:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 800323c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003246:	3330      	adds	r3, #48	; 0x30
 8003248:	443b      	add	r3, r7
 800324a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800324e:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003250:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003252:	021b      	lsls	r3, r3, #8
 8003254:	b21a      	sxth	r2, r3
 8003256:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800325a:	4313      	orrs	r3, r2
 800325c:	b21b      	sxth	r3, r3
 800325e:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get mean step duration */
                config->mean_step_dur = (lsb_msb & BMI3_STEP_MEAN_STEP_DUR_MASK);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003264:	81da      	strh	r2, [r3, #14]

                /* Get word to calculate step buffer size, filter cascade enabled and step counter increment
                 * from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 8003266:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003270:	3330      	adds	r3, #48	; 0x30
 8003272:	443b      	add	r3, r7
 8003274:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003278:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 800327a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003284:	3330      	adds	r3, #48	; 0x30
 8003286:	443b      	add	r3, r7
 8003288:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800328c:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 800328e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003290:	021b      	lsls	r3, r3, #8
 8003292:	b21a      	sxth	r2, r3
 8003294:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003298:	4313      	orrs	r3, r2
 800329a:	b21b      	sxth	r3, r3
 800329c:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get step buffer size */
                config->step_buffer_size = lsb_msb & BMI3_STEP_BUFFER_SIZE_MASK;
 800329e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032a0:	f003 030f 	and.w	r3, r3, #15
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	821a      	strh	r2, [r3, #16]

                /* Get filter cascade enable */
                config->filter_cascade_enabled = (lsb_msb & BMI3_STEP_FILTER_CASCADE_ENABLED_MASK) >>
 80032aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032ac:	111b      	asrs	r3, r3, #4
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	825a      	strh	r2, [r3, #18]
                                                 BMI3_STEP_FILTER_CASCADE_ENABLED_POS;

                /* Get step counter increment */
                config->step_counter_increment = (lsb_msb & BMI3_STEP_COUNTER_INCREMENT_MASK) >>
 80032ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032bc:	095b      	lsrs	r3, r3, #5
 80032be:	b29a      	uxth	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	829a      	strh	r2, [r3, #20]
                                                 BMI3_STEP_COUNTER_INCREMENT_POS;

                /* Get word to calculate peak duration minimum walking and peak duration minimum running */
                lsb = ((uint16_t)step_config[idx++]);
 80032c4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80032ce:	3330      	adds	r3, #48	; 0x30
 80032d0:	443b      	add	r3, r7
 80032d2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80032d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80032d8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80032e2:	3330      	adds	r3, #48	; 0x30
 80032e4:	443b      	add	r3, r7
 80032e6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80032ea:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80032ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80032ee:	021b      	lsls	r3, r3, #8
 80032f0:	b21a      	sxth	r2, r3
 80032f2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80032f6:	4313      	orrs	r3, r2
 80032f8:	b21b      	sxth	r3, r3
 80032fa:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get peak duration minimum walking */
                config->peak_duration_min_walking = lsb_msb & BMI3_STEP_PEAK_DURATION_MIN_WALKING_MASK;
 80032fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	b29a      	uxth	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	82da      	strh	r2, [r3, #22]

                /* Get peak duration minimum running */
                config->peak_duration_min_running = (lsb_msb & BMI3_STEP_PEAK_DURATION_MIN_RUNNING_MASK) >>
 8003306:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003308:	0a1b      	lsrs	r3, r3, #8
 800330a:	b29a      	uxth	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	831a      	strh	r2, [r3, #24]
                                                    BMI3_STEP_PEAK_DURATION_MIN_RUNNING_POS;

                /* Get word to calculate activity detection factor and activity detection threshold
                 * from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 8003310:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800331a:	3330      	adds	r3, #48	; 0x30
 800331c:	443b      	add	r3, r7
 800331e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003322:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003324:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003328:	1c5a      	adds	r2, r3, #1
 800332a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800332e:	3330      	adds	r3, #48	; 0x30
 8003330:	443b      	add	r3, r7
 8003332:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003336:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003338:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800333a:	021b      	lsls	r3, r3, #8
 800333c:	b21a      	sxth	r2, r3
 800333e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003342:	4313      	orrs	r3, r2
 8003344:	b21b      	sxth	r3, r3
 8003346:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get activity detection factor */
                config->activity_detection_factor = lsb_msb & BMI3_STEP_ACTIVITY_DETECTION_FACTOR_MASK;
 8003348:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	b29a      	uxth	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	835a      	strh	r2, [r3, #26]

                /* Get activity detection threshold */
                config->activity_detection_thres = (lsb_msb & BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD_MASK) >>
 8003354:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003356:	091b      	lsrs	r3, r3, #4
 8003358:	b29a      	uxth	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	839a      	strh	r2, [r3, #28]
                                                   BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD_POS;

                /* Get word to calculate step duration max and step duration window from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 800335e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003368:	3330      	adds	r3, #48	; 0x30
 800336a:	443b      	add	r3, r7
 800336c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003370:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003372:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003376:	1c5a      	adds	r2, r3, #1
 8003378:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800337c:	3330      	adds	r3, #48	; 0x30
 800337e:	443b      	add	r3, r7
 8003380:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003384:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003386:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003388:	021b      	lsls	r3, r3, #8
 800338a:	b21a      	sxth	r2, r3
 800338c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003390:	4313      	orrs	r3, r2
 8003392:	b21b      	sxth	r3, r3
 8003394:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get step duration max */
                config->step_duration_max = lsb_msb & BMI3_STEP_DURATION_MAX_MASK;
 8003396:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003398:	b2db      	uxtb	r3, r3
 800339a:	b29a      	uxth	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	83da      	strh	r2, [r3, #30]

                /* Get step duration window */
                config->step_duration_window = (lsb_msb & BMI3_STEP_DURATION_WINDOW_MASK) >>
 80033a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80033a2:	0a1b      	lsrs	r3, r3, #8
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	841a      	strh	r2, [r3, #32]
                                               BMI3_STEP_DURATION_WINDOW_POS;

                /* Get word to calculate step duration pp enabled, duration threshold,
                 * mean crossing pp enabled, mcr threshold, sc_12_res from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 80033aa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80033b4:	3330      	adds	r3, #48	; 0x30
 80033b6:	443b      	add	r3, r7
 80033b8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80033bc:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80033be:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80033c8:	3330      	adds	r3, #48	; 0x30
 80033ca:	443b      	add	r3, r7
 80033cc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80033d0:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80033d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033d4:	021b      	lsls	r3, r3, #8
 80033d6:	b21a      	sxth	r2, r3
 80033d8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80033dc:	4313      	orrs	r3, r2
 80033de:	b21b      	sxth	r3, r3
 80033e0:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get step duration pp enable */
                config->step_duration_pp_enabled = lsb_msb & BMI3_STEP_DURATION_PP_ENABLED_MASK;
 80033e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	845a      	strh	r2, [r3, #34]	; 0x22

                /* Get step duration threshold */
                config->step_duration_thres = (lsb_msb & BMI3_STEP_DURATION_THRESHOLD_MASK) >>
 80033ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80033f0:	105b      	asrs	r3, r3, #1
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	849a      	strh	r2, [r3, #36]	; 0x24
                                              BMI3_STEP_DURATION_THRESHOLD_POS;

                /* Get mean crossing pp enabled */
                config->mean_crossing_pp_enabled = (lsb_msb & BMI3_STEP_MEAN_CROSSING_PP_ENABLED_MASK) >>
 80033fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003400:	111b      	asrs	r3, r3, #4
 8003402:	b29b      	uxth	r3, r3
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	b29a      	uxth	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	84da      	strh	r2, [r3, #38]	; 0x26
                                                   BMI3_STEP_MEAN_CROSSING_PP_ENABLED_POS;

                /* Get mcr threshold */
                config->mcr_threshold = (lsb_msb & BMI3_STEP_MCR_THRESHOLD_MASK) >> BMI3_STEP_MCR_THRESHOLD_POS;
 800340e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003410:	115b      	asrs	r3, r3, #5
 8003412:	b29b      	uxth	r3, r3
 8003414:	f003 031f 	and.w	r3, r3, #31
 8003418:	b29a      	uxth	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	851a      	strh	r2, [r3, #40]	; 0x28

                /* Get sc_12_res selection */
                config->sc_12_res = (lsb_msb & BMI3_STEP_SC_12_RES_MASK) >> BMI3_STEP_SC_12_RES_POS;
 800341e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003420:	129b      	asrs	r3, r3, #10
 8003422:	b29b      	uxth	r3, r3
 8003424:	f003 0303 	and.w	r3, r3, #3
 8003428:	b29a      	uxth	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800342e:	e002      	b.n	8003436 <get_step_config+0x404>
            }
        }
    }
    else
    {
        rslt = BMI3_E_INVALID_SENSOR;
 8003430:	23fa      	movs	r3, #250	; 0xfa
 8003432:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return rslt;
 8003436:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800343a:	4618      	mov	r0, r3
 800343c:	3730      	adds	r7, #48	; 0x30
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <set_step_config>:
/*!
 * @brief This internal API sets step counter configurations like water-mark level,
 * reset counter, step counter parameters and sc_12_res.
 */
static int8_t set_step_config(const struct bmi3_step_counter_config *config, struct bmi3_dev *dev)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b0a4      	sub	sp, #144	; 0x90
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of step counter feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_STEP_CNT, 0 };
 800344c:	2310      	movs	r3, #16
 800344e:	873b      	strh	r3, [r7, #56]	; 0x38

    /* Array to define the feature configuration */
    uint8_t step_config[24] = { 0 };
 8003450:	2300      	movs	r3, #0
 8003452:	623b      	str	r3, [r7, #32]
 8003454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	609a      	str	r2, [r3, #8]
 8003460:	60da      	str	r2, [r3, #12]
 8003462:	611a      	str	r2, [r3, #16]

    uint8_t data_array[24] = { 0 };
 8003464:	2300      	movs	r3, #0
 8003466:	60bb      	str	r3, [r7, #8]
 8003468:	f107 030c 	add.w	r3, r7, #12
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	605a      	str	r2, [r3, #4]
 8003472:	609a      	str	r2, [r3, #8]
 8003474:	60da      	str	r2, [r3, #12]
 8003476:	611a      	str	r2, [r3, #16]
    uint16_t reset_counter, activity_detection_factor, step_duration_max, step_duration_window,
             step_duration_pp_enabled;

    uint16_t step_duration_threshold, mean_crossing_pp_enabled, mcr_threshold1, mcr_threshold2, sc_12_res;

    if (config != NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 8268 	beq.w	8003950 <set_step_config+0x50e>
    {
        /* Set the step counter base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003480:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	2202      	movs	r2, #2
 8003488:	2041      	movs	r0, #65	; 0x41
 800348a:	f7fe f85f 	bl	800154c <bmi3_set_regs>
 800348e:	4603      	mov	r3, r0
 8003490:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

        if (rslt == BMI3_OK)
 8003494:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8003498:	2b00      	cmp	r3, #0
 800349a:	f040 825c 	bne.w	8003956 <set_step_config+0x514>
        {
            /* Set water-mark for lsb 8 bits */
            watermark1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_STEP_WATERMARK, config->watermark_level);
 800349e:	7a3b      	ldrb	r3, [r7, #8]
 80034a0:	b21b      	sxth	r3, r3
 80034a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034a6:	f023 0303 	bic.w	r3, r3, #3
 80034aa:	b21a      	sxth	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	b21b      	sxth	r3, r3
 80034b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034b6:	b21b      	sxth	r3, r3
 80034b8:	4313      	orrs	r3, r2
 80034ba:	b21b      	sxth	r3, r3
 80034bc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

            watermark = ((uint16_t)data_array[1] << 8);
 80034c0:	7a7b      	ldrb	r3, [r7, #9]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	021b      	lsls	r3, r3, #8
 80034c6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

            /* Set water-mark for msb 8 bits */
            watermark2 = BMI3_SET_BIT_POS0(watermark, BMI3_STEP_WATERMARK, config->watermark_level);
 80034ca:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80034ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034d2:	f023 0303 	bic.w	r3, r3, #3
 80034d6:	b21a      	sxth	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	b21b      	sxth	r3, r3
 80034de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034e2:	b21b      	sxth	r3, r3
 80034e4:	4313      	orrs	r3, r2
 80034e6:	b21b      	sxth	r3, r3
 80034e8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

            reset_counter = ((uint16_t)data_array[1] << 8);
 80034ec:	7a7b      	ldrb	r3, [r7, #9]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	021b      	lsls	r3, r3, #8
 80034f2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

            /* Set reset counter */
            reset_counter = BMI3_SET_BITS(reset_counter, BMI3_STEP_RESET_COUNTER, config->reset_counter);
 80034f6:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 80034fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034fe:	b21a      	sxth	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	885b      	ldrh	r3, [r3, #2]
 8003504:	029b      	lsls	r3, r3, #10
 8003506:	b21b      	sxth	r3, r3
 8003508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800350c:	b21b      	sxth	r3, r3
 800350e:	4313      	orrs	r3, r2
 8003510:	b21b      	sxth	r3, r3
 8003512:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

            /* Set env_min_dist_up for lsb 8 bits */
            env_min_dist_up1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_STEP_ENV_MIN_DIST_UP, config->env_min_dist_up);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	889b      	ldrh	r3, [r3, #4]
 800351a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

            env_min_dist_up = ((uint16_t)data_array[3] << 8);
 800351e:	7afb      	ldrb	r3, [r7, #11]
 8003520:	b29b      	uxth	r3, r3
 8003522:	021b      	lsls	r3, r3, #8
 8003524:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

            /* Set env_min_dist_up for msb 8 bits */
            env_min_dist_up2 = BMI3_SET_BIT_POS0(env_min_dist_up, BMI3_STEP_ENV_MIN_DIST_UP, config->env_min_dist_up);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	889b      	ldrh	r3, [r3, #4]
 800352c:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

            /* Set env_coef_up for lsb 8 bits */
            env_coef_up1 = BMI3_SET_BIT_POS0(data_array[4], BMI3_STEP_ENV_COEF_UP, config->env_coef_up);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	88db      	ldrh	r3, [r3, #6]
 8003534:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

            env_coef_up = ((uint16_t)data_array[5] << 8);
 8003538:	7b7b      	ldrb	r3, [r7, #13]
 800353a:	b29b      	uxth	r3, r3
 800353c:	021b      	lsls	r3, r3, #8
 800353e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

            /* Set env_coef_up for msb 8 bits */
            env_coef_up2 = BMI3_SET_BIT_POS0(env_coef_up, BMI3_STEP_ENV_COEF_UP, config->env_coef_up);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	88db      	ldrh	r3, [r3, #6]
 8003546:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

            /* Set env_min_dist_down for lsb 8 bits */
            env_min_dist_down1 =
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	891b      	ldrh	r3, [r3, #8]
 800354e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
                BMI3_SET_BIT_POS0(data_array[6], BMI3_STEP_ENV_MIN_DIST_DOWN, config->env_min_dist_down);

            env_min_dist_down = ((uint16_t)data_array[7] << 8);
 8003552:	7bfb      	ldrb	r3, [r7, #15]
 8003554:	b29b      	uxth	r3, r3
 8003556:	021b      	lsls	r3, r3, #8
 8003558:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Set env_min_dist_down for msb 8 bits */
            env_min_dist_down2 = BMI3_SET_BIT_POS0(env_min_dist_down,
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	891b      	ldrh	r3, [r3, #8]
 8003560:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
                                                   BMI3_STEP_ENV_MIN_DIST_DOWN,
                                                   config->env_min_dist_down);

            /* Set env_coef_down for lsb 8 bits */
            env_coef_down1 = BMI3_SET_BIT_POS0(data_array[8], BMI3_STEP_ENV_COEF_DOWN, config->env_coef_down);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	895b      	ldrh	r3, [r3, #10]
 8003568:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

            env_coef_down = ((uint16_t)data_array[9] << 8);
 800356c:	7c7b      	ldrb	r3, [r7, #17]
 800356e:	b29b      	uxth	r3, r3
 8003570:	021b      	lsls	r3, r3, #8
 8003572:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

            /* Set env_coef_down for msb 8 bits */
            env_coef_down2 = BMI3_SET_BIT_POS0(env_coef_down, BMI3_STEP_ENV_COEF_DOWN, config->env_coef_down);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	895b      	ldrh	r3, [r3, #10]
 800357a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

            /* Set mean_val_decay for lsb 8 bits */
            mean_val_decay1 = BMI3_SET_BIT_POS0(data_array[10], BMI3_STEP_MEAN_VAL_DECAY, config->mean_val_decay);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	899b      	ldrh	r3, [r3, #12]
 8003582:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

            mean_val_decay = ((uint16_t)data_array[11] << 8);
 8003586:	7cfb      	ldrb	r3, [r7, #19]
 8003588:	b29b      	uxth	r3, r3
 800358a:	021b      	lsls	r3, r3, #8
 800358c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

            /* Set mean_val_decay for msb 8 bits */
            mean_val_decay2 = BMI3_SET_BIT_POS0(mean_val_decay, BMI3_STEP_MEAN_VAL_DECAY, config->mean_val_decay);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	899b      	ldrh	r3, [r3, #12]
 8003594:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

            /* Set mean_step_dur for lsb 8 bits */
            mean_step_dur1 = BMI3_SET_BIT_POS0(data_array[12], BMI3_STEP_MEAN_STEP_DUR, config->mean_step_dur);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	89db      	ldrh	r3, [r3, #14]
 800359c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

            mean_step_dur = ((uint16_t)data_array[13] << 8);
 80035a0:	7d7b      	ldrb	r3, [r7, #21]
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

            /* Set mean_step_dur for msb 8 bits */
            mean_step_dur2 = BMI3_SET_BIT_POS0(mean_step_dur, BMI3_STEP_MEAN_STEP_DUR, config->mean_step_dur);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	89db      	ldrh	r3, [r3, #14]
 80035ae:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

            /* Set step buffer size */
            step_buffer_size = BMI3_SET_BIT_POS0(data_array[14], BMI3_STEP_BUFFER_SIZE, config->step_buffer_size);
 80035b2:	7dbb      	ldrb	r3, [r7, #22]
 80035b4:	b21b      	sxth	r3, r3
 80035b6:	f023 030f 	bic.w	r3, r3, #15
 80035ba:	b21a      	sxth	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	8a1b      	ldrh	r3, [r3, #16]
 80035c0:	b21b      	sxth	r3, r3
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	b21b      	sxth	r3, r3
 80035c8:	4313      	orrs	r3, r2
 80035ca:	b21b      	sxth	r3, r3
 80035cc:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

            /* Set filter cascade */
            filter_cascade_enabled = BMI3_SET_BITS(data_array[14],
 80035d0:	7dbb      	ldrb	r3, [r7, #22]
 80035d2:	b21b      	sxth	r3, r3
 80035d4:	f023 0310 	bic.w	r3, r3, #16
 80035d8:	b21a      	sxth	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	8a5b      	ldrh	r3, [r3, #18]
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	b21b      	sxth	r3, r3
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	b21b      	sxth	r3, r3
 80035e8:	4313      	orrs	r3, r2
 80035ea:	b21b      	sxth	r3, r3
 80035ec:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                                                   BMI3_STEP_FILTER_CASCADE_ENABLED,
                                                   config->filter_cascade_enabled);

            /* Set step_counter_increment for lsb 8 bits */
            step_counter_increment1 = BMI3_SET_BITS(data_array[14],
 80035f0:	7dbb      	ldrb	r3, [r7, #22]
 80035f2:	b21b      	sxth	r3, r3
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	b21a      	sxth	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	8a9b      	ldrh	r3, [r3, #20]
 80035fe:	015b      	lsls	r3, r3, #5
 8003600:	b21b      	sxth	r3, r3
 8003602:	4313      	orrs	r3, r2
 8003604:	b21b      	sxth	r3, r3
 8003606:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
                                                    BMI3_STEP_COUNTER_INCREMENT,
                                                    config->step_counter_increment);

            step_counter_increment2 = ((uint16_t)data_array[15] << 8);
 800360a:	7dfb      	ldrb	r3, [r7, #23]
 800360c:	b29b      	uxth	r3, r3
 800360e:	021b      	lsls	r3, r3, #8
 8003610:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            /* Set step_counter_increment for msb 8 bits */
            step_counter_increment2 = BMI3_SET_BITS(step_counter_increment2,
 8003614:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	b21a      	sxth	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	8a9b      	ldrh	r3, [r3, #20]
 8003622:	015b      	lsls	r3, r3, #5
 8003624:	b21b      	sxth	r3, r3
 8003626:	4313      	orrs	r3, r2
 8003628:	b21b      	sxth	r3, r3
 800362a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
                                                    BMI3_STEP_COUNTER_INCREMENT,
                                                    config->step_counter_increment);

            /* Set peak_duration_min_walking for lsb 8 bits */
            peak_duration_min_walking = BMI3_SET_BIT_POS0(data_array[16],
 800362e:	7e3b      	ldrb	r3, [r7, #24]
 8003630:	b21b      	sxth	r3, r3
 8003632:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003636:	b21a      	sxth	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8adb      	ldrh	r3, [r3, #22]
 800363c:	b21b      	sxth	r3, r3
 800363e:	b2db      	uxtb	r3, r3
 8003640:	b21b      	sxth	r3, r3
 8003642:	4313      	orrs	r3, r2
 8003644:	b21b      	sxth	r3, r3
 8003646:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                                                          BMI3_STEP_PEAK_DURATION_MIN_WALKING,
                                                          config->peak_duration_min_walking);

            peak_duration_min_running = ((uint16_t)data_array[17] << 8);
 800364a:	7e7b      	ldrb	r3, [r7, #25]
 800364c:	b29b      	uxth	r3, r3
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            /* Set peak_duration_min_walking for msb 8 bits */
            peak_duration_min_running = BMI3_SET_BITS(peak_duration_min_running,
 8003654:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8003658:	b2db      	uxtb	r3, r3
 800365a:	b21a      	sxth	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	8b1b      	ldrh	r3, [r3, #24]
 8003660:	021b      	lsls	r3, r3, #8
 8003662:	b21b      	sxth	r3, r3
 8003664:	4313      	orrs	r3, r2
 8003666:	b21b      	sxth	r3, r3
 8003668:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                                                      BMI3_STEP_PEAK_DURATION_MIN_RUNNING,
                                                      config->peak_duration_min_running);

            /* Set activity detection fsctor */
            activity_detection_factor = BMI3_SET_BIT_POS0(data_array[18],
 800366c:	7ebb      	ldrb	r3, [r7, #26]
 800366e:	b21b      	sxth	r3, r3
 8003670:	f023 030f 	bic.w	r3, r3, #15
 8003674:	b21a      	sxth	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	8b5b      	ldrh	r3, [r3, #26]
 800367a:	b21b      	sxth	r3, r3
 800367c:	f003 030f 	and.w	r3, r3, #15
 8003680:	b21b      	sxth	r3, r3
 8003682:	4313      	orrs	r3, r2
 8003684:	b21b      	sxth	r3, r3
 8003686:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                                                          BMI3_STEP_ACTIVITY_DETECTION_FACTOR,
                                                          config->activity_detection_factor);

            /* Set activity_detection_threshold for lsb 8 bits */
            activity_detection_threshold1 = BMI3_SET_BITS(data_array[18],
 800368a:	7ebb      	ldrb	r3, [r7, #26]
 800368c:	b21b      	sxth	r3, r3
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	b21a      	sxth	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	8b9b      	ldrh	r3, [r3, #28]
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	b21b      	sxth	r3, r3
 800369c:	4313      	orrs	r3, r2
 800369e:	b21b      	sxth	r3, r3
 80036a0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                                                          BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD,
                                                          config->activity_detection_thres);

            activity_detection_threshold = ((uint16_t)data_array[19] << 8);
 80036a4:	7efb      	ldrb	r3, [r7, #27]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	021b      	lsls	r3, r3, #8
 80036aa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

            /* Set activity_detection_threshold for msb 8 bits */
            activity_detection_threshold2 = BMI3_SET_BITS(activity_detection_threshold,
 80036ae:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	b21a      	sxth	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	8b9b      	ldrh	r3, [r3, #28]
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	b21b      	sxth	r3, r3
 80036c0:	4313      	orrs	r3, r2
 80036c2:	b21b      	sxth	r3, r3
 80036c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                                                          BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD,
                                                          config->activity_detection_thres);

            /* Set maximum step duration */
            step_duration_max = BMI3_SET_BIT_POS0(data_array[20], BMI3_STEP_DURATION_MAX, config->step_duration_max);
 80036c8:	7f3b      	ldrb	r3, [r7, #28]
 80036ca:	b21b      	sxth	r3, r3
 80036cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036d0:	b21a      	sxth	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	8bdb      	ldrh	r3, [r3, #30]
 80036d6:	b21b      	sxth	r3, r3
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	b21b      	sxth	r3, r3
 80036dc:	4313      	orrs	r3, r2
 80036de:	b21b      	sxth	r3, r3
 80036e0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

            step_duration_window = ((uint16_t)data_array[21] << 8);
 80036e4:	7f7b      	ldrb	r3, [r7, #29]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	021b      	lsls	r3, r3, #8
 80036ea:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

            /* Set step duration window */
            step_duration_window = BMI3_SET_BITS(step_duration_window,
 80036ee:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	b21a      	sxth	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	8c1b      	ldrh	r3, [r3, #32]
 80036fa:	021b      	lsls	r3, r3, #8
 80036fc:	b21b      	sxth	r3, r3
 80036fe:	4313      	orrs	r3, r2
 8003700:	b21b      	sxth	r3, r3
 8003702:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                                                 BMI3_STEP_DURATION_WINDOW,
                                                 config->step_duration_window);

            step_duration_pp_enabled = BMI3_SET_BIT_POS0(data_array[22],
 8003706:	7fbb      	ldrb	r3, [r7, #30]
 8003708:	b21b      	sxth	r3, r3
 800370a:	f023 0301 	bic.w	r3, r3, #1
 800370e:	b21a      	sxth	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003714:	b21b      	sxth	r3, r3
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	b21b      	sxth	r3, r3
 800371c:	4313      	orrs	r3, r2
 800371e:	b21b      	sxth	r3, r3
 8003720:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                                                         BMI3_STEP_DURATION_PP_ENABLED,
                                                         config->step_duration_pp_enabled);

            step_duration_threshold = BMI3_SET_BITS(data_array[22],
 8003724:	7fbb      	ldrb	r3, [r7, #30]
 8003726:	b21b      	sxth	r3, r3
 8003728:	f023 030e 	bic.w	r3, r3, #14
 800372c:	b21a      	sxth	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	b21b      	sxth	r3, r3
 8003736:	f003 030e 	and.w	r3, r3, #14
 800373a:	b21b      	sxth	r3, r3
 800373c:	4313      	orrs	r3, r2
 800373e:	b21b      	sxth	r3, r3
 8003740:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
                                                    BMI3_STEP_DURATION_THRESHOLD,
                                                    config->step_duration_thres);

            mean_crossing_pp_enabled = BMI3_SET_BITS(data_array[22],
 8003744:	7fbb      	ldrb	r3, [r7, #30]
 8003746:	b21b      	sxth	r3, r3
 8003748:	f023 0310 	bic.w	r3, r3, #16
 800374c:	b21a      	sxth	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	b21b      	sxth	r3, r3
 8003756:	f003 0310 	and.w	r3, r3, #16
 800375a:	b21b      	sxth	r3, r3
 800375c:	4313      	orrs	r3, r2
 800375e:	b21b      	sxth	r3, r3
 8003760:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
                                                     BMI3_STEP_MEAN_CROSSING_PP_ENABLED,
                                                     config->mean_crossing_pp_enabled);

            /* Set mcr_threshold for lsb 8 bits */
            mcr_threshold1 = BMI3_SET_BITS(data_array[22], BMI3_STEP_MCR_THRESHOLD, config->mcr_threshold);
 8003764:	7fbb      	ldrb	r3, [r7, #30]
 8003766:	b21b      	sxth	r3, r3
 8003768:	f423 7378 	bic.w	r3, r3, #992	; 0x3e0
 800376c:	b21a      	sxth	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003772:	015b      	lsls	r3, r3, #5
 8003774:	b21b      	sxth	r3, r3
 8003776:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
 800377a:	b21b      	sxth	r3, r3
 800377c:	4313      	orrs	r3, r2
 800377e:	b21b      	sxth	r3, r3
 8003780:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

            mcr_threshold = ((uint16_t)data_array[23] << 8);
 8003784:	7ffb      	ldrb	r3, [r7, #31]
 8003786:	b29b      	uxth	r3, r3
 8003788:	021b      	lsls	r3, r3, #8
 800378a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            /* Set mcr_threshold for msb 8 bits */
            mcr_threshold2 = BMI3_SET_BITS(mcr_threshold, BMI3_STEP_MCR_THRESHOLD, config->mcr_threshold);
 800378e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8003792:	f423 7378 	bic.w	r3, r3, #992	; 0x3e0
 8003796:	b21a      	sxth	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379c:	015b      	lsls	r3, r3, #5
 800379e:	b21b      	sxth	r3, r3
 80037a0:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
 80037a4:	b21b      	sxth	r3, r3
 80037a6:	4313      	orrs	r3, r2
 80037a8:	b21b      	sxth	r3, r3
 80037aa:	87fb      	strh	r3, [r7, #62]	; 0x3e

            sc_12_res = ((uint16_t)data_array[23] << 8);
 80037ac:	7ffb      	ldrb	r3, [r7, #31]
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	021b      	lsls	r3, r3, #8
 80037b2:	87bb      	strh	r3, [r7, #60]	; 0x3c

            sc_12_res = BMI3_SET_BITS(sc_12_res, BMI3_STEP_SC_12_RES, config->sc_12_res);
 80037b4:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80037b8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80037bc:	b21a      	sxth	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c2:	029b      	lsls	r3, r3, #10
 80037c4:	b21b      	sxth	r3, r3
 80037c6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037ca:	b21b      	sxth	r3, r3
 80037cc:	4313      	orrs	r3, r2
 80037ce:	b21b      	sxth	r3, r3
 80037d0:	87bb      	strh	r3, [r7, #60]	; 0x3c

            step_config[0] = (uint8_t)watermark1;
 80037d2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	f887 3020 	strb.w	r3, [r7, #32]
            step_config[1] = (uint8_t)((watermark2 | reset_counter) >> 8);
 80037dc:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 80037e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80037e4:	4313      	orrs	r3, r2
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	0a1b      	lsrs	r3, r3, #8
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            step_config[2] = (uint8_t)env_min_dist_up1;
 80037f2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            step_config[3] = (uint8_t)(env_min_dist_up2 >> 8);
 80037fc:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8003800:	0a1b      	lsrs	r3, r3, #8
 8003802:	b29b      	uxth	r3, r3
 8003804:	b2db      	uxtb	r3, r3
 8003806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            step_config[4] = (uint8_t)env_coef_up1;
 800380a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800380e:	b2db      	uxtb	r3, r3
 8003810:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            step_config[5] = (uint8_t)(env_coef_up2 >> 8);
 8003814:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003818:	0a1b      	lsrs	r3, r3, #8
 800381a:	b29b      	uxth	r3, r3
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            step_config[6] = (uint8_t)env_min_dist_down1;
 8003822:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8003826:	b2db      	uxtb	r3, r3
 8003828:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            step_config[7] = (uint8_t)(env_min_dist_down2 >> 8);
 800382c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003830:	0a1b      	lsrs	r3, r3, #8
 8003832:	b29b      	uxth	r3, r3
 8003834:	b2db      	uxtb	r3, r3
 8003836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            step_config[8] = (uint8_t)env_coef_down1;
 800383a:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800383e:	b2db      	uxtb	r3, r3
 8003840:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            step_config[9] = (uint8_t)(env_coef_down2 >> 8);
 8003844:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003848:	0a1b      	lsrs	r3, r3, #8
 800384a:	b29b      	uxth	r3, r3
 800384c:	b2db      	uxtb	r3, r3
 800384e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            step_config[10] = (uint8_t)mean_val_decay1;
 8003852:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003856:	b2db      	uxtb	r3, r3
 8003858:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            step_config[11] = (uint8_t)(mean_val_decay2 >> 8);
 800385c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8003860:	0a1b      	lsrs	r3, r3, #8
 8003862:	b29b      	uxth	r3, r3
 8003864:	b2db      	uxtb	r3, r3
 8003866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            step_config[12] = (uint8_t)mean_step_dur1;
 800386a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800386e:	b2db      	uxtb	r3, r3
 8003870:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
            step_config[13] = (uint8_t)(mean_step_dur2 >> 8);
 8003874:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003878:	0a1b      	lsrs	r3, r3, #8
 800387a:	b29b      	uxth	r3, r3
 800387c:	b2db      	uxtb	r3, r3
 800387e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            step_config[14] = (uint8_t)(step_buffer_size | filter_cascade_enabled | step_counter_increment1);
 8003882:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8003886:	b2da      	uxtb	r2, r3
 8003888:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800388c:	b2db      	uxtb	r3, r3
 800388e:	4313      	orrs	r3, r2
 8003890:	b2da      	uxtb	r2, r3
 8003892:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003896:	b2db      	uxtb	r3, r3
 8003898:	4313      	orrs	r3, r2
 800389a:	b2db      	uxtb	r3, r3
 800389c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            step_config[15] = (uint8_t)(step_counter_increment2 >> 8);
 80038a0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80038a4:	0a1b      	lsrs	r3, r3, #8
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            step_config[16] = (uint8_t)peak_duration_min_walking;
 80038ae:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            step_config[17] = (uint8_t)(peak_duration_min_running >> 8);
 80038b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80038bc:	0a1b      	lsrs	r3, r3, #8
 80038be:	b29b      	uxth	r3, r3
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            step_config[18] = (uint8_t)(activity_detection_factor | activity_detection_threshold1);
 80038c6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	4313      	orrs	r3, r2
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
            step_config[19] = (uint8_t)(activity_detection_threshold2 >> 8);
 80038da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80038de:	0a1b      	lsrs	r3, r3, #8
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            step_config[20] = (uint8_t)step_duration_max;
 80038e8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            step_config[21] = (uint8_t)(step_duration_window >> 8);
 80038f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80038f6:	0a1b      	lsrs	r3, r3, #8
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            step_config[22] =
                (uint8_t)(step_duration_pp_enabled | step_duration_threshold | mean_crossing_pp_enabled |
 8003900:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003904:	b2da      	uxtb	r2, r3
 8003906:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800390a:	b2db      	uxtb	r3, r3
 800390c:	4313      	orrs	r3, r2
 800390e:	b2da      	uxtb	r2, r3
 8003910:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003914:	b2db      	uxtb	r3, r3
 8003916:	4313      	orrs	r3, r2
 8003918:	b2da      	uxtb	r2, r3
 800391a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800391e:	b2db      	uxtb	r3, r3
 8003920:	4313      	orrs	r3, r2
 8003922:	b2db      	uxtb	r3, r3
            step_config[22] =
 8003924:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                          mcr_threshold1);
            step_config[23] = (uint8_t)((mcr_threshold2 | sc_12_res) >> 8);
 8003928:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800392a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800392c:	4313      	orrs	r3, r2
 800392e:	b29b      	uxth	r3, r3
 8003930:	0a1b      	lsrs	r3, r3, #8
 8003932:	b29b      	uxth	r3, r3
 8003934:	b2db      	uxtb	r3, r3
 8003936:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

            /* Set the configuration back to feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, step_config, 24, dev);
 800393a:	f107 0120 	add.w	r1, r7, #32
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2218      	movs	r2, #24
 8003942:	2042      	movs	r0, #66	; 0x42
 8003944:	f7fd fe02 	bl	800154c <bmi3_set_regs>
 8003948:	4603      	mov	r3, r0
 800394a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800394e:	e002      	b.n	8003956 <set_step_config+0x514>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003950:	23ff      	movs	r3, #255	; 0xff
 8003952:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }

    return rslt;
 8003956:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
}
 800395a:	4618      	mov	r0, r3
 800395c:	3790      	adds	r7, #144	; 0x90
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <get_tap_config>:
 * @brief This internal API gets tap configurations like axes select, wait for time out, mode,
 * max peaks for tap, duration, tap peak threshold, max gest duration, max dur bw peaks,
 * shock settling duration.
 */
static int8_t get_tap_config(struct bmi3_tap_detector_config *config, struct bmi3_dev *dev)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b088      	sub	sp, #32
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t tap_config[6] = { 0 };
 800396c:	2300      	movs	r3, #0
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	2300      	movs	r3, #0
 8003972:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of tap feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_TAP, 0 };
 8003974:	231e      	movs	r3, #30
 8003976:	81bb      	strh	r3, [r7, #12]

    /* Variable to define array offset */
    uint8_t idx = 0;
 8003978:	2300      	movs	r3, #0
 800397a:	77bb      	strb	r3, [r7, #30]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 80a7 	beq.w	8003ad2 <get_tap_config+0x170>
    {
        /* Set the tap base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003984:	f107 010c 	add.w	r1, r7, #12
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	2202      	movs	r2, #2
 800398c:	2041      	movs	r0, #65	; 0x41
 800398e:	f7fd fddd 	bl	800154c <bmi3_set_regs>
 8003992:	4603      	mov	r3, r0
 8003994:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8003996:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800399a:	2b00      	cmp	r3, #0
 800399c:	f040 809b 	bne.w	8003ad6 <get_tap_config+0x174>
        {
            /* Get the configuration from the feature engine register where tap feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, tap_config, 6, dev);
 80039a0:	f107 0110 	add.w	r1, r7, #16
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	2206      	movs	r2, #6
 80039a8:	2042      	movs	r0, #66	; 0x42
 80039aa:	f7fd fd6a 	bl	8001482 <bmi3_get_regs>
 80039ae:	4603      	mov	r3, r0
 80039b0:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 80039b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f040 808d 	bne.w	8003ad6 <get_tap_config+0x174>
            {
                /* Get word to calculate axis select, wait for time out, max peaks for tap and mode
                 * from the same word */
                lsb = (uint16_t) tap_config[idx++];
 80039bc:	7fbb      	ldrb	r3, [r7, #30]
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	77ba      	strb	r2, [r7, #30]
 80039c2:	3320      	adds	r3, #32
 80039c4:	443b      	add	r3, r7
 80039c6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80039ca:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) tap_config[idx++] << 8);
 80039cc:	7fbb      	ldrb	r3, [r7, #30]
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	77ba      	strb	r2, [r7, #30]
 80039d2:	3320      	adds	r3, #32
 80039d4:	443b      	add	r3, r7
 80039d6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	021b      	lsls	r3, r3, #8
 80039de:	837b      	strh	r3, [r7, #26]
                lsb_msb = lsb | msb;
 80039e0:	8bba      	ldrh	r2, [r7, #28]
 80039e2:	8b7b      	ldrh	r3, [r7, #26]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	833b      	strh	r3, [r7, #24]

                /* Get axis selection */
                config->axis_sel = lsb_msb & BMI3_TAP_AXIS_SEL_MASK;
 80039e8:	8b3b      	ldrh	r3, [r7, #24]
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	701a      	strb	r2, [r3, #0]

                /* Get wait for time out */
                config->wait_for_timeout = (lsb_msb & BMI3_TAP_WAIT_FR_TIME_OUT_MASK) >> BMI3_TAP_WAIT_FR_TIME_OUT_POS;
 80039f6:	8b3b      	ldrh	r3, [r7, #24]
 80039f8:	109b      	asrs	r3, r3, #2
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	705a      	strb	r2, [r3, #1]

                /* Get max peaks for tap */
                config->max_peaks_for_tap = (lsb_msb & BMI3_TAP_MAX_PEAKS_MASK) >> BMI3_TAP_MAX_PEAKS_POS;
 8003a06:	8b3b      	ldrh	r3, [r7, #24]
 8003a08:	10db      	asrs	r3, r3, #3
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	709a      	strb	r2, [r3, #2]

                /* Get mode */
                config->mode = (lsb_msb & BMI3_TAP_MODE_MASK) >> BMI3_TAP_MODE_POS;
 8003a16:	8b3b      	ldrh	r3, [r7, #24]
 8003a18:	119b      	asrs	r3, r3, #6
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	f003 0303 	and.w	r3, r3, #3
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	70da      	strb	r2, [r3, #3]

                /* Get word to calculate threshold, output configuration from the same word */
                lsb = (uint16_t) tap_config[idx++];
 8003a26:	7fbb      	ldrb	r3, [r7, #30]
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	77ba      	strb	r2, [r7, #30]
 8003a2c:	3320      	adds	r3, #32
 8003a2e:	443b      	add	r3, r7
 8003a30:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003a34:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) tap_config[idx++] << 8);
 8003a36:	7fbb      	ldrb	r3, [r7, #30]
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	77ba      	strb	r2, [r7, #30]
 8003a3c:	3320      	adds	r3, #32
 8003a3e:	443b      	add	r3, r7
 8003a40:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	021b      	lsls	r3, r3, #8
 8003a48:	837b      	strh	r3, [r7, #26]
                lsb_msb = lsb | msb;
 8003a4a:	8bba      	ldrh	r2, [r7, #28]
 8003a4c:	8b7b      	ldrh	r3, [r7, #26]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	833b      	strh	r3, [r7, #24]

                /* Get tap peak threshold */
                config->tap_peak_thres = lsb_msb & BMI3_TAP_PEAK_THRES_MASK;
 8003a52:	8b3b      	ldrh	r3, [r7, #24]
 8003a54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	809a      	strh	r2, [r3, #4]

                /* Get max gesture duration */
                config->max_gest_dur = (lsb_msb & BMI3_TAP_MAX_GEST_DUR_MASK) >> BMI3_TAP_MAX_GEST_DUR_POS;
 8003a5e:	8b3b      	ldrh	r3, [r7, #24]
 8003a60:	0a9b      	lsrs	r3, r3, #10
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	719a      	strb	r2, [r3, #6]

                /* Get word to calculate max_dur_between_peaks, tap_shock_settling_dur, min_quite_dur_between_taps
                 *  and quite_time_after_gest from the same word */
                lsb = (uint16_t) tap_config[idx++];
 8003a6a:	7fbb      	ldrb	r3, [r7, #30]
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	77ba      	strb	r2, [r7, #30]
 8003a70:	3320      	adds	r3, #32
 8003a72:	443b      	add	r3, r7
 8003a74:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003a78:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) tap_config[idx++] << 8);
 8003a7a:	7fbb      	ldrb	r3, [r7, #30]
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	77ba      	strb	r2, [r7, #30]
 8003a80:	3320      	adds	r3, #32
 8003a82:	443b      	add	r3, r7
 8003a84:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	021b      	lsls	r3, r3, #8
 8003a8c:	837b      	strh	r3, [r7, #26]
                lsb_msb = lsb | msb;
 8003a8e:	8bba      	ldrh	r2, [r7, #28]
 8003a90:	8b7b      	ldrh	r3, [r7, #26]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	833b      	strh	r3, [r7, #24]

                /* Get maximum duration between peaks */
                config->max_dur_between_peaks = lsb_msb & BMI3_TAP_MAX_DUR_BW_PEAKS_MASK;
 8003a96:	8b3b      	ldrh	r3, [r7, #24]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	71da      	strb	r2, [r3, #7]

                /* Get tap shock settling duration */
                config->tap_shock_settling_dur = (lsb_msb & BMI3_TAP_SHOCK_SETT_DUR_MASK) >>
 8003aa4:	8b3b      	ldrh	r3, [r7, #24]
 8003aa6:	111b      	asrs	r3, r3, #4
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	721a      	strb	r2, [r3, #8]
                                                 BMI3_TAP_SHOCK_SETT_DUR_POS;

                /* Get minimum quite duration between taps */
                config->min_quite_dur_between_taps = (lsb_msb & BMI3_TAP_MIN_QUITE_DUR_BW_TAPS_MASK) >>
 8003ab4:	8b3b      	ldrh	r3, [r7, #24]
 8003ab6:	121b      	asrs	r3, r3, #8
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	725a      	strb	r2, [r3, #9]
                                                     BMI3_TAP_MIN_QUITE_DUR_BW_TAPS_POS;

                /* Get quite time after gesture */
                config->quite_time_after_gest = (lsb_msb & BMI3_TAP_QUITE_TIME_AFTR_GEST_MASK) >>
 8003ac4:	8b3b      	ldrh	r3, [r7, #24]
 8003ac6:	0b1b      	lsrs	r3, r3, #12
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	729a      	strb	r2, [r3, #10]
 8003ad0:	e001      	b.n	8003ad6 <get_tap_config+0x174>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003ad2:	23ff      	movs	r3, #255	; 0xff
 8003ad4:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8003ad6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3720      	adds	r7, #32
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <set_tap_config>:
 * @brief This internal API sets tap configurations like axes select, wait for time out, mode,
 * max peaks for tap, duration, tap peak threshold, max gest duration, max dur bw peaks,
 * shock settling duration.
 */
static int8_t set_tap_config(const struct bmi3_tap_detector_config *config, struct bmi3_dev *dev)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b08c      	sub	sp, #48	; 0x30
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
 8003aea:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t tap_config[6] = { 0 };
 8003aec:	2300      	movs	r3, #0
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	2300      	movs	r3, #0
 8003af2:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of tap feature */
    uint8_t base_aadr[2] = { BMI3_BASE_ADDR_TAP, 0 };
 8003af4:	231e      	movs	r3, #30
 8003af6:	81bb      	strh	r3, [r7, #12]

    uint16_t axis_sel, wait_fr_time_out, max_peaks_for_tap, mode;
    uint16_t tap_peak_thres, tap_peak_thres1, tap_peak_thres2, max_gest_dur;
    uint16_t max_dur_between_peaks, tap_shock_setting_dur, min_quite_dur_between_taps, quite_time_after_gest;

    if (config != NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 80f0 	beq.w	8003ce0 <set_tap_config+0x1fe>
    {
        /* Set the tap base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_aadr, 2, dev);
 8003b00:	f107 010c 	add.w	r1, r7, #12
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	2202      	movs	r2, #2
 8003b08:	2041      	movs	r0, #65	; 0x41
 8003b0a:	f7fd fd1f 	bl	800154c <bmi3_set_regs>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if (rslt == BMI3_OK)
 8003b14:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f040 80e4 	bne.w	8003ce6 <set_tap_config+0x204>
        {
            /* Set axis_sel */
            axis_sel = BMI3_SET_BIT_POS0(tap_config[0], BMI3_TAP_AXIS_SEL, config->axis_sel);
 8003b1e:	7c3b      	ldrb	r3, [r7, #16]
 8003b20:	b21b      	sxth	r3, r3
 8003b22:	f023 0303 	bic.w	r3, r3, #3
 8003b26:	b21a      	sxth	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	b21b      	sxth	r3, r3
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	b21b      	sxth	r3, r3
 8003b34:	4313      	orrs	r3, r2
 8003b36:	b21b      	sxth	r3, r3
 8003b38:	85bb      	strh	r3, [r7, #44]	; 0x2c

            /* Set wait for time out */
            wait_fr_time_out = BMI3_SET_BITS(tap_config[0], BMI3_TAP_WAIT_FR_TIME_OUT, config->wait_for_timeout);
 8003b3a:	7c3b      	ldrb	r3, [r7, #16]
 8003b3c:	b21b      	sxth	r3, r3
 8003b3e:	f023 0304 	bic.w	r3, r3, #4
 8003b42:	b21a      	sxth	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	785b      	ldrb	r3, [r3, #1]
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	b21b      	sxth	r3, r3
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	b21b      	sxth	r3, r3
 8003b52:	4313      	orrs	r3, r2
 8003b54:	b21b      	sxth	r3, r3
 8003b56:	857b      	strh	r3, [r7, #42]	; 0x2a

            /* Set maximum peaks for tap */
            max_peaks_for_tap = BMI3_SET_BITS(tap_config[0], BMI3_TAP_MAX_PEAKS, config->max_peaks_for_tap);
 8003b58:	7c3b      	ldrb	r3, [r7, #16]
 8003b5a:	b21b      	sxth	r3, r3
 8003b5c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003b60:	b21a      	sxth	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	789b      	ldrb	r3, [r3, #2]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	b21b      	sxth	r3, r3
 8003b6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b6e:	b21b      	sxth	r3, r3
 8003b70:	4313      	orrs	r3, r2
 8003b72:	b21b      	sxth	r3, r3
 8003b74:	853b      	strh	r3, [r7, #40]	; 0x28

            /* Set mode */
            mode = BMI3_SET_BITS(tap_config[0], BMI3_TAP_MODE, config->mode);
 8003b76:	7c3b      	ldrb	r3, [r7, #16]
 8003b78:	b21b      	sxth	r3, r3
 8003b7a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003b7e:	b21a      	sxth	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	78db      	ldrb	r3, [r3, #3]
 8003b84:	019b      	lsls	r3, r3, #6
 8003b86:	b21b      	sxth	r3, r3
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	b21b      	sxth	r3, r3
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	b21b      	sxth	r3, r3
 8003b90:	84fb      	strh	r3, [r7, #38]	; 0x26

            /* Set peak threshold first byte in word */
            tap_peak_thres = BMI3_SET_BIT_POS0(tap_config[2], BMI3_TAP_PEAK_THRES, config->tap_peak_thres);
 8003b92:	7cbb      	ldrb	r3, [r7, #18]
 8003b94:	b21b      	sxth	r3, r3
 8003b96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b9a:	f023 0303 	bic.w	r3, r3, #3
 8003b9e:	b21a      	sxth	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	889b      	ldrh	r3, [r3, #4]
 8003ba4:	b21b      	sxth	r3, r3
 8003ba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003baa:	b21b      	sxth	r3, r3
 8003bac:	4313      	orrs	r3, r2
 8003bae:	b21b      	sxth	r3, r3
 8003bb0:	84bb      	strh	r3, [r7, #36]	; 0x24

            /* Left shift by 8 times so that we can set rest of the values of tap peak threshold conf in word */
            tap_peak_thres1 = ((uint16_t)tap_config[3] << 8);
 8003bb2:	7cfb      	ldrb	r3, [r7, #19]
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	021b      	lsls	r3, r3, #8
 8003bb8:	847b      	strh	r3, [r7, #34]	; 0x22

            /* Set peak threshold second byte in word */
            tap_peak_thres2 = BMI3_SET_BIT_POS0(tap_peak_thres1, BMI3_TAP_PEAK_THRES, config->tap_peak_thres);
 8003bba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003bbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bc2:	f023 0303 	bic.w	r3, r3, #3
 8003bc6:	b21a      	sxth	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	889b      	ldrh	r3, [r3, #4]
 8003bcc:	b21b      	sxth	r3, r3
 8003bce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bd2:	b21b      	sxth	r3, r3
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	b21b      	sxth	r3, r3
 8003bd8:	843b      	strh	r3, [r7, #32]

            max_gest_dur = ((uint16_t)tap_config[3] << 8);
 8003bda:	7cfb      	ldrb	r3, [r7, #19]
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	021b      	lsls	r3, r3, #8
 8003be0:	83fb      	strh	r3, [r7, #30]

            /* Set max gesture duration */
            max_gest_dur = BMI3_SET_BITS(max_gest_dur, BMI3_TAP_MAX_GEST_DUR, config->max_gest_dur);
 8003be2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003be6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bea:	b21a      	sxth	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	799b      	ldrb	r3, [r3, #6]
 8003bf0:	029b      	lsls	r3, r3, #10
 8003bf2:	b21b      	sxth	r3, r3
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	b21b      	sxth	r3, r3
 8003bf8:	83fb      	strh	r3, [r7, #30]

            /* Set max duration between peaks */
            max_dur_between_peaks = BMI3_SET_BIT_POS0(tap_config[4],
 8003bfa:	7d3b      	ldrb	r3, [r7, #20]
 8003bfc:	b21b      	sxth	r3, r3
 8003bfe:	f023 030f 	bic.w	r3, r3, #15
 8003c02:	b21a      	sxth	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	79db      	ldrb	r3, [r3, #7]
 8003c08:	b21b      	sxth	r3, r3
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	b21b      	sxth	r3, r3
 8003c10:	4313      	orrs	r3, r2
 8003c12:	b21b      	sxth	r3, r3
 8003c14:	83bb      	strh	r3, [r7, #28]
                                                      BMI3_TAP_MAX_DUR_BW_PEAKS,
                                                      config->max_dur_between_peaks);

            /* Set shock settling duration */
            tap_shock_setting_dur =
                BMI3_SET_BITS(tap_config[4], BMI3_TAP_SHOCK_SETT_DUR, config->tap_shock_settling_dur);
 8003c16:	7d3b      	ldrb	r3, [r7, #20]
 8003c18:	b21b      	sxth	r3, r3
 8003c1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c1e:	b21a      	sxth	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	7a1b      	ldrb	r3, [r3, #8]
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	b21b      	sxth	r3, r3
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	b21b      	sxth	r3, r3
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	b21b      	sxth	r3, r3
            tap_shock_setting_dur =
 8003c30:	837b      	strh	r3, [r7, #26]

            min_quite_dur_between_taps = ((uint16_t)tap_config[5] << 8);
 8003c32:	7d7b      	ldrb	r3, [r7, #21]
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	833b      	strh	r3, [r7, #24]

            /* Set quite duration between taps */
            min_quite_dur_between_taps = BMI3_SET_BITS(min_quite_dur_between_taps,
 8003c3a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003c3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c42:	b21a      	sxth	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	7a5b      	ldrb	r3, [r3, #9]
 8003c48:	021b      	lsls	r3, r3, #8
 8003c4a:	b21b      	sxth	r3, r3
 8003c4c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c50:	b21b      	sxth	r3, r3
 8003c52:	4313      	orrs	r3, r2
 8003c54:	b21b      	sxth	r3, r3
 8003c56:	833b      	strh	r3, [r7, #24]
                                                       BMI3_TAP_MIN_QUITE_DUR_BW_TAPS,
                                                       config->min_quite_dur_between_taps);

            quite_time_after_gest = ((uint16_t)tap_config[5] << 8);
 8003c58:	7d7b      	ldrb	r3, [r7, #21]
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	021b      	lsls	r3, r3, #8
 8003c5e:	82fb      	strh	r3, [r7, #22]

            /* Set quite time after gesture */
            quite_time_after_gest = BMI3_SET_BITS(quite_time_after_gest,
 8003c60:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c68:	b21a      	sxth	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	7a9b      	ldrb	r3, [r3, #10]
 8003c6e:	031b      	lsls	r3, r3, #12
 8003c70:	b21b      	sxth	r3, r3
 8003c72:	4313      	orrs	r3, r2
 8003c74:	b21b      	sxth	r3, r3
 8003c76:	82fb      	strh	r3, [r7, #22]
                                                  BMI3_TAP_QUITE_TIME_AFTR_GEST,
                                                  config->quite_time_after_gest);

            /* Copy all the configurations back to the tap configuration array */
            tap_config[0] = (uint8_t)(axis_sel | wait_fr_time_out | max_peaks_for_tap | mode);
 8003c78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	4313      	orrs	r3, r2
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	4313      	orrs	r3, r2
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	743b      	strb	r3, [r7, #16]
            tap_config[2] = (uint8_t)(tap_peak_thres);
 8003c96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	74bb      	strb	r3, [r7, #18]
            tap_config[3] = (uint8_t)((tap_peak_thres2 | max_gest_dur) >> 8);
 8003c9c:	8c3a      	ldrh	r2, [r7, #32]
 8003c9e:	8bfb      	ldrh	r3, [r7, #30]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	0a1b      	lsrs	r3, r3, #8
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	74fb      	strb	r3, [r7, #19]
            tap_config[4] = (uint8_t)(max_dur_between_peaks | tap_shock_setting_dur);
 8003cac:	8bbb      	ldrh	r3, [r7, #28]
 8003cae:	b2da      	uxtb	r2, r3
 8003cb0:	8b7b      	ldrh	r3, [r7, #26]
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	753b      	strb	r3, [r7, #20]
            tap_config[5] = (uint8_t)((min_quite_dur_between_taps | quite_time_after_gest) >> 8);
 8003cba:	8b3a      	ldrh	r2, [r7, #24]
 8003cbc:	8afb      	ldrh	r3, [r7, #22]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	0a1b      	lsrs	r3, r3, #8
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	757b      	strb	r3, [r7, #21]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, tap_config, 6, dev);
 8003cca:	f107 0110 	add.w	r1, r7, #16
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2206      	movs	r2, #6
 8003cd2:	2042      	movs	r0, #66	; 0x42
 8003cd4:	f7fd fc3a 	bl	800154c <bmi3_set_regs>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003cde:	e002      	b.n	8003ce6 <set_tap_config+0x204>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003ce0:	23ff      	movs	r3, #255	; 0xff
 8003ce2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return rslt;
 8003ce6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3730      	adds	r7, #48	; 0x30
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <set_alternate_accel_config>:
/*!
 * @brief This internal API sets alternate accelerometer configurations like ODR,
 * accel mode and average number of samples.
 */
static int8_t set_alternate_accel_config(const struct bmi3_alt_accel_config *config, struct bmi3_dev *dev)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b086      	sub	sp, #24
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	81bb      	strh	r3, [r7, #12]

    uint16_t alt_acc_odr, alt_acc_avg_num, alt_acc_mode;

    if (config != NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d03a      	beq.n	8003d7c <set_alternate_accel_config+0x8a>
    {
        /* Set alternate accelerometer ODR */
        alt_acc_odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_ALT_ACC_ODR, config->alt_acc_odr);
 8003d06:	7b3b      	ldrb	r3, [r7, #12]
 8003d08:	b21b      	sxth	r3, r3
 8003d0a:	f023 030f 	bic.w	r3, r3, #15
 8003d0e:	b21a      	sxth	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	b21b      	sxth	r3, r3
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	b21b      	sxth	r3, r3
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	b21b      	sxth	r3, r3
 8003d20:	82bb      	strh	r3, [r7, #20]

        /* Set alternate accelerometer average number of samples */
        alt_acc_avg_num = BMI3_SET_BITS(reg_data[1], BMI3_ALT_ACC_AVG_NUM, config->alt_acc_avg_num);
 8003d22:	7b7b      	ldrb	r3, [r7, #13]
 8003d24:	b21a      	sxth	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	789b      	ldrb	r3, [r3, #2]
 8003d2a:	021b      	lsls	r3, r3, #8
 8003d2c:	b21b      	sxth	r3, r3
 8003d2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d32:	b21b      	sxth	r3, r3
 8003d34:	4313      	orrs	r3, r2
 8003d36:	b21b      	sxth	r3, r3
 8003d38:	827b      	strh	r3, [r7, #18]

        /* Set alternate accelerometer mode */
        alt_acc_mode = BMI3_SET_BITS(reg_data[1], BMI3_ALT_ACC_MODE, config->alt_acc_mode);
 8003d3a:	7b7b      	ldrb	r3, [r7, #13]
 8003d3c:	b21a      	sxth	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	785b      	ldrb	r3, [r3, #1]
 8003d42:	031b      	lsls	r3, r3, #12
 8003d44:	b21b      	sxth	r3, r3
 8003d46:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003d4a:	b21b      	sxth	r3, r3
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	b21b      	sxth	r3, r3
 8003d50:	823b      	strh	r3, [r7, #16]

        reg_data[0] = (uint8_t)(alt_acc_odr);
 8003d52:	8abb      	ldrh	r3, [r7, #20]
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	733b      	strb	r3, [r7, #12]
        reg_data[1] = (uint8_t)((alt_acc_avg_num | alt_acc_mode) >> 8);
 8003d58:	8a7a      	ldrh	r2, [r7, #18]
 8003d5a:	8a3b      	ldrh	r3, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	0a1b      	lsrs	r3, r3, #8
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	737b      	strb	r3, [r7, #13]

        /* Set configurations of alternate accel */
        rslt = bmi3_set_regs(BMI3_REG_ALT_ACC_CONF, reg_data, 2, dev);
 8003d68:	f107 010c 	add.w	r1, r7, #12
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	2028      	movs	r0, #40	; 0x28
 8003d72:	f7fd fbeb 	bl	800154c <bmi3_set_regs>
 8003d76:	4603      	mov	r3, r0
 8003d78:	75fb      	strb	r3, [r7, #23]
 8003d7a:	e001      	b.n	8003d80 <set_alternate_accel_config+0x8e>
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003d7c:	23ff      	movs	r3, #255	; 0xff
 8003d7e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003d80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <get_alternate_accel_config>:
/*!
 * @brief This internal API gets alternate accelerometer configurations like ODR,
 * accel mode and average number of samples.
 */
static int8_t get_alternate_accel_config(struct bmi3_alt_accel_config *config, struct bmi3_dev *dev)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 8003d96:	2300      	movs	r3, #0
 8003d98:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d02a      	beq.n	8003df6 <get_alternate_accel_config+0x6a>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_ALT_ACC_CONF, data_array, 2, dev);
 8003da0:	f107 0108 	add.w	r1, r7, #8
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	2202      	movs	r2, #2
 8003da8:	2028      	movs	r0, #40	; 0x28
 8003daa:	f7fd fb6a 	bl	8001482 <bmi3_get_regs>
 8003dae:	4603      	mov	r3, r0
 8003db0:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8003db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d11f      	bne.n	8003dfa <get_alternate_accel_config+0x6e>
        {
            reg_data = data_array[0];
 8003dba:	7a3b      	ldrb	r3, [r7, #8]
 8003dbc:	81bb      	strh	r3, [r7, #12]

            /* Get alternate accelerometer ODR */
            config->alt_acc_odr = BMI3_GET_BIT_POS0(reg_data, BMI3_ALT_ACC_ODR);
 8003dbe:	89bb      	ldrh	r3, [r7, #12]
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	701a      	strb	r2, [r3, #0]

            reg_data = ((uint16_t)data_array[1] << 8);
 8003dcc:	7a7b      	ldrb	r3, [r7, #9]
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	021b      	lsls	r3, r3, #8
 8003dd2:	81bb      	strh	r3, [r7, #12]

            /* Get alternate accelerometer average samples */
            config->alt_acc_avg_num = BMI3_GET_BITS(reg_data, BMI3_ALT_ACC_AVG_NUM);
 8003dd4:	89bb      	ldrh	r3, [r7, #12]
 8003dd6:	121b      	asrs	r3, r3, #8
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	709a      	strb	r2, [r3, #2]

            /* Get alternate accel mode */
            config->alt_acc_mode = BMI3_GET_BITS(reg_data, BMI3_ALT_ACC_MODE);
 8003de4:	89bb      	ldrh	r3, [r7, #12]
 8003de6:	131b      	asrs	r3, r3, #12
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	705a      	strb	r2, [r3, #1]
 8003df4:	e001      	b.n	8003dfa <get_alternate_accel_config+0x6e>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003df6:	23ff      	movs	r3, #255	; 0xff
 8003df8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <set_alternate_gyro_config>:
/*!
 * @brief This internal API sets alternate gyro configurations like ODR,
 * gyro mode and average number of samples.
 */
static int8_t set_alternate_gyro_config(const struct bmi3_alt_gyro_config *config, struct bmi3_dev *dev)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b086      	sub	sp, #24
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8003e10:	2300      	movs	r3, #0
 8003e12:	81bb      	strh	r3, [r7, #12]

    uint16_t alt_gyro_odr, alt_gyro_avg_num, alt_gyro_mode;

    if (config != NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d03a      	beq.n	8003e90 <set_alternate_gyro_config+0x8a>
    {
        /* Set alternate gyro ODR */
        alt_gyro_odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_ALT_GYR_ODR, config->alt_gyro_odr);
 8003e1a:	7b3b      	ldrb	r3, [r7, #12]
 8003e1c:	b21b      	sxth	r3, r3
 8003e1e:	f023 030f 	bic.w	r3, r3, #15
 8003e22:	b21a      	sxth	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	b21b      	sxth	r3, r3
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	b21b      	sxth	r3, r3
 8003e30:	4313      	orrs	r3, r2
 8003e32:	b21b      	sxth	r3, r3
 8003e34:	82bb      	strh	r3, [r7, #20]

        /* Set alternate gyro average number of samples */
        alt_gyro_avg_num = BMI3_SET_BITS(reg_data[1], BMI3_ALT_GYR_AVG_NUM, config->alt_gyro_avg_num);
 8003e36:	7b7b      	ldrb	r3, [r7, #13]
 8003e38:	b21a      	sxth	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	789b      	ldrb	r3, [r3, #2]
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	b21b      	sxth	r3, r3
 8003e42:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e46:	b21b      	sxth	r3, r3
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	b21b      	sxth	r3, r3
 8003e4c:	827b      	strh	r3, [r7, #18]

        /* Set alternate gyro mode */
        alt_gyro_mode = BMI3_SET_BITS(reg_data[1], BMI3_ALT_GYR_MODE, config->alt_gyro_mode);
 8003e4e:	7b7b      	ldrb	r3, [r7, #13]
 8003e50:	b21a      	sxth	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	785b      	ldrb	r3, [r3, #1]
 8003e56:	031b      	lsls	r3, r3, #12
 8003e58:	b21b      	sxth	r3, r3
 8003e5a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003e5e:	b21b      	sxth	r3, r3
 8003e60:	4313      	orrs	r3, r2
 8003e62:	b21b      	sxth	r3, r3
 8003e64:	823b      	strh	r3, [r7, #16]

        reg_data[0] = (uint8_t)(alt_gyro_odr);
 8003e66:	8abb      	ldrh	r3, [r7, #20]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	733b      	strb	r3, [r7, #12]
        reg_data[1] = (uint8_t)((alt_gyro_avg_num | alt_gyro_mode) >> 8);
 8003e6c:	8a7a      	ldrh	r2, [r7, #18]
 8003e6e:	8a3b      	ldrh	r3, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	0a1b      	lsrs	r3, r3, #8
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	737b      	strb	r3, [r7, #13]

        /* Set configurations of alternate gyro */
        rslt = bmi3_set_regs(BMI3_REG_ALT_GYR_CONF, reg_data, 2, dev);
 8003e7c:	f107 010c 	add.w	r1, r7, #12
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	2202      	movs	r2, #2
 8003e84:	2029      	movs	r0, #41	; 0x29
 8003e86:	f7fd fb61 	bl	800154c <bmi3_set_regs>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	75fb      	strb	r3, [r7, #23]
 8003e8e:	e001      	b.n	8003e94 <set_alternate_gyro_config+0x8e>
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003e90:	23ff      	movs	r3, #255	; 0xff
 8003e92:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003e94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <get_alternate_gyro_config>:
/*!
 * @brief This internal API gets alternate gyro configurations like ODR,
 * gyro mode and average number of samples.
 */
static int8_t get_alternate_gyro_config(struct bmi3_alt_gyro_config *config, struct bmi3_dev *dev)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 8003eaa:	2300      	movs	r3, #0
 8003eac:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d02a      	beq.n	8003f0a <get_alternate_gyro_config+0x6a>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_ALT_GYR_CONF, data_array, 2, dev);
 8003eb4:	f107 0108 	add.w	r1, r7, #8
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	2029      	movs	r0, #41	; 0x29
 8003ebe:	f7fd fae0 	bl	8001482 <bmi3_get_regs>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8003ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d11f      	bne.n	8003f0e <get_alternate_gyro_config+0x6e>
        {
            reg_data = data_array[0];
 8003ece:	7a3b      	ldrb	r3, [r7, #8]
 8003ed0:	81bb      	strh	r3, [r7, #12]

            /* Get alternate gyro ODR */
            config->alt_gyro_odr = BMI3_GET_BIT_POS0(reg_data, BMI3_ALT_GYR_ODR);
 8003ed2:	89bb      	ldrh	r3, [r7, #12]
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	701a      	strb	r2, [r3, #0]

            reg_data = ((uint16_t)data_array[1] << 8);
 8003ee0:	7a7b      	ldrb	r3, [r7, #9]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	81bb      	strh	r3, [r7, #12]

            /* Get alternate gyro average samples */
            config->alt_gyro_avg_num = BMI3_GET_BITS(reg_data, BMI3_ALT_GYR_AVG_NUM);
 8003ee8:	89bb      	ldrh	r3, [r7, #12]
 8003eea:	121b      	asrs	r3, r3, #8
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	709a      	strb	r2, [r3, #2]

            /* Get alternate gyro mode */
            config->alt_gyro_mode = BMI3_GET_BITS(reg_data, BMI3_ALT_GYR_MODE);
 8003ef8:	89bb      	ldrh	r3, [r7, #12]
 8003efa:	131b      	asrs	r3, r3, #12
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	705a      	strb	r2, [r3, #1]
 8003f08:	e001      	b.n	8003f0e <get_alternate_gyro_config+0x6e>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003f0a:	23ff      	movs	r3, #255	; 0xff
 8003f0c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <set_alternate_auto_config>:

/*!
 * @brief This internal API sets alternate auto configurations for feature interrupts.
 */
static int8_t set_alternate_auto_config(const struct bmi3_auto_config_change *config, struct bmi3_dev *dev)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b086      	sub	sp, #24
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the alternate auto configuration */
    uint8_t alt_auto_config[2] = { 0 };
 8003f24:	2300      	movs	r3, #0
 8003f26:	823b      	strh	r3, [r7, #16]

    /* Array to set the base address of alternate auto config */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ALT_AUTO_CONFIG, 0 };
 8003f28:	2323      	movs	r3, #35	; 0x23
 8003f2a:	81bb      	strh	r3, [r7, #12]

    uint8_t alt_switch, user_switch;

    if (config != NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d035      	beq.n	8003f9e <set_alternate_auto_config+0x84>
    {
        /* Set the alternate auto config base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003f32:	f107 010c 	add.w	r1, r7, #12
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2202      	movs	r2, #2
 8003f3a:	2041      	movs	r0, #65	; 0x41
 8003f3c:	f7fd fb06 	bl	800154c <bmi3_set_regs>
 8003f40:	4603      	mov	r3, r0
 8003f42:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8003f44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d12a      	bne.n	8003fa2 <set_alternate_auto_config+0x88>
        {
            /* Set alternate switch config */
            alt_switch = BMI3_SET_BIT_POS0(alt_auto_config[0],
 8003f4c:	7c3b      	ldrb	r3, [r7, #16]
 8003f4e:	b25b      	sxtb	r3, r3
 8003f50:	f023 030f 	bic.w	r3, r3, #15
 8003f54:	b25a      	sxtb	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	b25b      	sxtb	r3, r3
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	b25b      	sxtb	r3, r3
 8003f62:	4313      	orrs	r3, r2
 8003f64:	b25b      	sxtb	r3, r3
 8003f66:	75bb      	strb	r3, [r7, #22]
                                           BMI3_ALT_CONF_ALT_SWITCH,
                                           config->alt_conf_alt_switch_src_select);

            /* Set alternate user config */
            user_switch = BMI3_SET_BITS(alt_auto_config[0],
 8003f68:	7c3b      	ldrb	r3, [r7, #16]
 8003f6a:	b25b      	sxtb	r3, r3
 8003f6c:	f003 030f 	and.w	r3, r3, #15
 8003f70:	b25a      	sxtb	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	785b      	ldrb	r3, [r3, #1]
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	b25b      	sxtb	r3, r3
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	b25b      	sxtb	r3, r3
 8003f7e:	757b      	strb	r3, [r7, #21]
                                        BMI3_ALT_CONF_USER_SWITCH,
                                        config->alt_conf_user_switch_src_select);

            alt_auto_config[0] = alt_switch | user_switch;
 8003f80:	7dba      	ldrb	r2, [r7, #22]
 8003f82:	7d7b      	ldrb	r3, [r7, #21]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	743b      	strb	r3, [r7, #16]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, alt_auto_config, 2, dev);
 8003f8a:	f107 0110 	add.w	r1, r7, #16
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2202      	movs	r2, #2
 8003f92:	2042      	movs	r0, #66	; 0x42
 8003f94:	f7fd fada 	bl	800154c <bmi3_set_regs>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	75fb      	strb	r3, [r7, #23]
 8003f9c:	e001      	b.n	8003fa2 <set_alternate_auto_config+0x88>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003f9e:	23ff      	movs	r3, #255	; 0xff
 8003fa0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003fa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <get_alternate_auto_config>:

/*!
 * @brief This internal API gets alternate auto configurations for feature interrupts.
 */
static int8_t get_alternate_auto_config(struct bmi3_auto_config_change *config, struct bmi3_dev *dev)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b084      	sub	sp, #16
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the alternate auto configuration */
    uint8_t alt_auto_config[2] = { 0 };
 8003fb8:	2300      	movs	r3, #0
 8003fba:	81bb      	strh	r3, [r7, #12]

    /* Array to set the base address of alternate auto config */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ALT_AUTO_CONFIG, 0 };
 8003fbc:	2323      	movs	r3, #35	; 0x23
 8003fbe:	813b      	strh	r3, [r7, #8]

    if (config != NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d025      	beq.n	8004012 <get_alternate_auto_config+0x64>
    {
        /* Set the alternate auto config base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003fc6:	f107 0108 	add.w	r1, r7, #8
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2202      	movs	r2, #2
 8003fce:	2041      	movs	r0, #65	; 0x41
 8003fd0:	f7fd fabc 	bl	800154c <bmi3_set_regs>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8003fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d11a      	bne.n	8004016 <get_alternate_auto_config+0x68>
        {
            /* Get the configuration from the feature engine register where alternate config feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, alt_auto_config, 2, dev);
 8003fe0:	f107 010c 	add.w	r1, r7, #12
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	2042      	movs	r0, #66	; 0x42
 8003fea:	f7fd fa4a 	bl	8001482 <bmi3_get_regs>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI3_OK)
 8003ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10d      	bne.n	8004016 <get_alternate_auto_config+0x68>
            {
                /* Get alternate switch config */
                config->alt_conf_alt_switch_src_select = alt_auto_config[0] & BMI3_ALT_CONF_ALT_SWITCH_MASK;
 8003ffa:	7b3b      	ldrb	r3, [r7, #12]
 8003ffc:	f003 030f 	and.w	r3, r3, #15
 8004000:	b2da      	uxtb	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	701a      	strb	r2, [r3, #0]

                /* Get alternate user config */
                config->alt_conf_user_switch_src_select = (alt_auto_config[0] & BMI3_ALT_CONF_USER_SWITCH_MASK) >>
 8004006:	7b3b      	ldrb	r3, [r7, #12]
 8004008:	091b      	lsrs	r3, r3, #4
 800400a:	b2da      	uxtb	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	705a      	strb	r2, [r3, #1]
 8004010:	e001      	b.n	8004016 <get_alternate_auto_config+0x68>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004012:	23ff      	movs	r3, #255	; 0xff
 8004014:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004016:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <validate_acc_odr_avg>:

/*!
 * @brief This internal API is used to validate ODR and AVG combinations for accel
 */
static int8_t validate_acc_odr_avg(uint8_t acc_odr, uint8_t acc_avg)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	460a      	mov	r2, r1
 800402e:	71fb      	strb	r3, [r7, #7]
 8004030:	4613      	mov	r3, r2
 8004032:	71bb      	strb	r3, [r7, #6]
    int8_t rslt;

    float odr = 0.0, avg = 0.0;
 8004034:	f04f 0300 	mov.w	r3, #0
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	f04f 0300 	mov.w	r3, #0
 800403e:	613b      	str	r3, [r7, #16]

    switch (acc_odr)
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	3b01      	subs	r3, #1
 8004044:	2b09      	cmp	r3, #9
 8004046:	d835      	bhi.n	80040b4 <validate_acc_odr_avg+0x90>
 8004048:	a201      	add	r2, pc, #4	; (adr r2, 8004050 <validate_acc_odr_avg+0x2c>)
 800404a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404e:	bf00      	nop
 8004050:	08004079 	.word	0x08004079
 8004054:	0800407f 	.word	0x0800407f
 8004058:	08004085 	.word	0x08004085
 800405c:	0800408b 	.word	0x0800408b
 8004060:	08004091 	.word	0x08004091
 8004064:	08004097 	.word	0x08004097
 8004068:	0800409d 	.word	0x0800409d
 800406c:	080040a3 	.word	0x080040a3
 8004070:	080040a9 	.word	0x080040a9
 8004074:	080040af 	.word	0x080040af
    {
        case BMI3_ACC_ODR_0_78HZ:
            odr = 0.78125;
 8004078:	4b2f      	ldr	r3, [pc, #188]	; (8004138 <validate_acc_odr_avg+0x114>)
 800407a:	617b      	str	r3, [r7, #20]
            break;
 800407c:	e01b      	b.n	80040b6 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_1_56HZ:
            odr = 1.5625;
 800407e:	4b2f      	ldr	r3, [pc, #188]	; (800413c <validate_acc_odr_avg+0x118>)
 8004080:	617b      	str	r3, [r7, #20]
            break;
 8004082:	e018      	b.n	80040b6 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_3_125HZ:
            odr = 3.125;
 8004084:	4b2e      	ldr	r3, [pc, #184]	; (8004140 <validate_acc_odr_avg+0x11c>)
 8004086:	617b      	str	r3, [r7, #20]
            break;
 8004088:	e015      	b.n	80040b6 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_6_25HZ:
            odr = 6.25;
 800408a:	4b2e      	ldr	r3, [pc, #184]	; (8004144 <validate_acc_odr_avg+0x120>)
 800408c:	617b      	str	r3, [r7, #20]
            break;
 800408e:	e012      	b.n	80040b6 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_12_5HZ:
            odr = 12.5;
 8004090:	4b2d      	ldr	r3, [pc, #180]	; (8004148 <validate_acc_odr_avg+0x124>)
 8004092:	617b      	str	r3, [r7, #20]
            break;
 8004094:	e00f      	b.n	80040b6 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_25HZ:
            odr = 25.0;
 8004096:	4b2d      	ldr	r3, [pc, #180]	; (800414c <validate_acc_odr_avg+0x128>)
 8004098:	617b      	str	r3, [r7, #20]
            break;
 800409a:	e00c      	b.n	80040b6 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_50HZ:
            odr = 50.0;
 800409c:	4b2c      	ldr	r3, [pc, #176]	; (8004150 <validate_acc_odr_avg+0x12c>)
 800409e:	617b      	str	r3, [r7, #20]
            break;
 80040a0:	e009      	b.n	80040b6 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_100HZ:
            odr = 100.0;
 80040a2:	4b2c      	ldr	r3, [pc, #176]	; (8004154 <validate_acc_odr_avg+0x130>)
 80040a4:	617b      	str	r3, [r7, #20]
            break;
 80040a6:	e006      	b.n	80040b6 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_200HZ:
            odr = 200.0;
 80040a8:	4b2b      	ldr	r3, [pc, #172]	; (8004158 <validate_acc_odr_avg+0x134>)
 80040aa:	617b      	str	r3, [r7, #20]
            break;
 80040ac:	e003      	b.n	80040b6 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_400HZ:
            odr = 400.0;
 80040ae:	4b2b      	ldr	r3, [pc, #172]	; (800415c <validate_acc_odr_avg+0x138>)
 80040b0:	617b      	str	r3, [r7, #20]
            break;
 80040b2:	e000      	b.n	80040b6 <validate_acc_odr_avg+0x92>
        default:
            break;
 80040b4:	bf00      	nop
    }

    switch (acc_avg)
 80040b6:	79bb      	ldrb	r3, [r7, #6]
 80040b8:	2b06      	cmp	r3, #6
 80040ba:	d82d      	bhi.n	8004118 <validate_acc_odr_avg+0xf4>
 80040bc:	a201      	add	r2, pc, #4	; (adr r2, 80040c4 <validate_acc_odr_avg+0xa0>)
 80040be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c2:	bf00      	nop
 80040c4:	080040e1 	.word	0x080040e1
 80040c8:	080040e9 	.word	0x080040e9
 80040cc:	080040f1 	.word	0x080040f1
 80040d0:	080040f9 	.word	0x080040f9
 80040d4:	08004101 	.word	0x08004101
 80040d8:	08004109 	.word	0x08004109
 80040dc:	08004111 	.word	0x08004111
    {
        case BMI3_ACC_AVG1:
            avg = 1.0;
 80040e0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80040e4:	613b      	str	r3, [r7, #16]
            break;
 80040e6:	e018      	b.n	800411a <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG2:
            avg = 2.0;
 80040e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80040ec:	613b      	str	r3, [r7, #16]
            break;
 80040ee:	e014      	b.n	800411a <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG4:
            avg = 4.0;
 80040f0:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80040f4:	613b      	str	r3, [r7, #16]
            break;
 80040f6:	e010      	b.n	800411a <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG8:
            avg = 8.0;
 80040f8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80040fc:	613b      	str	r3, [r7, #16]
            break;
 80040fe:	e00c      	b.n	800411a <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG16:
            avg = 16.0;
 8004100:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8004104:	613b      	str	r3, [r7, #16]
            break;
 8004106:	e008      	b.n	800411a <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG32:
            avg = 32.0;
 8004108:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
 800410c:	613b      	str	r3, [r7, #16]
            break;
 800410e:	e004      	b.n	800411a <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG64:
            avg = 64.0;
 8004110:	f04f 4385 	mov.w	r3, #1115684864	; 0x42800000
 8004114:	613b      	str	r3, [r7, #16]
            break;
 8004116:	e000      	b.n	800411a <validate_acc_odr_avg+0xf6>
        default:
            break;
 8004118:	bf00      	nop
    }

    rslt = accel_skipped_samples_check(odr, avg);
 800411a:	edd7 0a04 	vldr	s1, [r7, #16]
 800411e:	ed97 0a05 	vldr	s0, [r7, #20]
 8004122:	f000 f81d 	bl	8004160 <accel_skipped_samples_check>
 8004126:	4603      	mov	r3, r0
 8004128:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800412a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	3f480000 	.word	0x3f480000
 800413c:	3fc80000 	.word	0x3fc80000
 8004140:	40480000 	.word	0x40480000
 8004144:	40c80000 	.word	0x40c80000
 8004148:	41480000 	.word	0x41480000
 800414c:	41c80000 	.word	0x41c80000
 8004150:	42480000 	.word	0x42480000
 8004154:	42c80000 	.word	0x42c80000
 8004158:	43480000 	.word	0x43480000
 800415c:	43c80000 	.word	0x43c80000

08004160 <accel_skipped_samples_check>:

/*!
 * @brief This internal API is used to check skipped samples for accel
 */
static int8_t accel_skipped_samples_check(float odr, float avg)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	ed87 0a01 	vstr	s0, [r7, #4]
 800416a:	edc7 0a00 	vstr	s1, [r7]
    int8_t rslt;

    float max_odr = 6400.0;
 800416e:	4b1b      	ldr	r3, [pc, #108]	; (80041dc <accel_skipped_samples_check+0x7c>)
 8004170:	613b      	str	r3, [r7, #16]

    float skipped_samples = 0.0;
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	60fb      	str	r3, [r7, #12]

    if ((odr > 0.0) && (avg > 0.0))
 8004178:	edd7 7a01 	vldr	s15, [r7, #4]
 800417c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004184:	dd1f      	ble.n	80041c6 <accel_skipped_samples_check+0x66>
 8004186:	edd7 7a00 	vldr	s15, [r7]
 800418a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800418e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004192:	dd18      	ble.n	80041c6 <accel_skipped_samples_check+0x66>
    {
        skipped_samples = (float)(max_odr / odr) - avg;
 8004194:	edd7 6a04 	vldr	s13, [r7, #16]
 8004198:	edd7 7a01 	vldr	s15, [r7, #4]
 800419c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041a0:	edd7 7a00 	vldr	s15, [r7]
 80041a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041a8:	edc7 7a03 	vstr	s15, [r7, #12]

        if (skipped_samples > 0.0)
 80041ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80041b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b8:	dd02      	ble.n	80041c0 <accel_skipped_samples_check+0x60>
        {
            rslt = BMI3_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 80041be:	e004      	b.n	80041ca <accel_skipped_samples_check+0x6a>
        }
        else
        {
            rslt = BMI3_E_ACC_INVALID_CFG;
 80041c0:	23fc      	movs	r3, #252	; 0xfc
 80041c2:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 80041c4:	e001      	b.n	80041ca <accel_skipped_samples_check+0x6a>
        }
    }
    else
    {
        rslt = BMI3_E_ACC_INVALID_CFG;
 80041c6:	23fc      	movs	r3, #252	; 0xfc
 80041c8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80041ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	371c      	adds	r7, #28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	45c80000 	.word	0x45c80000

080041e0 <validate_gyr_odr_avg>:

/*!
 * @brief This internal API is used to validate ODR and AVG combinations for gyro
 */
static int8_t validate_gyr_odr_avg(uint8_t gyr_odr, uint8_t gyr_avg)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	4603      	mov	r3, r0
 80041e8:	460a      	mov	r2, r1
 80041ea:	71fb      	strb	r3, [r7, #7]
 80041ec:	4613      	mov	r3, r2
 80041ee:	71bb      	strb	r3, [r7, #6]
    int8_t rslt;

    float odr = 0.0, avg = 0.0;
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]
 80041f6:	f04f 0300 	mov.w	r3, #0
 80041fa:	613b      	str	r3, [r7, #16]

    switch (gyr_odr)
 80041fc:	79fb      	ldrb	r3, [r7, #7]
 80041fe:	3b01      	subs	r3, #1
 8004200:	2b09      	cmp	r3, #9
 8004202:	d835      	bhi.n	8004270 <validate_gyr_odr_avg+0x90>
 8004204:	a201      	add	r2, pc, #4	; (adr r2, 800420c <validate_gyr_odr_avg+0x2c>)
 8004206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420a:	bf00      	nop
 800420c:	08004235 	.word	0x08004235
 8004210:	0800423b 	.word	0x0800423b
 8004214:	08004241 	.word	0x08004241
 8004218:	08004247 	.word	0x08004247
 800421c:	0800424d 	.word	0x0800424d
 8004220:	08004253 	.word	0x08004253
 8004224:	08004259 	.word	0x08004259
 8004228:	0800425f 	.word	0x0800425f
 800422c:	08004265 	.word	0x08004265
 8004230:	0800426b 	.word	0x0800426b
    {
        case BMI3_GYR_ODR_0_78HZ:
            odr = 0.78125;
 8004234:	4b2f      	ldr	r3, [pc, #188]	; (80042f4 <validate_gyr_odr_avg+0x114>)
 8004236:	617b      	str	r3, [r7, #20]
            break;
 8004238:	e01b      	b.n	8004272 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_1_56HZ:
            odr = 1.5625;
 800423a:	4b2f      	ldr	r3, [pc, #188]	; (80042f8 <validate_gyr_odr_avg+0x118>)
 800423c:	617b      	str	r3, [r7, #20]
            break;
 800423e:	e018      	b.n	8004272 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_3_125HZ:
            odr = 3.125;
 8004240:	4b2e      	ldr	r3, [pc, #184]	; (80042fc <validate_gyr_odr_avg+0x11c>)
 8004242:	617b      	str	r3, [r7, #20]
            break;
 8004244:	e015      	b.n	8004272 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_6_25HZ:
            odr = 6.25;
 8004246:	4b2e      	ldr	r3, [pc, #184]	; (8004300 <validate_gyr_odr_avg+0x120>)
 8004248:	617b      	str	r3, [r7, #20]
            break;
 800424a:	e012      	b.n	8004272 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_12_5HZ:
            odr = 12.5;
 800424c:	4b2d      	ldr	r3, [pc, #180]	; (8004304 <validate_gyr_odr_avg+0x124>)
 800424e:	617b      	str	r3, [r7, #20]
            break;
 8004250:	e00f      	b.n	8004272 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_25HZ:
            odr = 25.0;
 8004252:	4b2d      	ldr	r3, [pc, #180]	; (8004308 <validate_gyr_odr_avg+0x128>)
 8004254:	617b      	str	r3, [r7, #20]
            break;
 8004256:	e00c      	b.n	8004272 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_50HZ:
            odr = 50.0;
 8004258:	4b2c      	ldr	r3, [pc, #176]	; (800430c <validate_gyr_odr_avg+0x12c>)
 800425a:	617b      	str	r3, [r7, #20]
            break;
 800425c:	e009      	b.n	8004272 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_100HZ:
            odr = 100.0;
 800425e:	4b2c      	ldr	r3, [pc, #176]	; (8004310 <validate_gyr_odr_avg+0x130>)
 8004260:	617b      	str	r3, [r7, #20]
            break;
 8004262:	e006      	b.n	8004272 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_200HZ:
            odr = 200.0;
 8004264:	4b2b      	ldr	r3, [pc, #172]	; (8004314 <validate_gyr_odr_avg+0x134>)
 8004266:	617b      	str	r3, [r7, #20]
            break;
 8004268:	e003      	b.n	8004272 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_400HZ:
            odr = 400.0;
 800426a:	4b2b      	ldr	r3, [pc, #172]	; (8004318 <validate_gyr_odr_avg+0x138>)
 800426c:	617b      	str	r3, [r7, #20]
            break;
 800426e:	e000      	b.n	8004272 <validate_gyr_odr_avg+0x92>
        default:
            break;
 8004270:	bf00      	nop
    }

    switch (gyr_avg)
 8004272:	79bb      	ldrb	r3, [r7, #6]
 8004274:	2b06      	cmp	r3, #6
 8004276:	d82d      	bhi.n	80042d4 <validate_gyr_odr_avg+0xf4>
 8004278:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <validate_gyr_odr_avg+0xa0>)
 800427a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427e:	bf00      	nop
 8004280:	0800429d 	.word	0x0800429d
 8004284:	080042a5 	.word	0x080042a5
 8004288:	080042ad 	.word	0x080042ad
 800428c:	080042b5 	.word	0x080042b5
 8004290:	080042bd 	.word	0x080042bd
 8004294:	080042c5 	.word	0x080042c5
 8004298:	080042cd 	.word	0x080042cd
    {
        case BMI3_GYR_AVG1:
            avg = 1.0;
 800429c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80042a0:	613b      	str	r3, [r7, #16]
            break;
 80042a2:	e018      	b.n	80042d6 <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG2:
            avg = 2.0;
 80042a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80042a8:	613b      	str	r3, [r7, #16]
            break;
 80042aa:	e014      	b.n	80042d6 <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG4:
            avg = 4.0;
 80042ac:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80042b0:	613b      	str	r3, [r7, #16]
            break;
 80042b2:	e010      	b.n	80042d6 <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG8:
            avg = 8.0;
 80042b4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80042b8:	613b      	str	r3, [r7, #16]
            break;
 80042ba:	e00c      	b.n	80042d6 <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG16:
            avg = 16.0;
 80042bc:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80042c0:	613b      	str	r3, [r7, #16]
            break;
 80042c2:	e008      	b.n	80042d6 <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG32:
            avg = 32.0;
 80042c4:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
 80042c8:	613b      	str	r3, [r7, #16]
            break;
 80042ca:	e004      	b.n	80042d6 <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG64:
            avg = 64.0;
 80042cc:	f04f 4385 	mov.w	r3, #1115684864	; 0x42800000
 80042d0:	613b      	str	r3, [r7, #16]
            break;
 80042d2:	e000      	b.n	80042d6 <validate_gyr_odr_avg+0xf6>
        default:
            break;
 80042d4:	bf00      	nop
    }

    rslt = gyro_skipped_samples_check(odr, avg);
 80042d6:	edd7 0a04 	vldr	s1, [r7, #16]
 80042da:	ed97 0a05 	vldr	s0, [r7, #20]
 80042de:	f000 f81d 	bl	800431c <gyro_skipped_samples_check>
 80042e2:	4603      	mov	r3, r0
 80042e4:	73fb      	strb	r3, [r7, #15]

    return rslt;
 80042e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	3f480000 	.word	0x3f480000
 80042f8:	3fc80000 	.word	0x3fc80000
 80042fc:	40480000 	.word	0x40480000
 8004300:	40c80000 	.word	0x40c80000
 8004304:	41480000 	.word	0x41480000
 8004308:	41c80000 	.word	0x41c80000
 800430c:	42480000 	.word	0x42480000
 8004310:	42c80000 	.word	0x42c80000
 8004314:	43480000 	.word	0x43480000
 8004318:	43c80000 	.word	0x43c80000

0800431c <gyro_skipped_samples_check>:

/*!
 * @brief This internal API is used to check skipped samples for gyro
 */
static int8_t gyro_skipped_samples_check(float odr, float avg)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	ed87 0a01 	vstr	s0, [r7, #4]
 8004326:	edc7 0a00 	vstr	s1, [r7]
    int8_t rslt;

    float max_odr = 6400.0;
 800432a:	4b1b      	ldr	r3, [pc, #108]	; (8004398 <gyro_skipped_samples_check+0x7c>)
 800432c:	613b      	str	r3, [r7, #16]

    float skipped_samples = 0.0;
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	60fb      	str	r3, [r7, #12]

    if ((odr > 0.0) && (avg > 0.0))
 8004334:	edd7 7a01 	vldr	s15, [r7, #4]
 8004338:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800433c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004340:	dd1f      	ble.n	8004382 <gyro_skipped_samples_check+0x66>
 8004342:	edd7 7a00 	vldr	s15, [r7]
 8004346:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800434a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800434e:	dd18      	ble.n	8004382 <gyro_skipped_samples_check+0x66>
    {
        skipped_samples = (float)(max_odr / odr) - avg;
 8004350:	edd7 6a04 	vldr	s13, [r7, #16]
 8004354:	edd7 7a01 	vldr	s15, [r7, #4]
 8004358:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800435c:	edd7 7a00 	vldr	s15, [r7]
 8004360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004364:	edc7 7a03 	vstr	s15, [r7, #12]

        if (skipped_samples > 0.0)
 8004368:	edd7 7a03 	vldr	s15, [r7, #12]
 800436c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004374:	dd02      	ble.n	800437c <gyro_skipped_samples_check+0x60>
        {
            rslt = BMI3_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 800437a:	e004      	b.n	8004386 <gyro_skipped_samples_check+0x6a>
        }
        else
        {
            rslt = BMI3_E_GYRO_INVALID_CFG;
 800437c:	23fb      	movs	r3, #251	; 0xfb
 800437e:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 8004380:	e001      	b.n	8004386 <gyro_skipped_samples_check+0x6a>
        }
    }
    else
    {
        rslt = BMI3_E_GYRO_INVALID_CFG;
 8004382:	23fb      	movs	r3, #251	; 0xfb
 8004384:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004386:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800438a:	4618      	mov	r0, r3
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	45c80000 	.word	0x45c80000

0800439c <bmi323_init>:
/*!
 * @brief This API is the entry point for bmi323 sensor. It reads and validates the
 * chip-id of the sensor.
 */
int8_t bmi323_init(struct bmi3_dev *dev)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fdf5 	bl	8004f94 <null_ptr_check>
 80043aa:	4603      	mov	r3, r0
 80043ac:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI323_OK)
 80043ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d104      	bne.n	80043c0 <bmi323_init+0x24>
    {
        rslt = bmi3_init(dev);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fd f811 	bl	80013de <bmi3_init>
 80043bc:	4603      	mov	r3, r0
 80043be:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI323_OK)
 80043c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d109      	bne.n	80043dc <bmi323_init+0x40>
    {
        /* Validate chip-id */
        if (dev->chip_id == BMI323_CHIP_ID)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b43      	cmp	r3, #67	; 0x43
 80043ce:	d103      	bne.n	80043d8 <bmi323_init+0x3c>
        {
            /* Assign resolution to the structure */
            dev->resolution = BMI323_16_BIT_RESOLUTION;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2210      	movs	r2, #16
 80043d4:	731a      	strb	r2, [r3, #12]
 80043d6:	e001      	b.n	80043dc <bmi323_init+0x40>
        }
        else
        {
            rslt = BMI323_E_DEV_NOT_FOUND;
 80043d8:	23fd      	movs	r3, #253	; 0xfd
 80043da:	73fb      	strb	r3, [r7, #15]
        }
    }

    if (rslt == BMI323_OK)
 80043dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d105      	bne.n	80043f0 <bmi323_init+0x54>
    {
        rslt = bmi323_context_switch_selection(BMI323_WEARABLE_SEL, dev);
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	2001      	movs	r0, #1
 80043e8:	f000 f832 	bl	8004450 <bmi323_context_switch_selection>
 80043ec:	4603      	mov	r3, r0
 80043ee:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80043f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <bmi323_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi323_set_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	460b      	mov	r3, r1
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    rslt = bmi3_set_sensor_config(sens_cfg, n_sens, dev);
 800440a:	7afb      	ldrb	r3, [r7, #11]
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	4619      	mov	r1, r3
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f7fd f98d 	bl	8001730 <bmi3_set_sensor_config>
 8004416:	4603      	mov	r3, r0
 8004418:	75fb      	strb	r3, [r7, #23]

    return rslt;
 800441a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <bmi323_get_sensor_config>:

/*!
 * @brief This API gets the sensor/feature configuration.
 */
int8_t bmi323_get_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b086      	sub	sp, #24
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	460b      	mov	r3, r1
 8004430:	607a      	str	r2, [r7, #4]
 8004432:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    rslt = bmi3_get_sensor_config(sens_cfg, n_sens, dev);
 8004434:	7afb      	ldrb	r3, [r7, #11]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	4619      	mov	r1, r3
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f7fd fa82 	bl	8001944 <bmi3_get_sensor_config>
 8004440:	4603      	mov	r3, r0
 8004442:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8004444:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <bmi323_context_switch_selection>:

/*!
 * @brief This API writes the configurations of context feature for smart phone, wearables and hearables.
 */
int8_t bmi323_context_switch_selection(uint8_t context_sel, struct bmi3_dev *dev)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b0c8      	sub	sp, #288	; 0x120
 8004454:	af00      	add	r7, sp, #0
 8004456:	4602      	mov	r2, r0
 8004458:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800445c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004460:	6019      	str	r1, [r3, #0]
 8004462:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004466:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800446a:	701a      	strb	r2, [r3, #0]
    /* Variable to define error */
    int8_t rslt;

    struct bmi3_sens_config sens_cfg[BMI323_MAX_FEATURE];

    uint8_t index = 0;
 800446c:	2300      	movs	r3, #0
 800446e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    if (context_sel < BMI323_SEL_MAX)
 8004472:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004476:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	2b02      	cmp	r3, #2
 800447e:	f200 8578 	bhi.w	8004f72 <bmi323_context_switch_selection+0xb22>
    {
        /* Set any-motion configuration */
        sens_cfg[0].type = BMI323_ANY_MOTION;
 8004482:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004486:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800448a:	2203      	movs	r2, #3
 800448c:	701a      	strb	r2, [r3, #0]
        sens_cfg[0].cfg.any_motion.slope_thres = any_motion_param_set[context_sel][index++];
 800448e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004492:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004496:	781a      	ldrb	r2, [r3, #0]
 8004498:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800449c:	1c59      	adds	r1, r3, #1
 800449e:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80044a2:	4618      	mov	r0, r3
 80044a4:	49e3      	ldr	r1, [pc, #908]	; (8004834 <bmi323_context_switch_selection+0x3e4>)
 80044a6:	4613      	mov	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	4403      	add	r3, r0
 80044ae:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80044b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80044b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80044ba:	809a      	strh	r2, [r3, #4]
        sens_cfg[0].cfg.any_motion.acc_ref_up = (uint8_t)(any_motion_param_set[context_sel][index++]);
 80044bc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80044c0:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80044c4:	781a      	ldrb	r2, [r3, #0]
 80044c6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80044ca:	1c59      	adds	r1, r3, #1
 80044cc:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80044d0:	4618      	mov	r0, r3
 80044d2:	49d8      	ldr	r1, [pc, #864]	; (8004834 <bmi323_context_switch_selection+0x3e4>)
 80044d4:	4613      	mov	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	4403      	add	r3, r0
 80044dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80044e6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80044ea:	719a      	strb	r2, [r3, #6]
        sens_cfg[0].cfg.any_motion.hysteresis = any_motion_param_set[context_sel][index++];
 80044ec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80044f0:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80044f4:	781a      	ldrb	r2, [r3, #0]
 80044f6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80044fa:	1c59      	adds	r1, r3, #1
 80044fc:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004500:	4618      	mov	r0, r3
 8004502:	49cc      	ldr	r1, [pc, #816]	; (8004834 <bmi323_context_switch_selection+0x3e4>)
 8004504:	4613      	mov	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	4403      	add	r3, r0
 800450c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004510:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004514:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004518:	811a      	strh	r2, [r3, #8]
        sens_cfg[0].cfg.any_motion.duration = any_motion_param_set[context_sel][index++];
 800451a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800451e:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004522:	781a      	ldrb	r2, [r3, #0]
 8004524:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004528:	1c59      	adds	r1, r3, #1
 800452a:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 800452e:	4618      	mov	r0, r3
 8004530:	49c0      	ldr	r1, [pc, #768]	; (8004834 <bmi323_context_switch_selection+0x3e4>)
 8004532:	4613      	mov	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	4403      	add	r3, r0
 800453a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800453e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004542:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004546:	805a      	strh	r2, [r3, #2]
        sens_cfg[0].cfg.any_motion.wait_time = any_motion_param_set[context_sel][index++];
 8004548:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800454c:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004550:	781a      	ldrb	r2, [r3, #0]
 8004552:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004556:	1c59      	adds	r1, r3, #1
 8004558:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 800455c:	4618      	mov	r0, r3
 800455e:	49b5      	ldr	r1, [pc, #724]	; (8004834 <bmi323_context_switch_selection+0x3e4>)
 8004560:	4613      	mov	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	4403      	add	r3, r0
 8004568:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800456c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004570:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004574:	815a      	strh	r2, [r3, #10]

        /* Set no-motion configuration */
        index = 0;
 8004576:	2300      	movs	r3, #0
 8004578:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        sens_cfg[1].type = BMI323_NO_MOTION;
 800457c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004580:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004584:	2204      	movs	r2, #4
 8004586:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        sens_cfg[1].cfg.no_motion.slope_thres = no_motion_param_set[context_sel][index++];
 800458a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800458e:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004592:	781a      	ldrb	r2, [r3, #0]
 8004594:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004598:	1c59      	adds	r1, r3, #1
 800459a:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 800459e:	4618      	mov	r0, r3
 80045a0:	49a5      	ldr	r1, [pc, #660]	; (8004838 <bmi323_context_switch_selection+0x3e8>)
 80045a2:	4613      	mov	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	4403      	add	r3, r0
 80045aa:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80045ae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80045b2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80045b6:	865a      	strh	r2, [r3, #50]	; 0x32
        sens_cfg[1].cfg.no_motion.acc_ref_up = (uint8_t)(no_motion_param_set[context_sel][index++]);
 80045b8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80045bc:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80045c0:	781a      	ldrb	r2, [r3, #0]
 80045c2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80045c6:	1c59      	adds	r1, r3, #1
 80045c8:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80045cc:	4618      	mov	r0, r3
 80045ce:	499a      	ldr	r1, [pc, #616]	; (8004838 <bmi323_context_switch_selection+0x3e8>)
 80045d0:	4613      	mov	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	4403      	add	r3, r0
 80045d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80045e2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80045e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        sens_cfg[1].cfg.no_motion.hysteresis = no_motion_param_set[context_sel][index++];
 80045ea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80045ee:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80045f2:	781a      	ldrb	r2, [r3, #0]
 80045f4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80045f8:	1c59      	adds	r1, r3, #1
 80045fa:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80045fe:	4618      	mov	r0, r3
 8004600:	498d      	ldr	r1, [pc, #564]	; (8004838 <bmi323_context_switch_selection+0x3e8>)
 8004602:	4613      	mov	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4413      	add	r3, r2
 8004608:	4403      	add	r3, r0
 800460a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800460e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004612:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004616:	86da      	strh	r2, [r3, #54]	; 0x36
        sens_cfg[1].cfg.no_motion.duration = no_motion_param_set[context_sel][index++];
 8004618:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800461c:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004620:	781a      	ldrb	r2, [r3, #0]
 8004622:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004626:	1c59      	adds	r1, r3, #1
 8004628:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 800462c:	4618      	mov	r0, r3
 800462e:	4982      	ldr	r1, [pc, #520]	; (8004838 <bmi323_context_switch_selection+0x3e8>)
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	4403      	add	r3, r0
 8004638:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800463c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004640:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004644:	861a      	strh	r2, [r3, #48]	; 0x30
        sens_cfg[1].cfg.no_motion.wait_time = no_motion_param_set[context_sel][index++];
 8004646:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800464a:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800464e:	781a      	ldrb	r2, [r3, #0]
 8004650:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004654:	1c59      	adds	r1, r3, #1
 8004656:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 800465a:	4618      	mov	r0, r3
 800465c:	4976      	ldr	r1, [pc, #472]	; (8004838 <bmi323_context_switch_selection+0x3e8>)
 800465e:	4613      	mov	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	4403      	add	r3, r0
 8004666:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800466a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800466e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004672:	871a      	strh	r2, [r3, #56]	; 0x38

        /* Set tap configuration */
        index = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        sens_cfg[2].type = BMI323_TAP;
 800467a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800467e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004682:	2209      	movs	r2, #9
 8004684:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        sens_cfg[2].cfg.tap.axis_sel = (uint8_t)tap_param_set[context_sel][index++];
 8004688:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800468c:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004690:	781a      	ldrb	r2, [r3, #0]
 8004692:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004696:	1c59      	adds	r1, r3, #1
 8004698:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 800469c:	4618      	mov	r0, r3
 800469e:	4967      	ldr	r1, [pc, #412]	; (800483c <bmi323_context_switch_selection+0x3ec>)
 80046a0:	4613      	mov	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	4403      	add	r3, r0
 80046aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80046b4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80046b8:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        sens_cfg[2].cfg.tap.wait_for_timeout = (uint8_t)tap_param_set[context_sel][index++];
 80046bc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80046c0:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80046c4:	781a      	ldrb	r2, [r3, #0]
 80046c6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80046ca:	1c59      	adds	r1, r3, #1
 80046cc:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80046d0:	4618      	mov	r0, r3
 80046d2:	495a      	ldr	r1, [pc, #360]	; (800483c <bmi323_context_switch_selection+0x3ec>)
 80046d4:	4613      	mov	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4413      	add	r3, r2
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	4403      	add	r3, r0
 80046de:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80046e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80046ec:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
        sens_cfg[2].cfg.tap.max_peaks_for_tap = (uint8_t)tap_param_set[context_sel][index++];
 80046f0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80046f4:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80046f8:	781a      	ldrb	r2, [r3, #0]
 80046fa:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80046fe:	1c59      	adds	r1, r3, #1
 8004700:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004704:	4618      	mov	r0, r3
 8004706:	494d      	ldr	r1, [pc, #308]	; (800483c <bmi323_context_switch_selection+0x3ec>)
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	4403      	add	r3, r0
 8004712:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004716:	b2da      	uxtb	r2, r3
 8004718:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800471c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004720:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        sens_cfg[2].cfg.tap.mode = (uint8_t)tap_param_set[context_sel][index++];
 8004724:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004728:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800472c:	781a      	ldrb	r2, [r3, #0]
 800472e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004732:	1c59      	adds	r1, r3, #1
 8004734:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004738:	4618      	mov	r0, r3
 800473a:	4940      	ldr	r1, [pc, #256]	; (800483c <bmi323_context_switch_selection+0x3ec>)
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	4403      	add	r3, r0
 8004746:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800474a:	b2da      	uxtb	r2, r3
 800474c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004750:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004754:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        sens_cfg[2].cfg.tap.tap_peak_thres = tap_param_set[context_sel][index++];
 8004758:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800475c:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004760:	781a      	ldrb	r2, [r3, #0]
 8004762:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004766:	1c59      	adds	r1, r3, #1
 8004768:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 800476c:	4618      	mov	r0, r3
 800476e:	4933      	ldr	r1, [pc, #204]	; (800483c <bmi323_context_switch_selection+0x3ec>)
 8004770:	4613      	mov	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	4403      	add	r3, r0
 800477a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800477e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004782:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004786:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        sens_cfg[2].cfg.tap.max_gest_dur = (uint8_t)tap_param_set[context_sel][index++];
 800478a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800478e:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004792:	781a      	ldrb	r2, [r3, #0]
 8004794:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004798:	1c59      	adds	r1, r3, #1
 800479a:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 800479e:	4618      	mov	r0, r3
 80047a0:	4926      	ldr	r1, [pc, #152]	; (800483c <bmi323_context_switch_selection+0x3ec>)
 80047a2:	4613      	mov	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	4403      	add	r3, r0
 80047ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80047b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80047ba:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        sens_cfg[2].cfg.tap.max_dur_between_peaks = (uint8_t)tap_param_set[context_sel][index++];
 80047be:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80047c2:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80047c6:	781a      	ldrb	r2, [r3, #0]
 80047c8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80047cc:	1c59      	adds	r1, r3, #1
 80047ce:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80047d2:	4618      	mov	r0, r3
 80047d4:	4919      	ldr	r1, [pc, #100]	; (800483c <bmi323_context_switch_selection+0x3ec>)
 80047d6:	4613      	mov	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	4403      	add	r3, r0
 80047e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80047ea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80047ee:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sens_cfg[2].cfg.tap.tap_shock_settling_dur = (uint8_t)tap_param_set[context_sel][index++];
 80047f2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80047f6:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80047fa:	781a      	ldrb	r2, [r3, #0]
 80047fc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004800:	1c59      	adds	r1, r3, #1
 8004802:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004806:	4618      	mov	r0, r3
 8004808:	490c      	ldr	r1, [pc, #48]	; (800483c <bmi323_context_switch_selection+0x3ec>)
 800480a:	4613      	mov	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	4403      	add	r3, r0
 8004814:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004818:	b2da      	uxtb	r2, r3
 800481a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800481e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004822:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
        sens_cfg[2].cfg.tap.min_quite_dur_between_taps = (uint8_t)tap_param_set[context_sel][index++];
 8004826:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800482a:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800482e:	781a      	ldrb	r2, [r3, #0]
 8004830:	e006      	b.n	8004840 <bmi323_context_switch_selection+0x3f0>
 8004832:	bf00      	nop
 8004834:	20000008 	.word	0x20000008
 8004838:	20000028 	.word	0x20000028
 800483c:	20000048 	.word	0x20000048
 8004840:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004844:	1c59      	adds	r1, r3, #1
 8004846:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 800484a:	4618      	mov	r0, r3
 800484c:	49e9      	ldr	r1, [pc, #932]	; (8004bf4 <bmi323_context_switch_selection+0x7a4>)
 800484e:	4613      	mov	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	4403      	add	r3, r0
 8004858:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800485c:	b2da      	uxtb	r2, r3
 800485e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004862:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004866:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
        sens_cfg[2].cfg.tap.quite_time_after_gest = (uint8_t)tap_param_set[context_sel][index++];
 800486a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800486e:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004872:	781a      	ldrb	r2, [r3, #0]
 8004874:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004878:	1c59      	adds	r1, r3, #1
 800487a:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 800487e:	4618      	mov	r0, r3
 8004880:	49dc      	ldr	r1, [pc, #880]	; (8004bf4 <bmi323_context_switch_selection+0x7a4>)
 8004882:	4613      	mov	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	4403      	add	r3, r0
 800488c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004890:	b2da      	uxtb	r2, r3
 8004892:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004896:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800489a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

        /* Set step counter configuration */
        index = 0;
 800489e:	2300      	movs	r3, #0
 80048a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        sens_cfg[3].type = BMI323_STEP_COUNTER;
 80048a4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80048ac:	2205      	movs	r2, #5
 80048ae:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        sens_cfg[3].cfg.step_counter.watermark_level = step_counter_param_set[context_sel][index++];
 80048b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048b6:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80048ba:	781a      	ldrb	r2, [r3, #0]
 80048bc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80048c0:	1c59      	adds	r1, r3, #1
 80048c2:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80048c6:	4618      	mov	r0, r3
 80048c8:	49cb      	ldr	r1, [pc, #812]	; (8004bf8 <bmi323_context_switch_selection+0x7a8>)
 80048ca:	2316      	movs	r3, #22
 80048cc:	fb02 f303 	mul.w	r3, r2, r3
 80048d0:	4403      	add	r3, r0
 80048d2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80048d6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048da:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80048de:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
        sens_cfg[3].cfg.step_counter.reset_counter = step_counter_param_set[context_sel][index++];
 80048e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048e6:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80048ea:	781a      	ldrb	r2, [r3, #0]
 80048ec:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80048f0:	1c59      	adds	r1, r3, #1
 80048f2:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80048f6:	4618      	mov	r0, r3
 80048f8:	49bf      	ldr	r1, [pc, #764]	; (8004bf8 <bmi323_context_switch_selection+0x7a8>)
 80048fa:	2316      	movs	r3, #22
 80048fc:	fb02 f303 	mul.w	r3, r2, r3
 8004900:	4403      	add	r3, r0
 8004902:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004906:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800490a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800490e:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
        sens_cfg[3].cfg.step_counter.env_min_dist_up = step_counter_param_set[context_sel][index++];
 8004912:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004916:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800491a:	781a      	ldrb	r2, [r3, #0]
 800491c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004920:	1c59      	adds	r1, r3, #1
 8004922:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004926:	4618      	mov	r0, r3
 8004928:	49b3      	ldr	r1, [pc, #716]	; (8004bf8 <bmi323_context_switch_selection+0x7a8>)
 800492a:	2316      	movs	r3, #22
 800492c:	fb02 f303 	mul.w	r3, r2, r3
 8004930:	4403      	add	r3, r0
 8004932:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004936:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800493a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800493e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
        sens_cfg[3].cfg.step_counter.env_coef_up = step_counter_param_set[context_sel][index++];
 8004942:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004946:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800494a:	781a      	ldrb	r2, [r3, #0]
 800494c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004950:	1c59      	adds	r1, r3, #1
 8004952:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004956:	4618      	mov	r0, r3
 8004958:	49a7      	ldr	r1, [pc, #668]	; (8004bf8 <bmi323_context_switch_selection+0x7a8>)
 800495a:	2316      	movs	r3, #22
 800495c:	fb02 f303 	mul.w	r3, r2, r3
 8004960:	4403      	add	r3, r0
 8004962:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004966:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800496a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800496e:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
        sens_cfg[3].cfg.step_counter.env_min_dist_down = step_counter_param_set[context_sel][index++];
 8004972:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004976:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800497a:	781a      	ldrb	r2, [r3, #0]
 800497c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004980:	1c59      	adds	r1, r3, #1
 8004982:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004986:	4618      	mov	r0, r3
 8004988:	499b      	ldr	r1, [pc, #620]	; (8004bf8 <bmi323_context_switch_selection+0x7a8>)
 800498a:	2316      	movs	r3, #22
 800498c:	fb02 f303 	mul.w	r3, r2, r3
 8004990:	4403      	add	r3, r0
 8004992:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004996:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800499a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800499e:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
        sens_cfg[3].cfg.step_counter.env_coef_down = step_counter_param_set[context_sel][index++];
 80049a2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80049a6:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80049aa:	781a      	ldrb	r2, [r3, #0]
 80049ac:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80049b0:	1c59      	adds	r1, r3, #1
 80049b2:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80049b6:	4618      	mov	r0, r3
 80049b8:	498f      	ldr	r1, [pc, #572]	; (8004bf8 <bmi323_context_switch_selection+0x7a8>)
 80049ba:	2316      	movs	r3, #22
 80049bc:	fb02 f303 	mul.w	r3, r2, r3
 80049c0:	4403      	add	r3, r0
 80049c2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80049c6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80049ca:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80049ce:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        sens_cfg[3].cfg.step_counter.mean_val_decay = step_counter_param_set[context_sel][index++];
 80049d2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80049d6:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80049da:	781a      	ldrb	r2, [r3, #0]
 80049dc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80049e0:	1c59      	adds	r1, r3, #1
 80049e2:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80049e6:	4618      	mov	r0, r3
 80049e8:	4983      	ldr	r1, [pc, #524]	; (8004bf8 <bmi323_context_switch_selection+0x7a8>)
 80049ea:	2316      	movs	r3, #22
 80049ec:	fb02 f303 	mul.w	r3, r2, r3
 80049f0:	4403      	add	r3, r0
 80049f2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80049f6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80049fa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80049fe:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        sens_cfg[3].cfg.step_counter.mean_step_dur = step_counter_param_set[context_sel][index++];
 8004a02:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a06:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004a0a:	781a      	ldrb	r2, [r3, #0]
 8004a0c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004a10:	1c59      	adds	r1, r3, #1
 8004a12:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004a16:	4618      	mov	r0, r3
 8004a18:	4977      	ldr	r1, [pc, #476]	; (8004bf8 <bmi323_context_switch_selection+0x7a8>)
 8004a1a:	2316      	movs	r3, #22
 8004a1c:	fb02 f303 	mul.w	r3, r2, r3
 8004a20:	4403      	add	r3, r0
 8004a22:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004a26:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a2a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a2e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
        sens_cfg[3].cfg.step_counter.step_buffer_size = step_counter_param_set[context_sel][index++];
 8004a32:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a36:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004a3a:	781a      	ldrb	r2, [r3, #0]
 8004a3c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004a40:	1c59      	adds	r1, r3, #1
 8004a42:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004a46:	4618      	mov	r0, r3
 8004a48:	496b      	ldr	r1, [pc, #428]	; (8004bf8 <bmi323_context_switch_selection+0x7a8>)
 8004a4a:	2316      	movs	r3, #22
 8004a4c:	fb02 f303 	mul.w	r3, r2, r3
 8004a50:	4403      	add	r3, r0
 8004a52:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004a56:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a5a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a5e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
        sens_cfg[3].cfg.step_counter.filter_cascade_enabled = step_counter_param_set[context_sel][index++];
 8004a62:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a66:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004a6a:	781a      	ldrb	r2, [r3, #0]
 8004a6c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004a70:	1c59      	adds	r1, r3, #1
 8004a72:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004a76:	4618      	mov	r0, r3
 8004a78:	495f      	ldr	r1, [pc, #380]	; (8004bf8 <bmi323_context_switch_selection+0x7a8>)
 8004a7a:	2316      	movs	r3, #22
 8004a7c:	fb02 f303 	mul.w	r3, r2, r3
 8004a80:	4403      	add	r3, r0
 8004a82:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004a86:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a8a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a8e:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        sens_cfg[3].cfg.step_counter.step_counter_increment = step_counter_param_set[context_sel][index++];
 8004a92:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a96:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004a9a:	781a      	ldrb	r2, [r3, #0]
 8004a9c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004aa0:	1c59      	adds	r1, r3, #1
 8004aa2:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	4953      	ldr	r1, [pc, #332]	; (8004bf8 <bmi323_context_switch_selection+0x7a8>)
 8004aaa:	2316      	movs	r3, #22
 8004aac:	fb02 f303 	mul.w	r3, r2, r3
 8004ab0:	4403      	add	r3, r0
 8004ab2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004ab6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004aba:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004abe:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        sens_cfg[3].cfg.step_counter.peak_duration_min_walking = step_counter_param_set[context_sel][index++];
 8004ac2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ac6:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004aca:	781a      	ldrb	r2, [r3, #0]
 8004acc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004ad0:	1c59      	adds	r1, r3, #1
 8004ad2:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	4947      	ldr	r1, [pc, #284]	; (8004bf8 <bmi323_context_switch_selection+0x7a8>)
 8004ada:	2316      	movs	r3, #22
 8004adc:	fb02 f303 	mul.w	r3, r2, r3
 8004ae0:	4403      	add	r3, r0
 8004ae2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004ae6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004aea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004aee:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
        sens_cfg[3].cfg.step_counter.peak_duration_min_running = step_counter_param_set[context_sel][index++];
 8004af2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004af6:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004afa:	781a      	ldrb	r2, [r3, #0]
 8004afc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004b00:	1c59      	adds	r1, r3, #1
 8004b02:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004b06:	4618      	mov	r0, r3
 8004b08:	493b      	ldr	r1, [pc, #236]	; (8004bf8 <bmi323_context_switch_selection+0x7a8>)
 8004b0a:	2316      	movs	r3, #22
 8004b0c:	fb02 f303 	mul.w	r3, r2, r3
 8004b10:	4403      	add	r3, r0
 8004b12:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004b16:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b1a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b1e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
        sens_cfg[3].cfg.step_counter.activity_detection_factor = step_counter_param_set[context_sel][index++];
 8004b22:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b26:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004b2a:	781a      	ldrb	r2, [r3, #0]
 8004b2c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004b30:	1c59      	adds	r1, r3, #1
 8004b32:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004b36:	4618      	mov	r0, r3
 8004b38:	492f      	ldr	r1, [pc, #188]	; (8004bf8 <bmi323_context_switch_selection+0x7a8>)
 8004b3a:	2316      	movs	r3, #22
 8004b3c:	fb02 f303 	mul.w	r3, r2, r3
 8004b40:	4403      	add	r3, r0
 8004b42:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004b46:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b4a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b4e:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
        sens_cfg[3].cfg.step_counter.activity_detection_thres = step_counter_param_set[context_sel][index++];
 8004b52:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b56:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004b5a:	781a      	ldrb	r2, [r3, #0]
 8004b5c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004b60:	1c59      	adds	r1, r3, #1
 8004b62:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004b66:	4618      	mov	r0, r3
 8004b68:	4923      	ldr	r1, [pc, #140]	; (8004bf8 <bmi323_context_switch_selection+0x7a8>)
 8004b6a:	2316      	movs	r3, #22
 8004b6c:	fb02 f303 	mul.w	r3, r2, r3
 8004b70:	4403      	add	r3, r0
 8004b72:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004b76:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b7a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b7e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
        sens_cfg[3].cfg.step_counter.step_duration_max = step_counter_param_set[context_sel][index++];
 8004b82:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b86:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004b8a:	781a      	ldrb	r2, [r3, #0]
 8004b8c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004b90:	1c59      	adds	r1, r3, #1
 8004b92:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004b96:	4618      	mov	r0, r3
 8004b98:	4917      	ldr	r1, [pc, #92]	; (8004bf8 <bmi323_context_switch_selection+0x7a8>)
 8004b9a:	2316      	movs	r3, #22
 8004b9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ba0:	4403      	add	r3, r0
 8004ba2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004ba6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004baa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004bae:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
        sens_cfg[3].cfg.step_counter.step_duration_window = step_counter_param_set[context_sel][index++];
 8004bb2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004bb6:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004bba:	781a      	ldrb	r2, [r3, #0]
 8004bbc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004bc0:	1c59      	adds	r1, r3, #1
 8004bc2:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	490b      	ldr	r1, [pc, #44]	; (8004bf8 <bmi323_context_switch_selection+0x7a8>)
 8004bca:	2316      	movs	r3, #22
 8004bcc:	fb02 f303 	mul.w	r3, r2, r3
 8004bd0:	4403      	add	r3, r0
 8004bd2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004bd6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004bda:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004bde:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        sens_cfg[3].cfg.step_counter.step_duration_pp_enabled = step_counter_param_set[context_sel][index++];
 8004be2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004be6:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004bea:	781a      	ldrb	r2, [r3, #0]
 8004bec:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004bf0:	1c59      	adds	r1, r3, #1
 8004bf2:	e003      	b.n	8004bfc <bmi323_context_switch_selection+0x7ac>
 8004bf4:	20000048 	.word	0x20000048
 8004bf8:	20000084 	.word	0x20000084
 8004bfc:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004c00:	4618      	mov	r0, r3
 8004c02:	49e1      	ldr	r1, [pc, #900]	; (8004f88 <bmi323_context_switch_selection+0xb38>)
 8004c04:	2316      	movs	r3, #22
 8004c06:	fb02 f303 	mul.w	r3, r2, r3
 8004c0a:	4403      	add	r3, r0
 8004c0c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004c10:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c14:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c18:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
        sens_cfg[3].cfg.step_counter.step_duration_thres = step_counter_param_set[context_sel][index++];
 8004c1c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c20:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004c24:	781a      	ldrb	r2, [r3, #0]
 8004c26:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004c2a:	1c59      	adds	r1, r3, #1
 8004c2c:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004c30:	4618      	mov	r0, r3
 8004c32:	49d5      	ldr	r1, [pc, #852]	; (8004f88 <bmi323_context_switch_selection+0xb38>)
 8004c34:	2316      	movs	r3, #22
 8004c36:	fb02 f303 	mul.w	r3, r2, r3
 8004c3a:	4403      	add	r3, r0
 8004c3c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004c40:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c44:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c48:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
        sens_cfg[3].cfg.step_counter.mean_crossing_pp_enabled = step_counter_param_set[context_sel][index++];
 8004c4c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c50:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004c54:	781a      	ldrb	r2, [r3, #0]
 8004c56:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004c5a:	1c59      	adds	r1, r3, #1
 8004c5c:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004c60:	4618      	mov	r0, r3
 8004c62:	49c9      	ldr	r1, [pc, #804]	; (8004f88 <bmi323_context_switch_selection+0xb38>)
 8004c64:	2316      	movs	r3, #22
 8004c66:	fb02 f303 	mul.w	r3, r2, r3
 8004c6a:	4403      	add	r3, r0
 8004c6c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004c70:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c74:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c78:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
        sens_cfg[3].cfg.step_counter.mcr_threshold = step_counter_param_set[context_sel][index++];
 8004c7c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c80:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004c84:	781a      	ldrb	r2, [r3, #0]
 8004c86:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004c8a:	1c59      	adds	r1, r3, #1
 8004c8c:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004c90:	4618      	mov	r0, r3
 8004c92:	49bd      	ldr	r1, [pc, #756]	; (8004f88 <bmi323_context_switch_selection+0xb38>)
 8004c94:	2316      	movs	r3, #22
 8004c96:	fb02 f303 	mul.w	r3, r2, r3
 8004c9a:	4403      	add	r3, r0
 8004c9c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004ca0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ca4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004ca8:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
        sens_cfg[3].cfg.step_counter.sc_12_res = step_counter_param_set[context_sel][index++];
 8004cac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004cb0:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004cb4:	781a      	ldrb	r2, [r3, #0]
 8004cb6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004cba:	1c59      	adds	r1, r3, #1
 8004cbc:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	49b1      	ldr	r1, [pc, #708]	; (8004f88 <bmi323_context_switch_selection+0xb38>)
 8004cc4:	2316      	movs	r3, #22
 8004cc6:	fb02 f303 	mul.w	r3, r2, r3
 8004cca:	4403      	add	r3, r0
 8004ccc:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004cd0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004cd4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004cd8:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6

        /* Set significant motion configuration */
        index = 0;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        sens_cfg[4].type = BMI323_SIG_MOTION;
 8004ce2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ce6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        sens_cfg[4].cfg.sig_motion.block_size = sig_motion_param_set[context_sel][index++];
 8004cf0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004cf4:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004cf8:	781a      	ldrb	r2, [r3, #0]
 8004cfa:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004cfe:	1c59      	adds	r1, r3, #1
 8004d00:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004d04:	4618      	mov	r0, r3
 8004d06:	49a1      	ldr	r1, [pc, #644]	; (8004f8c <bmi323_context_switch_selection+0xb3c>)
 8004d08:	4613      	mov	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	4403      	add	r3, r0
 8004d10:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004d14:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d18:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d1c:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
        sens_cfg[4].cfg.sig_motion.peak_2_peak_min = sig_motion_param_set[context_sel][index++];
 8004d20:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d24:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004d28:	781a      	ldrb	r2, [r3, #0]
 8004d2a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004d2e:	1c59      	adds	r1, r3, #1
 8004d30:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004d34:	4618      	mov	r0, r3
 8004d36:	4995      	ldr	r1, [pc, #596]	; (8004f8c <bmi323_context_switch_selection+0xb3c>)
 8004d38:	4613      	mov	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	4403      	add	r3, r0
 8004d40:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004d44:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d48:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d4c:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
        sens_cfg[4].cfg.sig_motion.mcr_min = (uint8_t)sig_motion_param_set[context_sel][index++];
 8004d50:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d54:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004d58:	781a      	ldrb	r2, [r3, #0]
 8004d5a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004d5e:	1c59      	adds	r1, r3, #1
 8004d60:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004d64:	4618      	mov	r0, r3
 8004d66:	4989      	ldr	r1, [pc, #548]	; (8004f8c <bmi323_context_switch_selection+0xb3c>)
 8004d68:	4613      	mov	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	4403      	add	r3, r0
 8004d70:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d7a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d7e:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
        sens_cfg[4].cfg.sig_motion.peak_2_peak_max = sig_motion_param_set[context_sel][index++];
 8004d82:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d86:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004d8a:	781a      	ldrb	r2, [r3, #0]
 8004d8c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004d90:	1c59      	adds	r1, r3, #1
 8004d92:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004d96:	4618      	mov	r0, r3
 8004d98:	497c      	ldr	r1, [pc, #496]	; (8004f8c <bmi323_context_switch_selection+0xb3c>)
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	4403      	add	r3, r0
 8004da2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004da6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004daa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004dae:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
        sens_cfg[4].cfg.sig_motion.mcr_max = (uint8_t)sig_motion_param_set[context_sel][index++];
 8004db2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004db6:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004dba:	781a      	ldrb	r2, [r3, #0]
 8004dbc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004dc0:	1c59      	adds	r1, r3, #1
 8004dc2:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	4970      	ldr	r1, [pc, #448]	; (8004f8c <bmi323_context_switch_selection+0xb3c>)
 8004dca:	4613      	mov	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	4403      	add	r3, r0
 8004dd2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004dd6:	b2da      	uxtb	r2, r3
 8004dd8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ddc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004de0:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2

        /* Set orientation configuration */
        index = 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        sens_cfg[5].type = BMI323_ORIENTATION;
 8004dea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004dee:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004df2:	2207      	movs	r2, #7
 8004df4:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
        sens_cfg[5].cfg.orientation.ud_en = (uint8_t)orientation_param_set[context_sel][index++];
 8004df8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004dfc:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004e00:	781a      	ldrb	r2, [r3, #0]
 8004e02:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004e06:	1c59      	adds	r1, r3, #1
 8004e08:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	4960      	ldr	r1, [pc, #384]	; (8004f90 <bmi323_context_switch_selection+0xb40>)
 8004e10:	4613      	mov	r3, r2
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	1a9b      	subs	r3, r3, r2
 8004e16:	4403      	add	r3, r0
 8004e18:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004e22:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e26:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
        sens_cfg[5].cfg.orientation.mode = (uint8_t)orientation_param_set[context_sel][index++];
 8004e2a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004e2e:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004e32:	781a      	ldrb	r2, [r3, #0]
 8004e34:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004e38:	1c59      	adds	r1, r3, #1
 8004e3a:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004e3e:	4618      	mov	r0, r3
 8004e40:	4953      	ldr	r1, [pc, #332]	; (8004f90 <bmi323_context_switch_selection+0xb40>)
 8004e42:	4613      	mov	r3, r2
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	1a9b      	subs	r3, r3, r2
 8004e48:	4403      	add	r3, r0
 8004e4a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004e54:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e58:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
        sens_cfg[5].cfg.orientation.blocking = (uint8_t)orientation_param_set[context_sel][index++];
 8004e5c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004e60:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004e64:	781a      	ldrb	r2, [r3, #0]
 8004e66:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004e6a:	1c59      	adds	r1, r3, #1
 8004e6c:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004e70:	4618      	mov	r0, r3
 8004e72:	4947      	ldr	r1, [pc, #284]	; (8004f90 <bmi323_context_switch_selection+0xb40>)
 8004e74:	4613      	mov	r3, r2
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	1a9b      	subs	r3, r3, r2
 8004e7a:	4403      	add	r3, r0
 8004e7c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004e86:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e8a:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
        sens_cfg[5].cfg.orientation.theta = (uint8_t)orientation_param_set[context_sel][index++];
 8004e8e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004e92:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004e96:	781a      	ldrb	r2, [r3, #0]
 8004e98:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004e9c:	1c59      	adds	r1, r3, #1
 8004e9e:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	493a      	ldr	r1, [pc, #232]	; (8004f90 <bmi323_context_switch_selection+0xb40>)
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	1a9b      	subs	r3, r3, r2
 8004eac:	4403      	add	r3, r0
 8004eae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004eb8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004ebc:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
        sens_cfg[5].cfg.orientation.hold_time = (uint8_t)orientation_param_set[context_sel][index++];
 8004ec0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ec4:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004ec8:	781a      	ldrb	r2, [r3, #0]
 8004eca:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004ece:	1c59      	adds	r1, r3, #1
 8004ed0:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	492e      	ldr	r1, [pc, #184]	; (8004f90 <bmi323_context_switch_selection+0xb40>)
 8004ed8:	4613      	mov	r3, r2
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	1a9b      	subs	r3, r3, r2
 8004ede:	4403      	add	r3, r0
 8004ee0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004eea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004eee:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
        sens_cfg[5].cfg.orientation.slope_thres = (uint8_t)orientation_param_set[context_sel][index++];
 8004ef2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ef6:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004efa:	781a      	ldrb	r2, [r3, #0]
 8004efc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004f00:	1c59      	adds	r1, r3, #1
 8004f02:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004f06:	4618      	mov	r0, r3
 8004f08:	4921      	ldr	r1, [pc, #132]	; (8004f90 <bmi323_context_switch_selection+0xb40>)
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	1a9b      	subs	r3, r3, r2
 8004f10:	4403      	add	r3, r0
 8004f12:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004f1c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004f20:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
        sens_cfg[5].cfg.orientation.hysteresis = (uint8_t)orientation_param_set[context_sel][index++];
 8004f24:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004f28:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004f2c:	781a      	ldrb	r2, [r3, #0]
 8004f2e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004f32:	1c59      	adds	r1, r3, #1
 8004f34:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004f38:	4618      	mov	r0, r3
 8004f3a:	4915      	ldr	r1, [pc, #84]	; (8004f90 <bmi323_context_switch_selection+0xb40>)
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	1a9b      	subs	r3, r3, r2
 8004f42:	4403      	add	r3, r0
 8004f44:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004f4e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004f52:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed

        /* Set the context configurations */
        rslt = bmi323_set_sensor_config(sens_cfg, BMI323_MAX_FEATURE, dev);
 8004f56:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004f5a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004f5e:	f107 0008 	add.w	r0, r7, #8
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	2106      	movs	r1, #6
 8004f66:	f7ff fa49 	bl	80043fc <bmi323_set_sensor_config>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8004f70:	e002      	b.n	8004f78 <bmi323_context_switch_selection+0xb28>
    }
    else
    {
        rslt = BMI323_E_INVALID_CONTEXT_SEL;
 8004f72:	23f3      	movs	r3, #243	; 0xf3
 8004f74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    }

    return rslt;
 8004f78:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20000084 	.word	0x20000084
 8004f8c:	20000108 	.word	0x20000108
 8004f90:	20000128 	.word	0x20000128

08004f94 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi3_dev *dev)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00b      	beq.n	8004fba <null_ptr_check+0x26>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d007      	beq.n	8004fba <null_ptr_check+0x26>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <null_ptr_check+0x26>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d102      	bne.n	8004fc0 <null_ptr_check+0x2c>
    {
        rslt = BMI323_E_NULL_PTR;
 8004fba:	23ff      	movs	r3, #255	; 0xff
 8004fbc:	73fb      	strb	r3, [r7, #15]
 8004fbe:	e001      	b.n	8004fc4 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI323_OK;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3714      	adds	r7, #20
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <bst_delay_us>:

/******************************************************************************/
/*!               User interface functions                                    */

void bst_delay_us(uint32_t period, void *intf_ptr)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
	uint32_t i;

	while(period--)
 8004fde:	e008      	b.n	8004ff2 <bst_delay_us+0x1e>
	{
		for(i = 0; i < 84; i++){;}
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	e002      	b.n	8004fec <bst_delay_us+0x18>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2b53      	cmp	r3, #83	; 0x53
 8004ff0:	d9f9      	bls.n	8004fe6 <bst_delay_us+0x12>
	while(period--)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	1e5a      	subs	r2, r3, #1
 8004ff6:	607a      	str	r2, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1f1      	bne.n	8004fe0 <bst_delay_us+0xc>
	}
}
 8004ffc:	bf00      	nop
 8004ffe:	bf00      	nop
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
	...

0800500c <UART_Printf>:

void UART_Printf(uint8_t* buff, uint16_t size)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	807b      	strh	r3, [r7, #2]
    HAL_UART_Transmit(&UART_HANDLE, buff, size, BUS_TIMEOUT);
 8005018:	887a      	ldrh	r2, [r7, #2]
 800501a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	4803      	ldr	r0, [pc, #12]	; (8005030 <UART_Printf+0x24>)
 8005022:	f006 fc95 	bl	800b950 <HAL_UART_Transmit>
}
 8005026:	bf00      	nop
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20001248 	.word	0x20001248

08005034 <PDEBUG>:

char chBuffer[512];
void PDEBUG(char *format, ...)
{
 8005034:	b40f      	push	{r0, r1, r2, r3}
 8005036:	b580      	push	{r7, lr}
 8005038:	b082      	sub	sp, #8
 800503a:	af00      	add	r7, sp, #0
    va_list ap;
    va_start(ap, format);
 800503c:	f107 0314 	add.w	r3, r7, #20
 8005040:	607b      	str	r3, [r7, #4]
    vsnprintf(chBuffer, sizeof(chBuffer), format, ap);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	f44f 7100 	mov.w	r1, #512	; 0x200
 800504a:	4809      	ldr	r0, [pc, #36]	; (8005070 <PDEBUG+0x3c>)
 800504c:	f00f fa9a 	bl	8014584 <vsniprintf>
    UART_Printf((uint8_t *)chBuffer,strlen(chBuffer));
 8005050:	4807      	ldr	r0, [pc, #28]	; (8005070 <PDEBUG+0x3c>)
 8005052:	f7fb f8e5 	bl	8000220 <strlen>
 8005056:	4603      	mov	r3, r0
 8005058:	b29b      	uxth	r3, r3
 800505a:	4619      	mov	r1, r3
 800505c:	4804      	ldr	r0, [pc, #16]	; (8005070 <PDEBUG+0x3c>)
 800505e:	f7ff ffd5 	bl	800500c <UART_Printf>
    va_end(ap);
}
 8005062:	bf00      	nop
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800506c:	b004      	add	sp, #16
 800506e:	4770      	bx	lr
 8005070:	20000e14 	.word	0x20000e14

08005074 <SensorAPI_SPIx_Read1>:
#define port2 GPIOA
#define pin2 GPIO_PIN_5

// Either create multiple devices or find a way to change port (first way easier / can change device purpose)
int8_t SensorAPI_SPIx_Read1(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af02      	add	r7, sp, #8
 800507a:	60b9      	str	r1, [r7, #8]
 800507c:	607a      	str	r2, [r7, #4]
 800507e:	603b      	str	r3, [r7, #0]
 8005080:	4603      	mov	r3, r0
 8005082:	73fb      	strb	r3, [r7, #15]
    GTXBuffer[0] = reg_addr | 0x80;
 8005084:	7bfb      	ldrb	r3, [r7, #15]
 8005086:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800508a:	b2da      	uxtb	r2, r3
 800508c:	4b15      	ldr	r3, [pc, #84]	; (80050e4 <SensorAPI_SPIx_Read1+0x70>)
 800508e:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(port1, pin1, GPIO_PIN_RESET); // NSS low
 8005090:	2200      	movs	r2, #0
 8005092:	2110      	movs	r1, #16
 8005094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005098:	f003 f8ca 	bl	8008230 <HAL_GPIO_WritePin>

    //HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, ReadNumbr+1, BUS_TIMEOUT); // timeout 1000msec;
    HAL_SPI_TransmitReceive(&SPI_HANDLE, GTXBuffer, GRXBuffer, length+1, BUS_TIMEOUT); // timeout 1000msec;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	b29b      	uxth	r3, r3
 80050a0:	3301      	adds	r3, #1
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050a8:	9200      	str	r2, [sp, #0]
 80050aa:	4a0f      	ldr	r2, [pc, #60]	; (80050e8 <SensorAPI_SPIx_Read1+0x74>)
 80050ac:	490d      	ldr	r1, [pc, #52]	; (80050e4 <SensorAPI_SPIx_Read1+0x70>)
 80050ae:	480f      	ldr	r0, [pc, #60]	; (80050ec <SensorAPI_SPIx_Read1+0x78>)
 80050b0:	f005 fcd6 	bl	800aa60 <HAL_SPI_TransmitReceive>
    while(SPI_HANDLE.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 80050b4:	bf00      	nop
 80050b6:	4b0d      	ldr	r3, [pc, #52]	; (80050ec <SensorAPI_SPIx_Read1+0x78>)
 80050b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d0f9      	beq.n	80050b6 <SensorAPI_SPIx_Read1+0x42>

    HAL_GPIO_WritePin(port1, pin1, GPIO_PIN_SET); // NSS high
 80050c2:	2201      	movs	r2, #1
 80050c4:	2110      	movs	r1, #16
 80050c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050ca:	f003 f8b1 	bl	8008230 <HAL_GPIO_WritePin>
    memcpy(reg_data, GRXBuffer+1, length);
 80050ce:	4b08      	ldr	r3, [pc, #32]	; (80050f0 <SensorAPI_SPIx_Read1+0x7c>)
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	4619      	mov	r1, r3
 80050d4:	68b8      	ldr	r0, [r7, #8]
 80050d6:	f00f fb38 	bl	801474a <memcpy>

    return 0;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	20000414 	.word	0x20000414
 80050e8:	20000614 	.word	0x20000614
 80050ec:	20001124 	.word	0x20001124
 80050f0:	20000615 	.word	0x20000615

080050f4 <SensorAPI_SPIx_Read2>:

int8_t SensorAPI_SPIx_Read2(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af02      	add	r7, sp, #8
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	607a      	str	r2, [r7, #4]
 80050fe:	603b      	str	r3, [r7, #0]
 8005100:	4603      	mov	r3, r0
 8005102:	73fb      	strb	r3, [r7, #15]
    GTXBuffer[0] = reg_addr | 0x80;
 8005104:	7bfb      	ldrb	r3, [r7, #15]
 8005106:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800510a:	b2da      	uxtb	r2, r3
 800510c:	4b15      	ldr	r3, [pc, #84]	; (8005164 <SensorAPI_SPIx_Read2+0x70>)
 800510e:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(port2, pin2, GPIO_PIN_RESET); // NSS low
 8005110:	2200      	movs	r2, #0
 8005112:	2120      	movs	r1, #32
 8005114:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005118:	f003 f88a 	bl	8008230 <HAL_GPIO_WritePin>

    //HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, ReadNumbr+1, BUS_TIMEOUT); // timeout 1000msec;
    HAL_SPI_TransmitReceive(&SPI_HANDLE, GTXBuffer, GRXBuffer, length+1, BUS_TIMEOUT); // timeout 1000msec;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	b29b      	uxth	r3, r3
 8005120:	3301      	adds	r3, #1
 8005122:	b29b      	uxth	r3, r3
 8005124:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005128:	9200      	str	r2, [sp, #0]
 800512a:	4a0f      	ldr	r2, [pc, #60]	; (8005168 <SensorAPI_SPIx_Read2+0x74>)
 800512c:	490d      	ldr	r1, [pc, #52]	; (8005164 <SensorAPI_SPIx_Read2+0x70>)
 800512e:	480f      	ldr	r0, [pc, #60]	; (800516c <SensorAPI_SPIx_Read2+0x78>)
 8005130:	f005 fc96 	bl	800aa60 <HAL_SPI_TransmitReceive>
    while(SPI_HANDLE.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8005134:	bf00      	nop
 8005136:	4b0d      	ldr	r3, [pc, #52]	; (800516c <SensorAPI_SPIx_Read2+0x78>)
 8005138:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b02      	cmp	r3, #2
 8005140:	d0f9      	beq.n	8005136 <SensorAPI_SPIx_Read2+0x42>

    HAL_GPIO_WritePin(port2, pin2, GPIO_PIN_SET); // NSS high
 8005142:	2201      	movs	r2, #1
 8005144:	2120      	movs	r1, #32
 8005146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800514a:	f003 f871 	bl	8008230 <HAL_GPIO_WritePin>
    memcpy(reg_data, GRXBuffer+1, length);
 800514e:	4b08      	ldr	r3, [pc, #32]	; (8005170 <SensorAPI_SPIx_Read2+0x7c>)
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	4619      	mov	r1, r3
 8005154:	68b8      	ldr	r0, [r7, #8]
 8005156:	f00f faf8 	bl	801474a <memcpy>

    return 0;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	20000414 	.word	0x20000414
 8005168:	20000614 	.word	0x20000614
 800516c:	20001124 	.word	0x20001124
 8005170:	20000615 	.word	0x20000615

08005174 <SensorAPI_SPIx_Write1>:

int8_t SensorAPI_SPIx_Write1(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	607a      	str	r2, [r7, #4]
 800517e:	603b      	str	r3, [r7, #0]
 8005180:	4603      	mov	r3, r0
 8005182:	73fb      	strb	r3, [r7, #15]
    GTXBuffer[0] = reg_addr & 0x7F;
 8005184:	7bfb      	ldrb	r3, [r7, #15]
 8005186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800518a:	b2da      	uxtb	r2, r3
 800518c:	4b14      	ldr	r3, [pc, #80]	; (80051e0 <SensorAPI_SPIx_Write1+0x6c>)
 800518e:	701a      	strb	r2, [r3, #0]
    memcpy(&GTXBuffer[1], reg_data, length);
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	4813      	ldr	r0, [pc, #76]	; (80051e4 <SensorAPI_SPIx_Write1+0x70>)
 8005196:	f00f fad8 	bl	801474a <memcpy>

    HAL_GPIO_WritePin(port1, pin1, GPIO_PIN_RESET); // NSS low
 800519a:	2200      	movs	r2, #0
 800519c:	2110      	movs	r1, #16
 800519e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051a2:	f003 f845 	bl	8008230 <HAL_GPIO_WritePin>

    //HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, WriteNumbr+1, BUS_TIMEOUT); // send register address + write data
    HAL_SPI_Transmit(&SPI_HANDLE, GTXBuffer, length+1, BUS_TIMEOUT); // send register address + write data
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	3301      	adds	r3, #1
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051b2:	490b      	ldr	r1, [pc, #44]	; (80051e0 <SensorAPI_SPIx_Write1+0x6c>)
 80051b4:	480c      	ldr	r0, [pc, #48]	; (80051e8 <SensorAPI_SPIx_Write1+0x74>)
 80051b6:	f005 fade 	bl	800a776 <HAL_SPI_Transmit>
    while(SPI_HANDLE.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 80051ba:	bf00      	nop
 80051bc:	4b0a      	ldr	r3, [pc, #40]	; (80051e8 <SensorAPI_SPIx_Write1+0x74>)
 80051be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d0f9      	beq.n	80051bc <SensorAPI_SPIx_Write1+0x48>

    HAL_GPIO_WritePin(port1, pin1, GPIO_PIN_SET); // NSS high
 80051c8:	2201      	movs	r2, #1
 80051ca:	2110      	movs	r1, #16
 80051cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051d0:	f003 f82e 	bl	8008230 <HAL_GPIO_WritePin>

    return 0;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	20000414 	.word	0x20000414
 80051e4:	20000415 	.word	0x20000415
 80051e8:	20001124 	.word	0x20001124

080051ec <SensorAPI_SPIx_Write2>:

int8_t SensorAPI_SPIx_Write2(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60b9      	str	r1, [r7, #8]
 80051f4:	607a      	str	r2, [r7, #4]
 80051f6:	603b      	str	r3, [r7, #0]
 80051f8:	4603      	mov	r3, r0
 80051fa:	73fb      	strb	r3, [r7, #15]
    GTXBuffer[0] = reg_addr & 0x7F;
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
 80051fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005202:	b2da      	uxtb	r2, r3
 8005204:	4b14      	ldr	r3, [pc, #80]	; (8005258 <SensorAPI_SPIx_Write2+0x6c>)
 8005206:	701a      	strb	r2, [r3, #0]
    memcpy(&GTXBuffer[1], reg_data, length);
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	68b9      	ldr	r1, [r7, #8]
 800520c:	4813      	ldr	r0, [pc, #76]	; (800525c <SensorAPI_SPIx_Write2+0x70>)
 800520e:	f00f fa9c 	bl	801474a <memcpy>

    HAL_GPIO_WritePin(port2, pin2, GPIO_PIN_RESET); // NSS low
 8005212:	2200      	movs	r2, #0
 8005214:	2120      	movs	r1, #32
 8005216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800521a:	f003 f809 	bl	8008230 <HAL_GPIO_WritePin>

    //HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, WriteNumbr+1, BUS_TIMEOUT); // send register address + write data
    HAL_SPI_Transmit(&SPI_HANDLE, GTXBuffer, length+1, BUS_TIMEOUT); // send register address + write data
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	b29b      	uxth	r3, r3
 8005222:	3301      	adds	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800522a:	490b      	ldr	r1, [pc, #44]	; (8005258 <SensorAPI_SPIx_Write2+0x6c>)
 800522c:	480c      	ldr	r0, [pc, #48]	; (8005260 <SensorAPI_SPIx_Write2+0x74>)
 800522e:	f005 faa2 	bl	800a776 <HAL_SPI_Transmit>
    while(SPI_HANDLE.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8005232:	bf00      	nop
 8005234:	4b0a      	ldr	r3, [pc, #40]	; (8005260 <SensorAPI_SPIx_Write2+0x74>)
 8005236:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d0f9      	beq.n	8005234 <SensorAPI_SPIx_Write2+0x48>

    HAL_GPIO_WritePin(port2, pin2, GPIO_PIN_SET); // NSS high
 8005240:	2201      	movs	r2, #1
 8005242:	2120      	movs	r1, #32
 8005244:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005248:	f002 fff2 	bl	8008230 <HAL_GPIO_WritePin>

    return 0;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	20000414 	.word	0x20000414
 800525c:	20000415 	.word	0x20000415
 8005260:	20001124 	.word	0x20001124

08005264 <bmi3_error_codes_print_result>:

/*!
 * @brief This API prints the execution status
 */
void bmi3_error_codes_print_result(const char api_name[], int8_t rslt)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	460b      	mov	r3, r1
 800526e:	70fb      	strb	r3, [r7, #3]
    switch (rslt)
 8005270:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005274:	330e      	adds	r3, #14
 8005276:	2b0e      	cmp	r3, #14
 8005278:	f200 80bc 	bhi.w	80053f4 <bmi3_error_codes_print_result+0x190>
 800527c:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <bmi3_error_codes_print_result+0x20>)
 800527e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005282:	bf00      	nop
 8005284:	080053df 	.word	0x080053df
 8005288:	080053c9 	.word	0x080053c9
 800528c:	080053b3 	.word	0x080053b3
 8005290:	0800539d 	.word	0x0800539d
 8005294:	08005387 	.word	0x08005387
 8005298:	08005371 	.word	0x08005371
 800529c:	0800535b 	.word	0x0800535b
 80052a0:	08005319 	.word	0x08005319
 80052a4:	08005303 	.word	0x08005303
 80052a8:	08005345 	.word	0x08005345
 80052ac:	0800532f 	.word	0x0800532f
 80052b0:	080052ed 	.word	0x080052ed
 80052b4:	080052d7 	.word	0x080052d7
 80052b8:	080052c1 	.word	0x080052c1
 80052bc:	0800540b 	.word	0x0800540b

            /*! Do nothing */
            break;

        case BMI3_E_NULL_PTR:
            PDEBUG("%s\t", api_name);
 80052c0:	6879      	ldr	r1, [r7, #4]
 80052c2:	4854      	ldr	r0, [pc, #336]	; (8005414 <bmi3_error_codes_print_result+0x1b0>)
 80052c4:	f7ff feb6 	bl	8005034 <PDEBUG>
            PDEBUG(
 80052c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052cc:	4619      	mov	r1, r3
 80052ce:	4852      	ldr	r0, [pc, #328]	; (8005418 <bmi3_error_codes_print_result+0x1b4>)
 80052d0:	f7ff feb0 	bl	8005034 <PDEBUG>
                "Error [%d] : Null pointer error. It occurs when the user tries to assign value (not address) to a pointer," " which has been initialized to NULL.\r\n",
                rslt);
            break;
 80052d4:	e09a      	b.n	800540c <bmi3_error_codes_print_result+0x1a8>

        case BMI3_E_COM_FAIL:
            PDEBUG("%s\t", api_name);
 80052d6:	6879      	ldr	r1, [r7, #4]
 80052d8:	484e      	ldr	r0, [pc, #312]	; (8005414 <bmi3_error_codes_print_result+0x1b0>)
 80052da:	f7ff feab 	bl	8005034 <PDEBUG>
            PDEBUG(
 80052de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052e2:	4619      	mov	r1, r3
 80052e4:	484d      	ldr	r0, [pc, #308]	; (800541c <bmi3_error_codes_print_result+0x1b8>)
 80052e6:	f7ff fea5 	bl	8005034 <PDEBUG>
                "Error [%d] : Communication failure error. It occurs due to read/write operation failure and also due " "to power failure during communication\r\n",
                rslt);
            break;
 80052ea:	e08f      	b.n	800540c <bmi3_error_codes_print_result+0x1a8>

        case BMI3_E_DEV_NOT_FOUND:
            PDEBUG("%s\t", api_name);
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	4849      	ldr	r0, [pc, #292]	; (8005414 <bmi3_error_codes_print_result+0x1b0>)
 80052f0:	f7ff fea0 	bl	8005034 <PDEBUG>
            PDEBUG("Error [%d] : Device not found error. It occurs when the device chip id is incorrectly read\r\n",
 80052f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052f8:	4619      	mov	r1, r3
 80052fa:	4849      	ldr	r0, [pc, #292]	; (8005420 <bmi3_error_codes_print_result+0x1bc>)
 80052fc:	f7ff fe9a 	bl	8005034 <PDEBUG>
                   rslt);
            break;
 8005300:	e084      	b.n	800540c <bmi3_error_codes_print_result+0x1a8>

        case BMI3_E_INVALID_SENSOR:
            PDEBUG("%s\t", api_name);
 8005302:	6879      	ldr	r1, [r7, #4]
 8005304:	4843      	ldr	r0, [pc, #268]	; (8005414 <bmi3_error_codes_print_result+0x1b0>)
 8005306:	f7ff fe95 	bl	8005034 <PDEBUG>
            PDEBUG(
 800530a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800530e:	4619      	mov	r1, r3
 8005310:	4844      	ldr	r0, [pc, #272]	; (8005424 <bmi3_error_codes_print_result+0x1c0>)
 8005312:	f7ff fe8f 	bl	8005034 <PDEBUG>
                "Error [%d] : Invalid sensor error. It occurs when there is a mismatch in the requested feature with the " "available one\r\n",
                rslt);
            break;
 8005316:	e079      	b.n	800540c <bmi3_error_codes_print_result+0x1a8>

        case BMI3_E_INVALID_INT_PIN:
            PDEBUG("%s\t", api_name);
 8005318:	6879      	ldr	r1, [r7, #4]
 800531a:	483e      	ldr	r0, [pc, #248]	; (8005414 <bmi3_error_codes_print_result+0x1b0>)
 800531c:	f7ff fe8a 	bl	8005034 <PDEBUG>
            PDEBUG(
 8005320:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005324:	4619      	mov	r1, r3
 8005326:	4840      	ldr	r0, [pc, #256]	; (8005428 <bmi3_error_codes_print_result+0x1c4>)
 8005328:	f7ff fe84 	bl	8005034 <PDEBUG>
                "Error [%d] : Invalid interrupt pin error. It occurs when the user tries to configure interrupt pins " "apart from INT1 and INT2\r\n",
                rslt);
            break;
 800532c:	e06e      	b.n	800540c <bmi3_error_codes_print_result+0x1a8>

        case BMI3_E_ACC_INVALID_CFG:
            PDEBUG("%s\t", api_name);
 800532e:	6879      	ldr	r1, [r7, #4]
 8005330:	4838      	ldr	r0, [pc, #224]	; (8005414 <bmi3_error_codes_print_result+0x1b0>)
 8005332:	f7ff fe7f 	bl	8005034 <PDEBUG>
            PDEBUG(
 8005336:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800533a:	4619      	mov	r1, r3
 800533c:	483b      	ldr	r0, [pc, #236]	; (800542c <bmi3_error_codes_print_result+0x1c8>)
 800533e:	f7ff fe79 	bl	8005034 <PDEBUG>
                "Error [%d] : Invalid Accel configuration error. It occurs when there is an error in accel configuration" " register which could be one among range, BW or filter performance in reg address 0x20\r\n",
                rslt);
            break;
 8005342:	e063      	b.n	800540c <bmi3_error_codes_print_result+0x1a8>

        case BMI3_E_GYRO_INVALID_CFG:
            PDEBUG("%s\t", api_name);
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	4833      	ldr	r0, [pc, #204]	; (8005414 <bmi3_error_codes_print_result+0x1b0>)
 8005348:	f7ff fe74 	bl	8005034 <PDEBUG>
            PDEBUG(
 800534c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005350:	4619      	mov	r1, r3
 8005352:	4837      	ldr	r0, [pc, #220]	; (8005430 <bmi3_error_codes_print_result+0x1cc>)
 8005354:	f7ff fe6e 	bl	8005034 <PDEBUG>
                "Error [%d] : Invalid Gyro configuration error. It occurs when there is a error in gyro configuration" "register which could be one among range, BW or filter performance in reg address 0x21\r\n",
                rslt);
            break;
 8005358:	e058      	b.n	800540c <bmi3_error_codes_print_result+0x1a8>

        case BMI3_E_INVALID_INPUT:
            PDEBUG("%s\t", api_name);
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	482d      	ldr	r0, [pc, #180]	; (8005414 <bmi3_error_codes_print_result+0x1b0>)
 800535e:	f7ff fe69 	bl	8005034 <PDEBUG>
            PDEBUG("Error [%d] : Invalid input error. It occurs when the sensor input validity fails\r\n", rslt);
 8005362:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005366:	4619      	mov	r1, r3
 8005368:	4832      	ldr	r0, [pc, #200]	; (8005434 <bmi3_error_codes_print_result+0x1d0>)
 800536a:	f7ff fe63 	bl	8005034 <PDEBUG>
            break;
 800536e:	e04d      	b.n	800540c <bmi3_error_codes_print_result+0x1a8>

        case BMI3_E_INVALID_STATUS:
            PDEBUG("%s\t", api_name);
 8005370:	6879      	ldr	r1, [r7, #4]
 8005372:	4828      	ldr	r0, [pc, #160]	; (8005414 <bmi3_error_codes_print_result+0x1b0>)
 8005374:	f7ff fe5e 	bl	8005034 <PDEBUG>
            PDEBUG("Error [%d] : Invalid status error. It occurs when the feature/sensor validity fails\r\n", rslt);
 8005378:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800537c:	4619      	mov	r1, r3
 800537e:	482e      	ldr	r0, [pc, #184]	; (8005438 <bmi3_error_codes_print_result+0x1d4>)
 8005380:	f7ff fe58 	bl	8005034 <PDEBUG>
            break;
 8005384:	e042      	b.n	800540c <bmi3_error_codes_print_result+0x1a8>

        case BMI3_E_DATA_RDY_INT_FAILED:
            PDEBUG("%s\t", api_name);
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	4822      	ldr	r0, [pc, #136]	; (8005414 <bmi3_error_codes_print_result+0x1b0>)
 800538a:	f7ff fe53 	bl	8005034 <PDEBUG>
            PDEBUG(
 800538e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005392:	4619      	mov	r1, r3
 8005394:	4829      	ldr	r0, [pc, #164]	; (800543c <bmi3_error_codes_print_result+0x1d8>)
 8005396:	f7ff fe4d 	bl	8005034 <PDEBUG>
                "Error [%d] : Data ready interrupt error. It occurs when the sample count exceeds the FOC sample limit " "and data ready status is not updated\r\n",
                rslt);
            break;
 800539a:	e037      	b.n	800540c <bmi3_error_codes_print_result+0x1a8>

        case BMI3_E_INVALID_FOC_POSITION:
            PDEBUG("%s\t", api_name);
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	481d      	ldr	r0, [pc, #116]	; (8005414 <bmi3_error_codes_print_result+0x1b0>)
 80053a0:	f7ff fe48 	bl	8005034 <PDEBUG>
            PDEBUG(
 80053a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053a8:	4619      	mov	r1, r3
 80053aa:	4825      	ldr	r0, [pc, #148]	; (8005440 <bmi3_error_codes_print_result+0x1dc>)
 80053ac:	f7ff fe42 	bl	8005034 <PDEBUG>
                "Error [%d] : Invalid FOC position error. It occurs when average FOC data is obtained for the wrong" " axes\r\n",
                rslt);
            break;
 80053b0:	e02c      	b.n	800540c <bmi3_error_codes_print_result+0x1a8>

        case BMI3_E_INVALID_ST_SELECTION:
            PDEBUG("%s\t", api_name);
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	4817      	ldr	r0, [pc, #92]	; (8005414 <bmi3_error_codes_print_result+0x1b0>)
 80053b6:	f7ff fe3d 	bl	8005034 <PDEBUG>
            PDEBUG(
 80053ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053be:	4619      	mov	r1, r3
 80053c0:	4820      	ldr	r0, [pc, #128]	; (8005444 <bmi3_error_codes_print_result+0x1e0>)
 80053c2:	f7ff fe37 	bl	8005034 <PDEBUG>
                "Error [%d] : Invalid self-test selection error. It occurs when there is an invalid precondition" "settings such as alternate accelerometer and gyroscope enable bits, accelerometer mode and output data rate\r\n",
                rslt);
            break;
 80053c6:	e021      	b.n	800540c <bmi3_error_codes_print_result+0x1a8>

        case BMI3_E_OUT_OF_RANGE:
            PDEBUG("%s\t", api_name);
 80053c8:	6879      	ldr	r1, [r7, #4]
 80053ca:	4812      	ldr	r0, [pc, #72]	; (8005414 <bmi3_error_codes_print_result+0x1b0>)
 80053cc:	f7ff fe32 	bl	8005034 <PDEBUG>
            PDEBUG(
 80053d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053d4:	4619      	mov	r1, r3
 80053d6:	481c      	ldr	r0, [pc, #112]	; (8005448 <bmi3_error_codes_print_result+0x1e4>)
 80053d8:	f7ff fe2c 	bl	8005034 <PDEBUG>
                "Error [%d] : Out of range error. It occurs when the range exceeds the maximum range for accel while performing FOC\r\n",
                rslt);
            break;
 80053dc:	e016      	b.n	800540c <bmi3_error_codes_print_result+0x1a8>

        case BMI3_E_FEATURE_ENGINE_STATUS:
            PDEBUG("%s\t", api_name);
 80053de:	6879      	ldr	r1, [r7, #4]
 80053e0:	480c      	ldr	r0, [pc, #48]	; (8005414 <bmi3_error_codes_print_result+0x1b0>)
 80053e2:	f7ff fe27 	bl	8005034 <PDEBUG>
            PDEBUG(
 80053e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053ea:	4619      	mov	r1, r3
 80053ec:	4817      	ldr	r0, [pc, #92]	; (800544c <bmi3_error_codes_print_result+0x1e8>)
 80053ee:	f7ff fe21 	bl	8005034 <PDEBUG>
                "Error [%d] : Feature engine status error. It occurs when the feature engine enable mask is not set\r\n",
                rslt);
            break;
 80053f2:	e00b      	b.n	800540c <bmi3_error_codes_print_result+0x1a8>

        default:
            PDEBUG("%s\t", api_name);
 80053f4:	6879      	ldr	r1, [r7, #4]
 80053f6:	4807      	ldr	r0, [pc, #28]	; (8005414 <bmi3_error_codes_print_result+0x1b0>)
 80053f8:	f7ff fe1c 	bl	8005034 <PDEBUG>
            PDEBUG("Error [%d] : Unknown error code\r\n", rslt);
 80053fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005400:	4619      	mov	r1, r3
 8005402:	4813      	ldr	r0, [pc, #76]	; (8005450 <bmi3_error_codes_print_result+0x1ec>)
 8005404:	f7ff fe16 	bl	8005034 <PDEBUG>
            break;
 8005408:	e000      	b.n	800540c <bmi3_error_codes_print_result+0x1a8>
            break;
 800540a:	bf00      	nop
    }
}
 800540c:	bf00      	nop
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	080176fc 	.word	0x080176fc
 8005418:	08017700 	.word	0x08017700
 800541c:	08017794 	.word	0x08017794
 8005420:	08017824 	.word	0x08017824
 8005424:	08017884 	.word	0x08017884
 8005428:	080178fc 	.word	0x080178fc
 800542c:	0801797c 	.word	0x0801797c
 8005430:	08017a3c 	.word	0x08017a3c
 8005434:	08017af8 	.word	0x08017af8
 8005438:	08017b4c 	.word	0x08017b4c
 800543c:	08017ba4 	.word	0x08017ba4
 8005440:	08017c34 	.word	0x08017c34
 8005444:	08017ca0 	.word	0x08017ca0
 8005448:	08017d70 	.word	0x08017d70
 800544c:	08017de8 	.word	0x08017de8
 8005450:	08017e50 	.word	0x08017e50

08005454 <bmi3_interface_init>:
/*!
 *  @brief Function to select the interface between SPI and I2C.
 *  Also to initialize coines platform
 */
int8_t bmi3_interface_init(struct bmi3_dev *bmi, uint8_t intf)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	460b      	mov	r3, r1
 800545e:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BMI3_OK;
 8005460:	2300      	movs	r3, #0
 8005462:	73fb      	strb	r3, [r7, #15]

	/* Bus configuration : SPI */
	if (intf == BMI3_SPI_INTF)
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d105      	bne.n	8005476 <bmi3_interface_init+0x22>
	{
		PDEBUG("SPI Interface \n");
 800546a:	480c      	ldr	r0, [pc, #48]	; (800549c <bmi3_interface_init+0x48>)
 800546c:	f7ff fde2 	bl	8005034 <PDEBUG>
		bmi->intf = BMI3_SPI_INTF;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	725a      	strb	r2, [r3, #9]
//		bmi->write = (bmi3_write_fptr_t)SensorAPI_SPIx_Write1;
	}


	/* Assign device address to interface pointer */
	bmi->intf_ptr = &bmi323_dev_addr;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a09      	ldr	r2, [pc, #36]	; (80054a0 <bmi3_interface_init+0x4c>)
 800547a:	605a      	str	r2, [r3, #4]
	bmi323_dev_addr = 0;
 800547c:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <bmi3_interface_init+0x4c>)
 800547e:	2200      	movs	r2, #0
 8005480:	701a      	strb	r2, [r3, #0]

	/* Configure delay in microseconds */
	bmi->delay_us = bst_delay_us;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a07      	ldr	r2, [pc, #28]	; (80054a4 <bmi3_interface_init+0x50>)
 8005486:	619a      	str	r2, [r3, #24]

	/* Configure max read/write length (in bytes) ( Supported length depends on target machine) */
	bmi->read_write_len = READ_WRITE_LEN;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2220      	movs	r2, #32
 800548c:	81da      	strh	r2, [r3, #14]

	return rslt;
 800548e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	08017e74 	.word	0x08017e74
 80054a0:	20000410 	.word	0x20000410
 80054a4:	08004fd5 	.word	0x08004fd5

080054a8 <lsb_to_mps2>:
/*!
 * @brief This function converts lsb to meter per second squared for 16 bit accelerometer at
 * range 2G, 4G, 8G or 16G.
 */
static float lsb_to_mps2(int16_t val, float g_range, uint8_t bit_width)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	4603      	mov	r3, r0
 80054b0:	ed87 0a00 	vstr	s0, [r7]
 80054b4:	460a      	mov	r2, r1
 80054b6:	80fb      	strh	r3, [r7, #6]
 80054b8:	4613      	mov	r3, r2
 80054ba:	717b      	strb	r3, [r7, #5]
    float half_scale = ((float)(1 << bit_width) / 2.0f);
 80054bc:	797b      	ldrb	r3, [r7, #5]
 80054be:	2201      	movs	r2, #1
 80054c0:	fa02 f303 	lsl.w	r3, r2, r3
 80054c4:	ee07 3a90 	vmov	s15, r3
 80054c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80054d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054d4:	edc7 7a03 	vstr	s15, [r7, #12]

    return (GRAVITY_EARTH * val * g_range) / half_scale;
 80054d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054dc:	ee07 3a90 	vmov	s15, r3
 80054e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054e4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8005510 <lsb_to_mps2+0x68>
 80054e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80054ec:	edd7 7a00 	vldr	s15, [r7]
 80054f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80054f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80054fc:	eef0 7a66 	vmov.f32	s15, s13
}
 8005500:	eeb0 0a67 	vmov.f32	s0, s15
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	411ce80a 	.word	0x411ce80a

08005514 <lsb_to_dps>:
/*!
 * @brief This function converts lsb to degree per second for 16 bit gyro at
 * range 125, 250, 500, 1000 or 2000dps.
 */
static float lsb_to_dps(int16_t val, float dps, uint8_t bit_width)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	4603      	mov	r3, r0
 800551c:	ed87 0a00 	vstr	s0, [r7]
 8005520:	460a      	mov	r2, r1
 8005522:	80fb      	strh	r3, [r7, #6]
 8005524:	4613      	mov	r3, r2
 8005526:	717b      	strb	r3, [r7, #5]
    double power = 2;
 8005528:	f04f 0200 	mov.w	r2, #0
 800552c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005530:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 8005534:	797b      	ldrb	r3, [r7, #5]
 8005536:	4618      	mov	r0, r3
 8005538:	f7fa ffbc 	bl	80004b4 <__aeabi_ui2d>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	ec43 2b11 	vmov	d1, r2, r3
 8005544:	ed97 0b04 	vldr	d0, [r7, #16]
 8005548:	f011 f97a 	bl	8016840 <pow>
 800554c:	ec51 0b10 	vmov	r0, r1, d0
 8005550:	f04f 0200 	mov.w	r2, #0
 8005554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005558:	f7fb f950 	bl	80007fc <__aeabi_ddiv>
 800555c:	4602      	mov	r2, r0
 800555e:	460b      	mov	r3, r1
 8005560:	4610      	mov	r0, r2
 8005562:	4619      	mov	r1, r3
 8005564:	f7fb faf8 	bl	8000b58 <__aeabi_d2f>
 8005568:	4603      	mov	r3, r0
 800556a:	60fb      	str	r3, [r7, #12]

    return (dps / (half_scale)) * (val);
 800556c:	edd7 6a00 	vldr	s13, [r7]
 8005570:	edd7 7a03 	vldr	s15, [r7, #12]
 8005574:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005578:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800557c:	ee07 3a90 	vmov	s15, r3
 8005580:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005584:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8005588:	eeb0 0a67 	vmov.f32	s0, s15
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
	...

08005594 <Open_BMI323_ACC>:

int8_t Open_BMI323_ACC(struct bmi3_dev *dev)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b08e      	sub	sp, #56	; 0x38
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
	int8_t rslt = BMI3_OK;
 800559c:	2300      	movs	r3, #0
 800559e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	/* Sensor configuration structure */
	struct bmi3_sens_config config = { 0 };
 80055a2:	f107 0308 	add.w	r3, r7, #8
 80055a6:	222e      	movs	r2, #46	; 0x2e
 80055a8:	2100      	movs	r1, #0
 80055aa:	4618      	mov	r0, r3
 80055ac:	f00e fff8 	bl	80145a0 <memset>

	config.type = BMI3_ACCEL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	723b      	strb	r3, [r7, #8]

	/* Get the previous or default configuration settings */
	rslt = bmi323_get_sensor_config(&config, 1, dev);
 80055b4:	f107 0308 	add.w	r3, r7, #8
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	2101      	movs	r1, #1
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fe ff32 	bl	8004426 <bmi323_get_sensor_config>
 80055c2:	4603      	mov	r3, r0
 80055c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (rslt == BMI3_OK)
 80055c8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d14b      	bne.n	8005668 <Open_BMI323_ACC+0xd4>
	{
		/* Update all or any of the accelerometer configurations */

		/* The Accel bandwidth coefficient defines the 3 dB cutoff frequency in relation to the ODR. */
		config.cfg.acc.bwp = BMI3_ACC_BW_ODR_HALF;
 80055d0:	2300      	movs	r3, #0
 80055d2:	72fb      	strb	r3, [r7, #11]

		/* Set number of average samples for accel. */
		config.cfg.acc.avg_num = BMI3_ACC_AVG8;
 80055d4:	2303      	movs	r3, #3
 80055d6:	73bb      	strb	r3, [r7, #14]

		/* Enable the accel mode where averaging of samples
		* will be done based on above set bandwidth and ODR.
		* Note : By default accel is disabled. The accel will get enable by selecting the mode.
		*/
		config.cfg.acc.acc_mode = BMI3_ACC_MODE_NORMAL;
 80055d8:	2304      	movs	r3, #4
 80055da:	733b      	strb	r3, [r7, #12]

		config.cfg.acc.odr = BMI3_ACC_ODR_1600HZ; //BMI3_ACC_ODR_400HZ;
 80055dc:	230c      	movs	r3, #12
 80055de:	72bb      	strb	r3, [r7, #10]

		/* Gravity range of the sensor (+/- 2G, 4G, 8G, 16G). */
		config.cfg.acc.range     = BMI3_ACC_RANGE_4G;
 80055e0:	2301      	movs	r3, #1
 80055e2:	737b      	strb	r3, [r7, #13]

		/* Set the configurations */
		rslt = bmi323_set_sensor_config(&config, 1, dev);
 80055e4:	f107 0308 	add.w	r3, r7, #8
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	2101      	movs	r1, #1
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7fe ff05 	bl	80043fc <bmi323_set_sensor_config>
 80055f2:	4603      	mov	r3, r0
 80055f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (rslt != BMI3_OK)
 80055f8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d006      	beq.n	800560e <Open_BMI323_ACC+0x7a>
		{
			PDEBUG("Open ACC failed, rslt=%d\r\n", rslt);
 8005600:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8005604:	4619      	mov	r1, r3
 8005606:	481b      	ldr	r0, [pc, #108]	; (8005674 <Open_BMI323_ACC+0xe0>)
 8005608:	f7ff fd14 	bl	8005034 <PDEBUG>
 800560c:	e02c      	b.n	8005668 <Open_BMI323_ACC+0xd4>
		}
		else
		{
			PDEBUG("Open ACC set successfully\r\n");
 800560e:	481a      	ldr	r0, [pc, #104]	; (8005678 <Open_BMI323_ACC+0xe4>)
 8005610:	f7ff fd10 	bl	8005034 <PDEBUG>

			/* Get the configuration settings for validation */
			rslt = bmi323_get_sensor_config(&config, 1, dev);
 8005614:	f107 0308 	add.w	r3, r7, #8
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	2101      	movs	r1, #1
 800561c:	4618      	mov	r0, r3
 800561e:	f7fe ff02 	bl	8004426 <bmi323_get_sensor_config>
 8005622:	4603      	mov	r3, r0
 8005624:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (rslt == BMI3_OK)
 8005628:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800562c:	2b00      	cmp	r3, #0
 800562e:	d11b      	bne.n	8005668 <Open_BMI323_ACC+0xd4>
			{
				PDEBUG("Get ACC configuration successful\r\n");
 8005630:	4812      	ldr	r0, [pc, #72]	; (800567c <Open_BMI323_ACC+0xe8>)
 8005632:	f7ff fcff 	bl	8005034 <PDEBUG>
				PDEBUG("acc_mode = %d\r\n", config.cfg.acc.acc_mode);
 8005636:	7b3b      	ldrb	r3, [r7, #12]
 8005638:	4619      	mov	r1, r3
 800563a:	4811      	ldr	r0, [pc, #68]	; (8005680 <Open_BMI323_ACC+0xec>)
 800563c:	f7ff fcfa 	bl	8005034 <PDEBUG>
				PDEBUG("bwp = %d\r\n", config.cfg.acc.bwp);
 8005640:	7afb      	ldrb	r3, [r7, #11]
 8005642:	4619      	mov	r1, r3
 8005644:	480f      	ldr	r0, [pc, #60]	; (8005684 <Open_BMI323_ACC+0xf0>)
 8005646:	f7ff fcf5 	bl	8005034 <PDEBUG>
				PDEBUG("odr = %d\r\n", config.cfg.acc.odr);
 800564a:	7abb      	ldrb	r3, [r7, #10]
 800564c:	4619      	mov	r1, r3
 800564e:	480e      	ldr	r0, [pc, #56]	; (8005688 <Open_BMI323_ACC+0xf4>)
 8005650:	f7ff fcf0 	bl	8005034 <PDEBUG>
				PDEBUG("Range = %d\r\n", config.cfg.acc.range);
 8005654:	7b7b      	ldrb	r3, [r7, #13]
 8005656:	4619      	mov	r1, r3
 8005658:	480c      	ldr	r0, [pc, #48]	; (800568c <Open_BMI323_ACC+0xf8>)
 800565a:	f7ff fceb 	bl	8005034 <PDEBUG>
				PDEBUG("avg_num = %d\r\n", config.cfg.acc.avg_num);
 800565e:	7bbb      	ldrb	r3, [r7, #14]
 8005660:	4619      	mov	r1, r3
 8005662:	480b      	ldr	r0, [pc, #44]	; (8005690 <Open_BMI323_ACC+0xfc>)
 8005664:	f7ff fce6 	bl	8005034 <PDEBUG>
			}
		}
	}

	return rslt;
 8005668:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800566c:	4618      	mov	r0, r3
 800566e:	3738      	adds	r7, #56	; 0x38
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	08017e84 	.word	0x08017e84
 8005678:	08017ea0 	.word	0x08017ea0
 800567c:	08017ebc 	.word	0x08017ebc
 8005680:	08017ee0 	.word	0x08017ee0
 8005684:	08017ef0 	.word	0x08017ef0
 8005688:	08017efc 	.word	0x08017efc
 800568c:	08017f08 	.word	0x08017f08
 8005690:	08017f18 	.word	0x08017f18

08005694 <Open_BMI323_GYRO>:

	return rslt;
}

int8_t Open_BMI323_GYRO(struct bmi3_dev *dev)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b08e      	sub	sp, #56	; 0x38
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
	int8_t rslt = BMI3_OK;
 800569c:	2300      	movs	r3, #0
 800569e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	/* Sensor configuration structure */
	struct bmi3_sens_config config = { 0 };
 80056a2:	f107 0308 	add.w	r3, r7, #8
 80056a6:	222e      	movs	r2, #46	; 0x2e
 80056a8:	2100      	movs	r1, #0
 80056aa:	4618      	mov	r0, r3
 80056ac:	f00e ff78 	bl	80145a0 <memset>

	config.type = BMI3_GYRO;
 80056b0:	2301      	movs	r3, #1
 80056b2:	723b      	strb	r3, [r7, #8]
	
	/* Get the previous or default configuration settings */
	rslt = bmi323_get_sensor_config(&config, 1, dev);
 80056b4:	f107 0308 	add.w	r3, r7, #8
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	2101      	movs	r1, #1
 80056bc:	4618      	mov	r0, r3
 80056be:	f7fe feb2 	bl	8004426 <bmi323_get_sensor_config>
 80056c2:	4603      	mov	r3, r0
 80056c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (rslt == BMI3_OK) 
 80056c8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d148      	bne.n	8005762 <Open_BMI323_GYRO+0xce>
	{
		config.cfg.gyr.odr = BMI3_GYR_ODR_400HZ;
 80056d0:	230a      	movs	r3, #10
 80056d2:	72bb      	strb	r3, [r7, #10]
		/* Gyroscope Angular Rate Measurement Range. By default the range is 2000dps. */
		config.cfg.gyr.range = BMI3_GYR_RANGE_2000DPS;
 80056d4:	2304      	movs	r3, #4
 80056d6:	737b      	strb	r3, [r7, #13]
		/*	The Gyroscope bandwidth coefficient defines the 3 dB cutoff frequency in relation to the ODR
		*	Value	Name	  Description
		*	  0   odr_half	 BW = gyr_odr/2
		*	  1  odr_quarter BW = gyr_odr/4
		*/
		config.cfg.gyr.bwp = BMI3_GYR_BW_ODR_QUARTER;
 80056d8:	2301      	movs	r3, #1
 80056da:	72fb      	strb	r3, [r7, #11]
		/* By default the gyro is disabled. Gyro is enabled by selecting the mode. */
		config.cfg.gyr.gyr_mode = BMI3_GYR_MODE_NORMAL;
 80056dc:	2304      	movs	r3, #4
 80056de:	733b      	strb	r3, [r7, #12]
		*  011     avg_8   Averaging of 8 samples
		*  100     avg_16  Averaging of 16 samples
		*  101     avg_32  Averaging of 32 samples
		*  110     avg_64  Averaging of 64 samples
		*/
		config.cfg.gyr.avg_num = BMI3_GYR_AVG64;
 80056e0:	2306      	movs	r3, #6
 80056e2:	73bb      	strb	r3, [r7, #14]
	
		/* Set the configurations */
		rslt = bmi323_set_sensor_config(&config, 1, dev);
 80056e4:	f107 0308 	add.w	r3, r7, #8
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	2101      	movs	r1, #1
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fe fe85 	bl	80043fc <bmi323_set_sensor_config>
 80056f2:	4603      	mov	r3, r0
 80056f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (rslt != BMI3_OK) 
 80056f8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <Open_BMI323_GYRO+0x74>
		{
			PDEBUG("Open GYRO failed\r\n");
 8005700:	481b      	ldr	r0, [pc, #108]	; (8005770 <Open_BMI323_GYRO+0xdc>)
 8005702:	f7ff fc97 	bl	8005034 <PDEBUG>
 8005706:	e02c      	b.n	8005762 <Open_BMI323_GYRO+0xce>
		} 
		else
		{
			PDEBUG("Open GYRO successfully\r\n");
 8005708:	481a      	ldr	r0, [pc, #104]	; (8005774 <Open_BMI323_GYRO+0xe0>)
 800570a:	f7ff fc93 	bl	8005034 <PDEBUG>

			/* Get the configuration settings for validation */
			rslt = bmi323_get_sensor_config(&config, 1, dev);
 800570e:	f107 0308 	add.w	r3, r7, #8
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	2101      	movs	r1, #1
 8005716:	4618      	mov	r0, r3
 8005718:	f7fe fe85 	bl	8004426 <bmi323_get_sensor_config>
 800571c:	4603      	mov	r3, r0
 800571e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (rslt == BMI3_OK) 
 8005722:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8005726:	2b00      	cmp	r3, #0
 8005728:	d11b      	bne.n	8005762 <Open_BMI323_GYRO+0xce>
			{
				PDEBUG("Get BMI323_GYRO Configuration successful\r\n");
 800572a:	4813      	ldr	r0, [pc, #76]	; (8005778 <Open_BMI323_GYRO+0xe4>)
 800572c:	f7ff fc82 	bl	8005034 <PDEBUG>
				PDEBUG("gyr_mode = %d\r\n", config.cfg.gyr.gyr_mode);
 8005730:	7b3b      	ldrb	r3, [r7, #12]
 8005732:	4619      	mov	r1, r3
 8005734:	4811      	ldr	r0, [pc, #68]	; (800577c <Open_BMI323_GYRO+0xe8>)
 8005736:	f7ff fc7d 	bl	8005034 <PDEBUG>
				PDEBUG("ODR = %d\r\n", config.cfg.gyr.odr);
 800573a:	7abb      	ldrb	r3, [r7, #10]
 800573c:	4619      	mov	r1, r3
 800573e:	4810      	ldr	r0, [pc, #64]	; (8005780 <Open_BMI323_GYRO+0xec>)
 8005740:	f7ff fc78 	bl	8005034 <PDEBUG>
				PDEBUG("Range = %d\r\n", config.cfg.gyr.range);
 8005744:	7b7b      	ldrb	r3, [r7, #13]
 8005746:	4619      	mov	r1, r3
 8005748:	480e      	ldr	r0, [pc, #56]	; (8005784 <Open_BMI323_GYRO+0xf0>)
 800574a:	f7ff fc73 	bl	8005034 <PDEBUG>
				PDEBUG("bw = %d\r\n", config.cfg.gyr.bwp);
 800574e:	7afb      	ldrb	r3, [r7, #11]
 8005750:	4619      	mov	r1, r3
 8005752:	480d      	ldr	r0, [pc, #52]	; (8005788 <Open_BMI323_GYRO+0xf4>)
 8005754:	f7ff fc6e 	bl	8005034 <PDEBUG>
				PDEBUG("avg_num = %d\r\n", config.cfg.gyr.avg_num);
 8005758:	7bbb      	ldrb	r3, [r7, #14]
 800575a:	4619      	mov	r1, r3
 800575c:	480b      	ldr	r0, [pc, #44]	; (800578c <Open_BMI323_GYRO+0xf8>)
 800575e:	f7ff fc69 	bl	8005034 <PDEBUG>
			}
		}
	}

	return rslt;
 8005762:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8005766:	4618      	mov	r0, r3
 8005768:	3738      	adds	r7, #56	; 0x38
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	08017f70 	.word	0x08017f70
 8005774:	08017f84 	.word	0x08017f84
 8005778:	08017fa0 	.word	0x08017fa0
 800577c:	08017fcc 	.word	0x08017fcc
 8005780:	08017fdc 	.word	0x08017fdc
 8005784:	08017f08 	.word	0x08017f08
 8005788:	08017fe8 	.word	0x08017fe8
 800578c:	08017f18 	.word	0x08017f18

08005790 <Init_BMI323>:
		PDEBUG("0x%02X, value=0x%02X\r\n", reg_addr, value);
	}
}

int8_t Init_BMI323(struct bmi3_dev *dev)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
	int8_t rslt = BMI3_OK;
 8005798:	2300      	movs	r3, #0
 800579a:	73fb      	strb	r3, [r7, #15]
	uint8_t chipid;

	rslt = bmi3_interface_init(dev, BMI3_SPI_INTF);
 800579c:	2100      	movs	r1, #0
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7ff fe58 	bl	8005454 <bmi3_interface_init>
 80057a4:	4603      	mov	r3, r0
 80057a6:	73fb      	strb	r3, [r7, #15]
	bmi3_error_codes_print_result("bmi3_interface_init",rslt);
 80057a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057ac:	4619      	mov	r1, r3
 80057ae:	4824      	ldr	r0, [pc, #144]	; (8005840 <Init_BMI323+0xb0>)
 80057b0:	f7ff fd58 	bl	8005264 <bmi3_error_codes_print_result>
	osDelay(100);
 80057b4:	2064      	movs	r0, #100	; 0x64
 80057b6:	f009 fe0e 	bl	800f3d6 <osDelay>

	/* Initialize bmi323. */
	rslt = bmi323_init(dev);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7fe fdee 	bl	800439c <bmi323_init>
 80057c0:	4603      	mov	r3, r0
 80057c2:	73fb      	strb	r3, [r7, #15]
	bmi3_error_codes_print_result("bmi323_init",rslt);
 80057c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057c8:	4619      	mov	r1, r3
 80057ca:	481e      	ldr	r0, [pc, #120]	; (8005844 <Init_BMI323+0xb4>)
 80057cc:	f7ff fd4a 	bl	8005264 <bmi3_error_codes_print_result>

	if (rslt != BMI3_OK)
 80057d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d008      	beq.n	80057ea <Init_BMI323+0x5a>
	{
		PDEBUG("bmi323_init() failed, error code: %d\r\n", rslt);
 80057d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057dc:	4619      	mov	r1, r3
 80057de:	481a      	ldr	r0, [pc, #104]	; (8005848 <Init_BMI323+0xb8>)
 80057e0:	f7ff fc28 	bl	8005034 <PDEBUG>
		return rslt;
 80057e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057e8:	e025      	b.n	8005836 <Init_BMI323+0xa6>
	}
	else
	{
		PDEBUG("BMI323 initialized successfully\r\n");
 80057ea:	4818      	ldr	r0, [pc, #96]	; (800584c <Init_BMI323+0xbc>)
 80057ec:	f7ff fc22 	bl	8005034 <PDEBUG>
	}

	rslt = bmi3_get_regs(BMI3_REG_CHIP_ID, &chipid, 1, dev);
 80057f0:	f107 010e 	add.w	r1, r7, #14
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	2000      	movs	r0, #0
 80057fa:	f7fb fe42 	bl	8001482 <bmi3_get_regs>
 80057fe:	4603      	mov	r3, r0
 8005800:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMI3_OK) 
 8005802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d008      	beq.n	800581c <Init_BMI323+0x8c>
	{
		PDEBUG("read chip ID failed, error code: %d\r\n", rslt);
 800580a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800580e:	4619      	mov	r1, r3
 8005810:	480f      	ldr	r0, [pc, #60]	; (8005850 <Init_BMI323+0xc0>)
 8005812:	f7ff fc0f 	bl	8005034 <PDEBUG>
		return rslt;
 8005816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800581a:	e00c      	b.n	8005836 <Init_BMI323+0xa6>
	}

	PDEBUG("Chip ID:0x%02x\r\n", chipid);
 800581c:	7bbb      	ldrb	r3, [r7, #14]
 800581e:	4619      	mov	r1, r3
 8005820:	480c      	ldr	r0, [pc, #48]	; (8005854 <Init_BMI323+0xc4>)
 8005822:	f7ff fc07 	bl	8005034 <PDEBUG>
	Open_BMI323_ACC(dev);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7ff feb4 	bl	8005594 <Open_BMI323_ACC>
	Open_BMI323_GYRO(dev);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f7ff ff31 	bl	8005694 <Open_BMI323_GYRO>

	return rslt;
 8005832:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	08018040 	.word	0x08018040
 8005844:	08018054 	.word	0x08018054
 8005848:	08018060 	.word	0x08018060
 800584c:	08018088 	.word	0x08018088
 8005850:	080180ac 	.word	0x080180ac
 8005854:	080180d4 	.word	0x080180d4

08005858 <read_sensor>:

int16_t gyro_data[3];
int16_t acc_data[3];

uint8_t read_sensor(struct bmi3_dev dev)
{
 8005858:	b084      	sub	sp, #16
 800585a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800585e:	b090      	sub	sp, #64	; 0x40
 8005860:	af04      	add	r7, sp, #16
 8005862:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8005866:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t gyr_regs[6];
	uint8_t rslt;

	float gyr_x, gyr_y, gyr_z, acc_x, acc_y, acc_z;
//	uint16_t temper;
	rslt = bmi3_get_regs(BMI3_REG_GYR_DATA_X, &gyr_regs, 6, &dev);
 800586a:	1d39      	adds	r1, r7, #4
 800586c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005870:	2206      	movs	r2, #6
 8005872:	2006      	movs	r0, #6
 8005874:	f7fb fe05 	bl	8001482 <bmi3_get_regs>
 8005878:	4603      	mov	r3, r0
 800587a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (rslt != BMI3_OK)
 800587e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005882:	2b00      	cmp	r3, #0
 8005884:	d008      	beq.n	8005898 <read_sensor+0x40>
	{
		PDEBUG("read gyro register failed, error code: %d\r\n", rslt);
 8005886:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800588a:	4619      	mov	r1, r3
 800588c:	486c      	ldr	r0, [pc, #432]	; (8005a40 <read_sensor+0x1e8>)
 800588e:	f7ff fbd1 	bl	8005034 <PDEBUG>
		return rslt;
 8005892:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005896:	e0cc      	b.n	8005a32 <read_sensor+0x1da>
	}
	gyro_data[0] = (gyr_regs[0] | (uint16_t)gyr_regs[1] << 8);
 8005898:	793b      	ldrb	r3, [r7, #4]
 800589a:	b21a      	sxth	r2, r3
 800589c:	797b      	ldrb	r3, [r7, #5]
 800589e:	021b      	lsls	r3, r3, #8
 80058a0:	b21b      	sxth	r3, r3
 80058a2:	4313      	orrs	r3, r2
 80058a4:	b21a      	sxth	r2, r3
 80058a6:	4b67      	ldr	r3, [pc, #412]	; (8005a44 <read_sensor+0x1ec>)
 80058a8:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = (gyr_regs[2] | (uint16_t)gyr_regs[3] << 8);
 80058aa:	79bb      	ldrb	r3, [r7, #6]
 80058ac:	b21a      	sxth	r2, r3
 80058ae:	79fb      	ldrb	r3, [r7, #7]
 80058b0:	021b      	lsls	r3, r3, #8
 80058b2:	b21b      	sxth	r3, r3
 80058b4:	4313      	orrs	r3, r2
 80058b6:	b21a      	sxth	r2, r3
 80058b8:	4b62      	ldr	r3, [pc, #392]	; (8005a44 <read_sensor+0x1ec>)
 80058ba:	805a      	strh	r2, [r3, #2]
	gyro_data[2] = (gyr_regs[4] | (uint16_t)gyr_regs[5] << 8);
 80058bc:	7a3b      	ldrb	r3, [r7, #8]
 80058be:	b21a      	sxth	r2, r3
 80058c0:	7a7b      	ldrb	r3, [r7, #9]
 80058c2:	021b      	lsls	r3, r3, #8
 80058c4:	b21b      	sxth	r3, r3
 80058c6:	4313      	orrs	r3, r2
 80058c8:	b21a      	sxth	r2, r3
 80058ca:	4b5e      	ldr	r3, [pc, #376]	; (8005a44 <read_sensor+0x1ec>)
 80058cc:	809a      	strh	r2, [r3, #4]

//	rslt = bmi3_get_regs(BMI3_REG_TEMP_DATA, &temp, 2, &dev);
//	temper = (temp[0] | (uint16_t)temp[1] << 8);

	rslt = bmi3_get_regs(BMI3_REG_ACC_DATA_X, &acc_regs, 6, &dev);
 80058ce:	f107 010c 	add.w	r1, r7, #12
 80058d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80058d6:	2206      	movs	r2, #6
 80058d8:	2003      	movs	r0, #3
 80058da:	f7fb fdd2 	bl	8001482 <bmi3_get_regs>
 80058de:	4603      	mov	r3, r0
 80058e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (rslt != BMI3_OK)
 80058e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d008      	beq.n	80058fe <read_sensor+0xa6>
	{
		PDEBUG("read acc register failed, error code: %d\r\n", rslt);
 80058ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058f0:	4619      	mov	r1, r3
 80058f2:	4855      	ldr	r0, [pc, #340]	; (8005a48 <read_sensor+0x1f0>)
 80058f4:	f7ff fb9e 	bl	8005034 <PDEBUG>
		return rslt;
 80058f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058fc:	e099      	b.n	8005a32 <read_sensor+0x1da>
	}
	acc_data[0] = (acc_regs[0] | (uint16_t)acc_regs[1] << 8);
 80058fe:	7b3b      	ldrb	r3, [r7, #12]
 8005900:	b21a      	sxth	r2, r3
 8005902:	7b7b      	ldrb	r3, [r7, #13]
 8005904:	021b      	lsls	r3, r3, #8
 8005906:	b21b      	sxth	r3, r3
 8005908:	4313      	orrs	r3, r2
 800590a:	b21a      	sxth	r2, r3
 800590c:	4b4f      	ldr	r3, [pc, #316]	; (8005a4c <read_sensor+0x1f4>)
 800590e:	801a      	strh	r2, [r3, #0]
	acc_data[1] = (acc_regs[2] | (uint16_t)acc_regs[3] << 8);
 8005910:	7bbb      	ldrb	r3, [r7, #14]
 8005912:	b21a      	sxth	r2, r3
 8005914:	7bfb      	ldrb	r3, [r7, #15]
 8005916:	021b      	lsls	r3, r3, #8
 8005918:	b21b      	sxth	r3, r3
 800591a:	4313      	orrs	r3, r2
 800591c:	b21a      	sxth	r2, r3
 800591e:	4b4b      	ldr	r3, [pc, #300]	; (8005a4c <read_sensor+0x1f4>)
 8005920:	805a      	strh	r2, [r3, #2]
	acc_data[2] = (acc_regs[4] | (uint16_t)acc_regs[5] << 8);
 8005922:	7c3b      	ldrb	r3, [r7, #16]
 8005924:	b21a      	sxth	r2, r3
 8005926:	7c7b      	ldrb	r3, [r7, #17]
 8005928:	021b      	lsls	r3, r3, #8
 800592a:	b21b      	sxth	r3, r3
 800592c:	4313      	orrs	r3, r2
 800592e:	b21a      	sxth	r2, r3
 8005930:	4b46      	ldr	r3, [pc, #280]	; (8005a4c <read_sensor+0x1f4>)
 8005932:	809a      	strh	r2, [r3, #4]

	gyr_x = lsb_to_dps(gyro_data[0], (float)2000, dev.resolution);
 8005934:	4b43      	ldr	r3, [pc, #268]	; (8005a44 <read_sensor+0x1ec>)
 8005936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800593a:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800593e:	4611      	mov	r1, r2
 8005940:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8005a50 <read_sensor+0x1f8>
 8005944:	4618      	mov	r0, r3
 8005946:	f7ff fde5 	bl	8005514 <lsb_to_dps>
 800594a:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	gyr_y = lsb_to_dps(gyro_data[1], (float)2000, dev.resolution);
 800594e:	4b3d      	ldr	r3, [pc, #244]	; (8005a44 <read_sensor+0x1ec>)
 8005950:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005954:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8005958:	4611      	mov	r1, r2
 800595a:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8005a50 <read_sensor+0x1f8>
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff fdd8 	bl	8005514 <lsb_to_dps>
 8005964:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	gyr_z = lsb_to_dps(gyro_data[2], (float)2000, dev.resolution);
 8005968:	4b36      	ldr	r3, [pc, #216]	; (8005a44 <read_sensor+0x1ec>)
 800596a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800596e:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8005972:	4611      	mov	r1, r2
 8005974:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8005a50 <read_sensor+0x1f8>
 8005978:	4618      	mov	r0, r3
 800597a:	f7ff fdcb 	bl	8005514 <lsb_to_dps>
 800597e:	ed87 0a08 	vstr	s0, [r7, #32]

	acc_x = lsb_to_mps2(acc_data[0], 2, dev.resolution);
 8005982:	4b32      	ldr	r3, [pc, #200]	; (8005a4c <read_sensor+0x1f4>)
 8005984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005988:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800598c:	4611      	mov	r1, r2
 800598e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8005992:	4618      	mov	r0, r3
 8005994:	f7ff fd88 	bl	80054a8 <lsb_to_mps2>
 8005998:	ed87 0a07 	vstr	s0, [r7, #28]
	acc_y = lsb_to_mps2(acc_data[1], 2, dev.resolution);
 800599c:	4b2b      	ldr	r3, [pc, #172]	; (8005a4c <read_sensor+0x1f4>)
 800599e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80059a2:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80059a6:	4611      	mov	r1, r2
 80059a8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff fd7b 	bl	80054a8 <lsb_to_mps2>
 80059b2:	ed87 0a06 	vstr	s0, [r7, #24]
	acc_z = lsb_to_mps2(acc_data[2], 2, dev.resolution);
 80059b6:	4b25      	ldr	r3, [pc, #148]	; (8005a4c <read_sensor+0x1f4>)
 80059b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80059bc:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80059c0:	4611      	mov	r1, r2
 80059c2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7ff fd6e 	bl	80054a8 <lsb_to_mps2>
 80059cc:	ed87 0a05 	vstr	s0, [r7, #20]

//	PDEBUG("Sensor Idx=%d Data=%X\r\n",index, tmp_regs[0]);
//	PDEBUG("GYRO: X axis: %4d, Y axis: %4d, Z axis: %4d\r\n", gyro_data[0], gyro_data[1], gyro_data[2]);
//	PDEBUG("ACC: X axis: %4d, Y axis: %4d, Z axis: %4d\r\n", acc_data[0], acc_data[1], acc_data[2]);
	PDEBUG("GYRO: X axis: %4.2f, Y axis: %4.2f, Z axis: %4.2f\r\n", gyr_x, gyr_y, gyr_z);
 80059d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059d2:	f7fa fd91 	bl	80004f8 <__aeabi_f2d>
 80059d6:	4680      	mov	r8, r0
 80059d8:	4689      	mov	r9, r1
 80059da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059dc:	f7fa fd8c 	bl	80004f8 <__aeabi_f2d>
 80059e0:	4604      	mov	r4, r0
 80059e2:	460d      	mov	r5, r1
 80059e4:	6a38      	ldr	r0, [r7, #32]
 80059e6:	f7fa fd87 	bl	80004f8 <__aeabi_f2d>
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80059f2:	e9cd 4500 	strd	r4, r5, [sp]
 80059f6:	4642      	mov	r2, r8
 80059f8:	464b      	mov	r3, r9
 80059fa:	4816      	ldr	r0, [pc, #88]	; (8005a54 <read_sensor+0x1fc>)
 80059fc:	f7ff fb1a 	bl	8005034 <PDEBUG>
	PDEBUG("ACC: X axis: %4.2f, Y axis: %4.2f, Z axis: %4.2f\r\n", acc_x, acc_y, acc_z);
 8005a00:	69f8      	ldr	r0, [r7, #28]
 8005a02:	f7fa fd79 	bl	80004f8 <__aeabi_f2d>
 8005a06:	4680      	mov	r8, r0
 8005a08:	4689      	mov	r9, r1
 8005a0a:	69b8      	ldr	r0, [r7, #24]
 8005a0c:	f7fa fd74 	bl	80004f8 <__aeabi_f2d>
 8005a10:	4604      	mov	r4, r0
 8005a12:	460d      	mov	r5, r1
 8005a14:	6978      	ldr	r0, [r7, #20]
 8005a16:	f7fa fd6f 	bl	80004f8 <__aeabi_f2d>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a22:	e9cd 4500 	strd	r4, r5, [sp]
 8005a26:	4642      	mov	r2, r8
 8005a28:	464b      	mov	r3, r9
 8005a2a:	480b      	ldr	r0, [pc, #44]	; (8005a58 <read_sensor+0x200>)
 8005a2c:	f7ff fb02 	bl	8005034 <PDEBUG>
//	PDEBUG("Temperature = %d\r\n", (temper / 512 + 23));

	return 0;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3730      	adds	r7, #48	; 0x30
 8005a36:	46bd      	mov	sp, r7
 8005a38:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8005a3c:	b004      	add	sp, #16
 8005a3e:	4770      	bx	lr
 8005a40:	080180e8 	.word	0x080180e8
 8005a44:	20001014 	.word	0x20001014
 8005a48:	08018114 	.word	0x08018114
 8005a4c:	2000101c 	.word	0x2000101c
 8005a50:	44fa0000 	.word	0x44fa0000
 8005a54:	08018140 	.word	0x08018140
 8005a58:	08018174 	.word	0x08018174

08005a5c <StartBMI323Task>:



void StartBMI323Task(void const * argument)
{
 8005a5c:	b5b0      	push	{r4, r5, r7, lr}
 8005a5e:	b088      	sub	sp, #32
 8005a60:	af04      	add	r7, sp, #16
 8005a62:	6078      	str	r0, [r7, #4]
//	uint32_t notify_value;
	int8_t rslt = BMI3_OK;
 8005a64:	2300      	movs	r3, #0
 8005a66:	73fb      	strb	r3, [r7, #15]
	uint8_t flag;

	dev.read = (bmi3_read_fptr_t)SensorAPI_SPIx_Read1;
 8005a68:	4b28      	ldr	r3, [pc, #160]	; (8005b0c <StartBMI323Task+0xb0>)
 8005a6a:	4a29      	ldr	r2, [pc, #164]	; (8005b10 <StartBMI323Task+0xb4>)
 8005a6c:	611a      	str	r2, [r3, #16]
	dev.write = (bmi3_write_fptr_t)SensorAPI_SPIx_Write1;
 8005a6e:	4b27      	ldr	r3, [pc, #156]	; (8005b0c <StartBMI323Task+0xb0>)
 8005a70:	4a28      	ldr	r2, [pc, #160]	; (8005b14 <StartBMI323Task+0xb8>)
 8005a72:	615a      	str	r2, [r3, #20]
	Init_BMI323(&dev);
 8005a74:	4825      	ldr	r0, [pc, #148]	; (8005b0c <StartBMI323Task+0xb0>)
 8005a76:	f7ff fe8b 	bl	8005790 <Init_BMI323>
	osDelay(100);
 8005a7a:	2064      	movs	r0, #100	; 0x64
 8005a7c:	f009 fcab 	bl	800f3d6 <osDelay>
	dev2.read = (bmi3_read_fptr_t)SensorAPI_SPIx_Read2;
 8005a80:	4b25      	ldr	r3, [pc, #148]	; (8005b18 <StartBMI323Task+0xbc>)
 8005a82:	4a26      	ldr	r2, [pc, #152]	; (8005b1c <StartBMI323Task+0xc0>)
 8005a84:	611a      	str	r2, [r3, #16]
	dev2.write = (bmi3_write_fptr_t)SensorAPI_SPIx_Write2;
 8005a86:	4b24      	ldr	r3, [pc, #144]	; (8005b18 <StartBMI323Task+0xbc>)
 8005a88:	4a25      	ldr	r2, [pc, #148]	; (8005b20 <StartBMI323Task+0xc4>)
 8005a8a:	615a      	str	r2, [r3, #20]
	Init_BMI323(&dev2);
 8005a8c:	4822      	ldr	r0, [pc, #136]	; (8005b18 <StartBMI323Task+0xbc>)
 8005a8e:	f7ff fe7f 	bl	8005790 <Init_BMI323>

	for(;;)
	{
//		if(xTaskNotifyWait(0, 0, &notify_value, portMAX_DELAY))
//		{
			bmi3_get_regs(BMI3_REG_STATUS, &flag, 1, &dev);
 8005a92:	f107 010e 	add.w	r1, r7, #14
 8005a96:	4b1d      	ldr	r3, [pc, #116]	; (8005b0c <StartBMI323Task+0xb0>)
 8005a98:	2201      	movs	r2, #1
 8005a9a:	2002      	movs	r0, #2
 8005a9c:	f7fb fcf1 	bl	8001482 <bmi3_get_regs>
			if((flag & 0x40) == 0) continue;
 8005aa0:	7bbb      	ldrb	r3, [r7, #14]
 8005aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d02c      	beq.n	8005b04 <StartBMI323Task+0xa8>
			PDEBUG("1:\n");
 8005aaa:	481e      	ldr	r0, [pc, #120]	; (8005b24 <StartBMI323Task+0xc8>)
 8005aac:	f7ff fac2 	bl	8005034 <PDEBUG>
			read_sensor(dev);
 8005ab0:	4c16      	ldr	r4, [pc, #88]	; (8005b0c <StartBMI323Task+0xb0>)
 8005ab2:	466d      	mov	r5, sp
 8005ab4:	f104 0310 	add.w	r3, r4, #16
 8005ab8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005aba:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005abe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005ac2:	f7ff fec9 	bl	8005858 <read_sensor>
			bmi3_get_regs(BMI3_REG_STATUS, &flag, 1, &dev2);
 8005ac6:	f107 010e 	add.w	r1, r7, #14
 8005aca:	4b13      	ldr	r3, [pc, #76]	; (8005b18 <StartBMI323Task+0xbc>)
 8005acc:	2201      	movs	r2, #1
 8005ace:	2002      	movs	r0, #2
 8005ad0:	f7fb fcd7 	bl	8001482 <bmi3_get_regs>
			if((flag & 0x40) == 0) continue;
 8005ad4:	7bbb      	ldrb	r3, [r7, #14]
 8005ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d014      	beq.n	8005b08 <StartBMI323Task+0xac>
			PDEBUG("2:\n");
 8005ade:	4812      	ldr	r0, [pc, #72]	; (8005b28 <StartBMI323Task+0xcc>)
 8005ae0:	f7ff faa8 	bl	8005034 <PDEBUG>
			read_sensor(dev2);
 8005ae4:	4c0c      	ldr	r4, [pc, #48]	; (8005b18 <StartBMI323Task+0xbc>)
 8005ae6:	466d      	mov	r5, sp
 8005ae8:	f104 0310 	add.w	r3, r4, #16
 8005aec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005aee:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005af2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005af6:	f7ff feaf 	bl	8005858 <read_sensor>
			osDelay(500);
 8005afa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005afe:	f009 fc6a 	bl	800f3d6 <osDelay>
 8005b02:	e7c6      	b.n	8005a92 <StartBMI323Task+0x36>
			if((flag & 0x40) == 0) continue;
 8005b04:	bf00      	nop
 8005b06:	e7c4      	b.n	8005a92 <StartBMI323Task+0x36>
			if((flag & 0x40) == 0) continue;
 8005b08:	bf00      	nop
			bmi3_get_regs(BMI3_REG_STATUS, &flag, 1, &dev);
 8005b0a:	e7c2      	b.n	8005a92 <StartBMI323Task+0x36>
 8005b0c:	200003d0 	.word	0x200003d0
 8005b10:	08005075 	.word	0x08005075
 8005b14:	08005175 	.word	0x08005175
 8005b18:	200003f0 	.word	0x200003f0
 8005b1c:	080050f5 	.word	0x080050f5
 8005b20:	080051ed 	.word	0x080051ed
 8005b24:	080181a8 	.word	0x080181a8
 8005b28:	080181ac 	.word	0x080181ac

08005b2c <LL_EXTI_EnableIT_0_31>:
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005b34:	4b06      	ldr	r3, [pc, #24]	; (8005b50 <LL_EXTI_EnableIT_0_31+0x24>)
 8005b36:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005b3a:	4905      	ldr	r1, [pc, #20]	; (8005b50 <LL_EXTI_EnableIT_0_31+0x24>)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	58000800 	.word	0x58000800

08005b54 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005b5c:	4b05      	ldr	r3, [pc, #20]	; (8005b74 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	4904      	ldr	r1, [pc, #16]	; (8005b74 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	600b      	str	r3, [r1, #0]

}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr
 8005b74:	58000800 	.word	0x58000800

08005b78 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8005b7e:	4b0d      	ldr	r3, [pc, #52]	; (8005bb4 <ReadRtcSsrValue+0x3c>)
 8005b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8005b86:	4b0b      	ldr	r3, [pc, #44]	; (8005bb4 <ReadRtcSsrValue+0x3c>)
 8005b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8005b8e:	e005      	b.n	8005b9c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8005b94:	4b07      	ldr	r3, [pc, #28]	; (8005bb4 <ReadRtcSsrValue+0x3c>)
 8005b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d1f5      	bne.n	8005b90 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8005ba4:	683b      	ldr	r3, [r7, #0]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	40002800 	.word	0x40002800

08005bb8 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	460a      	mov	r2, r1
 8005bc2:	71fb      	strb	r3, [r7, #7]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8005bc8:	79ba      	ldrb	r2, [r7, #6]
 8005bca:	491d      	ldr	r1, [pc, #116]	; (8005c40 <LinkTimerAfter+0x88>)
 8005bcc:	4613      	mov	r3, r2
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	4413      	add	r3, r2
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	440b      	add	r3, r1
 8005bd6:	3315      	adds	r3, #21
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
 8005bde:	2b06      	cmp	r3, #6
 8005be0:	d009      	beq.n	8005bf6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8005be2:	7bfa      	ldrb	r2, [r7, #15]
 8005be4:	4916      	ldr	r1, [pc, #88]	; (8005c40 <LinkTimerAfter+0x88>)
 8005be6:	4613      	mov	r3, r2
 8005be8:	005b      	lsls	r3, r3, #1
 8005bea:	4413      	add	r3, r2
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	440b      	add	r3, r1
 8005bf0:	3314      	adds	r3, #20
 8005bf2:	79fa      	ldrb	r2, [r7, #7]
 8005bf4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8005bf6:	79fa      	ldrb	r2, [r7, #7]
 8005bf8:	4911      	ldr	r1, [pc, #68]	; (8005c40 <LinkTimerAfter+0x88>)
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	4413      	add	r3, r2
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	440b      	add	r3, r1
 8005c04:	3315      	adds	r3, #21
 8005c06:	7bfa      	ldrb	r2, [r7, #15]
 8005c08:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8005c0a:	79fa      	ldrb	r2, [r7, #7]
 8005c0c:	490c      	ldr	r1, [pc, #48]	; (8005c40 <LinkTimerAfter+0x88>)
 8005c0e:	4613      	mov	r3, r2
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	4413      	add	r3, r2
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	440b      	add	r3, r1
 8005c18:	3314      	adds	r3, #20
 8005c1a:	79ba      	ldrb	r2, [r7, #6]
 8005c1c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8005c1e:	79ba      	ldrb	r2, [r7, #6]
 8005c20:	4907      	ldr	r1, [pc, #28]	; (8005c40 <LinkTimerAfter+0x88>)
 8005c22:	4613      	mov	r3, r2
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	4413      	add	r3, r2
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	440b      	add	r3, r1
 8005c2c:	3315      	adds	r3, #21
 8005c2e:	79fa      	ldrb	r2, [r7, #7]
 8005c30:	701a      	strb	r2, [r3, #0]

  return;
 8005c32:	bf00      	nop
}
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	20001024 	.word	0x20001024

08005c44 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	460a      	mov	r2, r1
 8005c4e:	71fb      	strb	r3, [r7, #7]
 8005c50:	4613      	mov	r3, r2
 8005c52:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8005c54:	4b29      	ldr	r3, [pc, #164]	; (8005cfc <LinkTimerBefore+0xb8>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	79ba      	ldrb	r2, [r7, #6]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d032      	beq.n	8005cc6 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8005c60:	79ba      	ldrb	r2, [r7, #6]
 8005c62:	4927      	ldr	r1, [pc, #156]	; (8005d00 <LinkTimerBefore+0xbc>)
 8005c64:	4613      	mov	r3, r2
 8005c66:	005b      	lsls	r3, r3, #1
 8005c68:	4413      	add	r3, r2
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	440b      	add	r3, r1
 8005c6e:	3314      	adds	r3, #20
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8005c74:	7bfa      	ldrb	r2, [r7, #15]
 8005c76:	4922      	ldr	r1, [pc, #136]	; (8005d00 <LinkTimerBefore+0xbc>)
 8005c78:	4613      	mov	r3, r2
 8005c7a:	005b      	lsls	r3, r3, #1
 8005c7c:	4413      	add	r3, r2
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	440b      	add	r3, r1
 8005c82:	3315      	adds	r3, #21
 8005c84:	79fa      	ldrb	r2, [r7, #7]
 8005c86:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8005c88:	79fa      	ldrb	r2, [r7, #7]
 8005c8a:	491d      	ldr	r1, [pc, #116]	; (8005d00 <LinkTimerBefore+0xbc>)
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	4413      	add	r3, r2
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	440b      	add	r3, r1
 8005c96:	3315      	adds	r3, #21
 8005c98:	79ba      	ldrb	r2, [r7, #6]
 8005c9a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8005c9c:	79fa      	ldrb	r2, [r7, #7]
 8005c9e:	4918      	ldr	r1, [pc, #96]	; (8005d00 <LinkTimerBefore+0xbc>)
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	4413      	add	r3, r2
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	440b      	add	r3, r1
 8005caa:	3314      	adds	r3, #20
 8005cac:	7bfa      	ldrb	r2, [r7, #15]
 8005cae:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8005cb0:	79ba      	ldrb	r2, [r7, #6]
 8005cb2:	4913      	ldr	r1, [pc, #76]	; (8005d00 <LinkTimerBefore+0xbc>)
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	4413      	add	r3, r2
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	440b      	add	r3, r1
 8005cbe:	3314      	adds	r3, #20
 8005cc0:	79fa      	ldrb	r2, [r7, #7]
 8005cc2:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8005cc4:	e014      	b.n	8005cf0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8005cc6:	79fa      	ldrb	r2, [r7, #7]
 8005cc8:	490d      	ldr	r1, [pc, #52]	; (8005d00 <LinkTimerBefore+0xbc>)
 8005cca:	4613      	mov	r3, r2
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	4413      	add	r3, r2
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	440b      	add	r3, r1
 8005cd4:	3315      	adds	r3, #21
 8005cd6:	79ba      	ldrb	r2, [r7, #6]
 8005cd8:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8005cda:	79ba      	ldrb	r2, [r7, #6]
 8005cdc:	4908      	ldr	r1, [pc, #32]	; (8005d00 <LinkTimerBefore+0xbc>)
 8005cde:	4613      	mov	r3, r2
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	4413      	add	r3, r2
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	440b      	add	r3, r1
 8005ce8:	3314      	adds	r3, #20
 8005cea:	79fa      	ldrb	r2, [r7, #7]
 8005cec:	701a      	strb	r2, [r3, #0]
  return;
 8005cee:	bf00      	nop
}
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	200010b4 	.word	0x200010b4
 8005d00:	20001024 	.word	0x20001024

08005d04 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8005d0e:	4b4e      	ldr	r3, [pc, #312]	; (8005e48 <linkTimer+0x144>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b06      	cmp	r3, #6
 8005d16:	d118      	bne.n	8005d4a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8005d18:	4b4b      	ldr	r3, [pc, #300]	; (8005e48 <linkTimer+0x144>)
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	4b4b      	ldr	r3, [pc, #300]	; (8005e4c <linkTimer+0x148>)
 8005d20:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8005d22:	4a49      	ldr	r2, [pc, #292]	; (8005e48 <linkTimer+0x144>)
 8005d24:	79fb      	ldrb	r3, [r7, #7]
 8005d26:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8005d28:	79fa      	ldrb	r2, [r7, #7]
 8005d2a:	4949      	ldr	r1, [pc, #292]	; (8005e50 <linkTimer+0x14c>)
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	4413      	add	r3, r2
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	440b      	add	r3, r1
 8005d36:	3315      	adds	r3, #21
 8005d38:	2206      	movs	r2, #6
 8005d3a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8005d3c:	4b45      	ldr	r3, [pc, #276]	; (8005e54 <linkTimer+0x150>)
 8005d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d42:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8005d44:	2300      	movs	r3, #0
 8005d46:	81fb      	strh	r3, [r7, #14]
 8005d48:	e078      	b.n	8005e3c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8005d4a:	f000 f909 	bl	8005f60 <ReturnTimeElapsed>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8005d52:	79fa      	ldrb	r2, [r7, #7]
 8005d54:	493e      	ldr	r1, [pc, #248]	; (8005e50 <linkTimer+0x14c>)
 8005d56:	4613      	mov	r3, r2
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	4413      	add	r3, r2
 8005d5c:	00db      	lsls	r3, r3, #3
 8005d5e:	440b      	add	r3, r1
 8005d60:	3308      	adds	r3, #8
 8005d62:	6819      	ldr	r1, [r3, #0]
 8005d64:	89fb      	ldrh	r3, [r7, #14]
 8005d66:	79fa      	ldrb	r2, [r7, #7]
 8005d68:	4419      	add	r1, r3
 8005d6a:	4839      	ldr	r0, [pc, #228]	; (8005e50 <linkTimer+0x14c>)
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	005b      	lsls	r3, r3, #1
 8005d70:	4413      	add	r3, r2
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	4403      	add	r3, r0
 8005d76:	3308      	adds	r3, #8
 8005d78:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8005d7a:	79fa      	ldrb	r2, [r7, #7]
 8005d7c:	4934      	ldr	r1, [pc, #208]	; (8005e50 <linkTimer+0x14c>)
 8005d7e:	4613      	mov	r3, r2
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	4413      	add	r3, r2
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	440b      	add	r3, r1
 8005d88:	3308      	adds	r3, #8
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8005d8e:	4b2e      	ldr	r3, [pc, #184]	; (8005e48 <linkTimer+0x144>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	4619      	mov	r1, r3
 8005d96:	4a2e      	ldr	r2, [pc, #184]	; (8005e50 <linkTimer+0x14c>)
 8005d98:	460b      	mov	r3, r1
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	440b      	add	r3, r1
 8005d9e:	00db      	lsls	r3, r3, #3
 8005da0:	4413      	add	r3, r2
 8005da2:	3308      	adds	r3, #8
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d337      	bcc.n	8005e1c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8005dac:	4b26      	ldr	r3, [pc, #152]	; (8005e48 <linkTimer+0x144>)
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8005db2:	7b7a      	ldrb	r2, [r7, #13]
 8005db4:	4926      	ldr	r1, [pc, #152]	; (8005e50 <linkTimer+0x14c>)
 8005db6:	4613      	mov	r3, r2
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	4413      	add	r3, r2
 8005dbc:	00db      	lsls	r3, r3, #3
 8005dbe:	440b      	add	r3, r1
 8005dc0:	3315      	adds	r3, #21
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8005dc6:	e013      	b.n	8005df0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8005dc8:	7b7a      	ldrb	r2, [r7, #13]
 8005dca:	4921      	ldr	r1, [pc, #132]	; (8005e50 <linkTimer+0x14c>)
 8005dcc:	4613      	mov	r3, r2
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	4413      	add	r3, r2
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	440b      	add	r3, r1
 8005dd6:	3315      	adds	r3, #21
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8005ddc:	7b7a      	ldrb	r2, [r7, #13]
 8005dde:	491c      	ldr	r1, [pc, #112]	; (8005e50 <linkTimer+0x14c>)
 8005de0:	4613      	mov	r3, r2
 8005de2:	005b      	lsls	r3, r3, #1
 8005de4:	4413      	add	r3, r2
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	440b      	add	r3, r1
 8005dea:	3315      	adds	r3, #21
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8005df0:	7b3b      	ldrb	r3, [r7, #12]
 8005df2:	2b06      	cmp	r3, #6
 8005df4:	d00b      	beq.n	8005e0e <linkTimer+0x10a>
 8005df6:	7b3a      	ldrb	r2, [r7, #12]
 8005df8:	4915      	ldr	r1, [pc, #84]	; (8005e50 <linkTimer+0x14c>)
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	4413      	add	r3, r2
 8005e00:	00db      	lsls	r3, r3, #3
 8005e02:	440b      	add	r3, r1
 8005e04:	3308      	adds	r3, #8
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d2dc      	bcs.n	8005dc8 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8005e0e:	7b7a      	ldrb	r2, [r7, #13]
 8005e10:	79fb      	ldrb	r3, [r7, #7]
 8005e12:	4611      	mov	r1, r2
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7ff fecf 	bl	8005bb8 <LinkTimerAfter>
 8005e1a:	e00f      	b.n	8005e3c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8005e1c:	4b0a      	ldr	r3, [pc, #40]	; (8005e48 <linkTimer+0x144>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	79fb      	ldrb	r3, [r7, #7]
 8005e24:	4611      	mov	r1, r2
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7ff ff0c 	bl	8005c44 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8005e2c:	4b06      	ldr	r3, [pc, #24]	; (8005e48 <linkTimer+0x144>)
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	4b06      	ldr	r3, [pc, #24]	; (8005e4c <linkTimer+0x148>)
 8005e34:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8005e36:	4a04      	ldr	r2, [pc, #16]	; (8005e48 <linkTimer+0x144>)
 8005e38:	79fb      	ldrb	r3, [r7, #7]
 8005e3a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8005e3c:	89fb      	ldrh	r3, [r7, #14]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	200010b4 	.word	0x200010b4
 8005e4c:	200010b5 	.word	0x200010b5
 8005e50:	20001024 	.word	0x20001024
 8005e54:	200010b8 	.word	0x200010b8

08005e58 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	4603      	mov	r3, r0
 8005e60:	460a      	mov	r2, r1
 8005e62:	71fb      	strb	r3, [r7, #7]
 8005e64:	4613      	mov	r3, r2
 8005e66:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8005e68:	4b39      	ldr	r3, [pc, #228]	; (8005f50 <UnlinkTimer+0xf8>)
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	79fa      	ldrb	r2, [r7, #7]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d111      	bne.n	8005e98 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8005e74:	4b36      	ldr	r3, [pc, #216]	; (8005f50 <UnlinkTimer+0xf8>)
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	4b36      	ldr	r3, [pc, #216]	; (8005f54 <UnlinkTimer+0xfc>)
 8005e7c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8005e7e:	79fa      	ldrb	r2, [r7, #7]
 8005e80:	4935      	ldr	r1, [pc, #212]	; (8005f58 <UnlinkTimer+0x100>)
 8005e82:	4613      	mov	r3, r2
 8005e84:	005b      	lsls	r3, r3, #1
 8005e86:	4413      	add	r3, r2
 8005e88:	00db      	lsls	r3, r3, #3
 8005e8a:	440b      	add	r3, r1
 8005e8c:	3315      	adds	r3, #21
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	4b2f      	ldr	r3, [pc, #188]	; (8005f50 <UnlinkTimer+0xf8>)
 8005e94:	701a      	strb	r2, [r3, #0]
 8005e96:	e03e      	b.n	8005f16 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8005e98:	79fa      	ldrb	r2, [r7, #7]
 8005e9a:	492f      	ldr	r1, [pc, #188]	; (8005f58 <UnlinkTimer+0x100>)
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	005b      	lsls	r3, r3, #1
 8005ea0:	4413      	add	r3, r2
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	440b      	add	r3, r1
 8005ea6:	3314      	adds	r3, #20
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8005eac:	79fa      	ldrb	r2, [r7, #7]
 8005eae:	492a      	ldr	r1, [pc, #168]	; (8005f58 <UnlinkTimer+0x100>)
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	005b      	lsls	r3, r3, #1
 8005eb4:	4413      	add	r3, r2
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	440b      	add	r3, r1
 8005eba:	3315      	adds	r3, #21
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8005ec0:	79f9      	ldrb	r1, [r7, #7]
 8005ec2:	7bfa      	ldrb	r2, [r7, #15]
 8005ec4:	4824      	ldr	r0, [pc, #144]	; (8005f58 <UnlinkTimer+0x100>)
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	005b      	lsls	r3, r3, #1
 8005eca:	440b      	add	r3, r1
 8005ecc:	00db      	lsls	r3, r3, #3
 8005ece:	4403      	add	r3, r0
 8005ed0:	3315      	adds	r3, #21
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	b2d8      	uxtb	r0, r3
 8005ed6:	4920      	ldr	r1, [pc, #128]	; (8005f58 <UnlinkTimer+0x100>)
 8005ed8:	4613      	mov	r3, r2
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	4413      	add	r3, r2
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	440b      	add	r3, r1
 8005ee2:	3315      	adds	r3, #21
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8005ee8:	7bbb      	ldrb	r3, [r7, #14]
 8005eea:	2b06      	cmp	r3, #6
 8005eec:	d013      	beq.n	8005f16 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8005eee:	79f9      	ldrb	r1, [r7, #7]
 8005ef0:	7bba      	ldrb	r2, [r7, #14]
 8005ef2:	4819      	ldr	r0, [pc, #100]	; (8005f58 <UnlinkTimer+0x100>)
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	440b      	add	r3, r1
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	4403      	add	r3, r0
 8005efe:	3314      	adds	r3, #20
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	b2d8      	uxtb	r0, r3
 8005f04:	4914      	ldr	r1, [pc, #80]	; (8005f58 <UnlinkTimer+0x100>)
 8005f06:	4613      	mov	r3, r2
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	4413      	add	r3, r2
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	440b      	add	r3, r1
 8005f10:	3314      	adds	r3, #20
 8005f12:	4602      	mov	r2, r0
 8005f14:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8005f16:	79fa      	ldrb	r2, [r7, #7]
 8005f18:	490f      	ldr	r1, [pc, #60]	; (8005f58 <UnlinkTimer+0x100>)
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	005b      	lsls	r3, r3, #1
 8005f1e:	4413      	add	r3, r2
 8005f20:	00db      	lsls	r3, r3, #3
 8005f22:	440b      	add	r3, r1
 8005f24:	330c      	adds	r3, #12
 8005f26:	2201      	movs	r2, #1
 8005f28:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8005f2a:	4b09      	ldr	r3, [pc, #36]	; (8005f50 <UnlinkTimer+0xf8>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b06      	cmp	r3, #6
 8005f32:	d107      	bne.n	8005f44 <UnlinkTimer+0xec>
 8005f34:	79bb      	ldrb	r3, [r7, #6]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d104      	bne.n	8005f44 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8005f3a:	4b08      	ldr	r3, [pc, #32]	; (8005f5c <UnlinkTimer+0x104>)
 8005f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f40:	601a      	str	r2, [r3, #0]
  }

  return;
 8005f42:	bf00      	nop
 8005f44:	bf00      	nop
}
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	200010b4 	.word	0x200010b4
 8005f54:	200010b5 	.word	0x200010b5
 8005f58:	20001024 	.word	0x20001024
 8005f5c:	200010b8 	.word	0x200010b8

08005f60 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8005f66:	4b1a      	ldr	r3, [pc, #104]	; (8005fd0 <ReturnTimeElapsed+0x70>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6e:	d026      	beq.n	8005fbe <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8005f70:	f7ff fe02 	bl	8005b78 <ReadRtcSsrValue>
 8005f74:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8005f76:	4b16      	ldr	r3, [pc, #88]	; (8005fd0 <ReturnTimeElapsed+0x70>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d805      	bhi.n	8005f8c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8005f80:	4b13      	ldr	r3, [pc, #76]	; (8005fd0 <ReturnTimeElapsed+0x70>)
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	607b      	str	r3, [r7, #4]
 8005f8a:	e00a      	b.n	8005fa2 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8005f8c:	4b11      	ldr	r3, [pc, #68]	; (8005fd4 <ReturnTimeElapsed+0x74>)
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	461a      	mov	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8005f98:	4b0d      	ldr	r3, [pc, #52]	; (8005fd0 <ReturnTimeElapsed+0x70>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8005fa2:	4b0d      	ldr	r3, [pc, #52]	; (8005fd8 <ReturnTimeElapsed+0x78>)
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	fb02 f303 	mul.w	r3, r2, r3
 8005fae:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8005fb0:	4b0a      	ldr	r3, [pc, #40]	; (8005fdc <ReturnTimeElapsed+0x7c>)
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	40d3      	lsrs	r3, r2
 8005fba:	607b      	str	r3, [r7, #4]
 8005fbc:	e001      	b.n	8005fc2 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	b29b      	uxth	r3, r3
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	200010b8 	.word	0x200010b8
 8005fd4:	200010c0 	.word	0x200010c0
 8005fd8:	200010be 	.word	0x200010be
 8005fdc:	200010bd 	.word	0x200010bd

08005fe0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8005fea:	88fb      	ldrh	r3, [r7, #6]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d108      	bne.n	8006002 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8005ff0:	f7ff fdc2 	bl	8005b78 <ReadRtcSsrValue>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	4a21      	ldr	r2, [pc, #132]	; (800607c <RestartWakeupCounter+0x9c>)
 8005ff8:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8005ffa:	2003      	movs	r0, #3
 8005ffc:	f001 fd12 	bl	8007a24 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8006000:	e039      	b.n	8006076 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8006002:	88fb      	ldrh	r3, [r7, #6]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d803      	bhi.n	8006010 <RestartWakeupCounter+0x30>
 8006008:	4b1d      	ldr	r3, [pc, #116]	; (8006080 <RestartWakeupCounter+0xa0>)
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d002      	beq.n	8006016 <RestartWakeupCounter+0x36>
      Value -= 1;
 8006010:	88fb      	ldrh	r3, [r7, #6]
 8006012:	3b01      	subs	r3, #1
 8006014:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8006016:	bf00      	nop
 8006018:	4b1a      	ldr	r3, [pc, #104]	; (8006084 <RestartWakeupCounter+0xa4>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f003 0304 	and.w	r3, r3, #4
 8006022:	2b00      	cmp	r3, #0
 8006024:	d0f8      	beq.n	8006018 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8006026:	4b17      	ldr	r3, [pc, #92]	; (8006084 <RestartWakeupCounter+0xa4>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	b2da      	uxtb	r2, r3
 800602e:	4b15      	ldr	r3, [pc, #84]	; (8006084 <RestartWakeupCounter+0xa4>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006036:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8006038:	4b13      	ldr	r3, [pc, #76]	; (8006088 <RestartWakeupCounter+0xa8>)
 800603a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800603e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8006040:	2003      	movs	r0, #3
 8006042:	f001 fcfd 	bl	8007a40 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8006046:	4b11      	ldr	r3, [pc, #68]	; (800608c <RestartWakeupCounter+0xac>)
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	0c1b      	lsrs	r3, r3, #16
 800604c:	041b      	lsls	r3, r3, #16
 800604e:	88fa      	ldrh	r2, [r7, #6]
 8006050:	490e      	ldr	r1, [pc, #56]	; (800608c <RestartWakeupCounter+0xac>)
 8006052:	4313      	orrs	r3, r2
 8006054:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8006056:	f7ff fd8f 	bl	8005b78 <ReadRtcSsrValue>
 800605a:	4603      	mov	r3, r0
 800605c:	4a07      	ldr	r2, [pc, #28]	; (800607c <RestartWakeupCounter+0x9c>)
 800605e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8006060:	4b08      	ldr	r3, [pc, #32]	; (8006084 <RestartWakeupCounter+0xa4>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689a      	ldr	r2, [r3, #8]
 8006066:	4b07      	ldr	r3, [pc, #28]	; (8006084 <RestartWakeupCounter+0xa4>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800606e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8006070:	f3af 8000 	nop.w
  return ;
 8006074:	bf00      	nop
}
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	200010b8 	.word	0x200010b8
 8006080:	200010bd 	.word	0x200010bd
 8006084:	20001100 	.word	0x20001100
 8006088:	58000800 	.word	0x58000800
 800608c:	40002800 	.word	0x40002800

08006090 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8006096:	4b45      	ldr	r3, [pc, #276]	; (80061ac <RescheduleTimerList+0x11c>)
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800609e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a2:	d107      	bne.n	80060b4 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80060a4:	bf00      	nop
 80060a6:	4b42      	ldr	r3, [pc, #264]	; (80061b0 <RescheduleTimerList+0x120>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1f8      	bne.n	80060a6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80060b4:	4b3e      	ldr	r3, [pc, #248]	; (80061b0 <RescheduleTimerList+0x120>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689a      	ldr	r2, [r3, #8]
 80060ba:	4b3d      	ldr	r3, [pc, #244]	; (80061b0 <RescheduleTimerList+0x120>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060c2:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80060c4:	4b3b      	ldr	r3, [pc, #236]	; (80061b4 <RescheduleTimerList+0x124>)
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80060ca:	7bfa      	ldrb	r2, [r7, #15]
 80060cc:	493a      	ldr	r1, [pc, #232]	; (80061b8 <RescheduleTimerList+0x128>)
 80060ce:	4613      	mov	r3, r2
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	4413      	add	r3, r2
 80060d4:	00db      	lsls	r3, r3, #3
 80060d6:	440b      	add	r3, r1
 80060d8:	3308      	adds	r3, #8
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80060de:	f7ff ff3f 	bl	8005f60 <ReturnTimeElapsed>
 80060e2:	4603      	mov	r3, r0
 80060e4:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80060e6:	88fb      	ldrh	r3, [r7, #6]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d205      	bcs.n	80060fa <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80060ee:	2300      	movs	r3, #0
 80060f0:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80060f2:	4b32      	ldr	r3, [pc, #200]	; (80061bc <RescheduleTimerList+0x12c>)
 80060f4:	2201      	movs	r2, #1
 80060f6:	701a      	strb	r2, [r3, #0]
 80060f8:	e04d      	b.n	8006196 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80060fa:	88fb      	ldrh	r3, [r7, #6]
 80060fc:	4a30      	ldr	r2, [pc, #192]	; (80061c0 <RescheduleTimerList+0x130>)
 80060fe:	8812      	ldrh	r2, [r2, #0]
 8006100:	b292      	uxth	r2, r2
 8006102:	4413      	add	r3, r2
 8006104:	461a      	mov	r2, r3
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	4293      	cmp	r3, r2
 800610a:	d906      	bls.n	800611a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800610c:	4b2c      	ldr	r3, [pc, #176]	; (80061c0 <RescheduleTimerList+0x130>)
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8006112:	4b2a      	ldr	r3, [pc, #168]	; (80061bc <RescheduleTimerList+0x12c>)
 8006114:	2200      	movs	r2, #0
 8006116:	701a      	strb	r2, [r3, #0]
 8006118:	e03d      	b.n	8006196 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	b29a      	uxth	r2, r3
 800611e:	88fb      	ldrh	r3, [r7, #6]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8006124:	4b25      	ldr	r3, [pc, #148]	; (80061bc <RescheduleTimerList+0x12c>)
 8006126:	2201      	movs	r2, #1
 8006128:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800612a:	e034      	b.n	8006196 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800612c:	7bfa      	ldrb	r2, [r7, #15]
 800612e:	4922      	ldr	r1, [pc, #136]	; (80061b8 <RescheduleTimerList+0x128>)
 8006130:	4613      	mov	r3, r2
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	4413      	add	r3, r2
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	440b      	add	r3, r1
 800613a:	3308      	adds	r3, #8
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	88fb      	ldrh	r3, [r7, #6]
 8006140:	429a      	cmp	r2, r3
 8006142:	d20a      	bcs.n	800615a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8006144:	7bfa      	ldrb	r2, [r7, #15]
 8006146:	491c      	ldr	r1, [pc, #112]	; (80061b8 <RescheduleTimerList+0x128>)
 8006148:	4613      	mov	r3, r2
 800614a:	005b      	lsls	r3, r3, #1
 800614c:	4413      	add	r3, r2
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	440b      	add	r3, r1
 8006152:	3308      	adds	r3, #8
 8006154:	2200      	movs	r2, #0
 8006156:	601a      	str	r2, [r3, #0]
 8006158:	e013      	b.n	8006182 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800615a:	7bfa      	ldrb	r2, [r7, #15]
 800615c:	4916      	ldr	r1, [pc, #88]	; (80061b8 <RescheduleTimerList+0x128>)
 800615e:	4613      	mov	r3, r2
 8006160:	005b      	lsls	r3, r3, #1
 8006162:	4413      	add	r3, r2
 8006164:	00db      	lsls	r3, r3, #3
 8006166:	440b      	add	r3, r1
 8006168:	3308      	adds	r3, #8
 800616a:	6819      	ldr	r1, [r3, #0]
 800616c:	88fb      	ldrh	r3, [r7, #6]
 800616e:	7bfa      	ldrb	r2, [r7, #15]
 8006170:	1ac9      	subs	r1, r1, r3
 8006172:	4811      	ldr	r0, [pc, #68]	; (80061b8 <RescheduleTimerList+0x128>)
 8006174:	4613      	mov	r3, r2
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	4413      	add	r3, r2
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	4403      	add	r3, r0
 800617e:	3308      	adds	r3, #8
 8006180:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8006182:	7bfa      	ldrb	r2, [r7, #15]
 8006184:	490c      	ldr	r1, [pc, #48]	; (80061b8 <RescheduleTimerList+0x128>)
 8006186:	4613      	mov	r3, r2
 8006188:	005b      	lsls	r3, r3, #1
 800618a:	4413      	add	r3, r2
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	440b      	add	r3, r1
 8006190:	3315      	adds	r3, #21
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8006196:	7bfb      	ldrb	r3, [r7, #15]
 8006198:	2b06      	cmp	r3, #6
 800619a:	d1c7      	bne.n	800612c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800619c:	89bb      	ldrh	r3, [r7, #12]
 800619e:	4618      	mov	r0, r3
 80061a0:	f7ff ff1e 	bl	8005fe0 <RestartWakeupCounter>

  return ;
 80061a4:	bf00      	nop
}
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	40002800 	.word	0x40002800
 80061b0:	20001100 	.word	0x20001100
 80061b4:	200010b4 	.word	0x200010b4
 80061b8:	20001024 	.word	0x20001024
 80061bc:	200010bc 	.word	0x200010bc
 80061c0:	200010c2 	.word	0x200010c2

080061c4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b08a      	sub	sp, #40	; 0x28
 80061c8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061ca:	f3ef 8310 	mrs	r3, PRIMASK
 80061ce:	617b      	str	r3, [r7, #20]
  return(result);
 80061d0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80061d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80061d4:	b672      	cpsid	i
}
 80061d6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80061d8:	4b59      	ldr	r3, [pc, #356]	; (8006340 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	22ca      	movs	r2, #202	; 0xca
 80061de:	625a      	str	r2, [r3, #36]	; 0x24
 80061e0:	4b57      	ldr	r3, [pc, #348]	; (8006340 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2253      	movs	r2, #83	; 0x53
 80061e6:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80061e8:	4b55      	ldr	r3, [pc, #340]	; (8006340 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	689a      	ldr	r2, [r3, #8]
 80061ee:	4b54      	ldr	r3, [pc, #336]	; (8006340 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061f6:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80061f8:	4b52      	ldr	r3, [pc, #328]	; (8006344 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8006200:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006204:	4950      	ldr	r1, [pc, #320]	; (8006348 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8006206:	4613      	mov	r3, r2
 8006208:	005b      	lsls	r3, r3, #1
 800620a:	4413      	add	r3, r2
 800620c:	00db      	lsls	r3, r3, #3
 800620e:	440b      	add	r3, r1
 8006210:	330c      	adds	r3, #12
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b02      	cmp	r3, #2
 8006218:	d16e      	bne.n	80062f8 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800621a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800621e:	494a      	ldr	r1, [pc, #296]	; (8006348 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8006220:	4613      	mov	r3, r2
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	4413      	add	r3, r2
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	440b      	add	r3, r1
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800622e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006232:	4945      	ldr	r1, [pc, #276]	; (8006348 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8006234:	4613      	mov	r3, r2
 8006236:	005b      	lsls	r3, r3, #1
 8006238:	4413      	add	r3, r2
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	440b      	add	r3, r1
 800623e:	3310      	adds	r3, #16
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8006244:	4b41      	ldr	r3, [pc, #260]	; (800634c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d04c      	beq.n	80062e8 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800624e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006252:	493d      	ldr	r1, [pc, #244]	; (8006348 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8006254:	4613      	mov	r3, r2
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	4413      	add	r3, r2
 800625a:	00db      	lsls	r3, r3, #3
 800625c:	440b      	add	r3, r1
 800625e:	330d      	adds	r3, #13
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b01      	cmp	r3, #1
 8006266:	d124      	bne.n	80062b2 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8006268:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800626c:	2101      	movs	r1, #1
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff fdf2 	bl	8005e58 <UnlinkTimer>
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	f383 8810 	msr	PRIMASK, r3
}
 800627e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8006280:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006284:	4930      	ldr	r1, [pc, #192]	; (8006348 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8006286:	4613      	mov	r3, r2
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	4413      	add	r3, r2
 800628c:	00db      	lsls	r3, r3, #3
 800628e:	440b      	add	r3, r1
 8006290:	3304      	adds	r3, #4
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006298:	4611      	mov	r1, r2
 800629a:	4618      	mov	r0, r3
 800629c:	f000 fa32 	bl	8006704 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80062a0:	4b27      	ldr	r3, [pc, #156]	; (8006340 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	22ca      	movs	r2, #202	; 0xca
 80062a6:	625a      	str	r2, [r3, #36]	; 0x24
 80062a8:	4b25      	ldr	r3, [pc, #148]	; (8006340 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2253      	movs	r2, #83	; 0x53
 80062ae:	625a      	str	r2, [r3, #36]	; 0x24
 80062b0:	e012      	b.n	80062d8 <HW_TS_RTC_Wakeup_Handler+0x114>
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f383 8810 	msr	PRIMASK, r3
}
 80062bc:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80062be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 f99a 	bl	80065fc <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80062c8:	4b1d      	ldr	r3, [pc, #116]	; (8006340 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	22ca      	movs	r2, #202	; 0xca
 80062ce:	625a      	str	r2, [r3, #36]	; 0x24
 80062d0:	4b1b      	ldr	r3, [pc, #108]	; (8006340 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2253      	movs	r2, #83	; 0x53
 80062d6:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80062d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062dc:	69fa      	ldr	r2, [r7, #28]
 80062de:	4619      	mov	r1, r3
 80062e0:	69b8      	ldr	r0, [r7, #24]
 80062e2:	f000 fa95 	bl	8006810 <HW_TS_RTC_Int_AppNot>
 80062e6:	e022      	b.n	800632e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80062e8:	f7ff fed2 	bl	8006090 <RescheduleTimerList>
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f383 8810 	msr	PRIMASK, r3
}
 80062f6:	e01a      	b.n	800632e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80062f8:	bf00      	nop
 80062fa:	4b11      	ldr	r3, [pc, #68]	; (8006340 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b00      	cmp	r3, #0
 8006306:	d0f8      	beq.n	80062fa <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8006308:	4b0d      	ldr	r3, [pc, #52]	; (8006340 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	b2da      	uxtb	r2, r3
 8006310:	4b0b      	ldr	r3, [pc, #44]	; (8006340 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006318:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800631a:	4b0d      	ldr	r3, [pc, #52]	; (8006350 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800631c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006320:	60da      	str	r2, [r3, #12]
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f383 8810 	msr	PRIMASK, r3
}
 800632c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800632e:	4b04      	ldr	r3, [pc, #16]	; (8006340 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	22ff      	movs	r2, #255	; 0xff
 8006334:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8006336:	bf00      	nop
}
 8006338:	3728      	adds	r7, #40	; 0x28
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	20001100 	.word	0x20001100
 8006344:	200010b4 	.word	0x200010b4
 8006348:	20001024 	.word	0x20001024
 800634c:	200010bc 	.word	0x200010bc
 8006350:	58000800 	.word	0x58000800

08006354 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b088      	sub	sp, #32
 8006358:	af00      	add	r7, sp, #0
 800635a:	4603      	mov	r3, r0
 800635c:	6039      	str	r1, [r7, #0]
 800635e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8006360:	4b5e      	ldr	r3, [pc, #376]	; (80064dc <HW_TS_Init+0x188>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	22ca      	movs	r2, #202	; 0xca
 8006366:	625a      	str	r2, [r3, #36]	; 0x24
 8006368:	4b5c      	ldr	r3, [pc, #368]	; (80064dc <HW_TS_Init+0x188>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2253      	movs	r2, #83	; 0x53
 800636e:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006370:	4b5b      	ldr	r3, [pc, #364]	; (80064e0 <HW_TS_Init+0x18c>)
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	4a5a      	ldr	r2, [pc, #360]	; (80064e0 <HW_TS_Init+0x18c>)
 8006376:	f043 0320 	orr.w	r3, r3, #32
 800637a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800637c:	4b58      	ldr	r3, [pc, #352]	; (80064e0 <HW_TS_Init+0x18c>)
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	b2db      	uxtb	r3, r3
 8006382:	f003 0307 	and.w	r3, r3, #7
 8006386:	b2db      	uxtb	r3, r3
 8006388:	f1c3 0304 	rsb	r3, r3, #4
 800638c:	b2da      	uxtb	r2, r3
 800638e:	4b55      	ldr	r3, [pc, #340]	; (80064e4 <HW_TS_Init+0x190>)
 8006390:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8006392:	4b53      	ldr	r3, [pc, #332]	; (80064e0 <HW_TS_Init+0x18c>)
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800639a:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800639e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	fa92 f2a2 	rbit	r2, r2
 80063a6:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	2a00      	cmp	r2, #0
 80063b0:	d101      	bne.n	80063b6 <HW_TS_Init+0x62>
  {
    return 32U;
 80063b2:	2220      	movs	r2, #32
 80063b4:	e003      	b.n	80063be <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	fab2 f282 	clz	r2, r2
 80063bc:	b2d2      	uxtb	r2, r2
 80063be:	40d3      	lsrs	r3, r2
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	3301      	adds	r3, #1
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	4b48      	ldr	r3, [pc, #288]	; (80064e8 <HW_TS_Init+0x194>)
 80063c8:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80063ca:	4b45      	ldr	r3, [pc, #276]	; (80064e0 <HW_TS_Init+0x18c>)
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	3301      	adds	r3, #1
 80063d8:	b29a      	uxth	r2, r3
 80063da:	4b44      	ldr	r3, [pc, #272]	; (80064ec <HW_TS_Init+0x198>)
 80063dc:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80063de:	4b43      	ldr	r3, [pc, #268]	; (80064ec <HW_TS_Init+0x198>)
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	3b01      	subs	r3, #1
 80063e4:	4a40      	ldr	r2, [pc, #256]	; (80064e8 <HW_TS_Init+0x194>)
 80063e6:	7812      	ldrb	r2, [r2, #0]
 80063e8:	fb02 f303 	mul.w	r3, r2, r3
 80063ec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80063f0:	4a3c      	ldr	r2, [pc, #240]	; (80064e4 <HW_TS_Init+0x190>)
 80063f2:	7812      	ldrb	r2, [r2, #0]
 80063f4:	40d3      	lsrs	r3, r2
 80063f6:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80063fe:	4293      	cmp	r3, r2
 8006400:	d904      	bls.n	800640c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8006402:	4b3b      	ldr	r3, [pc, #236]	; (80064f0 <HW_TS_Init+0x19c>)
 8006404:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006408:	801a      	strh	r2, [r3, #0]
 800640a:	e003      	b.n	8006414 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	b29a      	uxth	r2, r3
 8006410:	4b37      	ldr	r3, [pc, #220]	; (80064f0 <HW_TS_Init+0x19c>)
 8006412:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8006414:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006418:	f7ff fb9c 	bl	8005b54 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800641c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006420:	f7ff fb84 	bl	8005b2c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8006424:	79fb      	ldrb	r3, [r7, #7]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d13d      	bne.n	80064a6 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800642a:	4b32      	ldr	r3, [pc, #200]	; (80064f4 <HW_TS_Init+0x1a0>)
 800642c:	2201      	movs	r2, #1
 800642e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8006430:	4b31      	ldr	r3, [pc, #196]	; (80064f8 <HW_TS_Init+0x1a4>)
 8006432:	f04f 32ff 	mov.w	r2, #4294967295
 8006436:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8006438:	2300      	movs	r3, #0
 800643a:	77fb      	strb	r3, [r7, #31]
 800643c:	e00c      	b.n	8006458 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800643e:	7ffa      	ldrb	r2, [r7, #31]
 8006440:	492e      	ldr	r1, [pc, #184]	; (80064fc <HW_TS_Init+0x1a8>)
 8006442:	4613      	mov	r3, r2
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	4413      	add	r3, r2
 8006448:	00db      	lsls	r3, r3, #3
 800644a:	440b      	add	r3, r1
 800644c:	330c      	adds	r3, #12
 800644e:	2200      	movs	r2, #0
 8006450:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8006452:	7ffb      	ldrb	r3, [r7, #31]
 8006454:	3301      	adds	r3, #1
 8006456:	77fb      	strb	r3, [r7, #31]
 8006458:	7ffb      	ldrb	r3, [r7, #31]
 800645a:	2b05      	cmp	r3, #5
 800645c:	d9ef      	bls.n	800643e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800645e:	4b28      	ldr	r3, [pc, #160]	; (8006500 <HW_TS_Init+0x1ac>)
 8006460:	2206      	movs	r2, #6
 8006462:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8006464:	4b1d      	ldr	r3, [pc, #116]	; (80064dc <HW_TS_Init+0x188>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689a      	ldr	r2, [r3, #8]
 800646a:	4b1c      	ldr	r3, [pc, #112]	; (80064dc <HW_TS_Init+0x188>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006472:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8006474:	4b19      	ldr	r3, [pc, #100]	; (80064dc <HW_TS_Init+0x188>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	b2da      	uxtb	r2, r3
 800647c:	4b17      	ldr	r3, [pc, #92]	; (80064dc <HW_TS_Init+0x188>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006484:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8006486:	4b1f      	ldr	r3, [pc, #124]	; (8006504 <HW_TS_Init+0x1b0>)
 8006488:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800648c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800648e:	2003      	movs	r0, #3
 8006490:	f001 fad6 	bl	8007a40 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8006494:	4b11      	ldr	r3, [pc, #68]	; (80064dc <HW_TS_Init+0x188>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689a      	ldr	r2, [r3, #8]
 800649a:	4b10      	ldr	r3, [pc, #64]	; (80064dc <HW_TS_Init+0x188>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064a2:	609a      	str	r2, [r3, #8]
 80064a4:	e009      	b.n	80064ba <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80064a6:	4b0d      	ldr	r3, [pc, #52]	; (80064dc <HW_TS_Init+0x188>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d002      	beq.n	80064ba <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80064b4:	2003      	movs	r0, #3
 80064b6:	f001 fab5 	bl	8007a24 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80064ba:	4b08      	ldr	r3, [pc, #32]	; (80064dc <HW_TS_Init+0x188>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	22ff      	movs	r2, #255	; 0xff
 80064c0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80064c2:	2200      	movs	r2, #0
 80064c4:	2106      	movs	r1, #6
 80064c6:	2003      	movs	r0, #3
 80064c8:	f001 fa76 	bl	80079b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80064cc:	2003      	movs	r0, #3
 80064ce:	f001 fa8d 	bl	80079ec <HAL_NVIC_EnableIRQ>

  return;
 80064d2:	bf00      	nop
}
 80064d4:	3720      	adds	r7, #32
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	20001100 	.word	0x20001100
 80064e0:	40002800 	.word	0x40002800
 80064e4:	200010bd 	.word	0x200010bd
 80064e8:	200010be 	.word	0x200010be
 80064ec:	200010c0 	.word	0x200010c0
 80064f0:	200010c2 	.word	0x200010c2
 80064f4:	200010bc 	.word	0x200010bc
 80064f8:	200010b8 	.word	0x200010b8
 80064fc:	20001024 	.word	0x20001024
 8006500:	200010b4 	.word	0x200010b4
 8006504:	58000800 	.word	0x58000800

08006508 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8006508:	b480      	push	{r7}
 800650a:	b08b      	sub	sp, #44	; 0x2c
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	603b      	str	r3, [r7, #0]
 8006514:	4613      	mov	r3, r2
 8006516:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8006518:	2300      	movs	r3, #0
 800651a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800651e:	f3ef 8310 	mrs	r3, PRIMASK
 8006522:	61fb      	str	r3, [r7, #28]
  return(result);
 8006524:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006526:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8006528:	b672      	cpsid	i
}
 800652a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800652c:	e004      	b.n	8006538 <HW_TS_Create+0x30>
  {
    loop++;
 800652e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006532:	3301      	adds	r3, #1
 8006534:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8006538:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800653c:	2b05      	cmp	r3, #5
 800653e:	d80c      	bhi.n	800655a <HW_TS_Create+0x52>
 8006540:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006544:	492c      	ldr	r1, [pc, #176]	; (80065f8 <HW_TS_Create+0xf0>)
 8006546:	4613      	mov	r3, r2
 8006548:	005b      	lsls	r3, r3, #1
 800654a:	4413      	add	r3, r2
 800654c:	00db      	lsls	r3, r3, #3
 800654e:	440b      	add	r3, r1
 8006550:	330c      	adds	r3, #12
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1e9      	bne.n	800652e <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800655a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800655e:	2b06      	cmp	r3, #6
 8006560:	d038      	beq.n	80065d4 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8006562:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006566:	4924      	ldr	r1, [pc, #144]	; (80065f8 <HW_TS_Create+0xf0>)
 8006568:	4613      	mov	r3, r2
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	4413      	add	r3, r2
 800656e:	00db      	lsls	r3, r3, #3
 8006570:	440b      	add	r3, r1
 8006572:	330c      	adds	r3, #12
 8006574:	2201      	movs	r2, #1
 8006576:	701a      	strb	r2, [r3, #0]
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	f383 8810 	msr	PRIMASK, r3
}
 8006582:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8006584:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006588:	491b      	ldr	r1, [pc, #108]	; (80065f8 <HW_TS_Create+0xf0>)
 800658a:	4613      	mov	r3, r2
 800658c:	005b      	lsls	r3, r3, #1
 800658e:	4413      	add	r3, r2
 8006590:	00db      	lsls	r3, r3, #3
 8006592:	440b      	add	r3, r1
 8006594:	3310      	adds	r3, #16
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800659a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800659e:	4916      	ldr	r1, [pc, #88]	; (80065f8 <HW_TS_Create+0xf0>)
 80065a0:	4613      	mov	r3, r2
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	4413      	add	r3, r2
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	440b      	add	r3, r1
 80065aa:	330d      	adds	r3, #13
 80065ac:	79fa      	ldrb	r2, [r7, #7]
 80065ae:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80065b0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80065b4:	4910      	ldr	r1, [pc, #64]	; (80065f8 <HW_TS_Create+0xf0>)
 80065b6:	4613      	mov	r3, r2
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	4413      	add	r3, r2
 80065bc:	00db      	lsls	r3, r3, #3
 80065be:	440b      	add	r3, r1
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80065ca:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80065cc:	2300      	movs	r3, #0
 80065ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80065d2:	e008      	b.n	80065e6 <HW_TS_Create+0xde>
 80065d4:	6a3b      	ldr	r3, [r7, #32]
 80065d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f383 8810 	msr	PRIMASK, r3
}
 80065de:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80065e0:	2301      	movs	r3, #1
 80065e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80065e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	372c      	adds	r7, #44	; 0x2c
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	20001024 	.word	0x20001024

080065fc <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	4603      	mov	r3, r0
 8006604:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006606:	f3ef 8310 	mrs	r3, PRIMASK
 800660a:	60fb      	str	r3, [r7, #12]
  return(result);
 800660c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800660e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006610:	b672      	cpsid	i
}
 8006612:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8006614:	2003      	movs	r0, #3
 8006616:	f001 f9f7 	bl	8007a08 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800661a:	4b34      	ldr	r3, [pc, #208]	; (80066ec <HW_TS_Stop+0xf0>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	22ca      	movs	r2, #202	; 0xca
 8006620:	625a      	str	r2, [r3, #36]	; 0x24
 8006622:	4b32      	ldr	r3, [pc, #200]	; (80066ec <HW_TS_Stop+0xf0>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2253      	movs	r2, #83	; 0x53
 8006628:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800662a:	79fa      	ldrb	r2, [r7, #7]
 800662c:	4930      	ldr	r1, [pc, #192]	; (80066f0 <HW_TS_Stop+0xf4>)
 800662e:	4613      	mov	r3, r2
 8006630:	005b      	lsls	r3, r3, #1
 8006632:	4413      	add	r3, r2
 8006634:	00db      	lsls	r3, r3, #3
 8006636:	440b      	add	r3, r1
 8006638:	330c      	adds	r3, #12
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b02      	cmp	r3, #2
 8006640:	d142      	bne.n	80066c8 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8006642:	79fb      	ldrb	r3, [r7, #7]
 8006644:	2100      	movs	r1, #0
 8006646:	4618      	mov	r0, r3
 8006648:	f7ff fc06 	bl	8005e58 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800664c:	4b29      	ldr	r3, [pc, #164]	; (80066f4 <HW_TS_Stop+0xf8>)
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8006652:	7cfb      	ldrb	r3, [r7, #19]
 8006654:	2b06      	cmp	r3, #6
 8006656:	d12f      	bne.n	80066b8 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8006658:	4b27      	ldr	r3, [pc, #156]	; (80066f8 <HW_TS_Stop+0xfc>)
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006664:	d107      	bne.n	8006676 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8006666:	bf00      	nop
 8006668:	4b20      	ldr	r3, [pc, #128]	; (80066ec <HW_TS_Stop+0xf0>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f003 0304 	and.w	r3, r3, #4
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1f8      	bne.n	8006668 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8006676:	4b1d      	ldr	r3, [pc, #116]	; (80066ec <HW_TS_Stop+0xf0>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689a      	ldr	r2, [r3, #8]
 800667c:	4b1b      	ldr	r3, [pc, #108]	; (80066ec <HW_TS_Stop+0xf0>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006684:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8006686:	bf00      	nop
 8006688:	4b18      	ldr	r3, [pc, #96]	; (80066ec <HW_TS_Stop+0xf0>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	f003 0304 	and.w	r3, r3, #4
 8006692:	2b00      	cmp	r3, #0
 8006694:	d0f8      	beq.n	8006688 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8006696:	4b15      	ldr	r3, [pc, #84]	; (80066ec <HW_TS_Stop+0xf0>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	b2da      	uxtb	r2, r3
 800669e:	4b13      	ldr	r3, [pc, #76]	; (80066ec <HW_TS_Stop+0xf0>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80066a6:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80066a8:	4b14      	ldr	r3, [pc, #80]	; (80066fc <HW_TS_Stop+0x100>)
 80066aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80066ae:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80066b0:	2003      	movs	r0, #3
 80066b2:	f001 f9c5 	bl	8007a40 <HAL_NVIC_ClearPendingIRQ>
 80066b6:	e007      	b.n	80066c8 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80066b8:	4b11      	ldr	r3, [pc, #68]	; (8006700 <HW_TS_Stop+0x104>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	7cfa      	ldrb	r2, [r7, #19]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d001      	beq.n	80066c8 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80066c4:	f7ff fce4 	bl	8006090 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80066c8:	4b08      	ldr	r3, [pc, #32]	; (80066ec <HW_TS_Stop+0xf0>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	22ff      	movs	r2, #255	; 0xff
 80066ce:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80066d0:	2003      	movs	r0, #3
 80066d2:	f001 f98b 	bl	80079ec <HAL_NVIC_EnableIRQ>
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	f383 8810 	msr	PRIMASK, r3
}
 80066e0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80066e2:	bf00      	nop
}
 80066e4:	3718      	adds	r7, #24
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	20001100 	.word	0x20001100
 80066f0:	20001024 	.word	0x20001024
 80066f4:	200010b4 	.word	0x200010b4
 80066f8:	40002800 	.word	0x40002800
 80066fc:	58000800 	.word	0x58000800
 8006700:	200010b5 	.word	0x200010b5

08006704 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
 800670a:	4603      	mov	r3, r0
 800670c:	6039      	str	r1, [r7, #0]
 800670e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8006710:	79fa      	ldrb	r2, [r7, #7]
 8006712:	493b      	ldr	r1, [pc, #236]	; (8006800 <HW_TS_Start+0xfc>)
 8006714:	4613      	mov	r3, r2
 8006716:	005b      	lsls	r3, r3, #1
 8006718:	4413      	add	r3, r2
 800671a:	00db      	lsls	r3, r3, #3
 800671c:	440b      	add	r3, r1
 800671e:	330c      	adds	r3, #12
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b02      	cmp	r3, #2
 8006726:	d103      	bne.n	8006730 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8006728:	79fb      	ldrb	r3, [r7, #7]
 800672a:	4618      	mov	r0, r3
 800672c:	f7ff ff66 	bl	80065fc <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006730:	f3ef 8310 	mrs	r3, PRIMASK
 8006734:	60fb      	str	r3, [r7, #12]
  return(result);
 8006736:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006738:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800673a:	b672      	cpsid	i
}
 800673c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800673e:	2003      	movs	r0, #3
 8006740:	f001 f962 	bl	8007a08 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8006744:	4b2f      	ldr	r3, [pc, #188]	; (8006804 <HW_TS_Start+0x100>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	22ca      	movs	r2, #202	; 0xca
 800674a:	625a      	str	r2, [r3, #36]	; 0x24
 800674c:	4b2d      	ldr	r3, [pc, #180]	; (8006804 <HW_TS_Start+0x100>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2253      	movs	r2, #83	; 0x53
 8006752:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8006754:	79fa      	ldrb	r2, [r7, #7]
 8006756:	492a      	ldr	r1, [pc, #168]	; (8006800 <HW_TS_Start+0xfc>)
 8006758:	4613      	mov	r3, r2
 800675a:	005b      	lsls	r3, r3, #1
 800675c:	4413      	add	r3, r2
 800675e:	00db      	lsls	r3, r3, #3
 8006760:	440b      	add	r3, r1
 8006762:	330c      	adds	r3, #12
 8006764:	2202      	movs	r2, #2
 8006766:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8006768:	79fa      	ldrb	r2, [r7, #7]
 800676a:	4925      	ldr	r1, [pc, #148]	; (8006800 <HW_TS_Start+0xfc>)
 800676c:	4613      	mov	r3, r2
 800676e:	005b      	lsls	r3, r3, #1
 8006770:	4413      	add	r3, r2
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	440b      	add	r3, r1
 8006776:	3308      	adds	r3, #8
 8006778:	683a      	ldr	r2, [r7, #0]
 800677a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800677c:	79fa      	ldrb	r2, [r7, #7]
 800677e:	4920      	ldr	r1, [pc, #128]	; (8006800 <HW_TS_Start+0xfc>)
 8006780:	4613      	mov	r3, r2
 8006782:	005b      	lsls	r3, r3, #1
 8006784:	4413      	add	r3, r2
 8006786:	00db      	lsls	r3, r3, #3
 8006788:	440b      	add	r3, r1
 800678a:	3304      	adds	r3, #4
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8006790:	79fb      	ldrb	r3, [r7, #7]
 8006792:	4618      	mov	r0, r3
 8006794:	f7ff fab6 	bl	8005d04 <linkTimer>
 8006798:	4603      	mov	r3, r0
 800679a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800679c:	4b1a      	ldr	r3, [pc, #104]	; (8006808 <HW_TS_Start+0x104>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80067a2:	4b1a      	ldr	r3, [pc, #104]	; (800680c <HW_TS_Start+0x108>)
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	7c7a      	ldrb	r2, [r7, #17]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d002      	beq.n	80067b4 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80067ae:	f7ff fc6f 	bl	8006090 <RescheduleTimerList>
 80067b2:	e013      	b.n	80067dc <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80067b4:	79fa      	ldrb	r2, [r7, #7]
 80067b6:	4912      	ldr	r1, [pc, #72]	; (8006800 <HW_TS_Start+0xfc>)
 80067b8:	4613      	mov	r3, r2
 80067ba:	005b      	lsls	r3, r3, #1
 80067bc:	4413      	add	r3, r2
 80067be:	00db      	lsls	r3, r3, #3
 80067c0:	440b      	add	r3, r1
 80067c2:	3308      	adds	r3, #8
 80067c4:	6819      	ldr	r1, [r3, #0]
 80067c6:	8a7b      	ldrh	r3, [r7, #18]
 80067c8:	79fa      	ldrb	r2, [r7, #7]
 80067ca:	1ac9      	subs	r1, r1, r3
 80067cc:	480c      	ldr	r0, [pc, #48]	; (8006800 <HW_TS_Start+0xfc>)
 80067ce:	4613      	mov	r3, r2
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	4413      	add	r3, r2
 80067d4:	00db      	lsls	r3, r3, #3
 80067d6:	4403      	add	r3, r0
 80067d8:	3308      	adds	r3, #8
 80067da:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80067dc:	4b09      	ldr	r3, [pc, #36]	; (8006804 <HW_TS_Start+0x100>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	22ff      	movs	r2, #255	; 0xff
 80067e2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80067e4:	2003      	movs	r0, #3
 80067e6:	f001 f901 	bl	80079ec <HAL_NVIC_EnableIRQ>
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f383 8810 	msr	PRIMASK, r3
}
 80067f4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80067f6:	bf00      	nop
}
 80067f8:	3718      	adds	r7, #24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	20001024 	.word	0x20001024
 8006804:	20001100 	.word	0x20001100
 8006808:	200010b4 	.word	0x200010b4
 800680c:	200010b5 	.word	0x200010b5

08006810 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	460b      	mov	r3, r1
 800681a:	607a      	str	r2, [r7, #4]
 800681c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4798      	blx	r3

  return;
 8006822:	bf00      	nop
}
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <LL_RCC_LSE_SetDriveCapability>:
{
 800682a:	b480      	push	{r7}
 800682c:	b083      	sub	sp, #12
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8006832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800683a:	f023 0218 	bic.w	r2, r3, #24
 800683e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4313      	orrs	r3, r2
 8006846:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800684a:	bf00      	nop
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8006856:	b480      	push	{r7}
 8006858:	b085      	sub	sp, #20
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800685e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006862:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006864:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4313      	orrs	r3, r2
 800686c:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800686e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006872:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4013      	ands	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800687a:	68fb      	ldr	r3, [r7, #12]
}
 800687c:	bf00      	nop
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006894:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006896:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4313      	orrs	r3, r2
 800689e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80068a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4013      	ands	r3, r2
 80068aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80068ac:	68fb      	ldr	r3, [r7, #12]
}
 80068ae:	bf00      	nop
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
	...

080068bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80068c0:	f000 ff16 	bl	80076f0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80068c4:	f7fa fbda 	bl	800107c <MX_APPE_Config>

  /* USER CODE BEGIN Init */
  MX_APPE_Config();
 80068c8:	f7fa fbd8 	bl	800107c <MX_APPE_Config>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80068cc:	f000 f836 	bl	800693c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80068d0:	f000 f8b4 	bl	8006a3c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80068d4:	f000 f8d2 	bl	8006a7c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80068d8:	f000 f9fc 	bl	8006cd4 <MX_GPIO_Init>
  MX_DMA_Init();
 80068dc:	f000 f9d0 	bl	8006c80 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80068e0:	f000 f95a 	bl	8006b98 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80068e4:	f000 f9a4 	bl	8006c30 <MX_USB_PCD_Init>
  MX_SPI1_Init();
 80068e8:	f000 f918 	bl	8006b1c <MX_SPI1_Init>
  MX_RTC_Init();
 80068ec:	f000 f8e2 	bl	8006ab4 <MX_RTC_Init>
  MX_RF_Init();
 80068f0:	f000 f8d8 	bl	8006aa4 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80068f4:	f008 fbc4 	bl	800f080 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  BMI323TaskHandle = osThreadNew(StartBMI323Task, NULL, &BMI323Task_attributes);
 80068f8:	4a0a      	ldr	r2, [pc, #40]	; (8006924 <main+0x68>)
 80068fa:	2100      	movs	r1, #0
 80068fc:	480a      	ldr	r0, [pc, #40]	; (8006928 <main+0x6c>)
 80068fe:	f008 fc09 	bl	800f114 <osThreadNew>
 8006902:	4603      	mov	r3, r0
 8006904:	4a09      	ldr	r2, [pc, #36]	; (800692c <main+0x70>)
 8006906:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8006908:	4a09      	ldr	r2, [pc, #36]	; (8006930 <main+0x74>)
 800690a:	2100      	movs	r1, #0
 800690c:	4809      	ldr	r0, [pc, #36]	; (8006934 <main+0x78>)
 800690e:	f008 fc01 	bl	800f114 <osThreadNew>
 8006912:	4603      	mov	r3, r0
 8006914:	4a08      	ldr	r2, [pc, #32]	; (8006938 <main+0x7c>)
 8006916:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8006918:	f7fa fbbe 	bl	8001098 <MX_APPE_Init>

  /* Start scheduler */
  osKernelStart();
 800691c:	f008 fbd4 	bl	800f0c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006920:	e7fe      	b.n	8006920 <main+0x64>
 8006922:	bf00      	nop
 8006924:	08018400 	.word	0x08018400
 8006928:	08005a5d 	.word	0x08005a5d
 800692c:	2000167c 	.word	0x2000167c
 8006930:	080183dc 	.word	0x080183dc
 8006934:	08006db1 	.word	0x08006db1
 8006938:	20001678 	.word	0x20001678

0800693c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b09a      	sub	sp, #104	; 0x68
 8006940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006942:	f107 0320 	add.w	r3, r7, #32
 8006946:	2248      	movs	r2, #72	; 0x48
 8006948:	2100      	movs	r1, #0
 800694a:	4618      	mov	r0, r3
 800694c:	f00d fe28 	bl	80145a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006950:	1d3b      	adds	r3, r7, #4
 8006952:	2200      	movs	r2, #0
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	605a      	str	r2, [r3, #4]
 8006958:	609a      	str	r2, [r3, #8]
 800695a:	60da      	str	r2, [r3, #12]
 800695c:	611a      	str	r2, [r3, #16]
 800695e:	615a      	str	r2, [r3, #20]
 8006960:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8006962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800696c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006970:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8006972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f023 0303 	bic.w	r3, r3, #3
 800697c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006980:	f043 0301 	orr.w	r3, r3, #1
 8006984:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8006986:	f001 fe0d 	bl	80085a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800698a:	2010      	movs	r0, #16
 800698c:	f7ff ff4d 	bl	800682a <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006990:	4b29      	ldr	r3, [pc, #164]	; (8006a38 <SystemClock_Config+0xfc>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006998:	4a27      	ldr	r2, [pc, #156]	; (8006a38 <SystemClock_Config+0xfc>)
 800699a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800699e:	6013      	str	r3, [r2, #0]
 80069a0:	4b25      	ldr	r3, [pc, #148]	; (8006a38 <SystemClock_Config+0xfc>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80069a8:	603b      	str	r3, [r7, #0]
 80069aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80069ac:	232f      	movs	r3, #47	; 0x2f
 80069ae:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80069b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80069b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80069b6:	2301      	movs	r3, #1
 80069b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80069ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80069c0:	2301      	movs	r3, #1
 80069c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80069c4:	2340      	movs	r3, #64	; 0x40
 80069c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80069c8:	2300      	movs	r3, #0
 80069ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80069cc:	2360      	movs	r3, #96	; 0x60
 80069ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80069d0:	2305      	movs	r3, #5
 80069d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80069d4:	2300      	movs	r3, #0
 80069d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80069d8:	f107 0320 	add.w	r3, r7, #32
 80069dc:	4618      	mov	r0, r3
 80069de:	f002 f999 	bl	8008d14 <HAL_RCC_OscConfig>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d001      	beq.n	80069ec <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80069e8:	f000 f9f9 	bl	8006dde <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80069ec:	236f      	movs	r3, #111	; 0x6f
 80069ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80069f0:	2302      	movs	r3, #2
 80069f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80069f4:	2300      	movs	r3, #0
 80069f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80069f8:	2300      	movs	r3, #0
 80069fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80069fc:	2300      	movs	r3, #0
 80069fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8006a00:	2300      	movs	r3, #0
 8006a02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8006a04:	2300      	movs	r3, #0
 8006a06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006a08:	1d3b      	adds	r3, r7, #4
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f002 fcf5 	bl	80093fc <HAL_RCC_ClockConfig>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8006a18:	f000 f9e1 	bl	8006dde <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8006a22:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006a26:	f002 fe29 	bl	800967c <HAL_RCC_MCOConfig>

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8006a2a:	f003 fb2d 	bl	800a088 <HAL_RCCEx_EnableMSIPLLMode>
}
 8006a2e:	bf00      	nop
 8006a30:	3768      	adds	r7, #104	; 0x68
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	58000400 	.word	0x58000400

08006a3c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b094      	sub	sp, #80	; 0x50
 8006a40:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006a42:	463b      	mov	r3, r7
 8006a44:	2250      	movs	r2, #80	; 0x50
 8006a46:	2100      	movs	r1, #0
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f00d fda9 	bl	80145a0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8006a4e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006a52:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8006a54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006a58:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006a62:	463b      	mov	r3, r7
 8006a64:	4618      	mov	r0, r3
 8006a66:	f003 f999 	bl	8009d9c <HAL_RCCEx_PeriphCLKConfig>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d001      	beq.n	8006a74 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8006a70:	f000 f9b5 	bl	8006dde <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8006a74:	bf00      	nop
 8006a76:	3750      	adds	r7, #80	; 0x50
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8006a80:	4b06      	ldr	r3, [pc, #24]	; (8006a9c <MX_IPCC_Init+0x20>)
 8006a82:	4a07      	ldr	r2, [pc, #28]	; (8006aa0 <MX_IPCC_Init+0x24>)
 8006a84:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8006a86:	4805      	ldr	r0, [pc, #20]	; (8006a9c <MX_IPCC_Init+0x20>)
 8006a88:	f001 fc0e 	bl	80082a8 <HAL_IPCC_Init>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d001      	beq.n	8006a96 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8006a92:	f000 f9a4 	bl	8006dde <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8006a96:	bf00      	nop
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	200010c4 	.word	0x200010c4
 8006aa0:	58000c00 	.word	0x58000c00

08006aa4 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8006aa8:	bf00      	nop
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
	...

08006ab4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006ab8:	4b16      	ldr	r3, [pc, #88]	; (8006b14 <MX_RTC_Init+0x60>)
 8006aba:	4a17      	ldr	r2, [pc, #92]	; (8006b18 <MX_RTC_Init+0x64>)
 8006abc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006abe:	4b15      	ldr	r3, [pc, #84]	; (8006b14 <MX_RTC_Init+0x60>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8006ac4:	4b13      	ldr	r3, [pc, #76]	; (8006b14 <MX_RTC_Init+0x60>)
 8006ac6:	220f      	movs	r2, #15
 8006ac8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8006aca:	4b12      	ldr	r3, [pc, #72]	; (8006b14 <MX_RTC_Init+0x60>)
 8006acc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006ad0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006ad2:	4b10      	ldr	r3, [pc, #64]	; (8006b14 <MX_RTC_Init+0x60>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006ad8:	4b0e      	ldr	r3, [pc, #56]	; (8006b14 <MX_RTC_Init+0x60>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006ade:	4b0d      	ldr	r3, [pc, #52]	; (8006b14 <MX_RTC_Init+0x60>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8006ae4:	4b0b      	ldr	r3, [pc, #44]	; (8006b14 <MX_RTC_Init+0x60>)
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006aea:	480a      	ldr	r0, [pc, #40]	; (8006b14 <MX_RTC_Init+0x60>)
 8006aec:	f003 fbe4 	bl	800a2b8 <HAL_RTC_Init>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8006af6:	f000 f972 	bl	8006dde <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8006afa:	2200      	movs	r2, #0
 8006afc:	2100      	movs	r1, #0
 8006afe:	4805      	ldr	r0, [pc, #20]	; (8006b14 <MX_RTC_Init+0x60>)
 8006b00:	f003 fcda 	bl	800a4b8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d001      	beq.n	8006b0e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8006b0a:	f000 f968 	bl	8006dde <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8006b0e:	bf00      	nop
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	20001100 	.word	0x20001100
 8006b18:	40002800 	.word	0x40002800

08006b1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006b20:	4b1b      	ldr	r3, [pc, #108]	; (8006b90 <MX_SPI1_Init+0x74>)
 8006b22:	4a1c      	ldr	r2, [pc, #112]	; (8006b94 <MX_SPI1_Init+0x78>)
 8006b24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006b26:	4b1a      	ldr	r3, [pc, #104]	; (8006b90 <MX_SPI1_Init+0x74>)
 8006b28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006b2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006b2e:	4b18      	ldr	r3, [pc, #96]	; (8006b90 <MX_SPI1_Init+0x74>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006b34:	4b16      	ldr	r3, [pc, #88]	; (8006b90 <MX_SPI1_Init+0x74>)
 8006b36:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006b3a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b3c:	4b14      	ldr	r3, [pc, #80]	; (8006b90 <MX_SPI1_Init+0x74>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006b42:	4b13      	ldr	r3, [pc, #76]	; (8006b90 <MX_SPI1_Init+0x74>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006b48:	4b11      	ldr	r3, [pc, #68]	; (8006b90 <MX_SPI1_Init+0x74>)
 8006b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b4e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006b50:	4b0f      	ldr	r3, [pc, #60]	; (8006b90 <MX_SPI1_Init+0x74>)
 8006b52:	2210      	movs	r2, #16
 8006b54:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006b56:	4b0e      	ldr	r3, [pc, #56]	; (8006b90 <MX_SPI1_Init+0x74>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006b5c:	4b0c      	ldr	r3, [pc, #48]	; (8006b90 <MX_SPI1_Init+0x74>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b62:	4b0b      	ldr	r3, [pc, #44]	; (8006b90 <MX_SPI1_Init+0x74>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006b68:	4b09      	ldr	r3, [pc, #36]	; (8006b90 <MX_SPI1_Init+0x74>)
 8006b6a:	2207      	movs	r2, #7
 8006b6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006b6e:	4b08      	ldr	r3, [pc, #32]	; (8006b90 <MX_SPI1_Init+0x74>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8006b74:	4b06      	ldr	r3, [pc, #24]	; (8006b90 <MX_SPI1_Init+0x74>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006b7a:	4805      	ldr	r0, [pc, #20]	; (8006b90 <MX_SPI1_Init+0x74>)
 8006b7c:	f003 fd58 	bl	800a630 <HAL_SPI_Init>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8006b86:	f000 f92a 	bl	8006dde <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006b8a:	bf00      	nop
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	20001124 	.word	0x20001124
 8006b94:	40013000 	.word	0x40013000

08006b98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006b9c:	4b22      	ldr	r3, [pc, #136]	; (8006c28 <MX_USART1_UART_Init+0x90>)
 8006b9e:	4a23      	ldr	r2, [pc, #140]	; (8006c2c <MX_USART1_UART_Init+0x94>)
 8006ba0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006ba2:	4b21      	ldr	r3, [pc, #132]	; (8006c28 <MX_USART1_UART_Init+0x90>)
 8006ba4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006ba8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006baa:	4b1f      	ldr	r3, [pc, #124]	; (8006c28 <MX_USART1_UART_Init+0x90>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006bb0:	4b1d      	ldr	r3, [pc, #116]	; (8006c28 <MX_USART1_UART_Init+0x90>)
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006bb6:	4b1c      	ldr	r3, [pc, #112]	; (8006c28 <MX_USART1_UART_Init+0x90>)
 8006bb8:	2200      	movs	r2, #0
 8006bba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006bbc:	4b1a      	ldr	r3, [pc, #104]	; (8006c28 <MX_USART1_UART_Init+0x90>)
 8006bbe:	220c      	movs	r2, #12
 8006bc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006bc2:	4b19      	ldr	r3, [pc, #100]	; (8006c28 <MX_USART1_UART_Init+0x90>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006bc8:	4b17      	ldr	r3, [pc, #92]	; (8006c28 <MX_USART1_UART_Init+0x90>)
 8006bca:	2200      	movs	r2, #0
 8006bcc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006bce:	4b16      	ldr	r3, [pc, #88]	; (8006c28 <MX_USART1_UART_Init+0x90>)
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006bd4:	4b14      	ldr	r3, [pc, #80]	; (8006c28 <MX_USART1_UART_Init+0x90>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006bda:	4b13      	ldr	r3, [pc, #76]	; (8006c28 <MX_USART1_UART_Init+0x90>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006be0:	4811      	ldr	r0, [pc, #68]	; (8006c28 <MX_USART1_UART_Init+0x90>)
 8006be2:	f004 fe65 	bl	800b8b0 <HAL_UART_Init>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006bec:	f000 f8f7 	bl	8006dde <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	480d      	ldr	r0, [pc, #52]	; (8006c28 <MX_USART1_UART_Init+0x90>)
 8006bf4:	f005 ff5d 	bl	800cab2 <HAL_UARTEx_SetTxFifoThreshold>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d001      	beq.n	8006c02 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006bfe:	f000 f8ee 	bl	8006dde <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006c02:	2100      	movs	r1, #0
 8006c04:	4808      	ldr	r0, [pc, #32]	; (8006c28 <MX_USART1_UART_Init+0x90>)
 8006c06:	f005 ff92 	bl	800cb2e <HAL_UARTEx_SetRxFifoThreshold>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006c10:	f000 f8e5 	bl	8006dde <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006c14:	4804      	ldr	r0, [pc, #16]	; (8006c28 <MX_USART1_UART_Init+0x90>)
 8006c16:	f005 ff13 	bl	800ca40 <HAL_UARTEx_DisableFifoMode>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006c20:	f000 f8dd 	bl	8006dde <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006c24:	bf00      	nop
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	20001248 	.word	0x20001248
 8006c2c:	40013800 	.word	0x40013800

08006c30 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8006c34:	4b10      	ldr	r3, [pc, #64]	; (8006c78 <MX_USB_PCD_Init+0x48>)
 8006c36:	4a11      	ldr	r2, [pc, #68]	; (8006c7c <MX_USB_PCD_Init+0x4c>)
 8006c38:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006c3a:	4b0f      	ldr	r3, [pc, #60]	; (8006c78 <MX_USB_PCD_Init+0x48>)
 8006c3c:	2208      	movs	r2, #8
 8006c3e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006c40:	4b0d      	ldr	r3, [pc, #52]	; (8006c78 <MX_USB_PCD_Init+0x48>)
 8006c42:	2202      	movs	r2, #2
 8006c44:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006c46:	4b0c      	ldr	r3, [pc, #48]	; (8006c78 <MX_USB_PCD_Init+0x48>)
 8006c48:	2202      	movs	r2, #2
 8006c4a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8006c4c:	4b0a      	ldr	r3, [pc, #40]	; (8006c78 <MX_USB_PCD_Init+0x48>)
 8006c4e:	2200      	movs	r2, #0
 8006c50:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006c52:	4b09      	ldr	r3, [pc, #36]	; (8006c78 <MX_USB_PCD_Init+0x48>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006c58:	4b07      	ldr	r3, [pc, #28]	; (8006c78 <MX_USB_PCD_Init+0x48>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006c5e:	4b06      	ldr	r3, [pc, #24]	; (8006c78 <MX_USB_PCD_Init+0x48>)
 8006c60:	2200      	movs	r2, #0
 8006c62:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006c64:	4804      	ldr	r0, [pc, #16]	; (8006c78 <MX_USB_PCD_Init+0x48>)
 8006c66:	f001 fba5 	bl	80083b4 <HAL_PCD_Init>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8006c70:	f000 f8b5 	bl	8006dde <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8006c74:	bf00      	nop
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	2000139c 	.word	0x2000139c
 8006c7c:	40006800 	.word	0x40006800

08006c80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006c84:	2004      	movs	r0, #4
 8006c86:	f7ff fde6 	bl	8006856 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006c8a:	2001      	movs	r0, #1
 8006c8c:	f7ff fde3 	bl	8006856 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8006c90:	2200      	movs	r2, #0
 8006c92:	2105      	movs	r1, #5
 8006c94:	200b      	movs	r0, #11
 8006c96:	f000 fe8f 	bl	80079b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006c9a:	200b      	movs	r0, #11
 8006c9c:	f000 fea6 	bl	80079ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	2105      	movs	r1, #5
 8006ca4:	200c      	movs	r0, #12
 8006ca6:	f000 fe87 	bl	80079b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8006caa:	200c      	movs	r0, #12
 8006cac:	f000 fe9e 	bl	80079ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	2105      	movs	r1, #5
 8006cb4:	200d      	movs	r0, #13
 8006cb6:	f000 fe7f 	bl	80079b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8006cba:	200d      	movs	r0, #13
 8006cbc:	f000 fe96 	bl	80079ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	2105      	movs	r1, #5
 8006cc4:	200e      	movs	r0, #14
 8006cc6:	f000 fe77 	bl	80079b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8006cca:	200e      	movs	r0, #14
 8006ccc:	f000 fe8e 	bl	80079ec <HAL_NVIC_EnableIRQ>

}
 8006cd0:	bf00      	nop
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cda:	1d3b      	adds	r3, r7, #4
 8006cdc:	2200      	movs	r2, #0
 8006cde:	601a      	str	r2, [r3, #0]
 8006ce0:	605a      	str	r2, [r3, #4]
 8006ce2:	609a      	str	r2, [r3, #8]
 8006ce4:	60da      	str	r2, [r3, #12]
 8006ce6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ce8:	2004      	movs	r0, #4
 8006cea:	f7ff fdcd 	bl	8006888 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cee:	2001      	movs	r0, #1
 8006cf0:	f7ff fdca 	bl	8006888 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cf4:	2002      	movs	r0, #2
 8006cf6:	f7ff fdc7 	bl	8006888 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006cfa:	2008      	movs	r0, #8
 8006cfc:	f7ff fdc4 	bl	8006888 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8006d00:	2200      	movs	r2, #0
 8006d02:	2130      	movs	r1, #48	; 0x30
 8006d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d08:	f001 fa92 	bl	8008230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	2123      	movs	r1, #35	; 0x23
 8006d10:	4824      	ldr	r0, [pc, #144]	; (8006da4 <MX_GPIO_Init+0xd0>)
 8006d12:	f001 fa8d 	bl	8008230 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006d16:	2330      	movs	r3, #48	; 0x30
 8006d18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d22:	2300      	movs	r3, #0
 8006d24:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d26:	1d3b      	adds	r3, r7, #4
 8006d28:	4619      	mov	r1, r3
 8006d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d2e:	f001 f90f 	bl	8007f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d38:	2302      	movs	r3, #2
 8006d3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d40:	2300      	movs	r3, #0
 8006d42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006d44:	2300      	movs	r3, #0
 8006d46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d48:	1d3b      	adds	r3, r7, #4
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d50:	f001 f8fe 	bl	8007f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8006d54:	2310      	movs	r3, #16
 8006d56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006d60:	1d3b      	adds	r3, r7, #4
 8006d62:	4619      	mov	r1, r3
 8006d64:	4810      	ldr	r0, [pc, #64]	; (8006da8 <MX_GPIO_Init+0xd4>)
 8006d66:	f001 f8f3 	bl	8007f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8006d6a:	2323      	movs	r3, #35	; 0x23
 8006d6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d72:	2300      	movs	r3, #0
 8006d74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d76:	2300      	movs	r3, #0
 8006d78:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d7a:	1d3b      	adds	r3, r7, #4
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	4809      	ldr	r0, [pc, #36]	; (8006da4 <MX_GPIO_Init+0xd0>)
 8006d80:	f001 f8e6 	bl	8007f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8006d84:	2303      	movs	r3, #3
 8006d86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d90:	1d3b      	adds	r3, r7, #4
 8006d92:	4619      	mov	r1, r3
 8006d94:	4805      	ldr	r0, [pc, #20]	; (8006dac <MX_GPIO_Init+0xd8>)
 8006d96:	f001 f8db 	bl	8007f50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006d9a:	bf00      	nop
 8006d9c:	3718      	adds	r7, #24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	48000400 	.word	0x48000400
 8006da8:	48000800 	.word	0x48000800
 8006dac:	48000c00 	.word	0x48000c00

08006db0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8006db8:	2064      	movs	r0, #100	; 0x64
 8006dba:	f008 fb0c 	bl	800f3d6 <osDelay>
 8006dbe:	e7fb      	b.n	8006db8 <StartDefaultTask+0x8>

08006dc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dd0:	d101      	bne.n	8006dd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006dd2:	f000 fcad 	bl	8007730 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006dd6:	bf00      	nop
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006dde:	b480      	push	{r7}
 8006de0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006de2:	b672      	cpsid	i
}
 8006de4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006de6:	e7fe      	b.n	8006de6 <Error_Handler+0x8>

08006de8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8006de8:	b480      	push	{r7}
 8006dea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8006dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006e00:	bf00      	nop
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <LL_AHB2_GRP1_EnableClock>:
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b085      	sub	sp, #20
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
}
 8006e30:	bf00      	nop
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006e60:	68fb      	ldr	r3, [r7, #12]
}
 8006e62:	bf00      	nop
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b085      	sub	sp, #20
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006e7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4013      	ands	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006e92:	68fb      	ldr	r3, [r7, #12]
}
 8006e94:	bf00      	nop
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8006ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006eae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ebc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
}
 8006ec6:	bf00      	nop
 8006ec8:	3714      	adds	r7, #20
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8006ed6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006eda:	f7ff ffaf 	bl	8006e3c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006ede:	2200      	movs	r2, #0
 8006ee0:	210f      	movs	r1, #15
 8006ee2:	f06f 0001 	mvn.w	r0, #1
 8006ee6:	f000 fd67 	bl	80079b8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 8006eea:	2200      	movs	r2, #0
 8006eec:	2105      	movs	r1, #5
 8006eee:	202e      	movs	r0, #46	; 0x2e
 8006ef0:	f000 fd62 	bl	80079b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8006ef4:	202e      	movs	r0, #46	; 0x2e
 8006ef6:	f000 fd79 	bl	80079ec <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006efa:	bf00      	nop
 8006efc:	bd80      	pop	{r7, pc}
	...

08006f00 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a05      	ldr	r2, [pc, #20]	; (8006f24 <HAL_IPCC_MspInit+0x24>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d103      	bne.n	8006f1a <HAL_IPCC_MspInit+0x1a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8006f12:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006f16:	f7ff ff91 	bl	8006e3c <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8006f1a:	bf00      	nop
 8006f1c:	3708      	adds	r7, #8
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	58000c00 	.word	0x58000c00

08006f28 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b096      	sub	sp, #88	; 0x58
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006f30:	f107 0308 	add.w	r3, r7, #8
 8006f34:	2250      	movs	r2, #80	; 0x50
 8006f36:	2100      	movs	r1, #0
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f00d fb31 	bl	80145a0 <memset>
  if(hrtc->Instance==RTC)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a13      	ldr	r2, [pc, #76]	; (8006f90 <HAL_RTC_MspInit+0x68>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d11f      	bne.n	8006f88 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8006f48:	f001 fb2c 	bl	80085a4 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006f4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f50:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006f52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f56:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006f58:	f107 0308 	add.w	r3, r7, #8
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f002 ff1d 	bl	8009d9c <HAL_RCCEx_PeriphCLKConfig>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8006f68:	f7ff ff39 	bl	8006dde <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006f6c:	f7ff ff3c 	bl	8006de8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8006f70:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006f74:	f7ff ff7b 	bl	8006e6e <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 8006f78:	2200      	movs	r2, #0
 8006f7a:	2105      	movs	r1, #5
 8006f7c:	2003      	movs	r0, #3
 8006f7e:	f000 fd1b 	bl	80079b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8006f82:	2003      	movs	r0, #3
 8006f84:	f000 fd32 	bl	80079ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006f88:	bf00      	nop
 8006f8a:	3758      	adds	r7, #88	; 0x58
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	40002800 	.word	0x40002800

08006f94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b088      	sub	sp, #32
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f9c:	f107 030c 	add.w	r3, r7, #12
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	605a      	str	r2, [r3, #4]
 8006fa6:	609a      	str	r2, [r3, #8]
 8006fa8:	60da      	str	r2, [r3, #12]
 8006faa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a3c      	ldr	r2, [pc, #240]	; (80070a4 <HAL_SPI_MspInit+0x110>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d171      	bne.n	800709a <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006fb6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006fba:	f7ff ff71 	bl	8006ea0 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fbe:	2001      	movs	r0, #1
 8006fc0:	f7ff ff23 	bl	8006e0a <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8006fc4:	23c2      	movs	r3, #194	; 0xc2
 8006fc6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fc8:	2302      	movs	r3, #2
 8006fca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006fd4:	2305      	movs	r3, #5
 8006fd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fd8:	f107 030c 	add.w	r3, r7, #12
 8006fdc:	4619      	mov	r1, r3
 8006fde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006fe2:	f000 ffb5 	bl	8007f50 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8006fe6:	4b30      	ldr	r3, [pc, #192]	; (80070a8 <HAL_SPI_MspInit+0x114>)
 8006fe8:	4a30      	ldr	r2, [pc, #192]	; (80070ac <HAL_SPI_MspInit+0x118>)
 8006fea:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8006fec:	4b2e      	ldr	r3, [pc, #184]	; (80070a8 <HAL_SPI_MspInit+0x114>)
 8006fee:	2206      	movs	r2, #6
 8006ff0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ff2:	4b2d      	ldr	r3, [pc, #180]	; (80070a8 <HAL_SPI_MspInit+0x114>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ff8:	4b2b      	ldr	r3, [pc, #172]	; (80070a8 <HAL_SPI_MspInit+0x114>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006ffe:	4b2a      	ldr	r3, [pc, #168]	; (80070a8 <HAL_SPI_MspInit+0x114>)
 8007000:	2280      	movs	r2, #128	; 0x80
 8007002:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007004:	4b28      	ldr	r3, [pc, #160]	; (80070a8 <HAL_SPI_MspInit+0x114>)
 8007006:	2200      	movs	r2, #0
 8007008:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800700a:	4b27      	ldr	r3, [pc, #156]	; (80070a8 <HAL_SPI_MspInit+0x114>)
 800700c:	2200      	movs	r2, #0
 800700e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8007010:	4b25      	ldr	r3, [pc, #148]	; (80070a8 <HAL_SPI_MspInit+0x114>)
 8007012:	2200      	movs	r2, #0
 8007014:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007016:	4b24      	ldr	r3, [pc, #144]	; (80070a8 <HAL_SPI_MspInit+0x114>)
 8007018:	2200      	movs	r2, #0
 800701a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800701c:	4822      	ldr	r0, [pc, #136]	; (80070a8 <HAL_SPI_MspInit+0x114>)
 800701e:	f000 fd1d 	bl	8007a5c <HAL_DMA_Init>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d001      	beq.n	800702c <HAL_SPI_MspInit+0x98>
    {
      Error_Handler();
 8007028:	f7ff fed9 	bl	8006dde <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a1e      	ldr	r2, [pc, #120]	; (80070a8 <HAL_SPI_MspInit+0x114>)
 8007030:	659a      	str	r2, [r3, #88]	; 0x58
 8007032:	4a1d      	ldr	r2, [pc, #116]	; (80070a8 <HAL_SPI_MspInit+0x114>)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel4;
 8007038:	4b1d      	ldr	r3, [pc, #116]	; (80070b0 <HAL_SPI_MspInit+0x11c>)
 800703a:	4a1e      	ldr	r2, [pc, #120]	; (80070b4 <HAL_SPI_MspInit+0x120>)
 800703c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800703e:	4b1c      	ldr	r3, [pc, #112]	; (80070b0 <HAL_SPI_MspInit+0x11c>)
 8007040:	2207      	movs	r2, #7
 8007042:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007044:	4b1a      	ldr	r3, [pc, #104]	; (80070b0 <HAL_SPI_MspInit+0x11c>)
 8007046:	2210      	movs	r2, #16
 8007048:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800704a:	4b19      	ldr	r3, [pc, #100]	; (80070b0 <HAL_SPI_MspInit+0x11c>)
 800704c:	2200      	movs	r2, #0
 800704e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007050:	4b17      	ldr	r3, [pc, #92]	; (80070b0 <HAL_SPI_MspInit+0x11c>)
 8007052:	2280      	movs	r2, #128	; 0x80
 8007054:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007056:	4b16      	ldr	r3, [pc, #88]	; (80070b0 <HAL_SPI_MspInit+0x11c>)
 8007058:	2200      	movs	r2, #0
 800705a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800705c:	4b14      	ldr	r3, [pc, #80]	; (80070b0 <HAL_SPI_MspInit+0x11c>)
 800705e:	2200      	movs	r2, #0
 8007060:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8007062:	4b13      	ldr	r3, [pc, #76]	; (80070b0 <HAL_SPI_MspInit+0x11c>)
 8007064:	2200      	movs	r2, #0
 8007066:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007068:	4b11      	ldr	r3, [pc, #68]	; (80070b0 <HAL_SPI_MspInit+0x11c>)
 800706a:	2200      	movs	r2, #0
 800706c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800706e:	4810      	ldr	r0, [pc, #64]	; (80070b0 <HAL_SPI_MspInit+0x11c>)
 8007070:	f000 fcf4 	bl	8007a5c <HAL_DMA_Init>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <HAL_SPI_MspInit+0xea>
    {
      Error_Handler();
 800707a:	f7ff feb0 	bl	8006dde <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a0b      	ldr	r2, [pc, #44]	; (80070b0 <HAL_SPI_MspInit+0x11c>)
 8007082:	655a      	str	r2, [r3, #84]	; 0x54
 8007084:	4a0a      	ldr	r2, [pc, #40]	; (80070b0 <HAL_SPI_MspInit+0x11c>)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800708a:	2200      	movs	r2, #0
 800708c:	2105      	movs	r1, #5
 800708e:	2022      	movs	r0, #34	; 0x22
 8007090:	f000 fc92 	bl	80079b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8007094:	2022      	movs	r0, #34	; 0x22
 8007096:	f000 fca9 	bl	80079ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800709a:	bf00      	nop
 800709c:	3720      	adds	r7, #32
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	40013000 	.word	0x40013000
 80070a8:	20001188 	.word	0x20001188
 80070ac:	40020030 	.word	0x40020030
 80070b0:	200011e8 	.word	0x200011e8
 80070b4:	40020044 	.word	0x40020044

080070b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b09c      	sub	sp, #112	; 0x70
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80070c4:	2200      	movs	r2, #0
 80070c6:	601a      	str	r2, [r3, #0]
 80070c8:	605a      	str	r2, [r3, #4]
 80070ca:	609a      	str	r2, [r3, #8]
 80070cc:	60da      	str	r2, [r3, #12]
 80070ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80070d0:	f107 030c 	add.w	r3, r7, #12
 80070d4:	2250      	movs	r2, #80	; 0x50
 80070d6:	2100      	movs	r1, #0
 80070d8:	4618      	mov	r0, r3
 80070da:	f00d fa61 	bl	80145a0 <memset>
  if(huart->Instance==USART1)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a43      	ldr	r2, [pc, #268]	; (80071f0 <HAL_UART_MspInit+0x138>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d17f      	bne.n	80071e8 <HAL_UART_MspInit+0x130>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80070e8:	2301      	movs	r3, #1
 80070ea:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80070ec:	2300      	movs	r3, #0
 80070ee:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80070f0:	f107 030c 	add.w	r3, r7, #12
 80070f4:	4618      	mov	r0, r3
 80070f6:	f002 fe51 	bl	8009d9c <HAL_RCCEx_PeriphCLKConfig>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d001      	beq.n	8007104 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8007100:	f7ff fe6d 	bl	8006dde <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007104:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007108:	f7ff feca 	bl	8006ea0 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800710c:	2002      	movs	r0, #2
 800710e:	f7ff fe7c 	bl	8006e0a <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8007112:	23c0      	movs	r3, #192	; 0xc0
 8007114:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007116:	2302      	movs	r3, #2
 8007118:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800711a:	2301      	movs	r3, #1
 800711c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800711e:	2300      	movs	r3, #0
 8007120:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007122:	2307      	movs	r3, #7
 8007124:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007126:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800712a:	4619      	mov	r1, r3
 800712c:	4831      	ldr	r0, [pc, #196]	; (80071f4 <HAL_UART_MspInit+0x13c>)
 800712e:	f000 ff0f 	bl	8007f50 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8007132:	4b31      	ldr	r3, [pc, #196]	; (80071f8 <HAL_UART_MspInit+0x140>)
 8007134:	4a31      	ldr	r2, [pc, #196]	; (80071fc <HAL_UART_MspInit+0x144>)
 8007136:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8007138:	4b2f      	ldr	r3, [pc, #188]	; (80071f8 <HAL_UART_MspInit+0x140>)
 800713a:	220e      	movs	r2, #14
 800713c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800713e:	4b2e      	ldr	r3, [pc, #184]	; (80071f8 <HAL_UART_MspInit+0x140>)
 8007140:	2200      	movs	r2, #0
 8007142:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007144:	4b2c      	ldr	r3, [pc, #176]	; (80071f8 <HAL_UART_MspInit+0x140>)
 8007146:	2200      	movs	r2, #0
 8007148:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800714a:	4b2b      	ldr	r3, [pc, #172]	; (80071f8 <HAL_UART_MspInit+0x140>)
 800714c:	2280      	movs	r2, #128	; 0x80
 800714e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007150:	4b29      	ldr	r3, [pc, #164]	; (80071f8 <HAL_UART_MspInit+0x140>)
 8007152:	2200      	movs	r2, #0
 8007154:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007156:	4b28      	ldr	r3, [pc, #160]	; (80071f8 <HAL_UART_MspInit+0x140>)
 8007158:	2200      	movs	r2, #0
 800715a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800715c:	4b26      	ldr	r3, [pc, #152]	; (80071f8 <HAL_UART_MspInit+0x140>)
 800715e:	2200      	movs	r2, #0
 8007160:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007162:	4b25      	ldr	r3, [pc, #148]	; (80071f8 <HAL_UART_MspInit+0x140>)
 8007164:	2200      	movs	r2, #0
 8007166:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007168:	4823      	ldr	r0, [pc, #140]	; (80071f8 <HAL_UART_MspInit+0x140>)
 800716a:	f000 fc77 	bl	8007a5c <HAL_DMA_Init>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d001      	beq.n	8007178 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8007174:	f7ff fe33 	bl	8006dde <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a1f      	ldr	r2, [pc, #124]	; (80071f8 <HAL_UART_MspInit+0x140>)
 800717c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8007180:	4a1d      	ldr	r2, [pc, #116]	; (80071f8 <HAL_UART_MspInit+0x140>)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8007186:	4b1e      	ldr	r3, [pc, #120]	; (8007200 <HAL_UART_MspInit+0x148>)
 8007188:	4a1e      	ldr	r2, [pc, #120]	; (8007204 <HAL_UART_MspInit+0x14c>)
 800718a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800718c:	4b1c      	ldr	r3, [pc, #112]	; (8007200 <HAL_UART_MspInit+0x148>)
 800718e:	220f      	movs	r2, #15
 8007190:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007192:	4b1b      	ldr	r3, [pc, #108]	; (8007200 <HAL_UART_MspInit+0x148>)
 8007194:	2210      	movs	r2, #16
 8007196:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007198:	4b19      	ldr	r3, [pc, #100]	; (8007200 <HAL_UART_MspInit+0x148>)
 800719a:	2200      	movs	r2, #0
 800719c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800719e:	4b18      	ldr	r3, [pc, #96]	; (8007200 <HAL_UART_MspInit+0x148>)
 80071a0:	2280      	movs	r2, #128	; 0x80
 80071a2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80071a4:	4b16      	ldr	r3, [pc, #88]	; (8007200 <HAL_UART_MspInit+0x148>)
 80071a6:	2200      	movs	r2, #0
 80071a8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80071aa:	4b15      	ldr	r3, [pc, #84]	; (8007200 <HAL_UART_MspInit+0x148>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80071b0:	4b13      	ldr	r3, [pc, #76]	; (8007200 <HAL_UART_MspInit+0x148>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80071b6:	4b12      	ldr	r3, [pc, #72]	; (8007200 <HAL_UART_MspInit+0x148>)
 80071b8:	2200      	movs	r2, #0
 80071ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80071bc:	4810      	ldr	r0, [pc, #64]	; (8007200 <HAL_UART_MspInit+0x148>)
 80071be:	f000 fc4d 	bl	8007a5c <HAL_DMA_Init>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d001      	beq.n	80071cc <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 80071c8:	f7ff fe09 	bl	8006dde <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a0c      	ldr	r2, [pc, #48]	; (8007200 <HAL_UART_MspInit+0x148>)
 80071d0:	67da      	str	r2, [r3, #124]	; 0x7c
 80071d2:	4a0b      	ldr	r2, [pc, #44]	; (8007200 <HAL_UART_MspInit+0x148>)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80071d8:	2200      	movs	r2, #0
 80071da:	2105      	movs	r1, #5
 80071dc:	2024      	movs	r0, #36	; 0x24
 80071de:	f000 fbeb 	bl	80079b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80071e2:	2024      	movs	r0, #36	; 0x24
 80071e4:	f000 fc02 	bl	80079ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80071e8:	bf00      	nop
 80071ea:	3770      	adds	r7, #112	; 0x70
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	40013800 	.word	0x40013800
 80071f4:	48000400 	.word	0x48000400
 80071f8:	200012dc 	.word	0x200012dc
 80071fc:	40020008 	.word	0x40020008
 8007200:	2000133c 	.word	0x2000133c
 8007204:	4002001c 	.word	0x4002001c

08007208 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b09c      	sub	sp, #112	; 0x70
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007210:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007214:	2200      	movs	r2, #0
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	605a      	str	r2, [r3, #4]
 800721a:	609a      	str	r2, [r3, #8]
 800721c:	60da      	str	r2, [r3, #12]
 800721e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007220:	f107 030c 	add.w	r3, r7, #12
 8007224:	2250      	movs	r2, #80	; 0x50
 8007226:	2100      	movs	r1, #0
 8007228:	4618      	mov	r0, r3
 800722a:	f00d f9b9 	bl	80145a0 <memset>
  if(hpcd->Instance==USB)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a1f      	ldr	r2, [pc, #124]	; (80072b0 <HAL_PCD_MspInit+0xa8>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d136      	bne.n	80072a6 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800723c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800723e:	2318      	movs	r3, #24
 8007240:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8007242:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007246:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8007248:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800724c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800724e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007252:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8007254:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007258:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800725a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800725e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007260:	f107 030c 	add.w	r3, r7, #12
 8007264:	4618      	mov	r0, r3
 8007266:	f002 fd99 	bl	8009d9c <HAL_RCCEx_PeriphCLKConfig>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d001      	beq.n	8007274 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8007270:	f7ff fdb5 	bl	8006dde <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007274:	2001      	movs	r0, #1
 8007276:	f7ff fdc8 	bl	8006e0a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800727a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800727e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007280:	2302      	movs	r3, #2
 8007282:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007284:	2300      	movs	r3, #0
 8007286:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007288:	2300      	movs	r3, #0
 800728a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800728c:	230a      	movs	r3, #10
 800728e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007290:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007294:	4619      	mov	r1, r3
 8007296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800729a:	f000 fe59 	bl	8007f50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800729e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80072a2:	f7ff fde4 	bl	8006e6e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80072a6:	bf00      	nop
 80072a8:	3770      	adds	r7, #112	; 0x70
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	40006800 	.word	0x40006800

080072b4 <LL_APB1_GRP1_EnableClock>:
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80072bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80072c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80072cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4013      	ands	r3, r2
 80072d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80072d8:	68fb      	ldr	r3, [r7, #12]
}
 80072da:	bf00      	nop
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
	...

080072e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b08c      	sub	sp, #48	; 0x30
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80072f0:	2300      	movs	r3, #0
 80072f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80072f4:	2300      	movs	r3, #0
 80072f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80072f8:	2200      	movs	r2, #0
 80072fa:	6879      	ldr	r1, [r7, #4]
 80072fc:	201c      	movs	r0, #28
 80072fe:	f000 fb5b 	bl	80079b8 <HAL_NVIC_SetPriority>
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007302:	201c      	movs	r0, #28
 8007304:	f000 fb72 	bl	80079ec <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8007308:	2001      	movs	r0, #1
 800730a:	f7ff ffd3 	bl	80072b4 <LL_APB1_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800730e:	f107 0208 	add.w	r2, r7, #8
 8007312:	f107 030c 	add.w	r3, r7, #12
 8007316:	4611      	mov	r1, r2
 8007318:	4618      	mov	r0, r3
 800731a:	f002 faad 	bl	8009878 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800731e:	f002 fa7f 	bl	8009820 <HAL_RCC_GetPCLK1Freq>
 8007322:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007326:	4a13      	ldr	r2, [pc, #76]	; (8007374 <HAL_InitTick+0x8c>)
 8007328:	fba2 2303 	umull	r2, r3, r2, r3
 800732c:	0c9b      	lsrs	r3, r3, #18
 800732e:	3b01      	subs	r3, #1
 8007330:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8007332:	4b11      	ldr	r3, [pc, #68]	; (8007378 <HAL_InitTick+0x90>)
 8007334:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007338:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800733a:	4b0f      	ldr	r3, [pc, #60]	; (8007378 <HAL_InitTick+0x90>)
 800733c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007340:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8007342:	4a0d      	ldr	r2, [pc, #52]	; (8007378 <HAL_InitTick+0x90>)
 8007344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007346:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8007348:	4b0b      	ldr	r3, [pc, #44]	; (8007378 <HAL_InitTick+0x90>)
 800734a:	2200      	movs	r2, #0
 800734c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800734e:	4b0a      	ldr	r3, [pc, #40]	; (8007378 <HAL_InitTick+0x90>)
 8007350:	2200      	movs	r2, #0
 8007352:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8007354:	4808      	ldr	r0, [pc, #32]	; (8007378 <HAL_InitTick+0x90>)
 8007356:	f004 f81d 	bl	800b394 <HAL_TIM_Base_Init>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d104      	bne.n	800736a <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8007360:	4805      	ldr	r0, [pc, #20]	; (8007378 <HAL_InitTick+0x90>)
 8007362:	f004 f879 	bl	800b458 <HAL_TIM_Base_Start_IT>
 8007366:	4603      	mov	r3, r0
 8007368:	e000      	b.n	800736c <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
}
 800736c:	4618      	mov	r0, r3
 800736e:	3730      	adds	r7, #48	; 0x30
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	431bde83 	.word	0x431bde83
 8007378:	20001680 	.word	0x20001680

0800737c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800737c:	b480      	push	{r7}
 800737e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007380:	e7fe      	b.n	8007380 <NMI_Handler+0x4>

08007382 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007382:	b480      	push	{r7}
 8007384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007386:	e7fe      	b.n	8007386 <HardFault_Handler+0x4>

08007388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007388:	b480      	push	{r7}
 800738a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800738c:	e7fe      	b.n	800738c <MemManage_Handler+0x4>

0800738e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800738e:	b480      	push	{r7}
 8007390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007392:	e7fe      	b.n	8007392 <BusFault_Handler+0x4>

08007394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007394:	b480      	push	{r7}
 8007396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007398:	e7fe      	b.n	8007398 <UsageFault_Handler+0x4>

0800739a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800739a:	b480      	push	{r7}
 800739c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800739e:	bf00      	nop
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80073ac:	f7fe ff0a 	bl	80061c4 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80073b0:	bf00      	nop
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80073b8:	4802      	ldr	r0, [pc, #8]	; (80073c4 <DMA1_Channel1_IRQHandler+0x10>)
 80073ba:	f000 fcb5 	bl	8007d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80073be:	bf00      	nop
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	200012dc 	.word	0x200012dc

080073c8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80073cc:	4802      	ldr	r0, [pc, #8]	; (80073d8 <DMA1_Channel2_IRQHandler+0x10>)
 80073ce:	f000 fcab 	bl	8007d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80073d2:	bf00      	nop
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	2000133c 	.word	0x2000133c

080073dc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80073e0:	4802      	ldr	r0, [pc, #8]	; (80073ec <DMA1_Channel3_IRQHandler+0x10>)
 80073e2:	f000 fca1 	bl	8007d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80073e6:	bf00      	nop
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	20001188 	.word	0x20001188

080073f0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80073f4:	4802      	ldr	r0, [pc, #8]	; (8007400 <DMA1_Channel4_IRQHandler+0x10>)
 80073f6:	f000 fc97 	bl	8007d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80073fa:	bf00      	nop
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	200011e8 	.word	0x200011e8

08007404 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007408:	4802      	ldr	r0, [pc, #8]	; (8007414 <TIM2_IRQHandler+0x10>)
 800740a:	f004 f873 	bl	800b4f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800740e:	bf00      	nop
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	20001680 	.word	0x20001680

08007418 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800741c:	4802      	ldr	r0, [pc, #8]	; (8007428 <SPI1_IRQHandler+0x10>)
 800741e:	f003 fd41 	bl	800aea4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8007422:	bf00      	nop
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	20001124 	.word	0x20001124

0800742c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007430:	4802      	ldr	r0, [pc, #8]	; (800743c <USART1_IRQHandler+0x10>)
 8007432:	f004 fb1b 	bl	800ba6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007436:	bf00      	nop
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	20001248 	.word	0x20001248

08007440 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8007444:	f000 ff0c 	bl	8008260 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8007448:	bf00      	nop
 800744a:	bd80      	pop	{r7, pc}

0800744c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800744c:	b480      	push	{r7}
 800744e:	af00      	add	r7, sp, #0
  return 1;
 8007450:	2301      	movs	r3, #1
}
 8007452:	4618      	mov	r0, r3
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <_kill>:

int _kill(int pid, int sig)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007466:	f00d f943 	bl	80146f0 <__errno>
 800746a:	4603      	mov	r3, r0
 800746c:	2216      	movs	r2, #22
 800746e:	601a      	str	r2, [r3, #0]
  return -1;
 8007470:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007474:	4618      	mov	r0, r3
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <_exit>:

void _exit (int status)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007484:	f04f 31ff 	mov.w	r1, #4294967295
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f7ff ffe7 	bl	800745c <_kill>
  while (1) {}    /* Make sure we hang here */
 800748e:	e7fe      	b.n	800748e <_exit+0x12>

08007490 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800749c:	2300      	movs	r3, #0
 800749e:	617b      	str	r3, [r7, #20]
 80074a0:	e00a      	b.n	80074b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80074a2:	f3af 8000 	nop.w
 80074a6:	4601      	mov	r1, r0
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	1c5a      	adds	r2, r3, #1
 80074ac:	60ba      	str	r2, [r7, #8]
 80074ae:	b2ca      	uxtb	r2, r1
 80074b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	3301      	adds	r3, #1
 80074b6:	617b      	str	r3, [r7, #20]
 80074b8:	697a      	ldr	r2, [r7, #20]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	429a      	cmp	r2, r3
 80074be:	dbf0      	blt.n	80074a2 <_read+0x12>
  }

  return len;
 80074c0:	687b      	ldr	r3, [r7, #4]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b086      	sub	sp, #24
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	60b9      	str	r1, [r7, #8]
 80074d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80074d6:	2300      	movs	r3, #0
 80074d8:	617b      	str	r3, [r7, #20]
 80074da:	e009      	b.n	80074f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	1c5a      	adds	r2, r3, #1
 80074e0:	60ba      	str	r2, [r7, #8]
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	3301      	adds	r3, #1
 80074ee:	617b      	str	r3, [r7, #20]
 80074f0:	697a      	ldr	r2, [r7, #20]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	dbf1      	blt.n	80074dc <_write+0x12>
  }
  return len;
 80074f8:	687b      	ldr	r3, [r7, #4]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3718      	adds	r7, #24
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <_close>:

int _close(int file)
{
 8007502:	b480      	push	{r7}
 8007504:	b083      	sub	sp, #12
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800750a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800750e:	4618      	mov	r0, r3
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800751a:	b480      	push	{r7}
 800751c:	b083      	sub	sp, #12
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800752a:	605a      	str	r2, [r3, #4]
  return 0;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <_isatty>:

int _isatty(int file)
{
 800753a:	b480      	push	{r7}
 800753c:	b083      	sub	sp, #12
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007542:	2301      	movs	r3, #1
}
 8007544:	4618      	mov	r0, r3
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
	...

0800756c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007574:	4a14      	ldr	r2, [pc, #80]	; (80075c8 <_sbrk+0x5c>)
 8007576:	4b15      	ldr	r3, [pc, #84]	; (80075cc <_sbrk+0x60>)
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007580:	4b13      	ldr	r3, [pc, #76]	; (80075d0 <_sbrk+0x64>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d102      	bne.n	800758e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007588:	4b11      	ldr	r3, [pc, #68]	; (80075d0 <_sbrk+0x64>)
 800758a:	4a12      	ldr	r2, [pc, #72]	; (80075d4 <_sbrk+0x68>)
 800758c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800758e:	4b10      	ldr	r3, [pc, #64]	; (80075d0 <_sbrk+0x64>)
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4413      	add	r3, r2
 8007596:	693a      	ldr	r2, [r7, #16]
 8007598:	429a      	cmp	r2, r3
 800759a:	d207      	bcs.n	80075ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800759c:	f00d f8a8 	bl	80146f0 <__errno>
 80075a0:	4603      	mov	r3, r0
 80075a2:	220c      	movs	r2, #12
 80075a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80075a6:	f04f 33ff 	mov.w	r3, #4294967295
 80075aa:	e009      	b.n	80075c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80075ac:	4b08      	ldr	r3, [pc, #32]	; (80075d0 <_sbrk+0x64>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80075b2:	4b07      	ldr	r3, [pc, #28]	; (80075d0 <_sbrk+0x64>)
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4413      	add	r3, r2
 80075ba:	4a05      	ldr	r2, [pc, #20]	; (80075d0 <_sbrk+0x64>)
 80075bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80075be:	68fb      	ldr	r3, [r7, #12]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3718      	adds	r7, #24
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	20030000 	.word	0x20030000
 80075cc:	00000400 	.word	0x00000400
 80075d0:	200016cc 	.word	0x200016cc
 80075d4:	20003330 	.word	0x20003330

080075d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80075d8:	b480      	push	{r7}
 80075da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80075dc:	4b24      	ldr	r3, [pc, #144]	; (8007670 <SystemInit+0x98>)
 80075de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075e2:	4a23      	ldr	r2, [pc, #140]	; (8007670 <SystemInit+0x98>)
 80075e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80075ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075f6:	f043 0301 	orr.w	r3, r3, #1
 80075fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80075fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007600:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8007604:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8007606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007610:	4b18      	ldr	r3, [pc, #96]	; (8007674 <SystemInit+0x9c>)
 8007612:	4013      	ands	r3, r2
 8007614:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8007616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800761a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800761e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007622:	f023 0305 	bic.w	r3, r3, #5
 8007626:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800762a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800762e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007632:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007636:	f023 0301 	bic.w	r3, r3, #1
 800763a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800763e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007642:	4a0d      	ldr	r2, [pc, #52]	; (8007678 <SystemInit+0xa0>)
 8007644:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8007646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800764a:	4a0b      	ldr	r2, [pc, #44]	; (8007678 <SystemInit+0xa0>)
 800764c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800764e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007658:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800765c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800765e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007662:	2200      	movs	r2, #0
 8007664:	619a      	str	r2, [r3, #24]
}
 8007666:	bf00      	nop
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	e000ed00 	.word	0xe000ed00
 8007674:	faf6fefb 	.word	0xfaf6fefb
 8007678:	22041000 	.word	0x22041000

0800767c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800767c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800767e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007680:	3304      	adds	r3, #4

08007682 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007682:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007684:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8007686:	d3f9      	bcc.n	800767c <CopyDataInit>
  bx lr
 8007688:	4770      	bx	lr

0800768a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800768a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800768c:	3004      	adds	r0, #4

0800768e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800768e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8007690:	d3fb      	bcc.n	800768a <FillZerobss>
  bx lr
 8007692:	4770      	bx	lr

08007694 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007694:	480c      	ldr	r0, [pc, #48]	; (80076c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007696:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8007698:	f7ff ff9e 	bl	80075d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800769c:	480b      	ldr	r0, [pc, #44]	; (80076cc <LoopForever+0x6>)
 800769e:	490c      	ldr	r1, [pc, #48]	; (80076d0 <LoopForever+0xa>)
 80076a0:	4a0c      	ldr	r2, [pc, #48]	; (80076d4 <LoopForever+0xe>)
 80076a2:	2300      	movs	r3, #0
 80076a4:	f7ff ffed 	bl	8007682 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80076a8:	480b      	ldr	r0, [pc, #44]	; (80076d8 <LoopForever+0x12>)
 80076aa:	490c      	ldr	r1, [pc, #48]	; (80076dc <LoopForever+0x16>)
 80076ac:	4a0c      	ldr	r2, [pc, #48]	; (80076e0 <LoopForever+0x1a>)
 80076ae:	2300      	movs	r3, #0
 80076b0:	f7ff ffe7 	bl	8007682 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80076b4:	480b      	ldr	r0, [pc, #44]	; (80076e4 <LoopForever+0x1e>)
 80076b6:	490c      	ldr	r1, [pc, #48]	; (80076e8 <LoopForever+0x22>)
 80076b8:	2300      	movs	r3, #0
 80076ba:	f7ff ffe8 	bl	800768e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80076be:	f00d f81d 	bl	80146fc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80076c2:	f7ff f8fb 	bl	80068bc <main>

080076c6 <LoopForever>:

LoopForever:
  b LoopForever
 80076c6:	e7fe      	b.n	80076c6 <LoopForever>
  ldr   r0, =_estack
 80076c8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80076cc:	20000008 	.word	0x20000008
 80076d0:	20000350 	.word	0x20000350
 80076d4:	08018940 	.word	0x08018940
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80076d8:	200301e4 	.word	0x200301e4
 80076dc:	20030a67 	.word	0x20030a67
 80076e0:	08018cda 	.word	0x08018cda
  INIT_BSS _sbss, _ebss
 80076e4:	200003a8 	.word	0x200003a8
 80076e8:	2000332c 	.word	0x2000332c

080076ec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80076ec:	e7fe      	b.n	80076ec <ADC1_IRQHandler>
	...

080076f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80076fa:	4b0c      	ldr	r3, [pc, #48]	; (800772c <HAL_Init+0x3c>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a0b      	ldr	r2, [pc, #44]	; (800772c <HAL_Init+0x3c>)
 8007700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007704:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007706:	2003      	movs	r0, #3
 8007708:	f000 f94b 	bl	80079a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800770c:	200f      	movs	r0, #15
 800770e:	f7ff fdeb 	bl	80072e8 <HAL_InitTick>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d002      	beq.n	800771e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	71fb      	strb	r3, [r7, #7]
 800771c:	e001      	b.n	8007722 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800771e:	f7ff fbd8 	bl	8006ed2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007722:	79fb      	ldrb	r3, [r7, #7]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	58004000 	.word	0x58004000

08007730 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007730:	b480      	push	{r7}
 8007732:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007734:	4b06      	ldr	r3, [pc, #24]	; (8007750 <HAL_IncTick+0x20>)
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	461a      	mov	r2, r3
 800773a:	4b06      	ldr	r3, [pc, #24]	; (8007754 <HAL_IncTick+0x24>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4413      	add	r3, r2
 8007740:	4a04      	ldr	r2, [pc, #16]	; (8007754 <HAL_IncTick+0x24>)
 8007742:	6013      	str	r3, [r2, #0]
}
 8007744:	bf00      	nop
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	2000015c 	.word	0x2000015c
 8007754:	200016d0 	.word	0x200016d0

08007758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007758:	b480      	push	{r7}
 800775a:	af00      	add	r7, sp, #0
  return uwTick;
 800775c:	4b03      	ldr	r3, [pc, #12]	; (800776c <HAL_GetTick+0x14>)
 800775e:	681b      	ldr	r3, [r3, #0]
}
 8007760:	4618      	mov	r0, r3
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	200016d0 	.word	0x200016d0

08007770 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8007770:	b480      	push	{r7}
 8007772:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8007774:	4b03      	ldr	r3, [pc, #12]	; (8007784 <HAL_GetTickPrio+0x14>)
 8007776:	681b      	ldr	r3, [r3, #0]
}
 8007778:	4618      	mov	r0, r3
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	20000158 	.word	0x20000158

08007788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f003 0307 	and.w	r3, r3, #7
 8007796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007798:	4b0c      	ldr	r3, [pc, #48]	; (80077cc <__NVIC_SetPriorityGrouping+0x44>)
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80077a4:	4013      	ands	r3, r2
 80077a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80077b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80077b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80077ba:	4a04      	ldr	r2, [pc, #16]	; (80077cc <__NVIC_SetPriorityGrouping+0x44>)
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	60d3      	str	r3, [r2, #12]
}
 80077c0:	bf00      	nop
 80077c2:	3714      	adds	r7, #20
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr
 80077cc:	e000ed00 	.word	0xe000ed00

080077d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80077d0:	b480      	push	{r7}
 80077d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80077d4:	4b04      	ldr	r3, [pc, #16]	; (80077e8 <__NVIC_GetPriorityGrouping+0x18>)
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	0a1b      	lsrs	r3, r3, #8
 80077da:	f003 0307 	and.w	r3, r3, #7
}
 80077de:	4618      	mov	r0, r3
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr
 80077e8:	e000ed00 	.word	0xe000ed00

080077ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	4603      	mov	r3, r0
 80077f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	db0b      	blt.n	8007816 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80077fe:	79fb      	ldrb	r3, [r7, #7]
 8007800:	f003 021f 	and.w	r2, r3, #31
 8007804:	4907      	ldr	r1, [pc, #28]	; (8007824 <__NVIC_EnableIRQ+0x38>)
 8007806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800780a:	095b      	lsrs	r3, r3, #5
 800780c:	2001      	movs	r0, #1
 800780e:	fa00 f202 	lsl.w	r2, r0, r2
 8007812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007816:	bf00      	nop
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	e000e100 	.word	0xe000e100

08007828 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	4603      	mov	r3, r0
 8007830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007836:	2b00      	cmp	r3, #0
 8007838:	db12      	blt.n	8007860 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800783a:	79fb      	ldrb	r3, [r7, #7]
 800783c:	f003 021f 	and.w	r2, r3, #31
 8007840:	490a      	ldr	r1, [pc, #40]	; (800786c <__NVIC_DisableIRQ+0x44>)
 8007842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007846:	095b      	lsrs	r3, r3, #5
 8007848:	2001      	movs	r0, #1
 800784a:	fa00 f202 	lsl.w	r2, r0, r2
 800784e:	3320      	adds	r3, #32
 8007850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007854:	f3bf 8f4f 	dsb	sy
}
 8007858:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800785a:	f3bf 8f6f 	isb	sy
}
 800785e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	e000e100 	.word	0xe000e100

08007870 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	4603      	mov	r3, r0
 8007878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800787a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800787e:	2b00      	cmp	r3, #0
 8007880:	db0c      	blt.n	800789c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007882:	79fb      	ldrb	r3, [r7, #7]
 8007884:	f003 021f 	and.w	r2, r3, #31
 8007888:	4907      	ldr	r1, [pc, #28]	; (80078a8 <__NVIC_SetPendingIRQ+0x38>)
 800788a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800788e:	095b      	lsrs	r3, r3, #5
 8007890:	2001      	movs	r0, #1
 8007892:	fa00 f202 	lsl.w	r2, r0, r2
 8007896:	3340      	adds	r3, #64	; 0x40
 8007898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	e000e100 	.word	0xe000e100

080078ac <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	4603      	mov	r3, r0
 80078b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	db0c      	blt.n	80078d8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078be:	79fb      	ldrb	r3, [r7, #7]
 80078c0:	f003 021f 	and.w	r2, r3, #31
 80078c4:	4907      	ldr	r1, [pc, #28]	; (80078e4 <__NVIC_ClearPendingIRQ+0x38>)
 80078c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078ca:	095b      	lsrs	r3, r3, #5
 80078cc:	2001      	movs	r0, #1
 80078ce:	fa00 f202 	lsl.w	r2, r0, r2
 80078d2:	3360      	adds	r3, #96	; 0x60
 80078d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	e000e100 	.word	0xe000e100

080078e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	4603      	mov	r3, r0
 80078f0:	6039      	str	r1, [r7, #0]
 80078f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	db0a      	blt.n	8007912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	b2da      	uxtb	r2, r3
 8007900:	490c      	ldr	r1, [pc, #48]	; (8007934 <__NVIC_SetPriority+0x4c>)
 8007902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007906:	0112      	lsls	r2, r2, #4
 8007908:	b2d2      	uxtb	r2, r2
 800790a:	440b      	add	r3, r1
 800790c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007910:	e00a      	b.n	8007928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	b2da      	uxtb	r2, r3
 8007916:	4908      	ldr	r1, [pc, #32]	; (8007938 <__NVIC_SetPriority+0x50>)
 8007918:	79fb      	ldrb	r3, [r7, #7]
 800791a:	f003 030f 	and.w	r3, r3, #15
 800791e:	3b04      	subs	r3, #4
 8007920:	0112      	lsls	r2, r2, #4
 8007922:	b2d2      	uxtb	r2, r2
 8007924:	440b      	add	r3, r1
 8007926:	761a      	strb	r2, [r3, #24]
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr
 8007934:	e000e100 	.word	0xe000e100
 8007938:	e000ed00 	.word	0xe000ed00

0800793c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800793c:	b480      	push	{r7}
 800793e:	b089      	sub	sp, #36	; 0x24
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f003 0307 	and.w	r3, r3, #7
 800794e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	f1c3 0307 	rsb	r3, r3, #7
 8007956:	2b04      	cmp	r3, #4
 8007958:	bf28      	it	cs
 800795a:	2304      	movcs	r3, #4
 800795c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	3304      	adds	r3, #4
 8007962:	2b06      	cmp	r3, #6
 8007964:	d902      	bls.n	800796c <NVIC_EncodePriority+0x30>
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	3b03      	subs	r3, #3
 800796a:	e000      	b.n	800796e <NVIC_EncodePriority+0x32>
 800796c:	2300      	movs	r3, #0
 800796e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007970:	f04f 32ff 	mov.w	r2, #4294967295
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	fa02 f303 	lsl.w	r3, r2, r3
 800797a:	43da      	mvns	r2, r3
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	401a      	ands	r2, r3
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007984:	f04f 31ff 	mov.w	r1, #4294967295
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	fa01 f303 	lsl.w	r3, r1, r3
 800798e:	43d9      	mvns	r1, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007994:	4313      	orrs	r3, r2
         );
}
 8007996:	4618      	mov	r0, r3
 8007998:	3724      	adds	r7, #36	; 0x24
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr

080079a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b082      	sub	sp, #8
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7ff feec 	bl	8007788 <__NVIC_SetPriorityGrouping>
}
 80079b0:	bf00      	nop
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	4603      	mov	r3, r0
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
 80079c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80079c6:	f7ff ff03 	bl	80077d0 <__NVIC_GetPriorityGrouping>
 80079ca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	68b9      	ldr	r1, [r7, #8]
 80079d0:	6978      	ldr	r0, [r7, #20]
 80079d2:	f7ff ffb3 	bl	800793c <NVIC_EncodePriority>
 80079d6:	4602      	mov	r2, r0
 80079d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079dc:	4611      	mov	r1, r2
 80079de:	4618      	mov	r0, r3
 80079e0:	f7ff ff82 	bl	80078e8 <__NVIC_SetPriority>
}
 80079e4:	bf00      	nop
 80079e6:	3718      	adds	r7, #24
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	4603      	mov	r3, r0
 80079f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80079f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7ff fef6 	bl	80077ec <__NVIC_EnableIRQ>
}
 8007a00:	bf00      	nop
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	4603      	mov	r3, r0
 8007a10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7ff ff06 	bl	8007828 <__NVIC_DisableIRQ>
}
 8007a1c:	bf00      	nop
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8007a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7ff ff1c 	bl	8007870 <__NVIC_SetPendingIRQ>
}
 8007a38:	bf00      	nop
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	4603      	mov	r3, r0
 8007a48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7ff ff2c 	bl	80078ac <__NVIC_ClearPendingIRQ>
}
 8007a54:	bf00      	nop
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e08e      	b.n	8007b8c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	461a      	mov	r2, r3
 8007a74:	4b47      	ldr	r3, [pc, #284]	; (8007b94 <HAL_DMA_Init+0x138>)
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d80f      	bhi.n	8007a9a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	4b45      	ldr	r3, [pc, #276]	; (8007b98 <HAL_DMA_Init+0x13c>)
 8007a82:	4413      	add	r3, r2
 8007a84:	4a45      	ldr	r2, [pc, #276]	; (8007b9c <HAL_DMA_Init+0x140>)
 8007a86:	fba2 2303 	umull	r2, r3, r2, r3
 8007a8a:	091b      	lsrs	r3, r3, #4
 8007a8c:	009a      	lsls	r2, r3, #2
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a42      	ldr	r2, [pc, #264]	; (8007ba0 <HAL_DMA_Init+0x144>)
 8007a96:	641a      	str	r2, [r3, #64]	; 0x40
 8007a98:	e00e      	b.n	8007ab8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	4b40      	ldr	r3, [pc, #256]	; (8007ba4 <HAL_DMA_Init+0x148>)
 8007aa2:	4413      	add	r3, r2
 8007aa4:	4a3d      	ldr	r2, [pc, #244]	; (8007b9c <HAL_DMA_Init+0x140>)
 8007aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aaa:	091b      	lsrs	r3, r3, #4
 8007aac:	009a      	lsls	r2, r3, #2
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a3c      	ldr	r2, [pc, #240]	; (8007ba8 <HAL_DMA_Init+0x14c>)
 8007ab6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2202      	movs	r2, #2
 8007abc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ad2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007af4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f9bc 	bl	8007e88 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b18:	d102      	bne.n	8007b20 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b28:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007b2c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007b36:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d010      	beq.n	8007b62 <HAL_DMA_Init+0x106>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	2b04      	cmp	r3, #4
 8007b46:	d80c      	bhi.n	8007b62 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f9db 	bl	8007f04 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b52:	2200      	movs	r2, #0
 8007b54:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007b5e:	605a      	str	r2, [r3, #4]
 8007b60:	e008      	b.n	8007b74 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	40020407 	.word	0x40020407
 8007b98:	bffdfff8 	.word	0xbffdfff8
 8007b9c:	cccccccd 	.word	0xcccccccd
 8007ba0:	40020000 	.word	0x40020000
 8007ba4:	bffdfbf8 	.word	0xbffdfbf8
 8007ba8:	40020400 	.word	0x40020400

08007bac <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e04f      	b.n	8007c5e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d008      	beq.n	8007bdc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2204      	movs	r2, #4
 8007bce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e040      	b.n	8007c5e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f022 020e 	bic.w	r2, r2, #14
 8007bea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bfa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f022 0201 	bic.w	r2, r2, #1
 8007c0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c10:	f003 021c 	and.w	r2, r3, #28
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c18:	2101      	movs	r1, #1
 8007c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8007c1e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007c28:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00c      	beq.n	8007c4c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c40:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007c4a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b084      	sub	sp, #16
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d005      	beq.n	8007c8e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2204      	movs	r2, #4
 8007c86:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	73fb      	strb	r3, [r7, #15]
 8007c8c:	e047      	b.n	8007d1e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f022 020e 	bic.w	r2, r2, #14
 8007c9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f022 0201 	bic.w	r2, r2, #1
 8007cac:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cbc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cc2:	f003 021c 	and.w	r2, r3, #28
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cca:	2101      	movs	r1, #1
 8007ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8007cd0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007cda:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00c      	beq.n	8007cfe <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cf2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007cfc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	4798      	blx	r3
    }
  }
  return status;
 8007d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d44:	f003 031c 	and.w	r3, r3, #28
 8007d48:	2204      	movs	r2, #4
 8007d4a:	409a      	lsls	r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	4013      	ands	r3, r2
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d026      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x7a>
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	f003 0304 	and.w	r3, r3, #4
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d021      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0320 	and.w	r3, r3, #32
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d107      	bne.n	8007d7c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f022 0204 	bic.w	r2, r2, #4
 8007d7a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d80:	f003 021c 	and.w	r2, r3, #28
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d88:	2104      	movs	r1, #4
 8007d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8007d8e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d071      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007da0:	e06c      	b.n	8007e7c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007da6:	f003 031c 	and.w	r3, r3, #28
 8007daa:	2202      	movs	r2, #2
 8007dac:	409a      	lsls	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	4013      	ands	r3, r2
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d02e      	beq.n	8007e14 <HAL_DMA_IRQHandler+0xec>
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	f003 0302 	and.w	r3, r3, #2
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d029      	beq.n	8007e14 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 0320 	and.w	r3, r3, #32
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10b      	bne.n	8007de6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f022 020a 	bic.w	r2, r2, #10
 8007ddc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dea:	f003 021c 	and.w	r2, r3, #28
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df2:	2102      	movs	r1, #2
 8007df4:	fa01 f202 	lsl.w	r2, r1, r2
 8007df8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d038      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007e12:	e033      	b.n	8007e7c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e18:	f003 031c 	and.w	r3, r3, #28
 8007e1c:	2208      	movs	r2, #8
 8007e1e:	409a      	lsls	r2, r3
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	4013      	ands	r3, r2
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d02a      	beq.n	8007e7e <HAL_DMA_IRQHandler+0x156>
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	f003 0308 	and.w	r3, r3, #8
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d025      	beq.n	8007e7e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f022 020e 	bic.w	r2, r2, #14
 8007e40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e46:	f003 021c 	and.w	r2, r3, #28
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4e:	2101      	movs	r1, #1
 8007e50:	fa01 f202 	lsl.w	r2, r1, r2
 8007e54:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d004      	beq.n	8007e7e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007e7c:	bf00      	nop
 8007e7e:	bf00      	nop
}
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
	...

08007e88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	461a      	mov	r2, r3
 8007e96:	4b17      	ldr	r3, [pc, #92]	; (8007ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d80a      	bhi.n	8007eb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ea0:	089b      	lsrs	r3, r3, #2
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007ea8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	6493      	str	r3, [r2, #72]	; 0x48
 8007eb0:	e007      	b.n	8007ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb6:	089b      	lsrs	r3, r3, #2
 8007eb8:	009a      	lsls	r2, r3, #2
 8007eba:	4b0f      	ldr	r3, [pc, #60]	; (8007ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007ebc:	4413      	add	r3, r2
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	3b08      	subs	r3, #8
 8007eca:	4a0c      	ldr	r2, [pc, #48]	; (8007efc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed0:	091b      	lsrs	r3, r3, #4
 8007ed2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a0a      	ldr	r2, [pc, #40]	; (8007f00 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007ed8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f003 031f 	and.w	r3, r3, #31
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	409a      	lsls	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007ee8:	bf00      	nop
 8007eea:	3714      	adds	r7, #20
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	40020407 	.word	0x40020407
 8007ef8:	4002081c 	.word	0x4002081c
 8007efc:	cccccccd 	.word	0xcccccccd
 8007f00:	40020880 	.word	0x40020880

08007f04 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f14:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	4b0b      	ldr	r3, [pc, #44]	; (8007f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007f1a:	4413      	add	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	461a      	mov	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a09      	ldr	r2, [pc, #36]	; (8007f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8007f28:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	f003 0303 	and.w	r3, r3, #3
 8007f32:	2201      	movs	r2, #1
 8007f34:	409a      	lsls	r2, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007f3a:	bf00      	nop
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	1000823f 	.word	0x1000823f
 8007f4c:	40020940 	.word	0x40020940

08007f50 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b087      	sub	sp, #28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007f5e:	e14c      	b.n	80081fa <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	2101      	movs	r1, #1
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	fa01 f303 	lsl.w	r3, r1, r3
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f000 813e 	beq.w	80081f4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	f003 0303 	and.w	r3, r3, #3
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d005      	beq.n	8007f90 <HAL_GPIO_Init+0x40>
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f003 0303 	and.w	r3, r3, #3
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d130      	bne.n	8007ff2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	005b      	lsls	r3, r3, #1
 8007f9a:	2203      	movs	r2, #3
 8007f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa0:	43db      	mvns	r3, r3
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	68da      	ldr	r2, [r3, #12]
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	005b      	lsls	r3, r3, #1
 8007fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	fa02 f303 	lsl.w	r3, r2, r3
 8007fce:	43db      	mvns	r3, r3
 8007fd0:	693a      	ldr	r2, [r7, #16]
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	091b      	lsrs	r3, r3, #4
 8007fdc:	f003 0201 	and.w	r2, r3, #1
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f003 0303 	and.w	r3, r3, #3
 8007ffa:	2b03      	cmp	r3, #3
 8007ffc:	d017      	beq.n	800802e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	005b      	lsls	r3, r3, #1
 8008008:	2203      	movs	r2, #3
 800800a:	fa02 f303 	lsl.w	r3, r2, r3
 800800e:	43db      	mvns	r3, r3
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	4013      	ands	r3, r2
 8008014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	689a      	ldr	r2, [r3, #8]
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	005b      	lsls	r3, r3, #1
 800801e:	fa02 f303 	lsl.w	r3, r2, r3
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	4313      	orrs	r3, r2
 8008026:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	693a      	ldr	r2, [r7, #16]
 800802c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f003 0303 	and.w	r3, r3, #3
 8008036:	2b02      	cmp	r3, #2
 8008038:	d123      	bne.n	8008082 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	08da      	lsrs	r2, r3, #3
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	3208      	adds	r2, #8
 8008042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008046:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	f003 0307 	and.w	r3, r3, #7
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	220f      	movs	r2, #15
 8008052:	fa02 f303 	lsl.w	r3, r2, r3
 8008056:	43db      	mvns	r3, r3
 8008058:	693a      	ldr	r2, [r7, #16]
 800805a:	4013      	ands	r3, r2
 800805c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	691a      	ldr	r2, [r3, #16]
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	f003 0307 	and.w	r3, r3, #7
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	fa02 f303 	lsl.w	r3, r2, r3
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	4313      	orrs	r3, r2
 8008072:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	08da      	lsrs	r2, r3, #3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	3208      	adds	r2, #8
 800807c:	6939      	ldr	r1, [r7, #16]
 800807e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	005b      	lsls	r3, r3, #1
 800808c:	2203      	movs	r2, #3
 800808e:	fa02 f303 	lsl.w	r3, r2, r3
 8008092:	43db      	mvns	r3, r3
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	4013      	ands	r3, r2
 8008098:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	f003 0203 	and.w	r2, r3, #3
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	fa02 f303 	lsl.w	r3, r2, r3
 80080aa:	693a      	ldr	r2, [r7, #16]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f000 8098 	beq.w	80081f4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80080c4:	4a54      	ldr	r2, [pc, #336]	; (8008218 <HAL_GPIO_Init+0x2c8>)
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	089b      	lsrs	r3, r3, #2
 80080ca:	3302      	adds	r3, #2
 80080cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	f003 0303 	and.w	r3, r3, #3
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	220f      	movs	r2, #15
 80080dc:	fa02 f303 	lsl.w	r3, r2, r3
 80080e0:	43db      	mvns	r3, r3
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	4013      	ands	r3, r2
 80080e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80080ee:	d019      	beq.n	8008124 <HAL_GPIO_Init+0x1d4>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a4a      	ldr	r2, [pc, #296]	; (800821c <HAL_GPIO_Init+0x2cc>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d013      	beq.n	8008120 <HAL_GPIO_Init+0x1d0>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a49      	ldr	r2, [pc, #292]	; (8008220 <HAL_GPIO_Init+0x2d0>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d00d      	beq.n	800811c <HAL_GPIO_Init+0x1cc>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a48      	ldr	r2, [pc, #288]	; (8008224 <HAL_GPIO_Init+0x2d4>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d007      	beq.n	8008118 <HAL_GPIO_Init+0x1c8>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a47      	ldr	r2, [pc, #284]	; (8008228 <HAL_GPIO_Init+0x2d8>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d101      	bne.n	8008114 <HAL_GPIO_Init+0x1c4>
 8008110:	2304      	movs	r3, #4
 8008112:	e008      	b.n	8008126 <HAL_GPIO_Init+0x1d6>
 8008114:	2307      	movs	r3, #7
 8008116:	e006      	b.n	8008126 <HAL_GPIO_Init+0x1d6>
 8008118:	2303      	movs	r3, #3
 800811a:	e004      	b.n	8008126 <HAL_GPIO_Init+0x1d6>
 800811c:	2302      	movs	r3, #2
 800811e:	e002      	b.n	8008126 <HAL_GPIO_Init+0x1d6>
 8008120:	2301      	movs	r3, #1
 8008122:	e000      	b.n	8008126 <HAL_GPIO_Init+0x1d6>
 8008124:	2300      	movs	r3, #0
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	f002 0203 	and.w	r2, r2, #3
 800812c:	0092      	lsls	r2, r2, #2
 800812e:	4093      	lsls	r3, r2
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	4313      	orrs	r3, r2
 8008134:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008136:	4938      	ldr	r1, [pc, #224]	; (8008218 <HAL_GPIO_Init+0x2c8>)
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	089b      	lsrs	r3, r3, #2
 800813c:	3302      	adds	r3, #2
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008144:	4b39      	ldr	r3, [pc, #228]	; (800822c <HAL_GPIO_Init+0x2dc>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	43db      	mvns	r3, r3
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	4013      	ands	r3, r2
 8008152:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d003      	beq.n	8008168 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008160:	693a      	ldr	r2, [r7, #16]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	4313      	orrs	r3, r2
 8008166:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008168:	4a30      	ldr	r2, [pc, #192]	; (800822c <HAL_GPIO_Init+0x2dc>)
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800816e:	4b2f      	ldr	r3, [pc, #188]	; (800822c <HAL_GPIO_Init+0x2dc>)
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	43db      	mvns	r3, r3
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	4013      	ands	r3, r2
 800817c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008186:	2b00      	cmp	r3, #0
 8008188:	d003      	beq.n	8008192 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	4313      	orrs	r3, r2
 8008190:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008192:	4a26      	ldr	r2, [pc, #152]	; (800822c <HAL_GPIO_Init+0x2dc>)
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008198:	4b24      	ldr	r3, [pc, #144]	; (800822c <HAL_GPIO_Init+0x2dc>)
 800819a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800819e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	43db      	mvns	r3, r3
 80081a4:	693a      	ldr	r2, [r7, #16]
 80081a6:	4013      	ands	r3, r2
 80081a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d003      	beq.n	80081be <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80081b6:	693a      	ldr	r2, [r7, #16]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80081be:	4a1b      	ldr	r2, [pc, #108]	; (800822c <HAL_GPIO_Init+0x2dc>)
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80081c6:	4b19      	ldr	r3, [pc, #100]	; (800822c <HAL_GPIO_Init+0x2dc>)
 80081c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	43db      	mvns	r3, r3
 80081d2:	693a      	ldr	r2, [r7, #16]
 80081d4:	4013      	ands	r3, r2
 80081d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d003      	beq.n	80081ec <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80081e4:	693a      	ldr	r2, [r7, #16]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80081ec:	4a0f      	ldr	r2, [pc, #60]	; (800822c <HAL_GPIO_Init+0x2dc>)
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	3301      	adds	r3, #1
 80081f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	fa22 f303 	lsr.w	r3, r2, r3
 8008204:	2b00      	cmp	r3, #0
 8008206:	f47f aeab 	bne.w	8007f60 <HAL_GPIO_Init+0x10>
  }
}
 800820a:	bf00      	nop
 800820c:	bf00      	nop
 800820e:	371c      	adds	r7, #28
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr
 8008218:	40010000 	.word	0x40010000
 800821c:	48000400 	.word	0x48000400
 8008220:	48000800 	.word	0x48000800
 8008224:	48000c00 	.word	0x48000c00
 8008228:	48001000 	.word	0x48001000
 800822c:	58000800 	.word	0x58000800

08008230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	460b      	mov	r3, r1
 800823a:	807b      	strh	r3, [r7, #2]
 800823c:	4613      	mov	r3, r2
 800823e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008240:	787b      	ldrb	r3, [r7, #1]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d003      	beq.n	800824e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008246:	887a      	ldrh	r2, [r7, #2]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800824c:	e002      	b.n	8008254 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800824e:	887a      	ldrh	r2, [r7, #2]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8008266:	4b0a      	ldr	r3, [pc, #40]	; (8008290 <HAL_HSEM_IRQHandler+0x30>)
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800826c:	4b08      	ldr	r3, [pc, #32]	; (8008290 <HAL_HSEM_IRQHandler+0x30>)
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	43db      	mvns	r3, r3
 8008274:	4906      	ldr	r1, [pc, #24]	; (8008290 <HAL_HSEM_IRQHandler+0x30>)
 8008276:	4013      	ands	r3, r2
 8008278:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800827a:	4a05      	ldr	r2, [pc, #20]	; (8008290 <HAL_HSEM_IRQHandler+0x30>)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f807 	bl	8008294 <HAL_HSEM_FreeCallback>
}
 8008286:	bf00      	nop
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	58001500 	.word	0x58001500

08008294 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80082b0:	2300      	movs	r3, #0
 80082b2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d01e      	beq.n	80082f8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80082ba:	4b13      	ldr	r3, [pc, #76]	; (8008308 <HAL_IPCC_Init+0x60>)
 80082bc:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d102      	bne.n	80082d0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7fe fe18 	bl	8006f00 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80082d0:	68b8      	ldr	r0, [r7, #8]
 80082d2:	f000 f85b 	bl	800838c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f82c 	bl	8008340 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2201      	movs	r2, #1
 80082f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80082f6:	e001      	b.n	80082fc <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	58000c00 	.word	0x58000c00

0800830c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	4613      	mov	r3, r2
 8008318:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800831a:	bf00      	nop
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8008326:	b480      	push	{r7}
 8008328:	b085      	sub	sp, #20
 800832a:	af00      	add	r7, sp, #0
 800832c:	60f8      	str	r0, [r7, #12]
 800832e:	60b9      	str	r1, [r7, #8]
 8008330:	4613      	mov	r3, r2
 8008332:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8008334:	bf00      	nop
 8008336:	3714      	adds	r7, #20
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8008348:	2300      	movs	r3, #0
 800834a:	60fb      	str	r3, [r7, #12]
 800834c:	e00f      	b.n	800836e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4413      	add	r3, r2
 8008356:	4a0b      	ldr	r2, [pc, #44]	; (8008384 <IPCC_SetDefaultCallbacks+0x44>)
 8008358:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	3306      	adds	r3, #6
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	4a08      	ldr	r2, [pc, #32]	; (8008388 <IPCC_SetDefaultCallbacks+0x48>)
 8008366:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	3301      	adds	r3, #1
 800836c:	60fb      	str	r3, [r7, #12]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2b05      	cmp	r3, #5
 8008372:	d9ec      	bls.n	800834e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8008374:	bf00      	nop
 8008376:	bf00      	nop
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	0800830d 	.word	0x0800830d
 8008388:	08008327 	.word	0x08008327

0800838c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80083a0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	223f      	movs	r2, #63	; 0x3f
 80083a6:	609a      	str	r2, [r3, #8]
}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d101      	bne.n	80083c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e0c0      	b.n	8008548 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d106      	bne.n	80083e0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f7fe ff14 	bl	8007208 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2203      	movs	r2, #3
 80083e4:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4618      	mov	r0, r3
 80083ee:	f004 fc2b 	bl	800cc48 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083f2:	2300      	movs	r3, #0
 80083f4:	73fb      	strb	r3, [r7, #15]
 80083f6:	e03e      	b.n	8008476 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80083f8:	7bfa      	ldrb	r2, [r7, #15]
 80083fa:	6879      	ldr	r1, [r7, #4]
 80083fc:	4613      	mov	r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	4413      	add	r3, r2
 8008402:	00db      	lsls	r3, r3, #3
 8008404:	440b      	add	r3, r1
 8008406:	3311      	adds	r3, #17
 8008408:	2201      	movs	r2, #1
 800840a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800840c:	7bfa      	ldrb	r2, [r7, #15]
 800840e:	6879      	ldr	r1, [r7, #4]
 8008410:	4613      	mov	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	00db      	lsls	r3, r3, #3
 8008418:	440b      	add	r3, r1
 800841a:	3310      	adds	r3, #16
 800841c:	7bfa      	ldrb	r2, [r7, #15]
 800841e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008420:	7bfa      	ldrb	r2, [r7, #15]
 8008422:	6879      	ldr	r1, [r7, #4]
 8008424:	4613      	mov	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	440b      	add	r3, r1
 800842e:	3313      	adds	r3, #19
 8008430:	2200      	movs	r2, #0
 8008432:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008434:	7bfa      	ldrb	r2, [r7, #15]
 8008436:	6879      	ldr	r1, [r7, #4]
 8008438:	4613      	mov	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	00db      	lsls	r3, r3, #3
 8008440:	440b      	add	r3, r1
 8008442:	3320      	adds	r3, #32
 8008444:	2200      	movs	r2, #0
 8008446:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008448:	7bfa      	ldrb	r2, [r7, #15]
 800844a:	6879      	ldr	r1, [r7, #4]
 800844c:	4613      	mov	r3, r2
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	4413      	add	r3, r2
 8008452:	00db      	lsls	r3, r3, #3
 8008454:	440b      	add	r3, r1
 8008456:	3324      	adds	r3, #36	; 0x24
 8008458:	2200      	movs	r2, #0
 800845a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800845c:	7bfb      	ldrb	r3, [r7, #15]
 800845e:	6879      	ldr	r1, [r7, #4]
 8008460:	1c5a      	adds	r2, r3, #1
 8008462:	4613      	mov	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4413      	add	r3, r2
 8008468:	00db      	lsls	r3, r3, #3
 800846a:	440b      	add	r3, r1
 800846c:	2200      	movs	r2, #0
 800846e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008470:	7bfb      	ldrb	r3, [r7, #15]
 8008472:	3301      	adds	r3, #1
 8008474:	73fb      	strb	r3, [r7, #15]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	791b      	ldrb	r3, [r3, #4]
 800847a:	7bfa      	ldrb	r2, [r7, #15]
 800847c:	429a      	cmp	r2, r3
 800847e:	d3bb      	bcc.n	80083f8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008480:	2300      	movs	r3, #0
 8008482:	73fb      	strb	r3, [r7, #15]
 8008484:	e044      	b.n	8008510 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008486:	7bfa      	ldrb	r2, [r7, #15]
 8008488:	6879      	ldr	r1, [r7, #4]
 800848a:	4613      	mov	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4413      	add	r3, r2
 8008490:	00db      	lsls	r3, r3, #3
 8008492:	440b      	add	r3, r1
 8008494:	f203 1351 	addw	r3, r3, #337	; 0x151
 8008498:	2200      	movs	r2, #0
 800849a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800849c:	7bfa      	ldrb	r2, [r7, #15]
 800849e:	6879      	ldr	r1, [r7, #4]
 80084a0:	4613      	mov	r3, r2
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4413      	add	r3, r2
 80084a6:	00db      	lsls	r3, r3, #3
 80084a8:	440b      	add	r3, r1
 80084aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084ae:	7bfa      	ldrb	r2, [r7, #15]
 80084b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80084b2:	7bfa      	ldrb	r2, [r7, #15]
 80084b4:	6879      	ldr	r1, [r7, #4]
 80084b6:	4613      	mov	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	4413      	add	r3, r2
 80084bc:	00db      	lsls	r3, r3, #3
 80084be:	440b      	add	r3, r1
 80084c0:	f203 1353 	addw	r3, r3, #339	; 0x153
 80084c4:	2200      	movs	r2, #0
 80084c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80084c8:	7bfa      	ldrb	r2, [r7, #15]
 80084ca:	6879      	ldr	r1, [r7, #4]
 80084cc:	4613      	mov	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	4413      	add	r3, r2
 80084d2:	00db      	lsls	r3, r3, #3
 80084d4:	440b      	add	r3, r1
 80084d6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80084da:	2200      	movs	r2, #0
 80084dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80084de:	7bfa      	ldrb	r2, [r7, #15]
 80084e0:	6879      	ldr	r1, [r7, #4]
 80084e2:	4613      	mov	r3, r2
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	4413      	add	r3, r2
 80084e8:	00db      	lsls	r3, r3, #3
 80084ea:	440b      	add	r3, r1
 80084ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80084f0:	2200      	movs	r2, #0
 80084f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80084f4:	7bfa      	ldrb	r2, [r7, #15]
 80084f6:	6879      	ldr	r1, [r7, #4]
 80084f8:	4613      	mov	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	00db      	lsls	r3, r3, #3
 8008500:	440b      	add	r3, r1
 8008502:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008506:	2200      	movs	r2, #0
 8008508:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800850a:	7bfb      	ldrb	r3, [r7, #15]
 800850c:	3301      	adds	r3, #1
 800850e:	73fb      	strb	r3, [r7, #15]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	791b      	ldrb	r3, [r3, #4]
 8008514:	7bfa      	ldrb	r2, [r7, #15]
 8008516:	429a      	cmp	r2, r3
 8008518:	d3b5      	bcc.n	8008486 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6818      	ldr	r0, [r3, #0]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	3304      	adds	r3, #4
 8008522:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008526:	f004 fbaa 	bl	800cc7e <USB_DevInit>

  hpcd->USB_Address = 0U;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	7a9b      	ldrb	r3, [r3, #10]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d102      	bne.n	8008546 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 f805 	bl	8008550 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008550:	b480      	push	{r7}
 8008552:	b085      	sub	sp, #20
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2201      	movs	r2, #1
 8008562:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008574:	b29b      	uxth	r3, r3
 8008576:	f043 0301 	orr.w	r3, r3, #1
 800857a:	b29a      	uxth	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008588:	b29b      	uxth	r3, r3
 800858a:	f043 0302 	orr.w	r3, r3, #2
 800858e:	b29a      	uxth	r2, r3
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3714      	adds	r7, #20
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80085a4:	b480      	push	{r7}
 80085a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80085a8:	4b05      	ldr	r3, [pc, #20]	; (80085c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a04      	ldr	r2, [pc, #16]	; (80085c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80085ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085b2:	6013      	str	r3, [r2, #0]
}
 80085b4:	bf00      	nop
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr
 80085be:	bf00      	nop
 80085c0:	58000400 	.word	0x58000400

080085c4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80085c4:	b480      	push	{r7}
 80085c6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80085c8:	4b04      	ldr	r3, [pc, #16]	; (80085dc <HAL_PWREx_GetVoltageRange+0x18>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	58000400 	.word	0x58000400

080085e0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80085e0:	b480      	push	{r7}
 80085e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80085e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085f2:	d101      	bne.n	80085f8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80085f4:	2301      	movs	r3, #1
 80085f6:	e000      	b.n	80085fa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <LL_RCC_HSE_Enable>:
{
 8008604:	b480      	push	{r7}
 8008606:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8008608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008616:	6013      	str	r3, [r2, #0]
}
 8008618:	bf00      	nop
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <LL_RCC_HSE_Disable>:
{
 8008622:	b480      	push	{r7}
 8008624:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8008626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008634:	6013      	str	r3, [r2, #0]
}
 8008636:	bf00      	nop
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <LL_RCC_HSE_IsReady>:
{
 8008640:	b480      	push	{r7}
 8008642:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8008644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800864e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008652:	d101      	bne.n	8008658 <LL_RCC_HSE_IsReady+0x18>
 8008654:	2301      	movs	r3, #1
 8008656:	e000      	b.n	800865a <LL_RCC_HSE_IsReady+0x1a>
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <LL_RCC_HSI_Enable>:
{
 8008664:	b480      	push	{r7}
 8008666:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008676:	6013      	str	r3, [r2, #0]
}
 8008678:	bf00      	nop
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr

08008682 <LL_RCC_HSI_Disable>:
{
 8008682:	b480      	push	{r7}
 8008684:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8008686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008694:	6013      	str	r3, [r2, #0]
}
 8008696:	bf00      	nop
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <LL_RCC_HSI_IsReady>:
{
 80086a0:	b480      	push	{r7}
 80086a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80086a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086b2:	d101      	bne.n	80086b8 <LL_RCC_HSI_IsReady+0x18>
 80086b4:	2301      	movs	r3, #1
 80086b6:	e000      	b.n	80086ba <LL_RCC_HSI_IsReady+0x1a>
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <LL_RCC_HSI_SetCalibTrimming>:
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80086cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	061b      	lsls	r3, r3, #24
 80086da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80086de:	4313      	orrs	r3, r2
 80086e0:	604b      	str	r3, [r1, #4]
}
 80086e2:	bf00      	nop
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <LL_RCC_HSI48_Enable>:
{
 80086ee:	b480      	push	{r7}
 80086f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80086f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80086fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086fe:	f043 0301 	orr.w	r3, r3, #1
 8008702:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8008706:	bf00      	nop
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <LL_RCC_HSI48_Disable>:
{
 8008710:	b480      	push	{r7}
 8008712:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8008714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008718:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800871c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008720:	f023 0301 	bic.w	r3, r3, #1
 8008724:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8008728:	bf00      	nop
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <LL_RCC_HSI48_IsReady>:
{
 8008732:	b480      	push	{r7}
 8008734:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8008736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800873a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800873e:	f003 0302 	and.w	r3, r3, #2
 8008742:	2b02      	cmp	r3, #2
 8008744:	d101      	bne.n	800874a <LL_RCC_HSI48_IsReady+0x18>
 8008746:	2301      	movs	r3, #1
 8008748:	e000      	b.n	800874c <LL_RCC_HSI48_IsReady+0x1a>
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr

08008756 <LL_RCC_LSE_Enable>:
{
 8008756:	b480      	push	{r7}
 8008758:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800875a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800875e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008766:	f043 0301 	orr.w	r3, r3, #1
 800876a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800876e:	bf00      	nop
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <LL_RCC_LSE_Disable>:
{
 8008778:	b480      	push	{r7}
 800877a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800877c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008784:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008788:	f023 0301 	bic.w	r3, r3, #1
 800878c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008790:	bf00      	nop
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <LL_RCC_LSE_EnableBypass>:
{
 800879a:	b480      	push	{r7}
 800879c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800879e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80087aa:	f043 0304 	orr.w	r3, r3, #4
 80087ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80087b2:	bf00      	nop
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <LL_RCC_LSE_DisableBypass>:
{
 80087bc:	b480      	push	{r7}
 80087be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80087c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80087cc:	f023 0304 	bic.w	r3, r3, #4
 80087d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80087d4:	bf00      	nop
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <LL_RCC_LSE_IsReady>:
{
 80087de:	b480      	push	{r7}
 80087e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80087e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ea:	f003 0302 	and.w	r3, r3, #2
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	d101      	bne.n	80087f6 <LL_RCC_LSE_IsReady+0x18>
 80087f2:	2301      	movs	r3, #1
 80087f4:	e000      	b.n	80087f8 <LL_RCC_LSE_IsReady+0x1a>
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr

08008802 <LL_RCC_LSI1_Enable>:
{
 8008802:	b480      	push	{r7}
 8008804:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8008806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800880a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800880e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008812:	f043 0301 	orr.w	r3, r3, #1
 8008816:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800881a:	bf00      	nop
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <LL_RCC_LSI1_Disable>:
{
 8008824:	b480      	push	{r7}
 8008826:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8008828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800882c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008830:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008834:	f023 0301 	bic.w	r3, r3, #1
 8008838:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800883c:	bf00      	nop
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr

08008846 <LL_RCC_LSI1_IsReady>:
{
 8008846:	b480      	push	{r7}
 8008848:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800884a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800884e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008852:	f003 0302 	and.w	r3, r3, #2
 8008856:	2b02      	cmp	r3, #2
 8008858:	d101      	bne.n	800885e <LL_RCC_LSI1_IsReady+0x18>
 800885a:	2301      	movs	r3, #1
 800885c:	e000      	b.n	8008860 <LL_RCC_LSI1_IsReady+0x1a>
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <LL_RCC_LSI2_Enable>:
{
 800886a:	b480      	push	{r7}
 800886c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800886e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008876:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800887a:	f043 0304 	orr.w	r3, r3, #4
 800887e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008882:	bf00      	nop
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <LL_RCC_LSI2_Disable>:
{
 800888c:	b480      	push	{r7}
 800888e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8008890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008898:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800889c:	f023 0304 	bic.w	r3, r3, #4
 80088a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80088a4:	bf00      	nop
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr

080088ae <LL_RCC_LSI2_IsReady>:
{
 80088ae:	b480      	push	{r7}
 80088b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80088b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088ba:	f003 0308 	and.w	r3, r3, #8
 80088be:	2b08      	cmp	r3, #8
 80088c0:	d101      	bne.n	80088c6 <LL_RCC_LSI2_IsReady+0x18>
 80088c2:	2301      	movs	r3, #1
 80088c4:	e000      	b.n	80088c8 <LL_RCC_LSI2_IsReady+0x1a>
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <LL_RCC_LSI2_SetTrimming>:
{
 80088d2:	b480      	push	{r7}
 80088d4:	b083      	sub	sp, #12
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80088da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	021b      	lsls	r3, r3, #8
 80088ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088ee:	4313      	orrs	r3, r2
 80088f0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80088f4:	bf00      	nop
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <LL_RCC_MSI_Enable>:
{
 8008900:	b480      	push	{r7}
 8008902:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8008904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800890e:	f043 0301 	orr.w	r3, r3, #1
 8008912:	6013      	str	r3, [r2, #0]
}
 8008914:	bf00      	nop
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr

0800891e <LL_RCC_MSI_Disable>:
{
 800891e:	b480      	push	{r7}
 8008920:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8008922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800892c:	f023 0301 	bic.w	r3, r3, #1
 8008930:	6013      	str	r3, [r2, #0]
}
 8008932:	bf00      	nop
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <LL_RCC_MSI_IsReady>:
{
 800893c:	b480      	push	{r7}
 800893e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8008940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 0302 	and.w	r3, r3, #2
 800894a:	2b02      	cmp	r3, #2
 800894c:	d101      	bne.n	8008952 <LL_RCC_MSI_IsReady+0x16>
 800894e:	2301      	movs	r3, #1
 8008950:	e000      	b.n	8008954 <LL_RCC_MSI_IsReady+0x18>
 8008952:	2300      	movs	r3, #0
}
 8008954:	4618      	mov	r0, r3
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <LL_RCC_MSI_SetRange>:
{
 800895e:	b480      	push	{r7}
 8008960:	b083      	sub	sp, #12
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8008966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008970:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4313      	orrs	r3, r2
 8008978:	600b      	str	r3, [r1, #0]
}
 800897a:	bf00      	nop
 800897c:	370c      	adds	r7, #12
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <LL_RCC_MSI_GetRange>:
{
 8008986:	b480      	push	{r7}
 8008988:	b083      	sub	sp, #12
 800898a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800898c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008996:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2bb0      	cmp	r3, #176	; 0xb0
 800899c:	d901      	bls.n	80089a2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800899e:	23b0      	movs	r3, #176	; 0xb0
 80089a0:	607b      	str	r3, [r7, #4]
  return msiRange;
 80089a2:	687b      	ldr	r3, [r7, #4]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80089b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	021b      	lsls	r3, r3, #8
 80089c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80089ca:	4313      	orrs	r3, r2
 80089cc:	604b      	str	r3, [r1, #4]
}
 80089ce:	bf00      	nop
 80089d0:	370c      	adds	r7, #12
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr

080089da <LL_RCC_SetSysClkSource>:
{
 80089da:	b480      	push	{r7}
 80089dc:	b083      	sub	sp, #12
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80089e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	f023 0203 	bic.w	r2, r3, #3
 80089ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	608b      	str	r3, [r1, #8]
}
 80089f6:	bf00      	nop
 80089f8:	370c      	adds	r7, #12
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr

08008a02 <LL_RCC_GetSysClkSource>:
{
 8008a02:	b480      	push	{r7}
 8008a04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	f003 030c 	and.w	r3, r3, #12
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr

08008a1a <LL_RCC_SetAHBPrescaler>:
{
 8008a1a:	b480      	push	{r7}
 8008a1c:	b083      	sub	sp, #12
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8008a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	608b      	str	r3, [r1, #8]
}
 8008a36:	bf00      	nop
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr

08008a42 <LL_C2_RCC_SetAHBPrescaler>:
{
 8008a42:	b480      	push	{r7}
 8008a44:	b083      	sub	sp, #12
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8008a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008a52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8008a62:	bf00      	nop
 8008a64:	370c      	adds	r7, #12
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr

08008a6e <LL_RCC_SetAHB4Prescaler>:
{
 8008a6e:	b480      	push	{r7}
 8008a70:	b083      	sub	sp, #12
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8008a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a7a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008a7e:	f023 020f 	bic.w	r2, r3, #15
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	091b      	lsrs	r3, r3, #4
 8008a86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8008a90:	bf00      	nop
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <LL_RCC_SetAPB1Prescaler>:
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8008aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008aae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	608b      	str	r3, [r1, #8]
}
 8008ab8:	bf00      	nop
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <LL_RCC_SetAPB2Prescaler>:
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8008acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008ad6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	608b      	str	r3, [r1, #8]
}
 8008ae0:	bf00      	nop
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <LL_RCC_GetAHBPrescaler>:
{
 8008aec:	b480      	push	{r7}
 8008aee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <LL_C2_RCC_GetAHBPrescaler>:
{
 8008b04:	b480      	push	{r7}
 8008b06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8008b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b0c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008b10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <LL_RCC_GetAHB4Prescaler>:
{
 8008b1e:	b480      	push	{r7}
 8008b20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8008b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008b2a:	011b      	lsls	r3, r3, #4
 8008b2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr

08008b3a <LL_RCC_GetAPB1Prescaler>:
{
 8008b3a:	b480      	push	{r7}
 8008b3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr

08008b52 <LL_RCC_GetAPB2Prescaler>:
{
 8008b52:	b480      	push	{r7}
 8008b54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8008b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr

08008b6a <LL_RCC_ConfigMCO>:
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b083      	sub	sp, #12
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
 8008b72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE, MCOxSource | MCOxPrescaler);
 8008b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008b7e:	6879      	ldr	r1, [r7, #4]
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	430b      	orrs	r3, r1
 8008b84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	608b      	str	r3, [r1, #8]
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008baa:	6013      	str	r3, [r2, #0]
}
 8008bac:	bf00      	nop
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr

08008bb6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8008bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008bc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bc8:	6013      	str	r3, [r2, #0]
}
 8008bca:	bf00      	nop
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8008bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008be2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008be6:	d101      	bne.n	8008bec <LL_RCC_PLL_IsReady+0x18>
 8008be8:	2301      	movs	r3, #1
 8008bea:	e000      	b.n	8008bee <LL_RCC_PLL_IsReady+0x1a>
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	0a1b      	lsrs	r3, r3, #8
 8008c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8008c12:	b480      	push	{r7}
 8008c14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8008c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr

08008c2a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr

08008c42 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8008c42:	b480      	push	{r7}
 8008c44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	f003 0303 	and.w	r3, r3, #3
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr

08008c5a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8008c5a:	b480      	push	{r7}
 8008c5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8008c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c6c:	d101      	bne.n	8008c72 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e000      	b.n	8008c74 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr

08008c7e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8008c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c86:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c92:	d101      	bne.n	8008c98 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8008c94:	2301      	movs	r3, #1
 8008c96:	e000      	b.n	8008c9a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8008ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cb8:	d101      	bne.n	8008cbe <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e000      	b.n	8008cc0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr

08008cca <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8008cca:	b480      	push	{r7}
 8008ccc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8008cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cdc:	d101      	bne.n	8008ce2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e000      	b.n	8008ce4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr

08008cee <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8008cee:	b480      	push	{r7}
 8008cf0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8008cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008cfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d00:	d101      	bne.n	8008d06 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8008d02:	2301      	movs	r3, #1
 8008d04:	e000      	b.n	8008d08 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
	...

08008d14 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d14:	b590      	push	{r4, r7, lr}
 8008d16:	b08d      	sub	sp, #52	; 0x34
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d101      	bne.n	8008d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e363      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0320 	and.w	r3, r3, #32
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f000 808d 	beq.w	8008e4e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d34:	f7ff fe65 	bl	8008a02 <LL_RCC_GetSysClkSource>
 8008d38:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008d3a:	f7ff ff82 	bl	8008c42 <LL_RCC_PLL_GetMainSource>
 8008d3e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d005      	beq.n	8008d52 <HAL_RCC_OscConfig+0x3e>
 8008d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d48:	2b0c      	cmp	r3, #12
 8008d4a:	d147      	bne.n	8008ddc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8008d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d144      	bne.n	8008ddc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	69db      	ldr	r3, [r3, #28]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d101      	bne.n	8008d5e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e347      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008d62:	f7ff fe10 	bl	8008986 <LL_RCC_MSI_GetRange>
 8008d66:	4603      	mov	r3, r0
 8008d68:	429c      	cmp	r4, r3
 8008d6a:	d914      	bls.n	8008d96 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d70:	4618      	mov	r0, r3
 8008d72:	f000 fdb3 	bl	80098dc <RCC_SetFlashLatencyFromMSIRange>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d001      	beq.n	8008d80 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e336      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7ff fdea 	bl	800895e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a1b      	ldr	r3, [r3, #32]
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7ff fe0e 	bl	80089b0 <LL_RCC_MSI_SetCalibTrimming>
 8008d94:	e013      	b.n	8008dbe <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7ff fddf 	bl	800895e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a1b      	ldr	r3, [r3, #32]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7ff fe03 	bl	80089b0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 fd94 	bl	80098dc <RCC_SetFlashLatencyFromMSIRange>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e317      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008dbe:	f000 fd1b 	bl	80097f8 <HAL_RCC_GetHCLKFreq>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	4aa4      	ldr	r2, [pc, #656]	; (8009058 <HAL_RCC_OscConfig+0x344>)
 8008dc6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008dc8:	4ba4      	ldr	r3, [pc, #656]	; (800905c <HAL_RCC_OscConfig+0x348>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7fe fa8b 	bl	80072e8 <HAL_InitTick>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d039      	beq.n	8008e4c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e308      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	69db      	ldr	r3, [r3, #28]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d01e      	beq.n	8008e22 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008de4:	f7ff fd8c 	bl	8008900 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008de8:	f7fe fcb6 	bl	8007758 <HAL_GetTick>
 8008dec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8008dee:	e008      	b.n	8008e02 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008df0:	f7fe fcb2 	bl	8007758 <HAL_GetTick>
 8008df4:	4602      	mov	r2, r0
 8008df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	d901      	bls.n	8008e02 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	e2f5      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8008e02:	f7ff fd9b 	bl	800893c <LL_RCC_MSI_IsReady>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d0f1      	beq.n	8008df0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7ff fda4 	bl	800895e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a1b      	ldr	r3, [r3, #32]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7ff fdc8 	bl	80089b0 <LL_RCC_MSI_SetCalibTrimming>
 8008e20:	e015      	b.n	8008e4e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008e22:	f7ff fd7c 	bl	800891e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008e26:	f7fe fc97 	bl	8007758 <HAL_GetTick>
 8008e2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8008e2c:	e008      	b.n	8008e40 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008e2e:	f7fe fc93 	bl	8007758 <HAL_GetTick>
 8008e32:	4602      	mov	r2, r0
 8008e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e36:	1ad3      	subs	r3, r2, r3
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d901      	bls.n	8008e40 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	e2d6      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8008e40:	f7ff fd7c 	bl	800893c <LL_RCC_MSI_IsReady>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1f1      	bne.n	8008e2e <HAL_RCC_OscConfig+0x11a>
 8008e4a:	e000      	b.n	8008e4e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008e4c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0301 	and.w	r3, r3, #1
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d047      	beq.n	8008eea <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e5a:	f7ff fdd2 	bl	8008a02 <LL_RCC_GetSysClkSource>
 8008e5e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008e60:	f7ff feef 	bl	8008c42 <LL_RCC_PLL_GetMainSource>
 8008e64:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008e66:	6a3b      	ldr	r3, [r7, #32]
 8008e68:	2b08      	cmp	r3, #8
 8008e6a:	d005      	beq.n	8008e78 <HAL_RCC_OscConfig+0x164>
 8008e6c:	6a3b      	ldr	r3, [r7, #32]
 8008e6e:	2b0c      	cmp	r3, #12
 8008e70:	d108      	bne.n	8008e84 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	2b03      	cmp	r3, #3
 8008e76:	d105      	bne.n	8008e84 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d134      	bne.n	8008eea <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	e2b4      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e8c:	d102      	bne.n	8008e94 <HAL_RCC_OscConfig+0x180>
 8008e8e:	f7ff fbb9 	bl	8008604 <LL_RCC_HSE_Enable>
 8008e92:	e001      	b.n	8008e98 <HAL_RCC_OscConfig+0x184>
 8008e94:	f7ff fbc5 	bl	8008622 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d012      	beq.n	8008ec6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ea0:	f7fe fc5a 	bl	8007758 <HAL_GetTick>
 8008ea4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8008ea6:	e008      	b.n	8008eba <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ea8:	f7fe fc56 	bl	8007758 <HAL_GetTick>
 8008eac:	4602      	mov	r2, r0
 8008eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	2b64      	cmp	r3, #100	; 0x64
 8008eb4:	d901      	bls.n	8008eba <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008eb6:	2303      	movs	r3, #3
 8008eb8:	e299      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8008eba:	f7ff fbc1 	bl	8008640 <LL_RCC_HSE_IsReady>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d0f1      	beq.n	8008ea8 <HAL_RCC_OscConfig+0x194>
 8008ec4:	e011      	b.n	8008eea <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ec6:	f7fe fc47 	bl	8007758 <HAL_GetTick>
 8008eca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008ecc:	e008      	b.n	8008ee0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ece:	f7fe fc43 	bl	8007758 <HAL_GetTick>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed6:	1ad3      	subs	r3, r2, r3
 8008ed8:	2b64      	cmp	r3, #100	; 0x64
 8008eda:	d901      	bls.n	8008ee0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008edc:	2303      	movs	r3, #3
 8008ede:	e286      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8008ee0:	f7ff fbae 	bl	8008640 <LL_RCC_HSE_IsReady>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1f1      	bne.n	8008ece <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 0302 	and.w	r3, r3, #2
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d04c      	beq.n	8008f90 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ef6:	f7ff fd84 	bl	8008a02 <LL_RCC_GetSysClkSource>
 8008efa:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008efc:	f7ff fea1 	bl	8008c42 <LL_RCC_PLL_GetMainSource>
 8008f00:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	2b04      	cmp	r3, #4
 8008f06:	d005      	beq.n	8008f14 <HAL_RCC_OscConfig+0x200>
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	2b0c      	cmp	r3, #12
 8008f0c:	d10e      	bne.n	8008f2c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	d10b      	bne.n	8008f2c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d101      	bne.n	8008f20 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e266      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7ff fbcd 	bl	80086c4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008f2a:	e031      	b.n	8008f90 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d019      	beq.n	8008f68 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008f34:	f7ff fb96 	bl	8008664 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f38:	f7fe fc0e 	bl	8007758 <HAL_GetTick>
 8008f3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8008f3e:	e008      	b.n	8008f52 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f40:	f7fe fc0a 	bl	8007758 <HAL_GetTick>
 8008f44:	4602      	mov	r2, r0
 8008f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f48:	1ad3      	subs	r3, r2, r3
 8008f4a:	2b02      	cmp	r3, #2
 8008f4c:	d901      	bls.n	8008f52 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008f4e:	2303      	movs	r3, #3
 8008f50:	e24d      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8008f52:	f7ff fba5 	bl	80086a0 <LL_RCC_HSI_IsReady>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d0f1      	beq.n	8008f40 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7ff fbaf 	bl	80086c4 <LL_RCC_HSI_SetCalibTrimming>
 8008f66:	e013      	b.n	8008f90 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f68:	f7ff fb8b 	bl	8008682 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f6c:	f7fe fbf4 	bl	8007758 <HAL_GetTick>
 8008f70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8008f72:	e008      	b.n	8008f86 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f74:	f7fe fbf0 	bl	8007758 <HAL_GetTick>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	d901      	bls.n	8008f86 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	e233      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8008f86:	f7ff fb8b 	bl	80086a0 <LL_RCC_HSI_IsReady>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1f1      	bne.n	8008f74 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f003 0308 	and.w	r3, r3, #8
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d106      	bne.n	8008faa <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f000 80a3 	beq.w	80090f0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d076      	beq.n	80090a0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 0310 	and.w	r3, r3, #16
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d046      	beq.n	800904c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8008fbe:	f7ff fc42 	bl	8008846 <LL_RCC_LSI1_IsReady>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d113      	bne.n	8008ff0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8008fc8:	f7ff fc1b 	bl	8008802 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008fcc:	f7fe fbc4 	bl	8007758 <HAL_GetTick>
 8008fd0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008fd2:	e008      	b.n	8008fe6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008fd4:	f7fe fbc0 	bl	8007758 <HAL_GetTick>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fdc:	1ad3      	subs	r3, r2, r3
 8008fde:	2b02      	cmp	r3, #2
 8008fe0:	d901      	bls.n	8008fe6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	e203      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008fe6:	f7ff fc2e 	bl	8008846 <LL_RCC_LSI1_IsReady>
 8008fea:	4603      	mov	r3, r0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d0f1      	beq.n	8008fd4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8008ff0:	f7ff fc3b 	bl	800886a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ff4:	f7fe fbb0 	bl	8007758 <HAL_GetTick>
 8008ff8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008ffa:	e008      	b.n	800900e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008ffc:	f7fe fbac 	bl	8007758 <HAL_GetTick>
 8009000:	4602      	mov	r2, r0
 8009002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	2b03      	cmp	r3, #3
 8009008:	d901      	bls.n	800900e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800900a:	2303      	movs	r3, #3
 800900c:	e1ef      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800900e:	f7ff fc4e 	bl	80088ae <LL_RCC_LSI2_IsReady>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d0f1      	beq.n	8008ffc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	699b      	ldr	r3, [r3, #24]
 800901c:	4618      	mov	r0, r3
 800901e:	f7ff fc58 	bl	80088d2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8009022:	f7ff fbff 	bl	8008824 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009026:	f7fe fb97 	bl	8007758 <HAL_GetTick>
 800902a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800902c:	e008      	b.n	8009040 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800902e:	f7fe fb93 	bl	8007758 <HAL_GetTick>
 8009032:	4602      	mov	r2, r0
 8009034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009036:	1ad3      	subs	r3, r2, r3
 8009038:	2b02      	cmp	r3, #2
 800903a:	d901      	bls.n	8009040 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800903c:	2303      	movs	r3, #3
 800903e:	e1d6      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8009040:	f7ff fc01 	bl	8008846 <LL_RCC_LSI1_IsReady>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1f1      	bne.n	800902e <HAL_RCC_OscConfig+0x31a>
 800904a:	e051      	b.n	80090f0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800904c:	f7ff fbd9 	bl	8008802 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009050:	f7fe fb82 	bl	8007758 <HAL_GetTick>
 8009054:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8009056:	e00c      	b.n	8009072 <HAL_RCC_OscConfig+0x35e>
 8009058:	20000154 	.word	0x20000154
 800905c:	20000158 	.word	0x20000158
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009060:	f7fe fb7a 	bl	8007758 <HAL_GetTick>
 8009064:	4602      	mov	r2, r0
 8009066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	2b02      	cmp	r3, #2
 800906c:	d901      	bls.n	8009072 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800906e:	2303      	movs	r3, #3
 8009070:	e1bd      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8009072:	f7ff fbe8 	bl	8008846 <LL_RCC_LSI1_IsReady>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d0f1      	beq.n	8009060 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800907c:	f7ff fc06 	bl	800888c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8009080:	e008      	b.n	8009094 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009082:	f7fe fb69 	bl	8007758 <HAL_GetTick>
 8009086:	4602      	mov	r2, r0
 8009088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908a:	1ad3      	subs	r3, r2, r3
 800908c:	2b03      	cmp	r3, #3
 800908e:	d901      	bls.n	8009094 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8009090:	2303      	movs	r3, #3
 8009092:	e1ac      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8009094:	f7ff fc0b 	bl	80088ae <LL_RCC_LSI2_IsReady>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1f1      	bne.n	8009082 <HAL_RCC_OscConfig+0x36e>
 800909e:	e027      	b.n	80090f0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80090a0:	f7ff fbf4 	bl	800888c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090a4:	f7fe fb58 	bl	8007758 <HAL_GetTick>
 80090a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80090aa:	e008      	b.n	80090be <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80090ac:	f7fe fb54 	bl	8007758 <HAL_GetTick>
 80090b0:	4602      	mov	r2, r0
 80090b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b4:	1ad3      	subs	r3, r2, r3
 80090b6:	2b03      	cmp	r3, #3
 80090b8:	d901      	bls.n	80090be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80090ba:	2303      	movs	r3, #3
 80090bc:	e197      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80090be:	f7ff fbf6 	bl	80088ae <LL_RCC_LSI2_IsReady>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d1f1      	bne.n	80090ac <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80090c8:	f7ff fbac 	bl	8008824 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090cc:	f7fe fb44 	bl	8007758 <HAL_GetTick>
 80090d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80090d2:	e008      	b.n	80090e6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80090d4:	f7fe fb40 	bl	8007758 <HAL_GetTick>
 80090d8:	4602      	mov	r2, r0
 80090da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d901      	bls.n	80090e6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80090e2:	2303      	movs	r3, #3
 80090e4:	e183      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80090e6:	f7ff fbae 	bl	8008846 <LL_RCC_LSI1_IsReady>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1f1      	bne.n	80090d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0304 	and.w	r3, r3, #4
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d05b      	beq.n	80091b4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80090fc:	4ba7      	ldr	r3, [pc, #668]	; (800939c <HAL_RCC_OscConfig+0x688>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009104:	2b00      	cmp	r3, #0
 8009106:	d114      	bne.n	8009132 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8009108:	f7ff fa4c 	bl	80085a4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800910c:	f7fe fb24 	bl	8007758 <HAL_GetTick>
 8009110:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009112:	e008      	b.n	8009126 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009114:	f7fe fb20 	bl	8007758 <HAL_GetTick>
 8009118:	4602      	mov	r2, r0
 800911a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911c:	1ad3      	subs	r3, r2, r3
 800911e:	2b02      	cmp	r3, #2
 8009120:	d901      	bls.n	8009126 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8009122:	2303      	movs	r3, #3
 8009124:	e163      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009126:	4b9d      	ldr	r3, [pc, #628]	; (800939c <HAL_RCC_OscConfig+0x688>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800912e:	2b00      	cmp	r3, #0
 8009130:	d0f0      	beq.n	8009114 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	2b01      	cmp	r3, #1
 8009138:	d102      	bne.n	8009140 <HAL_RCC_OscConfig+0x42c>
 800913a:	f7ff fb0c 	bl	8008756 <LL_RCC_LSE_Enable>
 800913e:	e00c      	b.n	800915a <HAL_RCC_OscConfig+0x446>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	2b05      	cmp	r3, #5
 8009146:	d104      	bne.n	8009152 <HAL_RCC_OscConfig+0x43e>
 8009148:	f7ff fb27 	bl	800879a <LL_RCC_LSE_EnableBypass>
 800914c:	f7ff fb03 	bl	8008756 <LL_RCC_LSE_Enable>
 8009150:	e003      	b.n	800915a <HAL_RCC_OscConfig+0x446>
 8009152:	f7ff fb11 	bl	8008778 <LL_RCC_LSE_Disable>
 8009156:	f7ff fb31 	bl	80087bc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d014      	beq.n	800918c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009162:	f7fe faf9 	bl	8007758 <HAL_GetTick>
 8009166:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8009168:	e00a      	b.n	8009180 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800916a:	f7fe faf5 	bl	8007758 <HAL_GetTick>
 800916e:	4602      	mov	r2, r0
 8009170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009172:	1ad3      	subs	r3, r2, r3
 8009174:	f241 3288 	movw	r2, #5000	; 0x1388
 8009178:	4293      	cmp	r3, r2
 800917a:	d901      	bls.n	8009180 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800917c:	2303      	movs	r3, #3
 800917e:	e136      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8009180:	f7ff fb2d 	bl	80087de <LL_RCC_LSE_IsReady>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d0ef      	beq.n	800916a <HAL_RCC_OscConfig+0x456>
 800918a:	e013      	b.n	80091b4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800918c:	f7fe fae4 	bl	8007758 <HAL_GetTick>
 8009190:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8009192:	e00a      	b.n	80091aa <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009194:	f7fe fae0 	bl	8007758 <HAL_GetTick>
 8009198:	4602      	mov	r2, r0
 800919a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919c:	1ad3      	subs	r3, r2, r3
 800919e:	f241 3288 	movw	r2, #5000	; 0x1388
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d901      	bls.n	80091aa <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80091a6:	2303      	movs	r3, #3
 80091a8:	e121      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80091aa:	f7ff fb18 	bl	80087de <LL_RCC_LSE_IsReady>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1ef      	bne.n	8009194 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d02c      	beq.n	800921a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d014      	beq.n	80091f2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80091c8:	f7ff fa91 	bl	80086ee <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091cc:	f7fe fac4 	bl	8007758 <HAL_GetTick>
 80091d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80091d2:	e008      	b.n	80091e6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80091d4:	f7fe fac0 	bl	8007758 <HAL_GetTick>
 80091d8:	4602      	mov	r2, r0
 80091da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d901      	bls.n	80091e6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80091e2:	2303      	movs	r3, #3
 80091e4:	e103      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80091e6:	f7ff faa4 	bl	8008732 <LL_RCC_HSI48_IsReady>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d0f1      	beq.n	80091d4 <HAL_RCC_OscConfig+0x4c0>
 80091f0:	e013      	b.n	800921a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80091f2:	f7ff fa8d 	bl	8008710 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091f6:	f7fe faaf 	bl	8007758 <HAL_GetTick>
 80091fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80091fc:	e008      	b.n	8009210 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80091fe:	f7fe faab 	bl	8007758 <HAL_GetTick>
 8009202:	4602      	mov	r2, r0
 8009204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009206:	1ad3      	subs	r3, r2, r3
 8009208:	2b02      	cmp	r3, #2
 800920a:	d901      	bls.n	8009210 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800920c:	2303      	movs	r3, #3
 800920e:	e0ee      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8009210:	f7ff fa8f 	bl	8008732 <LL_RCC_HSI48_IsReady>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d1f1      	bne.n	80091fe <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921e:	2b00      	cmp	r3, #0
 8009220:	f000 80e4 	beq.w	80093ec <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009224:	f7ff fbed 	bl	8008a02 <LL_RCC_GetSysClkSource>
 8009228:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800922a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009236:	2b02      	cmp	r3, #2
 8009238:	f040 80b4 	bne.w	80093a4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f003 0203 	and.w	r2, r3, #3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009246:	429a      	cmp	r2, r3
 8009248:	d123      	bne.n	8009292 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009254:	429a      	cmp	r2, r3
 8009256:	d11c      	bne.n	8009292 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	0a1b      	lsrs	r3, r3, #8
 800925c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009264:	429a      	cmp	r2, r3
 8009266:	d114      	bne.n	8009292 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009272:	429a      	cmp	r2, r3
 8009274:	d10d      	bne.n	8009292 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009280:	429a      	cmp	r2, r3
 8009282:	d106      	bne.n	8009292 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800928e:	429a      	cmp	r2, r3
 8009290:	d05d      	beq.n	800934e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	2b0c      	cmp	r3, #12
 8009296:	d058      	beq.n	800934a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d001      	beq.n	80092aa <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	e0a1      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80092aa:	f7ff fc84 	bl	8008bb6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80092ae:	f7fe fa53 	bl	8007758 <HAL_GetTick>
 80092b2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80092b4:	e008      	b.n	80092c8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092b6:	f7fe fa4f 	bl	8007758 <HAL_GetTick>
 80092ba:	4602      	mov	r2, r0
 80092bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092be:	1ad3      	subs	r3, r2, r3
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	d901      	bls.n	80092c8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80092c4:	2303      	movs	r3, #3
 80092c6:	e092      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80092c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1ef      	bne.n	80092b6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80092d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092da:	68da      	ldr	r2, [r3, #12]
 80092dc:	4b30      	ldr	r3, [pc, #192]	; (80093a0 <HAL_RCC_OscConfig+0x68c>)
 80092de:	4013      	ands	r3, r2
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80092e8:	4311      	orrs	r1, r2
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80092ee:	0212      	lsls	r2, r2, #8
 80092f0:	4311      	orrs	r1, r2
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80092f6:	4311      	orrs	r1, r2
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80092fc:	4311      	orrs	r1, r2
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009302:	430a      	orrs	r2, r1
 8009304:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009308:	4313      	orrs	r3, r2
 800930a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800930c:	f7ff fc44 	bl	8008b98 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800931a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800931e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009320:	f7fe fa1a 	bl	8007758 <HAL_GetTick>
 8009324:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009326:	e008      	b.n	800933a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009328:	f7fe fa16 	bl	8007758 <HAL_GetTick>
 800932c:	4602      	mov	r2, r0
 800932e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	2b02      	cmp	r3, #2
 8009334:	d901      	bls.n	800933a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8009336:	2303      	movs	r3, #3
 8009338:	e059      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800933a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009344:	2b00      	cmp	r3, #0
 8009346:	d0ef      	beq.n	8009328 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009348:	e050      	b.n	80093ec <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	e04f      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800934e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009358:	2b00      	cmp	r3, #0
 800935a:	d147      	bne.n	80093ec <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800935c:	f7ff fc1c 	bl	8008b98 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800936a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800936e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009370:	f7fe f9f2 	bl	8007758 <HAL_GetTick>
 8009374:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009376:	e008      	b.n	800938a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009378:	f7fe f9ee 	bl	8007758 <HAL_GetTick>
 800937c:	4602      	mov	r2, r0
 800937e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	2b02      	cmp	r3, #2
 8009384:	d901      	bls.n	800938a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8009386:	2303      	movs	r3, #3
 8009388:	e031      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800938a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009394:	2b00      	cmp	r3, #0
 8009396:	d0ef      	beq.n	8009378 <HAL_RCC_OscConfig+0x664>
 8009398:	e028      	b.n	80093ec <HAL_RCC_OscConfig+0x6d8>
 800939a:	bf00      	nop
 800939c:	58000400 	.word	0x58000400
 80093a0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	2b0c      	cmp	r3, #12
 80093a8:	d01e      	beq.n	80093e8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093aa:	f7ff fc04 	bl	8008bb6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093ae:	f7fe f9d3 	bl	8007758 <HAL_GetTick>
 80093b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80093b4:	e008      	b.n	80093c8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093b6:	f7fe f9cf 	bl	8007758 <HAL_GetTick>
 80093ba:	4602      	mov	r2, r0
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	d901      	bls.n	80093c8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80093c4:	2303      	movs	r3, #3
 80093c6:	e012      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80093c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1ef      	bne.n	80093b6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80093d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093da:	68da      	ldr	r2, [r3, #12]
 80093dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80093e0:	4b05      	ldr	r3, [pc, #20]	; (80093f8 <HAL_RCC_OscConfig+0x6e4>)
 80093e2:	4013      	ands	r3, r2
 80093e4:	60cb      	str	r3, [r1, #12]
 80093e6:	e001      	b.n	80093ec <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	e000      	b.n	80093ee <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80093ec:	2300      	movs	r3, #0
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3734      	adds	r7, #52	; 0x34
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd90      	pop	{r4, r7, pc}
 80093f6:	bf00      	nop
 80093f8:	eefefffc 	.word	0xeefefffc

080093fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d101      	bne.n	8009410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	e12d      	b.n	800966c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009410:	4b98      	ldr	r3, [pc, #608]	; (8009674 <HAL_RCC_ClockConfig+0x278>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f003 0307 	and.w	r3, r3, #7
 8009418:	683a      	ldr	r2, [r7, #0]
 800941a:	429a      	cmp	r2, r3
 800941c:	d91b      	bls.n	8009456 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800941e:	4b95      	ldr	r3, [pc, #596]	; (8009674 <HAL_RCC_ClockConfig+0x278>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f023 0207 	bic.w	r2, r3, #7
 8009426:	4993      	ldr	r1, [pc, #588]	; (8009674 <HAL_RCC_ClockConfig+0x278>)
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	4313      	orrs	r3, r2
 800942c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800942e:	f7fe f993 	bl	8007758 <HAL_GetTick>
 8009432:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009434:	e008      	b.n	8009448 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009436:	f7fe f98f 	bl	8007758 <HAL_GetTick>
 800943a:	4602      	mov	r2, r0
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	1ad3      	subs	r3, r2, r3
 8009440:	2b02      	cmp	r3, #2
 8009442:	d901      	bls.n	8009448 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8009444:	2303      	movs	r3, #3
 8009446:	e111      	b.n	800966c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009448:	4b8a      	ldr	r3, [pc, #552]	; (8009674 <HAL_RCC_ClockConfig+0x278>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f003 0307 	and.w	r3, r3, #7
 8009450:	683a      	ldr	r2, [r7, #0]
 8009452:	429a      	cmp	r2, r3
 8009454:	d1ef      	bne.n	8009436 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 0302 	and.w	r3, r3, #2
 800945e:	2b00      	cmp	r3, #0
 8009460:	d016      	beq.n	8009490 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	4618      	mov	r0, r3
 8009468:	f7ff fad7 	bl	8008a1a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800946c:	f7fe f974 	bl	8007758 <HAL_GetTick>
 8009470:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8009472:	e008      	b.n	8009486 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009474:	f7fe f970 	bl	8007758 <HAL_GetTick>
 8009478:	4602      	mov	r2, r0
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	2b02      	cmp	r3, #2
 8009480:	d901      	bls.n	8009486 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8009482:	2303      	movs	r3, #3
 8009484:	e0f2      	b.n	800966c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8009486:	f7ff fbe8 	bl	8008c5a <LL_RCC_IsActiveFlag_HPRE>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d0f1      	beq.n	8009474 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f003 0320 	and.w	r3, r3, #32
 8009498:	2b00      	cmp	r3, #0
 800949a:	d016      	beq.n	80094ca <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	695b      	ldr	r3, [r3, #20]
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7ff face 	bl	8008a42 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80094a6:	f7fe f957 	bl	8007758 <HAL_GetTick>
 80094aa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80094ac:	e008      	b.n	80094c0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80094ae:	f7fe f953 	bl	8007758 <HAL_GetTick>
 80094b2:	4602      	mov	r2, r0
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	2b02      	cmp	r3, #2
 80094ba:	d901      	bls.n	80094c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80094bc:	2303      	movs	r3, #3
 80094be:	e0d5      	b.n	800966c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80094c0:	f7ff fbdd 	bl	8008c7e <LL_RCC_IsActiveFlag_C2HPRE>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d0f1      	beq.n	80094ae <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d016      	beq.n	8009504 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	699b      	ldr	r3, [r3, #24]
 80094da:	4618      	mov	r0, r3
 80094dc:	f7ff fac7 	bl	8008a6e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80094e0:	f7fe f93a 	bl	8007758 <HAL_GetTick>
 80094e4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80094e6:	e008      	b.n	80094fa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80094e8:	f7fe f936 	bl	8007758 <HAL_GetTick>
 80094ec:	4602      	mov	r2, r0
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d901      	bls.n	80094fa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80094f6:	2303      	movs	r3, #3
 80094f8:	e0b8      	b.n	800966c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80094fa:	f7ff fbd3 	bl	8008ca4 <LL_RCC_IsActiveFlag_SHDHPRE>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d0f1      	beq.n	80094e8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f003 0304 	and.w	r3, r3, #4
 800950c:	2b00      	cmp	r3, #0
 800950e:	d016      	beq.n	800953e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	4618      	mov	r0, r3
 8009516:	f7ff fac1 	bl	8008a9c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800951a:	f7fe f91d 	bl	8007758 <HAL_GetTick>
 800951e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8009520:	e008      	b.n	8009534 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009522:	f7fe f919 	bl	8007758 <HAL_GetTick>
 8009526:	4602      	mov	r2, r0
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	1ad3      	subs	r3, r2, r3
 800952c:	2b02      	cmp	r3, #2
 800952e:	d901      	bls.n	8009534 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8009530:	2303      	movs	r3, #3
 8009532:	e09b      	b.n	800966c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8009534:	f7ff fbc9 	bl	8008cca <LL_RCC_IsActiveFlag_PPRE1>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d0f1      	beq.n	8009522 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f003 0308 	and.w	r3, r3, #8
 8009546:	2b00      	cmp	r3, #0
 8009548:	d017      	beq.n	800957a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	691b      	ldr	r3, [r3, #16]
 800954e:	00db      	lsls	r3, r3, #3
 8009550:	4618      	mov	r0, r3
 8009552:	f7ff fab7 	bl	8008ac4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009556:	f7fe f8ff 	bl	8007758 <HAL_GetTick>
 800955a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800955c:	e008      	b.n	8009570 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800955e:	f7fe f8fb 	bl	8007758 <HAL_GetTick>
 8009562:	4602      	mov	r2, r0
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	1ad3      	subs	r3, r2, r3
 8009568:	2b02      	cmp	r3, #2
 800956a:	d901      	bls.n	8009570 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800956c:	2303      	movs	r3, #3
 800956e:	e07d      	b.n	800966c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8009570:	f7ff fbbd 	bl	8008cee <LL_RCC_IsActiveFlag_PPRE2>
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d0f1      	beq.n	800955e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f003 0301 	and.w	r3, r3, #1
 8009582:	2b00      	cmp	r3, #0
 8009584:	d043      	beq.n	800960e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	2b02      	cmp	r3, #2
 800958c:	d106      	bne.n	800959c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800958e:	f7ff f857 	bl	8008640 <LL_RCC_HSE_IsReady>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d11e      	bne.n	80095d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	e067      	b.n	800966c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	2b03      	cmp	r3, #3
 80095a2:	d106      	bne.n	80095b2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80095a4:	f7ff fb16 	bl	8008bd4 <LL_RCC_PLL_IsReady>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d113      	bne.n	80095d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80095ae:	2301      	movs	r3, #1
 80095b0:	e05c      	b.n	800966c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d106      	bne.n	80095c8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80095ba:	f7ff f9bf 	bl	800893c <LL_RCC_MSI_IsReady>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d108      	bne.n	80095d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	e051      	b.n	800966c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80095c8:	f7ff f86a 	bl	80086a0 <LL_RCC_HSI_IsReady>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d101      	bne.n	80095d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	e04a      	b.n	800966c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	4618      	mov	r0, r3
 80095dc:	f7ff f9fd 	bl	80089da <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095e0:	f7fe f8ba 	bl	8007758 <HAL_GetTick>
 80095e4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095e6:	e00a      	b.n	80095fe <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095e8:	f7fe f8b6 	bl	8007758 <HAL_GetTick>
 80095ec:	4602      	mov	r2, r0
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d901      	bls.n	80095fe <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80095fa:	2303      	movs	r3, #3
 80095fc:	e036      	b.n	800966c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095fe:	f7ff fa00 	bl	8008a02 <LL_RCC_GetSysClkSource>
 8009602:	4602      	mov	r2, r0
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	429a      	cmp	r2, r3
 800960c:	d1ec      	bne.n	80095e8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800960e:	4b19      	ldr	r3, [pc, #100]	; (8009674 <HAL_RCC_ClockConfig+0x278>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 0307 	and.w	r3, r3, #7
 8009616:	683a      	ldr	r2, [r7, #0]
 8009618:	429a      	cmp	r2, r3
 800961a:	d21b      	bcs.n	8009654 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800961c:	4b15      	ldr	r3, [pc, #84]	; (8009674 <HAL_RCC_ClockConfig+0x278>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f023 0207 	bic.w	r2, r3, #7
 8009624:	4913      	ldr	r1, [pc, #76]	; (8009674 <HAL_RCC_ClockConfig+0x278>)
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	4313      	orrs	r3, r2
 800962a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800962c:	f7fe f894 	bl	8007758 <HAL_GetTick>
 8009630:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009632:	e008      	b.n	8009646 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009634:	f7fe f890 	bl	8007758 <HAL_GetTick>
 8009638:	4602      	mov	r2, r0
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	1ad3      	subs	r3, r2, r3
 800963e:	2b02      	cmp	r3, #2
 8009640:	d901      	bls.n	8009646 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8009642:	2303      	movs	r3, #3
 8009644:	e012      	b.n	800966c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009646:	4b0b      	ldr	r3, [pc, #44]	; (8009674 <HAL_RCC_ClockConfig+0x278>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f003 0307 	and.w	r3, r3, #7
 800964e:	683a      	ldr	r2, [r7, #0]
 8009650:	429a      	cmp	r2, r3
 8009652:	d1ef      	bne.n	8009634 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8009654:	f000 f8d0 	bl	80097f8 <HAL_RCC_GetHCLKFreq>
 8009658:	4603      	mov	r3, r0
 800965a:	4a07      	ldr	r2, [pc, #28]	; (8009678 <HAL_RCC_ClockConfig+0x27c>)
 800965c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800965e:	f7fe f887 	bl	8007770 <HAL_GetTickPrio>
 8009662:	4603      	mov	r3, r0
 8009664:	4618      	mov	r0, r3
 8009666:	f7fd fe3f 	bl	80072e8 <HAL_InitTick>
 800966a:	4603      	mov	r3, r0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}
 8009674:	58004000 	.word	0x58004000
 8009678:	20000154 	.word	0x20000154

0800967c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b08c      	sub	sp, #48	; 0x30
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8009688:	2302      	movs	r3, #2
 800968a:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800968c:	2303      	movs	r3, #3
 800968e:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8009690:	2300      	movs	r3, #0
 8009692:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800969a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	0c1b      	lsrs	r3, r3, #16
 80096a0:	f003 030f 	and.w	r3, r3, #15
 80096a4:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 80096a8:	029b      	lsls	r3, r3, #10
 80096aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	0c1b      	lsrs	r3, r3, #16
 80096b0:	f003 030f 	and.w	r3, r3, #15
 80096b4:	627b      	str	r3, [r7, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index));
 80096b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80096bc:	2101      	movs	r1, #1
 80096be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c0:	fa01 f303 	lsl.w	r3, r1, r3
 80096c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80096c8:	4313      	orrs	r3, r2
 80096ca:	64cb      	str	r3, [r1, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	0d1b      	lsrs	r3, r3, #20
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 80096da:	f107 0310 	add.w	r3, r7, #16
 80096de:	4619      	mov	r1, r3
 80096e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096e2:	f7fe fc35 	bl	8007f50 <HAL_GPIO_Init>

  if (mcoindex == RCC_MCO1_INDEX)
 80096e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d104      	bne.n	80096f6 <HAL_RCC_MCOConfig+0x7a>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
 80096ec:	6879      	ldr	r1, [r7, #4]
 80096ee:	68b8      	ldr	r0, [r7, #8]
 80096f0:	f7ff fa3b 	bl	8008b6a <LL_RCC_ConfigMCO>
    LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
  }
#endif /* RCC_MCO3_SUPPORT */
  else
  {}
}
 80096f4:	e010      	b.n	8009718 <HAL_RCC_MCOConfig+0x9c>
  else if (mcoindex == RCC_MCO2_INDEX)
 80096f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096fc:	d104      	bne.n	8009708 <HAL_RCC_MCOConfig+0x8c>
    LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
 80096fe:	6879      	ldr	r1, [r7, #4]
 8009700:	68b8      	ldr	r0, [r7, #8]
 8009702:	f7ff fa32 	bl	8008b6a <LL_RCC_ConfigMCO>
}
 8009706:	e007      	b.n	8009718 <HAL_RCC_MCOConfig+0x9c>
  else if (mcoindex == RCC_MCO3_INDEX)
 8009708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800970e:	d103      	bne.n	8009718 <HAL_RCC_MCOConfig+0x9c>
    LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
 8009710:	6879      	ldr	r1, [r7, #4]
 8009712:	68b8      	ldr	r0, [r7, #8]
 8009714:	f7ff fa29 	bl	8008b6a <LL_RCC_ConfigMCO>
}
 8009718:	bf00      	nop
 800971a:	3730      	adds	r7, #48	; 0x30
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009720:	b590      	push	{r4, r7, lr}
 8009722:	b085      	sub	sp, #20
 8009724:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009726:	f7ff f96c 	bl	8008a02 <LL_RCC_GetSysClkSource>
 800972a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d10a      	bne.n	8009748 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8009732:	f7ff f928 	bl	8008986 <LL_RCC_MSI_GetRange>
 8009736:	4603      	mov	r3, r0
 8009738:	091b      	lsrs	r3, r3, #4
 800973a:	f003 030f 	and.w	r3, r3, #15
 800973e:	4a2b      	ldr	r2, [pc, #172]	; (80097ec <HAL_RCC_GetSysClockFreq+0xcc>)
 8009740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009744:	60fb      	str	r3, [r7, #12]
 8009746:	e04b      	b.n	80097e0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2b04      	cmp	r3, #4
 800974c:	d102      	bne.n	8009754 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800974e:	4b28      	ldr	r3, [pc, #160]	; (80097f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009750:	60fb      	str	r3, [r7, #12]
 8009752:	e045      	b.n	80097e0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b08      	cmp	r3, #8
 8009758:	d10a      	bne.n	8009770 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800975a:	f7fe ff41 	bl	80085e0 <LL_RCC_HSE_IsEnabledDiv2>
 800975e:	4603      	mov	r3, r0
 8009760:	2b01      	cmp	r3, #1
 8009762:	d102      	bne.n	800976a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8009764:	4b22      	ldr	r3, [pc, #136]	; (80097f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009766:	60fb      	str	r3, [r7, #12]
 8009768:	e03a      	b.n	80097e0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800976a:	4b22      	ldr	r3, [pc, #136]	; (80097f4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800976c:	60fb      	str	r3, [r7, #12]
 800976e:	e037      	b.n	80097e0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8009770:	f7ff fa67 	bl	8008c42 <LL_RCC_PLL_GetMainSource>
 8009774:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	2b02      	cmp	r3, #2
 800977a:	d003      	beq.n	8009784 <HAL_RCC_GetSysClockFreq+0x64>
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	2b03      	cmp	r3, #3
 8009780:	d003      	beq.n	800978a <HAL_RCC_GetSysClockFreq+0x6a>
 8009782:	e00d      	b.n	80097a0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8009784:	4b1a      	ldr	r3, [pc, #104]	; (80097f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009786:	60bb      	str	r3, [r7, #8]
        break;
 8009788:	e015      	b.n	80097b6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800978a:	f7fe ff29 	bl	80085e0 <LL_RCC_HSE_IsEnabledDiv2>
 800978e:	4603      	mov	r3, r0
 8009790:	2b01      	cmp	r3, #1
 8009792:	d102      	bne.n	800979a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8009794:	4b16      	ldr	r3, [pc, #88]	; (80097f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009796:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8009798:	e00d      	b.n	80097b6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800979a:	4b16      	ldr	r3, [pc, #88]	; (80097f4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800979c:	60bb      	str	r3, [r7, #8]
        break;
 800979e:	e00a      	b.n	80097b6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80097a0:	f7ff f8f1 	bl	8008986 <LL_RCC_MSI_GetRange>
 80097a4:	4603      	mov	r3, r0
 80097a6:	091b      	lsrs	r3, r3, #4
 80097a8:	f003 030f 	and.w	r3, r3, #15
 80097ac:	4a0f      	ldr	r2, [pc, #60]	; (80097ec <HAL_RCC_GetSysClockFreq+0xcc>)
 80097ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097b2:	60bb      	str	r3, [r7, #8]
        break;
 80097b4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80097b6:	f7ff fa1f 	bl	8008bf8 <LL_RCC_PLL_GetN>
 80097ba:	4602      	mov	r2, r0
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	fb03 f402 	mul.w	r4, r3, r2
 80097c2:	f7ff fa32 	bl	8008c2a <LL_RCC_PLL_GetDivider>
 80097c6:	4603      	mov	r3, r0
 80097c8:	091b      	lsrs	r3, r3, #4
 80097ca:	3301      	adds	r3, #1
 80097cc:	fbb4 f4f3 	udiv	r4, r4, r3
 80097d0:	f7ff fa1f 	bl	8008c12 <LL_RCC_PLL_GetR>
 80097d4:	4603      	mov	r3, r0
 80097d6:	0f5b      	lsrs	r3, r3, #29
 80097d8:	3301      	adds	r3, #1
 80097da:	fbb4 f3f3 	udiv	r3, r4, r3
 80097de:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80097e0:	68fb      	ldr	r3, [r7, #12]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd90      	pop	{r4, r7, pc}
 80097ea:	bf00      	nop
 80097ec:	08018484 	.word	0x08018484
 80097f0:	00f42400 	.word	0x00f42400
 80097f4:	01e84800 	.word	0x01e84800

080097f8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80097f8:	b598      	push	{r3, r4, r7, lr}
 80097fa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80097fc:	f7ff ff90 	bl	8009720 <HAL_RCC_GetSysClockFreq>
 8009800:	4604      	mov	r4, r0
 8009802:	f7ff f973 	bl	8008aec <LL_RCC_GetAHBPrescaler>
 8009806:	4603      	mov	r3, r0
 8009808:	091b      	lsrs	r3, r3, #4
 800980a:	f003 030f 	and.w	r3, r3, #15
 800980e:	4a03      	ldr	r2, [pc, #12]	; (800981c <HAL_RCC_GetHCLKFreq+0x24>)
 8009810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009814:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8009818:	4618      	mov	r0, r3
 800981a:	bd98      	pop	{r3, r4, r7, pc}
 800981c:	08018424 	.word	0x08018424

08009820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009820:	b598      	push	{r3, r4, r7, lr}
 8009822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009824:	f7ff ffe8 	bl	80097f8 <HAL_RCC_GetHCLKFreq>
 8009828:	4604      	mov	r4, r0
 800982a:	f7ff f986 	bl	8008b3a <LL_RCC_GetAPB1Prescaler>
 800982e:	4603      	mov	r3, r0
 8009830:	0a1b      	lsrs	r3, r3, #8
 8009832:	f003 0307 	and.w	r3, r3, #7
 8009836:	4a04      	ldr	r2, [pc, #16]	; (8009848 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800983c:	f003 031f 	and.w	r3, r3, #31
 8009840:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009844:	4618      	mov	r0, r3
 8009846:	bd98      	pop	{r3, r4, r7, pc}
 8009848:	08018464 	.word	0x08018464

0800984c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800984c:	b598      	push	{r3, r4, r7, lr}
 800984e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8009850:	f7ff ffd2 	bl	80097f8 <HAL_RCC_GetHCLKFreq>
 8009854:	4604      	mov	r4, r0
 8009856:	f7ff f97c 	bl	8008b52 <LL_RCC_GetAPB2Prescaler>
 800985a:	4603      	mov	r3, r0
 800985c:	0adb      	lsrs	r3, r3, #11
 800985e:	f003 0307 	and.w	r3, r3, #7
 8009862:	4a04      	ldr	r2, [pc, #16]	; (8009874 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009868:	f003 031f 	and.w	r3, r3, #31
 800986c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009870:	4618      	mov	r0, r3
 8009872:	bd98      	pop	{r3, r4, r7, pc}
 8009874:	08018464 	.word	0x08018464

08009878 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	226f      	movs	r2, #111	; 0x6f
 8009886:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8009888:	f7ff f8bb 	bl	8008a02 <LL_RCC_GetSysClkSource>
 800988c:	4602      	mov	r2, r0
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8009892:	f7ff f92b 	bl	8008aec <LL_RCC_GetAHBPrescaler>
 8009896:	4602      	mov	r2, r0
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800989c:	f7ff f94d 	bl	8008b3a <LL_RCC_GetAPB1Prescaler>
 80098a0:	4602      	mov	r2, r0
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80098a6:	f7ff f954 	bl	8008b52 <LL_RCC_GetAPB2Prescaler>
 80098aa:	4602      	mov	r2, r0
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80098b0:	f7ff f928 	bl	8008b04 <LL_C2_RCC_GetAHBPrescaler>
 80098b4:	4602      	mov	r2, r0
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80098ba:	f7ff f930 	bl	8008b1e <LL_RCC_GetAHB4Prescaler>
 80098be:	4602      	mov	r2, r0
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80098c4:	4b04      	ldr	r3, [pc, #16]	; (80098d8 <HAL_RCC_GetClockConfig+0x60>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f003 0207 	and.w	r2, r3, #7
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	601a      	str	r2, [r3, #0]
}
 80098d0:	bf00      	nop
 80098d2:	3708      	adds	r7, #8
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	58004000 	.word	0x58004000

080098dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80098dc:	b590      	push	{r4, r7, lr}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2bb0      	cmp	r3, #176	; 0xb0
 80098e8:	d903      	bls.n	80098f2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80098ea:	4b15      	ldr	r3, [pc, #84]	; (8009940 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80098ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ee:	60fb      	str	r3, [r7, #12]
 80098f0:	e007      	b.n	8009902 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	091b      	lsrs	r3, r3, #4
 80098f6:	f003 030f 	and.w	r3, r3, #15
 80098fa:	4a11      	ldr	r2, [pc, #68]	; (8009940 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80098fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009900:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8009902:	f7ff f90c 	bl	8008b1e <LL_RCC_GetAHB4Prescaler>
 8009906:	4603      	mov	r3, r0
 8009908:	091b      	lsrs	r3, r3, #4
 800990a:	f003 030f 	and.w	r3, r3, #15
 800990e:	4a0d      	ldr	r2, [pc, #52]	; (8009944 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8009910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	fbb2 f3f3 	udiv	r3, r2, r3
 800991a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	4a0a      	ldr	r2, [pc, #40]	; (8009948 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8009920:	fba2 2303 	umull	r2, r3, r2, r3
 8009924:	0c9c      	lsrs	r4, r3, #18
 8009926:	f7fe fe4d 	bl	80085c4 <HAL_PWREx_GetVoltageRange>
 800992a:	4603      	mov	r3, r0
 800992c:	4619      	mov	r1, r3
 800992e:	4620      	mov	r0, r4
 8009930:	f000 f80c 	bl	800994c <RCC_SetFlashLatency>
 8009934:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8009936:	4618      	mov	r0, r3
 8009938:	3714      	adds	r7, #20
 800993a:	46bd      	mov	sp, r7
 800993c:	bd90      	pop	{r4, r7, pc}
 800993e:	bf00      	nop
 8009940:	08018484 	.word	0x08018484
 8009944:	08018424 	.word	0x08018424
 8009948:	431bde83 	.word	0x431bde83

0800994c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800994c:	b590      	push	{r4, r7, lr}
 800994e:	b093      	sub	sp, #76	; 0x4c
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8009956:	4b37      	ldr	r3, [pc, #220]	; (8009a34 <RCC_SetFlashLatency+0xe8>)
 8009958:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800995c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800995e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8009962:	4a35      	ldr	r2, [pc, #212]	; (8009a38 <RCC_SetFlashLatency+0xec>)
 8009964:	f107 031c 	add.w	r3, r7, #28
 8009968:	ca07      	ldmia	r2, {r0, r1, r2}
 800996a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800996e:	4b33      	ldr	r3, [pc, #204]	; (8009a3c <RCC_SetFlashLatency+0xf0>)
 8009970:	f107 040c 	add.w	r4, r7, #12
 8009974:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009976:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800997a:	2300      	movs	r3, #0
 800997c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009984:	d11a      	bne.n	80099bc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009986:	2300      	movs	r3, #0
 8009988:	643b      	str	r3, [r7, #64]	; 0x40
 800998a:	e013      	b.n	80099b4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800998c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	3348      	adds	r3, #72	; 0x48
 8009992:	443b      	add	r3, r7
 8009994:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	429a      	cmp	r2, r3
 800999c:	d807      	bhi.n	80099ae <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800999e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	3348      	adds	r3, #72	; 0x48
 80099a4:	443b      	add	r3, r7
 80099a6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80099aa:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80099ac:	e020      	b.n	80099f0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80099ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099b0:	3301      	adds	r3, #1
 80099b2:	643b      	str	r3, [r7, #64]	; 0x40
 80099b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099b6:	2b03      	cmp	r3, #3
 80099b8:	d9e8      	bls.n	800998c <RCC_SetFlashLatency+0x40>
 80099ba:	e019      	b.n	80099f0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80099bc:	2300      	movs	r3, #0
 80099be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099c0:	e013      	b.n	80099ea <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80099c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	3348      	adds	r3, #72	; 0x48
 80099c8:	443b      	add	r3, r7
 80099ca:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d807      	bhi.n	80099e4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80099d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	3348      	adds	r3, #72	; 0x48
 80099da:	443b      	add	r3, r7
 80099dc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80099e0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80099e2:	e005      	b.n	80099f0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80099e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099e6:	3301      	adds	r3, #1
 80099e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d9e8      	bls.n	80099c2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80099f0:	4b13      	ldr	r3, [pc, #76]	; (8009a40 <RCC_SetFlashLatency+0xf4>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f023 0207 	bic.w	r2, r3, #7
 80099f8:	4911      	ldr	r1, [pc, #68]	; (8009a40 <RCC_SetFlashLatency+0xf4>)
 80099fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099fc:	4313      	orrs	r3, r2
 80099fe:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009a00:	f7fd feaa 	bl	8007758 <HAL_GetTick>
 8009a04:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8009a06:	e008      	b.n	8009a1a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009a08:	f7fd fea6 	bl	8007758 <HAL_GetTick>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a10:	1ad3      	subs	r3, r2, r3
 8009a12:	2b02      	cmp	r3, #2
 8009a14:	d901      	bls.n	8009a1a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8009a16:	2303      	movs	r3, #3
 8009a18:	e007      	b.n	8009a2a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8009a1a:	4b09      	ldr	r3, [pc, #36]	; (8009a40 <RCC_SetFlashLatency+0xf4>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f003 0307 	and.w	r3, r3, #7
 8009a22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d1ef      	bne.n	8009a08 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	374c      	adds	r7, #76	; 0x4c
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd90      	pop	{r4, r7, pc}
 8009a32:	bf00      	nop
 8009a34:	080181c8 	.word	0x080181c8
 8009a38:	080181d8 	.word	0x080181d8
 8009a3c:	080181e4 	.word	0x080181e4
 8009a40:	58004000 	.word	0x58004000

08009a44 <LL_RCC_LSE_IsEnabled>:
{
 8009a44:	b480      	push	{r7}
 8009a46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8009a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a50:	f003 0301 	and.w	r3, r3, #1
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d101      	bne.n	8009a5c <LL_RCC_LSE_IsEnabled+0x18>
 8009a58:	2301      	movs	r3, #1
 8009a5a:	e000      	b.n	8009a5e <LL_RCC_LSE_IsEnabled+0x1a>
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <LL_RCC_LSE_IsReady>:
{
 8009a68:	b480      	push	{r7}
 8009a6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a74:	f003 0302 	and.w	r3, r3, #2
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	d101      	bne.n	8009a80 <LL_RCC_LSE_IsReady+0x18>
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	e000      	b.n	8009a82 <LL_RCC_LSE_IsReady+0x1a>
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <LL_RCC_MSI_EnablePLLMode>:
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8009a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009a9a:	f043 0304 	orr.w	r3, r3, #4
 8009a9e:	6013      	str	r3, [r2, #0]
}
 8009aa0:	bf00      	nop
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <LL_RCC_SetRFWKPClockSource>:
{
 8009aaa:	b480      	push	{r7}
 8009aac:	b083      	sub	sp, #12
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8009ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009aba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009abe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8009aca:	bf00      	nop
 8009acc:	370c      	adds	r7, #12
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr

08009ad6 <LL_RCC_SetSMPSClockSource>:
{
 8009ad6:	b480      	push	{r7}
 8009ad8:	b083      	sub	sp, #12
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8009ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae4:	f023 0203 	bic.w	r2, r3, #3
 8009ae8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4313      	orrs	r3, r2
 8009af0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009af2:	bf00      	nop
 8009af4:	370c      	adds	r7, #12
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr

08009afe <LL_RCC_SetSMPSPrescaler>:
{
 8009afe:	b480      	push	{r7}
 8009b00:	b083      	sub	sp, #12
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8009b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009b10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009b1a:	bf00      	nop
 8009b1c:	370c      	adds	r7, #12
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr

08009b26 <LL_RCC_SetUSARTClockSource>:
{
 8009b26:	b480      	push	{r7}
 8009b28:	b083      	sub	sp, #12
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8009b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b36:	f023 0203 	bic.w	r2, r3, #3
 8009b3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4313      	orrs	r3, r2
 8009b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009b46:	bf00      	nop
 8009b48:	370c      	adds	r7, #12
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr

08009b52 <LL_RCC_SetLPUARTClockSource>:
{
 8009b52:	b480      	push	{r7}
 8009b54:	b083      	sub	sp, #12
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8009b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009b66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009b72:	bf00      	nop
 8009b74:	370c      	adds	r7, #12
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr

08009b7e <LL_RCC_SetI2CClockSource>:
{
 8009b7e:	b480      	push	{r7}
 8009b80:	b083      	sub	sp, #12
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8009b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	091b      	lsrs	r3, r3, #4
 8009b92:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8009b96:	43db      	mvns	r3, r3
 8009b98:	401a      	ands	r2, r3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	011b      	lsls	r3, r3, #4
 8009b9e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8009ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009bac:	bf00      	nop
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <LL_RCC_SetLPTIMClockSource>:
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8009bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009bc4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	0c1b      	lsrs	r3, r3, #16
 8009bcc:	041b      	lsls	r3, r3, #16
 8009bce:	43db      	mvns	r3, r3
 8009bd0:	401a      	ands	r2, r3
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	041b      	lsls	r3, r3, #16
 8009bd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009be0:	bf00      	nop
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <LL_RCC_SetSAIClockSource>:
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8009bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bfc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009c00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009c0c:	bf00      	nop
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <LL_RCC_SetRNGClockSource>:
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8009c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c28:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009c2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <LL_RCC_SetCLK48ClockSource>:
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8009c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009c58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009c64:	bf00      	nop
 8009c66:	370c      	adds	r7, #12
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <LL_RCC_SetUSBClockSource>:
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f7ff ffe3 	bl	8009c44 <LL_RCC_SetCLK48ClockSource>
}
 8009c7e:	bf00      	nop
 8009c80:	3708      	adds	r7, #8
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <LL_RCC_SetADCClockSource>:
{
 8009c86:	b480      	push	{r7}
 8009c88:	b083      	sub	sp, #12
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8009c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009c9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009ca6:	bf00      	nop
 8009ca8:	370c      	adds	r7, #12
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr

08009cb2 <LL_RCC_SetRTCClockSource>:
{
 8009cb2:	b480      	push	{r7}
 8009cb4:	b083      	sub	sp, #12
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009cc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009cd2:	bf00      	nop
 8009cd4:	370c      	adds	r7, #12
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr

08009cde <LL_RCC_GetRTCClockSource>:
{
 8009cde:	b480      	push	{r7}
 8009ce0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8009ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <LL_RCC_ForceBackupDomainReset>:
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009d10:	bf00      	nop
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr

08009d1a <LL_RCC_ReleaseBackupDomainReset>:
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009d32:	bf00      	nop
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <LL_RCC_PLLSAI1_Enable>:
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8009d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009d4e:	6013      	str	r3, [r2, #0]
}
 8009d50:	bf00      	nop
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr

08009d5a <LL_RCC_PLLSAI1_Disable>:
{
 8009d5a:	b480      	push	{r7}
 8009d5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8009d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009d6c:	6013      	str	r3, [r2, #0]
}
 8009d6e:	bf00      	nop
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <LL_RCC_PLLSAI1_IsReady>:
{
 8009d78:	b480      	push	{r7}
 8009d7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8009d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d8a:	d101      	bne.n	8009d90 <LL_RCC_PLLSAI1_IsReady+0x18>
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e000      	b.n	8009d92 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b088      	sub	sp, #32
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8009da4:	2300      	movs	r3, #0
 8009da6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8009da8:	2300      	movs	r3, #0
 8009daa:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d034      	beq.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dbc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009dc0:	d021      	beq.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8009dc2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009dc6:	d81b      	bhi.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009dc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009dcc:	d01d      	beq.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8009dce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009dd2:	d815      	bhi.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d00b      	beq.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8009dd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ddc:	d110      	bne.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8009dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dec:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8009dee:	e00d      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	3304      	adds	r3, #4
 8009df4:	4618      	mov	r0, r3
 8009df6:	f000 f94d 	bl	800a094 <RCCEx_PLLSAI1_ConfigNP>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009dfe:	e005      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8009e00:	2301      	movs	r3, #1
 8009e02:	77fb      	strb	r3, [r7, #31]
        break;
 8009e04:	e002      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8009e06:	bf00      	nop
 8009e08:	e000      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8009e0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e0c:	7ffb      	ldrb	r3, [r7, #31]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d105      	bne.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7ff fee8 	bl	8009bec <LL_RCC_SetSAIClockSource>
 8009e1c:	e001      	b.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e1e:	7ffb      	ldrb	r3, [r7, #31]
 8009e20:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d046      	beq.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8009e2e:	f7ff ff56 	bl	8009cde <LL_RCC_GetRTCClockSource>
 8009e32:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e38:	69ba      	ldr	r2, [r7, #24]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d03c      	beq.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8009e3e:	f7fe fbb1 	bl	80085a4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d105      	bne.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7ff ff30 	bl	8009cb2 <LL_RCC_SetRTCClockSource>
 8009e52:	e02e      	b.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8009e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e5c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8009e5e:	f7ff ff4b 	bl	8009cf8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8009e62:	f7ff ff5a 	bl	8009d1a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e70:	4313      	orrs	r3, r2
 8009e72:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8009e74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8009e7e:	f7ff fde1 	bl	8009a44 <LL_RCC_LSE_IsEnabled>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d114      	bne.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009e88:	f7fd fc66 	bl	8007758 <HAL_GetTick>
 8009e8c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8009e8e:	e00b      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e90:	f7fd fc62 	bl	8007758 <HAL_GetTick>
 8009e94:	4602      	mov	r2, r0
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	1ad3      	subs	r3, r2, r3
 8009e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d902      	bls.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	77fb      	strb	r3, [r7, #31]
              break;
 8009ea6:	e004      	b.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8009ea8:	f7ff fdde 	bl	8009a68 <LL_RCC_LSE_IsReady>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d1ee      	bne.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8009eb2:	7ffb      	ldrb	r3, [r7, #31]
 8009eb4:	77bb      	strb	r3, [r7, #30]
 8009eb6:	e001      	b.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eb8:	7ffb      	ldrb	r3, [r7, #31]
 8009eba:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f003 0301 	and.w	r3, r3, #1
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d004      	beq.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	699b      	ldr	r3, [r3, #24]
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7ff fe2a 	bl	8009b26 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f003 0302 	and.w	r3, r3, #2
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d004      	beq.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	69db      	ldr	r3, [r3, #28]
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7ff fe35 	bl	8009b52 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 0310 	and.w	r3, r3, #16
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d004      	beq.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7ff fe5d 	bl	8009bb8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f003 0320 	and.w	r3, r3, #32
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d004      	beq.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7ff fe52 	bl	8009bb8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f003 0304 	and.w	r3, r3, #4
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d004      	beq.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a1b      	ldr	r3, [r3, #32]
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7ff fe2a 	bl	8009b7e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f003 0308 	and.w	r3, r3, #8
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d004      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7ff fe1f 	bl	8009b7e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d022      	beq.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7ff fe8d 	bl	8009c70 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f5e:	d107      	bne.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8009f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f6e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f78:	d10b      	bne.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	3304      	adds	r3, #4
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f000 f8e3 	bl	800a14a <RCCEx_PLLSAI1_ConfigNQ>
 8009f84:	4603      	mov	r3, r0
 8009f86:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8009f88:	7ffb      	ldrb	r3, [r7, #31]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d001      	beq.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8009f8e:	7ffb      	ldrb	r3, [r7, #31]
 8009f90:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d02b      	beq.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fa6:	d008      	beq.n	8009fba <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fb0:	d003      	beq.n	8009fba <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d105      	bne.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7ff fe2a 	bl	8009c18 <LL_RCC_SetRNGClockSource>
 8009fc4:	e00a      	b.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x240>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fce:	60fb      	str	r3, [r7, #12]
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	f7ff fe21 	bl	8009c18 <LL_RCC_SetRNGClockSource>
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f7ff fe34 	bl	8009c44 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8009fe4:	d107      	bne.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8009fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009ff0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ff4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d022      	beq.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a006:	4618      	mov	r0, r3
 800a008:	f7ff fe3d 	bl	8009c86 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a014:	d107      	bne.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a024:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a02a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a02e:	d10b      	bne.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	3304      	adds	r3, #4
 800a034:	4618      	mov	r0, r3
 800a036:	f000 f8e3 	bl	800a200 <RCCEx_PLLSAI1_ConfigNR>
 800a03a:	4603      	mov	r3, r0
 800a03c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800a03e:	7ffb      	ldrb	r3, [r7, #31]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d001      	beq.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800a044:	7ffb      	ldrb	r3, [r7, #31]
 800a046:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a050:	2b00      	cmp	r3, #0
 800a052:	d004      	beq.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a058:	4618      	mov	r0, r3
 800a05a:	f7ff fd26 	bl	8009aaa <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a066:	2b00      	cmp	r3, #0
 800a068:	d009      	beq.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a06e:	4618      	mov	r0, r3
 800a070:	f7ff fd45 	bl	8009afe <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a078:	4618      	mov	r0, r3
 800a07a:	f7ff fd2c 	bl	8009ad6 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800a07e:	7fbb      	ldrb	r3, [r7, #30]
}
 800a080:	4618      	mov	r0, r3
 800a082:	3720      	adds	r7, #32
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800a08c:	f7ff fcfe 	bl	8009a8c <LL_RCC_MSI_EnablePLLMode>
}
 800a090:	bf00      	nop
 800a092:	bd80      	pop	{r7, pc}

0800a094 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a09c:	2300      	movs	r3, #0
 800a09e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800a0a0:	f7ff fe5b 	bl	8009d5a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a0a4:	f7fd fb58 	bl	8007758 <HAL_GetTick>
 800a0a8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a0aa:	e009      	b.n	800a0c0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a0ac:	f7fd fb54 	bl	8007758 <HAL_GetTick>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	1ad3      	subs	r3, r2, r3
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	d902      	bls.n	800a0c0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800a0ba:	2303      	movs	r3, #3
 800a0bc:	73fb      	strb	r3, [r7, #15]
      break;
 800a0be:	e004      	b.n	800a0ca <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a0c0:	f7ff fe5a 	bl	8009d78 <LL_RCC_PLLSAI1_IsReady>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d1f0      	bne.n	800a0ac <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800a0ca:	7bfb      	ldrb	r3, [r7, #15]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d137      	bne.n	800a140 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800a0d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	021b      	lsls	r3, r3, #8
 800a0e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800a0e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0ec:	691b      	ldr	r3, [r3, #16]
 800a0ee:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800a0fe:	f7ff fe1d 	bl	8009d3c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a102:	f7fd fb29 	bl	8007758 <HAL_GetTick>
 800a106:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a108:	e009      	b.n	800a11e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a10a:	f7fd fb25 	bl	8007758 <HAL_GetTick>
 800a10e:	4602      	mov	r2, r0
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	1ad3      	subs	r3, r2, r3
 800a114:	2b02      	cmp	r3, #2
 800a116:	d902      	bls.n	800a11e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800a118:	2303      	movs	r3, #3
 800a11a:	73fb      	strb	r3, [r7, #15]
        break;
 800a11c:	e004      	b.n	800a128 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a11e:	f7ff fe2b 	bl	8009d78 <LL_RCC_PLLSAI1_IsReady>
 800a122:	4603      	mov	r3, r0
 800a124:	2b01      	cmp	r3, #1
 800a126:	d1f0      	bne.n	800a10a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800a128:	7bfb      	ldrb	r3, [r7, #15]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d108      	bne.n	800a140 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800a12e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a132:	691a      	ldr	r2, [r3, #16]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a13c:	4313      	orrs	r3, r2
 800a13e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800a140:	7bfb      	ldrb	r3, [r7, #15]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b084      	sub	sp, #16
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a152:	2300      	movs	r3, #0
 800a154:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800a156:	f7ff fe00 	bl	8009d5a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a15a:	f7fd fafd 	bl	8007758 <HAL_GetTick>
 800a15e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a160:	e009      	b.n	800a176 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a162:	f7fd faf9 	bl	8007758 <HAL_GetTick>
 800a166:	4602      	mov	r2, r0
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	1ad3      	subs	r3, r2, r3
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d902      	bls.n	800a176 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800a170:	2303      	movs	r3, #3
 800a172:	73fb      	strb	r3, [r7, #15]
      break;
 800a174:	e004      	b.n	800a180 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a176:	f7ff fdff 	bl	8009d78 <LL_RCC_PLLSAI1_IsReady>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1f0      	bne.n	800a162 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800a180:	7bfb      	ldrb	r3, [r7, #15]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d137      	bne.n	800a1f6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800a186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a18a:	691b      	ldr	r3, [r3, #16]
 800a18c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	021b      	lsls	r3, r3, #8
 800a196:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a19a:	4313      	orrs	r3, r2
 800a19c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800a19e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1a2:	691b      	ldr	r3, [r3, #16]
 800a1a4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800a1b4:	f7ff fdc2 	bl	8009d3c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1b8:	f7fd face 	bl	8007758 <HAL_GetTick>
 800a1bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a1be:	e009      	b.n	800a1d4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a1c0:	f7fd faca 	bl	8007758 <HAL_GetTick>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	1ad3      	subs	r3, r2, r3
 800a1ca:	2b02      	cmp	r3, #2
 800a1cc:	d902      	bls.n	800a1d4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800a1ce:	2303      	movs	r3, #3
 800a1d0:	73fb      	strb	r3, [r7, #15]
        break;
 800a1d2:	e004      	b.n	800a1de <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a1d4:	f7ff fdd0 	bl	8009d78 <LL_RCC_PLLSAI1_IsReady>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d1f0      	bne.n	800a1c0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800a1de:	7bfb      	ldrb	r3, [r7, #15]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d108      	bne.n	800a1f6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800a1e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1e8:	691a      	ldr	r2, [r3, #16]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	691b      	ldr	r3, [r3, #16]
 800a1ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800a1f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3710      	adds	r7, #16
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a208:	2300      	movs	r3, #0
 800a20a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800a20c:	f7ff fda5 	bl	8009d5a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a210:	f7fd faa2 	bl	8007758 <HAL_GetTick>
 800a214:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a216:	e009      	b.n	800a22c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a218:	f7fd fa9e 	bl	8007758 <HAL_GetTick>
 800a21c:	4602      	mov	r2, r0
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	1ad3      	subs	r3, r2, r3
 800a222:	2b02      	cmp	r3, #2
 800a224:	d902      	bls.n	800a22c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800a226:	2303      	movs	r3, #3
 800a228:	73fb      	strb	r3, [r7, #15]
      break;
 800a22a:	e004      	b.n	800a236 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a22c:	f7ff fda4 	bl	8009d78 <LL_RCC_PLLSAI1_IsReady>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d1f0      	bne.n	800a218 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800a236:	7bfb      	ldrb	r3, [r7, #15]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d137      	bne.n	800a2ac <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800a23c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a240:	691b      	ldr	r3, [r3, #16]
 800a242:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	021b      	lsls	r3, r3, #8
 800a24c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a250:	4313      	orrs	r3, r2
 800a252:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800a254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a266:	4313      	orrs	r3, r2
 800a268:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800a26a:	f7ff fd67 	bl	8009d3c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a26e:	f7fd fa73 	bl	8007758 <HAL_GetTick>
 800a272:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a274:	e009      	b.n	800a28a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a276:	f7fd fa6f 	bl	8007758 <HAL_GetTick>
 800a27a:	4602      	mov	r2, r0
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	1ad3      	subs	r3, r2, r3
 800a280:	2b02      	cmp	r3, #2
 800a282:	d902      	bls.n	800a28a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800a284:	2303      	movs	r3, #3
 800a286:	73fb      	strb	r3, [r7, #15]
        break;
 800a288:	e004      	b.n	800a294 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a28a:	f7ff fd75 	bl	8009d78 <LL_RCC_PLLSAI1_IsReady>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b01      	cmp	r3, #1
 800a292:	d1f0      	bne.n	800a276 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800a294:	7bfb      	ldrb	r3, [r7, #15]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d108      	bne.n	800a2ac <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800a29a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a29e:	691a      	ldr	r2, [r3, #16]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	691b      	ldr	r3, [r3, #16]
 800a2a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800a2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
	...

0800a2b8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d101      	bne.n	800a2ca <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e09f      	b.n	800a40a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a2d0:	b2db      	uxtb	r3, r3
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d106      	bne.n	800a2e4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f7fc fe22 	bl	8006f28 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2202      	movs	r2, #2
 800a2e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a2ec:	4b49      	ldr	r3, [pc, #292]	; (800a414 <HAL_RTC_Init+0x15c>)
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	f003 0310 	and.w	r3, r3, #16
 800a2f4:	2b10      	cmp	r3, #16
 800a2f6:	d07e      	beq.n	800a3f6 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	22ca      	movs	r2, #202	; 0xca
 800a2fe:	625a      	str	r2, [r3, #36]	; 0x24
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2253      	movs	r2, #83	; 0x53
 800a306:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 f8ab 	bl	800a464 <RTC_EnterInitMode>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00a      	beq.n	800a32a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	22ff      	movs	r2, #255	; 0xff
 800a31a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2204      	movs	r2, #4
 800a320:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800a324:	2301      	movs	r3, #1
 800a326:	73fb      	strb	r3, [r7, #15]
 800a328:	e067      	b.n	800a3fa <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	6812      	ldr	r2, [r2, #0]
 800a334:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a33c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	6899      	ldr	r1, [r3, #8]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	685a      	ldr	r2, [r3, #4]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	691b      	ldr	r3, [r3, #16]
 800a34c:	431a      	orrs	r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	699b      	ldr	r3, [r3, #24]
 800a352:	431a      	orrs	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	430a      	orrs	r2, r1
 800a35a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	68d2      	ldr	r2, [r2, #12]
 800a364:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	6919      	ldr	r1, [r3, #16]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	041a      	lsls	r2, r3, #16
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	430a      	orrs	r2, r1
 800a378:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68da      	ldr	r2, [r3, #12]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a388:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f022 0203 	bic.w	r2, r2, #3
 800a398:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	69da      	ldr	r2, [r3, #28]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	695b      	ldr	r3, [r3, #20]
 800a3a8:	431a      	orrs	r2, r3
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	430a      	orrs	r2, r1
 800a3b0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	f003 0320 	and.w	r3, r3, #32
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d113      	bne.n	800a3e8 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f000 f829 	bl	800a418 <HAL_RTC_WaitForSynchro>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00d      	beq.n	800a3e8 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	22ff      	movs	r2, #255	; 0xff
 800a3d2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2204      	movs	r2, #4
 800a3d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	e010      	b.n	800a40a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	22ff      	movs	r2, #255	; 0xff
 800a3ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	73fb      	strb	r3, [r7, #15]
 800a3f4:	e001      	b.n	800a3fa <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800a3fa:	7bfb      	ldrb	r3, [r7, #15]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d103      	bne.n	800a408 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2201      	movs	r2, #1
 800a404:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800a408:	7bfb      	ldrb	r3, [r7, #15]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	40002800 	.word	0x40002800

0800a418 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	68da      	ldr	r2, [r3, #12]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a42e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800a430:	f7fd f992 	bl	8007758 <HAL_GetTick>
 800a434:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a436:	e009      	b.n	800a44c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a438:	f7fd f98e 	bl	8007758 <HAL_GetTick>
 800a43c:	4602      	mov	r2, r0
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	1ad3      	subs	r3, r2, r3
 800a442:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a446:	d901      	bls.n	800a44c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800a448:	2303      	movs	r3, #3
 800a44a:	e007      	b.n	800a45c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	f003 0320 	and.w	r3, r3, #32
 800a456:	2b00      	cmp	r3, #0
 800a458:	d0ee      	beq.n	800a438 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a476:	2b00      	cmp	r3, #0
 800a478:	d119      	bne.n	800a4ae <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f04f 32ff 	mov.w	r2, #4294967295
 800a482:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a484:	f7fd f968 	bl	8007758 <HAL_GetTick>
 800a488:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a48a:	e009      	b.n	800a4a0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a48c:	f7fd f964 	bl	8007758 <HAL_GetTick>
 800a490:	4602      	mov	r2, r0
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	1ad3      	subs	r3, r2, r3
 800a496:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a49a:	d901      	bls.n	800a4a0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800a49c:	2303      	movs	r3, #3
 800a49e:	e007      	b.n	800a4b0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d0ee      	beq.n	800a48c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800a4ae:	2300      	movs	r3, #0
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3710      	adds	r7, #16
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d101      	bne.n	800a4d2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800a4ce:	2302      	movs	r3, #2
 800a4d0:	e0a8      	b.n	800a624 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2202      	movs	r2, #2
 800a4de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	22ca      	movs	r2, #202	; 0xca
 800a4e8:	625a      	str	r2, [r3, #36]	; 0x24
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2253      	movs	r2, #83	; 0x53
 800a4f0:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d020      	beq.n	800a542 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800a500:	f7fd f92a 	bl	8007758 <HAL_GetTick>
 800a504:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800a506:	e015      	b.n	800a534 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a508:	f7fd f926 	bl	8007758 <HAL_GetTick>
 800a50c:	4602      	mov	r2, r0
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a516:	d90d      	bls.n	800a534 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	22ff      	movs	r2, #255	; 0xff
 800a51e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2203      	movs	r2, #3
 800a524:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800a530:	2303      	movs	r3, #3
 800a532:	e077      	b.n	800a624 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	f003 0304 	and.w	r3, r3, #4
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d1e2      	bne.n	800a508 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	689a      	ldr	r2, [r3, #8]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a550:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	b2da      	uxtb	r2, r3
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800a562:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800a564:	f7fd f8f8 	bl	8007758 <HAL_GetTick>
 800a568:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800a56a:	e015      	b.n	800a598 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a56c:	f7fd f8f4 	bl	8007758 <HAL_GetTick>
 800a570:	4602      	mov	r2, r0
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	1ad3      	subs	r3, r2, r3
 800a576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a57a:	d90d      	bls.n	800a598 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	22ff      	movs	r2, #255	; 0xff
 800a582:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2203      	movs	r2, #3
 800a588:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2200      	movs	r2, #0
 800a590:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800a594:	2303      	movs	r3, #3
 800a596:	e045      	b.n	800a624 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	f003 0304 	and.w	r3, r3, #4
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d0e2      	beq.n	800a56c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	689a      	ldr	r2, [r3, #8]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f022 0207 	bic.w	r2, r2, #7
 800a5bc:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	6899      	ldr	r1, [r3, #8]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	430a      	orrs	r2, r1
 800a5cc:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800a5ce:	4b17      	ldr	r3, [pc, #92]	; (800a62c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800a5d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5d4:	4a15      	ldr	r2, [pc, #84]	; (800a62c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800a5d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a5da:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800a5de:	4b13      	ldr	r3, [pc, #76]	; (800a62c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a12      	ldr	r2, [pc, #72]	; (800a62c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800a5e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a5e8:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	689a      	ldr	r2, [r3, #8]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a5f8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	689a      	ldr	r2, [r3, #8]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a608:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	22ff      	movs	r2, #255	; 0xff
 800a610:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2201      	movs	r2, #1
 800a616:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2200      	movs	r2, #0
 800a61e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800a622:	2300      	movs	r3, #0
}
 800a624:	4618      	mov	r0, r3
 800a626:	3718      	adds	r7, #24
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	58000800 	.word	0x58000800

0800a630 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d101      	bne.n	800a642 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	e095      	b.n	800a76e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a646:	2b00      	cmp	r3, #0
 800a648:	d108      	bne.n	800a65c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a652:	d009      	beq.n	800a668 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	61da      	str	r2, [r3, #28]
 800a65a:	e005      	b.n	800a668 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2200      	movs	r2, #0
 800a666:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2200      	movs	r2, #0
 800a66c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a674:	b2db      	uxtb	r3, r3
 800a676:	2b00      	cmp	r3, #0
 800a678:	d106      	bne.n	800a688 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f7fc fc86 	bl	8006f94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2202      	movs	r2, #2
 800a68c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a69e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a6a8:	d902      	bls.n	800a6b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	60fb      	str	r3, [r7, #12]
 800a6ae:	e002      	b.n	800a6b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a6be:	d007      	beq.n	800a6d0 <HAL_SPI_Init+0xa0>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a6c8:	d002      	beq.n	800a6d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a6e0:	431a      	orrs	r2, r3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	f003 0302 	and.w	r3, r3, #2
 800a6ea:	431a      	orrs	r2, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	695b      	ldr	r3, [r3, #20]
 800a6f0:	f003 0301 	and.w	r3, r3, #1
 800a6f4:	431a      	orrs	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	699b      	ldr	r3, [r3, #24]
 800a6fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a6fe:	431a      	orrs	r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	69db      	ldr	r3, [r3, #28]
 800a704:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a708:	431a      	orrs	r2, r3
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a1b      	ldr	r3, [r3, #32]
 800a70e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a712:	ea42 0103 	orr.w	r1, r2, r3
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a71a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	430a      	orrs	r2, r1
 800a724:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	699b      	ldr	r3, [r3, #24]
 800a72a:	0c1b      	lsrs	r3, r3, #16
 800a72c:	f003 0204 	and.w	r2, r3, #4
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a734:	f003 0310 	and.w	r3, r3, #16
 800a738:	431a      	orrs	r2, r3
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a73e:	f003 0308 	and.w	r3, r3, #8
 800a742:	431a      	orrs	r2, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a74c:	ea42 0103 	orr.w	r1, r2, r3
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	430a      	orrs	r2, r1
 800a75c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2200      	movs	r2, #0
 800a762:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2201      	movs	r2, #1
 800a768:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3710      	adds	r7, #16
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b088      	sub	sp, #32
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	60f8      	str	r0, [r7, #12]
 800a77e:	60b9      	str	r1, [r7, #8]
 800a780:	603b      	str	r3, [r7, #0]
 800a782:	4613      	mov	r3, r2
 800a784:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a786:	2300      	movs	r3, #0
 800a788:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a790:	2b01      	cmp	r3, #1
 800a792:	d101      	bne.n	800a798 <HAL_SPI_Transmit+0x22>
 800a794:	2302      	movs	r3, #2
 800a796:	e15f      	b.n	800aa58 <HAL_SPI_Transmit+0x2e2>
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a7a0:	f7fc ffda 	bl	8007758 <HAL_GetTick>
 800a7a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a7a6:	88fb      	ldrh	r3, [r7, #6]
 800a7a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d002      	beq.n	800a7bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a7b6:	2302      	movs	r3, #2
 800a7b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a7ba:	e148      	b.n	800aa4e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d002      	beq.n	800a7c8 <HAL_SPI_Transmit+0x52>
 800a7c2:	88fb      	ldrh	r3, [r7, #6]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d102      	bne.n	800a7ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a7cc:	e13f      	b.n	800aa4e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2203      	movs	r2, #3
 800a7d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	68ba      	ldr	r2, [r7, #8]
 800a7e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	88fa      	ldrh	r2, [r7, #6]
 800a7e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	88fa      	ldrh	r2, [r7, #6]
 800a7ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2200      	movs	r2, #0
 800a800:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2200      	movs	r2, #0
 800a808:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2200      	movs	r2, #0
 800a80e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a818:	d10f      	bne.n	800a83a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a828:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a838:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a844:	2b40      	cmp	r3, #64	; 0x40
 800a846:	d007      	beq.n	800a858 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a856:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a860:	d94f      	bls.n	800a902 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d002      	beq.n	800a870 <HAL_SPI_Transmit+0xfa>
 800a86a:	8afb      	ldrh	r3, [r7, #22]
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d142      	bne.n	800a8f6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a874:	881a      	ldrh	r2, [r3, #0]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a880:	1c9a      	adds	r2, r3, #2
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	3b01      	subs	r3, #1
 800a88e:	b29a      	uxth	r2, r3
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a894:	e02f      	b.n	800a8f6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	f003 0302 	and.w	r3, r3, #2
 800a8a0:	2b02      	cmp	r3, #2
 800a8a2:	d112      	bne.n	800a8ca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a8:	881a      	ldrh	r2, [r3, #0]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b4:	1c9a      	adds	r2, r3, #2
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	3b01      	subs	r3, #1
 800a8c2:	b29a      	uxth	r2, r3
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a8c8:	e015      	b.n	800a8f6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8ca:	f7fc ff45 	bl	8007758 <HAL_GetTick>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	69bb      	ldr	r3, [r7, #24]
 800a8d2:	1ad3      	subs	r3, r2, r3
 800a8d4:	683a      	ldr	r2, [r7, #0]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d803      	bhi.n	800a8e2 <HAL_SPI_Transmit+0x16c>
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8e0:	d102      	bne.n	800a8e8 <HAL_SPI_Transmit+0x172>
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d106      	bne.n	800a8f6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800a8e8:	2303      	movs	r3, #3
 800a8ea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800a8f4:	e0ab      	b.n	800aa4e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d1ca      	bne.n	800a896 <HAL_SPI_Transmit+0x120>
 800a900:	e080      	b.n	800aa04 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d002      	beq.n	800a910 <HAL_SPI_Transmit+0x19a>
 800a90a:	8afb      	ldrh	r3, [r7, #22]
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d174      	bne.n	800a9fa <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a914:	b29b      	uxth	r3, r3
 800a916:	2b01      	cmp	r3, #1
 800a918:	d912      	bls.n	800a940 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a91e:	881a      	ldrh	r2, [r3, #0]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a92a:	1c9a      	adds	r2, r3, #2
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a934:	b29b      	uxth	r3, r3
 800a936:	3b02      	subs	r3, #2
 800a938:	b29a      	uxth	r2, r3
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a93e:	e05c      	b.n	800a9fa <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	330c      	adds	r3, #12
 800a94a:	7812      	ldrb	r2, [r2, #0]
 800a94c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a952:	1c5a      	adds	r2, r3, #1
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	3b01      	subs	r3, #1
 800a960:	b29a      	uxth	r2, r3
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a966:	e048      	b.n	800a9fa <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	689b      	ldr	r3, [r3, #8]
 800a96e:	f003 0302 	and.w	r3, r3, #2
 800a972:	2b02      	cmp	r3, #2
 800a974:	d12b      	bne.n	800a9ce <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d912      	bls.n	800a9a6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a984:	881a      	ldrh	r2, [r3, #0]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a990:	1c9a      	adds	r2, r3, #2
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	3b02      	subs	r3, #2
 800a99e:	b29a      	uxth	r2, r3
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a9a4:	e029      	b.n	800a9fa <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	330c      	adds	r3, #12
 800a9b0:	7812      	ldrb	r2, [r2, #0]
 800a9b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9b8:	1c5a      	adds	r2, r3, #1
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	3b01      	subs	r3, #1
 800a9c6:	b29a      	uxth	r2, r3
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a9cc:	e015      	b.n	800a9fa <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a9ce:	f7fc fec3 	bl	8007758 <HAL_GetTick>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	69bb      	ldr	r3, [r7, #24]
 800a9d6:	1ad3      	subs	r3, r2, r3
 800a9d8:	683a      	ldr	r2, [r7, #0]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d803      	bhi.n	800a9e6 <HAL_SPI_Transmit+0x270>
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9e4:	d102      	bne.n	800a9ec <HAL_SPI_Transmit+0x276>
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d106      	bne.n	800a9fa <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800a9ec:	2303      	movs	r3, #3
 800a9ee:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800a9f8:	e029      	b.n	800aa4e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9fe:	b29b      	uxth	r3, r3
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d1b1      	bne.n	800a968 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aa04:	69ba      	ldr	r2, [r7, #24]
 800aa06:	6839      	ldr	r1, [r7, #0]
 800aa08:	68f8      	ldr	r0, [r7, #12]
 800aa0a:	f000 fc7d 	bl	800b308 <SPI_EndRxTxTransaction>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d002      	beq.n	800aa1a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2220      	movs	r2, #32
 800aa18:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d10a      	bne.n	800aa38 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa22:	2300      	movs	r3, #0
 800aa24:	613b      	str	r3, [r7, #16]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	613b      	str	r3, [r7, #16]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	689b      	ldr	r3, [r3, #8]
 800aa34:	613b      	str	r3, [r7, #16]
 800aa36:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d002      	beq.n	800aa46 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800aa40:	2301      	movs	r3, #1
 800aa42:	77fb      	strb	r3, [r7, #31]
 800aa44:	e003      	b.n	800aa4e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2201      	movs	r2, #1
 800aa4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800aa56:	7ffb      	ldrb	r3, [r7, #31]
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3720      	adds	r7, #32
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b08a      	sub	sp, #40	; 0x28
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
 800aa6c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800aa72:	2300      	movs	r3, #0
 800aa74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d101      	bne.n	800aa86 <HAL_SPI_TransmitReceive+0x26>
 800aa82:	2302      	movs	r3, #2
 800aa84:	e20a      	b.n	800ae9c <HAL_SPI_TransmitReceive+0x43c>
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2201      	movs	r2, #1
 800aa8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aa8e:	f7fc fe63 	bl	8007758 <HAL_GetTick>
 800aa92:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aa9a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800aaa2:	887b      	ldrh	r3, [r7, #2]
 800aaa4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800aaa6:	887b      	ldrh	r3, [r7, #2]
 800aaa8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800aaaa:	7efb      	ldrb	r3, [r7, #27]
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d00e      	beq.n	800aace <HAL_SPI_TransmitReceive+0x6e>
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aab6:	d106      	bne.n	800aac6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d102      	bne.n	800aac6 <HAL_SPI_TransmitReceive+0x66>
 800aac0:	7efb      	ldrb	r3, [r7, #27]
 800aac2:	2b04      	cmp	r3, #4
 800aac4:	d003      	beq.n	800aace <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800aac6:	2302      	movs	r3, #2
 800aac8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800aacc:	e1e0      	b.n	800ae90 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d005      	beq.n	800aae0 <HAL_SPI_TransmitReceive+0x80>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d002      	beq.n	800aae0 <HAL_SPI_TransmitReceive+0x80>
 800aada:	887b      	ldrh	r3, [r7, #2]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d103      	bne.n	800aae8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800aae0:	2301      	movs	r3, #1
 800aae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800aae6:	e1d3      	b.n	800ae90 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	2b04      	cmp	r3, #4
 800aaf2:	d003      	beq.n	800aafc <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2205      	movs	r2, #5
 800aaf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2200      	movs	r2, #0
 800ab00:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	887a      	ldrh	r2, [r7, #2]
 800ab0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	887a      	ldrh	r2, [r7, #2]
 800ab14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	68ba      	ldr	r2, [r7, #8]
 800ab1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	887a      	ldrh	r2, [r7, #2]
 800ab22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	887a      	ldrh	r2, [r7, #2]
 800ab28:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2200      	movs	r2, #0
 800ab34:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ab3e:	d802      	bhi.n	800ab46 <HAL_SPI_TransmitReceive+0xe6>
 800ab40:	8a3b      	ldrh	r3, [r7, #16]
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d908      	bls.n	800ab58 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	685a      	ldr	r2, [r3, #4]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ab54:	605a      	str	r2, [r3, #4]
 800ab56:	e007      	b.n	800ab68 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	685a      	ldr	r2, [r3, #4]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ab66:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab72:	2b40      	cmp	r3, #64	; 0x40
 800ab74:	d007      	beq.n	800ab86 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	68db      	ldr	r3, [r3, #12]
 800ab8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ab8e:	f240 8081 	bls.w	800ac94 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d002      	beq.n	800aba0 <HAL_SPI_TransmitReceive+0x140>
 800ab9a:	8a7b      	ldrh	r3, [r7, #18]
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d16d      	bne.n	800ac7c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aba4:	881a      	ldrh	r2, [r3, #0]
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb0:	1c9a      	adds	r2, r3, #2
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abba:	b29b      	uxth	r3, r3
 800abbc:	3b01      	subs	r3, #1
 800abbe:	b29a      	uxth	r2, r3
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800abc4:	e05a      	b.n	800ac7c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	f003 0302 	and.w	r3, r3, #2
 800abd0:	2b02      	cmp	r3, #2
 800abd2:	d11b      	bne.n	800ac0c <HAL_SPI_TransmitReceive+0x1ac>
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abd8:	b29b      	uxth	r3, r3
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d016      	beq.n	800ac0c <HAL_SPI_TransmitReceive+0x1ac>
 800abde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d113      	bne.n	800ac0c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe8:	881a      	ldrh	r2, [r3, #0]
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf4:	1c9a      	adds	r2, r3, #2
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	3b01      	subs	r3, #1
 800ac02:	b29a      	uxth	r2, r3
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	f003 0301 	and.w	r3, r3, #1
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d11c      	bne.n	800ac54 <HAL_SPI_TransmitReceive+0x1f4>
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d016      	beq.n	800ac54 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	68da      	ldr	r2, [r3, #12]
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac30:	b292      	uxth	r2, r2
 800ac32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac38:	1c9a      	adds	r2, r3, #2
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	3b01      	subs	r3, #1
 800ac48:	b29a      	uxth	r2, r3
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ac50:	2301      	movs	r3, #1
 800ac52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ac54:	f7fc fd80 	bl	8007758 <HAL_GetTick>
 800ac58:	4602      	mov	r2, r0
 800ac5a:	69fb      	ldr	r3, [r7, #28]
 800ac5c:	1ad3      	subs	r3, r2, r3
 800ac5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d80b      	bhi.n	800ac7c <HAL_SPI_TransmitReceive+0x21c>
 800ac64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac6a:	d007      	beq.n	800ac7c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800ac6c:	2303      	movs	r3, #3
 800ac6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2201      	movs	r2, #1
 800ac76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800ac7a:	e109      	b.n	800ae90 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d19f      	bne.n	800abc6 <HAL_SPI_TransmitReceive+0x166>
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d199      	bne.n	800abc6 <HAL_SPI_TransmitReceive+0x166>
 800ac92:	e0e3      	b.n	800ae5c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d003      	beq.n	800aca4 <HAL_SPI_TransmitReceive+0x244>
 800ac9c:	8a7b      	ldrh	r3, [r7, #18]
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	f040 80cf 	bne.w	800ae42 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d912      	bls.n	800acd4 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb2:	881a      	ldrh	r2, [r3, #0]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acbe:	1c9a      	adds	r2, r3, #2
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acc8:	b29b      	uxth	r3, r3
 800acca:	3b02      	subs	r3, #2
 800accc:	b29a      	uxth	r2, r3
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800acd2:	e0b6      	b.n	800ae42 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	330c      	adds	r3, #12
 800acde:	7812      	ldrb	r2, [r2, #0]
 800ace0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace6:	1c5a      	adds	r2, r3, #1
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	3b01      	subs	r3, #1
 800acf4:	b29a      	uxth	r2, r3
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800acfa:	e0a2      	b.n	800ae42 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	689b      	ldr	r3, [r3, #8]
 800ad02:	f003 0302 	and.w	r3, r3, #2
 800ad06:	2b02      	cmp	r3, #2
 800ad08:	d134      	bne.n	800ad74 <HAL_SPI_TransmitReceive+0x314>
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d02f      	beq.n	800ad74 <HAL_SPI_TransmitReceive+0x314>
 800ad14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d12c      	bne.n	800ad74 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d912      	bls.n	800ad4a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad28:	881a      	ldrh	r2, [r3, #0]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad34:	1c9a      	adds	r2, r3, #2
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad3e:	b29b      	uxth	r3, r3
 800ad40:	3b02      	subs	r3, #2
 800ad42:	b29a      	uxth	r2, r3
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ad48:	e012      	b.n	800ad70 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	330c      	adds	r3, #12
 800ad54:	7812      	ldrb	r2, [r2, #0]
 800ad56:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad5c:	1c5a      	adds	r2, r3, #1
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	3b01      	subs	r3, #1
 800ad6a:	b29a      	uxth	r2, r3
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ad70:	2300      	movs	r3, #0
 800ad72:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	f003 0301 	and.w	r3, r3, #1
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d148      	bne.n	800ae14 <HAL_SPI_TransmitReceive+0x3b4>
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d042      	beq.n	800ae14 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d923      	bls.n	800ade2 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	68da      	ldr	r2, [r3, #12]
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada4:	b292      	uxth	r2, r2
 800ada6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adac:	1c9a      	adds	r2, r3, #2
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800adb8:	b29b      	uxth	r3, r3
 800adba:	3b02      	subs	r3, #2
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800adca:	b29b      	uxth	r3, r3
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d81f      	bhi.n	800ae10 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	685a      	ldr	r2, [r3, #4]
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800adde:	605a      	str	r2, [r3, #4]
 800ade0:	e016      	b.n	800ae10 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f103 020c 	add.w	r2, r3, #12
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adee:	7812      	ldrb	r2, [r2, #0]
 800adf0:	b2d2      	uxtb	r2, r2
 800adf2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adf8:	1c5a      	adds	r2, r3, #1
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	3b01      	subs	r3, #1
 800ae08:	b29a      	uxth	r2, r3
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ae10:	2301      	movs	r3, #1
 800ae12:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ae14:	f7fc fca0 	bl	8007758 <HAL_GetTick>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	69fb      	ldr	r3, [r7, #28]
 800ae1c:	1ad3      	subs	r3, r2, r3
 800ae1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d803      	bhi.n	800ae2c <HAL_SPI_TransmitReceive+0x3cc>
 800ae24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae2a:	d102      	bne.n	800ae32 <HAL_SPI_TransmitReceive+0x3d2>
 800ae2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d107      	bne.n	800ae42 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800ae32:	2303      	movs	r3, #3
 800ae34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800ae40:	e026      	b.n	800ae90 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	f47f af57 	bne.w	800acfc <HAL_SPI_TransmitReceive+0x29c>
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	f47f af50 	bne.w	800acfc <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ae5c:	69fa      	ldr	r2, [r7, #28]
 800ae5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae60:	68f8      	ldr	r0, [r7, #12]
 800ae62:	f000 fa51 	bl	800b308 <SPI_EndRxTxTransaction>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d005      	beq.n	800ae78 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2220      	movs	r2, #32
 800ae76:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d003      	beq.n	800ae88 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ae86:	e003      	b.n	800ae90 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2200      	movs	r2, #0
 800ae94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ae98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3728      	adds	r7, #40	; 0x28
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b088      	sub	sp, #32
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	689b      	ldr	r3, [r3, #8]
 800aeba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800aebc:	69bb      	ldr	r3, [r7, #24]
 800aebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d10e      	bne.n	800aee4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d009      	beq.n	800aee4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d004      	beq.n	800aee4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	4798      	blx	r3
    return;
 800aee2:	e0ce      	b.n	800b082 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	f003 0302 	and.w	r3, r3, #2
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d009      	beq.n	800af02 <HAL_SPI_IRQHandler+0x5e>
 800aeee:	69fb      	ldr	r3, [r7, #28]
 800aef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d004      	beq.n	800af02 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	4798      	blx	r3
    return;
 800af00:	e0bf      	b.n	800b082 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800af02:	69bb      	ldr	r3, [r7, #24]
 800af04:	f003 0320 	and.w	r3, r3, #32
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d10a      	bne.n	800af22 <HAL_SPI_IRQHandler+0x7e>
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af12:	2b00      	cmp	r3, #0
 800af14:	d105      	bne.n	800af22 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800af16:	69bb      	ldr	r3, [r7, #24]
 800af18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	f000 80b0 	beq.w	800b082 <HAL_SPI_IRQHandler+0x1de>
 800af22:	69fb      	ldr	r3, [r7, #28]
 800af24:	f003 0320 	and.w	r3, r3, #32
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f000 80aa 	beq.w	800b082 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800af2e:	69bb      	ldr	r3, [r7, #24]
 800af30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af34:	2b00      	cmp	r3, #0
 800af36:	d023      	beq.n	800af80 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	2b03      	cmp	r3, #3
 800af42:	d011      	beq.n	800af68 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af48:	f043 0204 	orr.w	r2, r3, #4
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af50:	2300      	movs	r3, #0
 800af52:	617b      	str	r3, [r7, #20]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	68db      	ldr	r3, [r3, #12]
 800af5a:	617b      	str	r3, [r7, #20]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	617b      	str	r3, [r7, #20]
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	e00b      	b.n	800af80 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af68:	2300      	movs	r3, #0
 800af6a:	613b      	str	r3, [r7, #16]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	68db      	ldr	r3, [r3, #12]
 800af72:	613b      	str	r3, [r7, #16]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	689b      	ldr	r3, [r3, #8]
 800af7a:	613b      	str	r3, [r7, #16]
 800af7c:	693b      	ldr	r3, [r7, #16]
        return;
 800af7e:	e080      	b.n	800b082 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800af80:	69bb      	ldr	r3, [r7, #24]
 800af82:	f003 0320 	and.w	r3, r3, #32
 800af86:	2b00      	cmp	r3, #0
 800af88:	d014      	beq.n	800afb4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af8e:	f043 0201 	orr.w	r2, r3, #1
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800af96:	2300      	movs	r3, #0
 800af98:	60fb      	str	r3, [r7, #12]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	689b      	ldr	r3, [r3, #8]
 800afa0:	60fb      	str	r3, [r7, #12]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afb0:	601a      	str	r2, [r3, #0]
 800afb2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800afb4:	69bb      	ldr	r3, [r7, #24]
 800afb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d00c      	beq.n	800afd8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afc2:	f043 0208 	orr.w	r2, r3, #8
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800afca:	2300      	movs	r3, #0
 800afcc:	60bb      	str	r3, [r7, #8]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	60bb      	str	r3, [r7, #8]
 800afd6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d04f      	beq.n	800b080 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	685a      	ldr	r2, [r3, #4]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800afee:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	f003 0302 	and.w	r3, r3, #2
 800affe:	2b00      	cmp	r3, #0
 800b000:	d104      	bne.n	800b00c <HAL_SPI_IRQHandler+0x168>
 800b002:	69fb      	ldr	r3, [r7, #28]
 800b004:	f003 0301 	and.w	r3, r3, #1
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d034      	beq.n	800b076 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	685a      	ldr	r2, [r3, #4]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f022 0203 	bic.w	r2, r2, #3
 800b01a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b020:	2b00      	cmp	r3, #0
 800b022:	d011      	beq.n	800b048 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b028:	4a17      	ldr	r2, [pc, #92]	; (800b088 <HAL_SPI_IRQHandler+0x1e4>)
 800b02a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b030:	4618      	mov	r0, r3
 800b032:	f7fc fe1a 	bl	8007c6a <HAL_DMA_Abort_IT>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d005      	beq.n	800b048 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b040:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d016      	beq.n	800b07e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b054:	4a0c      	ldr	r2, [pc, #48]	; (800b088 <HAL_SPI_IRQHandler+0x1e4>)
 800b056:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7fc fe04 	bl	8007c6a <HAL_DMA_Abort_IT>
 800b062:	4603      	mov	r3, r0
 800b064:	2b00      	cmp	r3, #0
 800b066:	d00a      	beq.n	800b07e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b06c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800b074:	e003      	b.n	800b07e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 f808 	bl	800b08c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b07c:	e000      	b.n	800b080 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800b07e:	bf00      	nop
    return;
 800b080:	bf00      	nop
  }
}
 800b082:	3720      	adds	r7, #32
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	0800b0a1 	.word	0x0800b0a1

0800b08c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b094:	bf00      	nop
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	f7ff ffe5 	bl	800b08c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b0c2:	bf00      	nop
 800b0c4:	3710      	adds	r7, #16
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
	...

0800b0cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b088      	sub	sp, #32
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	60b9      	str	r1, [r7, #8]
 800b0d6:	603b      	str	r3, [r7, #0]
 800b0d8:	4613      	mov	r3, r2
 800b0da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b0dc:	f7fc fb3c 	bl	8007758 <HAL_GetTick>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e4:	1a9b      	subs	r3, r3, r2
 800b0e6:	683a      	ldr	r2, [r7, #0]
 800b0e8:	4413      	add	r3, r2
 800b0ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b0ec:	f7fc fb34 	bl	8007758 <HAL_GetTick>
 800b0f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b0f2:	4b39      	ldr	r3, [pc, #228]	; (800b1d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	015b      	lsls	r3, r3, #5
 800b0f8:	0d1b      	lsrs	r3, r3, #20
 800b0fa:	69fa      	ldr	r2, [r7, #28]
 800b0fc:	fb02 f303 	mul.w	r3, r2, r3
 800b100:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b102:	e054      	b.n	800b1ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b10a:	d050      	beq.n	800b1ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b10c:	f7fc fb24 	bl	8007758 <HAL_GetTick>
 800b110:	4602      	mov	r2, r0
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	1ad3      	subs	r3, r2, r3
 800b116:	69fa      	ldr	r2, [r7, #28]
 800b118:	429a      	cmp	r2, r3
 800b11a:	d902      	bls.n	800b122 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b11c:	69fb      	ldr	r3, [r7, #28]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d13d      	bne.n	800b19e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	685a      	ldr	r2, [r3, #4]
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b130:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b13a:	d111      	bne.n	800b160 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b144:	d004      	beq.n	800b150 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	689b      	ldr	r3, [r3, #8]
 800b14a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b14e:	d107      	bne.n	800b160 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b15e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b168:	d10f      	bne.n	800b18a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b178:	601a      	str	r2, [r3, #0]
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b188:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2201      	movs	r2, #1
 800b18e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2200      	movs	r2, #0
 800b196:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b19a:	2303      	movs	r3, #3
 800b19c:	e017      	b.n	800b1ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d101      	bne.n	800b1a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	3b01      	subs	r3, #1
 800b1ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	689a      	ldr	r2, [r3, #8]
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	4013      	ands	r3, r2
 800b1b8:	68ba      	ldr	r2, [r7, #8]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	bf0c      	ite	eq
 800b1be:	2301      	moveq	r3, #1
 800b1c0:	2300      	movne	r3, #0
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	79fb      	ldrb	r3, [r7, #7]
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d19b      	bne.n	800b104 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b1cc:	2300      	movs	r3, #0
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3720      	adds	r7, #32
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
 800b1d6:	bf00      	nop
 800b1d8:	20000154 	.word	0x20000154

0800b1dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b08a      	sub	sp, #40	; 0x28
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	60b9      	str	r1, [r7, #8]
 800b1e6:	607a      	str	r2, [r7, #4]
 800b1e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b1ee:	f7fc fab3 	bl	8007758 <HAL_GetTick>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f6:	1a9b      	subs	r3, r3, r2
 800b1f8:	683a      	ldr	r2, [r7, #0]
 800b1fa:	4413      	add	r3, r2
 800b1fc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b1fe:	f7fc faab 	bl	8007758 <HAL_GetTick>
 800b202:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	330c      	adds	r3, #12
 800b20a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b20c:	4b3d      	ldr	r3, [pc, #244]	; (800b304 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	4613      	mov	r3, r2
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	4413      	add	r3, r2
 800b216:	00da      	lsls	r2, r3, #3
 800b218:	1ad3      	subs	r3, r2, r3
 800b21a:	0d1b      	lsrs	r3, r3, #20
 800b21c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b21e:	fb02 f303 	mul.w	r3, r2, r3
 800b222:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b224:	e060      	b.n	800b2e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b22c:	d107      	bne.n	800b23e <SPI_WaitFifoStateUntilTimeout+0x62>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d104      	bne.n	800b23e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b234:	69fb      	ldr	r3, [r7, #28]
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b23c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b244:	d050      	beq.n	800b2e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b246:	f7fc fa87 	bl	8007758 <HAL_GetTick>
 800b24a:	4602      	mov	r2, r0
 800b24c:	6a3b      	ldr	r3, [r7, #32]
 800b24e:	1ad3      	subs	r3, r2, r3
 800b250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b252:	429a      	cmp	r2, r3
 800b254:	d902      	bls.n	800b25c <SPI_WaitFifoStateUntilTimeout+0x80>
 800b256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d13d      	bne.n	800b2d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	685a      	ldr	r2, [r3, #4]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b26a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b274:	d111      	bne.n	800b29a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	689b      	ldr	r3, [r3, #8]
 800b27a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b27e:	d004      	beq.n	800b28a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b288:	d107      	bne.n	800b29a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b298:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b29e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2a2:	d10f      	bne.n	800b2c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b2b2:	601a      	str	r2, [r3, #0]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b2c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b2d4:	2303      	movs	r3, #3
 800b2d6:	e010      	b.n	800b2fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b2d8:	69bb      	ldr	r3, [r7, #24]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d101      	bne.n	800b2e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	3b01      	subs	r3, #1
 800b2e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	689a      	ldr	r2, [r3, #8]
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	4013      	ands	r3, r2
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d196      	bne.n	800b226 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b2f8:	2300      	movs	r3, #0
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3728      	adds	r7, #40	; 0x28
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	20000154 	.word	0x20000154

0800b308 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b086      	sub	sp, #24
 800b30c:	af02      	add	r7, sp, #8
 800b30e:	60f8      	str	r0, [r7, #12]
 800b310:	60b9      	str	r1, [r7, #8]
 800b312:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	9300      	str	r3, [sp, #0]
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	2200      	movs	r2, #0
 800b31c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b320:	68f8      	ldr	r0, [r7, #12]
 800b322:	f7ff ff5b 	bl	800b1dc <SPI_WaitFifoStateUntilTimeout>
 800b326:	4603      	mov	r3, r0
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d007      	beq.n	800b33c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b330:	f043 0220 	orr.w	r2, r3, #32
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b338:	2303      	movs	r3, #3
 800b33a:	e027      	b.n	800b38c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	9300      	str	r3, [sp, #0]
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	2200      	movs	r2, #0
 800b344:	2180      	movs	r1, #128	; 0x80
 800b346:	68f8      	ldr	r0, [r7, #12]
 800b348:	f7ff fec0 	bl	800b0cc <SPI_WaitFlagStateUntilTimeout>
 800b34c:	4603      	mov	r3, r0
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d007      	beq.n	800b362 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b356:	f043 0220 	orr.w	r2, r3, #32
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b35e:	2303      	movs	r3, #3
 800b360:	e014      	b.n	800b38c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	9300      	str	r3, [sp, #0]
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	2200      	movs	r2, #0
 800b36a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b36e:	68f8      	ldr	r0, [r7, #12]
 800b370:	f7ff ff34 	bl	800b1dc <SPI_WaitFifoStateUntilTimeout>
 800b374:	4603      	mov	r3, r0
 800b376:	2b00      	cmp	r3, #0
 800b378:	d007      	beq.n	800b38a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b37e:	f043 0220 	orr.w	r2, r3, #32
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b386:	2303      	movs	r3, #3
 800b388:	e000      	b.n	800b38c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b38a:	2300      	movs	r3, #0
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3710      	adds	r7, #16
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d101      	bne.n	800b3a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	e049      	b.n	800b43a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3ac:	b2db      	uxtb	r3, r3
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d106      	bne.n	800b3c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 f841 	bl	800b442 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2202      	movs	r2, #2
 800b3c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	3304      	adds	r3, #4
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	4610      	mov	r0, r2
 800b3d4:	f000 f9be 	bl	800b754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2201      	movs	r2, #1
 800b3dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2201      	movs	r2, #1
 800b404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2201      	movs	r2, #1
 800b40c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2201      	movs	r2, #1
 800b414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2201      	movs	r2, #1
 800b41c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2201      	movs	r2, #1
 800b424:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2201      	movs	r2, #1
 800b42c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2201      	movs	r2, #1
 800b434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b438:	2300      	movs	r3, #0
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3708      	adds	r7, #8
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}

0800b442 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b442:	b480      	push	{r7}
 800b444:	b083      	sub	sp, #12
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b44a:	bf00      	nop
 800b44c:	370c      	adds	r7, #12
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr
	...

0800b458 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b458:	b480      	push	{r7}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b466:	b2db      	uxtb	r3, r3
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d001      	beq.n	800b470 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b46c:	2301      	movs	r3, #1
 800b46e:	e036      	b.n	800b4de <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2202      	movs	r2, #2
 800b474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	68da      	ldr	r2, [r3, #12]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f042 0201 	orr.w	r2, r2, #1
 800b486:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	4a17      	ldr	r2, [pc, #92]	; (800b4ec <HAL_TIM_Base_Start_IT+0x94>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d004      	beq.n	800b49c <HAL_TIM_Base_Start_IT+0x44>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b49a:	d115      	bne.n	800b4c8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	689a      	ldr	r2, [r3, #8]
 800b4a2:	4b13      	ldr	r3, [pc, #76]	; (800b4f0 <HAL_TIM_Base_Start_IT+0x98>)
 800b4a4:	4013      	ands	r3, r2
 800b4a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2b06      	cmp	r3, #6
 800b4ac:	d015      	beq.n	800b4da <HAL_TIM_Base_Start_IT+0x82>
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4b4:	d011      	beq.n	800b4da <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f042 0201 	orr.w	r2, r2, #1
 800b4c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4c6:	e008      	b.n	800b4da <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f042 0201 	orr.w	r2, r2, #1
 800b4d6:	601a      	str	r2, [r3, #0]
 800b4d8:	e000      	b.n	800b4dc <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b4dc:	2300      	movs	r3, #0
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3714      	adds	r7, #20
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr
 800b4ea:	bf00      	nop
 800b4ec:	40012c00 	.word	0x40012c00
 800b4f0:	00010007 	.word	0x00010007

0800b4f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b084      	sub	sp, #16
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	691b      	ldr	r3, [r3, #16]
 800b50a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	f003 0302 	and.w	r3, r3, #2
 800b512:	2b00      	cmp	r3, #0
 800b514:	d020      	beq.n	800b558 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f003 0302 	and.w	r3, r3, #2
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d01b      	beq.n	800b558 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f06f 0202 	mvn.w	r2, #2
 800b528:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2201      	movs	r2, #1
 800b52e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	699b      	ldr	r3, [r3, #24]
 800b536:	f003 0303 	and.w	r3, r3, #3
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d003      	beq.n	800b546 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 f8e9 	bl	800b716 <HAL_TIM_IC_CaptureCallback>
 800b544:	e005      	b.n	800b552 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 f8db 	bl	800b702 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f000 f8ec 	bl	800b72a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2200      	movs	r2, #0
 800b556:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	f003 0304 	and.w	r3, r3, #4
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d020      	beq.n	800b5a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f003 0304 	and.w	r3, r3, #4
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d01b      	beq.n	800b5a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f06f 0204 	mvn.w	r2, #4
 800b574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2202      	movs	r2, #2
 800b57a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	699b      	ldr	r3, [r3, #24]
 800b582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b586:	2b00      	cmp	r3, #0
 800b588:	d003      	beq.n	800b592 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 f8c3 	bl	800b716 <HAL_TIM_IC_CaptureCallback>
 800b590:	e005      	b.n	800b59e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 f8b5 	bl	800b702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f000 f8c6 	bl	800b72a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	f003 0308 	and.w	r3, r3, #8
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d020      	beq.n	800b5f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f003 0308 	and.w	r3, r3, #8
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d01b      	beq.n	800b5f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f06f 0208 	mvn.w	r2, #8
 800b5c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2204      	movs	r2, #4
 800b5c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	69db      	ldr	r3, [r3, #28]
 800b5ce:	f003 0303 	and.w	r3, r3, #3
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d003      	beq.n	800b5de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 f89d 	bl	800b716 <HAL_TIM_IC_CaptureCallback>
 800b5dc:	e005      	b.n	800b5ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f000 f88f 	bl	800b702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 f8a0 	bl	800b72a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	f003 0310 	and.w	r3, r3, #16
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d020      	beq.n	800b63c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f003 0310 	and.w	r3, r3, #16
 800b600:	2b00      	cmp	r3, #0
 800b602:	d01b      	beq.n	800b63c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f06f 0210 	mvn.w	r2, #16
 800b60c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2208      	movs	r2, #8
 800b612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	69db      	ldr	r3, [r3, #28]
 800b61a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d003      	beq.n	800b62a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 f877 	bl	800b716 <HAL_TIM_IC_CaptureCallback>
 800b628:	e005      	b.n	800b636 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f000 f869 	bl	800b702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 f87a 	bl	800b72a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2200      	movs	r2, #0
 800b63a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	f003 0301 	and.w	r3, r3, #1
 800b642:	2b00      	cmp	r3, #0
 800b644:	d00c      	beq.n	800b660 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f003 0301 	and.w	r3, r3, #1
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d007      	beq.n	800b660 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f06f 0201 	mvn.w	r2, #1
 800b658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f7fb fbb0 	bl	8006dc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b666:	2b00      	cmp	r3, #0
 800b668:	d104      	bne.n	800b674 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b670:	2b00      	cmp	r3, #0
 800b672:	d00c      	beq.n	800b68e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d007      	beq.n	800b68e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800b686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 f8dd 	bl	800b848 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b694:	2b00      	cmp	r3, #0
 800b696:	d00c      	beq.n	800b6b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d007      	beq.n	800b6b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b6aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 f8d5 	bl	800b85c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d00c      	beq.n	800b6d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d007      	beq.n	800b6d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b6ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f000 f834 	bl	800b73e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	f003 0320 	and.w	r3, r3, #32
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d00c      	beq.n	800b6fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	f003 0320 	and.w	r3, r3, #32
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d007      	beq.n	800b6fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f06f 0220 	mvn.w	r2, #32
 800b6f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 f89d 	bl	800b834 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b6fa:	bf00      	nop
 800b6fc:	3710      	adds	r7, #16
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}

0800b702 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b702:	b480      	push	{r7}
 800b704:	b083      	sub	sp, #12
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b70a:	bf00      	nop
 800b70c:	370c      	adds	r7, #12
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr

0800b716 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b716:	b480      	push	{r7}
 800b718:	b083      	sub	sp, #12
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b71e:	bf00      	nop
 800b720:	370c      	adds	r7, #12
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr

0800b72a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b72a:	b480      	push	{r7}
 800b72c:	b083      	sub	sp, #12
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b732:	bf00      	nop
 800b734:	370c      	adds	r7, #12
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr

0800b73e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b73e:	b480      	push	{r7}
 800b740:	b083      	sub	sp, #12
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b746:	bf00      	nop
 800b748:	370c      	adds	r7, #12
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr
	...

0800b754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b754:	b480      	push	{r7}
 800b756:	b085      	sub	sp, #20
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	4a30      	ldr	r2, [pc, #192]	; (800b828 <TIM_Base_SetConfig+0xd4>)
 800b768:	4293      	cmp	r3, r2
 800b76a:	d003      	beq.n	800b774 <TIM_Base_SetConfig+0x20>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b772:	d108      	bne.n	800b786 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b77a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	68fa      	ldr	r2, [r7, #12]
 800b782:	4313      	orrs	r3, r2
 800b784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	4a27      	ldr	r2, [pc, #156]	; (800b828 <TIM_Base_SetConfig+0xd4>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d00b      	beq.n	800b7a6 <TIM_Base_SetConfig+0x52>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b794:	d007      	beq.n	800b7a6 <TIM_Base_SetConfig+0x52>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	4a24      	ldr	r2, [pc, #144]	; (800b82c <TIM_Base_SetConfig+0xd8>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d003      	beq.n	800b7a6 <TIM_Base_SetConfig+0x52>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	4a23      	ldr	r2, [pc, #140]	; (800b830 <TIM_Base_SetConfig+0xdc>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d108      	bne.n	800b7b8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	68fa      	ldr	r2, [r7, #12]
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	695b      	ldr	r3, [r3, #20]
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	68fa      	ldr	r2, [r7, #12]
 800b7ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	689a      	ldr	r2, [r3, #8]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	681a      	ldr	r2, [r3, #0]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	4a12      	ldr	r2, [pc, #72]	; (800b828 <TIM_Base_SetConfig+0xd4>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d007      	beq.n	800b7f4 <TIM_Base_SetConfig+0xa0>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	4a11      	ldr	r2, [pc, #68]	; (800b82c <TIM_Base_SetConfig+0xd8>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d003      	beq.n	800b7f4 <TIM_Base_SetConfig+0xa0>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	4a10      	ldr	r2, [pc, #64]	; (800b830 <TIM_Base_SetConfig+0xdc>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d103      	bne.n	800b7fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	691a      	ldr	r2, [r3, #16]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2201      	movs	r2, #1
 800b800:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	691b      	ldr	r3, [r3, #16]
 800b806:	f003 0301 	and.w	r3, r3, #1
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d105      	bne.n	800b81a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	691b      	ldr	r3, [r3, #16]
 800b812:	f023 0201 	bic.w	r2, r3, #1
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	611a      	str	r2, [r3, #16]
  }
}
 800b81a:	bf00      	nop
 800b81c:	3714      	adds	r7, #20
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr
 800b826:	bf00      	nop
 800b828:	40012c00 	.word	0x40012c00
 800b82c:	40014400 	.word	0x40014400
 800b830:	40014800 	.word	0x40014800

0800b834 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b83c:	bf00      	nop
 800b83e:	370c      	adds	r7, #12
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr

0800b848 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b850:	bf00      	nop
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b864:	bf00      	nop
 800b866:	370c      	adds	r7, #12
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr

0800b870 <LL_RCC_GetUSARTClockSource>:
{
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800b878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b87c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	4013      	ands	r3, r2
}
 800b884:	4618      	mov	r0, r3
 800b886:	370c      	adds	r7, #12
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr

0800b890 <LL_RCC_GetLPUARTClockSource>:
{
 800b890:	b480      	push	{r7}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800b898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b89c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	4013      	ands	r3, r2
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	370c      	adds	r7, #12
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d101      	bne.n	800b8c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	e042      	b.n	800b948 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d106      	bne.n	800b8da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f7fb fbef 	bl	80070b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2224      	movs	r2, #36	; 0x24
 800b8de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f022 0201 	bic.w	r2, r2, #1
 800b8f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d002      	beq.n	800b900 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 fe22 	bl	800c544 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 fbf7 	bl	800c0f4 <UART_SetConfig>
 800b906:	4603      	mov	r3, r0
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d101      	bne.n	800b910 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b90c:	2301      	movs	r3, #1
 800b90e:	e01b      	b.n	800b948 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	685a      	ldr	r2, [r3, #4]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b91e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	689a      	ldr	r2, [r3, #8]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b92e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f042 0201 	orr.w	r2, r2, #1
 800b93e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 fea1 	bl	800c688 <UART_CheckIdleState>
 800b946:	4603      	mov	r3, r0
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3708      	adds	r7, #8
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b08a      	sub	sp, #40	; 0x28
 800b954:	af02      	add	r7, sp, #8
 800b956:	60f8      	str	r0, [r7, #12]
 800b958:	60b9      	str	r1, [r7, #8]
 800b95a:	603b      	str	r3, [r7, #0]
 800b95c:	4613      	mov	r3, r2
 800b95e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b966:	2b20      	cmp	r3, #32
 800b968:	d17b      	bne.n	800ba62 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d002      	beq.n	800b976 <HAL_UART_Transmit+0x26>
 800b970:	88fb      	ldrh	r3, [r7, #6]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d101      	bne.n	800b97a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b976:	2301      	movs	r3, #1
 800b978:	e074      	b.n	800ba64 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2200      	movs	r2, #0
 800b97e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2221      	movs	r2, #33	; 0x21
 800b986:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b98a:	f7fb fee5 	bl	8007758 <HAL_GetTick>
 800b98e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	88fa      	ldrh	r2, [r7, #6]
 800b994:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	88fa      	ldrh	r2, [r7, #6]
 800b99c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9a8:	d108      	bne.n	800b9bc <HAL_UART_Transmit+0x6c>
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	691b      	ldr	r3, [r3, #16]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d104      	bne.n	800b9bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	61bb      	str	r3, [r7, #24]
 800b9ba:	e003      	b.n	800b9c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b9c4:	e030      	b.n	800ba28 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	9300      	str	r3, [sp, #0]
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	2180      	movs	r1, #128	; 0x80
 800b9d0:	68f8      	ldr	r0, [r7, #12]
 800b9d2:	f000 ff03 	bl	800c7dc <UART_WaitOnFlagUntilTimeout>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d005      	beq.n	800b9e8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2220      	movs	r2, #32
 800b9e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b9e4:	2303      	movs	r3, #3
 800b9e6:	e03d      	b.n	800ba64 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b9e8:	69fb      	ldr	r3, [r7, #28]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d10b      	bne.n	800ba06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b9ee:	69bb      	ldr	r3, [r7, #24]
 800b9f0:	881b      	ldrh	r3, [r3, #0]
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b9fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b9fe:	69bb      	ldr	r3, [r7, #24]
 800ba00:	3302      	adds	r3, #2
 800ba02:	61bb      	str	r3, [r7, #24]
 800ba04:	e007      	b.n	800ba16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ba06:	69fb      	ldr	r3, [r7, #28]
 800ba08:	781a      	ldrb	r2, [r3, #0]
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	3301      	adds	r3, #1
 800ba14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ba1c:	b29b      	uxth	r3, r3
 800ba1e:	3b01      	subs	r3, #1
 800ba20:	b29a      	uxth	r2, r3
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d1c8      	bne.n	800b9c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	9300      	str	r3, [sp, #0]
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	2140      	movs	r1, #64	; 0x40
 800ba3e:	68f8      	ldr	r0, [r7, #12]
 800ba40:	f000 fecc 	bl	800c7dc <UART_WaitOnFlagUntilTimeout>
 800ba44:	4603      	mov	r3, r0
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d005      	beq.n	800ba56 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2220      	movs	r2, #32
 800ba4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800ba52:	2303      	movs	r3, #3
 800ba54:	e006      	b.n	800ba64 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2220      	movs	r2, #32
 800ba5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	e000      	b.n	800ba64 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ba62:	2302      	movs	r3, #2
  }
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3720      	adds	r7, #32
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b0ba      	sub	sp, #232	; 0xe8
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	69db      	ldr	r3, [r3, #28]
 800ba7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	689b      	ldr	r3, [r3, #8]
 800ba8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ba92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ba96:	f640 030f 	movw	r3, #2063	; 0x80f
 800ba9a:	4013      	ands	r3, r2
 800ba9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800baa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d11b      	bne.n	800bae0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800baa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baac:	f003 0320 	and.w	r3, r3, #32
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d015      	beq.n	800bae0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bab8:	f003 0320 	and.w	r3, r3, #32
 800babc:	2b00      	cmp	r3, #0
 800babe:	d105      	bne.n	800bacc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d009      	beq.n	800bae0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	f000 82e3 	beq.w	800c09c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	4798      	blx	r3
      }
      return;
 800bade:	e2dd      	b.n	800c09c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bae0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	f000 8123 	beq.w	800bd30 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800baea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800baee:	4b8d      	ldr	r3, [pc, #564]	; (800bd24 <HAL_UART_IRQHandler+0x2b8>)
 800baf0:	4013      	ands	r3, r2
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d106      	bne.n	800bb04 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800baf6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bafa:	4b8b      	ldr	r3, [pc, #556]	; (800bd28 <HAL_UART_IRQHandler+0x2bc>)
 800bafc:	4013      	ands	r3, r2
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	f000 8116 	beq.w	800bd30 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bb04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb08:	f003 0301 	and.w	r3, r3, #1
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d011      	beq.n	800bb34 <HAL_UART_IRQHandler+0xc8>
 800bb10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d00b      	beq.n	800bb34 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	2201      	movs	r2, #1
 800bb22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb2a:	f043 0201 	orr.w	r2, r3, #1
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb38:	f003 0302 	and.w	r3, r3, #2
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d011      	beq.n	800bb64 <HAL_UART_IRQHandler+0xf8>
 800bb40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb44:	f003 0301 	and.w	r3, r3, #1
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d00b      	beq.n	800bb64 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	2202      	movs	r2, #2
 800bb52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb5a:	f043 0204 	orr.w	r2, r3, #4
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb68:	f003 0304 	and.w	r3, r3, #4
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d011      	beq.n	800bb94 <HAL_UART_IRQHandler+0x128>
 800bb70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb74:	f003 0301 	and.w	r3, r3, #1
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d00b      	beq.n	800bb94 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	2204      	movs	r2, #4
 800bb82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb8a:	f043 0202 	orr.w	r2, r3, #2
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bb94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb98:	f003 0308 	and.w	r3, r3, #8
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d017      	beq.n	800bbd0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bba4:	f003 0320 	and.w	r3, r3, #32
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d105      	bne.n	800bbb8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bbac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bbb0:	4b5c      	ldr	r3, [pc, #368]	; (800bd24 <HAL_UART_IRQHandler+0x2b8>)
 800bbb2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d00b      	beq.n	800bbd0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	2208      	movs	r2, #8
 800bbbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbc6:	f043 0208 	orr.w	r2, r3, #8
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bbd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d012      	beq.n	800bc02 <HAL_UART_IRQHandler+0x196>
 800bbdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbe0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d00c      	beq.n	800bc02 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bbf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbf8:	f043 0220 	orr.w	r2, r3, #32
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	f000 8249 	beq.w	800c0a0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bc0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc12:	f003 0320 	and.w	r3, r3, #32
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d013      	beq.n	800bc42 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bc1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc1e:	f003 0320 	and.w	r3, r3, #32
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d105      	bne.n	800bc32 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bc26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d007      	beq.n	800bc42 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d003      	beq.n	800bc42 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	689b      	ldr	r3, [r3, #8]
 800bc52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc56:	2b40      	cmp	r3, #64	; 0x40
 800bc58:	d005      	beq.n	800bc66 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bc5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d054      	beq.n	800bd10 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f000 fe25 	bl	800c8b6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	689b      	ldr	r3, [r3, #8]
 800bc72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc76:	2b40      	cmp	r3, #64	; 0x40
 800bc78:	d146      	bne.n	800bd08 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	3308      	adds	r3, #8
 800bc80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bc88:	e853 3f00 	ldrex	r3, [r3]
 800bc8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bc90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bc94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	3308      	adds	r3, #8
 800bca2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bca6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bcaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bcb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bcb6:	e841 2300 	strex	r3, r2, [r1]
 800bcba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bcbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d1d9      	bne.n	800bc7a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d017      	beq.n	800bd00 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bcd6:	4a15      	ldr	r2, [pc, #84]	; (800bd2c <HAL_UART_IRQHandler+0x2c0>)
 800bcd8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bce0:	4618      	mov	r0, r3
 800bce2:	f7fb ffc2 	bl	8007c6a <HAL_DMA_Abort_IT>
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d019      	beq.n	800bd20 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bcf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800bcfa:	4610      	mov	r0, r2
 800bcfc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcfe:	e00f      	b.n	800bd20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f000 f9e1 	bl	800c0c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd06:	e00b      	b.n	800bd20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 f9dd 	bl	800c0c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd0e:	e007      	b.n	800bd20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f000 f9d9 	bl	800c0c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800bd1e:	e1bf      	b.n	800c0a0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd20:	bf00      	nop
    return;
 800bd22:	e1bd      	b.n	800c0a0 <HAL_UART_IRQHandler+0x634>
 800bd24:	10000001 	.word	0x10000001
 800bd28:	04000120 	.word	0x04000120
 800bd2c:	0800c983 	.word	0x0800c983

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd34:	2b01      	cmp	r3, #1
 800bd36:	f040 8153 	bne.w	800bfe0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bd3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd3e:	f003 0310 	and.w	r3, r3, #16
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	f000 814c 	beq.w	800bfe0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bd48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd4c:	f003 0310 	and.w	r3, r3, #16
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	f000 8145 	beq.w	800bfe0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	2210      	movs	r2, #16
 800bd5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	689b      	ldr	r3, [r3, #8]
 800bd64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd68:	2b40      	cmp	r3, #64	; 0x40
 800bd6a:	f040 80bb 	bne.w	800bee4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bd7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	f000 818f 	beq.w	800c0a4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bd8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bd90:	429a      	cmp	r2, r3
 800bd92:	f080 8187 	bcs.w	800c0a4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bd9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f003 0320 	and.w	r3, r3, #32
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	f040 8087 	bne.w	800bec2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bdc0:	e853 3f00 	ldrex	r3, [r3]
 800bdc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bdc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bdcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bdd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	461a      	mov	r2, r3
 800bdda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bdde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bde2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bdea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bdee:	e841 2300 	strex	r3, r2, [r1]
 800bdf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bdf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d1da      	bne.n	800bdb4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	3308      	adds	r3, #8
 800be04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be08:	e853 3f00 	ldrex	r3, [r3]
 800be0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800be0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800be10:	f023 0301 	bic.w	r3, r3, #1
 800be14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	3308      	adds	r3, #8
 800be1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800be22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800be26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800be2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800be2e:	e841 2300 	strex	r3, r2, [r1]
 800be32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800be34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be36:	2b00      	cmp	r3, #0
 800be38:	d1e1      	bne.n	800bdfe <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	3308      	adds	r3, #8
 800be40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be44:	e853 3f00 	ldrex	r3, [r3]
 800be48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800be4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	3308      	adds	r3, #8
 800be5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800be5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800be60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800be64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800be66:	e841 2300 	strex	r3, r2, [r1]
 800be6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800be6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d1e3      	bne.n	800be3a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2220      	movs	r2, #32
 800be76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2200      	movs	r2, #0
 800be7e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be88:	e853 3f00 	ldrex	r3, [r3]
 800be8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800be8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be90:	f023 0310 	bic.w	r3, r3, #16
 800be94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	461a      	mov	r2, r3
 800be9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bea2:	65bb      	str	r3, [r7, #88]	; 0x58
 800bea4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bea8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800beaa:	e841 2300 	strex	r3, r2, [r1]
 800beae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800beb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d1e4      	bne.n	800be80 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bebc:	4618      	mov	r0, r3
 800bebe:	f7fb fe75 	bl	8007bac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2202      	movs	r2, #2
 800bec6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	1ad3      	subs	r3, r2, r3
 800bed8:	b29b      	uxth	r3, r3
 800beda:	4619      	mov	r1, r3
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 f8fd 	bl	800c0dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bee2:	e0df      	b.n	800c0a4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bef0:	b29b      	uxth	r3, r3
 800bef2:	1ad3      	subs	r3, r2, r3
 800bef4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800befe:	b29b      	uxth	r3, r3
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	f000 80d1 	beq.w	800c0a8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800bf06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	f000 80cc 	beq.w	800c0a8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf18:	e853 3f00 	ldrex	r3, [r3]
 800bf1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bf1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bf32:	647b      	str	r3, [r7, #68]	; 0x44
 800bf34:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bf38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf3a:	e841 2300 	strex	r3, r2, [r1]
 800bf3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bf40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d1e4      	bne.n	800bf10 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	3308      	adds	r3, #8
 800bf4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf50:	e853 3f00 	ldrex	r3, [r3]
 800bf54:	623b      	str	r3, [r7, #32]
   return(result);
 800bf56:	6a3b      	ldr	r3, [r7, #32]
 800bf58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf5c:	f023 0301 	bic.w	r3, r3, #1
 800bf60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	3308      	adds	r3, #8
 800bf6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bf6e:	633a      	str	r2, [r7, #48]	; 0x30
 800bf70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf76:	e841 2300 	strex	r3, r2, [r1]
 800bf7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bf7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d1e1      	bne.n	800bf46 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2220      	movs	r2, #32
 800bf86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	e853 3f00 	ldrex	r3, [r3]
 800bfa2:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f023 0310 	bic.w	r3, r3, #16
 800bfaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bfb8:	61fb      	str	r3, [r7, #28]
 800bfba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfbc:	69b9      	ldr	r1, [r7, #24]
 800bfbe:	69fa      	ldr	r2, [r7, #28]
 800bfc0:	e841 2300 	strex	r3, r2, [r1]
 800bfc4:	617b      	str	r3, [r7, #20]
   return(result);
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d1e4      	bne.n	800bf96 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2202      	movs	r2, #2
 800bfd0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bfd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f000 f87f 	bl	800c0dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bfde:	e063      	b.n	800c0a8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bfe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d00e      	beq.n	800c00a <HAL_UART_IRQHandler+0x59e>
 800bfec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d008      	beq.n	800c00a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c000:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 fcfe 	bl	800ca04 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c008:	e051      	b.n	800c0ae <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c00a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c00e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c012:	2b00      	cmp	r3, #0
 800c014:	d014      	beq.n	800c040 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c01a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d105      	bne.n	800c02e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c026:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d008      	beq.n	800c040 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c032:	2b00      	cmp	r3, #0
 800c034:	d03a      	beq.n	800c0ac <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	4798      	blx	r3
    }
    return;
 800c03e:	e035      	b.n	800c0ac <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d009      	beq.n	800c060 <HAL_UART_IRQHandler+0x5f4>
 800c04c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c054:	2b00      	cmp	r3, #0
 800c056:	d003      	beq.n	800c060 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 fca8 	bl	800c9ae <UART_EndTransmit_IT>
    return;
 800c05e:	e026      	b.n	800c0ae <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c064:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d009      	beq.n	800c080 <HAL_UART_IRQHandler+0x614>
 800c06c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c070:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c074:	2b00      	cmp	r3, #0
 800c076:	d003      	beq.n	800c080 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f000 fcd7 	bl	800ca2c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c07e:	e016      	b.n	800c0ae <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c084:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d010      	beq.n	800c0ae <HAL_UART_IRQHandler+0x642>
 800c08c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c090:	2b00      	cmp	r3, #0
 800c092:	da0c      	bge.n	800c0ae <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 fcbf 	bl	800ca18 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c09a:	e008      	b.n	800c0ae <HAL_UART_IRQHandler+0x642>
      return;
 800c09c:	bf00      	nop
 800c09e:	e006      	b.n	800c0ae <HAL_UART_IRQHandler+0x642>
    return;
 800c0a0:	bf00      	nop
 800c0a2:	e004      	b.n	800c0ae <HAL_UART_IRQHandler+0x642>
      return;
 800c0a4:	bf00      	nop
 800c0a6:	e002      	b.n	800c0ae <HAL_UART_IRQHandler+0x642>
      return;
 800c0a8:	bf00      	nop
 800c0aa:	e000      	b.n	800c0ae <HAL_UART_IRQHandler+0x642>
    return;
 800c0ac:	bf00      	nop
  }
}
 800c0ae:	37e8      	adds	r7, #232	; 0xe8
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}

0800c0b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c0bc:	bf00      	nop
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c0d0:	bf00      	nop
 800c0d2:	370c      	adds	r7, #12
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr

0800c0dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b083      	sub	sp, #12
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c0e8:	bf00      	nop
 800c0ea:	370c      	adds	r7, #12
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c0f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c0f8:	b08c      	sub	sp, #48	; 0x30
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c0fe:	2300      	movs	r3, #0
 800c100:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	689a      	ldr	r2, [r3, #8]
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	691b      	ldr	r3, [r3, #16]
 800c10c:	431a      	orrs	r2, r3
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	695b      	ldr	r3, [r3, #20]
 800c112:	431a      	orrs	r2, r3
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	69db      	ldr	r3, [r3, #28]
 800c118:	4313      	orrs	r3, r2
 800c11a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	681a      	ldr	r2, [r3, #0]
 800c122:	4baf      	ldr	r3, [pc, #700]	; (800c3e0 <UART_SetConfig+0x2ec>)
 800c124:	4013      	ands	r3, r2
 800c126:	697a      	ldr	r2, [r7, #20]
 800c128:	6812      	ldr	r2, [r2, #0]
 800c12a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c12c:	430b      	orrs	r3, r1
 800c12e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	685b      	ldr	r3, [r3, #4]
 800c136:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	68da      	ldr	r2, [r3, #12]
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	430a      	orrs	r2, r1
 800c144:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	699b      	ldr	r3, [r3, #24]
 800c14a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4aa4      	ldr	r2, [pc, #656]	; (800c3e4 <UART_SetConfig+0x2f0>)
 800c152:	4293      	cmp	r3, r2
 800c154:	d004      	beq.n	800c160 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	6a1b      	ldr	r3, [r3, #32]
 800c15a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c15c:	4313      	orrs	r3, r2
 800c15e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	689b      	ldr	r3, [r3, #8]
 800c166:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c16a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c16e:	697a      	ldr	r2, [r7, #20]
 800c170:	6812      	ldr	r2, [r2, #0]
 800c172:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c174:	430b      	orrs	r3, r1
 800c176:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c17e:	f023 010f 	bic.w	r1, r3, #15
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	430a      	orrs	r2, r1
 800c18c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	4a95      	ldr	r2, [pc, #596]	; (800c3e8 <UART_SetConfig+0x2f4>)
 800c194:	4293      	cmp	r3, r2
 800c196:	d125      	bne.n	800c1e4 <UART_SetConfig+0xf0>
 800c198:	2003      	movs	r0, #3
 800c19a:	f7ff fb69 	bl	800b870 <LL_RCC_GetUSARTClockSource>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	2b03      	cmp	r3, #3
 800c1a2:	d81b      	bhi.n	800c1dc <UART_SetConfig+0xe8>
 800c1a4:	a201      	add	r2, pc, #4	; (adr r2, 800c1ac <UART_SetConfig+0xb8>)
 800c1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1aa:	bf00      	nop
 800c1ac:	0800c1bd 	.word	0x0800c1bd
 800c1b0:	0800c1cd 	.word	0x0800c1cd
 800c1b4:	0800c1c5 	.word	0x0800c1c5
 800c1b8:	0800c1d5 	.word	0x0800c1d5
 800c1bc:	2301      	movs	r3, #1
 800c1be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1c2:	e042      	b.n	800c24a <UART_SetConfig+0x156>
 800c1c4:	2302      	movs	r3, #2
 800c1c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1ca:	e03e      	b.n	800c24a <UART_SetConfig+0x156>
 800c1cc:	2304      	movs	r3, #4
 800c1ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1d2:	e03a      	b.n	800c24a <UART_SetConfig+0x156>
 800c1d4:	2308      	movs	r3, #8
 800c1d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1da:	e036      	b.n	800c24a <UART_SetConfig+0x156>
 800c1dc:	2310      	movs	r3, #16
 800c1de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1e2:	e032      	b.n	800c24a <UART_SetConfig+0x156>
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	4a7e      	ldr	r2, [pc, #504]	; (800c3e4 <UART_SetConfig+0x2f0>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d12a      	bne.n	800c244 <UART_SetConfig+0x150>
 800c1ee:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800c1f2:	f7ff fb4d 	bl	800b890 <LL_RCC_GetLPUARTClockSource>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c1fc:	d01a      	beq.n	800c234 <UART_SetConfig+0x140>
 800c1fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c202:	d81b      	bhi.n	800c23c <UART_SetConfig+0x148>
 800c204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c208:	d00c      	beq.n	800c224 <UART_SetConfig+0x130>
 800c20a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c20e:	d815      	bhi.n	800c23c <UART_SetConfig+0x148>
 800c210:	2b00      	cmp	r3, #0
 800c212:	d003      	beq.n	800c21c <UART_SetConfig+0x128>
 800c214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c218:	d008      	beq.n	800c22c <UART_SetConfig+0x138>
 800c21a:	e00f      	b.n	800c23c <UART_SetConfig+0x148>
 800c21c:	2300      	movs	r3, #0
 800c21e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c222:	e012      	b.n	800c24a <UART_SetConfig+0x156>
 800c224:	2302      	movs	r3, #2
 800c226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c22a:	e00e      	b.n	800c24a <UART_SetConfig+0x156>
 800c22c:	2304      	movs	r3, #4
 800c22e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c232:	e00a      	b.n	800c24a <UART_SetConfig+0x156>
 800c234:	2308      	movs	r3, #8
 800c236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c23a:	e006      	b.n	800c24a <UART_SetConfig+0x156>
 800c23c:	2310      	movs	r3, #16
 800c23e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c242:	e002      	b.n	800c24a <UART_SetConfig+0x156>
 800c244:	2310      	movs	r3, #16
 800c246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	4a65      	ldr	r2, [pc, #404]	; (800c3e4 <UART_SetConfig+0x2f0>)
 800c250:	4293      	cmp	r3, r2
 800c252:	f040 8097 	bne.w	800c384 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c256:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c25a:	2b08      	cmp	r3, #8
 800c25c:	d823      	bhi.n	800c2a6 <UART_SetConfig+0x1b2>
 800c25e:	a201      	add	r2, pc, #4	; (adr r2, 800c264 <UART_SetConfig+0x170>)
 800c260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c264:	0800c289 	.word	0x0800c289
 800c268:	0800c2a7 	.word	0x0800c2a7
 800c26c:	0800c291 	.word	0x0800c291
 800c270:	0800c2a7 	.word	0x0800c2a7
 800c274:	0800c297 	.word	0x0800c297
 800c278:	0800c2a7 	.word	0x0800c2a7
 800c27c:	0800c2a7 	.word	0x0800c2a7
 800c280:	0800c2a7 	.word	0x0800c2a7
 800c284:	0800c29f 	.word	0x0800c29f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c288:	f7fd faca 	bl	8009820 <HAL_RCC_GetPCLK1Freq>
 800c28c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c28e:	e010      	b.n	800c2b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c290:	4b56      	ldr	r3, [pc, #344]	; (800c3ec <UART_SetConfig+0x2f8>)
 800c292:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c294:	e00d      	b.n	800c2b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c296:	f7fd fa43 	bl	8009720 <HAL_RCC_GetSysClockFreq>
 800c29a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c29c:	e009      	b.n	800c2b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c29e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c2a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c2a4:	e005      	b.n	800c2b2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c2b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	f000 812b 	beq.w	800c510 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2be:	4a4c      	ldr	r2, [pc, #304]	; (800c3f0 <UART_SetConfig+0x2fc>)
 800c2c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	685a      	ldr	r2, [r3, #4]
 800c2d2:	4613      	mov	r3, r2
 800c2d4:	005b      	lsls	r3, r3, #1
 800c2d6:	4413      	add	r3, r2
 800c2d8:	69ba      	ldr	r2, [r7, #24]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d305      	bcc.n	800c2ea <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	685b      	ldr	r3, [r3, #4]
 800c2e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c2e4:	69ba      	ldr	r2, [r7, #24]
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d903      	bls.n	800c2f2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c2f0:	e10e      	b.n	800c510 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	60bb      	str	r3, [r7, #8]
 800c2f8:	60fa      	str	r2, [r7, #12]
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2fe:	4a3c      	ldr	r2, [pc, #240]	; (800c3f0 <UART_SetConfig+0x2fc>)
 800c300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c304:	b29b      	uxth	r3, r3
 800c306:	2200      	movs	r2, #0
 800c308:	603b      	str	r3, [r7, #0]
 800c30a:	607a      	str	r2, [r7, #4]
 800c30c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c310:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c314:	f7f4 fc70 	bl	8000bf8 <__aeabi_uldivmod>
 800c318:	4602      	mov	r2, r0
 800c31a:	460b      	mov	r3, r1
 800c31c:	4610      	mov	r0, r2
 800c31e:	4619      	mov	r1, r3
 800c320:	f04f 0200 	mov.w	r2, #0
 800c324:	f04f 0300 	mov.w	r3, #0
 800c328:	020b      	lsls	r3, r1, #8
 800c32a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c32e:	0202      	lsls	r2, r0, #8
 800c330:	6979      	ldr	r1, [r7, #20]
 800c332:	6849      	ldr	r1, [r1, #4]
 800c334:	0849      	lsrs	r1, r1, #1
 800c336:	2000      	movs	r0, #0
 800c338:	460c      	mov	r4, r1
 800c33a:	4605      	mov	r5, r0
 800c33c:	eb12 0804 	adds.w	r8, r2, r4
 800c340:	eb43 0905 	adc.w	r9, r3, r5
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	685b      	ldr	r3, [r3, #4]
 800c348:	2200      	movs	r2, #0
 800c34a:	469a      	mov	sl, r3
 800c34c:	4693      	mov	fp, r2
 800c34e:	4652      	mov	r2, sl
 800c350:	465b      	mov	r3, fp
 800c352:	4640      	mov	r0, r8
 800c354:	4649      	mov	r1, r9
 800c356:	f7f4 fc4f 	bl	8000bf8 <__aeabi_uldivmod>
 800c35a:	4602      	mov	r2, r0
 800c35c:	460b      	mov	r3, r1
 800c35e:	4613      	mov	r3, r2
 800c360:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c362:	6a3b      	ldr	r3, [r7, #32]
 800c364:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c368:	d308      	bcc.n	800c37c <UART_SetConfig+0x288>
 800c36a:	6a3b      	ldr	r3, [r7, #32]
 800c36c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c370:	d204      	bcs.n	800c37c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	6a3a      	ldr	r2, [r7, #32]
 800c378:	60da      	str	r2, [r3, #12]
 800c37a:	e0c9      	b.n	800c510 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800c37c:	2301      	movs	r3, #1
 800c37e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c382:	e0c5      	b.n	800c510 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	69db      	ldr	r3, [r3, #28]
 800c388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c38c:	d16d      	bne.n	800c46a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800c38e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c392:	3b01      	subs	r3, #1
 800c394:	2b07      	cmp	r3, #7
 800c396:	d82d      	bhi.n	800c3f4 <UART_SetConfig+0x300>
 800c398:	a201      	add	r2, pc, #4	; (adr r2, 800c3a0 <UART_SetConfig+0x2ac>)
 800c39a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c39e:	bf00      	nop
 800c3a0:	0800c3c1 	.word	0x0800c3c1
 800c3a4:	0800c3c9 	.word	0x0800c3c9
 800c3a8:	0800c3f5 	.word	0x0800c3f5
 800c3ac:	0800c3cf 	.word	0x0800c3cf
 800c3b0:	0800c3f5 	.word	0x0800c3f5
 800c3b4:	0800c3f5 	.word	0x0800c3f5
 800c3b8:	0800c3f5 	.word	0x0800c3f5
 800c3bc:	0800c3d7 	.word	0x0800c3d7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c3c0:	f7fd fa44 	bl	800984c <HAL_RCC_GetPCLK2Freq>
 800c3c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c3c6:	e01b      	b.n	800c400 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c3c8:	4b08      	ldr	r3, [pc, #32]	; (800c3ec <UART_SetConfig+0x2f8>)
 800c3ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c3cc:	e018      	b.n	800c400 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c3ce:	f7fd f9a7 	bl	8009720 <HAL_RCC_GetSysClockFreq>
 800c3d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c3d4:	e014      	b.n	800c400 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c3d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c3dc:	e010      	b.n	800c400 <UART_SetConfig+0x30c>
 800c3de:	bf00      	nop
 800c3e0:	cfff69f3 	.word	0xcfff69f3
 800c3e4:	40008000 	.word	0x40008000
 800c3e8:	40013800 	.word	0x40013800
 800c3ec:	00f42400 	.word	0x00f42400
 800c3f0:	080184c4 	.word	0x080184c4
      default:
        pclk = 0U;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c3fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c402:	2b00      	cmp	r3, #0
 800c404:	f000 8084 	beq.w	800c510 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c40c:	4a4b      	ldr	r2, [pc, #300]	; (800c53c <UART_SetConfig+0x448>)
 800c40e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c412:	461a      	mov	r2, r3
 800c414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c416:	fbb3 f3f2 	udiv	r3, r3, r2
 800c41a:	005a      	lsls	r2, r3, #1
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	085b      	lsrs	r3, r3, #1
 800c422:	441a      	add	r2, r3
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	fbb2 f3f3 	udiv	r3, r2, r3
 800c42c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c42e:	6a3b      	ldr	r3, [r7, #32]
 800c430:	2b0f      	cmp	r3, #15
 800c432:	d916      	bls.n	800c462 <UART_SetConfig+0x36e>
 800c434:	6a3b      	ldr	r3, [r7, #32]
 800c436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c43a:	d212      	bcs.n	800c462 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c43c:	6a3b      	ldr	r3, [r7, #32]
 800c43e:	b29b      	uxth	r3, r3
 800c440:	f023 030f 	bic.w	r3, r3, #15
 800c444:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c446:	6a3b      	ldr	r3, [r7, #32]
 800c448:	085b      	lsrs	r3, r3, #1
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	f003 0307 	and.w	r3, r3, #7
 800c450:	b29a      	uxth	r2, r3
 800c452:	8bfb      	ldrh	r3, [r7, #30]
 800c454:	4313      	orrs	r3, r2
 800c456:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	8bfa      	ldrh	r2, [r7, #30]
 800c45e:	60da      	str	r2, [r3, #12]
 800c460:	e056      	b.n	800c510 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800c462:	2301      	movs	r3, #1
 800c464:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c468:	e052      	b.n	800c510 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c46a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c46e:	3b01      	subs	r3, #1
 800c470:	2b07      	cmp	r3, #7
 800c472:	d822      	bhi.n	800c4ba <UART_SetConfig+0x3c6>
 800c474:	a201      	add	r2, pc, #4	; (adr r2, 800c47c <UART_SetConfig+0x388>)
 800c476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c47a:	bf00      	nop
 800c47c:	0800c49d 	.word	0x0800c49d
 800c480:	0800c4a5 	.word	0x0800c4a5
 800c484:	0800c4bb 	.word	0x0800c4bb
 800c488:	0800c4ab 	.word	0x0800c4ab
 800c48c:	0800c4bb 	.word	0x0800c4bb
 800c490:	0800c4bb 	.word	0x0800c4bb
 800c494:	0800c4bb 	.word	0x0800c4bb
 800c498:	0800c4b3 	.word	0x0800c4b3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c49c:	f7fd f9d6 	bl	800984c <HAL_RCC_GetPCLK2Freq>
 800c4a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c4a2:	e010      	b.n	800c4c6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c4a4:	4b26      	ldr	r3, [pc, #152]	; (800c540 <UART_SetConfig+0x44c>)
 800c4a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c4a8:	e00d      	b.n	800c4c6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c4aa:	f7fd f939 	bl	8009720 <HAL_RCC_GetSysClockFreq>
 800c4ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c4b0:	e009      	b.n	800c4c6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c4b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c4b8:	e005      	b.n	800c4c6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c4be:	2301      	movs	r3, #1
 800c4c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c4c4:	bf00      	nop
    }

    if (pclk != 0U)
 800c4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d021      	beq.n	800c510 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4d0:	4a1a      	ldr	r2, [pc, #104]	; (800c53c <UART_SetConfig+0x448>)
 800c4d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4da:	fbb3 f2f2 	udiv	r2, r3, r2
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	085b      	lsrs	r3, r3, #1
 800c4e4:	441a      	add	r2, r3
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	685b      	ldr	r3, [r3, #4]
 800c4ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c4f0:	6a3b      	ldr	r3, [r7, #32]
 800c4f2:	2b0f      	cmp	r3, #15
 800c4f4:	d909      	bls.n	800c50a <UART_SetConfig+0x416>
 800c4f6:	6a3b      	ldr	r3, [r7, #32]
 800c4f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4fc:	d205      	bcs.n	800c50a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c4fe:	6a3b      	ldr	r3, [r7, #32]
 800c500:	b29a      	uxth	r2, r3
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	60da      	str	r2, [r3, #12]
 800c508:	e002      	b.n	800c510 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800c50a:	2301      	movs	r3, #1
 800c50c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	2201      	movs	r2, #1
 800c514:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	2201      	movs	r2, #1
 800c51c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	2200      	movs	r2, #0
 800c524:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	2200      	movs	r2, #0
 800c52a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c52c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c530:	4618      	mov	r0, r3
 800c532:	3730      	adds	r7, #48	; 0x30
 800c534:	46bd      	mov	sp, r7
 800c536:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c53a:	bf00      	nop
 800c53c:	080184c4 	.word	0x080184c4
 800c540:	00f42400 	.word	0x00f42400

0800c544 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c550:	f003 0308 	and.w	r3, r3, #8
 800c554:	2b00      	cmp	r3, #0
 800c556:	d00a      	beq.n	800c56e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	430a      	orrs	r2, r1
 800c56c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c572:	f003 0301 	and.w	r3, r3, #1
 800c576:	2b00      	cmp	r3, #0
 800c578:	d00a      	beq.n	800c590 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	685b      	ldr	r3, [r3, #4]
 800c580:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	430a      	orrs	r2, r1
 800c58e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c594:	f003 0302 	and.w	r3, r3, #2
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d00a      	beq.n	800c5b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	430a      	orrs	r2, r1
 800c5b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5b6:	f003 0304 	and.w	r3, r3, #4
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d00a      	beq.n	800c5d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	430a      	orrs	r2, r1
 800c5d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5d8:	f003 0310 	and.w	r3, r3, #16
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d00a      	beq.n	800c5f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	689b      	ldr	r3, [r3, #8]
 800c5e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	430a      	orrs	r2, r1
 800c5f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5fa:	f003 0320 	and.w	r3, r3, #32
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d00a      	beq.n	800c618 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	689b      	ldr	r3, [r3, #8]
 800c608:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	430a      	orrs	r2, r1
 800c616:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c61c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c620:	2b00      	cmp	r3, #0
 800c622:	d01a      	beq.n	800c65a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	430a      	orrs	r2, r1
 800c638:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c63e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c642:	d10a      	bne.n	800c65a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	685b      	ldr	r3, [r3, #4]
 800c64a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	430a      	orrs	r2, r1
 800c658:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c65e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c662:	2b00      	cmp	r3, #0
 800c664:	d00a      	beq.n	800c67c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	430a      	orrs	r2, r1
 800c67a:	605a      	str	r2, [r3, #4]
  }
}
 800c67c:	bf00      	nop
 800c67e:	370c      	adds	r7, #12
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b098      	sub	sp, #96	; 0x60
 800c68c:	af02      	add	r7, sp, #8
 800c68e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2200      	movs	r2, #0
 800c694:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c698:	f7fb f85e 	bl	8007758 <HAL_GetTick>
 800c69c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f003 0308 	and.w	r3, r3, #8
 800c6a8:	2b08      	cmp	r3, #8
 800c6aa:	d12f      	bne.n	800c70c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c6ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c6b0:	9300      	str	r3, [sp, #0]
 800c6b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f000 f88e 	bl	800c7dc <UART_WaitOnFlagUntilTimeout>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d022      	beq.n	800c70c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ce:	e853 3f00 	ldrex	r3, [r3]
 800c6d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c6d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c6da:	653b      	str	r3, [r7, #80]	; 0x50
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6e4:	647b      	str	r3, [r7, #68]	; 0x44
 800c6e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c6ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6ec:	e841 2300 	strex	r3, r2, [r1]
 800c6f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c6f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d1e6      	bne.n	800c6c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2220      	movs	r2, #32
 800c6fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2200      	movs	r2, #0
 800c704:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c708:	2303      	movs	r3, #3
 800c70a:	e063      	b.n	800c7d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f003 0304 	and.w	r3, r3, #4
 800c716:	2b04      	cmp	r3, #4
 800c718:	d149      	bne.n	800c7ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c71a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c71e:	9300      	str	r3, [sp, #0]
 800c720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c722:	2200      	movs	r2, #0
 800c724:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 f857 	bl	800c7dc <UART_WaitOnFlagUntilTimeout>
 800c72e:	4603      	mov	r3, r0
 800c730:	2b00      	cmp	r3, #0
 800c732:	d03c      	beq.n	800c7ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c73c:	e853 3f00 	ldrex	r3, [r3]
 800c740:	623b      	str	r3, [r7, #32]
   return(result);
 800c742:	6a3b      	ldr	r3, [r7, #32]
 800c744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c748:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	461a      	mov	r2, r3
 800c750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c752:	633b      	str	r3, [r7, #48]	; 0x30
 800c754:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c75a:	e841 2300 	strex	r3, r2, [r1]
 800c75e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c762:	2b00      	cmp	r3, #0
 800c764:	d1e6      	bne.n	800c734 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	3308      	adds	r3, #8
 800c76c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	e853 3f00 	ldrex	r3, [r3]
 800c774:	60fb      	str	r3, [r7, #12]
   return(result);
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	f023 0301 	bic.w	r3, r3, #1
 800c77c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	3308      	adds	r3, #8
 800c784:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c786:	61fa      	str	r2, [r7, #28]
 800c788:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c78a:	69b9      	ldr	r1, [r7, #24]
 800c78c:	69fa      	ldr	r2, [r7, #28]
 800c78e:	e841 2300 	strex	r3, r2, [r1]
 800c792:	617b      	str	r3, [r7, #20]
   return(result);
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d1e5      	bne.n	800c766 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2220      	movs	r2, #32
 800c79e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c7aa:	2303      	movs	r3, #3
 800c7ac:	e012      	b.n	800c7d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2220      	movs	r2, #32
 800c7b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2220      	movs	r2, #32
 800c7ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c7d2:	2300      	movs	r3, #0
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3758      	adds	r7, #88	; 0x58
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}

0800c7dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b084      	sub	sp, #16
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	60f8      	str	r0, [r7, #12]
 800c7e4:	60b9      	str	r1, [r7, #8]
 800c7e6:	603b      	str	r3, [r7, #0]
 800c7e8:	4613      	mov	r3, r2
 800c7ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c7ec:	e04f      	b.n	800c88e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c7ee:	69bb      	ldr	r3, [r7, #24]
 800c7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7f4:	d04b      	beq.n	800c88e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c7f6:	f7fa ffaf 	bl	8007758 <HAL_GetTick>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	1ad3      	subs	r3, r2, r3
 800c800:	69ba      	ldr	r2, [r7, #24]
 800c802:	429a      	cmp	r2, r3
 800c804:	d302      	bcc.n	800c80c <UART_WaitOnFlagUntilTimeout+0x30>
 800c806:	69bb      	ldr	r3, [r7, #24]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d101      	bne.n	800c810 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c80c:	2303      	movs	r3, #3
 800c80e:	e04e      	b.n	800c8ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f003 0304 	and.w	r3, r3, #4
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d037      	beq.n	800c88e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	2b80      	cmp	r3, #128	; 0x80
 800c822:	d034      	beq.n	800c88e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	2b40      	cmp	r3, #64	; 0x40
 800c828:	d031      	beq.n	800c88e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	69db      	ldr	r3, [r3, #28]
 800c830:	f003 0308 	and.w	r3, r3, #8
 800c834:	2b08      	cmp	r3, #8
 800c836:	d110      	bne.n	800c85a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	2208      	movs	r2, #8
 800c83e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c840:	68f8      	ldr	r0, [r7, #12]
 800c842:	f000 f838 	bl	800c8b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	2208      	movs	r2, #8
 800c84a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2200      	movs	r2, #0
 800c852:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800c856:	2301      	movs	r3, #1
 800c858:	e029      	b.n	800c8ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	69db      	ldr	r3, [r3, #28]
 800c860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c868:	d111      	bne.n	800c88e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c872:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c874:	68f8      	ldr	r0, [r7, #12]
 800c876:	f000 f81e 	bl	800c8b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2220      	movs	r2, #32
 800c87e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2200      	movs	r2, #0
 800c886:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c88a:	2303      	movs	r3, #3
 800c88c:	e00f      	b.n	800c8ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	69da      	ldr	r2, [r3, #28]
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	4013      	ands	r3, r2
 800c898:	68ba      	ldr	r2, [r7, #8]
 800c89a:	429a      	cmp	r2, r3
 800c89c:	bf0c      	ite	eq
 800c89e:	2301      	moveq	r3, #1
 800c8a0:	2300      	movne	r3, #0
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	79fb      	ldrb	r3, [r7, #7]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d0a0      	beq.n	800c7ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c8ac:	2300      	movs	r3, #0
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3710      	adds	r7, #16
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}

0800c8b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c8b6:	b480      	push	{r7}
 800c8b8:	b095      	sub	sp, #84	; 0x54
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8c6:	e853 3f00 	ldrex	r3, [r3]
 800c8ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c8d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	461a      	mov	r2, r3
 800c8da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8dc:	643b      	str	r3, [r7, #64]	; 0x40
 800c8de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c8e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c8e4:	e841 2300 	strex	r3, r2, [r1]
 800c8e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d1e6      	bne.n	800c8be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	3308      	adds	r3, #8
 800c8f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f8:	6a3b      	ldr	r3, [r7, #32]
 800c8fa:	e853 3f00 	ldrex	r3, [r3]
 800c8fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800c900:	69fb      	ldr	r3, [r7, #28]
 800c902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c906:	f023 0301 	bic.w	r3, r3, #1
 800c90a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	3308      	adds	r3, #8
 800c912:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c914:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c916:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c918:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c91a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c91c:	e841 2300 	strex	r3, r2, [r1]
 800c920:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c924:	2b00      	cmp	r3, #0
 800c926:	d1e3      	bne.n	800c8f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d118      	bne.n	800c962 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	e853 3f00 	ldrex	r3, [r3]
 800c93c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	f023 0310 	bic.w	r3, r3, #16
 800c944:	647b      	str	r3, [r7, #68]	; 0x44
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	461a      	mov	r2, r3
 800c94c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c94e:	61bb      	str	r3, [r7, #24]
 800c950:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c952:	6979      	ldr	r1, [r7, #20]
 800c954:	69ba      	ldr	r2, [r7, #24]
 800c956:	e841 2300 	strex	r3, r2, [r1]
 800c95a:	613b      	str	r3, [r7, #16]
   return(result);
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d1e6      	bne.n	800c930 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2220      	movs	r2, #32
 800c966:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2200      	movs	r2, #0
 800c96e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2200      	movs	r2, #0
 800c974:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c976:	bf00      	nop
 800c978:	3754      	adds	r7, #84	; 0x54
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr

0800c982 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c982:	b580      	push	{r7, lr}
 800c984:	b084      	sub	sp, #16
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c98e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2200      	movs	r2, #0
 800c994:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2200      	movs	r2, #0
 800c99c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c9a0:	68f8      	ldr	r0, [r7, #12]
 800c9a2:	f7ff fb91 	bl	800c0c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c9a6:	bf00      	nop
 800c9a8:	3710      	adds	r7, #16
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}

0800c9ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c9ae:	b580      	push	{r7, lr}
 800c9b0:	b088      	sub	sp, #32
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	e853 3f00 	ldrex	r3, [r3]
 800c9c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9ca:	61fb      	str	r3, [r7, #28]
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	69fb      	ldr	r3, [r7, #28]
 800c9d4:	61bb      	str	r3, [r7, #24]
 800c9d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9d8:	6979      	ldr	r1, [r7, #20]
 800c9da:	69ba      	ldr	r2, [r7, #24]
 800c9dc:	e841 2300 	strex	r3, r2, [r1]
 800c9e0:	613b      	str	r3, [r7, #16]
   return(result);
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d1e6      	bne.n	800c9b6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2220      	movs	r2, #32
 800c9ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f7ff fb5c 	bl	800c0b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c9fc:	bf00      	nop
 800c9fe:	3720      	adds	r7, #32
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ca0c:	bf00      	nop
 800ca0e:	370c      	adds	r7, #12
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr

0800ca18 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b083      	sub	sp, #12
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ca20:	bf00      	nop
 800ca22:	370c      	adds	r7, #12
 800ca24:	46bd      	mov	sp, r7
 800ca26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2a:	4770      	bx	lr

0800ca2c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b083      	sub	sp, #12
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ca34:	bf00      	nop
 800ca36:	370c      	adds	r7, #12
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b085      	sub	sp, #20
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ca4e:	2b01      	cmp	r3, #1
 800ca50:	d101      	bne.n	800ca56 <HAL_UARTEx_DisableFifoMode+0x16>
 800ca52:	2302      	movs	r3, #2
 800ca54:	e027      	b.n	800caa6 <HAL_UARTEx_DisableFifoMode+0x66>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2201      	movs	r2, #1
 800ca5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2224      	movs	r2, #36	; 0x24
 800ca62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	681a      	ldr	r2, [r3, #0]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f022 0201 	bic.w	r2, r2, #1
 800ca7c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ca84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	68fa      	ldr	r2, [r7, #12]
 800ca92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2220      	movs	r2, #32
 800ca98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800caa4:	2300      	movs	r3, #0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3714      	adds	r7, #20
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr

0800cab2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cab2:	b580      	push	{r7, lr}
 800cab4:	b084      	sub	sp, #16
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	6078      	str	r0, [r7, #4]
 800caba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cac2:	2b01      	cmp	r3, #1
 800cac4:	d101      	bne.n	800caca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cac6:	2302      	movs	r3, #2
 800cac8:	e02d      	b.n	800cb26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2201      	movs	r2, #1
 800cace:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2224      	movs	r2, #36	; 0x24
 800cad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	681a      	ldr	r2, [r3, #0]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f022 0201 	bic.w	r2, r2, #1
 800caf0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	689b      	ldr	r3, [r3, #8]
 800caf8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	683a      	ldr	r2, [r7, #0]
 800cb02:	430a      	orrs	r2, r1
 800cb04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f000 f850 	bl	800cbac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2220      	movs	r2, #32
 800cb18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cb24:	2300      	movs	r3, #0
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3710      	adds	r7, #16
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}

0800cb2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cb2e:	b580      	push	{r7, lr}
 800cb30:	b084      	sub	sp, #16
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
 800cb36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cb3e:	2b01      	cmp	r3, #1
 800cb40:	d101      	bne.n	800cb46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cb42:	2302      	movs	r3, #2
 800cb44:	e02d      	b.n	800cba2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2201      	movs	r2, #1
 800cb4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2224      	movs	r2, #36	; 0x24
 800cb52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f022 0201 	bic.w	r2, r2, #1
 800cb6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	689b      	ldr	r3, [r3, #8]
 800cb74:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	683a      	ldr	r2, [r7, #0]
 800cb7e:	430a      	orrs	r2, r1
 800cb80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 f812 	bl	800cbac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	68fa      	ldr	r2, [r7, #12]
 800cb8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2220      	movs	r2, #32
 800cb94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cba0:	2300      	movs	r3, #0
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3710      	adds	r7, #16
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
	...

0800cbac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b085      	sub	sp, #20
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d108      	bne.n	800cbce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2201      	movs	r2, #1
 800cbc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cbcc:	e031      	b.n	800cc32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cbce:	2308      	movs	r3, #8
 800cbd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cbd2:	2308      	movs	r3, #8
 800cbd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	689b      	ldr	r3, [r3, #8]
 800cbdc:	0e5b      	lsrs	r3, r3, #25
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	f003 0307 	and.w	r3, r3, #7
 800cbe4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	689b      	ldr	r3, [r3, #8]
 800cbec:	0f5b      	lsrs	r3, r3, #29
 800cbee:	b2db      	uxtb	r3, r3
 800cbf0:	f003 0307 	and.w	r3, r3, #7
 800cbf4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cbf6:	7bbb      	ldrb	r3, [r7, #14]
 800cbf8:	7b3a      	ldrb	r2, [r7, #12]
 800cbfa:	4911      	ldr	r1, [pc, #68]	; (800cc40 <UARTEx_SetNbDataToProcess+0x94>)
 800cbfc:	5c8a      	ldrb	r2, [r1, r2]
 800cbfe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cc02:	7b3a      	ldrb	r2, [r7, #12]
 800cc04:	490f      	ldr	r1, [pc, #60]	; (800cc44 <UARTEx_SetNbDataToProcess+0x98>)
 800cc06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc08:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc0c:	b29a      	uxth	r2, r3
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc14:	7bfb      	ldrb	r3, [r7, #15]
 800cc16:	7b7a      	ldrb	r2, [r7, #13]
 800cc18:	4909      	ldr	r1, [pc, #36]	; (800cc40 <UARTEx_SetNbDataToProcess+0x94>)
 800cc1a:	5c8a      	ldrb	r2, [r1, r2]
 800cc1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cc20:	7b7a      	ldrb	r2, [r7, #13]
 800cc22:	4908      	ldr	r1, [pc, #32]	; (800cc44 <UARTEx_SetNbDataToProcess+0x98>)
 800cc24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc26:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc2a:	b29a      	uxth	r2, r3
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cc32:	bf00      	nop
 800cc34:	3714      	adds	r7, #20
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr
 800cc3e:	bf00      	nop
 800cc40:	080184dc 	.word	0x080184dc
 800cc44:	080184e4 	.word	0x080184e4

0800cc48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b085      	sub	sp, #20
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cc50:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800cc54:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800cc5c:	b29a      	uxth	r2, r3
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	b29b      	uxth	r3, r3
 800cc62:	43db      	mvns	r3, r3
 800cc64:	b29b      	uxth	r3, r3
 800cc66:	4013      	ands	r3, r2
 800cc68:	b29a      	uxth	r2, r3
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800cc70:	2300      	movs	r3, #0
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3714      	adds	r7, #20
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr

0800cc7e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800cc7e:	b480      	push	{r7}
 800cc80:	b085      	sub	sp, #20
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	60f8      	str	r0, [r7, #12]
 800cc86:	1d3b      	adds	r3, r7, #4
 800cc88:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2201      	movs	r2, #1
 800cc90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2200      	movs	r2, #0
 800cc98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	2200      	movs	r2, #0
 800cca8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800ccac:	2300      	movs	r3, #0
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3714      	adds	r7, #20
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb8:	4770      	bx	lr

0800ccba <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800ccba:	b580      	push	{r7, lr}
 800ccbc:	b088      	sub	sp, #32
 800ccbe:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ccc4:	f107 0308 	add.w	r3, r7, #8
 800ccc8:	2218      	movs	r2, #24
 800ccca:	2100      	movs	r1, #0
 800cccc:	4618      	mov	r0, r3
 800ccce:	f001 f8e1 	bl	800de94 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ccd2:	233f      	movs	r3, #63	; 0x3f
 800ccd4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800ccd6:	2381      	movs	r3, #129	; 0x81
 800ccd8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ccda:	1dfb      	adds	r3, r7, #7
 800ccdc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ccde:	2301      	movs	r3, #1
 800cce0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cce2:	f107 0308 	add.w	r3, r7, #8
 800cce6:	2100      	movs	r1, #0
 800cce8:	4618      	mov	r0, r3
 800ccea:	f001 fc83 	bl	800e5f4 <hci_send_req>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	da01      	bge.n	800ccf8 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ccf4:	23ff      	movs	r3, #255	; 0xff
 800ccf6:	e000      	b.n	800ccfa <aci_gap_set_non_discoverable+0x40>
  return status;
 800ccf8:	79fb      	ldrb	r3, [r7, #7]
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3720      	adds	r7, #32
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}

0800cd02 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800cd02:	b5b0      	push	{r4, r5, r7, lr}
 800cd04:	b0ce      	sub	sp, #312	; 0x138
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	4605      	mov	r5, r0
 800cd0a:	460c      	mov	r4, r1
 800cd0c:	4610      	mov	r0, r2
 800cd0e:	4619      	mov	r1, r3
 800cd10:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800cd14:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800cd18:	462a      	mov	r2, r5
 800cd1a:	701a      	strb	r2, [r3, #0]
 800cd1c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800cd20:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800cd24:	4622      	mov	r2, r4
 800cd26:	801a      	strh	r2, [r3, #0]
 800cd28:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800cd2c:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800cd30:	4602      	mov	r2, r0
 800cd32:	801a      	strh	r2, [r3, #0]
 800cd34:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800cd38:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800cd3c:	460a      	mov	r2, r1
 800cd3e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800cd40:	f107 0310 	add.w	r3, r7, #16
 800cd44:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800cd48:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800cd4c:	3308      	adds	r3, #8
 800cd4e:	f107 0210 	add.w	r2, r7, #16
 800cd52:	4413      	add	r3, r2
 800cd54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800cd58:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800cd5c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800cd60:	4413      	add	r3, r2
 800cd62:	3309      	adds	r3, #9
 800cd64:	f107 0210 	add.w	r2, r7, #16
 800cd68:	4413      	add	r3, r2
 800cd6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800cd6e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800cd72:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800cd76:	2200      	movs	r2, #0
 800cd78:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800cd80:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cd84:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800cd88:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800cd8c:	7812      	ldrb	r2, [r2, #0]
 800cd8e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cd90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cd94:	3301      	adds	r3, #1
 800cd96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800cd9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cd9e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800cda2:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800cda6:	8812      	ldrh	r2, [r2, #0]
 800cda8:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800cdac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cdb0:	3302      	adds	r3, #2
 800cdb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800cdb6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cdba:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800cdbe:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800cdc2:	8812      	ldrh	r2, [r2, #0]
 800cdc4:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800cdc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cdcc:	3302      	adds	r3, #2
 800cdce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800cdd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cdd6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800cdda:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800cdde:	7812      	ldrb	r2, [r2, #0]
 800cde0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800cde2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cde6:	3301      	adds	r3, #1
 800cde8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800cdec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cdf0:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800cdf4:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800cdf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800ce00:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ce04:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800ce08:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800ce0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ce0e:	3301      	adds	r3, #1
 800ce10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800ce14:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ce18:	3308      	adds	r3, #8
 800ce1a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800ce1e:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800ce22:	4618      	mov	r0, r3
 800ce24:	f001 f826 	bl	800de74 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800ce28:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800ce2c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ce30:	4413      	add	r3, r2
 800ce32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800ce36:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ce3a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800ce3e:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800ce40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ce44:	3301      	adds	r3, #1
 800ce46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800ce4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ce4e:	3301      	adds	r3, #1
 800ce50:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800ce54:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f001 f80b 	bl	800de74 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800ce5e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800ce62:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ce66:	4413      	add	r3, r2
 800ce68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800ce6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ce70:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800ce74:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800ce76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ce7a:	3302      	adds	r3, #2
 800ce7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800ce80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ce84:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800ce88:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800ce8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ce8e:	3302      	adds	r3, #2
 800ce90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ce94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ce98:	2218      	movs	r2, #24
 800ce9a:	2100      	movs	r1, #0
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f000 fff9 	bl	800de94 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cea2:	233f      	movs	r3, #63	; 0x3f
 800cea4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800cea8:	2383      	movs	r3, #131	; 0x83
 800ceaa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ceae:	f107 0310 	add.w	r3, r7, #16
 800ceb2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ceb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ceba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cebe:	f107 030f 	add.w	r3, r7, #15
 800cec2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cec6:	2301      	movs	r3, #1
 800cec8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cecc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ced0:	2100      	movs	r1, #0
 800ced2:	4618      	mov	r0, r3
 800ced4:	f001 fb8e 	bl	800e5f4 <hci_send_req>
 800ced8:	4603      	mov	r3, r0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	da01      	bge.n	800cee2 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800cede:	23ff      	movs	r3, #255	; 0xff
 800cee0:	e004      	b.n	800ceec <aci_gap_set_discoverable+0x1ea>
  return status;
 800cee2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800cee6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ceea:	781b      	ldrb	r3, [r3, #0]
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bdb0      	pop	{r4, r5, r7, pc}

0800cef6 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b0cc      	sub	sp, #304	; 0x130
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	4602      	mov	r2, r0
 800cefe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cf02:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800cf06:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800cf08:	f107 0310 	add.w	r3, r7, #16
 800cf0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800cf10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cf14:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800cf18:	2200      	movs	r2, #0
 800cf1a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800cf22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cf26:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cf2a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800cf2e:	7812      	ldrb	r2, [r2, #0]
 800cf30:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cf32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cf36:	3301      	adds	r3, #1
 800cf38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cf3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cf40:	2218      	movs	r2, #24
 800cf42:	2100      	movs	r1, #0
 800cf44:	4618      	mov	r0, r3
 800cf46:	f000 ffa5 	bl	800de94 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cf4a:	233f      	movs	r3, #63	; 0x3f
 800cf4c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800cf50:	2385      	movs	r3, #133	; 0x85
 800cf52:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cf56:	f107 0310 	add.w	r3, r7, #16
 800cf5a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cf5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cf62:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cf66:	f107 030f 	add.w	r3, r7, #15
 800cf6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cf74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cf78:	2100      	movs	r1, #0
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f001 fb3a 	bl	800e5f4 <hci_send_req>
 800cf80:	4603      	mov	r3, r0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	da01      	bge.n	800cf8a <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800cf86:	23ff      	movs	r3, #255	; 0xff
 800cf88:	e004      	b.n	800cf94 <aci_gap_set_io_capability+0x9e>
  return status;
 800cf8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cf8e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800cf92:	781b      	ldrb	r3, [r3, #0]
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}

0800cf9e <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800cf9e:	b5b0      	push	{r4, r5, r7, lr}
 800cfa0:	b0cc      	sub	sp, #304	; 0x130
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	4605      	mov	r5, r0
 800cfa6:	460c      	mov	r4, r1
 800cfa8:	4610      	mov	r0, r2
 800cfaa:	4619      	mov	r1, r3
 800cfac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cfb0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800cfb4:	462a      	mov	r2, r5
 800cfb6:	701a      	strb	r2, [r3, #0]
 800cfb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cfbc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800cfc0:	4622      	mov	r2, r4
 800cfc2:	701a      	strb	r2, [r3, #0]
 800cfc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cfc8:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800cfcc:	4602      	mov	r2, r0
 800cfce:	701a      	strb	r2, [r3, #0]
 800cfd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cfd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cfd8:	460a      	mov	r2, r1
 800cfda:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800cfdc:	f107 0310 	add.w	r3, r7, #16
 800cfe0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800cfe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cfe8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800cfec:	2200      	movs	r2, #0
 800cfee:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cff0:	2300      	movs	r3, #0
 800cff2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800cff6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cffa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cffe:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800d002:	7812      	ldrb	r2, [r2, #0]
 800d004:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d006:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d00a:	3301      	adds	r3, #1
 800d00c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800d010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d014:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d018:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d01c:	7812      	ldrb	r2, [r2, #0]
 800d01e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d020:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d024:	3301      	adds	r3, #1
 800d026:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800d02a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d02e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d032:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800d036:	7812      	ldrb	r2, [r2, #0]
 800d038:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d03a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d03e:	3301      	adds	r3, #1
 800d040:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800d044:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d048:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d04c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800d050:	7812      	ldrb	r2, [r2, #0]
 800d052:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800d054:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d058:	3301      	adds	r3, #1
 800d05a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800d05e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d062:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800d066:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800d068:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d06c:	3301      	adds	r3, #1
 800d06e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800d072:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d076:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800d07a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d07c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d080:	3301      	adds	r3, #1
 800d082:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800d086:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d08a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800d08e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800d090:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d094:	3301      	adds	r3, #1
 800d096:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800d09a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d09e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800d0a2:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800d0a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d0aa:	3304      	adds	r3, #4
 800d0ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800d0b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d0b4:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800d0b8:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800d0ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d0be:	3301      	adds	r3, #1
 800d0c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d0c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d0c8:	2218      	movs	r2, #24
 800d0ca:	2100      	movs	r1, #0
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f000 fee1 	bl	800de94 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d0d2:	233f      	movs	r3, #63	; 0x3f
 800d0d4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800d0d8:	2386      	movs	r3, #134	; 0x86
 800d0da:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d0de:	f107 0310 	add.w	r3, r7, #16
 800d0e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d0e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d0ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d0ee:	f107 030f 	add.w	r3, r7, #15
 800d0f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d0fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d100:	2100      	movs	r1, #0
 800d102:	4618      	mov	r0, r3
 800d104:	f001 fa76 	bl	800e5f4 <hci_send_req>
 800d108:	4603      	mov	r3, r0
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	da01      	bge.n	800d112 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800d10e:	23ff      	movs	r3, #255	; 0xff
 800d110:	e004      	b.n	800d11c <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800d112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d116:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d11a:	781b      	ldrb	r3, [r3, #0]
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d122:	46bd      	mov	sp, r7
 800d124:	bdb0      	pop	{r4, r5, r7, pc}

0800d126 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800d126:	b590      	push	{r4, r7, lr}
 800d128:	b0cd      	sub	sp, #308	; 0x134
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	4604      	mov	r4, r0
 800d12e:	4608      	mov	r0, r1
 800d130:	4611      	mov	r1, r2
 800d132:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d136:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800d13a:	6013      	str	r3, [r2, #0]
 800d13c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d140:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800d144:	4622      	mov	r2, r4
 800d146:	701a      	strb	r2, [r3, #0]
 800d148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d14c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d150:	4602      	mov	r2, r0
 800d152:	701a      	strb	r2, [r3, #0]
 800d154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d158:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800d15c:	460a      	mov	r2, r1
 800d15e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800d160:	f107 0310 	add.w	r3, r7, #16
 800d164:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d168:	f107 0308 	add.w	r3, r7, #8
 800d16c:	2207      	movs	r2, #7
 800d16e:	2100      	movs	r1, #0
 800d170:	4618      	mov	r0, r3
 800d172:	f000 fe8f 	bl	800de94 <Osal_MemSet>
  int index_input = 0;
 800d176:	2300      	movs	r3, #0
 800d178:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800d17c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d180:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d184:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800d188:	7812      	ldrb	r2, [r2, #0]
 800d18a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d18c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d190:	3301      	adds	r3, #1
 800d192:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800d196:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d19a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d19e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d1a2:	7812      	ldrb	r2, [r2, #0]
 800d1a4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d1a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800d1b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d1b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d1b8:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800d1bc:	7812      	ldrb	r2, [r2, #0]
 800d1be:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d1c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d1ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d1ce:	2218      	movs	r2, #24
 800d1d0:	2100      	movs	r1, #0
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f000 fe5e 	bl	800de94 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d1d8:	233f      	movs	r3, #63	; 0x3f
 800d1da:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800d1de:	238a      	movs	r3, #138	; 0x8a
 800d1e0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d1e4:	f107 0310 	add.w	r3, r7, #16
 800d1e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d1ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d1f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800d1f4:	f107 0308 	add.w	r3, r7, #8
 800d1f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800d1fc:	2307      	movs	r3, #7
 800d1fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d202:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d206:	2100      	movs	r1, #0
 800d208:	4618      	mov	r0, r3
 800d20a:	f001 f9f3 	bl	800e5f4 <hci_send_req>
 800d20e:	4603      	mov	r3, r0
 800d210:	2b00      	cmp	r3, #0
 800d212:	da01      	bge.n	800d218 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800d214:	23ff      	movs	r3, #255	; 0xff
 800d216:	e02e      	b.n	800d276 <aci_gap_init+0x150>
  if ( resp.Status )
 800d218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d21c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d005      	beq.n	800d232 <aci_gap_init+0x10c>
    return resp.Status;
 800d226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d22a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	e021      	b.n	800d276 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800d232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d236:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d23a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d23e:	b29a      	uxth	r2, r3
 800d240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d244:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800d24c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d250:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d254:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d258:	b29a      	uxth	r2, r3
 800d25a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800d25e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800d260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d264:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d268:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800d26c:	b29a      	uxth	r2, r3
 800d26e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800d272:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d274:	2300      	movs	r3, #0
}
 800d276:	4618      	mov	r0, r3
 800d278:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd90      	pop	{r4, r7, pc}

0800d280 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b0cc      	sub	sp, #304	; 0x130
 800d284:	af00      	add	r7, sp, #0
 800d286:	4602      	mov	r2, r0
 800d288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d28c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d290:	6019      	str	r1, [r3, #0]
 800d292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d296:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800d29a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800d29c:	f107 0310 	add.w	r3, r7, #16
 800d2a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d2a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d2a8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800d2b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d2ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d2be:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800d2c2:	7812      	ldrb	r2, [r2, #0]
 800d2c4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d2c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800d2d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d2d4:	1c58      	adds	r0, r3, #1
 800d2d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d2da:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800d2de:	781a      	ldrb	r2, [r3, #0]
 800d2e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d2e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d2e8:	6819      	ldr	r1, [r3, #0]
 800d2ea:	f000 fdc3 	bl	800de74 <Osal_MemCpy>
  index_input += AdvDataLen;
 800d2ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d2f2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800d2f6:	781b      	ldrb	r3, [r3, #0]
 800d2f8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d2fc:	4413      	add	r3, r2
 800d2fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d302:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d306:	2218      	movs	r2, #24
 800d308:	2100      	movs	r1, #0
 800d30a:	4618      	mov	r0, r3
 800d30c:	f000 fdc2 	bl	800de94 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d310:	233f      	movs	r3, #63	; 0x3f
 800d312:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800d316:	238e      	movs	r3, #142	; 0x8e
 800d318:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d31c:	f107 0310 	add.w	r3, r7, #16
 800d320:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d324:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d328:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d32c:	f107 030f 	add.w	r3, r7, #15
 800d330:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d334:	2301      	movs	r3, #1
 800d336:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d33a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d33e:	2100      	movs	r1, #0
 800d340:	4618      	mov	r0, r3
 800d342:	f001 f957 	bl	800e5f4 <hci_send_req>
 800d346:	4603      	mov	r3, r0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	da01      	bge.n	800d350 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800d34c:	23ff      	movs	r3, #255	; 0xff
 800d34e:	e004      	b.n	800d35a <aci_gap_update_adv_data+0xda>
  return status;
 800d350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d354:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d358:	781b      	ldrb	r3, [r3, #0]
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b088      	sub	sp, #32
 800d368:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d36a:	2300      	movs	r3, #0
 800d36c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d36e:	f107 0308 	add.w	r3, r7, #8
 800d372:	2218      	movs	r2, #24
 800d374:	2100      	movs	r1, #0
 800d376:	4618      	mov	r0, r3
 800d378:	f000 fd8c 	bl	800de94 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d37c:	233f      	movs	r3, #63	; 0x3f
 800d37e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800d380:	2392      	movs	r3, #146	; 0x92
 800d382:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d384:	1dfb      	adds	r3, r7, #7
 800d386:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d388:	2301      	movs	r3, #1
 800d38a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d38c:	f107 0308 	add.w	r3, r7, #8
 800d390:	2100      	movs	r1, #0
 800d392:	4618      	mov	r0, r3
 800d394:	f001 f92e 	bl	800e5f4 <hci_send_req>
 800d398:	4603      	mov	r3, r0
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	da01      	bge.n	800d3a2 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d39e:	23ff      	movs	r3, #255	; 0xff
 800d3a0:	e000      	b.n	800d3a4 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800d3a2:	79fb      	ldrb	r3, [r7, #7]
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3720      	adds	r7, #32
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}

0800d3ac <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b088      	sub	sp, #32
 800d3b0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d3b6:	f107 0308 	add.w	r3, r7, #8
 800d3ba:	2218      	movs	r2, #24
 800d3bc:	2100      	movs	r1, #0
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f000 fd68 	bl	800de94 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d3c4:	233f      	movs	r3, #63	; 0x3f
 800d3c6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800d3c8:	f240 1301 	movw	r3, #257	; 0x101
 800d3cc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d3ce:	1dfb      	adds	r3, r7, #7
 800d3d0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d3d6:	f107 0308 	add.w	r3, r7, #8
 800d3da:	2100      	movs	r1, #0
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f001 f909 	bl	800e5f4 <hci_send_req>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	da01      	bge.n	800d3ec <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800d3e8:	23ff      	movs	r3, #255	; 0xff
 800d3ea:	e000      	b.n	800d3ee <aci_gatt_init+0x42>
  return status;
 800d3ec:	79fb      	ldrb	r3, [r7, #7]
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3720      	adds	r7, #32
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}

0800d3f6 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800d3f6:	b590      	push	{r4, r7, lr}
 800d3f8:	b0cf      	sub	sp, #316	; 0x13c
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	4604      	mov	r4, r0
 800d3fe:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800d402:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800d406:	6001      	str	r1, [r0, #0]
 800d408:	4610      	mov	r0, r2
 800d40a:	4619      	mov	r1, r3
 800d40c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d410:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800d414:	4622      	mov	r2, r4
 800d416:	701a      	strb	r2, [r3, #0]
 800d418:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d41c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800d420:	4602      	mov	r2, r0
 800d422:	701a      	strb	r2, [r3, #0]
 800d424:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d428:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800d42c:	460a      	mov	r2, r1
 800d42e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800d430:	f107 0310 	add.w	r3, r7, #16
 800d434:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800d438:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d43c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	2b01      	cmp	r3, #1
 800d444:	d00a      	beq.n	800d45c <aci_gatt_add_service+0x66>
 800d446:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d44a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	2b02      	cmp	r3, #2
 800d452:	d101      	bne.n	800d458 <aci_gatt_add_service+0x62>
 800d454:	2311      	movs	r3, #17
 800d456:	e002      	b.n	800d45e <aci_gatt_add_service+0x68>
 800d458:	2301      	movs	r3, #1
 800d45a:	e000      	b.n	800d45e <aci_gatt_add_service+0x68>
 800d45c:	2303      	movs	r3, #3
 800d45e:	f107 0210 	add.w	r2, r7, #16
 800d462:	4413      	add	r3, r2
 800d464:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d468:	f107 030c 	add.w	r3, r7, #12
 800d46c:	2203      	movs	r2, #3
 800d46e:	2100      	movs	r1, #0
 800d470:	4618      	mov	r0, r3
 800d472:	f000 fd0f 	bl	800de94 <Osal_MemSet>
  int index_input = 0;
 800d476:	2300      	movs	r3, #0
 800d478:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800d47c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d480:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800d484:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800d488:	7812      	ldrb	r2, [r2, #0]
 800d48a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d48c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d490:	3301      	adds	r3, #1
 800d492:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800d496:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d49a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800d49e:	781b      	ldrb	r3, [r3, #0]
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	d002      	beq.n	800d4aa <aci_gatt_add_service+0xb4>
 800d4a4:	2b02      	cmp	r3, #2
 800d4a6:	d004      	beq.n	800d4b2 <aci_gatt_add_service+0xbc>
 800d4a8:	e007      	b.n	800d4ba <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800d4aa:	2302      	movs	r3, #2
 800d4ac:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800d4b0:	e005      	b.n	800d4be <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800d4b2:	2310      	movs	r3, #16
 800d4b4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800d4b8:	e001      	b.n	800d4be <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800d4ba:	2397      	movs	r3, #151	; 0x97
 800d4bc:	e06c      	b.n	800d598 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800d4be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d4c2:	1c58      	adds	r0, r3, #1
 800d4c4:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800d4c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d4cc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d4d0:	6819      	ldr	r1, [r3, #0]
 800d4d2:	f000 fccf 	bl	800de74 <Osal_MemCpy>
    index_input += size;
 800d4d6:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800d4da:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d4de:	4413      	add	r3, r2
 800d4e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800d4e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d4e8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800d4ec:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800d4f0:	7812      	ldrb	r2, [r2, #0]
 800d4f2:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800d4f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d4f8:	3301      	adds	r3, #1
 800d4fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800d4fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d502:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800d506:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800d50a:	7812      	ldrb	r2, [r2, #0]
 800d50c:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800d50e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d512:	3301      	adds	r3, #1
 800d514:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d518:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d51c:	2218      	movs	r2, #24
 800d51e:	2100      	movs	r1, #0
 800d520:	4618      	mov	r0, r3
 800d522:	f000 fcb7 	bl	800de94 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d526:	233f      	movs	r3, #63	; 0x3f
 800d528:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800d52c:	f44f 7381 	mov.w	r3, #258	; 0x102
 800d530:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d534:	f107 0310 	add.w	r3, r7, #16
 800d538:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d53c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d540:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800d544:	f107 030c 	add.w	r3, r7, #12
 800d548:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800d54c:	2303      	movs	r3, #3
 800d54e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d552:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d556:	2100      	movs	r1, #0
 800d558:	4618      	mov	r0, r3
 800d55a:	f001 f84b 	bl	800e5f4 <hci_send_req>
 800d55e:	4603      	mov	r3, r0
 800d560:	2b00      	cmp	r3, #0
 800d562:	da01      	bge.n	800d568 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800d564:	23ff      	movs	r3, #255	; 0xff
 800d566:	e017      	b.n	800d598 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800d568:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d56c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d570:	781b      	ldrb	r3, [r3, #0]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d005      	beq.n	800d582 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800d576:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d57a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d57e:	781b      	ldrb	r3, [r3, #0]
 800d580:	e00a      	b.n	800d598 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800d582:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d586:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d58a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d58e:	b29a      	uxth	r2, r3
 800d590:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d594:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d596:	2300      	movs	r3, #0
}
 800d598:	4618      	mov	r0, r3
 800d59a:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd90      	pop	{r4, r7, pc}

0800d5a2 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800d5a2:	b590      	push	{r4, r7, lr}
 800d5a4:	b0d1      	sub	sp, #324	; 0x144
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	4604      	mov	r4, r0
 800d5aa:	4608      	mov	r0, r1
 800d5ac:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800d5b0:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800d5b4:	600a      	str	r2, [r1, #0]
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d5bc:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800d5c0:	4622      	mov	r2, r4
 800d5c2:	801a      	strh	r2, [r3, #0]
 800d5c4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d5c8:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800d5cc:	4602      	mov	r2, r0
 800d5ce:	701a      	strb	r2, [r3, #0]
 800d5d0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d5d4:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800d5d8:	460a      	mov	r2, r1
 800d5da:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800d5dc:	f107 0318 	add.w	r3, r7, #24
 800d5e0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800d5e4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d5e8:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	2b01      	cmp	r3, #1
 800d5f0:	d00a      	beq.n	800d608 <aci_gatt_add_char+0x66>
 800d5f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d5f6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	2b02      	cmp	r3, #2
 800d5fe:	d101      	bne.n	800d604 <aci_gatt_add_char+0x62>
 800d600:	2313      	movs	r3, #19
 800d602:	e002      	b.n	800d60a <aci_gatt_add_char+0x68>
 800d604:	2303      	movs	r3, #3
 800d606:	e000      	b.n	800d60a <aci_gatt_add_char+0x68>
 800d608:	2305      	movs	r3, #5
 800d60a:	f107 0218 	add.w	r2, r7, #24
 800d60e:	4413      	add	r3, r2
 800d610:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d614:	f107 0314 	add.w	r3, r7, #20
 800d618:	2203      	movs	r2, #3
 800d61a:	2100      	movs	r1, #0
 800d61c:	4618      	mov	r0, r3
 800d61e:	f000 fc39 	bl	800de94 <Osal_MemSet>
  int index_input = 0;
 800d622:	2300      	movs	r3, #0
 800d624:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800d628:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800d62c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800d630:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800d634:	8812      	ldrh	r2, [r2, #0]
 800d636:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d638:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d63c:	3302      	adds	r3, #2
 800d63e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800d642:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800d646:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800d64a:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800d64e:	7812      	ldrb	r2, [r2, #0]
 800d650:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d652:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d656:	3301      	adds	r3, #1
 800d658:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800d65c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d660:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800d664:	781b      	ldrb	r3, [r3, #0]
 800d666:	2b01      	cmp	r3, #1
 800d668:	d002      	beq.n	800d670 <aci_gatt_add_char+0xce>
 800d66a:	2b02      	cmp	r3, #2
 800d66c:	d004      	beq.n	800d678 <aci_gatt_add_char+0xd6>
 800d66e:	e007      	b.n	800d680 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800d670:	2302      	movs	r3, #2
 800d672:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800d676:	e005      	b.n	800d684 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800d678:	2310      	movs	r3, #16
 800d67a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800d67e:	e001      	b.n	800d684 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800d680:	2397      	movs	r3, #151	; 0x97
 800d682:	e091      	b.n	800d7a8 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800d684:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800d688:	1cd8      	adds	r0, r3, #3
 800d68a:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800d68e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d692:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d696:	6819      	ldr	r1, [r3, #0]
 800d698:	f000 fbec 	bl	800de74 <Osal_MemCpy>
    index_input += size;
 800d69c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800d6a0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800d6a4:	4413      	add	r3, r2
 800d6a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800d6aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d6ae:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800d6b2:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800d6b6:	8812      	ldrh	r2, [r2, #0]
 800d6b8:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800d6ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d6be:	3302      	adds	r3, #2
 800d6c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800d6c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d6c8:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800d6cc:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800d6ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800d6d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d6dc:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800d6e0:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800d6e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800d6ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d6f0:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800d6f4:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800d6f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800d700:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d704:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800d708:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800d70a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d70e:	3301      	adds	r3, #1
 800d710:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800d714:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d718:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800d71c:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800d71e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d722:	3301      	adds	r3, #1
 800d724:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d728:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d72c:	2218      	movs	r2, #24
 800d72e:	2100      	movs	r1, #0
 800d730:	4618      	mov	r0, r3
 800d732:	f000 fbaf 	bl	800de94 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d736:	233f      	movs	r3, #63	; 0x3f
 800d738:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800d73c:	f44f 7382 	mov.w	r3, #260	; 0x104
 800d740:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800d744:	f107 0318 	add.w	r3, r7, #24
 800d748:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800d74c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d750:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800d754:	f107 0314 	add.w	r3, r7, #20
 800d758:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800d75c:	2303      	movs	r3, #3
 800d75e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d762:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d766:	2100      	movs	r1, #0
 800d768:	4618      	mov	r0, r3
 800d76a:	f000 ff43 	bl	800e5f4 <hci_send_req>
 800d76e:	4603      	mov	r3, r0
 800d770:	2b00      	cmp	r3, #0
 800d772:	da01      	bge.n	800d778 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800d774:	23ff      	movs	r3, #255	; 0xff
 800d776:	e017      	b.n	800d7a8 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800d778:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d77c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d780:	781b      	ldrb	r3, [r3, #0]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d005      	beq.n	800d792 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800d786:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d78a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d78e:	781b      	ldrb	r3, [r3, #0]
 800d790:	e00a      	b.n	800d7a8 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800d792:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d796:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d79a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d79e:	b29a      	uxth	r2, r3
 800d7a0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800d7a4:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d7a6:	2300      	movs	r3, #0
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd90      	pop	{r4, r7, pc}

0800d7b2 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800d7b2:	b5b0      	push	{r4, r5, r7, lr}
 800d7b4:	b0cc      	sub	sp, #304	; 0x130
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	4605      	mov	r5, r0
 800d7ba:	460c      	mov	r4, r1
 800d7bc:	4610      	mov	r0, r2
 800d7be:	4619      	mov	r1, r3
 800d7c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d7c4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d7c8:	462a      	mov	r2, r5
 800d7ca:	801a      	strh	r2, [r3, #0]
 800d7cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d7d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d7d4:	4622      	mov	r2, r4
 800d7d6:	801a      	strh	r2, [r3, #0]
 800d7d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d7dc:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	701a      	strb	r2, [r3, #0]
 800d7e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d7e8:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800d7ec:	460a      	mov	r2, r1
 800d7ee:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800d7f0:	f107 0310 	add.w	r3, r7, #16
 800d7f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d7f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d7fc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d800:	2200      	movs	r2, #0
 800d802:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d804:	2300      	movs	r3, #0
 800d806:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800d80a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d80e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d812:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d816:	8812      	ldrh	r2, [r2, #0]
 800d818:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d81a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d81e:	3302      	adds	r3, #2
 800d820:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800d824:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d828:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d82c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800d830:	8812      	ldrh	r2, [r2, #0]
 800d832:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800d834:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d838:	3302      	adds	r3, #2
 800d83a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800d83e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d842:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d846:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800d84a:	7812      	ldrb	r2, [r2, #0]
 800d84c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800d84e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d852:	3301      	adds	r3, #1
 800d854:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800d858:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d85c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d860:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800d864:	7812      	ldrb	r2, [r2, #0]
 800d866:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d868:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d86c:	3301      	adds	r3, #1
 800d86e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800d872:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d876:	1d98      	adds	r0, r3, #6
 800d878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d87c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	461a      	mov	r2, r3
 800d884:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800d888:	f000 faf4 	bl	800de74 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800d88c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d890:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d89a:	4413      	add	r3, r2
 800d89c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d8a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d8a4:	2218      	movs	r2, #24
 800d8a6:	2100      	movs	r1, #0
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f000 faf3 	bl	800de94 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d8ae:	233f      	movs	r3, #63	; 0x3f
 800d8b0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800d8b4:	f44f 7383 	mov.w	r3, #262	; 0x106
 800d8b8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d8bc:	f107 0310 	add.w	r3, r7, #16
 800d8c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d8c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d8c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d8cc:	f107 030f 	add.w	r3, r7, #15
 800d8d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d8da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d8de:	2100      	movs	r1, #0
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f000 fe87 	bl	800e5f4 <hci_send_req>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	da01      	bge.n	800d8f0 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800d8ec:	23ff      	movs	r3, #255	; 0xff
 800d8ee:	e004      	b.n	800d8fa <aci_gatt_update_char_value+0x148>
  return status;
 800d8f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d8f4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d8f8:	781b      	ldrb	r3, [r3, #0]
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d900:	46bd      	mov	sp, r7
 800d902:	bdb0      	pop	{r4, r5, r7, pc}

0800d904 <aci_gatt_write_resp>:
                                uint16_t Attr_Handle,
                                uint8_t Write_status,
                                uint8_t Error_Code,
                                uint8_t Attribute_Val_Length,
                                const uint8_t* Attribute_Val )
{
 800d904:	b5b0      	push	{r4, r5, r7, lr}
 800d906:	b0cc      	sub	sp, #304	; 0x130
 800d908:	af00      	add	r7, sp, #0
 800d90a:	4605      	mov	r5, r0
 800d90c:	460c      	mov	r4, r1
 800d90e:	4610      	mov	r0, r2
 800d910:	4619      	mov	r1, r3
 800d912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d916:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d91a:	462a      	mov	r2, r5
 800d91c:	801a      	strh	r2, [r3, #0]
 800d91e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d922:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d926:	4622      	mov	r2, r4
 800d928:	801a      	strh	r2, [r3, #0]
 800d92a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d92e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800d932:	4602      	mov	r2, r0
 800d934:	701a      	strb	r2, [r3, #0]
 800d936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d93a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800d93e:	460a      	mov	r2, r1
 800d940:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_resp_cp0 *cp0 = (aci_gatt_write_resp_cp0*)(cmd_buffer);
 800d942:	f107 0310 	add.w	r3, r7, #16
 800d946:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d94a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d94e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d952:	2200      	movs	r2, #0
 800d954:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d956:	2300      	movs	r3, #0
 800d958:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d95c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d960:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d964:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d968:	8812      	ldrh	r2, [r2, #0]
 800d96a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d96c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d970:	3302      	adds	r3, #2
 800d972:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Attr_Handle = Attr_Handle;
 800d976:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d97a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d97e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800d982:	8812      	ldrh	r2, [r2, #0]
 800d984:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800d986:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d98a:	3302      	adds	r3, #2
 800d98c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Write_status = Write_status;
 800d990:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d994:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d998:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800d99c:	7812      	ldrb	r2, [r2, #0]
 800d99e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800d9a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Error_Code = Error_Code;
 800d9aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d9ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d9b2:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800d9b6:	7812      	ldrb	r2, [r2, #0]
 800d9b8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d9ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d9be:	3301      	adds	r3, #1
 800d9c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 800d9c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d9c8:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800d9cc:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800d9ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 800d9d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d9dc:	3307      	adds	r3, #7
 800d9de:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800d9e2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f000 fa44 	bl	800de74 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 800d9ec:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 800d9f0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d9f4:	4413      	add	r3, r2
 800d9f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d9fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d9fe:	2218      	movs	r2, #24
 800da00:	2100      	movs	r1, #0
 800da02:	4618      	mov	r0, r3
 800da04:	f000 fa46 	bl	800de94 <Osal_MemSet>
  rq.ogf = 0x3f;
 800da08:	233f      	movs	r3, #63	; 0x3f
 800da0a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x126;
 800da0e:	f44f 7393 	mov.w	r3, #294	; 0x126
 800da12:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800da16:	f107 0310 	add.w	r3, r7, #16
 800da1a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800da1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800da22:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800da26:	f107 030f 	add.w	r3, r7, #15
 800da2a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800da2e:	2301      	movs	r3, #1
 800da30:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800da34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800da38:	2100      	movs	r1, #0
 800da3a:	4618      	mov	r0, r3
 800da3c:	f000 fdda 	bl	800e5f4 <hci_send_req>
 800da40:	4603      	mov	r3, r0
 800da42:	2b00      	cmp	r3, #0
 800da44:	da01      	bge.n	800da4a <aci_gatt_write_resp+0x146>
    return BLE_STATUS_TIMEOUT;
 800da46:	23ff      	movs	r3, #255	; 0xff
 800da48:	e004      	b.n	800da54 <aci_gatt_write_resp+0x150>
  return status;
 800da4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800da4e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800da52:	781b      	ldrb	r3, [r3, #0]
}
 800da54:	4618      	mov	r0, r3
 800da56:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bdb0      	pop	{r4, r5, r7, pc}

0800da5e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800da5e:	b580      	push	{r7, lr}
 800da60:	b0cc      	sub	sp, #304	; 0x130
 800da62:	af00      	add	r7, sp, #0
 800da64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800da68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800da6c:	601a      	str	r2, [r3, #0]
 800da6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800da72:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800da76:	4602      	mov	r2, r0
 800da78:	701a      	strb	r2, [r3, #0]
 800da7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800da7e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800da82:	460a      	mov	r2, r1
 800da84:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800da86:	f107 0310 	add.w	r3, r7, #16
 800da8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800da8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800da92:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800da96:	2200      	movs	r2, #0
 800da98:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800da9a:	2300      	movs	r3, #0
 800da9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800daa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800daa4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800daa8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800daac:	7812      	ldrb	r2, [r2, #0]
 800daae:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800dab0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dab4:	3301      	adds	r3, #1
 800dab6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800daba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dabe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800dac2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800dac6:	7812      	ldrb	r2, [r2, #0]
 800dac8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800daca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dace:	3301      	adds	r3, #1
 800dad0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800dad4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dad8:	1c98      	adds	r0, r3, #2
 800dada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dade:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800dae2:	781a      	ldrb	r2, [r3, #0]
 800dae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dae8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800daec:	6819      	ldr	r1, [r3, #0]
 800daee:	f000 f9c1 	bl	800de74 <Osal_MemCpy>
  index_input += Length;
 800daf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800daf6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800dafa:	781b      	ldrb	r3, [r3, #0]
 800dafc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800db00:	4413      	add	r3, r2
 800db02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800db06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800db0a:	2218      	movs	r2, #24
 800db0c:	2100      	movs	r1, #0
 800db0e:	4618      	mov	r0, r3
 800db10:	f000 f9c0 	bl	800de94 <Osal_MemSet>
  rq.ogf = 0x3f;
 800db14:	233f      	movs	r3, #63	; 0x3f
 800db16:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800db1a:	230c      	movs	r3, #12
 800db1c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800db20:	f107 0310 	add.w	r3, r7, #16
 800db24:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800db28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800db2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800db30:	f107 030f 	add.w	r3, r7, #15
 800db34:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800db38:	2301      	movs	r3, #1
 800db3a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800db3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800db42:	2100      	movs	r1, #0
 800db44:	4618      	mov	r0, r3
 800db46:	f000 fd55 	bl	800e5f4 <hci_send_req>
 800db4a:	4603      	mov	r3, r0
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	da01      	bge.n	800db54 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800db50:	23ff      	movs	r3, #255	; 0xff
 800db52:	e004      	b.n	800db5e <aci_hal_write_config_data+0x100>
  return status;
 800db54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800db58:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800db5c:	781b      	ldrb	r3, [r3, #0]
}
 800db5e:	4618      	mov	r0, r3
 800db60:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b0cc      	sub	sp, #304	; 0x130
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	4602      	mov	r2, r0
 800db70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800db74:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800db78:	701a      	strb	r2, [r3, #0]
 800db7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800db7e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800db82:	460a      	mov	r2, r1
 800db84:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800db86:	f107 0310 	add.w	r3, r7, #16
 800db8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800db8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800db92:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800db96:	2200      	movs	r2, #0
 800db98:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800db9a:	2300      	movs	r3, #0
 800db9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800dba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dba4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800dba8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800dbac:	7812      	ldrb	r2, [r2, #0]
 800dbae:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800dbb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800dbba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dbbe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800dbc2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800dbc6:	7812      	ldrb	r2, [r2, #0]
 800dbc8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800dbca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dbce:	3301      	adds	r3, #1
 800dbd0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dbd4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800dbd8:	2218      	movs	r2, #24
 800dbda:	2100      	movs	r1, #0
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f000 f959 	bl	800de94 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dbe2:	233f      	movs	r3, #63	; 0x3f
 800dbe4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800dbe8:	230f      	movs	r3, #15
 800dbea:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800dbee:	f107 0310 	add.w	r3, r7, #16
 800dbf2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800dbf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dbfa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800dbfe:	f107 030f 	add.w	r3, r7, #15
 800dc02:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800dc06:	2301      	movs	r3, #1
 800dc08:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dc0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800dc10:	2100      	movs	r1, #0
 800dc12:	4618      	mov	r0, r3
 800dc14:	f000 fcee 	bl	800e5f4 <hci_send_req>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	da01      	bge.n	800dc22 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800dc1e:	23ff      	movs	r3, #255	; 0xff
 800dc20:	e004      	b.n	800dc2c <aci_hal_set_tx_power_level+0xc4>
  return status;
 800dc22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dc26:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800dc2a:	781b      	ldrb	r3, [r3, #0]
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}

0800dc36 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800dc36:	b580      	push	{r7, lr}
 800dc38:	b088      	sub	sp, #32
 800dc3a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dc40:	f107 0308 	add.w	r3, r7, #8
 800dc44:	2218      	movs	r2, #24
 800dc46:	2100      	movs	r1, #0
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f000 f923 	bl	800de94 <Osal_MemSet>
  rq.ogf = 0x03;
 800dc4e:	2303      	movs	r3, #3
 800dc50:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800dc52:	2303      	movs	r3, #3
 800dc54:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800dc56:	1dfb      	adds	r3, r7, #7
 800dc58:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dc5e:	f107 0308 	add.w	r3, r7, #8
 800dc62:	2100      	movs	r1, #0
 800dc64:	4618      	mov	r0, r3
 800dc66:	f000 fcc5 	bl	800e5f4 <hci_send_req>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	da01      	bge.n	800dc74 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800dc70:	23ff      	movs	r3, #255	; 0xff
 800dc72:	e000      	b.n	800dc76 <hci_reset+0x40>
  return status;
 800dc74:	79fb      	ldrb	r3, [r7, #7]
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3720      	adds	r7, #32
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}

0800dc7e <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800dc7e:	b580      	push	{r7, lr}
 800dc80:	b0ce      	sub	sp, #312	; 0x138
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800dc88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800dc8c:	6019      	str	r1, [r3, #0]
 800dc8e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800dc92:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800dc96:	601a      	str	r2, [r3, #0]
 800dc98:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800dc9c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800dca0:	4602      	mov	r2, r0
 800dca2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800dca4:	f107 0318 	add.w	r3, r7, #24
 800dca8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800dcac:	f107 0310 	add.w	r3, r7, #16
 800dcb0:	2205      	movs	r2, #5
 800dcb2:	2100      	movs	r1, #0
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f000 f8ed 	bl	800de94 <Osal_MemSet>
  int index_input = 0;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800dcc0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800dcc4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800dcc8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800dccc:	8812      	ldrh	r2, [r2, #0]
 800dcce:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800dcd0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800dcd4:	3302      	adds	r3, #2
 800dcd6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dcda:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800dcde:	2218      	movs	r2, #24
 800dce0:	2100      	movs	r1, #0
 800dce2:	4618      	mov	r0, r3
 800dce4:	f000 f8d6 	bl	800de94 <Osal_MemSet>
  rq.ogf = 0x08;
 800dce8:	2308      	movs	r3, #8
 800dcea:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800dcee:	2330      	movs	r3, #48	; 0x30
 800dcf0:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800dcf4:	f107 0318 	add.w	r3, r7, #24
 800dcf8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800dcfc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800dd00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800dd04:	f107 0310 	add.w	r3, r7, #16
 800dd08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800dd0c:	2305      	movs	r3, #5
 800dd0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dd12:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800dd16:	2100      	movs	r1, #0
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f000 fc6b 	bl	800e5f4 <hci_send_req>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	da01      	bge.n	800dd28 <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 800dd24:	23ff      	movs	r3, #255	; 0xff
 800dd26:	e023      	b.n	800dd70 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 800dd28:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800dd2c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800dd30:	781b      	ldrb	r3, [r3, #0]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d005      	beq.n	800dd42 <hci_le_read_phy+0xc4>
    return resp.Status;
 800dd36:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800dd3a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800dd3e:	781b      	ldrb	r3, [r3, #0]
 800dd40:	e016      	b.n	800dd70 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 800dd42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800dd46:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800dd4a:	78da      	ldrb	r2, [r3, #3]
 800dd4c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800dd50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800dd58:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800dd5c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800dd60:	791a      	ldrb	r2, [r3, #4]
 800dd62:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800dd66:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800dd6e:	2300      	movs	r3, #0
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}

0800dd7a <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800dd7a:	b590      	push	{r4, r7, lr}
 800dd7c:	b0cd      	sub	sp, #308	; 0x134
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	4604      	mov	r4, r0
 800dd82:	4608      	mov	r0, r1
 800dd84:	4611      	mov	r1, r2
 800dd86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dd8a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800dd8e:	4622      	mov	r2, r4
 800dd90:	701a      	strb	r2, [r3, #0]
 800dd92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dd96:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800dd9a:	4602      	mov	r2, r0
 800dd9c:	701a      	strb	r2, [r3, #0]
 800dd9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dda2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800dda6:	460a      	mov	r2, r1
 800dda8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800ddaa:	f107 0310 	add.w	r3, r7, #16
 800ddae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ddb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ddb6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ddba:	2200      	movs	r2, #0
 800ddbc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800ddc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ddc8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ddcc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800ddd0:	7812      	ldrb	r2, [r2, #0]
 800ddd2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ddd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ddd8:	3301      	adds	r3, #1
 800ddda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800ddde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dde2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800dde6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ddea:	7812      	ldrb	r2, [r2, #0]
 800ddec:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ddee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800ddf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ddfc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800de00:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800de04:	7812      	ldrb	r2, [r2, #0]
 800de06:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800de08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800de0c:	3301      	adds	r3, #1
 800de0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800de12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800de16:	2218      	movs	r2, #24
 800de18:	2100      	movs	r1, #0
 800de1a:	4618      	mov	r0, r3
 800de1c:	f000 f83a 	bl	800de94 <Osal_MemSet>
  rq.ogf = 0x08;
 800de20:	2308      	movs	r3, #8
 800de22:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800de26:	2331      	movs	r3, #49	; 0x31
 800de28:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800de2c:	f107 0310 	add.w	r3, r7, #16
 800de30:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800de34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800de38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800de3c:	f107 030f 	add.w	r3, r7, #15
 800de40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800de44:	2301      	movs	r3, #1
 800de46:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800de4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800de4e:	2100      	movs	r1, #0
 800de50:	4618      	mov	r0, r3
 800de52:	f000 fbcf 	bl	800e5f4 <hci_send_req>
 800de56:	4603      	mov	r3, r0
 800de58:	2b00      	cmp	r3, #0
 800de5a:	da01      	bge.n	800de60 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800de5c:	23ff      	movs	r3, #255	; 0xff
 800de5e:	e004      	b.n	800de6a <hci_le_set_default_phy+0xf0>
  return status;
 800de60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800de64:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800de68:	781b      	ldrb	r3, [r3, #0]
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800de70:	46bd      	mov	sp, r7
 800de72:	bd90      	pop	{r4, r7, pc}

0800de74 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af00      	add	r7, sp, #0
 800de7a:	60f8      	str	r0, [r7, #12]
 800de7c:	60b9      	str	r1, [r7, #8]
 800de7e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800de80:	687a      	ldr	r2, [r7, #4]
 800de82:	68b9      	ldr	r1, [r7, #8]
 800de84:	68f8      	ldr	r0, [r7, #12]
 800de86:	f006 fc60 	bl	801474a <memcpy>
 800de8a:	4603      	mov	r3, r0
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	3710      	adds	r7, #16
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}

0800de94 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b084      	sub	sp, #16
 800de98:	af00      	add	r7, sp, #0
 800de9a:	60f8      	str	r0, [r7, #12]
 800de9c:	60b9      	str	r1, [r7, #8]
 800de9e:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800dea0:	687a      	ldr	r2, [r7, #4]
 800dea2:	68b9      	ldr	r1, [r7, #8]
 800dea4:	68f8      	ldr	r0, [r7, #12]
 800dea6:	f006 fb7b 	bl	80145a0 <memset>
 800deaa:	4603      	mov	r3, r0
}
 800deac:	4618      	mov	r0, r3
 800deae:	3710      	adds	r7, #16
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}

0800deb4 <DIS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void DIS_Init(void)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b088      	sub	sp, #32
 800deb8:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult;

  memset ( &DIS_Context, 0, sizeof(DIS_Context_t) );
 800deba:	2204      	movs	r2, #4
 800debc:	2100      	movs	r1, #0
 800debe:	4816      	ldr	r0, [pc, #88]	; (800df18 <DIS_Init+0x64>)
 800dec0:	f006 fb6e 	bl	80145a0 <memset>
   */

  /**
   *  Add Device Information Service
   */
  uuid = DEVICE_INFORMATION_SERVICE_UUID;
 800dec4:	f641 030a 	movw	r3, #6154	; 0x180a
 800dec8:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 800deca:	1d39      	adds	r1, r7, #4
 800decc:	4b12      	ldr	r3, [pc, #72]	; (800df18 <DIS_Init+0x64>)
 800dece:	9300      	str	r3, [sp, #0]
 800ded0:	2303      	movs	r3, #3
 800ded2:	2201      	movs	r2, #1
 800ded4:	2001      	movs	r0, #1
 800ded6:	f7ff fa8e 	bl	800d3f6 <aci_gatt_add_service>
 800deda:	4603      	mov	r3, r0
 800dedc:	71fb      	strb	r3, [r7, #7]

#if (BLE_CFG_DIS_MANUFACTURER_NAME_STRING != 0)
  /**
   *  Add Manufacturer Name String Characteristic
   */
  uuid = MANUFACTURER_NAME_UUID;
 800dede:	f642 2329 	movw	r3, #10793	; 0x2a29
 800dee2:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(DIS_Context.DeviceInformationSvcHdle,
 800dee4:	4b0c      	ldr	r3, [pc, #48]	; (800df18 <DIS_Init+0x64>)
 800dee6:	8818      	ldrh	r0, [r3, #0]
 800dee8:	1d3a      	adds	r2, r7, #4
 800deea:	4b0c      	ldr	r3, [pc, #48]	; (800df1c <DIS_Init+0x68>)
 800deec:	9305      	str	r3, [sp, #20]
 800deee:	2301      	movs	r3, #1
 800def0:	9304      	str	r3, [sp, #16]
 800def2:	230a      	movs	r3, #10
 800def4:	9303      	str	r3, [sp, #12]
 800def6:	2300      	movs	r3, #0
 800def8:	9302      	str	r3, [sp, #8]
 800defa:	2300      	movs	r3, #0
 800defc:	9301      	str	r3, [sp, #4]
 800defe:	2302      	movs	r3, #2
 800df00:	9300      	str	r3, [sp, #0]
 800df02:	2320      	movs	r3, #32
 800df04:	2101      	movs	r1, #1
 800df06:	f7ff fb4c 	bl	800d5a2 <aci_gatt_add_char>
 800df0a:	4603      	mov	r3, r0
 800df0c:	71fb      	strb	r3, [r7, #7]
    BLE_DBG_DIS_MSG ("FAILED to add PNP ID Characteristic, Error: %02X !!\n", 
                hciCmdResult);
  }
#endif
      
  return;
 800df0e:	bf00      	nop
}
 800df10:	3708      	adds	r7, #8
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
 800df16:	bf00      	nop
 800df18:	20000350 	.word	0x20000350
 800df1c:	20000352 	.word	0x20000352

0800df20 <HeartRate_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t HeartRate_Event_Handler(void *Event)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b08e      	sub	sp, #56	; 0x38
 800df24:	af02      	add	r7, sp, #8
 800df26:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  HRS_App_Notification_evt_t Notification;
  
  return_value = SVCCTL_EvtNotAck;
 800df28:	2300      	movs	r3, #0
 800df2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	3301      	adds	r3, #1
 800df32:	62bb      	str	r3, [r7, #40]	; 0x28

  switch(event_pckt->evt)
 800df34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df36:	781b      	ldrb	r3, [r3, #0]
 800df38:	2bff      	cmp	r3, #255	; 0xff
 800df3a:	d174      	bne.n	800e026 <HeartRate_Event_Handler+0x106>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800df3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df3e:	3302      	adds	r3, #2
 800df40:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blecore_evt->ecode)
 800df42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df44:	881b      	ldrh	r3, [r3, #0]
 800df46:	b29b      	uxth	r3, r3
 800df48:	f640 4201 	movw	r2, #3073	; 0xc01
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d03f      	beq.n	800dfd0 <HeartRate_Event_Handler+0xb0>
 800df50:	f640 4213 	movw	r2, #3091	; 0xc13
 800df54:	4293      	cmp	r3, r2
 800df56:	d160      	bne.n	800e01a <HeartRate_Event_Handler+0xfa>
        case ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE:
        {
          aci_gatt_write_permit_req_event_rp0 * write_perm_req;

          BLE_DBG_HRS_MSG("ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE\n");
          write_perm_req = (aci_gatt_write_permit_req_event_rp0*)blecore_evt->data;
 800df58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df5a:	3302      	adds	r3, #2
 800df5c:	623b      	str	r3, [r7, #32]

          if(write_perm_req->Attribute_Handle == (HRS_Context.ControlPointCharHdle + 1))
 800df5e:	6a3b      	ldr	r3, [r7, #32]
 800df60:	885b      	ldrh	r3, [r3, #2]
 800df62:	b29b      	uxth	r3, r3
 800df64:	461a      	mov	r2, r3
 800df66:	4b33      	ldr	r3, [pc, #204]	; (800e034 <HeartRate_Event_Handler+0x114>)
 800df68:	88db      	ldrh	r3, [r3, #6]
 800df6a:	3301      	adds	r3, #1
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d156      	bne.n	800e01e <HeartRate_Event_Handler+0xfe>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800df70:	2301      	movs	r3, #1
 800df72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            if (write_perm_req->Data[0] == HRS_CNTL_POINT_RESET_ENERGY_EXPENDED)
 800df76:	6a3b      	ldr	r3, [r7, #32]
 800df78:	795b      	ldrb	r3, [r3, #5]
 800df7a:	2b01      	cmp	r3, #1
 800df7c:	d117      	bne.n	800dfae <HeartRate_Event_Handler+0x8e>
            {
              /* received a correct value for HRM control point char */
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 800df7e:	6a3b      	ldr	r3, [r7, #32]
 800df80:	881b      	ldrh	r3, [r3, #0]
 800df82:	b298      	uxth	r0, r3
 800df84:	6a3b      	ldr	r3, [r7, #32]
 800df86:	885b      	ldrh	r3, [r3, #2]
 800df88:	b299      	uxth	r1, r3
 800df8a:	6a3b      	ldr	r3, [r7, #32]
 800df8c:	791b      	ldrb	r3, [r3, #4]
                                      write_perm_req->Attribute_Handle,
                                      0x00, /* write_status = 0 (no error))*/
                                      (uint8_t)HRS_CNTL_POINT_VALUE_IS_SUPPORTED, /* err_code */
                                      write_perm_req->Data_Length,
                                      (uint8_t *)&write_perm_req->Data[0]);
 800df8e:	6a3a      	ldr	r2, [r7, #32]
 800df90:	3205      	adds	r2, #5
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 800df92:	9201      	str	r2, [sp, #4]
 800df94:	9300      	str	r3, [sp, #0]
 800df96:	2300      	movs	r3, #0
 800df98:	2200      	movs	r2, #0
 800df9a:	f7ff fcb3 	bl	800d904 <aci_gatt_write_resp>

              /**
               * Notify the application to Reset The Energy Expended Value
               */
              Notification.HRS_Evt_Opcode = HRS_RESET_ENERGY_EXPENDED_EVT;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	733b      	strb	r3, [r7, #12]
              HRS_Notification(&Notification);
 800dfa2:	f107 030c 	add.w	r3, r7, #12
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f005 fb7b 	bl	80136a2 <HRS_Notification>
                                      write_perm_req->Data_Length,
                                      (uint8_t *)&write_perm_req->Data[0]);
            }
          }
        }
        break;
 800dfac:	e037      	b.n	800e01e <HeartRate_Event_Handler+0xfe>
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 800dfae:	6a3b      	ldr	r3, [r7, #32]
 800dfb0:	881b      	ldrh	r3, [r3, #0]
 800dfb2:	b298      	uxth	r0, r3
 800dfb4:	6a3b      	ldr	r3, [r7, #32]
 800dfb6:	885b      	ldrh	r3, [r3, #2]
 800dfb8:	b299      	uxth	r1, r3
 800dfba:	6a3b      	ldr	r3, [r7, #32]
 800dfbc:	791b      	ldrb	r3, [r3, #4]
                                      (uint8_t *)&write_perm_req->Data[0]);
 800dfbe:	6a3a      	ldr	r2, [r7, #32]
 800dfc0:	3205      	adds	r2, #5
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 800dfc2:	9201      	str	r2, [sp, #4]
 800dfc4:	9300      	str	r3, [sp, #0]
 800dfc6:	2380      	movs	r3, #128	; 0x80
 800dfc8:	2201      	movs	r2, #1
 800dfca:	f7ff fc9b 	bl	800d904 <aci_gatt_write_resp>
        break;
 800dfce:	e026      	b.n	800e01e <HeartRate_Event_Handler+0xfe>
#endif

        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
        {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800dfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd2:	3302      	adds	r3, #2
 800dfd4:	61fb      	str	r3, [r7, #28]
          if(attribute_modified->Attr_Handle == (HRS_Context.HeartRatemeasurementCharHdle + 2))
 800dfd6:	69fb      	ldr	r3, [r7, #28]
 800dfd8:	885b      	ldrh	r3, [r3, #2]
 800dfda:	b29b      	uxth	r3, r3
 800dfdc:	461a      	mov	r2, r3
 800dfde:	4b15      	ldr	r3, [pc, #84]	; (800e034 <HeartRate_Event_Handler+0x114>)
 800dfe0:	885b      	ldrh	r3, [r3, #2]
 800dfe2:	3302      	adds	r3, #2
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d11c      	bne.n	800e022 <HeartRate_Event_Handler+0x102>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800dfe8:	2301      	movs	r3, #1
 800dfea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            /**
             * Notify the application to start measurement
             */
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800dfee:	69fb      	ldr	r3, [r7, #28]
 800dff0:	7a1b      	ldrb	r3, [r3, #8]
 800dff2:	f003 0301 	and.w	r3, r3, #1
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d007      	beq.n	800e00a <HeartRate_Event_Handler+0xea>
            {
              BLE_DBG_HRS_MSG("ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE HRS_NOTIFICATION_ENABLED\n");
              Notification.HRS_Evt_Opcode =HRS_NOTIFICATION_ENABLED;
 800dffa:	2301      	movs	r3, #1
 800dffc:	733b      	strb	r3, [r7, #12]
              HRS_Notification(&Notification);
 800dffe:	f107 030c 	add.w	r3, r7, #12
 800e002:	4618      	mov	r0, r3
 800e004:	f005 fb4d 	bl	80136a2 <HRS_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              HRS_Notification(&Notification);
            }
#endif         
        }
        break;
 800e008:	e00b      	b.n	800e022 <HeartRate_Event_Handler+0x102>
              Notification.HRS_Evt_Opcode =HRS_NOTIFICATION_DISABLED;
 800e00a:	2302      	movs	r3, #2
 800e00c:	733b      	strb	r3, [r7, #12]
              HRS_Notification(&Notification);
 800e00e:	f107 030c 	add.w	r3, r7, #12
 800e012:	4618      	mov	r0, r3
 800e014:	f005 fb45 	bl	80136a2 <HRS_Notification>
        break;
 800e018:	e003      	b.n	800e022 <HeartRate_Event_Handler+0x102>

        default:
          break;
 800e01a:	bf00      	nop
 800e01c:	e004      	b.n	800e028 <HeartRate_Event_Handler+0x108>
        break;
 800e01e:	bf00      	nop
 800e020:	e002      	b.n	800e028 <HeartRate_Event_Handler+0x108>
        break;
 800e022:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800e024:	e000      	b.n	800e028 <HeartRate_Event_Handler+0x108>

    default:
      break;
 800e026:	bf00      	nop
  }

  return(return_value);
 800e028:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}/* end HeartRate_Event_Handler */
 800e02c:	4618      	mov	r0, r3
 800e02e:	3730      	adds	r7, #48	; 0x30
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}
 800e034:	20000354 	.word	0x20000354

0800e038 <HRS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void HRS_Init(void)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b088      	sub	sp, #32
 800e03c:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult = BLE_STATUS_SUCCESS;
 800e03e:	2300      	movs	r3, #0
 800e040:	71fb      	strb	r3, [r7, #7]

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(HeartRate_Event_Handler);
 800e042:	482e      	ldr	r0, [pc, #184]	; (800e0fc <HRS_Init+0xc4>)
 800e044:	f000 f90c 	bl	800e260 <SVCCTL_RegisterSvcHandler>
   *                                2 for hear rate measurement characteristic +
   *                                1 for client char configuration descriptor +
   *                                2 for body sensor location characteristic +
   *                                2 for control point characteristic
   */
  uuid = HEART_RATE_SERVICE_UUID;
 800e048:	f641 030d 	movw	r3, #6157	; 0x180d
 800e04c:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 800e04e:	1d39      	adds	r1, r7, #4
 800e050:	4b2b      	ldr	r3, [pc, #172]	; (800e100 <HRS_Init+0xc8>)
 800e052:	9300      	str	r3, [sp, #0]
 800e054:	2308      	movs	r3, #8
 800e056:	2201      	movs	r2, #1
 800e058:	2001      	movs	r0, #1
 800e05a:	f7ff f9cc 	bl	800d3f6 <aci_gatt_add_service>
 800e05e:	4603      	mov	r3, r0
 800e060:	71fb      	strb	r3, [r7, #7]
  }

  /**
   *  Add Heart Rate Measurement Characteristic
   */
  uuid = HEART_RATE_MEASURMENT_UUID;
 800e062:	f642 2337 	movw	r3, #10807	; 0x2a37
 800e066:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 800e068:	4b25      	ldr	r3, [pc, #148]	; (800e100 <HRS_Init+0xc8>)
 800e06a:	8818      	ldrh	r0, [r3, #0]
 800e06c:	1d3a      	adds	r2, r7, #4
 800e06e:	4b25      	ldr	r3, [pc, #148]	; (800e104 <HRS_Init+0xcc>)
 800e070:	9305      	str	r3, [sp, #20]
 800e072:	2301      	movs	r3, #1
 800e074:	9304      	str	r3, [sp, #16]
 800e076:	230a      	movs	r3, #10
 800e078:	9303      	str	r3, [sp, #12]
 800e07a:	2300      	movs	r3, #0
 800e07c:	9302      	str	r3, [sp, #8]
 800e07e:	2300      	movs	r3, #0
 800e080:	9301      	str	r3, [sp, #4]
 800e082:	2310      	movs	r3, #16
 800e084:	9300      	str	r3, [sp, #0]
 800e086:	2307      	movs	r3, #7
 800e088:	2101      	movs	r1, #1
 800e08a:	f7ff fa8a 	bl	800d5a2 <aci_gatt_add_char>
 800e08e:	4603      	mov	r3, r0
 800e090:	71fb      	strb	r3, [r7, #7]

#if (BLE_CFG_HRS_BODY_SENSOR_LOCATION_CHAR != 0)
  /**
   *  Add Body Sensor Location Characteristic
   */
  uuid = SENSOR_LOCATION_UUID;
 800e092:	f642 2338 	movw	r3, #10808	; 0x2a38
 800e096:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 800e098:	4b19      	ldr	r3, [pc, #100]	; (800e100 <HRS_Init+0xc8>)
 800e09a:	8818      	ldrh	r0, [r3, #0]
 800e09c:	1d3a      	adds	r2, r7, #4
 800e09e:	4b1a      	ldr	r3, [pc, #104]	; (800e108 <HRS_Init+0xd0>)
 800e0a0:	9305      	str	r3, [sp, #20]
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	9304      	str	r3, [sp, #16]
 800e0a6:	230a      	movs	r3, #10
 800e0a8:	9303      	str	r3, [sp, #12]
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	9302      	str	r3, [sp, #8]
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	9301      	str	r3, [sp, #4]
 800e0b2:	2302      	movs	r3, #2
 800e0b4:	9300      	str	r3, [sp, #0]
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	2101      	movs	r1, #1
 800e0ba:	f7ff fa72 	bl	800d5a2 <aci_gatt_add_char>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	71fb      	strb	r3, [r7, #7]
  }

#endif

#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
  uuid = CONTROL_POINT_UUID;
 800e0c2:	f642 2339 	movw	r3, #10809	; 0x2a39
 800e0c6:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 800e0c8:	4b0d      	ldr	r3, [pc, #52]	; (800e100 <HRS_Init+0xc8>)
 800e0ca:	8818      	ldrh	r0, [r3, #0]
 800e0cc:	1d3a      	adds	r2, r7, #4
 800e0ce:	4b0f      	ldr	r3, [pc, #60]	; (800e10c <HRS_Init+0xd4>)
 800e0d0:	9305      	str	r3, [sp, #20]
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	9304      	str	r3, [sp, #16]
 800e0d6:	230a      	movs	r3, #10
 800e0d8:	9303      	str	r3, [sp, #12]
 800e0da:	2302      	movs	r3, #2
 800e0dc:	9302      	str	r3, [sp, #8]
 800e0de:	2300      	movs	r3, #0
 800e0e0:	9301      	str	r3, [sp, #4]
 800e0e2:	2308      	movs	r3, #8
 800e0e4:	9300      	str	r3, [sp, #0]
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	2101      	movs	r1, #1
 800e0ea:	f7ff fa5a 	bl	800d5a2 <aci_gatt_add_char>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	71fb      	strb	r3, [r7, #7]
  }
#endif
  
  
  
  return;
 800e0f2:	bf00      	nop
}
 800e0f4:	3708      	adds	r7, #8
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	0800df21 	.word	0x0800df21
 800e100:	20000354 	.word	0x20000354
 800e104:	20000356 	.word	0x20000356
 800e108:	20000358 	.word	0x20000358
 800e10c:	2000035a 	.word	0x2000035a

0800e110 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800e110:	b480      	push	{r7}
 800e112:	af00      	add	r7, sp, #0
  return;
 800e114:	bf00      	nop
}
 800e116:	46bd      	mov	sp, r7
 800e118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11c:	4770      	bx	lr

0800e11e <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800e11e:	b480      	push	{r7}
 800e120:	af00      	add	r7, sp, #0
  return;
 800e122:	bf00      	nop
}
 800e124:	46bd      	mov	sp, r7
 800e126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12a:	4770      	bx	lr

0800e12c <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800e12c:	b480      	push	{r7}
 800e12e:	af00      	add	r7, sp, #0
  return;
 800e130:	bf00      	nop
}
 800e132:	46bd      	mov	sp, r7
 800e134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e138:	4770      	bx	lr

0800e13a <EDS_STM_Init>:
__WEAK void DIS_Init( void )
{
  return;
}
__WEAK void EDS_STM_Init( void )
{
 800e13a:	b480      	push	{r7}
 800e13c:	af00      	add	r7, sp, #0
  return;
 800e13e:	bf00      	nop
}
 800e140:	46bd      	mov	sp, r7
 800e142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e146:	4770      	bx	lr

0800e148 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800e148:	b480      	push	{r7}
 800e14a:	af00      	add	r7, sp, #0
  return;
 800e14c:	bf00      	nop
}
 800e14e:	46bd      	mov	sp, r7
 800e150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e154:	4770      	bx	lr

0800e156 <HTS_Init>:
__WEAK void HRS_Init( void )
{
  return;
}
__WEAK void HTS_Init( void )
{
 800e156:	b480      	push	{r7}
 800e158:	af00      	add	r7, sp, #0
  return;
 800e15a:	bf00      	nop
}
 800e15c:	46bd      	mov	sp, r7
 800e15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e162:	4770      	bx	lr

0800e164 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800e164:	b480      	push	{r7}
 800e166:	af00      	add	r7, sp, #0
  return;
 800e168:	bf00      	nop
}
 800e16a:	46bd      	mov	sp, r7
 800e16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e170:	4770      	bx	lr

0800e172 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800e172:	b480      	push	{r7}
 800e174:	af00      	add	r7, sp, #0
  return;
 800e176:	bf00      	nop
}
 800e178:	46bd      	mov	sp, r7
 800e17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17e:	4770      	bx	lr

0800e180 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800e180:	b480      	push	{r7}
 800e182:	af00      	add	r7, sp, #0
  return;
 800e184:	bf00      	nop
}
 800e186:	46bd      	mov	sp, r7
 800e188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18c:	4770      	bx	lr

0800e18e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800e18e:	b480      	push	{r7}
 800e190:	af00      	add	r7, sp, #0
  return;
 800e192:	bf00      	nop
}
 800e194:	46bd      	mov	sp, r7
 800e196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19a:	4770      	bx	lr

0800e19c <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800e19c:	b480      	push	{r7}
 800e19e:	af00      	add	r7, sp, #0
  return;
 800e1a0:	bf00      	nop
}
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a8:	4770      	bx	lr

0800e1aa <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800e1aa:	b480      	push	{r7}
 800e1ac:	af00      	add	r7, sp, #0
  return;
 800e1ae:	bf00      	nop
}
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b6:	4770      	bx	lr

0800e1b8 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	af00      	add	r7, sp, #0
  return;
 800e1bc:	bf00      	nop
}
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c4:	4770      	bx	lr

0800e1c6 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800e1c6:	b480      	push	{r7}
 800e1c8:	af00      	add	r7, sp, #0
  return;
 800e1ca:	bf00      	nop
}
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr

0800e1d4 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	af00      	add	r7, sp, #0
  return;
 800e1d8:	bf00      	nop
}
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e0:	4770      	bx	lr

0800e1e2 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800e1e2:	b480      	push	{r7}
 800e1e4:	af00      	add	r7, sp, #0
  return;
 800e1e6:	bf00      	nop
}
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ee:	4770      	bx	lr

0800e1f0 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800e1f4:	4b04      	ldr	r3, [pc, #16]	; (800e208 <SVCCTL_Init+0x18>)
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800e1fa:	4b04      	ldr	r3, [pc, #16]	; (800e20c <SVCCTL_Init+0x1c>)
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800e200:	f000 f806 	bl	800e210 <SVCCTL_SvcInit>

  return;
 800e204:	bf00      	nop
}
 800e206:	bd80      	pop	{r7, pc}
 800e208:	2000035c 	.word	0x2000035c
 800e20c:	2000037c 	.word	0x2000037c

0800e210 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	af00      	add	r7, sp, #0
  BAS_Init();
 800e214:	f7ff ff7c 	bl	800e110 <BAS_Init>

  BLS_Init();
 800e218:	f7ff ff81 	bl	800e11e <BLS_Init>

  CRS_STM_Init();
 800e21c:	f7ff ff86 	bl	800e12c <CRS_STM_Init>

  DIS_Init();
 800e220:	f7ff fe48 	bl	800deb4 <DIS_Init>

  EDS_STM_Init();
 800e224:	f7ff ff89 	bl	800e13a <EDS_STM_Init>

  HIDS_Init();
 800e228:	f7ff ff8e 	bl	800e148 <HIDS_Init>

  HRS_Init();
 800e22c:	f7ff ff04 	bl	800e038 <HRS_Init>

  HTS_Init();
 800e230:	f7ff ff91 	bl	800e156 <HTS_Init>

  IAS_Init();
 800e234:	f7ff ff96 	bl	800e164 <IAS_Init>

  LLS_Init();
 800e238:	f7ff ff9b 	bl	800e172 <LLS_Init>

  TPS_Init();
 800e23c:	f7ff ffa0 	bl	800e180 <TPS_Init>

  MOTENV_STM_Init();
 800e240:	f7ff ffa5 	bl	800e18e <MOTENV_STM_Init>

  P2PS_STM_Init();
 800e244:	f7ff ffaa 	bl	800e19c <P2PS_STM_Init>

  ZDD_STM_Init();
 800e248:	f7ff ffaf 	bl	800e1aa <ZDD_STM_Init>

  OTAS_STM_Init();
 800e24c:	f7ff ffb4 	bl	800e1b8 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800e250:	f7ff ffc0 	bl	800e1d4 <BVOPUS_STM_Init>

  MESH_Init();
 800e254:	f7ff ffb7 	bl	800e1c6 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800e258:	f7ff ffc3 	bl	800e1e2 <SVCCTL_InitCustomSvc>
  
  return;
 800e25c:	bf00      	nop
}
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800e260:	b480      	push	{r7}
 800e262:	b083      	sub	sp, #12
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800e268:	4b09      	ldr	r3, [pc, #36]	; (800e290 <SVCCTL_RegisterSvcHandler+0x30>)
 800e26a:	7f1b      	ldrb	r3, [r3, #28]
 800e26c:	4619      	mov	r1, r3
 800e26e:	4a08      	ldr	r2, [pc, #32]	; (800e290 <SVCCTL_RegisterSvcHandler+0x30>)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800e276:	4b06      	ldr	r3, [pc, #24]	; (800e290 <SVCCTL_RegisterSvcHandler+0x30>)
 800e278:	7f1b      	ldrb	r3, [r3, #28]
 800e27a:	3301      	adds	r3, #1
 800e27c:	b2da      	uxtb	r2, r3
 800e27e:	4b04      	ldr	r3, [pc, #16]	; (800e290 <SVCCTL_RegisterSvcHandler+0x30>)
 800e280:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800e282:	bf00      	nop
}
 800e284:	370c      	adds	r7, #12
 800e286:	46bd      	mov	sp, r7
 800e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28c:	4770      	bx	lr
 800e28e:	bf00      	nop
 800e290:	2000035c 	.word	0x2000035c

0800e294 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b086      	sub	sp, #24
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	3301      	adds	r3, #1
 800e2a0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	781b      	ldrb	r3, [r3, #0]
 800e2aa:	2bff      	cmp	r3, #255	; 0xff
 800e2ac:	d125      	bne.n	800e2fa <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	3302      	adds	r3, #2
 800e2b2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	881b      	ldrh	r3, [r3, #0]
 800e2b8:	b29b      	uxth	r3, r3
 800e2ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e2be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e2c2:	d118      	bne.n	800e2f6 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	757b      	strb	r3, [r7, #21]
 800e2c8:	e00d      	b.n	800e2e6 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800e2ca:	7d7b      	ldrb	r3, [r7, #21]
 800e2cc:	4a1a      	ldr	r2, [pc, #104]	; (800e338 <SVCCTL_UserEvtRx+0xa4>)
 800e2ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	4798      	blx	r3
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800e2da:	7dfb      	ldrb	r3, [r7, #23]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d108      	bne.n	800e2f2 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800e2e0:	7d7b      	ldrb	r3, [r7, #21]
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	757b      	strb	r3, [r7, #21]
 800e2e6:	4b14      	ldr	r3, [pc, #80]	; (800e338 <SVCCTL_UserEvtRx+0xa4>)
 800e2e8:	7f1b      	ldrb	r3, [r3, #28]
 800e2ea:	7d7a      	ldrb	r2, [r7, #21]
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d3ec      	bcc.n	800e2ca <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800e2f0:	e002      	b.n	800e2f8 <SVCCTL_UserEvtRx+0x64>
              break;
 800e2f2:	bf00      	nop
          break;
 800e2f4:	e000      	b.n	800e2f8 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800e2f6:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800e2f8:	e000      	b.n	800e2fc <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800e2fa:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800e2fc:	7dfb      	ldrb	r3, [r7, #23]
 800e2fe:	2b02      	cmp	r3, #2
 800e300:	d00f      	beq.n	800e322 <SVCCTL_UserEvtRx+0x8e>
 800e302:	2b02      	cmp	r3, #2
 800e304:	dc10      	bgt.n	800e328 <SVCCTL_UserEvtRx+0x94>
 800e306:	2b00      	cmp	r3, #0
 800e308:	d002      	beq.n	800e310 <SVCCTL_UserEvtRx+0x7c>
 800e30a:	2b01      	cmp	r3, #1
 800e30c:	d006      	beq.n	800e31c <SVCCTL_UserEvtRx+0x88>
 800e30e:	e00b      	b.n	800e328 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f004 febf 	bl	8013094 <SVCCTL_App_Notification>
 800e316:	4603      	mov	r3, r0
 800e318:	75bb      	strb	r3, [r7, #22]
      break;
 800e31a:	e008      	b.n	800e32e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800e31c:	2301      	movs	r3, #1
 800e31e:	75bb      	strb	r3, [r7, #22]
      break;
 800e320:	e005      	b.n	800e32e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800e322:	2300      	movs	r3, #0
 800e324:	75bb      	strb	r3, [r7, #22]
      break;
 800e326:	e002      	b.n	800e32e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800e328:	2301      	movs	r3, #1
 800e32a:	75bb      	strb	r3, [r7, #22]
      break;
 800e32c:	bf00      	nop
  }

  return (return_status);
 800e32e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e330:	4618      	mov	r0, r3
 800e332:	3718      	adds	r7, #24
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	2000035c 	.word	0x2000035c

0800e33c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b088      	sub	sp, #32
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e344:	f107 030c 	add.w	r3, r7, #12
 800e348:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800e350:	69fb      	ldr	r3, [r7, #28]
 800e352:	212e      	movs	r1, #46	; 0x2e
 800e354:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800e358:	f000 fae8 	bl	800e92c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e35c:	69fb      	ldr	r3, [r7, #28]
 800e35e:	330b      	adds	r3, #11
 800e360:	78db      	ldrb	r3, [r3, #3]
}
 800e362:	4618      	mov	r0, r3
 800e364:	3720      	adds	r7, #32
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}

0800e36a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800e36a:	b580      	push	{r7, lr}
 800e36c:	b088      	sub	sp, #32
 800e36e:	af00      	add	r7, sp, #0
 800e370:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e372:	f107 030c 	add.w	r3, r7, #12
 800e376:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800e37e:	69fb      	ldr	r3, [r7, #28]
 800e380:	210f      	movs	r1, #15
 800e382:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800e386:	f000 fad1 	bl	800e92c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e38a:	69fb      	ldr	r3, [r7, #28]
 800e38c:	330b      	adds	r3, #11
 800e38e:	78db      	ldrb	r3, [r3, #3]
}
 800e390:	4618      	mov	r0, r3
 800e392:	3720      	adds	r7, #32
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}

0800e398 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b088      	sub	sp, #32
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e3a0:	f107 030c 	add.w	r3, r7, #12
 800e3a4:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800e3a6:	69fb      	ldr	r3, [r7, #28]
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	2110      	movs	r1, #16
 800e3ac:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800e3b0:	f000 fabc 	bl	800e92c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e3b4:	69fb      	ldr	r3, [r7, #28]
 800e3b6:	330b      	adds	r3, #11
 800e3b8:	78db      	ldrb	r3, [r3, #3]
}
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	3720      	adds	r7, #32
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
	...

0800e3c4 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b08b      	sub	sp, #44	; 0x2c
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800e3ec:	4b4a      	ldr	r3, [pc, #296]	; (800e518 <SHCI_GetWirelessFwInfo+0x154>)
 800e3ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e3f4:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800e3f6:	693b      	ldr	r3, [r7, #16]
 800e3f8:	009b      	lsls	r3, r3, #2
 800e3fa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e3fe:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	4a44      	ldr	r2, [pc, #272]	; (800e51c <SHCI_GetWirelessFwInfo+0x158>)
 800e40c:	4293      	cmp	r3, r2
 800e40e:	d10f      	bne.n	800e430 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	695b      	ldr	r3, [r3, #20]
 800e414:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	699b      	ldr	r3, [r3, #24]
 800e41a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	69db      	ldr	r3, [r3, #28]
 800e420:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	68db      	ldr	r3, [r3, #12]
 800e426:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	691b      	ldr	r3, [r3, #16]
 800e42c:	617b      	str	r3, [r7, #20]
 800e42e:	e01a      	b.n	800e466 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800e430:	693b      	ldr	r3, [r7, #16]
 800e432:	009b      	lsls	r3, r3, #2
 800e434:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e438:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800e43c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	691b      	ldr	r3, [r3, #16]
 800e444:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	695b      	ldr	r3, [r3, #20]
 800e44c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	699b      	ldr	r3, [r3, #24]
 800e454:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	689b      	ldr	r3, [r3, #8]
 800e464:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800e466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e468:	0e1b      	lsrs	r3, r3, #24
 800e46a:	b2da      	uxtb	r2, r3
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800e470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e472:	0c1b      	lsrs	r3, r3, #16
 800e474:	b2da      	uxtb	r2, r3
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800e47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e47c:	0a1b      	lsrs	r3, r3, #8
 800e47e:	b2da      	uxtb	r2, r3
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800e484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e486:	091b      	lsrs	r3, r3, #4
 800e488:	b2db      	uxtb	r3, r3
 800e48a:	f003 030f 	and.w	r3, r3, #15
 800e48e:	b2da      	uxtb	r2, r3
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800e494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e496:	b2db      	uxtb	r3, r3
 800e498:	f003 030f 	and.w	r3, r3, #15
 800e49c:	b2da      	uxtb	r2, r3
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800e4a2:	6a3b      	ldr	r3, [r7, #32]
 800e4a4:	0e1b      	lsrs	r3, r3, #24
 800e4a6:	b2da      	uxtb	r2, r3
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800e4ac:	6a3b      	ldr	r3, [r7, #32]
 800e4ae:	0c1b      	lsrs	r3, r3, #16
 800e4b0:	b2da      	uxtb	r2, r3
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800e4b6:	6a3b      	ldr	r3, [r7, #32]
 800e4b8:	0a1b      	lsrs	r3, r3, #8
 800e4ba:	b2da      	uxtb	r2, r3
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800e4c0:	6a3b      	ldr	r3, [r7, #32]
 800e4c2:	b2da      	uxtb	r2, r3
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800e4c8:	69fb      	ldr	r3, [r7, #28]
 800e4ca:	b2da      	uxtb	r2, r3
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800e4d0:	69bb      	ldr	r3, [r7, #24]
 800e4d2:	0e1b      	lsrs	r3, r3, #24
 800e4d4:	b2da      	uxtb	r2, r3
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800e4da:	69bb      	ldr	r3, [r7, #24]
 800e4dc:	0c1b      	lsrs	r3, r3, #16
 800e4de:	b2da      	uxtb	r2, r3
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800e4e4:	69bb      	ldr	r3, [r7, #24]
 800e4e6:	0a1b      	lsrs	r3, r3, #8
 800e4e8:	b2da      	uxtb	r2, r3
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	0e1b      	lsrs	r3, r3, #24
 800e4f2:	b2da      	uxtb	r2, r3
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	0c1b      	lsrs	r3, r3, #16
 800e4fc:	b2da      	uxtb	r2, r3
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	b2da      	uxtb	r2, r3
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800e50a:	2300      	movs	r3, #0
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	372c      	adds	r7, #44	; 0x2c
 800e510:	46bd      	mov	sp, r7
 800e512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e516:	4770      	bx	lr
 800e518:	58004000 	.word	0x58004000
 800e51c:	a94656b9 	.word	0xa94656b9

0800e520 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b082      	sub	sp, #8
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	685b      	ldr	r3, [r3, #4]
 800e52e:	4a08      	ldr	r2, [pc, #32]	; (800e550 <hci_init+0x30>)
 800e530:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800e532:	4a08      	ldr	r2, [pc, #32]	; (800e554 <hci_init+0x34>)
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800e538:	4806      	ldr	r0, [pc, #24]	; (800e554 <hci_init+0x34>)
 800e53a:	f000 f979 	bl	800e830 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	4618      	mov	r0, r3
 800e544:	f000 f8da 	bl	800e6fc <TlInit>

  return;
 800e548:	bf00      	nop
}
 800e54a:	3708      	adds	r7, #8
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}
 800e550:	200016fc 	.word	0x200016fc
 800e554:	200016d4 	.word	0x200016d4

0800e558 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b084      	sub	sp, #16
 800e55c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e55e:	4822      	ldr	r0, [pc, #136]	; (800e5e8 <hci_user_evt_proc+0x90>)
 800e560:	f000 fc9c 	bl	800ee9c <LST_is_empty>
 800e564:	4603      	mov	r3, r0
 800e566:	2b00      	cmp	r3, #0
 800e568:	d12b      	bne.n	800e5c2 <hci_user_evt_proc+0x6a>
 800e56a:	4b20      	ldr	r3, [pc, #128]	; (800e5ec <hci_user_evt_proc+0x94>)
 800e56c:	781b      	ldrb	r3, [r3, #0]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d027      	beq.n	800e5c2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e572:	f107 030c 	add.w	r3, r7, #12
 800e576:	4619      	mov	r1, r3
 800e578:	481b      	ldr	r0, [pc, #108]	; (800e5e8 <hci_user_evt_proc+0x90>)
 800e57a:	f000 fd1e 	bl	800efba <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800e57e:	4b1c      	ldr	r3, [pc, #112]	; (800e5f0 <hci_user_evt_proc+0x98>)
 800e580:	69db      	ldr	r3, [r3, #28]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d00c      	beq.n	800e5a0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800e58a:	2301      	movs	r3, #1
 800e58c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e58e:	4b18      	ldr	r3, [pc, #96]	; (800e5f0 <hci_user_evt_proc+0x98>)
 800e590:	69db      	ldr	r3, [r3, #28]
 800e592:	1d3a      	adds	r2, r7, #4
 800e594:	4610      	mov	r0, r2
 800e596:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800e598:	793a      	ldrb	r2, [r7, #4]
 800e59a:	4b14      	ldr	r3, [pc, #80]	; (800e5ec <hci_user_evt_proc+0x94>)
 800e59c:	701a      	strb	r2, [r3, #0]
 800e59e:	e002      	b.n	800e5a6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e5a0:	4b12      	ldr	r3, [pc, #72]	; (800e5ec <hci_user_evt_proc+0x94>)
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800e5a6:	4b11      	ldr	r3, [pc, #68]	; (800e5ec <hci_user_evt_proc+0x94>)
 800e5a8:	781b      	ldrb	r3, [r3, #0]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d004      	beq.n	800e5b8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f000 fb9b 	bl	800ecec <TL_MM_EvtDone>
 800e5b6:	e004      	b.n	800e5c2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	480a      	ldr	r0, [pc, #40]	; (800e5e8 <hci_user_evt_proc+0x90>)
 800e5be:	f000 fc8f 	bl	800eee0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e5c2:	4809      	ldr	r0, [pc, #36]	; (800e5e8 <hci_user_evt_proc+0x90>)
 800e5c4:	f000 fc6a 	bl	800ee9c <LST_is_empty>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d107      	bne.n	800e5de <hci_user_evt_proc+0x86>
 800e5ce:	4b07      	ldr	r3, [pc, #28]	; (800e5ec <hci_user_evt_proc+0x94>)
 800e5d0:	781b      	ldrb	r3, [r3, #0]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d003      	beq.n	800e5de <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800e5d6:	4804      	ldr	r0, [pc, #16]	; (800e5e8 <hci_user_evt_proc+0x90>)
 800e5d8:	f004 ffee 	bl	80135b8 <hci_notify_asynch_evt>
  }


  return;
 800e5dc:	bf00      	nop
 800e5de:	bf00      	nop
}
 800e5e0:	3710      	adds	r7, #16
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}
 800e5e6:	bf00      	nop
 800e5e8:	20000384 	.word	0x20000384
 800e5ec:	20000390 	.word	0x20000390
 800e5f0:	200016d4 	.word	0x200016d4

0800e5f4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b088      	sub	sp, #32
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	460b      	mov	r3, r1
 800e5fe:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800e600:	2000      	movs	r0, #0
 800e602:	f000 f8d1 	bl	800e7a8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800e606:	2300      	movs	r3, #0
 800e608:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	885b      	ldrh	r3, [r3, #2]
 800e60e:	b21b      	sxth	r3, r3
 800e610:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e614:	b21a      	sxth	r2, r3
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	881b      	ldrh	r3, [r3, #0]
 800e61a:	029b      	lsls	r3, r3, #10
 800e61c:	b21b      	sxth	r3, r3
 800e61e:	4313      	orrs	r3, r2
 800e620:	b21b      	sxth	r3, r3
 800e622:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800e624:	4b33      	ldr	r3, [pc, #204]	; (800e6f4 <hci_send_req+0x100>)
 800e626:	2201      	movs	r2, #1
 800e628:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	68db      	ldr	r3, [r3, #12]
 800e62e:	b2d9      	uxtb	r1, r3
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	689a      	ldr	r2, [r3, #8]
 800e634:	8bbb      	ldrh	r3, [r7, #28]
 800e636:	4618      	mov	r0, r3
 800e638:	f000 f890 	bl	800e75c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800e63c:	e04e      	b.n	800e6dc <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800e63e:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800e642:	f004 ffd9 	bl	80135f8 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e646:	e043      	b.n	800e6d0 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800e648:	f107 030c 	add.w	r3, r7, #12
 800e64c:	4619      	mov	r1, r3
 800e64e:	482a      	ldr	r0, [pc, #168]	; (800e6f8 <hci_send_req+0x104>)
 800e650:	f000 fcb3 	bl	800efba <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	7a5b      	ldrb	r3, [r3, #9]
 800e658:	2b0f      	cmp	r3, #15
 800e65a:	d114      	bne.n	800e686 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	330b      	adds	r3, #11
 800e660:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800e662:	693b      	ldr	r3, [r7, #16]
 800e664:	885b      	ldrh	r3, [r3, #2]
 800e666:	b29b      	uxth	r3, r3
 800e668:	8bba      	ldrh	r2, [r7, #28]
 800e66a:	429a      	cmp	r2, r3
 800e66c:	d104      	bne.n	800e678 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	691b      	ldr	r3, [r3, #16]
 800e672:	693a      	ldr	r2, [r7, #16]
 800e674:	7812      	ldrb	r2, [r2, #0]
 800e676:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	785b      	ldrb	r3, [r3, #1]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d027      	beq.n	800e6d0 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800e680:	2301      	movs	r3, #1
 800e682:	77fb      	strb	r3, [r7, #31]
 800e684:	e024      	b.n	800e6d0 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	330b      	adds	r3, #11
 800e68a:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800e68c:	69bb      	ldr	r3, [r7, #24]
 800e68e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e692:	b29b      	uxth	r3, r3
 800e694:	8bba      	ldrh	r2, [r7, #28]
 800e696:	429a      	cmp	r2, r3
 800e698:	d114      	bne.n	800e6c4 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	7a9b      	ldrb	r3, [r3, #10]
 800e69e:	3b03      	subs	r3, #3
 800e6a0:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	695a      	ldr	r2, [r3, #20]
 800e6a6:	7dfb      	ldrb	r3, [r7, #23]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	bfa8      	it	ge
 800e6ac:	461a      	movge	r2, r3
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	6918      	ldr	r0, [r3, #16]
 800e6b6:	69bb      	ldr	r3, [r7, #24]
 800e6b8:	1cd9      	adds	r1, r3, #3
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	695b      	ldr	r3, [r3, #20]
 800e6be:	461a      	mov	r2, r3
 800e6c0:	f006 f843 	bl	801474a <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800e6c4:	69bb      	ldr	r3, [r7, #24]
 800e6c6:	781b      	ldrb	r3, [r3, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d001      	beq.n	800e6d0 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e6d0:	4809      	ldr	r0, [pc, #36]	; (800e6f8 <hci_send_req+0x104>)
 800e6d2:	f000 fbe3 	bl	800ee9c <LST_is_empty>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d0b5      	beq.n	800e648 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800e6dc:	7ffb      	ldrb	r3, [r7, #31]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d0ad      	beq.n	800e63e <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800e6e2:	2001      	movs	r0, #1
 800e6e4:	f000 f860 	bl	800e7a8 <NotifyCmdStatus>

  return 0;
 800e6e8:	2300      	movs	r3, #0
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3720      	adds	r7, #32
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	20001700 	.word	0x20001700
 800e6f8:	200016f4 	.word	0x200016f4

0800e6fc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b086      	sub	sp, #24
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800e704:	480f      	ldr	r0, [pc, #60]	; (800e744 <TlInit+0x48>)
 800e706:	f000 fbb9 	bl	800ee7c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800e70a:	4a0f      	ldr	r2, [pc, #60]	; (800e748 <TlInit+0x4c>)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800e710:	480e      	ldr	r0, [pc, #56]	; (800e74c <TlInit+0x50>)
 800e712:	f000 fbb3 	bl	800ee7c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e716:	4b0e      	ldr	r3, [pc, #56]	; (800e750 <TlInit+0x54>)
 800e718:	2201      	movs	r2, #1
 800e71a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800e71c:	4b0d      	ldr	r3, [pc, #52]	; (800e754 <TlInit+0x58>)
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d00a      	beq.n	800e73a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800e728:	4b0b      	ldr	r3, [pc, #44]	; (800e758 <TlInit+0x5c>)
 800e72a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800e72c:	4b09      	ldr	r3, [pc, #36]	; (800e754 <TlInit+0x58>)
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	f107 0208 	add.w	r2, r7, #8
 800e734:	4610      	mov	r0, r2
 800e736:	4798      	blx	r3
  }

  return;
 800e738:	bf00      	nop
 800e73a:	bf00      	nop
}
 800e73c:	3718      	adds	r7, #24
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}
 800e742:	bf00      	nop
 800e744:	200016f4 	.word	0x200016f4
 800e748:	2000038c 	.word	0x2000038c
 800e74c:	20000384 	.word	0x20000384
 800e750:	20000390 	.word	0x20000390
 800e754:	200016d4 	.word	0x200016d4
 800e758:	0800e7e9 	.word	0x0800e7e9

0800e75c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b082      	sub	sp, #8
 800e760:	af00      	add	r7, sp, #0
 800e762:	4603      	mov	r3, r0
 800e764:	603a      	str	r2, [r7, #0]
 800e766:	80fb      	strh	r3, [r7, #6]
 800e768:	460b      	mov	r3, r1
 800e76a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800e76c:	4b0c      	ldr	r3, [pc, #48]	; (800e7a0 <SendCmd+0x44>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	88fa      	ldrh	r2, [r7, #6]
 800e772:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800e776:	4b0a      	ldr	r3, [pc, #40]	; (800e7a0 <SendCmd+0x44>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	797a      	ldrb	r2, [r7, #5]
 800e77c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800e77e:	4b08      	ldr	r3, [pc, #32]	; (800e7a0 <SendCmd+0x44>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	330c      	adds	r3, #12
 800e784:	797a      	ldrb	r2, [r7, #5]
 800e786:	6839      	ldr	r1, [r7, #0]
 800e788:	4618      	mov	r0, r3
 800e78a:	f005 ffde 	bl	801474a <memcpy>

  hciContext.io.Send(0,0);
 800e78e:	4b05      	ldr	r3, [pc, #20]	; (800e7a4 <SendCmd+0x48>)
 800e790:	691b      	ldr	r3, [r3, #16]
 800e792:	2100      	movs	r1, #0
 800e794:	2000      	movs	r0, #0
 800e796:	4798      	blx	r3

  return;
 800e798:	bf00      	nop
}
 800e79a:	3708      	adds	r7, #8
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}
 800e7a0:	2000038c 	.word	0x2000038c
 800e7a4:	200016d4 	.word	0x200016d4

0800e7a8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b082      	sub	sp, #8
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800e7b2:	79fb      	ldrb	r3, [r7, #7]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d108      	bne.n	800e7ca <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800e7b8:	4b0a      	ldr	r3, [pc, #40]	; (800e7e4 <NotifyCmdStatus+0x3c>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d00d      	beq.n	800e7dc <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800e7c0:	4b08      	ldr	r3, [pc, #32]	; (800e7e4 <NotifyCmdStatus+0x3c>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	2000      	movs	r0, #0
 800e7c6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800e7c8:	e008      	b.n	800e7dc <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800e7ca:	4b06      	ldr	r3, [pc, #24]	; (800e7e4 <NotifyCmdStatus+0x3c>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d004      	beq.n	800e7dc <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800e7d2:	4b04      	ldr	r3, [pc, #16]	; (800e7e4 <NotifyCmdStatus+0x3c>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	2001      	movs	r0, #1
 800e7d8:	4798      	blx	r3
  return;
 800e7da:	bf00      	nop
 800e7dc:	bf00      	nop
}
 800e7de:	3708      	adds	r7, #8
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}
 800e7e4:	200016fc 	.word	0x200016fc

0800e7e8 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b082      	sub	sp, #8
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	7a5b      	ldrb	r3, [r3, #9]
 800e7f4:	2b0f      	cmp	r3, #15
 800e7f6:	d003      	beq.n	800e800 <TlEvtReceived+0x18>
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	7a5b      	ldrb	r3, [r3, #9]
 800e7fc:	2b0e      	cmp	r3, #14
 800e7fe:	d107      	bne.n	800e810 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800e800:	6879      	ldr	r1, [r7, #4]
 800e802:	4809      	ldr	r0, [pc, #36]	; (800e828 <TlEvtReceived+0x40>)
 800e804:	f000 fb92 	bl	800ef2c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800e808:	2000      	movs	r0, #0
 800e80a:	f004 fee5 	bl	80135d8 <hci_cmd_resp_release>
 800e80e:	e006      	b.n	800e81e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800e810:	6879      	ldr	r1, [r7, #4]
 800e812:	4806      	ldr	r0, [pc, #24]	; (800e82c <TlEvtReceived+0x44>)
 800e814:	f000 fb8a 	bl	800ef2c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e818:	4804      	ldr	r0, [pc, #16]	; (800e82c <TlEvtReceived+0x44>)
 800e81a:	f004 fecd 	bl	80135b8 <hci_notify_asynch_evt>
  }

  return;
 800e81e:	bf00      	nop
}
 800e820:	3708      	adds	r7, #8
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	200016f4 	.word	0x200016f4
 800e82c:	20000384 	.word	0x20000384

0800e830 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800e830:	b480      	push	{r7}
 800e832:	b083      	sub	sp, #12
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	4a05      	ldr	r2, [pc, #20]	; (800e850 <hci_register_io_bus+0x20>)
 800e83c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	4a04      	ldr	r2, [pc, #16]	; (800e854 <hci_register_io_bus+0x24>)
 800e842:	611a      	str	r2, [r3, #16]

  return;
 800e844:	bf00      	nop
}
 800e846:	370c      	adds	r7, #12
 800e848:	46bd      	mov	sp, r7
 800e84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84e:	4770      	bx	lr
 800e850:	0800eb49 	.word	0x0800eb49
 800e854:	0800ebb1 	.word	0x0800ebb1

0800e858 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b082      	sub	sp, #8
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
 800e860:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	685b      	ldr	r3, [r3, #4]
 800e866:	4a08      	ldr	r2, [pc, #32]	; (800e888 <shci_init+0x30>)
 800e868:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800e86a:	4a08      	ldr	r2, [pc, #32]	; (800e88c <shci_init+0x34>)
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800e870:	4806      	ldr	r0, [pc, #24]	; (800e88c <shci_init+0x34>)
 800e872:	f000 f915 	bl	800eaa0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	4618      	mov	r0, r3
 800e87c:	f000 f898 	bl	800e9b0 <TlInit>

  return;
 800e880:	bf00      	nop
}
 800e882:	3708      	adds	r7, #8
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}
 800e888:	20001724 	.word	0x20001724
 800e88c:	20001704 	.word	0x20001704

0800e890 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b084      	sub	sp, #16
 800e894:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e896:	4822      	ldr	r0, [pc, #136]	; (800e920 <shci_user_evt_proc+0x90>)
 800e898:	f000 fb00 	bl	800ee9c <LST_is_empty>
 800e89c:	4603      	mov	r3, r0
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d12b      	bne.n	800e8fa <shci_user_evt_proc+0x6a>
 800e8a2:	4b20      	ldr	r3, [pc, #128]	; (800e924 <shci_user_evt_proc+0x94>)
 800e8a4:	781b      	ldrb	r3, [r3, #0]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d027      	beq.n	800e8fa <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e8aa:	f107 030c 	add.w	r3, r7, #12
 800e8ae:	4619      	mov	r1, r3
 800e8b0:	481b      	ldr	r0, [pc, #108]	; (800e920 <shci_user_evt_proc+0x90>)
 800e8b2:	f000 fb82 	bl	800efba <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800e8b6:	4b1c      	ldr	r3, [pc, #112]	; (800e928 <shci_user_evt_proc+0x98>)
 800e8b8:	69db      	ldr	r3, [r3, #28]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d00c      	beq.n	800e8d8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e8c6:	4b18      	ldr	r3, [pc, #96]	; (800e928 <shci_user_evt_proc+0x98>)
 800e8c8:	69db      	ldr	r3, [r3, #28]
 800e8ca:	1d3a      	adds	r2, r7, #4
 800e8cc:	4610      	mov	r0, r2
 800e8ce:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800e8d0:	793a      	ldrb	r2, [r7, #4]
 800e8d2:	4b14      	ldr	r3, [pc, #80]	; (800e924 <shci_user_evt_proc+0x94>)
 800e8d4:	701a      	strb	r2, [r3, #0]
 800e8d6:	e002      	b.n	800e8de <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e8d8:	4b12      	ldr	r3, [pc, #72]	; (800e924 <shci_user_evt_proc+0x94>)
 800e8da:	2201      	movs	r2, #1
 800e8dc:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800e8de:	4b11      	ldr	r3, [pc, #68]	; (800e924 <shci_user_evt_proc+0x94>)
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d004      	beq.n	800e8f0 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f000 f9ff 	bl	800ecec <TL_MM_EvtDone>
 800e8ee:	e004      	b.n	800e8fa <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	480a      	ldr	r0, [pc, #40]	; (800e920 <shci_user_evt_proc+0x90>)
 800e8f6:	f000 faf3 	bl	800eee0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e8fa:	4809      	ldr	r0, [pc, #36]	; (800e920 <shci_user_evt_proc+0x90>)
 800e8fc:	f000 face 	bl	800ee9c <LST_is_empty>
 800e900:	4603      	mov	r3, r0
 800e902:	2b00      	cmp	r3, #0
 800e904:	d107      	bne.n	800e916 <shci_user_evt_proc+0x86>
 800e906:	4b07      	ldr	r3, [pc, #28]	; (800e924 <shci_user_evt_proc+0x94>)
 800e908:	781b      	ldrb	r3, [r3, #0]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d003      	beq.n	800e916 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800e90e:	4804      	ldr	r0, [pc, #16]	; (800e920 <shci_user_evt_proc+0x90>)
 800e910:	f7f2 fd28 	bl	8001364 <shci_notify_asynch_evt>
  }


  return;
 800e914:	bf00      	nop
 800e916:	bf00      	nop
}
 800e918:	3710      	adds	r7, #16
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop
 800e920:	20000394 	.word	0x20000394
 800e924:	200003a4 	.word	0x200003a4
 800e928:	20001704 	.word	0x20001704

0800e92c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b084      	sub	sp, #16
 800e930:	af00      	add	r7, sp, #0
 800e932:	60ba      	str	r2, [r7, #8]
 800e934:	607b      	str	r3, [r7, #4]
 800e936:	4603      	mov	r3, r0
 800e938:	81fb      	strh	r3, [r7, #14]
 800e93a:	460b      	mov	r3, r1
 800e93c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800e93e:	2000      	movs	r0, #0
 800e940:	f000 f868 	bl	800ea14 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800e944:	4b17      	ldr	r3, [pc, #92]	; (800e9a4 <shci_send+0x78>)
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	89fa      	ldrh	r2, [r7, #14]
 800e94a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800e94e:	4b15      	ldr	r3, [pc, #84]	; (800e9a4 <shci_send+0x78>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	7b7a      	ldrb	r2, [r7, #13]
 800e954:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800e956:	4b13      	ldr	r3, [pc, #76]	; (800e9a4 <shci_send+0x78>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	330c      	adds	r3, #12
 800e95c:	7b7a      	ldrb	r2, [r7, #13]
 800e95e:	68b9      	ldr	r1, [r7, #8]
 800e960:	4618      	mov	r0, r3
 800e962:	f005 fef2 	bl	801474a <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800e966:	4b10      	ldr	r3, [pc, #64]	; (800e9a8 <shci_send+0x7c>)
 800e968:	2201      	movs	r2, #1
 800e96a:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800e96c:	4b0f      	ldr	r3, [pc, #60]	; (800e9ac <shci_send+0x80>)
 800e96e:	691b      	ldr	r3, [r3, #16]
 800e970:	2100      	movs	r1, #0
 800e972:	2000      	movs	r0, #0
 800e974:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800e976:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800e97a:	f7f2 fd13 	bl	80013a4 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f103 0008 	add.w	r0, r3, #8
 800e984:	4b07      	ldr	r3, [pc, #28]	; (800e9a4 <shci_send+0x78>)
 800e986:	6819      	ldr	r1, [r3, #0]
 800e988:	4b06      	ldr	r3, [pc, #24]	; (800e9a4 <shci_send+0x78>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	789b      	ldrb	r3, [r3, #2]
 800e98e:	3303      	adds	r3, #3
 800e990:	461a      	mov	r2, r3
 800e992:	f005 feda 	bl	801474a <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e996:	2001      	movs	r0, #1
 800e998:	f000 f83c 	bl	800ea14 <Cmd_SetStatus>

  return;
 800e99c:	bf00      	nop
}
 800e99e:	3710      	adds	r7, #16
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}
 800e9a4:	200003a0 	.word	0x200003a0
 800e9a8:	20001728 	.word	0x20001728
 800e9ac:	20001704 	.word	0x20001704

0800e9b0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b086      	sub	sp, #24
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800e9b8:	4a10      	ldr	r2, [pc, #64]	; (800e9fc <TlInit+0x4c>)
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800e9be:	4810      	ldr	r0, [pc, #64]	; (800ea00 <TlInit+0x50>)
 800e9c0:	f000 fa5c 	bl	800ee7c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e9c4:	2001      	movs	r0, #1
 800e9c6:	f000 f825 	bl	800ea14 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e9ca:	4b0e      	ldr	r3, [pc, #56]	; (800ea04 <TlInit+0x54>)
 800e9cc:	2201      	movs	r2, #1
 800e9ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800e9d0:	4b0d      	ldr	r3, [pc, #52]	; (800ea08 <TlInit+0x58>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d00c      	beq.n	800e9f2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800e9dc:	4b0b      	ldr	r3, [pc, #44]	; (800ea0c <TlInit+0x5c>)
 800e9de:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800e9e0:	4b0b      	ldr	r3, [pc, #44]	; (800ea10 <TlInit+0x60>)
 800e9e2:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800e9e4:	4b08      	ldr	r3, [pc, #32]	; (800ea08 <TlInit+0x58>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	f107 020c 	add.w	r2, r7, #12
 800e9ec:	4610      	mov	r0, r2
 800e9ee:	4798      	blx	r3
  }

  return;
 800e9f0:	bf00      	nop
 800e9f2:	bf00      	nop
}
 800e9f4:	3718      	adds	r7, #24
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}
 800e9fa:	bf00      	nop
 800e9fc:	200003a0 	.word	0x200003a0
 800ea00:	20000394 	.word	0x20000394
 800ea04:	200003a4 	.word	0x200003a4
 800ea08:	20001704 	.word	0x20001704
 800ea0c:	0800ea65 	.word	0x0800ea65
 800ea10:	0800ea7d 	.word	0x0800ea7d

0800ea14 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b082      	sub	sp, #8
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800ea1e:	79fb      	ldrb	r3, [r7, #7]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d10b      	bne.n	800ea3c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800ea24:	4b0d      	ldr	r3, [pc, #52]	; (800ea5c <Cmd_SetStatus+0x48>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d003      	beq.n	800ea34 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800ea2c:	4b0b      	ldr	r3, [pc, #44]	; (800ea5c <Cmd_SetStatus+0x48>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	2000      	movs	r0, #0
 800ea32:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800ea34:	4b0a      	ldr	r3, [pc, #40]	; (800ea60 <Cmd_SetStatus+0x4c>)
 800ea36:	2200      	movs	r2, #0
 800ea38:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800ea3a:	e00b      	b.n	800ea54 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800ea3c:	4b08      	ldr	r3, [pc, #32]	; (800ea60 <Cmd_SetStatus+0x4c>)
 800ea3e:	2201      	movs	r2, #1
 800ea40:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800ea42:	4b06      	ldr	r3, [pc, #24]	; (800ea5c <Cmd_SetStatus+0x48>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d004      	beq.n	800ea54 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800ea4a:	4b04      	ldr	r3, [pc, #16]	; (800ea5c <Cmd_SetStatus+0x48>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	2001      	movs	r0, #1
 800ea50:	4798      	blx	r3
  return;
 800ea52:	bf00      	nop
 800ea54:	bf00      	nop
}
 800ea56:	3708      	adds	r7, #8
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}
 800ea5c:	20001724 	.word	0x20001724
 800ea60:	2000039c 	.word	0x2000039c

0800ea64 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b082      	sub	sp, #8
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800ea6c:	2000      	movs	r0, #0
 800ea6e:	f7f2 fc89 	bl	8001384 <shci_cmd_resp_release>

  return;
 800ea72:	bf00      	nop
}
 800ea74:	3708      	adds	r7, #8
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}
	...

0800ea7c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b082      	sub	sp, #8
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800ea84:	6879      	ldr	r1, [r7, #4]
 800ea86:	4805      	ldr	r0, [pc, #20]	; (800ea9c <TlUserEvtReceived+0x20>)
 800ea88:	f000 fa50 	bl	800ef2c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800ea8c:	4803      	ldr	r0, [pc, #12]	; (800ea9c <TlUserEvtReceived+0x20>)
 800ea8e:	f7f2 fc69 	bl	8001364 <shci_notify_asynch_evt>

  return;
 800ea92:	bf00      	nop
}
 800ea94:	3708      	adds	r7, #8
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}
 800ea9a:	bf00      	nop
 800ea9c:	20000394 	.word	0x20000394

0800eaa0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	b083      	sub	sp, #12
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	4a05      	ldr	r2, [pc, #20]	; (800eac0 <shci_register_io_bus+0x20>)
 800eaac:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	4a04      	ldr	r2, [pc, #16]	; (800eac4 <shci_register_io_bus+0x24>)
 800eab2:	611a      	str	r2, [r3, #16]

  return;
 800eab4:	bf00      	nop
}
 800eab6:	370c      	adds	r7, #12
 800eab8:	46bd      	mov	sp, r7
 800eaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabe:	4770      	bx	lr
 800eac0:	0800ebe9 	.word	0x0800ebe9
 800eac4:	0800ec3d 	.word	0x0800ec3d

0800eac8 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800eacc:	f004 ff00 	bl	80138d0 <HW_IPCC_Enable>

  return;
 800ead0:	bf00      	nop
}
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <TL_Init>:


void TL_Init( void )
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800ead8:	4b10      	ldr	r3, [pc, #64]	; (800eb1c <TL_Init+0x48>)
 800eada:	4a11      	ldr	r2, [pc, #68]	; (800eb20 <TL_Init+0x4c>)
 800eadc:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800eade:	4b0f      	ldr	r3, [pc, #60]	; (800eb1c <TL_Init+0x48>)
 800eae0:	4a10      	ldr	r2, [pc, #64]	; (800eb24 <TL_Init+0x50>)
 800eae2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800eae4:	4b0d      	ldr	r3, [pc, #52]	; (800eb1c <TL_Init+0x48>)
 800eae6:	4a10      	ldr	r2, [pc, #64]	; (800eb28 <TL_Init+0x54>)
 800eae8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800eaea:	4b0c      	ldr	r3, [pc, #48]	; (800eb1c <TL_Init+0x48>)
 800eaec:	4a0f      	ldr	r2, [pc, #60]	; (800eb2c <TL_Init+0x58>)
 800eaee:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800eaf0:	4b0a      	ldr	r3, [pc, #40]	; (800eb1c <TL_Init+0x48>)
 800eaf2:	4a0f      	ldr	r2, [pc, #60]	; (800eb30 <TL_Init+0x5c>)
 800eaf4:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800eaf6:	4b09      	ldr	r3, [pc, #36]	; (800eb1c <TL_Init+0x48>)
 800eaf8:	4a0e      	ldr	r2, [pc, #56]	; (800eb34 <TL_Init+0x60>)
 800eafa:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800eafc:	4b07      	ldr	r3, [pc, #28]	; (800eb1c <TL_Init+0x48>)
 800eafe:	4a0e      	ldr	r2, [pc, #56]	; (800eb38 <TL_Init+0x64>)
 800eb00:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800eb02:	4b06      	ldr	r3, [pc, #24]	; (800eb1c <TL_Init+0x48>)
 800eb04:	4a0d      	ldr	r2, [pc, #52]	; (800eb3c <TL_Init+0x68>)
 800eb06:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800eb08:	4b04      	ldr	r3, [pc, #16]	; (800eb1c <TL_Init+0x48>)
 800eb0a:	4a0d      	ldr	r2, [pc, #52]	; (800eb40 <TL_Init+0x6c>)
 800eb0c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800eb0e:	4b03      	ldr	r3, [pc, #12]	; (800eb1c <TL_Init+0x48>)
 800eb10:	4a0c      	ldr	r2, [pc, #48]	; (800eb44 <TL_Init+0x70>)
 800eb12:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800eb14:	f004 fef0 	bl	80138f8 <HW_IPCC_Init>

  return;
 800eb18:	bf00      	nop
}
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	20030000 	.word	0x20030000
 800eb20:	20030028 	.word	0x20030028
 800eb24:	20030048 	.word	0x20030048
 800eb28:	20030058 	.word	0x20030058
 800eb2c:	20030068 	.word	0x20030068
 800eb30:	20030070 	.word	0x20030070
 800eb34:	20030078 	.word	0x20030078
 800eb38:	20030080 	.word	0x20030080
 800eb3c:	2003009c 	.word	0x2003009c
 800eb40:	200300a0 	.word	0x200300a0
 800eb44:	200300ac 	.word	0x200300ac

0800eb48 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b084      	sub	sp, #16
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800eb54:	4811      	ldr	r0, [pc, #68]	; (800eb9c <TL_BLE_Init+0x54>)
 800eb56:	f000 f991 	bl	800ee7c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800eb5a:	4b11      	ldr	r3, [pc, #68]	; (800eba0 <TL_BLE_Init+0x58>)
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	689a      	ldr	r2, [r3, #8]
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	68da      	ldr	r2, [r3, #12]
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	4a0c      	ldr	r2, [pc, #48]	; (800eba4 <TL_BLE_Init+0x5c>)
 800eb74:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	4a08      	ldr	r2, [pc, #32]	; (800eb9c <TL_BLE_Init+0x54>)
 800eb7a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800eb7c:	f004 fed2 	bl	8013924 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	4a08      	ldr	r2, [pc, #32]	; (800eba8 <TL_BLE_Init+0x60>)
 800eb86:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	685b      	ldr	r3, [r3, #4]
 800eb8c:	4a07      	ldr	r2, [pc, #28]	; (800ebac <TL_BLE_Init+0x64>)
 800eb8e:	6013      	str	r3, [r2, #0]

  return 0;
 800eb90:	2300      	movs	r3, #0
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3710      	adds	r7, #16
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	200300c8 	.word	0x200300c8
 800eba0:	20030000 	.word	0x20030000
 800eba4:	20030a58 	.word	0x20030a58
 800eba8:	20001734 	.word	0x20001734
 800ebac:	20001738 	.word	0x20001738

0800ebb0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b082      	sub	sp, #8
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	460b      	mov	r3, r1
 800ebba:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800ebbc:	4b09      	ldr	r3, [pc, #36]	; (800ebe4 <TL_BLE_SendCmd+0x34>)
 800ebbe:	685b      	ldr	r3, [r3, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800ebc6:	4b07      	ldr	r3, [pc, #28]	; (800ebe4 <TL_BLE_SendCmd+0x34>)
 800ebc8:	685b      	ldr	r3, [r3, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	4619      	mov	r1, r3
 800ebce:	2001      	movs	r0, #1
 800ebd0:	f000 f8d6 	bl	800ed80 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800ebd4:	f004 feb0 	bl	8013938 <HW_IPCC_BLE_SendCmd>

  return 0;
 800ebd8:	2300      	movs	r3, #0
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3708      	adds	r7, #8
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}
 800ebe2:	bf00      	nop
 800ebe4:	20030000 	.word	0x20030000

0800ebe8 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b084      	sub	sp, #16
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800ebf4:	480d      	ldr	r0, [pc, #52]	; (800ec2c <TL_SYS_Init+0x44>)
 800ebf6:	f000 f941 	bl	800ee7c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800ebfa:	4b0d      	ldr	r3, [pc, #52]	; (800ec30 <TL_SYS_Init+0x48>)
 800ebfc:	68db      	ldr	r3, [r3, #12]
 800ebfe:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	689a      	ldr	r2, [r3, #8]
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	4a08      	ldr	r2, [pc, #32]	; (800ec2c <TL_SYS_Init+0x44>)
 800ec0c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800ec0e:	f004 fe9d 	bl	801394c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	4a07      	ldr	r2, [pc, #28]	; (800ec34 <TL_SYS_Init+0x4c>)
 800ec18:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	4a06      	ldr	r2, [pc, #24]	; (800ec38 <TL_SYS_Init+0x50>)
 800ec20:	6013      	str	r3, [r2, #0]

  return 0;
 800ec22:	2300      	movs	r3, #0
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3710      	adds	r7, #16
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}
 800ec2c:	200300d0 	.word	0x200300d0
 800ec30:	20030000 	.word	0x20030000
 800ec34:	2000173c 	.word	0x2000173c
 800ec38:	20001740 	.word	0x20001740

0800ec3c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b082      	sub	sp, #8
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	460b      	mov	r3, r1
 800ec46:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800ec48:	4b09      	ldr	r3, [pc, #36]	; (800ec70 <TL_SYS_SendCmd+0x34>)
 800ec4a:	68db      	ldr	r3, [r3, #12]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	2210      	movs	r2, #16
 800ec50:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800ec52:	4b07      	ldr	r3, [pc, #28]	; (800ec70 <TL_SYS_SendCmd+0x34>)
 800ec54:	68db      	ldr	r3, [r3, #12]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	4619      	mov	r1, r3
 800ec5a:	2004      	movs	r0, #4
 800ec5c:	f000 f890 	bl	800ed80 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800ec60:	f004 fe7e 	bl	8013960 <HW_IPCC_SYS_SendCmd>

  return 0;
 800ec64:	2300      	movs	r3, #0
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	3708      	adds	r7, #8
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}
 800ec6e:	bf00      	nop
 800ec70:	20030000 	.word	0x20030000

0800ec74 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b082      	sub	sp, #8
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800ec7c:	4817      	ldr	r0, [pc, #92]	; (800ecdc <TL_MM_Init+0x68>)
 800ec7e:	f000 f8fd 	bl	800ee7c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800ec82:	4817      	ldr	r0, [pc, #92]	; (800ece0 <TL_MM_Init+0x6c>)
 800ec84:	f000 f8fa 	bl	800ee7c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800ec88:	4b16      	ldr	r3, [pc, #88]	; (800ece4 <TL_MM_Init+0x70>)
 800ec8a:	691b      	ldr	r3, [r3, #16]
 800ec8c:	4a16      	ldr	r2, [pc, #88]	; (800ece8 <TL_MM_Init+0x74>)
 800ec8e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800ec90:	4b15      	ldr	r3, [pc, #84]	; (800ece8 <TL_MM_Init+0x74>)
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	687a      	ldr	r2, [r7, #4]
 800ec96:	6892      	ldr	r2, [r2, #8]
 800ec98:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800ec9a:	4b13      	ldr	r3, [pc, #76]	; (800ece8 <TL_MM_Init+0x74>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	687a      	ldr	r2, [r7, #4]
 800eca0:	68d2      	ldr	r2, [r2, #12]
 800eca2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800eca4:	4b10      	ldr	r3, [pc, #64]	; (800ece8 <TL_MM_Init+0x74>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	4a0c      	ldr	r2, [pc, #48]	; (800ecdc <TL_MM_Init+0x68>)
 800ecaa:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800ecac:	4b0e      	ldr	r3, [pc, #56]	; (800ece8 <TL_MM_Init+0x74>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	687a      	ldr	r2, [r7, #4]
 800ecb2:	6812      	ldr	r2, [r2, #0]
 800ecb4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800ecb6:	4b0c      	ldr	r3, [pc, #48]	; (800ece8 <TL_MM_Init+0x74>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	687a      	ldr	r2, [r7, #4]
 800ecbc:	6852      	ldr	r2, [r2, #4]
 800ecbe:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800ecc0:	4b09      	ldr	r3, [pc, #36]	; (800ece8 <TL_MM_Init+0x74>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	687a      	ldr	r2, [r7, #4]
 800ecc6:	6912      	ldr	r2, [r2, #16]
 800ecc8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800ecca:	4b07      	ldr	r3, [pc, #28]	; (800ece8 <TL_MM_Init+0x74>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	687a      	ldr	r2, [r7, #4]
 800ecd0:	6952      	ldr	r2, [r2, #20]
 800ecd2:	619a      	str	r2, [r3, #24]

  return;
 800ecd4:	bf00      	nop
}
 800ecd6:	3708      	adds	r7, #8
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}
 800ecdc:	200300b8 	.word	0x200300b8
 800ece0:	2000172c 	.word	0x2000172c
 800ece4:	20030000 	.word	0x20030000
 800ece8:	20001744 	.word	0x20001744

0800ecec <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b082      	sub	sp, #8
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800ecf4:	6879      	ldr	r1, [r7, #4]
 800ecf6:	4807      	ldr	r0, [pc, #28]	; (800ed14 <TL_MM_EvtDone+0x28>)
 800ecf8:	f000 f918 	bl	800ef2c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800ecfc:	6879      	ldr	r1, [r7, #4]
 800ecfe:	2000      	movs	r0, #0
 800ed00:	f000 f83e 	bl	800ed80 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800ed04:	4804      	ldr	r0, [pc, #16]	; (800ed18 <TL_MM_EvtDone+0x2c>)
 800ed06:	f004 fe39 	bl	801397c <HW_IPCC_MM_SendFreeBuf>

  return;
 800ed0a:	bf00      	nop
}
 800ed0c:	3708      	adds	r7, #8
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	2000172c 	.word	0x2000172c
 800ed18:	0800ed1d 	.word	0x0800ed1d

0800ed1c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b082      	sub	sp, #8
 800ed20:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800ed22:	e00c      	b.n	800ed3e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800ed24:	1d3b      	adds	r3, r7, #4
 800ed26:	4619      	mov	r1, r3
 800ed28:	480a      	ldr	r0, [pc, #40]	; (800ed54 <SendFreeBuf+0x38>)
 800ed2a:	f000 f946 	bl	800efba <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800ed2e:	4b0a      	ldr	r3, [pc, #40]	; (800ed58 <SendFreeBuf+0x3c>)
 800ed30:	691b      	ldr	r3, [r3, #16]
 800ed32:	691b      	ldr	r3, [r3, #16]
 800ed34:	687a      	ldr	r2, [r7, #4]
 800ed36:	4611      	mov	r1, r2
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f000 f8f7 	bl	800ef2c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800ed3e:	4805      	ldr	r0, [pc, #20]	; (800ed54 <SendFreeBuf+0x38>)
 800ed40:	f000 f8ac 	bl	800ee9c <LST_is_empty>
 800ed44:	4603      	mov	r3, r0
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d0ec      	beq.n	800ed24 <SendFreeBuf+0x8>
  }

  return;
 800ed4a:	bf00      	nop
}
 800ed4c:	3708      	adds	r7, #8
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop
 800ed54:	2000172c 	.word	0x2000172c
 800ed58:	20030000 	.word	0x20030000

0800ed5c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800ed60:	4805      	ldr	r0, [pc, #20]	; (800ed78 <TL_TRACES_Init+0x1c>)
 800ed62:	f000 f88b 	bl	800ee7c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800ed66:	4b05      	ldr	r3, [pc, #20]	; (800ed7c <TL_TRACES_Init+0x20>)
 800ed68:	695b      	ldr	r3, [r3, #20]
 800ed6a:	4a03      	ldr	r2, [pc, #12]	; (800ed78 <TL_TRACES_Init+0x1c>)
 800ed6c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800ed6e:	f004 fe27 	bl	80139c0 <HW_IPCC_TRACES_Init>

  return;
 800ed72:	bf00      	nop
}
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	200300c0 	.word	0x200300c0
 800ed7c:	20030000 	.word	0x20030000

0800ed80 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800ed80:	b480      	push	{r7}
 800ed82:	b085      	sub	sp, #20
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	4603      	mov	r3, r0
 800ed88:	6039      	str	r1, [r7, #0]
 800ed8a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800ed8c:	79fb      	ldrb	r3, [r7, #7]
 800ed8e:	2b06      	cmp	r3, #6
 800ed90:	d845      	bhi.n	800ee1e <OutputDbgTrace+0x9e>
 800ed92:	a201      	add	r2, pc, #4	; (adr r2, 800ed98 <OutputDbgTrace+0x18>)
 800ed94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed98:	0800edb5 	.word	0x0800edb5
 800ed9c:	0800edd9 	.word	0x0800edd9
 800eda0:	0800eddf 	.word	0x0800eddf
 800eda4:	0800edf3 	.word	0x0800edf3
 800eda8:	0800edff 	.word	0x0800edff
 800edac:	0800ee05 	.word	0x0800ee05
 800edb0:	0800ee13 	.word	0x0800ee13
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	7a5b      	ldrb	r3, [r3, #9]
 800edbc:	2bff      	cmp	r3, #255	; 0xff
 800edbe:	d005      	beq.n	800edcc <OutputDbgTrace+0x4c>
 800edc0:	2bff      	cmp	r3, #255	; 0xff
 800edc2:	dc05      	bgt.n	800edd0 <OutputDbgTrace+0x50>
 800edc4:	2b0e      	cmp	r3, #14
 800edc6:	d005      	beq.n	800edd4 <OutputDbgTrace+0x54>
 800edc8:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800edca:	e001      	b.n	800edd0 <OutputDbgTrace+0x50>
          break;
 800edcc:	bf00      	nop
 800edce:	e027      	b.n	800ee20 <OutputDbgTrace+0xa0>
          break;
 800edd0:	bf00      	nop
 800edd2:	e025      	b.n	800ee20 <OutputDbgTrace+0xa0>
          break;
 800edd4:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800edd6:	e023      	b.n	800ee20 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800eddc:	e020      	b.n	800ee20 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	7a5b      	ldrb	r3, [r3, #9]
 800ede6:	2b0e      	cmp	r3, #14
 800ede8:	d001      	beq.n	800edee <OutputDbgTrace+0x6e>
 800edea:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800edec:	e000      	b.n	800edf0 <OutputDbgTrace+0x70>
          break;
 800edee:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800edf0:	e016      	b.n	800ee20 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	7a5b      	ldrb	r3, [r3, #9]
 800edfa:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800edfc:	e010      	b.n	800ee20 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ee02:	e00d      	b.n	800ee20 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	7a5b      	ldrb	r3, [r3, #9]
 800ee0c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ee0e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ee10:	e006      	b.n	800ee20 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	7a5b      	ldrb	r3, [r3, #9]
 800ee1a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ee1c:	e000      	b.n	800ee20 <OutputDbgTrace+0xa0>

    default:
      break;
 800ee1e:	bf00      	nop
  }

  return;
 800ee20:	bf00      	nop
}
 800ee22:	3714      	adds	r7, #20
 800ee24:	46bd      	mov	sp, r7
 800ee26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2a:	4770      	bx	lr

0800ee2c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b085      	sub	sp, #20
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	4603      	mov	r3, r0
 800ee34:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800ee36:	4b0f      	ldr	r3, [pc, #60]	; (800ee74 <OTP_Read+0x48>)
 800ee38:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ee3a:	e002      	b.n	800ee42 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	3b08      	subs	r3, #8
 800ee40:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	3307      	adds	r3, #7
 800ee46:	781b      	ldrb	r3, [r3, #0]
 800ee48:	79fa      	ldrb	r2, [r7, #7]
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d003      	beq.n	800ee56 <OTP_Read+0x2a>
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	4a09      	ldr	r2, [pc, #36]	; (800ee78 <OTP_Read+0x4c>)
 800ee52:	4293      	cmp	r3, r2
 800ee54:	d1f2      	bne.n	800ee3c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	3307      	adds	r3, #7
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	79fa      	ldrb	r2, [r7, #7]
 800ee5e:	429a      	cmp	r2, r3
 800ee60:	d001      	beq.n	800ee66 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800ee62:	2300      	movs	r3, #0
 800ee64:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800ee66:	68fb      	ldr	r3, [r7, #12]
}
 800ee68:	4618      	mov	r0, r3
 800ee6a:	3714      	adds	r7, #20
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee72:	4770      	bx	lr
 800ee74:	1fff73f8 	.word	0x1fff73f8
 800ee78:	1fff7000 	.word	0x1fff7000

0800ee7c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	b083      	sub	sp, #12
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	687a      	ldr	r2, [r7, #4]
 800ee88:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	687a      	ldr	r2, [r7, #4]
 800ee8e:	605a      	str	r2, [r3, #4]
}
 800ee90:	bf00      	nop
 800ee92:	370c      	adds	r7, #12
 800ee94:	46bd      	mov	sp, r7
 800ee96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9a:	4770      	bx	lr

0800ee9c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800ee9c:	b480      	push	{r7}
 800ee9e:	b087      	sub	sp, #28
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eea4:	f3ef 8310 	mrs	r3, PRIMASK
 800eea8:	60fb      	str	r3, [r7, #12]
  return(result);
 800eeaa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800eeac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800eeae:	b672      	cpsid	i
}
 800eeb0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	687a      	ldr	r2, [r7, #4]
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d102      	bne.n	800eec2 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800eebc:	2301      	movs	r3, #1
 800eebe:	75fb      	strb	r3, [r7, #23]
 800eec0:	e001      	b.n	800eec6 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800eec2:	2300      	movs	r3, #0
 800eec4:	75fb      	strb	r3, [r7, #23]
 800eec6:	693b      	ldr	r3, [r7, #16]
 800eec8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	f383 8810 	msr	PRIMASK, r3
}
 800eed0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800eed2:	7dfb      	ldrb	r3, [r7, #23]
}
 800eed4:	4618      	mov	r0, r3
 800eed6:	371c      	adds	r7, #28
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr

0800eee0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800eee0:	b480      	push	{r7}
 800eee2:	b087      	sub	sp, #28
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eeea:	f3ef 8310 	mrs	r3, PRIMASK
 800eeee:	60fb      	str	r3, [r7, #12]
  return(result);
 800eef0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800eef2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800eef4:	b672      	cpsid	i
}
 800eef6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681a      	ldr	r2, [r3, #0]
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	687a      	ldr	r2, [r7, #4]
 800ef04:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	683a      	ldr	r2, [r7, #0]
 800ef0a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	683a      	ldr	r2, [r7, #0]
 800ef12:	605a      	str	r2, [r3, #4]
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef18:	693b      	ldr	r3, [r7, #16]
 800ef1a:	f383 8810 	msr	PRIMASK, r3
}
 800ef1e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ef20:	bf00      	nop
 800ef22:	371c      	adds	r7, #28
 800ef24:	46bd      	mov	sp, r7
 800ef26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2a:	4770      	bx	lr

0800ef2c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	b087      	sub	sp, #28
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
 800ef34:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef36:	f3ef 8310 	mrs	r3, PRIMASK
 800ef3a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef3c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ef3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ef40:	b672      	cpsid	i
}
 800ef42:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	687a      	ldr	r2, [r7, #4]
 800ef48:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	685a      	ldr	r2, [r3, #4]
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	683a      	ldr	r2, [r7, #0]
 800ef56:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	683a      	ldr	r2, [r7, #0]
 800ef5e:	601a      	str	r2, [r3, #0]
 800ef60:	697b      	ldr	r3, [r7, #20]
 800ef62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef64:	693b      	ldr	r3, [r7, #16]
 800ef66:	f383 8810 	msr	PRIMASK, r3
}
 800ef6a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ef6c:	bf00      	nop
 800ef6e:	371c      	adds	r7, #28
 800ef70:	46bd      	mov	sp, r7
 800ef72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef76:	4770      	bx	lr

0800ef78 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b087      	sub	sp, #28
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef80:	f3ef 8310 	mrs	r3, PRIMASK
 800ef84:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef86:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ef88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ef8a:	b672      	cpsid	i
}
 800ef8c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	685b      	ldr	r3, [r3, #4]
 800ef92:	687a      	ldr	r2, [r7, #4]
 800ef94:	6812      	ldr	r2, [r2, #0]
 800ef96:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	687a      	ldr	r2, [r7, #4]
 800ef9e:	6852      	ldr	r2, [r2, #4]
 800efa0:	605a      	str	r2, [r3, #4]
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	f383 8810 	msr	PRIMASK, r3
}
 800efac:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800efae:	bf00      	nop
 800efb0:	371c      	adds	r7, #28
 800efb2:	46bd      	mov	sp, r7
 800efb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb8:	4770      	bx	lr

0800efba <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800efba:	b580      	push	{r7, lr}
 800efbc:	b086      	sub	sp, #24
 800efbe:	af00      	add	r7, sp, #0
 800efc0:	6078      	str	r0, [r7, #4]
 800efc2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800efc4:	f3ef 8310 	mrs	r3, PRIMASK
 800efc8:	60fb      	str	r3, [r7, #12]
  return(result);
 800efca:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800efcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800efce:	b672      	cpsid	i
}
 800efd0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681a      	ldr	r2, [r3, #0]
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	4618      	mov	r0, r3
 800efe0:	f7ff ffca 	bl	800ef78 <LST_remove_node>
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	f383 8810 	msr	PRIMASK, r3
}
 800efee:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800eff0:	bf00      	nop
 800eff2:	3718      	adds	r7, #24
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}

0800eff8 <__NVIC_SetPriority>:
{
 800eff8:	b480      	push	{r7}
 800effa:	b083      	sub	sp, #12
 800effc:	af00      	add	r7, sp, #0
 800effe:	4603      	mov	r3, r0
 800f000:	6039      	str	r1, [r7, #0]
 800f002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	db0a      	blt.n	800f022 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	b2da      	uxtb	r2, r3
 800f010:	490c      	ldr	r1, [pc, #48]	; (800f044 <__NVIC_SetPriority+0x4c>)
 800f012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f016:	0112      	lsls	r2, r2, #4
 800f018:	b2d2      	uxtb	r2, r2
 800f01a:	440b      	add	r3, r1
 800f01c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f020:	e00a      	b.n	800f038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	b2da      	uxtb	r2, r3
 800f026:	4908      	ldr	r1, [pc, #32]	; (800f048 <__NVIC_SetPriority+0x50>)
 800f028:	79fb      	ldrb	r3, [r7, #7]
 800f02a:	f003 030f 	and.w	r3, r3, #15
 800f02e:	3b04      	subs	r3, #4
 800f030:	0112      	lsls	r2, r2, #4
 800f032:	b2d2      	uxtb	r2, r2
 800f034:	440b      	add	r3, r1
 800f036:	761a      	strb	r2, [r3, #24]
}
 800f038:	bf00      	nop
 800f03a:	370c      	adds	r7, #12
 800f03c:	46bd      	mov	sp, r7
 800f03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f042:	4770      	bx	lr
 800f044:	e000e100 	.word	0xe000e100
 800f048:	e000ed00 	.word	0xe000ed00

0800f04c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f04c:	b580      	push	{r7, lr}
 800f04e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f050:	4b05      	ldr	r3, [pc, #20]	; (800f068 <SysTick_Handler+0x1c>)
 800f052:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f054:	f002 fc1c 	bl	8011890 <xTaskGetSchedulerState>
 800f058:	4603      	mov	r3, r0
 800f05a:	2b01      	cmp	r3, #1
 800f05c:	d001      	beq.n	800f062 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f05e:	f003 fd03 	bl	8012a68 <xPortSysTickHandler>
  }
}
 800f062:	bf00      	nop
 800f064:	bd80      	pop	{r7, pc}
 800f066:	bf00      	nop
 800f068:	e000e010 	.word	0xe000e010

0800f06c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f06c:	b580      	push	{r7, lr}
 800f06e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f070:	2100      	movs	r1, #0
 800f072:	f06f 0004 	mvn.w	r0, #4
 800f076:	f7ff ffbf 	bl	800eff8 <__NVIC_SetPriority>
#endif
}
 800f07a:	bf00      	nop
 800f07c:	bd80      	pop	{r7, pc}
	...

0800f080 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f080:	b480      	push	{r7}
 800f082:	b083      	sub	sp, #12
 800f084:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f086:	f3ef 8305 	mrs	r3, IPSR
 800f08a:	603b      	str	r3, [r7, #0]
  return(result);
 800f08c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d003      	beq.n	800f09a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f092:	f06f 0305 	mvn.w	r3, #5
 800f096:	607b      	str	r3, [r7, #4]
 800f098:	e00c      	b.n	800f0b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f09a:	4b0a      	ldr	r3, [pc, #40]	; (800f0c4 <osKernelInitialize+0x44>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d105      	bne.n	800f0ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f0a2:	4b08      	ldr	r3, [pc, #32]	; (800f0c4 <osKernelInitialize+0x44>)
 800f0a4:	2201      	movs	r2, #1
 800f0a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	607b      	str	r3, [r7, #4]
 800f0ac:	e002      	b.n	800f0b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f0ae:	f04f 33ff 	mov.w	r3, #4294967295
 800f0b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f0b4:	687b      	ldr	r3, [r7, #4]
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	370c      	adds	r7, #12
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c0:	4770      	bx	lr
 800f0c2:	bf00      	nop
 800f0c4:	20001748 	.word	0x20001748

0800f0c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b082      	sub	sp, #8
 800f0cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f0ce:	f3ef 8305 	mrs	r3, IPSR
 800f0d2:	603b      	str	r3, [r7, #0]
  return(result);
 800f0d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d003      	beq.n	800f0e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800f0da:	f06f 0305 	mvn.w	r3, #5
 800f0de:	607b      	str	r3, [r7, #4]
 800f0e0:	e010      	b.n	800f104 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f0e2:	4b0b      	ldr	r3, [pc, #44]	; (800f110 <osKernelStart+0x48>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	2b01      	cmp	r3, #1
 800f0e8:	d109      	bne.n	800f0fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f0ea:	f7ff ffbf 	bl	800f06c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f0ee:	4b08      	ldr	r3, [pc, #32]	; (800f110 <osKernelStart+0x48>)
 800f0f0:	2202      	movs	r2, #2
 800f0f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f0f4:	f001 ff50 	bl	8010f98 <vTaskStartScheduler>
      stat = osOK;
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	607b      	str	r3, [r7, #4]
 800f0fc:	e002      	b.n	800f104 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f0fe:	f04f 33ff 	mov.w	r3, #4294967295
 800f102:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f104:	687b      	ldr	r3, [r7, #4]
}
 800f106:	4618      	mov	r0, r3
 800f108:	3708      	adds	r7, #8
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}
 800f10e:	bf00      	nop
 800f110:	20001748 	.word	0x20001748

0800f114 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f114:	b580      	push	{r7, lr}
 800f116:	b08e      	sub	sp, #56	; 0x38
 800f118:	af04      	add	r7, sp, #16
 800f11a:	60f8      	str	r0, [r7, #12]
 800f11c:	60b9      	str	r1, [r7, #8]
 800f11e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f120:	2300      	movs	r3, #0
 800f122:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f124:	f3ef 8305 	mrs	r3, IPSR
 800f128:	617b      	str	r3, [r7, #20]
  return(result);
 800f12a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d17e      	bne.n	800f22e <osThreadNew+0x11a>
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d07b      	beq.n	800f22e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f136:	2380      	movs	r3, #128	; 0x80
 800f138:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f13a:	2318      	movs	r3, #24
 800f13c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f13e:	2300      	movs	r3, #0
 800f140:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800f142:	f04f 33ff 	mov.w	r3, #4294967295
 800f146:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d045      	beq.n	800f1da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d002      	beq.n	800f15c <osThreadNew+0x48>
        name = attr->name;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	699b      	ldr	r3, [r3, #24]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d002      	beq.n	800f16a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	699b      	ldr	r3, [r3, #24]
 800f168:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f16a:	69fb      	ldr	r3, [r7, #28]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d008      	beq.n	800f182 <osThreadNew+0x6e>
 800f170:	69fb      	ldr	r3, [r7, #28]
 800f172:	2b38      	cmp	r3, #56	; 0x38
 800f174:	d805      	bhi.n	800f182 <osThreadNew+0x6e>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	685b      	ldr	r3, [r3, #4]
 800f17a:	f003 0301 	and.w	r3, r3, #1
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d001      	beq.n	800f186 <osThreadNew+0x72>
        return (NULL);
 800f182:	2300      	movs	r3, #0
 800f184:	e054      	b.n	800f230 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	695b      	ldr	r3, [r3, #20]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d003      	beq.n	800f196 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	695b      	ldr	r3, [r3, #20]
 800f192:	089b      	lsrs	r3, r3, #2
 800f194:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	689b      	ldr	r3, [r3, #8]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d00e      	beq.n	800f1bc <osThreadNew+0xa8>
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	68db      	ldr	r3, [r3, #12]
 800f1a2:	2ba7      	cmp	r3, #167	; 0xa7
 800f1a4:	d90a      	bls.n	800f1bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d006      	beq.n	800f1bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	695b      	ldr	r3, [r3, #20]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d002      	beq.n	800f1bc <osThreadNew+0xa8>
        mem = 1;
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	61bb      	str	r3, [r7, #24]
 800f1ba:	e010      	b.n	800f1de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	689b      	ldr	r3, [r3, #8]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d10c      	bne.n	800f1de <osThreadNew+0xca>
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	68db      	ldr	r3, [r3, #12]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d108      	bne.n	800f1de <osThreadNew+0xca>
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	691b      	ldr	r3, [r3, #16]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d104      	bne.n	800f1de <osThreadNew+0xca>
          mem = 0;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	61bb      	str	r3, [r7, #24]
 800f1d8:	e001      	b.n	800f1de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f1de:	69bb      	ldr	r3, [r7, #24]
 800f1e0:	2b01      	cmp	r3, #1
 800f1e2:	d110      	bne.n	800f206 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f1e8:	687a      	ldr	r2, [r7, #4]
 800f1ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f1ec:	9202      	str	r2, [sp, #8]
 800f1ee:	9301      	str	r3, [sp, #4]
 800f1f0:	69fb      	ldr	r3, [r7, #28]
 800f1f2:	9300      	str	r3, [sp, #0]
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	6a3a      	ldr	r2, [r7, #32]
 800f1f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f1fa:	68f8      	ldr	r0, [r7, #12]
 800f1fc:	f001 fce0 	bl	8010bc0 <xTaskCreateStatic>
 800f200:	4603      	mov	r3, r0
 800f202:	613b      	str	r3, [r7, #16]
 800f204:	e013      	b.n	800f22e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f206:	69bb      	ldr	r3, [r7, #24]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d110      	bne.n	800f22e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f20c:	6a3b      	ldr	r3, [r7, #32]
 800f20e:	b29a      	uxth	r2, r3
 800f210:	f107 0310 	add.w	r3, r7, #16
 800f214:	9301      	str	r3, [sp, #4]
 800f216:	69fb      	ldr	r3, [r7, #28]
 800f218:	9300      	str	r3, [sp, #0]
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f21e:	68f8      	ldr	r0, [r7, #12]
 800f220:	f001 fd2b 	bl	8010c7a <xTaskCreate>
 800f224:	4603      	mov	r3, r0
 800f226:	2b01      	cmp	r3, #1
 800f228:	d001      	beq.n	800f22e <osThreadNew+0x11a>
            hTask = NULL;
 800f22a:	2300      	movs	r3, #0
 800f22c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f22e:	693b      	ldr	r3, [r7, #16]
}
 800f230:	4618      	mov	r0, r3
 800f232:	3728      	adds	r7, #40	; 0x28
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}

0800f238 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800f238:	b580      	push	{r7, lr}
 800f23a:	b088      	sub	sp, #32
 800f23c:	af02      	add	r7, sp, #8
 800f23e:	6078      	str	r0, [r7, #4]
 800f240:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d002      	beq.n	800f252 <osThreadFlagsSet+0x1a>
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	da03      	bge.n	800f25a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800f252:	f06f 0303 	mvn.w	r3, #3
 800f256:	60fb      	str	r3, [r7, #12]
 800f258:	e035      	b.n	800f2c6 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800f25a:	f04f 33ff 	mov.w	r3, #4294967295
 800f25e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f260:	f3ef 8305 	mrs	r3, IPSR
 800f264:	613b      	str	r3, [r7, #16]
  return(result);
 800f266:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d01f      	beq.n	800f2ac <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800f26c:	2300      	movs	r3, #0
 800f26e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800f270:	f107 0308 	add.w	r3, r7, #8
 800f274:	9300      	str	r3, [sp, #0]
 800f276:	2300      	movs	r3, #0
 800f278:	2201      	movs	r2, #1
 800f27a:	6839      	ldr	r1, [r7, #0]
 800f27c:	6978      	ldr	r0, [r7, #20]
 800f27e:	f002 fdaf 	bl	8011de0 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800f282:	f107 030c 	add.w	r3, r7, #12
 800f286:	2200      	movs	r2, #0
 800f288:	9200      	str	r2, [sp, #0]
 800f28a:	2200      	movs	r2, #0
 800f28c:	2100      	movs	r1, #0
 800f28e:	6978      	ldr	r0, [r7, #20]
 800f290:	f002 fda6 	bl	8011de0 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d015      	beq.n	800f2c6 <osThreadFlagsSet+0x8e>
 800f29a:	4b0d      	ldr	r3, [pc, #52]	; (800f2d0 <osThreadFlagsSet+0x98>)
 800f29c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2a0:	601a      	str	r2, [r3, #0]
 800f2a2:	f3bf 8f4f 	dsb	sy
 800f2a6:	f3bf 8f6f 	isb	sy
 800f2aa:	e00c      	b.n	800f2c6 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	2201      	movs	r2, #1
 800f2b0:	6839      	ldr	r1, [r7, #0]
 800f2b2:	6978      	ldr	r0, [r7, #20]
 800f2b4:	f002 fcd6 	bl	8011c64 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800f2b8:	f107 030c 	add.w	r3, r7, #12
 800f2bc:	2200      	movs	r2, #0
 800f2be:	2100      	movs	r1, #0
 800f2c0:	6978      	ldr	r0, [r7, #20]
 800f2c2:	f002 fccf 	bl	8011c64 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800f2c6:	68fb      	ldr	r3, [r7, #12]
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3718      	adds	r7, #24
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}
 800f2d0:	e000ed04 	.word	0xe000ed04

0800f2d4 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b08c      	sub	sp, #48	; 0x30
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	60f8      	str	r0, [r7, #12]
 800f2dc:	60b9      	str	r1, [r7, #8]
 800f2de:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f2e0:	f3ef 8305 	mrs	r3, IPSR
 800f2e4:	617b      	str	r3, [r7, #20]
  return(result);
 800f2e6:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d003      	beq.n	800f2f4 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800f2ec:	f06f 0305 	mvn.w	r3, #5
 800f2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f2f2:	e06b      	b.n	800f3cc <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	da03      	bge.n	800f302 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800f2fa:	f06f 0303 	mvn.w	r3, #3
 800f2fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f300:	e064      	b.n	800f3cc <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	f003 0302 	and.w	r3, r3, #2
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d002      	beq.n	800f312 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800f30c:	2300      	movs	r3, #0
 800f30e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f310:	e001      	b.n	800f316 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800f316:	2300      	movs	r3, #0
 800f318:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800f31e:	f001 ff57 	bl	80111d0 <xTaskGetTickCount>
 800f322:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800f324:	f107 0210 	add.w	r2, r7, #16
 800f328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f32a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f32c:	2000      	movs	r0, #0
 800f32e:	f002 fc39 	bl	8011ba4 <xTaskNotifyWait>
 800f332:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800f334:	69fb      	ldr	r3, [r7, #28]
 800f336:	2b01      	cmp	r3, #1
 800f338:	d137      	bne.n	800f3aa <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800f33a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	4013      	ands	r3, r2
 800f340:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800f342:	693b      	ldr	r3, [r7, #16]
 800f344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f346:	4313      	orrs	r3, r2
 800f348:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	f003 0301 	and.w	r3, r3, #1
 800f350:	2b00      	cmp	r3, #0
 800f352:	d00c      	beq.n	800f36e <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800f354:	68fa      	ldr	r2, [r7, #12]
 800f356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f358:	4013      	ands	r3, r2
 800f35a:	68fa      	ldr	r2, [r7, #12]
 800f35c:	429a      	cmp	r2, r3
 800f35e:	d032      	beq.n	800f3c6 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d10f      	bne.n	800f386 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800f366:	f06f 0302 	mvn.w	r3, #2
 800f36a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800f36c:	e02e      	b.n	800f3cc <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800f36e:	68fa      	ldr	r2, [r7, #12]
 800f370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f372:	4013      	ands	r3, r2
 800f374:	2b00      	cmp	r3, #0
 800f376:	d128      	bne.n	800f3ca <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d103      	bne.n	800f386 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800f37e:	f06f 0302 	mvn.w	r3, #2
 800f382:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800f384:	e022      	b.n	800f3cc <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800f386:	f001 ff23 	bl	80111d0 <xTaskGetTickCount>
 800f38a:	4602      	mov	r2, r0
 800f38c:	6a3b      	ldr	r3, [r7, #32]
 800f38e:	1ad3      	subs	r3, r2, r3
 800f390:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800f392:	69ba      	ldr	r2, [r7, #24]
 800f394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f396:	429a      	cmp	r2, r3
 800f398:	d902      	bls.n	800f3a0 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800f39a:	2300      	movs	r3, #0
 800f39c:	627b      	str	r3, [r7, #36]	; 0x24
 800f39e:	e00e      	b.n	800f3be <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800f3a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3a2:	69bb      	ldr	r3, [r7, #24]
 800f3a4:	1ad3      	subs	r3, r2, r3
 800f3a6:	627b      	str	r3, [r7, #36]	; 0x24
 800f3a8:	e009      	b.n	800f3be <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d103      	bne.n	800f3b8 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800f3b0:	f06f 0302 	mvn.w	r3, #2
 800f3b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f3b6:	e002      	b.n	800f3be <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800f3b8:	f06f 0301 	mvn.w	r3, #1
 800f3bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800f3be:	69fb      	ldr	r3, [r7, #28]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d1af      	bne.n	800f324 <osThreadFlagsWait+0x50>
 800f3c4:	e002      	b.n	800f3cc <osThreadFlagsWait+0xf8>
            break;
 800f3c6:	bf00      	nop
 800f3c8:	e000      	b.n	800f3cc <osThreadFlagsWait+0xf8>
            break;
 800f3ca:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800f3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3730      	adds	r7, #48	; 0x30
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}

0800f3d6 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f3d6:	b580      	push	{r7, lr}
 800f3d8:	b084      	sub	sp, #16
 800f3da:	af00      	add	r7, sp, #0
 800f3dc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f3de:	f3ef 8305 	mrs	r3, IPSR
 800f3e2:	60bb      	str	r3, [r7, #8]
  return(result);
 800f3e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d003      	beq.n	800f3f2 <osDelay+0x1c>
    stat = osErrorISR;
 800f3ea:	f06f 0305 	mvn.w	r3, #5
 800f3ee:	60fb      	str	r3, [r7, #12]
 800f3f0:	e007      	b.n	800f402 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d002      	beq.n	800f402 <osDelay+0x2c>
      vTaskDelay(ticks);
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f001 fd97 	bl	8010f30 <vTaskDelay>
    }
  }

  return (stat);
 800f402:	68fb      	ldr	r3, [r7, #12]
}
 800f404:	4618      	mov	r0, r3
 800f406:	3710      	adds	r7, #16
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}

0800f40c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b088      	sub	sp, #32
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800f414:	2300      	movs	r3, #0
 800f416:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f418:	f3ef 8305 	mrs	r3, IPSR
 800f41c:	60bb      	str	r3, [r7, #8]
  return(result);
 800f41e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800f420:	2b00      	cmp	r3, #0
 800f422:	d174      	bne.n	800f50e <osMutexNew+0x102>
    if (attr != NULL) {
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d003      	beq.n	800f432 <osMutexNew+0x26>
      type = attr->attr_bits;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	685b      	ldr	r3, [r3, #4]
 800f42e:	61bb      	str	r3, [r7, #24]
 800f430:	e001      	b.n	800f436 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800f432:	2300      	movs	r3, #0
 800f434:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800f436:	69bb      	ldr	r3, [r7, #24]
 800f438:	f003 0301 	and.w	r3, r3, #1
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d002      	beq.n	800f446 <osMutexNew+0x3a>
      rmtx = 1U;
 800f440:	2301      	movs	r3, #1
 800f442:	617b      	str	r3, [r7, #20]
 800f444:	e001      	b.n	800f44a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800f446:	2300      	movs	r3, #0
 800f448:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800f44a:	69bb      	ldr	r3, [r7, #24]
 800f44c:	f003 0308 	and.w	r3, r3, #8
 800f450:	2b00      	cmp	r3, #0
 800f452:	d15c      	bne.n	800f50e <osMutexNew+0x102>
      mem = -1;
 800f454:	f04f 33ff 	mov.w	r3, #4294967295
 800f458:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d015      	beq.n	800f48c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	689b      	ldr	r3, [r3, #8]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d006      	beq.n	800f476 <osMutexNew+0x6a>
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	68db      	ldr	r3, [r3, #12]
 800f46c:	2b4f      	cmp	r3, #79	; 0x4f
 800f46e:	d902      	bls.n	800f476 <osMutexNew+0x6a>
          mem = 1;
 800f470:	2301      	movs	r3, #1
 800f472:	613b      	str	r3, [r7, #16]
 800f474:	e00c      	b.n	800f490 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	689b      	ldr	r3, [r3, #8]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d108      	bne.n	800f490 <osMutexNew+0x84>
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	68db      	ldr	r3, [r3, #12]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d104      	bne.n	800f490 <osMutexNew+0x84>
            mem = 0;
 800f486:	2300      	movs	r3, #0
 800f488:	613b      	str	r3, [r7, #16]
 800f48a:	e001      	b.n	800f490 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800f48c:	2300      	movs	r3, #0
 800f48e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	2b01      	cmp	r3, #1
 800f494:	d112      	bne.n	800f4bc <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d007      	beq.n	800f4ac <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	689b      	ldr	r3, [r3, #8]
 800f4a0:	4619      	mov	r1, r3
 800f4a2:	2004      	movs	r0, #4
 800f4a4:	f000 fc37 	bl	800fd16 <xQueueCreateMutexStatic>
 800f4a8:	61f8      	str	r0, [r7, #28]
 800f4aa:	e016      	b.n	800f4da <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	689b      	ldr	r3, [r3, #8]
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	2001      	movs	r0, #1
 800f4b4:	f000 fc2f 	bl	800fd16 <xQueueCreateMutexStatic>
 800f4b8:	61f8      	str	r0, [r7, #28]
 800f4ba:	e00e      	b.n	800f4da <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800f4bc:	693b      	ldr	r3, [r7, #16]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d10b      	bne.n	800f4da <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800f4c2:	697b      	ldr	r3, [r7, #20]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d004      	beq.n	800f4d2 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800f4c8:	2004      	movs	r0, #4
 800f4ca:	f000 fc0c 	bl	800fce6 <xQueueCreateMutex>
 800f4ce:	61f8      	str	r0, [r7, #28]
 800f4d0:	e003      	b.n	800f4da <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800f4d2:	2001      	movs	r0, #1
 800f4d4:	f000 fc07 	bl	800fce6 <xQueueCreateMutex>
 800f4d8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800f4da:	69fb      	ldr	r3, [r7, #28]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d00c      	beq.n	800f4fa <osMutexNew+0xee>
        if (attr != NULL) {
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d003      	beq.n	800f4ee <osMutexNew+0xe2>
          name = attr->name;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	60fb      	str	r3, [r7, #12]
 800f4ec:	e001      	b.n	800f4f2 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800f4f2:	68f9      	ldr	r1, [r7, #12]
 800f4f4:	69f8      	ldr	r0, [r7, #28]
 800f4f6:	f001 fadb 	bl	8010ab0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800f4fa:	69fb      	ldr	r3, [r7, #28]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d006      	beq.n	800f50e <osMutexNew+0x102>
 800f500:	697b      	ldr	r3, [r7, #20]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d003      	beq.n	800f50e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800f506:	69fb      	ldr	r3, [r7, #28]
 800f508:	f043 0301 	orr.w	r3, r3, #1
 800f50c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800f50e:	69fb      	ldr	r3, [r7, #28]
}
 800f510:	4618      	mov	r0, r3
 800f512:	3720      	adds	r7, #32
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}

0800f518 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800f518:	b580      	push	{r7, lr}
 800f51a:	b086      	sub	sp, #24
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
 800f520:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f023 0301 	bic.w	r3, r3, #1
 800f528:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	f003 0301 	and.w	r3, r3, #1
 800f530:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800f532:	2300      	movs	r3, #0
 800f534:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f536:	f3ef 8305 	mrs	r3, IPSR
 800f53a:	60bb      	str	r3, [r7, #8]
  return(result);
 800f53c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d003      	beq.n	800f54a <osMutexAcquire+0x32>
    stat = osErrorISR;
 800f542:	f06f 0305 	mvn.w	r3, #5
 800f546:	617b      	str	r3, [r7, #20]
 800f548:	e02c      	b.n	800f5a4 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800f54a:	693b      	ldr	r3, [r7, #16]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d103      	bne.n	800f558 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800f550:	f06f 0303 	mvn.w	r3, #3
 800f554:	617b      	str	r3, [r7, #20]
 800f556:	e025      	b.n	800f5a4 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d011      	beq.n	800f582 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800f55e:	6839      	ldr	r1, [r7, #0]
 800f560:	6938      	ldr	r0, [r7, #16]
 800f562:	f000 fc27 	bl	800fdb4 <xQueueTakeMutexRecursive>
 800f566:	4603      	mov	r3, r0
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d01b      	beq.n	800f5a4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d003      	beq.n	800f57a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800f572:	f06f 0301 	mvn.w	r3, #1
 800f576:	617b      	str	r3, [r7, #20]
 800f578:	e014      	b.n	800f5a4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800f57a:	f06f 0302 	mvn.w	r3, #2
 800f57e:	617b      	str	r3, [r7, #20]
 800f580:	e010      	b.n	800f5a4 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800f582:	6839      	ldr	r1, [r7, #0]
 800f584:	6938      	ldr	r0, [r7, #16]
 800f586:	f000 ffbb 	bl	8010500 <xQueueSemaphoreTake>
 800f58a:	4603      	mov	r3, r0
 800f58c:	2b01      	cmp	r3, #1
 800f58e:	d009      	beq.n	800f5a4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d003      	beq.n	800f59e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800f596:	f06f 0301 	mvn.w	r3, #1
 800f59a:	617b      	str	r3, [r7, #20]
 800f59c:	e002      	b.n	800f5a4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800f59e:	f06f 0302 	mvn.w	r3, #2
 800f5a2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800f5a4:	697b      	ldr	r3, [r7, #20]
}
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	3718      	adds	r7, #24
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}

0800f5ae <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800f5ae:	b580      	push	{r7, lr}
 800f5b0:	b086      	sub	sp, #24
 800f5b2:	af00      	add	r7, sp, #0
 800f5b4:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f023 0301 	bic.w	r3, r3, #1
 800f5bc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	f003 0301 	and.w	r3, r3, #1
 800f5c4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f5ca:	f3ef 8305 	mrs	r3, IPSR
 800f5ce:	60bb      	str	r3, [r7, #8]
  return(result);
 800f5d0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d003      	beq.n	800f5de <osMutexRelease+0x30>
    stat = osErrorISR;
 800f5d6:	f06f 0305 	mvn.w	r3, #5
 800f5da:	617b      	str	r3, [r7, #20]
 800f5dc:	e01f      	b.n	800f61e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800f5de:	693b      	ldr	r3, [r7, #16]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d103      	bne.n	800f5ec <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800f5e4:	f06f 0303 	mvn.w	r3, #3
 800f5e8:	617b      	str	r3, [r7, #20]
 800f5ea:	e018      	b.n	800f61e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d009      	beq.n	800f606 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800f5f2:	6938      	ldr	r0, [r7, #16]
 800f5f4:	f000 fbaa 	bl	800fd4c <xQueueGiveMutexRecursive>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	2b01      	cmp	r3, #1
 800f5fc:	d00f      	beq.n	800f61e <osMutexRelease+0x70>
        stat = osErrorResource;
 800f5fe:	f06f 0302 	mvn.w	r3, #2
 800f602:	617b      	str	r3, [r7, #20]
 800f604:	e00b      	b.n	800f61e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800f606:	2300      	movs	r3, #0
 800f608:	2200      	movs	r2, #0
 800f60a:	2100      	movs	r1, #0
 800f60c:	6938      	ldr	r0, [r7, #16]
 800f60e:	f000 fc71 	bl	800fef4 <xQueueGenericSend>
 800f612:	4603      	mov	r3, r0
 800f614:	2b01      	cmp	r3, #1
 800f616:	d002      	beq.n	800f61e <osMutexRelease+0x70>
        stat = osErrorResource;
 800f618:	f06f 0302 	mvn.w	r3, #2
 800f61c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f61e:	697b      	ldr	r3, [r7, #20]
}
 800f620:	4618      	mov	r0, r3
 800f622:	3718      	adds	r7, #24
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}

0800f628 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f628:	b580      	push	{r7, lr}
 800f62a:	b08a      	sub	sp, #40	; 0x28
 800f62c:	af02      	add	r7, sp, #8
 800f62e:	60f8      	str	r0, [r7, #12]
 800f630:	60b9      	str	r1, [r7, #8]
 800f632:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f634:	2300      	movs	r3, #0
 800f636:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f638:	f3ef 8305 	mrs	r3, IPSR
 800f63c:	613b      	str	r3, [r7, #16]
  return(result);
 800f63e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f640:	2b00      	cmp	r3, #0
 800f642:	d175      	bne.n	800f730 <osSemaphoreNew+0x108>
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d072      	beq.n	800f730 <osSemaphoreNew+0x108>
 800f64a:	68ba      	ldr	r2, [r7, #8]
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	429a      	cmp	r2, r3
 800f650:	d86e      	bhi.n	800f730 <osSemaphoreNew+0x108>
    mem = -1;
 800f652:	f04f 33ff 	mov.w	r3, #4294967295
 800f656:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d015      	beq.n	800f68a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	689b      	ldr	r3, [r3, #8]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d006      	beq.n	800f674 <osSemaphoreNew+0x4c>
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	68db      	ldr	r3, [r3, #12]
 800f66a:	2b4f      	cmp	r3, #79	; 0x4f
 800f66c:	d902      	bls.n	800f674 <osSemaphoreNew+0x4c>
        mem = 1;
 800f66e:	2301      	movs	r3, #1
 800f670:	61bb      	str	r3, [r7, #24]
 800f672:	e00c      	b.n	800f68e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	689b      	ldr	r3, [r3, #8]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d108      	bne.n	800f68e <osSemaphoreNew+0x66>
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	68db      	ldr	r3, [r3, #12]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d104      	bne.n	800f68e <osSemaphoreNew+0x66>
          mem = 0;
 800f684:	2300      	movs	r3, #0
 800f686:	61bb      	str	r3, [r7, #24]
 800f688:	e001      	b.n	800f68e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800f68a:	2300      	movs	r3, #0
 800f68c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800f68e:	69bb      	ldr	r3, [r7, #24]
 800f690:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f694:	d04c      	beq.n	800f730 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	2b01      	cmp	r3, #1
 800f69a:	d128      	bne.n	800f6ee <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800f69c:	69bb      	ldr	r3, [r7, #24]
 800f69e:	2b01      	cmp	r3, #1
 800f6a0:	d10a      	bne.n	800f6b8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	689b      	ldr	r3, [r3, #8]
 800f6a6:	2203      	movs	r2, #3
 800f6a8:	9200      	str	r2, [sp, #0]
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	2100      	movs	r1, #0
 800f6ae:	2001      	movs	r0, #1
 800f6b0:	f000 fa2a 	bl	800fb08 <xQueueGenericCreateStatic>
 800f6b4:	61f8      	str	r0, [r7, #28]
 800f6b6:	e005      	b.n	800f6c4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800f6b8:	2203      	movs	r2, #3
 800f6ba:	2100      	movs	r1, #0
 800f6bc:	2001      	movs	r0, #1
 800f6be:	f000 fa9b 	bl	800fbf8 <xQueueGenericCreate>
 800f6c2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f6c4:	69fb      	ldr	r3, [r7, #28]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d022      	beq.n	800f710 <osSemaphoreNew+0xe8>
 800f6ca:	68bb      	ldr	r3, [r7, #8]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d01f      	beq.n	800f710 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	2100      	movs	r1, #0
 800f6d6:	69f8      	ldr	r0, [r7, #28]
 800f6d8:	f000 fc0c 	bl	800fef4 <xQueueGenericSend>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	2b01      	cmp	r3, #1
 800f6e0:	d016      	beq.n	800f710 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800f6e2:	69f8      	ldr	r0, [r7, #28]
 800f6e4:	f001 f898 	bl	8010818 <vQueueDelete>
            hSemaphore = NULL;
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	61fb      	str	r3, [r7, #28]
 800f6ec:	e010      	b.n	800f710 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800f6ee:	69bb      	ldr	r3, [r7, #24]
 800f6f0:	2b01      	cmp	r3, #1
 800f6f2:	d108      	bne.n	800f706 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	689b      	ldr	r3, [r3, #8]
 800f6f8:	461a      	mov	r2, r3
 800f6fa:	68b9      	ldr	r1, [r7, #8]
 800f6fc:	68f8      	ldr	r0, [r7, #12]
 800f6fe:	f000 fb8f 	bl	800fe20 <xQueueCreateCountingSemaphoreStatic>
 800f702:	61f8      	str	r0, [r7, #28]
 800f704:	e004      	b.n	800f710 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f706:	68b9      	ldr	r1, [r7, #8]
 800f708:	68f8      	ldr	r0, [r7, #12]
 800f70a:	f000 fbc0 	bl	800fe8e <xQueueCreateCountingSemaphore>
 800f70e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f710:	69fb      	ldr	r3, [r7, #28]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d00c      	beq.n	800f730 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d003      	beq.n	800f724 <osSemaphoreNew+0xfc>
          name = attr->name;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	617b      	str	r3, [r7, #20]
 800f722:	e001      	b.n	800f728 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800f724:	2300      	movs	r3, #0
 800f726:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f728:	6979      	ldr	r1, [r7, #20]
 800f72a:	69f8      	ldr	r0, [r7, #28]
 800f72c:	f001 f9c0 	bl	8010ab0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f730:	69fb      	ldr	r3, [r7, #28]
}
 800f732:	4618      	mov	r0, r3
 800f734:	3720      	adds	r7, #32
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}
	...

0800f73c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b086      	sub	sp, #24
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
 800f744:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f74a:	2300      	movs	r3, #0
 800f74c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f74e:	693b      	ldr	r3, [r7, #16]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d103      	bne.n	800f75c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f754:	f06f 0303 	mvn.w	r3, #3
 800f758:	617b      	str	r3, [r7, #20]
 800f75a:	e039      	b.n	800f7d0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f75c:	f3ef 8305 	mrs	r3, IPSR
 800f760:	60fb      	str	r3, [r7, #12]
  return(result);
 800f762:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f764:	2b00      	cmp	r3, #0
 800f766:	d022      	beq.n	800f7ae <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d003      	beq.n	800f776 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800f76e:	f06f 0303 	mvn.w	r3, #3
 800f772:	617b      	str	r3, [r7, #20]
 800f774:	e02c      	b.n	800f7d0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800f776:	2300      	movs	r3, #0
 800f778:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f77a:	f107 0308 	add.w	r3, r7, #8
 800f77e:	461a      	mov	r2, r3
 800f780:	2100      	movs	r1, #0
 800f782:	6938      	ldr	r0, [r7, #16]
 800f784:	f000 ffc8 	bl	8010718 <xQueueReceiveFromISR>
 800f788:	4603      	mov	r3, r0
 800f78a:	2b01      	cmp	r3, #1
 800f78c:	d003      	beq.n	800f796 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800f78e:	f06f 0302 	mvn.w	r3, #2
 800f792:	617b      	str	r3, [r7, #20]
 800f794:	e01c      	b.n	800f7d0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d019      	beq.n	800f7d0 <osSemaphoreAcquire+0x94>
 800f79c:	4b0f      	ldr	r3, [pc, #60]	; (800f7dc <osSemaphoreAcquire+0xa0>)
 800f79e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7a2:	601a      	str	r2, [r3, #0]
 800f7a4:	f3bf 8f4f 	dsb	sy
 800f7a8:	f3bf 8f6f 	isb	sy
 800f7ac:	e010      	b.n	800f7d0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f7ae:	6839      	ldr	r1, [r7, #0]
 800f7b0:	6938      	ldr	r0, [r7, #16]
 800f7b2:	f000 fea5 	bl	8010500 <xQueueSemaphoreTake>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	2b01      	cmp	r3, #1
 800f7ba:	d009      	beq.n	800f7d0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d003      	beq.n	800f7ca <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800f7c2:	f06f 0301 	mvn.w	r3, #1
 800f7c6:	617b      	str	r3, [r7, #20]
 800f7c8:	e002      	b.n	800f7d0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800f7ca:	f06f 0302 	mvn.w	r3, #2
 800f7ce:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f7d0:	697b      	ldr	r3, [r7, #20]
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	3718      	adds	r7, #24
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}
 800f7da:	bf00      	nop
 800f7dc:	e000ed04 	.word	0xe000ed04

0800f7e0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b086      	sub	sp, #24
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f7f0:	693b      	ldr	r3, [r7, #16]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d103      	bne.n	800f7fe <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f7f6:	f06f 0303 	mvn.w	r3, #3
 800f7fa:	617b      	str	r3, [r7, #20]
 800f7fc:	e02c      	b.n	800f858 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f7fe:	f3ef 8305 	mrs	r3, IPSR
 800f802:	60fb      	str	r3, [r7, #12]
  return(result);
 800f804:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f806:	2b00      	cmp	r3, #0
 800f808:	d01a      	beq.n	800f840 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800f80a:	2300      	movs	r3, #0
 800f80c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f80e:	f107 0308 	add.w	r3, r7, #8
 800f812:	4619      	mov	r1, r3
 800f814:	6938      	ldr	r0, [r7, #16]
 800f816:	f000 fd06 	bl	8010226 <xQueueGiveFromISR>
 800f81a:	4603      	mov	r3, r0
 800f81c:	2b01      	cmp	r3, #1
 800f81e:	d003      	beq.n	800f828 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800f820:	f06f 0302 	mvn.w	r3, #2
 800f824:	617b      	str	r3, [r7, #20]
 800f826:	e017      	b.n	800f858 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d014      	beq.n	800f858 <osSemaphoreRelease+0x78>
 800f82e:	4b0d      	ldr	r3, [pc, #52]	; (800f864 <osSemaphoreRelease+0x84>)
 800f830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f834:	601a      	str	r2, [r3, #0]
 800f836:	f3bf 8f4f 	dsb	sy
 800f83a:	f3bf 8f6f 	isb	sy
 800f83e:	e00b      	b.n	800f858 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f840:	2300      	movs	r3, #0
 800f842:	2200      	movs	r2, #0
 800f844:	2100      	movs	r1, #0
 800f846:	6938      	ldr	r0, [r7, #16]
 800f848:	f000 fb54 	bl	800fef4 <xQueueGenericSend>
 800f84c:	4603      	mov	r3, r0
 800f84e:	2b01      	cmp	r3, #1
 800f850:	d002      	beq.n	800f858 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800f852:	f06f 0302 	mvn.w	r3, #2
 800f856:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f858:	697b      	ldr	r3, [r7, #20]
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3718      	adds	r7, #24
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}
 800f862:	bf00      	nop
 800f864:	e000ed04 	.word	0xe000ed04

0800f868 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f868:	b480      	push	{r7}
 800f86a:	b085      	sub	sp, #20
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	60f8      	str	r0, [r7, #12]
 800f870:	60b9      	str	r1, [r7, #8]
 800f872:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	4a07      	ldr	r2, [pc, #28]	; (800f894 <vApplicationGetIdleTaskMemory+0x2c>)
 800f878:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	4a06      	ldr	r2, [pc, #24]	; (800f898 <vApplicationGetIdleTaskMemory+0x30>)
 800f87e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2280      	movs	r2, #128	; 0x80
 800f884:	601a      	str	r2, [r3, #0]
}
 800f886:	bf00      	nop
 800f888:	3714      	adds	r7, #20
 800f88a:	46bd      	mov	sp, r7
 800f88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f890:	4770      	bx	lr
 800f892:	bf00      	nop
 800f894:	2000174c 	.word	0x2000174c
 800f898:	200017f4 	.word	0x200017f4

0800f89c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f89c:	b480      	push	{r7}
 800f89e:	b085      	sub	sp, #20
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	60f8      	str	r0, [r7, #12]
 800f8a4:	60b9      	str	r1, [r7, #8]
 800f8a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	4a07      	ldr	r2, [pc, #28]	; (800f8c8 <vApplicationGetTimerTaskMemory+0x2c>)
 800f8ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f8ae:	68bb      	ldr	r3, [r7, #8]
 800f8b0:	4a06      	ldr	r2, [pc, #24]	; (800f8cc <vApplicationGetTimerTaskMemory+0x30>)
 800f8b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f8ba:	601a      	str	r2, [r3, #0]
}
 800f8bc:	bf00      	nop
 800f8be:	3714      	adds	r7, #20
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c6:	4770      	bx	lr
 800f8c8:	200019f4 	.word	0x200019f4
 800f8cc:	20001a9c 	.word	0x20001a9c

0800f8d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f8d0:	b480      	push	{r7}
 800f8d2:	b083      	sub	sp, #12
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f103 0208 	add.w	r2, r3, #8
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f04f 32ff 	mov.w	r2, #4294967295
 800f8e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	f103 0208 	add.w	r2, r3, #8
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f103 0208 	add.w	r2, r3, #8
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2200      	movs	r2, #0
 800f902:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f904:	bf00      	nop
 800f906:	370c      	adds	r7, #12
 800f908:	46bd      	mov	sp, r7
 800f90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90e:	4770      	bx	lr

0800f910 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f910:	b480      	push	{r7}
 800f912:	b083      	sub	sp, #12
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2200      	movs	r2, #0
 800f91c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f91e:	bf00      	nop
 800f920:	370c      	adds	r7, #12
 800f922:	46bd      	mov	sp, r7
 800f924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f928:	4770      	bx	lr

0800f92a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f92a:	b480      	push	{r7}
 800f92c:	b085      	sub	sp, #20
 800f92e:	af00      	add	r7, sp, #0
 800f930:	6078      	str	r0, [r7, #4]
 800f932:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	685b      	ldr	r3, [r3, #4]
 800f938:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	68fa      	ldr	r2, [r7, #12]
 800f93e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	689a      	ldr	r2, [r3, #8]
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	689b      	ldr	r3, [r3, #8]
 800f94c:	683a      	ldr	r2, [r7, #0]
 800f94e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	683a      	ldr	r2, [r7, #0]
 800f954:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	687a      	ldr	r2, [r7, #4]
 800f95a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	1c5a      	adds	r2, r3, #1
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	601a      	str	r2, [r3, #0]
}
 800f966:	bf00      	nop
 800f968:	3714      	adds	r7, #20
 800f96a:	46bd      	mov	sp, r7
 800f96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f970:	4770      	bx	lr

0800f972 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f972:	b480      	push	{r7}
 800f974:	b085      	sub	sp, #20
 800f976:	af00      	add	r7, sp, #0
 800f978:	6078      	str	r0, [r7, #4]
 800f97a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f988:	d103      	bne.n	800f992 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	691b      	ldr	r3, [r3, #16]
 800f98e:	60fb      	str	r3, [r7, #12]
 800f990:	e00c      	b.n	800f9ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	3308      	adds	r3, #8
 800f996:	60fb      	str	r3, [r7, #12]
 800f998:	e002      	b.n	800f9a0 <vListInsert+0x2e>
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	685b      	ldr	r3, [r3, #4]
 800f99e:	60fb      	str	r3, [r7, #12]
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	685b      	ldr	r3, [r3, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	68ba      	ldr	r2, [r7, #8]
 800f9a8:	429a      	cmp	r2, r3
 800f9aa:	d2f6      	bcs.n	800f99a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	685a      	ldr	r2, [r3, #4]
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	685b      	ldr	r3, [r3, #4]
 800f9b8:	683a      	ldr	r2, [r7, #0]
 800f9ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	68fa      	ldr	r2, [r7, #12]
 800f9c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	683a      	ldr	r2, [r7, #0]
 800f9c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	687a      	ldr	r2, [r7, #4]
 800f9cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	1c5a      	adds	r2, r3, #1
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	601a      	str	r2, [r3, #0]
}
 800f9d8:	bf00      	nop
 800f9da:	3714      	adds	r7, #20
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr

0800f9e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b085      	sub	sp, #20
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	691b      	ldr	r3, [r3, #16]
 800f9f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	685b      	ldr	r3, [r3, #4]
 800f9f6:	687a      	ldr	r2, [r7, #4]
 800f9f8:	6892      	ldr	r2, [r2, #8]
 800f9fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	689b      	ldr	r3, [r3, #8]
 800fa00:	687a      	ldr	r2, [r7, #4]
 800fa02:	6852      	ldr	r2, [r2, #4]
 800fa04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	685b      	ldr	r3, [r3, #4]
 800fa0a:	687a      	ldr	r2, [r7, #4]
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d103      	bne.n	800fa18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	689a      	ldr	r2, [r3, #8]
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	1e5a      	subs	r2, r3, #1
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	681b      	ldr	r3, [r3, #0]
}
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	3714      	adds	r7, #20
 800fa30:	46bd      	mov	sp, r7
 800fa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa36:	4770      	bx	lr

0800fa38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b084      	sub	sp, #16
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
 800fa40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d10a      	bne.n	800fa62 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fa4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa50:	f383 8811 	msr	BASEPRI, r3
 800fa54:	f3bf 8f6f 	isb	sy
 800fa58:	f3bf 8f4f 	dsb	sy
 800fa5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800fa5e:	bf00      	nop
 800fa60:	e7fe      	b.n	800fa60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800fa62:	f002 ff6f 	bl	8012944 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	681a      	ldr	r2, [r3, #0]
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa6e:	68f9      	ldr	r1, [r7, #12]
 800fa70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fa72:	fb01 f303 	mul.w	r3, r1, r3
 800fa76:	441a      	add	r2, r3
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	2200      	movs	r2, #0
 800fa80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	681a      	ldr	r2, [r3, #0]
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	681a      	ldr	r2, [r3, #0]
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa92:	3b01      	subs	r3, #1
 800fa94:	68f9      	ldr	r1, [r7, #12]
 800fa96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fa98:	fb01 f303 	mul.w	r3, r1, r3
 800fa9c:	441a      	add	r2, r3
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	22ff      	movs	r2, #255	; 0xff
 800faa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	22ff      	movs	r2, #255	; 0xff
 800faae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fab2:	683b      	ldr	r3, [r7, #0]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d114      	bne.n	800fae2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	691b      	ldr	r3, [r3, #16]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d01a      	beq.n	800faf6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	3310      	adds	r3, #16
 800fac4:	4618      	mov	r0, r3
 800fac6:	f001 fd11 	bl	80114ec <xTaskRemoveFromEventList>
 800faca:	4603      	mov	r3, r0
 800facc:	2b00      	cmp	r3, #0
 800face:	d012      	beq.n	800faf6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fad0:	4b0c      	ldr	r3, [pc, #48]	; (800fb04 <xQueueGenericReset+0xcc>)
 800fad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fad6:	601a      	str	r2, [r3, #0]
 800fad8:	f3bf 8f4f 	dsb	sy
 800fadc:	f3bf 8f6f 	isb	sy
 800fae0:	e009      	b.n	800faf6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	3310      	adds	r3, #16
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7ff fef2 	bl	800f8d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	3324      	adds	r3, #36	; 0x24
 800faf0:	4618      	mov	r0, r3
 800faf2:	f7ff feed 	bl	800f8d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800faf6:	f002 ff55 	bl	80129a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fafa:	2301      	movs	r3, #1
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	3710      	adds	r7, #16
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}
 800fb04:	e000ed04 	.word	0xe000ed04

0800fb08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b08e      	sub	sp, #56	; 0x38
 800fb0c:	af02      	add	r7, sp, #8
 800fb0e:	60f8      	str	r0, [r7, #12]
 800fb10:	60b9      	str	r1, [r7, #8]
 800fb12:	607a      	str	r2, [r7, #4]
 800fb14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d10a      	bne.n	800fb32 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800fb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb20:	f383 8811 	msr	BASEPRI, r3
 800fb24:	f3bf 8f6f 	isb	sy
 800fb28:	f3bf 8f4f 	dsb	sy
 800fb2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fb2e:	bf00      	nop
 800fb30:	e7fe      	b.n	800fb30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d10a      	bne.n	800fb4e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800fb38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb3c:	f383 8811 	msr	BASEPRI, r3
 800fb40:	f3bf 8f6f 	isb	sy
 800fb44:	f3bf 8f4f 	dsb	sy
 800fb48:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fb4a:	bf00      	nop
 800fb4c:	e7fe      	b.n	800fb4c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d002      	beq.n	800fb5a <xQueueGenericCreateStatic+0x52>
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d001      	beq.n	800fb5e <xQueueGenericCreateStatic+0x56>
 800fb5a:	2301      	movs	r3, #1
 800fb5c:	e000      	b.n	800fb60 <xQueueGenericCreateStatic+0x58>
 800fb5e:	2300      	movs	r3, #0
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d10a      	bne.n	800fb7a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800fb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb68:	f383 8811 	msr	BASEPRI, r3
 800fb6c:	f3bf 8f6f 	isb	sy
 800fb70:	f3bf 8f4f 	dsb	sy
 800fb74:	623b      	str	r3, [r7, #32]
}
 800fb76:	bf00      	nop
 800fb78:	e7fe      	b.n	800fb78 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d102      	bne.n	800fb86 <xQueueGenericCreateStatic+0x7e>
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d101      	bne.n	800fb8a <xQueueGenericCreateStatic+0x82>
 800fb86:	2301      	movs	r3, #1
 800fb88:	e000      	b.n	800fb8c <xQueueGenericCreateStatic+0x84>
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d10a      	bne.n	800fba6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800fb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb94:	f383 8811 	msr	BASEPRI, r3
 800fb98:	f3bf 8f6f 	isb	sy
 800fb9c:	f3bf 8f4f 	dsb	sy
 800fba0:	61fb      	str	r3, [r7, #28]
}
 800fba2:	bf00      	nop
 800fba4:	e7fe      	b.n	800fba4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fba6:	2350      	movs	r3, #80	; 0x50
 800fba8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fbaa:	697b      	ldr	r3, [r7, #20]
 800fbac:	2b50      	cmp	r3, #80	; 0x50
 800fbae:	d00a      	beq.n	800fbc6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800fbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb4:	f383 8811 	msr	BASEPRI, r3
 800fbb8:	f3bf 8f6f 	isb	sy
 800fbbc:	f3bf 8f4f 	dsb	sy
 800fbc0:	61bb      	str	r3, [r7, #24]
}
 800fbc2:	bf00      	nop
 800fbc4:	e7fe      	b.n	800fbc4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fbc6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800fbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d00d      	beq.n	800fbee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fbd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd4:	2201      	movs	r2, #1
 800fbd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fbda:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe0:	9300      	str	r3, [sp, #0]
 800fbe2:	4613      	mov	r3, r2
 800fbe4:	687a      	ldr	r2, [r7, #4]
 800fbe6:	68b9      	ldr	r1, [r7, #8]
 800fbe8:	68f8      	ldr	r0, [r7, #12]
 800fbea:	f000 f83f 	bl	800fc6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	3730      	adds	r7, #48	; 0x30
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}

0800fbf8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b08a      	sub	sp, #40	; 0x28
 800fbfc:	af02      	add	r7, sp, #8
 800fbfe:	60f8      	str	r0, [r7, #12]
 800fc00:	60b9      	str	r1, [r7, #8]
 800fc02:	4613      	mov	r3, r2
 800fc04:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d10a      	bne.n	800fc22 <xQueueGenericCreate+0x2a>
	__asm volatile
 800fc0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc10:	f383 8811 	msr	BASEPRI, r3
 800fc14:	f3bf 8f6f 	isb	sy
 800fc18:	f3bf 8f4f 	dsb	sy
 800fc1c:	613b      	str	r3, [r7, #16]
}
 800fc1e:	bf00      	nop
 800fc20:	e7fe      	b.n	800fc20 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	68ba      	ldr	r2, [r7, #8]
 800fc26:	fb02 f303 	mul.w	r3, r2, r3
 800fc2a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fc2c:	69fb      	ldr	r3, [r7, #28]
 800fc2e:	3350      	adds	r3, #80	; 0x50
 800fc30:	4618      	mov	r0, r3
 800fc32:	f002 ffa9 	bl	8012b88 <pvPortMalloc>
 800fc36:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fc38:	69bb      	ldr	r3, [r7, #24]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d011      	beq.n	800fc62 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fc3e:	69bb      	ldr	r3, [r7, #24]
 800fc40:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	3350      	adds	r3, #80	; 0x50
 800fc46:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fc48:	69bb      	ldr	r3, [r7, #24]
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fc50:	79fa      	ldrb	r2, [r7, #7]
 800fc52:	69bb      	ldr	r3, [r7, #24]
 800fc54:	9300      	str	r3, [sp, #0]
 800fc56:	4613      	mov	r3, r2
 800fc58:	697a      	ldr	r2, [r7, #20]
 800fc5a:	68b9      	ldr	r1, [r7, #8]
 800fc5c:	68f8      	ldr	r0, [r7, #12]
 800fc5e:	f000 f805 	bl	800fc6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fc62:	69bb      	ldr	r3, [r7, #24]
	}
 800fc64:	4618      	mov	r0, r3
 800fc66:	3720      	adds	r7, #32
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}

0800fc6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b084      	sub	sp, #16
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	60f8      	str	r0, [r7, #12]
 800fc74:	60b9      	str	r1, [r7, #8]
 800fc76:	607a      	str	r2, [r7, #4]
 800fc78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fc7a:	68bb      	ldr	r3, [r7, #8]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d103      	bne.n	800fc88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fc80:	69bb      	ldr	r3, [r7, #24]
 800fc82:	69ba      	ldr	r2, [r7, #24]
 800fc84:	601a      	str	r2, [r3, #0]
 800fc86:	e002      	b.n	800fc8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fc88:	69bb      	ldr	r3, [r7, #24]
 800fc8a:	687a      	ldr	r2, [r7, #4]
 800fc8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fc8e:	69bb      	ldr	r3, [r7, #24]
 800fc90:	68fa      	ldr	r2, [r7, #12]
 800fc92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fc94:	69bb      	ldr	r3, [r7, #24]
 800fc96:	68ba      	ldr	r2, [r7, #8]
 800fc98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fc9a:	2101      	movs	r1, #1
 800fc9c:	69b8      	ldr	r0, [r7, #24]
 800fc9e:	f7ff fecb 	bl	800fa38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fca2:	69bb      	ldr	r3, [r7, #24]
 800fca4:	78fa      	ldrb	r2, [r7, #3]
 800fca6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fcaa:	bf00      	nop
 800fcac:	3710      	adds	r7, #16
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd80      	pop	{r7, pc}

0800fcb2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800fcb2:	b580      	push	{r7, lr}
 800fcb4:	b082      	sub	sp, #8
 800fcb6:	af00      	add	r7, sp, #0
 800fcb8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d00e      	beq.n	800fcde <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2200      	movs	r2, #0
 800fcca:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2200      	movs	r2, #0
 800fcd0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	2100      	movs	r1, #0
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f000 f90b 	bl	800fef4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800fcde:	bf00      	nop
 800fce0:	3708      	adds	r7, #8
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}

0800fce6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800fce6:	b580      	push	{r7, lr}
 800fce8:	b086      	sub	sp, #24
 800fcea:	af00      	add	r7, sp, #0
 800fcec:	4603      	mov	r3, r0
 800fcee:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	617b      	str	r3, [r7, #20]
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800fcf8:	79fb      	ldrb	r3, [r7, #7]
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	6939      	ldr	r1, [r7, #16]
 800fcfe:	6978      	ldr	r0, [r7, #20]
 800fd00:	f7ff ff7a 	bl	800fbf8 <xQueueGenericCreate>
 800fd04:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fd06:	68f8      	ldr	r0, [r7, #12]
 800fd08:	f7ff ffd3 	bl	800fcb2 <prvInitialiseMutex>

		return xNewQueue;
 800fd0c:	68fb      	ldr	r3, [r7, #12]
	}
 800fd0e:	4618      	mov	r0, r3
 800fd10:	3718      	adds	r7, #24
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}

0800fd16 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800fd16:	b580      	push	{r7, lr}
 800fd18:	b088      	sub	sp, #32
 800fd1a:	af02      	add	r7, sp, #8
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	6039      	str	r1, [r7, #0]
 800fd20:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fd22:	2301      	movs	r3, #1
 800fd24:	617b      	str	r3, [r7, #20]
 800fd26:	2300      	movs	r3, #0
 800fd28:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800fd2a:	79fb      	ldrb	r3, [r7, #7]
 800fd2c:	9300      	str	r3, [sp, #0]
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	2200      	movs	r2, #0
 800fd32:	6939      	ldr	r1, [r7, #16]
 800fd34:	6978      	ldr	r0, [r7, #20]
 800fd36:	f7ff fee7 	bl	800fb08 <xQueueGenericCreateStatic>
 800fd3a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fd3c:	68f8      	ldr	r0, [r7, #12]
 800fd3e:	f7ff ffb8 	bl	800fcb2 <prvInitialiseMutex>

		return xNewQueue;
 800fd42:	68fb      	ldr	r3, [r7, #12]
	}
 800fd44:	4618      	mov	r0, r3
 800fd46:	3718      	adds	r7, #24
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}

0800fd4c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800fd4c:	b590      	push	{r4, r7, lr}
 800fd4e:	b087      	sub	sp, #28
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800fd58:	693b      	ldr	r3, [r7, #16]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d10a      	bne.n	800fd74 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800fd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd62:	f383 8811 	msr	BASEPRI, r3
 800fd66:	f3bf 8f6f 	isb	sy
 800fd6a:	f3bf 8f4f 	dsb	sy
 800fd6e:	60fb      	str	r3, [r7, #12]
}
 800fd70:	bf00      	nop
 800fd72:	e7fe      	b.n	800fd72 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800fd74:	693b      	ldr	r3, [r7, #16]
 800fd76:	689c      	ldr	r4, [r3, #8]
 800fd78:	f001 fd7a 	bl	8011870 <xTaskGetCurrentTaskHandle>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	429c      	cmp	r4, r3
 800fd80:	d111      	bne.n	800fda6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800fd82:	693b      	ldr	r3, [r7, #16]
 800fd84:	68db      	ldr	r3, [r3, #12]
 800fd86:	1e5a      	subs	r2, r3, #1
 800fd88:	693b      	ldr	r3, [r7, #16]
 800fd8a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800fd8c:	693b      	ldr	r3, [r7, #16]
 800fd8e:	68db      	ldr	r3, [r3, #12]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d105      	bne.n	800fda0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800fd94:	2300      	movs	r3, #0
 800fd96:	2200      	movs	r2, #0
 800fd98:	2100      	movs	r1, #0
 800fd9a:	6938      	ldr	r0, [r7, #16]
 800fd9c:	f000 f8aa 	bl	800fef4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800fda0:	2301      	movs	r3, #1
 800fda2:	617b      	str	r3, [r7, #20]
 800fda4:	e001      	b.n	800fdaa <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800fda6:	2300      	movs	r3, #0
 800fda8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800fdaa:	697b      	ldr	r3, [r7, #20]
	}
 800fdac:	4618      	mov	r0, r3
 800fdae:	371c      	adds	r7, #28
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd90      	pop	{r4, r7, pc}

0800fdb4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800fdb4:	b590      	push	{r4, r7, lr}
 800fdb6:	b087      	sub	sp, #28
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
 800fdbc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800fdc2:	693b      	ldr	r3, [r7, #16]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d10a      	bne.n	800fdde <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800fdc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdcc:	f383 8811 	msr	BASEPRI, r3
 800fdd0:	f3bf 8f6f 	isb	sy
 800fdd4:	f3bf 8f4f 	dsb	sy
 800fdd8:	60fb      	str	r3, [r7, #12]
}
 800fdda:	bf00      	nop
 800fddc:	e7fe      	b.n	800fddc <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800fdde:	693b      	ldr	r3, [r7, #16]
 800fde0:	689c      	ldr	r4, [r3, #8]
 800fde2:	f001 fd45 	bl	8011870 <xTaskGetCurrentTaskHandle>
 800fde6:	4603      	mov	r3, r0
 800fde8:	429c      	cmp	r4, r3
 800fdea:	d107      	bne.n	800fdfc <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800fdec:	693b      	ldr	r3, [r7, #16]
 800fdee:	68db      	ldr	r3, [r3, #12]
 800fdf0:	1c5a      	adds	r2, r3, #1
 800fdf2:	693b      	ldr	r3, [r7, #16]
 800fdf4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800fdf6:	2301      	movs	r3, #1
 800fdf8:	617b      	str	r3, [r7, #20]
 800fdfa:	e00c      	b.n	800fe16 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800fdfc:	6839      	ldr	r1, [r7, #0]
 800fdfe:	6938      	ldr	r0, [r7, #16]
 800fe00:	f000 fb7e 	bl	8010500 <xQueueSemaphoreTake>
 800fe04:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800fe06:	697b      	ldr	r3, [r7, #20]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d004      	beq.n	800fe16 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800fe0c:	693b      	ldr	r3, [r7, #16]
 800fe0e:	68db      	ldr	r3, [r3, #12]
 800fe10:	1c5a      	adds	r2, r3, #1
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800fe16:	697b      	ldr	r3, [r7, #20]
	}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	371c      	adds	r7, #28
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd90      	pop	{r4, r7, pc}

0800fe20 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b08a      	sub	sp, #40	; 0x28
 800fe24:	af02      	add	r7, sp, #8
 800fe26:	60f8      	str	r0, [r7, #12]
 800fe28:	60b9      	str	r1, [r7, #8]
 800fe2a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d10a      	bne.n	800fe48 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800fe32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe36:	f383 8811 	msr	BASEPRI, r3
 800fe3a:	f3bf 8f6f 	isb	sy
 800fe3e:	f3bf 8f4f 	dsb	sy
 800fe42:	61bb      	str	r3, [r7, #24]
}
 800fe44:	bf00      	nop
 800fe46:	e7fe      	b.n	800fe46 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fe48:	68ba      	ldr	r2, [r7, #8]
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d90a      	bls.n	800fe66 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800fe50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe54:	f383 8811 	msr	BASEPRI, r3
 800fe58:	f3bf 8f6f 	isb	sy
 800fe5c:	f3bf 8f4f 	dsb	sy
 800fe60:	617b      	str	r3, [r7, #20]
}
 800fe62:	bf00      	nop
 800fe64:	e7fe      	b.n	800fe64 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fe66:	2302      	movs	r3, #2
 800fe68:	9300      	str	r3, [sp, #0]
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	2100      	movs	r1, #0
 800fe70:	68f8      	ldr	r0, [r7, #12]
 800fe72:	f7ff fe49 	bl	800fb08 <xQueueGenericCreateStatic>
 800fe76:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800fe78:	69fb      	ldr	r3, [r7, #28]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d002      	beq.n	800fe84 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fe7e:	69fb      	ldr	r3, [r7, #28]
 800fe80:	68ba      	ldr	r2, [r7, #8]
 800fe82:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fe84:	69fb      	ldr	r3, [r7, #28]
	}
 800fe86:	4618      	mov	r0, r3
 800fe88:	3720      	adds	r7, #32
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}

0800fe8e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800fe8e:	b580      	push	{r7, lr}
 800fe90:	b086      	sub	sp, #24
 800fe92:	af00      	add	r7, sp, #0
 800fe94:	6078      	str	r0, [r7, #4]
 800fe96:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d10a      	bne.n	800feb4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800fe9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fea2:	f383 8811 	msr	BASEPRI, r3
 800fea6:	f3bf 8f6f 	isb	sy
 800feaa:	f3bf 8f4f 	dsb	sy
 800feae:	613b      	str	r3, [r7, #16]
}
 800feb0:	bf00      	nop
 800feb2:	e7fe      	b.n	800feb2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800feb4:	683a      	ldr	r2, [r7, #0]
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	429a      	cmp	r2, r3
 800feba:	d90a      	bls.n	800fed2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800febc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fec0:	f383 8811 	msr	BASEPRI, r3
 800fec4:	f3bf 8f6f 	isb	sy
 800fec8:	f3bf 8f4f 	dsb	sy
 800fecc:	60fb      	str	r3, [r7, #12]
}
 800fece:	bf00      	nop
 800fed0:	e7fe      	b.n	800fed0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fed2:	2202      	movs	r2, #2
 800fed4:	2100      	movs	r1, #0
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	f7ff fe8e 	bl	800fbf8 <xQueueGenericCreate>
 800fedc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800fede:	697b      	ldr	r3, [r7, #20]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d002      	beq.n	800feea <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	683a      	ldr	r2, [r7, #0]
 800fee8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800feea:	697b      	ldr	r3, [r7, #20]
	}
 800feec:	4618      	mov	r0, r3
 800feee:	3718      	adds	r7, #24
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b08e      	sub	sp, #56	; 0x38
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	60f8      	str	r0, [r7, #12]
 800fefc:	60b9      	str	r1, [r7, #8]
 800fefe:	607a      	str	r2, [r7, #4]
 800ff00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ff02:	2300      	movs	r3, #0
 800ff04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ff0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d10a      	bne.n	800ff26 <xQueueGenericSend+0x32>
	__asm volatile
 800ff10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff14:	f383 8811 	msr	BASEPRI, r3
 800ff18:	f3bf 8f6f 	isb	sy
 800ff1c:	f3bf 8f4f 	dsb	sy
 800ff20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ff22:	bf00      	nop
 800ff24:	e7fe      	b.n	800ff24 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ff26:	68bb      	ldr	r3, [r7, #8]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d103      	bne.n	800ff34 <xQueueGenericSend+0x40>
 800ff2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d101      	bne.n	800ff38 <xQueueGenericSend+0x44>
 800ff34:	2301      	movs	r3, #1
 800ff36:	e000      	b.n	800ff3a <xQueueGenericSend+0x46>
 800ff38:	2300      	movs	r3, #0
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d10a      	bne.n	800ff54 <xQueueGenericSend+0x60>
	__asm volatile
 800ff3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff42:	f383 8811 	msr	BASEPRI, r3
 800ff46:	f3bf 8f6f 	isb	sy
 800ff4a:	f3bf 8f4f 	dsb	sy
 800ff4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ff50:	bf00      	nop
 800ff52:	e7fe      	b.n	800ff52 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	2b02      	cmp	r3, #2
 800ff58:	d103      	bne.n	800ff62 <xQueueGenericSend+0x6e>
 800ff5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff5e:	2b01      	cmp	r3, #1
 800ff60:	d101      	bne.n	800ff66 <xQueueGenericSend+0x72>
 800ff62:	2301      	movs	r3, #1
 800ff64:	e000      	b.n	800ff68 <xQueueGenericSend+0x74>
 800ff66:	2300      	movs	r3, #0
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d10a      	bne.n	800ff82 <xQueueGenericSend+0x8e>
	__asm volatile
 800ff6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff70:	f383 8811 	msr	BASEPRI, r3
 800ff74:	f3bf 8f6f 	isb	sy
 800ff78:	f3bf 8f4f 	dsb	sy
 800ff7c:	623b      	str	r3, [r7, #32]
}
 800ff7e:	bf00      	nop
 800ff80:	e7fe      	b.n	800ff80 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ff82:	f001 fc85 	bl	8011890 <xTaskGetSchedulerState>
 800ff86:	4603      	mov	r3, r0
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d102      	bne.n	800ff92 <xQueueGenericSend+0x9e>
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d101      	bne.n	800ff96 <xQueueGenericSend+0xa2>
 800ff92:	2301      	movs	r3, #1
 800ff94:	e000      	b.n	800ff98 <xQueueGenericSend+0xa4>
 800ff96:	2300      	movs	r3, #0
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d10a      	bne.n	800ffb2 <xQueueGenericSend+0xbe>
	__asm volatile
 800ff9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffa0:	f383 8811 	msr	BASEPRI, r3
 800ffa4:	f3bf 8f6f 	isb	sy
 800ffa8:	f3bf 8f4f 	dsb	sy
 800ffac:	61fb      	str	r3, [r7, #28]
}
 800ffae:	bf00      	nop
 800ffb0:	e7fe      	b.n	800ffb0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ffb2:	f002 fcc7 	bl	8012944 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ffb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ffba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d302      	bcc.n	800ffc8 <xQueueGenericSend+0xd4>
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	2b02      	cmp	r3, #2
 800ffc6:	d129      	bne.n	801001c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ffc8:	683a      	ldr	r2, [r7, #0]
 800ffca:	68b9      	ldr	r1, [r7, #8]
 800ffcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ffce:	f000 fc5e 	bl	801088e <prvCopyDataToQueue>
 800ffd2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ffd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d010      	beq.n	800fffe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ffdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffde:	3324      	adds	r3, #36	; 0x24
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f001 fa83 	bl	80114ec <xTaskRemoveFromEventList>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d013      	beq.n	8010014 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ffec:	4b3f      	ldr	r3, [pc, #252]	; (80100ec <xQueueGenericSend+0x1f8>)
 800ffee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fff2:	601a      	str	r2, [r3, #0]
 800fff4:	f3bf 8f4f 	dsb	sy
 800fff8:	f3bf 8f6f 	isb	sy
 800fffc:	e00a      	b.n	8010014 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010000:	2b00      	cmp	r3, #0
 8010002:	d007      	beq.n	8010014 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010004:	4b39      	ldr	r3, [pc, #228]	; (80100ec <xQueueGenericSend+0x1f8>)
 8010006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801000a:	601a      	str	r2, [r3, #0]
 801000c:	f3bf 8f4f 	dsb	sy
 8010010:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010014:	f002 fcc6 	bl	80129a4 <vPortExitCritical>
				return pdPASS;
 8010018:	2301      	movs	r3, #1
 801001a:	e063      	b.n	80100e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d103      	bne.n	801002a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010022:	f002 fcbf 	bl	80129a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010026:	2300      	movs	r3, #0
 8010028:	e05c      	b.n	80100e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801002a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801002c:	2b00      	cmp	r3, #0
 801002e:	d106      	bne.n	801003e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010030:	f107 0314 	add.w	r3, r7, #20
 8010034:	4618      	mov	r0, r3
 8010036:	f001 fabd 	bl	80115b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801003a:	2301      	movs	r3, #1
 801003c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801003e:	f002 fcb1 	bl	80129a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010042:	f001 f819 	bl	8011078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010046:	f002 fc7d 	bl	8012944 <vPortEnterCritical>
 801004a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801004c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010050:	b25b      	sxtb	r3, r3
 8010052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010056:	d103      	bne.n	8010060 <xQueueGenericSend+0x16c>
 8010058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801005a:	2200      	movs	r2, #0
 801005c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010062:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010066:	b25b      	sxtb	r3, r3
 8010068:	f1b3 3fff 	cmp.w	r3, #4294967295
 801006c:	d103      	bne.n	8010076 <xQueueGenericSend+0x182>
 801006e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010070:	2200      	movs	r2, #0
 8010072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010076:	f002 fc95 	bl	80129a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801007a:	1d3a      	adds	r2, r7, #4
 801007c:	f107 0314 	add.w	r3, r7, #20
 8010080:	4611      	mov	r1, r2
 8010082:	4618      	mov	r0, r3
 8010084:	f001 faac 	bl	80115e0 <xTaskCheckForTimeOut>
 8010088:	4603      	mov	r3, r0
 801008a:	2b00      	cmp	r3, #0
 801008c:	d124      	bne.n	80100d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801008e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010090:	f000 fcf5 	bl	8010a7e <prvIsQueueFull>
 8010094:	4603      	mov	r3, r0
 8010096:	2b00      	cmp	r3, #0
 8010098:	d018      	beq.n	80100cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801009a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801009c:	3310      	adds	r3, #16
 801009e:	687a      	ldr	r2, [r7, #4]
 80100a0:	4611      	mov	r1, r2
 80100a2:	4618      	mov	r0, r3
 80100a4:	f001 f9d2 	bl	801144c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80100a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100aa:	f000 fc80 	bl	80109ae <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80100ae:	f000 fff1 	bl	8011094 <xTaskResumeAll>
 80100b2:	4603      	mov	r3, r0
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	f47f af7c 	bne.w	800ffb2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80100ba:	4b0c      	ldr	r3, [pc, #48]	; (80100ec <xQueueGenericSend+0x1f8>)
 80100bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100c0:	601a      	str	r2, [r3, #0]
 80100c2:	f3bf 8f4f 	dsb	sy
 80100c6:	f3bf 8f6f 	isb	sy
 80100ca:	e772      	b.n	800ffb2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80100cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100ce:	f000 fc6e 	bl	80109ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80100d2:	f000 ffdf 	bl	8011094 <xTaskResumeAll>
 80100d6:	e76c      	b.n	800ffb2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80100d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100da:	f000 fc68 	bl	80109ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80100de:	f000 ffd9 	bl	8011094 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80100e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	3738      	adds	r7, #56	; 0x38
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}
 80100ec:	e000ed04 	.word	0xe000ed04

080100f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b090      	sub	sp, #64	; 0x40
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	60f8      	str	r0, [r7, #12]
 80100f8:	60b9      	str	r1, [r7, #8]
 80100fa:	607a      	str	r2, [r7, #4]
 80100fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8010102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010104:	2b00      	cmp	r3, #0
 8010106:	d10a      	bne.n	801011e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010108:	f04f 0350 	mov.w	r3, #80	; 0x50
 801010c:	f383 8811 	msr	BASEPRI, r3
 8010110:	f3bf 8f6f 	isb	sy
 8010114:	f3bf 8f4f 	dsb	sy
 8010118:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801011a:	bf00      	nop
 801011c:	e7fe      	b.n	801011c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801011e:	68bb      	ldr	r3, [r7, #8]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d103      	bne.n	801012c <xQueueGenericSendFromISR+0x3c>
 8010124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010128:	2b00      	cmp	r3, #0
 801012a:	d101      	bne.n	8010130 <xQueueGenericSendFromISR+0x40>
 801012c:	2301      	movs	r3, #1
 801012e:	e000      	b.n	8010132 <xQueueGenericSendFromISR+0x42>
 8010130:	2300      	movs	r3, #0
 8010132:	2b00      	cmp	r3, #0
 8010134:	d10a      	bne.n	801014c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8010136:	f04f 0350 	mov.w	r3, #80	; 0x50
 801013a:	f383 8811 	msr	BASEPRI, r3
 801013e:	f3bf 8f6f 	isb	sy
 8010142:	f3bf 8f4f 	dsb	sy
 8010146:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010148:	bf00      	nop
 801014a:	e7fe      	b.n	801014a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	2b02      	cmp	r3, #2
 8010150:	d103      	bne.n	801015a <xQueueGenericSendFromISR+0x6a>
 8010152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010156:	2b01      	cmp	r3, #1
 8010158:	d101      	bne.n	801015e <xQueueGenericSendFromISR+0x6e>
 801015a:	2301      	movs	r3, #1
 801015c:	e000      	b.n	8010160 <xQueueGenericSendFromISR+0x70>
 801015e:	2300      	movs	r3, #0
 8010160:	2b00      	cmp	r3, #0
 8010162:	d10a      	bne.n	801017a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8010164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010168:	f383 8811 	msr	BASEPRI, r3
 801016c:	f3bf 8f6f 	isb	sy
 8010170:	f3bf 8f4f 	dsb	sy
 8010174:	623b      	str	r3, [r7, #32]
}
 8010176:	bf00      	nop
 8010178:	e7fe      	b.n	8010178 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801017a:	f002 fcc5 	bl	8012b08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801017e:	f3ef 8211 	mrs	r2, BASEPRI
 8010182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010186:	f383 8811 	msr	BASEPRI, r3
 801018a:	f3bf 8f6f 	isb	sy
 801018e:	f3bf 8f4f 	dsb	sy
 8010192:	61fa      	str	r2, [r7, #28]
 8010194:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010196:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010198:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801019a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801019c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801019e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101a2:	429a      	cmp	r2, r3
 80101a4:	d302      	bcc.n	80101ac <xQueueGenericSendFromISR+0xbc>
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	2b02      	cmp	r3, #2
 80101aa:	d12f      	bne.n	801020c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80101ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80101b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80101b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80101bc:	683a      	ldr	r2, [r7, #0]
 80101be:	68b9      	ldr	r1, [r7, #8]
 80101c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80101c2:	f000 fb64 	bl	801088e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80101c6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80101ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101ce:	d112      	bne.n	80101f6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80101d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d016      	beq.n	8010206 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80101d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101da:	3324      	adds	r3, #36	; 0x24
 80101dc:	4618      	mov	r0, r3
 80101de:	f001 f985 	bl	80114ec <xTaskRemoveFromEventList>
 80101e2:	4603      	mov	r3, r0
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d00e      	beq.n	8010206 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d00b      	beq.n	8010206 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2201      	movs	r2, #1
 80101f2:	601a      	str	r2, [r3, #0]
 80101f4:	e007      	b.n	8010206 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80101f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80101fa:	3301      	adds	r3, #1
 80101fc:	b2db      	uxtb	r3, r3
 80101fe:	b25a      	sxtb	r2, r3
 8010200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010206:	2301      	movs	r3, #1
 8010208:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801020a:	e001      	b.n	8010210 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801020c:	2300      	movs	r3, #0
 801020e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010212:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010214:	697b      	ldr	r3, [r7, #20]
 8010216:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801021a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801021c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801021e:	4618      	mov	r0, r3
 8010220:	3740      	adds	r7, #64	; 0x40
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}

08010226 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010226:	b580      	push	{r7, lr}
 8010228:	b08e      	sub	sp, #56	; 0x38
 801022a:	af00      	add	r7, sp, #0
 801022c:	6078      	str	r0, [r7, #4]
 801022e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010236:	2b00      	cmp	r3, #0
 8010238:	d10a      	bne.n	8010250 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801023a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801023e:	f383 8811 	msr	BASEPRI, r3
 8010242:	f3bf 8f6f 	isb	sy
 8010246:	f3bf 8f4f 	dsb	sy
 801024a:	623b      	str	r3, [r7, #32]
}
 801024c:	bf00      	nop
 801024e:	e7fe      	b.n	801024e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010254:	2b00      	cmp	r3, #0
 8010256:	d00a      	beq.n	801026e <xQueueGiveFromISR+0x48>
	__asm volatile
 8010258:	f04f 0350 	mov.w	r3, #80	; 0x50
 801025c:	f383 8811 	msr	BASEPRI, r3
 8010260:	f3bf 8f6f 	isb	sy
 8010264:	f3bf 8f4f 	dsb	sy
 8010268:	61fb      	str	r3, [r7, #28]
}
 801026a:	bf00      	nop
 801026c:	e7fe      	b.n	801026c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801026e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d103      	bne.n	801027e <xQueueGiveFromISR+0x58>
 8010276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010278:	689b      	ldr	r3, [r3, #8]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d101      	bne.n	8010282 <xQueueGiveFromISR+0x5c>
 801027e:	2301      	movs	r3, #1
 8010280:	e000      	b.n	8010284 <xQueueGiveFromISR+0x5e>
 8010282:	2300      	movs	r3, #0
 8010284:	2b00      	cmp	r3, #0
 8010286:	d10a      	bne.n	801029e <xQueueGiveFromISR+0x78>
	__asm volatile
 8010288:	f04f 0350 	mov.w	r3, #80	; 0x50
 801028c:	f383 8811 	msr	BASEPRI, r3
 8010290:	f3bf 8f6f 	isb	sy
 8010294:	f3bf 8f4f 	dsb	sy
 8010298:	61bb      	str	r3, [r7, #24]
}
 801029a:	bf00      	nop
 801029c:	e7fe      	b.n	801029c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801029e:	f002 fc33 	bl	8012b08 <vPortValidateInterruptPriority>
	__asm volatile
 80102a2:	f3ef 8211 	mrs	r2, BASEPRI
 80102a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102aa:	f383 8811 	msr	BASEPRI, r3
 80102ae:	f3bf 8f6f 	isb	sy
 80102b2:	f3bf 8f4f 	dsb	sy
 80102b6:	617a      	str	r2, [r7, #20]
 80102b8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80102ba:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80102bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80102be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102c2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80102c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80102ca:	429a      	cmp	r2, r3
 80102cc:	d22b      	bcs.n	8010326 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80102ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80102d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80102d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102da:	1c5a      	adds	r2, r3, #1
 80102dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102de:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80102e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80102e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102e8:	d112      	bne.n	8010310 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80102ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d016      	beq.n	8010320 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80102f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f4:	3324      	adds	r3, #36	; 0x24
 80102f6:	4618      	mov	r0, r3
 80102f8:	f001 f8f8 	bl	80114ec <xTaskRemoveFromEventList>
 80102fc:	4603      	mov	r3, r0
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d00e      	beq.n	8010320 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d00b      	beq.n	8010320 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	2201      	movs	r2, #1
 801030c:	601a      	str	r2, [r3, #0]
 801030e:	e007      	b.n	8010320 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010314:	3301      	adds	r3, #1
 8010316:	b2db      	uxtb	r3, r3
 8010318:	b25a      	sxtb	r2, r3
 801031a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801031c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010320:	2301      	movs	r3, #1
 8010322:	637b      	str	r3, [r7, #52]	; 0x34
 8010324:	e001      	b.n	801032a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010326:	2300      	movs	r3, #0
 8010328:	637b      	str	r3, [r7, #52]	; 0x34
 801032a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801032c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	f383 8811 	msr	BASEPRI, r3
}
 8010334:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010338:	4618      	mov	r0, r3
 801033a:	3738      	adds	r7, #56	; 0x38
 801033c:	46bd      	mov	sp, r7
 801033e:	bd80      	pop	{r7, pc}

08010340 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b08c      	sub	sp, #48	; 0x30
 8010344:	af00      	add	r7, sp, #0
 8010346:	60f8      	str	r0, [r7, #12]
 8010348:	60b9      	str	r1, [r7, #8]
 801034a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801034c:	2300      	movs	r3, #0
 801034e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010356:	2b00      	cmp	r3, #0
 8010358:	d10a      	bne.n	8010370 <xQueueReceive+0x30>
	__asm volatile
 801035a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801035e:	f383 8811 	msr	BASEPRI, r3
 8010362:	f3bf 8f6f 	isb	sy
 8010366:	f3bf 8f4f 	dsb	sy
 801036a:	623b      	str	r3, [r7, #32]
}
 801036c:	bf00      	nop
 801036e:	e7fe      	b.n	801036e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d103      	bne.n	801037e <xQueueReceive+0x3e>
 8010376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801037a:	2b00      	cmp	r3, #0
 801037c:	d101      	bne.n	8010382 <xQueueReceive+0x42>
 801037e:	2301      	movs	r3, #1
 8010380:	e000      	b.n	8010384 <xQueueReceive+0x44>
 8010382:	2300      	movs	r3, #0
 8010384:	2b00      	cmp	r3, #0
 8010386:	d10a      	bne.n	801039e <xQueueReceive+0x5e>
	__asm volatile
 8010388:	f04f 0350 	mov.w	r3, #80	; 0x50
 801038c:	f383 8811 	msr	BASEPRI, r3
 8010390:	f3bf 8f6f 	isb	sy
 8010394:	f3bf 8f4f 	dsb	sy
 8010398:	61fb      	str	r3, [r7, #28]
}
 801039a:	bf00      	nop
 801039c:	e7fe      	b.n	801039c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801039e:	f001 fa77 	bl	8011890 <xTaskGetSchedulerState>
 80103a2:	4603      	mov	r3, r0
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d102      	bne.n	80103ae <xQueueReceive+0x6e>
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d101      	bne.n	80103b2 <xQueueReceive+0x72>
 80103ae:	2301      	movs	r3, #1
 80103b0:	e000      	b.n	80103b4 <xQueueReceive+0x74>
 80103b2:	2300      	movs	r3, #0
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d10a      	bne.n	80103ce <xQueueReceive+0x8e>
	__asm volatile
 80103b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103bc:	f383 8811 	msr	BASEPRI, r3
 80103c0:	f3bf 8f6f 	isb	sy
 80103c4:	f3bf 8f4f 	dsb	sy
 80103c8:	61bb      	str	r3, [r7, #24]
}
 80103ca:	bf00      	nop
 80103cc:	e7fe      	b.n	80103cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80103ce:	f002 fab9 	bl	8012944 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80103d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80103d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d01f      	beq.n	801041e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80103de:	68b9      	ldr	r1, [r7, #8]
 80103e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80103e2:	f000 fabe 	bl	8010962 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80103e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103e8:	1e5a      	subs	r2, r3, #1
 80103ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80103ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103f0:	691b      	ldr	r3, [r3, #16]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d00f      	beq.n	8010416 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80103f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103f8:	3310      	adds	r3, #16
 80103fa:	4618      	mov	r0, r3
 80103fc:	f001 f876 	bl	80114ec <xTaskRemoveFromEventList>
 8010400:	4603      	mov	r3, r0
 8010402:	2b00      	cmp	r3, #0
 8010404:	d007      	beq.n	8010416 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010406:	4b3d      	ldr	r3, [pc, #244]	; (80104fc <xQueueReceive+0x1bc>)
 8010408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801040c:	601a      	str	r2, [r3, #0]
 801040e:	f3bf 8f4f 	dsb	sy
 8010412:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010416:	f002 fac5 	bl	80129a4 <vPortExitCritical>
				return pdPASS;
 801041a:	2301      	movs	r3, #1
 801041c:	e069      	b.n	80104f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d103      	bne.n	801042c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010424:	f002 fabe 	bl	80129a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010428:	2300      	movs	r3, #0
 801042a:	e062      	b.n	80104f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801042c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801042e:	2b00      	cmp	r3, #0
 8010430:	d106      	bne.n	8010440 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010432:	f107 0310 	add.w	r3, r7, #16
 8010436:	4618      	mov	r0, r3
 8010438:	f001 f8bc 	bl	80115b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801043c:	2301      	movs	r3, #1
 801043e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010440:	f002 fab0 	bl	80129a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010444:	f000 fe18 	bl	8011078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010448:	f002 fa7c 	bl	8012944 <vPortEnterCritical>
 801044c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801044e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010452:	b25b      	sxtb	r3, r3
 8010454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010458:	d103      	bne.n	8010462 <xQueueReceive+0x122>
 801045a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801045c:	2200      	movs	r2, #0
 801045e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010464:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010468:	b25b      	sxtb	r3, r3
 801046a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801046e:	d103      	bne.n	8010478 <xQueueReceive+0x138>
 8010470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010472:	2200      	movs	r2, #0
 8010474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010478:	f002 fa94 	bl	80129a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801047c:	1d3a      	adds	r2, r7, #4
 801047e:	f107 0310 	add.w	r3, r7, #16
 8010482:	4611      	mov	r1, r2
 8010484:	4618      	mov	r0, r3
 8010486:	f001 f8ab 	bl	80115e0 <xTaskCheckForTimeOut>
 801048a:	4603      	mov	r3, r0
 801048c:	2b00      	cmp	r3, #0
 801048e:	d123      	bne.n	80104d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010492:	f000 fade 	bl	8010a52 <prvIsQueueEmpty>
 8010496:	4603      	mov	r3, r0
 8010498:	2b00      	cmp	r3, #0
 801049a:	d017      	beq.n	80104cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801049c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801049e:	3324      	adds	r3, #36	; 0x24
 80104a0:	687a      	ldr	r2, [r7, #4]
 80104a2:	4611      	mov	r1, r2
 80104a4:	4618      	mov	r0, r3
 80104a6:	f000 ffd1 	bl	801144c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80104aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104ac:	f000 fa7f 	bl	80109ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80104b0:	f000 fdf0 	bl	8011094 <xTaskResumeAll>
 80104b4:	4603      	mov	r3, r0
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d189      	bne.n	80103ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80104ba:	4b10      	ldr	r3, [pc, #64]	; (80104fc <xQueueReceive+0x1bc>)
 80104bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104c0:	601a      	str	r2, [r3, #0]
 80104c2:	f3bf 8f4f 	dsb	sy
 80104c6:	f3bf 8f6f 	isb	sy
 80104ca:	e780      	b.n	80103ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80104cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104ce:	f000 fa6e 	bl	80109ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80104d2:	f000 fddf 	bl	8011094 <xTaskResumeAll>
 80104d6:	e77a      	b.n	80103ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80104d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104da:	f000 fa68 	bl	80109ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80104de:	f000 fdd9 	bl	8011094 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80104e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104e4:	f000 fab5 	bl	8010a52 <prvIsQueueEmpty>
 80104e8:	4603      	mov	r3, r0
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	f43f af6f 	beq.w	80103ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80104f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80104f2:	4618      	mov	r0, r3
 80104f4:	3730      	adds	r7, #48	; 0x30
 80104f6:	46bd      	mov	sp, r7
 80104f8:	bd80      	pop	{r7, pc}
 80104fa:	bf00      	nop
 80104fc:	e000ed04 	.word	0xe000ed04

08010500 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b08e      	sub	sp, #56	; 0x38
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
 8010508:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801050a:	2300      	movs	r3, #0
 801050c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010512:	2300      	movs	r3, #0
 8010514:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010518:	2b00      	cmp	r3, #0
 801051a:	d10a      	bne.n	8010532 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801051c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010520:	f383 8811 	msr	BASEPRI, r3
 8010524:	f3bf 8f6f 	isb	sy
 8010528:	f3bf 8f4f 	dsb	sy
 801052c:	623b      	str	r3, [r7, #32]
}
 801052e:	bf00      	nop
 8010530:	e7fe      	b.n	8010530 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010536:	2b00      	cmp	r3, #0
 8010538:	d00a      	beq.n	8010550 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801053a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801053e:	f383 8811 	msr	BASEPRI, r3
 8010542:	f3bf 8f6f 	isb	sy
 8010546:	f3bf 8f4f 	dsb	sy
 801054a:	61fb      	str	r3, [r7, #28]
}
 801054c:	bf00      	nop
 801054e:	e7fe      	b.n	801054e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010550:	f001 f99e 	bl	8011890 <xTaskGetSchedulerState>
 8010554:	4603      	mov	r3, r0
 8010556:	2b00      	cmp	r3, #0
 8010558:	d102      	bne.n	8010560 <xQueueSemaphoreTake+0x60>
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d101      	bne.n	8010564 <xQueueSemaphoreTake+0x64>
 8010560:	2301      	movs	r3, #1
 8010562:	e000      	b.n	8010566 <xQueueSemaphoreTake+0x66>
 8010564:	2300      	movs	r3, #0
 8010566:	2b00      	cmp	r3, #0
 8010568:	d10a      	bne.n	8010580 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801056a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801056e:	f383 8811 	msr	BASEPRI, r3
 8010572:	f3bf 8f6f 	isb	sy
 8010576:	f3bf 8f4f 	dsb	sy
 801057a:	61bb      	str	r3, [r7, #24]
}
 801057c:	bf00      	nop
 801057e:	e7fe      	b.n	801057e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010580:	f002 f9e0 	bl	8012944 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010588:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801058a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801058c:	2b00      	cmp	r3, #0
 801058e:	d024      	beq.n	80105da <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010592:	1e5a      	subs	r2, r3, #1
 8010594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010596:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d104      	bne.n	80105aa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80105a0:	f001 faec 	bl	8011b7c <pvTaskIncrementMutexHeldCount>
 80105a4:	4602      	mov	r2, r0
 80105a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105a8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80105aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ac:	691b      	ldr	r3, [r3, #16]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d00f      	beq.n	80105d2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80105b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105b4:	3310      	adds	r3, #16
 80105b6:	4618      	mov	r0, r3
 80105b8:	f000 ff98 	bl	80114ec <xTaskRemoveFromEventList>
 80105bc:	4603      	mov	r3, r0
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d007      	beq.n	80105d2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80105c2:	4b54      	ldr	r3, [pc, #336]	; (8010714 <xQueueSemaphoreTake+0x214>)
 80105c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105c8:	601a      	str	r2, [r3, #0]
 80105ca:	f3bf 8f4f 	dsb	sy
 80105ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80105d2:	f002 f9e7 	bl	80129a4 <vPortExitCritical>
				return pdPASS;
 80105d6:	2301      	movs	r3, #1
 80105d8:	e097      	b.n	801070a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d111      	bne.n	8010604 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80105e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d00a      	beq.n	80105fc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80105e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ea:	f383 8811 	msr	BASEPRI, r3
 80105ee:	f3bf 8f6f 	isb	sy
 80105f2:	f3bf 8f4f 	dsb	sy
 80105f6:	617b      	str	r3, [r7, #20]
}
 80105f8:	bf00      	nop
 80105fa:	e7fe      	b.n	80105fa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80105fc:	f002 f9d2 	bl	80129a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010600:	2300      	movs	r3, #0
 8010602:	e082      	b.n	801070a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010606:	2b00      	cmp	r3, #0
 8010608:	d106      	bne.n	8010618 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801060a:	f107 030c 	add.w	r3, r7, #12
 801060e:	4618      	mov	r0, r3
 8010610:	f000 ffd0 	bl	80115b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010614:	2301      	movs	r3, #1
 8010616:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010618:	f002 f9c4 	bl	80129a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801061c:	f000 fd2c 	bl	8011078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010620:	f002 f990 	bl	8012944 <vPortEnterCritical>
 8010624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010626:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801062a:	b25b      	sxtb	r3, r3
 801062c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010630:	d103      	bne.n	801063a <xQueueSemaphoreTake+0x13a>
 8010632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010634:	2200      	movs	r2, #0
 8010636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801063a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801063c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010640:	b25b      	sxtb	r3, r3
 8010642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010646:	d103      	bne.n	8010650 <xQueueSemaphoreTake+0x150>
 8010648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801064a:	2200      	movs	r2, #0
 801064c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010650:	f002 f9a8 	bl	80129a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010654:	463a      	mov	r2, r7
 8010656:	f107 030c 	add.w	r3, r7, #12
 801065a:	4611      	mov	r1, r2
 801065c:	4618      	mov	r0, r3
 801065e:	f000 ffbf 	bl	80115e0 <xTaskCheckForTimeOut>
 8010662:	4603      	mov	r3, r0
 8010664:	2b00      	cmp	r3, #0
 8010666:	d132      	bne.n	80106ce <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010668:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801066a:	f000 f9f2 	bl	8010a52 <prvIsQueueEmpty>
 801066e:	4603      	mov	r3, r0
 8010670:	2b00      	cmp	r3, #0
 8010672:	d026      	beq.n	80106c2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d109      	bne.n	8010690 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801067c:	f002 f962 	bl	8012944 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010682:	689b      	ldr	r3, [r3, #8]
 8010684:	4618      	mov	r0, r3
 8010686:	f001 f921 	bl	80118cc <xTaskPriorityInherit>
 801068a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801068c:	f002 f98a 	bl	80129a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010692:	3324      	adds	r3, #36	; 0x24
 8010694:	683a      	ldr	r2, [r7, #0]
 8010696:	4611      	mov	r1, r2
 8010698:	4618      	mov	r0, r3
 801069a:	f000 fed7 	bl	801144c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801069e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106a0:	f000 f985 	bl	80109ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80106a4:	f000 fcf6 	bl	8011094 <xTaskResumeAll>
 80106a8:	4603      	mov	r3, r0
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	f47f af68 	bne.w	8010580 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80106b0:	4b18      	ldr	r3, [pc, #96]	; (8010714 <xQueueSemaphoreTake+0x214>)
 80106b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106b6:	601a      	str	r2, [r3, #0]
 80106b8:	f3bf 8f4f 	dsb	sy
 80106bc:	f3bf 8f6f 	isb	sy
 80106c0:	e75e      	b.n	8010580 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80106c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106c4:	f000 f973 	bl	80109ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80106c8:	f000 fce4 	bl	8011094 <xTaskResumeAll>
 80106cc:	e758      	b.n	8010580 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80106ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106d0:	f000 f96d 	bl	80109ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80106d4:	f000 fcde 	bl	8011094 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80106d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106da:	f000 f9ba 	bl	8010a52 <prvIsQueueEmpty>
 80106de:	4603      	mov	r3, r0
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	f43f af4d 	beq.w	8010580 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80106e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d00d      	beq.n	8010708 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80106ec:	f002 f92a 	bl	8012944 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80106f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106f2:	f000 f8b4 	bl	801085e <prvGetDisinheritPriorityAfterTimeout>
 80106f6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80106f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106fa:	689b      	ldr	r3, [r3, #8]
 80106fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80106fe:	4618      	mov	r0, r3
 8010700:	f001 f9ba 	bl	8011a78 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010704:	f002 f94e 	bl	80129a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010708:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801070a:	4618      	mov	r0, r3
 801070c:	3738      	adds	r7, #56	; 0x38
 801070e:	46bd      	mov	sp, r7
 8010710:	bd80      	pop	{r7, pc}
 8010712:	bf00      	nop
 8010714:	e000ed04 	.word	0xe000ed04

08010718 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b08e      	sub	sp, #56	; 0x38
 801071c:	af00      	add	r7, sp, #0
 801071e:	60f8      	str	r0, [r7, #12]
 8010720:	60b9      	str	r1, [r7, #8]
 8010722:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801072a:	2b00      	cmp	r3, #0
 801072c:	d10a      	bne.n	8010744 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010732:	f383 8811 	msr	BASEPRI, r3
 8010736:	f3bf 8f6f 	isb	sy
 801073a:	f3bf 8f4f 	dsb	sy
 801073e:	623b      	str	r3, [r7, #32]
}
 8010740:	bf00      	nop
 8010742:	e7fe      	b.n	8010742 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010744:	68bb      	ldr	r3, [r7, #8]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d103      	bne.n	8010752 <xQueueReceiveFromISR+0x3a>
 801074a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801074e:	2b00      	cmp	r3, #0
 8010750:	d101      	bne.n	8010756 <xQueueReceiveFromISR+0x3e>
 8010752:	2301      	movs	r3, #1
 8010754:	e000      	b.n	8010758 <xQueueReceiveFromISR+0x40>
 8010756:	2300      	movs	r3, #0
 8010758:	2b00      	cmp	r3, #0
 801075a:	d10a      	bne.n	8010772 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 801075c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010760:	f383 8811 	msr	BASEPRI, r3
 8010764:	f3bf 8f6f 	isb	sy
 8010768:	f3bf 8f4f 	dsb	sy
 801076c:	61fb      	str	r3, [r7, #28]
}
 801076e:	bf00      	nop
 8010770:	e7fe      	b.n	8010770 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010772:	f002 f9c9 	bl	8012b08 <vPortValidateInterruptPriority>
	__asm volatile
 8010776:	f3ef 8211 	mrs	r2, BASEPRI
 801077a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801077e:	f383 8811 	msr	BASEPRI, r3
 8010782:	f3bf 8f6f 	isb	sy
 8010786:	f3bf 8f4f 	dsb	sy
 801078a:	61ba      	str	r2, [r7, #24]
 801078c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801078e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010790:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010796:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801079a:	2b00      	cmp	r3, #0
 801079c:	d02f      	beq.n	80107fe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801079e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80107a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80107a8:	68b9      	ldr	r1, [r7, #8]
 80107aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107ac:	f000 f8d9 	bl	8010962 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80107b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b2:	1e5a      	subs	r2, r3, #1
 80107b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80107b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80107bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107c0:	d112      	bne.n	80107e8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80107c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c4:	691b      	ldr	r3, [r3, #16]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d016      	beq.n	80107f8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80107ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107cc:	3310      	adds	r3, #16
 80107ce:	4618      	mov	r0, r3
 80107d0:	f000 fe8c 	bl	80114ec <xTaskRemoveFromEventList>
 80107d4:	4603      	mov	r3, r0
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d00e      	beq.n	80107f8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d00b      	beq.n	80107f8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	2201      	movs	r2, #1
 80107e4:	601a      	str	r2, [r3, #0]
 80107e6:	e007      	b.n	80107f8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80107e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80107ec:	3301      	adds	r3, #1
 80107ee:	b2db      	uxtb	r3, r3
 80107f0:	b25a      	sxtb	r2, r3
 80107f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80107f8:	2301      	movs	r3, #1
 80107fa:	637b      	str	r3, [r7, #52]	; 0x34
 80107fc:	e001      	b.n	8010802 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80107fe:	2300      	movs	r3, #0
 8010800:	637b      	str	r3, [r7, #52]	; 0x34
 8010802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010804:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010806:	693b      	ldr	r3, [r7, #16]
 8010808:	f383 8811 	msr	BASEPRI, r3
}
 801080c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801080e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010810:	4618      	mov	r0, r3
 8010812:	3738      	adds	r7, #56	; 0x38
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}

08010818 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b084      	sub	sp, #16
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d10a      	bne.n	8010840 <vQueueDelete+0x28>
	__asm volatile
 801082a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801082e:	f383 8811 	msr	BASEPRI, r3
 8010832:	f3bf 8f6f 	isb	sy
 8010836:	f3bf 8f4f 	dsb	sy
 801083a:	60bb      	str	r3, [r7, #8]
}
 801083c:	bf00      	nop
 801083e:	e7fe      	b.n	801083e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010840:	68f8      	ldr	r0, [r7, #12]
 8010842:	f000 f95f 	bl	8010b04 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801084c:	2b00      	cmp	r3, #0
 801084e:	d102      	bne.n	8010856 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8010850:	68f8      	ldr	r0, [r7, #12]
 8010852:	f002 fa65 	bl	8012d20 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010856:	bf00      	nop
 8010858:	3710      	adds	r7, #16
 801085a:	46bd      	mov	sp, r7
 801085c:	bd80      	pop	{r7, pc}

0801085e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801085e:	b480      	push	{r7}
 8010860:	b085      	sub	sp, #20
 8010862:	af00      	add	r7, sp, #0
 8010864:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801086a:	2b00      	cmp	r3, #0
 801086c:	d006      	beq.n	801087c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8010878:	60fb      	str	r3, [r7, #12]
 801087a:	e001      	b.n	8010880 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801087c:	2300      	movs	r3, #0
 801087e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010880:	68fb      	ldr	r3, [r7, #12]
	}
 8010882:	4618      	mov	r0, r3
 8010884:	3714      	adds	r7, #20
 8010886:	46bd      	mov	sp, r7
 8010888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088c:	4770      	bx	lr

0801088e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801088e:	b580      	push	{r7, lr}
 8010890:	b086      	sub	sp, #24
 8010892:	af00      	add	r7, sp, #0
 8010894:	60f8      	str	r0, [r7, #12]
 8010896:	60b9      	str	r1, [r7, #8]
 8010898:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801089a:	2300      	movs	r3, #0
 801089c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108a2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d10d      	bne.n	80108c8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d14d      	bne.n	8010950 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	689b      	ldr	r3, [r3, #8]
 80108b8:	4618      	mov	r0, r3
 80108ba:	f001 f86f 	bl	801199c <xTaskPriorityDisinherit>
 80108be:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	2200      	movs	r2, #0
 80108c4:	609a      	str	r2, [r3, #8]
 80108c6:	e043      	b.n	8010950 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d119      	bne.n	8010902 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	6858      	ldr	r0, [r3, #4]
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108d6:	461a      	mov	r2, r3
 80108d8:	68b9      	ldr	r1, [r7, #8]
 80108da:	f003 ff36 	bl	801474a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	685a      	ldr	r2, [r3, #4]
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108e6:	441a      	add	r2, r3
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	685a      	ldr	r2, [r3, #4]
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	689b      	ldr	r3, [r3, #8]
 80108f4:	429a      	cmp	r2, r3
 80108f6:	d32b      	bcc.n	8010950 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	681a      	ldr	r2, [r3, #0]
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	605a      	str	r2, [r3, #4]
 8010900:	e026      	b.n	8010950 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	68d8      	ldr	r0, [r3, #12]
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801090a:	461a      	mov	r2, r3
 801090c:	68b9      	ldr	r1, [r7, #8]
 801090e:	f003 ff1c 	bl	801474a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	68da      	ldr	r2, [r3, #12]
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801091a:	425b      	negs	r3, r3
 801091c:	441a      	add	r2, r3
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	68da      	ldr	r2, [r3, #12]
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	429a      	cmp	r2, r3
 801092c:	d207      	bcs.n	801093e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	689a      	ldr	r2, [r3, #8]
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010936:	425b      	negs	r3, r3
 8010938:	441a      	add	r2, r3
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	2b02      	cmp	r3, #2
 8010942:	d105      	bne.n	8010950 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010944:	693b      	ldr	r3, [r7, #16]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d002      	beq.n	8010950 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801094a:	693b      	ldr	r3, [r7, #16]
 801094c:	3b01      	subs	r3, #1
 801094e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010950:	693b      	ldr	r3, [r7, #16]
 8010952:	1c5a      	adds	r2, r3, #1
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010958:	697b      	ldr	r3, [r7, #20]
}
 801095a:	4618      	mov	r0, r3
 801095c:	3718      	adds	r7, #24
 801095e:	46bd      	mov	sp, r7
 8010960:	bd80      	pop	{r7, pc}

08010962 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010962:	b580      	push	{r7, lr}
 8010964:	b082      	sub	sp, #8
 8010966:	af00      	add	r7, sp, #0
 8010968:	6078      	str	r0, [r7, #4]
 801096a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010970:	2b00      	cmp	r3, #0
 8010972:	d018      	beq.n	80109a6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	68da      	ldr	r2, [r3, #12]
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801097c:	441a      	add	r2, r3
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	68da      	ldr	r2, [r3, #12]
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	689b      	ldr	r3, [r3, #8]
 801098a:	429a      	cmp	r2, r3
 801098c:	d303      	bcc.n	8010996 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681a      	ldr	r2, [r3, #0]
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	68d9      	ldr	r1, [r3, #12]
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801099e:	461a      	mov	r2, r3
 80109a0:	6838      	ldr	r0, [r7, #0]
 80109a2:	f003 fed2 	bl	801474a <memcpy>
	}
}
 80109a6:	bf00      	nop
 80109a8:	3708      	adds	r7, #8
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}

080109ae <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80109ae:	b580      	push	{r7, lr}
 80109b0:	b084      	sub	sp, #16
 80109b2:	af00      	add	r7, sp, #0
 80109b4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80109b6:	f001 ffc5 	bl	8012944 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80109c0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80109c2:	e011      	b.n	80109e8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d012      	beq.n	80109f2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	3324      	adds	r3, #36	; 0x24
 80109d0:	4618      	mov	r0, r3
 80109d2:	f000 fd8b 	bl	80114ec <xTaskRemoveFromEventList>
 80109d6:	4603      	mov	r3, r0
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d001      	beq.n	80109e0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80109dc:	f000 fe62 	bl	80116a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80109e0:	7bfb      	ldrb	r3, [r7, #15]
 80109e2:	3b01      	subs	r3, #1
 80109e4:	b2db      	uxtb	r3, r3
 80109e6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80109e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	dce9      	bgt.n	80109c4 <prvUnlockQueue+0x16>
 80109f0:	e000      	b.n	80109f4 <prvUnlockQueue+0x46>
					break;
 80109f2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	22ff      	movs	r2, #255	; 0xff
 80109f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80109fc:	f001 ffd2 	bl	80129a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010a00:	f001 ffa0 	bl	8012944 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a0a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010a0c:	e011      	b.n	8010a32 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	691b      	ldr	r3, [r3, #16]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d012      	beq.n	8010a3c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	3310      	adds	r3, #16
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f000 fd66 	bl	80114ec <xTaskRemoveFromEventList>
 8010a20:	4603      	mov	r3, r0
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d001      	beq.n	8010a2a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010a26:	f000 fe3d 	bl	80116a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010a2a:	7bbb      	ldrb	r3, [r7, #14]
 8010a2c:	3b01      	subs	r3, #1
 8010a2e:	b2db      	uxtb	r3, r3
 8010a30:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010a32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	dce9      	bgt.n	8010a0e <prvUnlockQueue+0x60>
 8010a3a:	e000      	b.n	8010a3e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010a3c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	22ff      	movs	r2, #255	; 0xff
 8010a42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010a46:	f001 ffad 	bl	80129a4 <vPortExitCritical>
}
 8010a4a:	bf00      	nop
 8010a4c:	3710      	adds	r7, #16
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd80      	pop	{r7, pc}

08010a52 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010a52:	b580      	push	{r7, lr}
 8010a54:	b084      	sub	sp, #16
 8010a56:	af00      	add	r7, sp, #0
 8010a58:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010a5a:	f001 ff73 	bl	8012944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d102      	bne.n	8010a6c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010a66:	2301      	movs	r3, #1
 8010a68:	60fb      	str	r3, [r7, #12]
 8010a6a:	e001      	b.n	8010a70 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010a70:	f001 ff98 	bl	80129a4 <vPortExitCritical>

	return xReturn;
 8010a74:	68fb      	ldr	r3, [r7, #12]
}
 8010a76:	4618      	mov	r0, r3
 8010a78:	3710      	adds	r7, #16
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bd80      	pop	{r7, pc}

08010a7e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010a7e:	b580      	push	{r7, lr}
 8010a80:	b084      	sub	sp, #16
 8010a82:	af00      	add	r7, sp, #0
 8010a84:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010a86:	f001 ff5d 	bl	8012944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a92:	429a      	cmp	r2, r3
 8010a94:	d102      	bne.n	8010a9c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010a96:	2301      	movs	r3, #1
 8010a98:	60fb      	str	r3, [r7, #12]
 8010a9a:	e001      	b.n	8010aa0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010aa0:	f001 ff80 	bl	80129a4 <vPortExitCritical>

	return xReturn;
 8010aa4:	68fb      	ldr	r3, [r7, #12]
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3710      	adds	r7, #16
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}
	...

08010ab0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010ab0:	b480      	push	{r7}
 8010ab2:	b085      	sub	sp, #20
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
 8010ab8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010aba:	2300      	movs	r3, #0
 8010abc:	60fb      	str	r3, [r7, #12]
 8010abe:	e014      	b.n	8010aea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010ac0:	4a0f      	ldr	r2, [pc, #60]	; (8010b00 <vQueueAddToRegistry+0x50>)
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d10b      	bne.n	8010ae4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010acc:	490c      	ldr	r1, [pc, #48]	; (8010b00 <vQueueAddToRegistry+0x50>)
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	683a      	ldr	r2, [r7, #0]
 8010ad2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010ad6:	4a0a      	ldr	r2, [pc, #40]	; (8010b00 <vQueueAddToRegistry+0x50>)
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	00db      	lsls	r3, r3, #3
 8010adc:	4413      	add	r3, r2
 8010ade:	687a      	ldr	r2, [r7, #4]
 8010ae0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010ae2:	e006      	b.n	8010af2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	3301      	adds	r3, #1
 8010ae8:	60fb      	str	r3, [r7, #12]
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	2b07      	cmp	r3, #7
 8010aee:	d9e7      	bls.n	8010ac0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010af0:	bf00      	nop
 8010af2:	bf00      	nop
 8010af4:	3714      	adds	r7, #20
 8010af6:	46bd      	mov	sp, r7
 8010af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afc:	4770      	bx	lr
 8010afe:	bf00      	nop
 8010b00:	20001e9c 	.word	0x20001e9c

08010b04 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010b04:	b480      	push	{r7}
 8010b06:	b085      	sub	sp, #20
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	60fb      	str	r3, [r7, #12]
 8010b10:	e016      	b.n	8010b40 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010b12:	4a10      	ldr	r2, [pc, #64]	; (8010b54 <vQueueUnregisterQueue+0x50>)
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	00db      	lsls	r3, r3, #3
 8010b18:	4413      	add	r3, r2
 8010b1a:	685b      	ldr	r3, [r3, #4]
 8010b1c:	687a      	ldr	r2, [r7, #4]
 8010b1e:	429a      	cmp	r2, r3
 8010b20:	d10b      	bne.n	8010b3a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010b22:	4a0c      	ldr	r2, [pc, #48]	; (8010b54 <vQueueUnregisterQueue+0x50>)
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	2100      	movs	r1, #0
 8010b28:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010b2c:	4a09      	ldr	r2, [pc, #36]	; (8010b54 <vQueueUnregisterQueue+0x50>)
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	00db      	lsls	r3, r3, #3
 8010b32:	4413      	add	r3, r2
 8010b34:	2200      	movs	r2, #0
 8010b36:	605a      	str	r2, [r3, #4]
				break;
 8010b38:	e006      	b.n	8010b48 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	3301      	adds	r3, #1
 8010b3e:	60fb      	str	r3, [r7, #12]
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	2b07      	cmp	r3, #7
 8010b44:	d9e5      	bls.n	8010b12 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010b46:	bf00      	nop
 8010b48:	bf00      	nop
 8010b4a:	3714      	adds	r7, #20
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b52:	4770      	bx	lr
 8010b54:	20001e9c 	.word	0x20001e9c

08010b58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b086      	sub	sp, #24
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	60f8      	str	r0, [r7, #12]
 8010b60:	60b9      	str	r1, [r7, #8]
 8010b62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010b68:	f001 feec 	bl	8012944 <vPortEnterCritical>
 8010b6c:	697b      	ldr	r3, [r7, #20]
 8010b6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010b72:	b25b      	sxtb	r3, r3
 8010b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b78:	d103      	bne.n	8010b82 <vQueueWaitForMessageRestricted+0x2a>
 8010b7a:	697b      	ldr	r3, [r7, #20]
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010b82:	697b      	ldr	r3, [r7, #20]
 8010b84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010b88:	b25b      	sxtb	r3, r3
 8010b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b8e:	d103      	bne.n	8010b98 <vQueueWaitForMessageRestricted+0x40>
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	2200      	movs	r2, #0
 8010b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010b98:	f001 ff04 	bl	80129a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d106      	bne.n	8010bb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010ba4:	697b      	ldr	r3, [r7, #20]
 8010ba6:	3324      	adds	r3, #36	; 0x24
 8010ba8:	687a      	ldr	r2, [r7, #4]
 8010baa:	68b9      	ldr	r1, [r7, #8]
 8010bac:	4618      	mov	r0, r3
 8010bae:	f000 fc71 	bl	8011494 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010bb2:	6978      	ldr	r0, [r7, #20]
 8010bb4:	f7ff fefb 	bl	80109ae <prvUnlockQueue>
	}
 8010bb8:	bf00      	nop
 8010bba:	3718      	adds	r7, #24
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	bd80      	pop	{r7, pc}

08010bc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b08e      	sub	sp, #56	; 0x38
 8010bc4:	af04      	add	r7, sp, #16
 8010bc6:	60f8      	str	r0, [r7, #12]
 8010bc8:	60b9      	str	r1, [r7, #8]
 8010bca:	607a      	str	r2, [r7, #4]
 8010bcc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d10a      	bne.n	8010bea <xTaskCreateStatic+0x2a>
	__asm volatile
 8010bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bd8:	f383 8811 	msr	BASEPRI, r3
 8010bdc:	f3bf 8f6f 	isb	sy
 8010be0:	f3bf 8f4f 	dsb	sy
 8010be4:	623b      	str	r3, [r7, #32]
}
 8010be6:	bf00      	nop
 8010be8:	e7fe      	b.n	8010be8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d10a      	bne.n	8010c06 <xTaskCreateStatic+0x46>
	__asm volatile
 8010bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bf4:	f383 8811 	msr	BASEPRI, r3
 8010bf8:	f3bf 8f6f 	isb	sy
 8010bfc:	f3bf 8f4f 	dsb	sy
 8010c00:	61fb      	str	r3, [r7, #28]
}
 8010c02:	bf00      	nop
 8010c04:	e7fe      	b.n	8010c04 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010c06:	23a8      	movs	r3, #168	; 0xa8
 8010c08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010c0a:	693b      	ldr	r3, [r7, #16]
 8010c0c:	2ba8      	cmp	r3, #168	; 0xa8
 8010c0e:	d00a      	beq.n	8010c26 <xTaskCreateStatic+0x66>
	__asm volatile
 8010c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c14:	f383 8811 	msr	BASEPRI, r3
 8010c18:	f3bf 8f6f 	isb	sy
 8010c1c:	f3bf 8f4f 	dsb	sy
 8010c20:	61bb      	str	r3, [r7, #24]
}
 8010c22:	bf00      	nop
 8010c24:	e7fe      	b.n	8010c24 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010c26:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d01e      	beq.n	8010c6c <xTaskCreateStatic+0xac>
 8010c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d01b      	beq.n	8010c6c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c40:	2202      	movs	r2, #2
 8010c42:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010c46:	2300      	movs	r3, #0
 8010c48:	9303      	str	r3, [sp, #12]
 8010c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c4c:	9302      	str	r3, [sp, #8]
 8010c4e:	f107 0314 	add.w	r3, r7, #20
 8010c52:	9301      	str	r3, [sp, #4]
 8010c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c56:	9300      	str	r3, [sp, #0]
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	687a      	ldr	r2, [r7, #4]
 8010c5c:	68b9      	ldr	r1, [r7, #8]
 8010c5e:	68f8      	ldr	r0, [r7, #12]
 8010c60:	f000 f850 	bl	8010d04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010c64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c66:	f000 f8f3 	bl	8010e50 <prvAddNewTaskToReadyList>
 8010c6a:	e001      	b.n	8010c70 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010c70:	697b      	ldr	r3, [r7, #20]
	}
 8010c72:	4618      	mov	r0, r3
 8010c74:	3728      	adds	r7, #40	; 0x28
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}

08010c7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010c7a:	b580      	push	{r7, lr}
 8010c7c:	b08c      	sub	sp, #48	; 0x30
 8010c7e:	af04      	add	r7, sp, #16
 8010c80:	60f8      	str	r0, [r7, #12]
 8010c82:	60b9      	str	r1, [r7, #8]
 8010c84:	603b      	str	r3, [r7, #0]
 8010c86:	4613      	mov	r3, r2
 8010c88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010c8a:	88fb      	ldrh	r3, [r7, #6]
 8010c8c:	009b      	lsls	r3, r3, #2
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f001 ff7a 	bl	8012b88 <pvPortMalloc>
 8010c94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d00e      	beq.n	8010cba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010c9c:	20a8      	movs	r0, #168	; 0xa8
 8010c9e:	f001 ff73 	bl	8012b88 <pvPortMalloc>
 8010ca2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010ca4:	69fb      	ldr	r3, [r7, #28]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d003      	beq.n	8010cb2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010caa:	69fb      	ldr	r3, [r7, #28]
 8010cac:	697a      	ldr	r2, [r7, #20]
 8010cae:	631a      	str	r2, [r3, #48]	; 0x30
 8010cb0:	e005      	b.n	8010cbe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010cb2:	6978      	ldr	r0, [r7, #20]
 8010cb4:	f002 f834 	bl	8012d20 <vPortFree>
 8010cb8:	e001      	b.n	8010cbe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010cbe:	69fb      	ldr	r3, [r7, #28]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d017      	beq.n	8010cf4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010cc4:	69fb      	ldr	r3, [r7, #28]
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010ccc:	88fa      	ldrh	r2, [r7, #6]
 8010cce:	2300      	movs	r3, #0
 8010cd0:	9303      	str	r3, [sp, #12]
 8010cd2:	69fb      	ldr	r3, [r7, #28]
 8010cd4:	9302      	str	r3, [sp, #8]
 8010cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cd8:	9301      	str	r3, [sp, #4]
 8010cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cdc:	9300      	str	r3, [sp, #0]
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	68b9      	ldr	r1, [r7, #8]
 8010ce2:	68f8      	ldr	r0, [r7, #12]
 8010ce4:	f000 f80e 	bl	8010d04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010ce8:	69f8      	ldr	r0, [r7, #28]
 8010cea:	f000 f8b1 	bl	8010e50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010cee:	2301      	movs	r3, #1
 8010cf0:	61bb      	str	r3, [r7, #24]
 8010cf2:	e002      	b.n	8010cfa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8010cf8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010cfa:	69bb      	ldr	r3, [r7, #24]
	}
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	3720      	adds	r7, #32
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}

08010d04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b088      	sub	sp, #32
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	60f8      	str	r0, [r7, #12]
 8010d0c:	60b9      	str	r1, [r7, #8]
 8010d0e:	607a      	str	r2, [r7, #4]
 8010d10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	009b      	lsls	r3, r3, #2
 8010d1a:	461a      	mov	r2, r3
 8010d1c:	21a5      	movs	r1, #165	; 0xa5
 8010d1e:	f003 fc3f 	bl	80145a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010d2c:	3b01      	subs	r3, #1
 8010d2e:	009b      	lsls	r3, r3, #2
 8010d30:	4413      	add	r3, r2
 8010d32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010d34:	69bb      	ldr	r3, [r7, #24]
 8010d36:	f023 0307 	bic.w	r3, r3, #7
 8010d3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010d3c:	69bb      	ldr	r3, [r7, #24]
 8010d3e:	f003 0307 	and.w	r3, r3, #7
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d00a      	beq.n	8010d5c <prvInitialiseNewTask+0x58>
	__asm volatile
 8010d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d4a:	f383 8811 	msr	BASEPRI, r3
 8010d4e:	f3bf 8f6f 	isb	sy
 8010d52:	f3bf 8f4f 	dsb	sy
 8010d56:	617b      	str	r3, [r7, #20]
}
 8010d58:	bf00      	nop
 8010d5a:	e7fe      	b.n	8010d5a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010d5c:	68bb      	ldr	r3, [r7, #8]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d01f      	beq.n	8010da2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010d62:	2300      	movs	r3, #0
 8010d64:	61fb      	str	r3, [r7, #28]
 8010d66:	e012      	b.n	8010d8e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010d68:	68ba      	ldr	r2, [r7, #8]
 8010d6a:	69fb      	ldr	r3, [r7, #28]
 8010d6c:	4413      	add	r3, r2
 8010d6e:	7819      	ldrb	r1, [r3, #0]
 8010d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d72:	69fb      	ldr	r3, [r7, #28]
 8010d74:	4413      	add	r3, r2
 8010d76:	3334      	adds	r3, #52	; 0x34
 8010d78:	460a      	mov	r2, r1
 8010d7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010d7c:	68ba      	ldr	r2, [r7, #8]
 8010d7e:	69fb      	ldr	r3, [r7, #28]
 8010d80:	4413      	add	r3, r2
 8010d82:	781b      	ldrb	r3, [r3, #0]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d006      	beq.n	8010d96 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010d88:	69fb      	ldr	r3, [r7, #28]
 8010d8a:	3301      	adds	r3, #1
 8010d8c:	61fb      	str	r3, [r7, #28]
 8010d8e:	69fb      	ldr	r3, [r7, #28]
 8010d90:	2b0f      	cmp	r3, #15
 8010d92:	d9e9      	bls.n	8010d68 <prvInitialiseNewTask+0x64>
 8010d94:	e000      	b.n	8010d98 <prvInitialiseNewTask+0x94>
			{
				break;
 8010d96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010da0:	e003      	b.n	8010daa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010da4:	2200      	movs	r2, #0
 8010da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dac:	2b37      	cmp	r3, #55	; 0x37
 8010dae:	d901      	bls.n	8010db4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010db0:	2337      	movs	r3, #55	; 0x37
 8010db2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010db8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010dbe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dc8:	3304      	adds	r3, #4
 8010dca:	4618      	mov	r0, r3
 8010dcc:	f7fe fda0 	bl	800f910 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dd2:	3318      	adds	r3, #24
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7fe fd9b 	bl	800f910 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010dde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010de2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010de8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010dee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010df2:	2200      	movs	r2, #0
 8010df4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e02:	3354      	adds	r3, #84	; 0x54
 8010e04:	224c      	movs	r2, #76	; 0x4c
 8010e06:	2100      	movs	r1, #0
 8010e08:	4618      	mov	r0, r3
 8010e0a:	f003 fbc9 	bl	80145a0 <memset>
 8010e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e10:	4a0c      	ldr	r2, [pc, #48]	; (8010e44 <prvInitialiseNewTask+0x140>)
 8010e12:	659a      	str	r2, [r3, #88]	; 0x58
 8010e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e16:	4a0c      	ldr	r2, [pc, #48]	; (8010e48 <prvInitialiseNewTask+0x144>)
 8010e18:	65da      	str	r2, [r3, #92]	; 0x5c
 8010e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e1c:	4a0b      	ldr	r2, [pc, #44]	; (8010e4c <prvInitialiseNewTask+0x148>)
 8010e1e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010e20:	683a      	ldr	r2, [r7, #0]
 8010e22:	68f9      	ldr	r1, [r7, #12]
 8010e24:	69b8      	ldr	r0, [r7, #24]
 8010e26:	f001 fc61 	bl	80126ec <pxPortInitialiseStack>
 8010e2a:	4602      	mov	r2, r0
 8010e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e2e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d002      	beq.n	8010e3c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e3a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010e3c:	bf00      	nop
 8010e3e:	3720      	adds	r7, #32
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}
 8010e44:	200031e0 	.word	0x200031e0
 8010e48:	20003248 	.word	0x20003248
 8010e4c:	200032b0 	.word	0x200032b0

08010e50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b082      	sub	sp, #8
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010e58:	f001 fd74 	bl	8012944 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010e5c:	4b2d      	ldr	r3, [pc, #180]	; (8010f14 <prvAddNewTaskToReadyList+0xc4>)
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	3301      	adds	r3, #1
 8010e62:	4a2c      	ldr	r2, [pc, #176]	; (8010f14 <prvAddNewTaskToReadyList+0xc4>)
 8010e64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010e66:	4b2c      	ldr	r3, [pc, #176]	; (8010f18 <prvAddNewTaskToReadyList+0xc8>)
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d109      	bne.n	8010e82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010e6e:	4a2a      	ldr	r2, [pc, #168]	; (8010f18 <prvAddNewTaskToReadyList+0xc8>)
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010e74:	4b27      	ldr	r3, [pc, #156]	; (8010f14 <prvAddNewTaskToReadyList+0xc4>)
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	2b01      	cmp	r3, #1
 8010e7a:	d110      	bne.n	8010e9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010e7c:	f000 fc36 	bl	80116ec <prvInitialiseTaskLists>
 8010e80:	e00d      	b.n	8010e9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010e82:	4b26      	ldr	r3, [pc, #152]	; (8010f1c <prvAddNewTaskToReadyList+0xcc>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d109      	bne.n	8010e9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010e8a:	4b23      	ldr	r3, [pc, #140]	; (8010f18 <prvAddNewTaskToReadyList+0xc8>)
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e94:	429a      	cmp	r2, r3
 8010e96:	d802      	bhi.n	8010e9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010e98:	4a1f      	ldr	r2, [pc, #124]	; (8010f18 <prvAddNewTaskToReadyList+0xc8>)
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010e9e:	4b20      	ldr	r3, [pc, #128]	; (8010f20 <prvAddNewTaskToReadyList+0xd0>)
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	3301      	adds	r3, #1
 8010ea4:	4a1e      	ldr	r2, [pc, #120]	; (8010f20 <prvAddNewTaskToReadyList+0xd0>)
 8010ea6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010ea8:	4b1d      	ldr	r3, [pc, #116]	; (8010f20 <prvAddNewTaskToReadyList+0xd0>)
 8010eaa:	681a      	ldr	r2, [r3, #0]
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010eb4:	4b1b      	ldr	r3, [pc, #108]	; (8010f24 <prvAddNewTaskToReadyList+0xd4>)
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	429a      	cmp	r2, r3
 8010eba:	d903      	bls.n	8010ec4 <prvAddNewTaskToReadyList+0x74>
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ec0:	4a18      	ldr	r2, [pc, #96]	; (8010f24 <prvAddNewTaskToReadyList+0xd4>)
 8010ec2:	6013      	str	r3, [r2, #0]
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ec8:	4613      	mov	r3, r2
 8010eca:	009b      	lsls	r3, r3, #2
 8010ecc:	4413      	add	r3, r2
 8010ece:	009b      	lsls	r3, r3, #2
 8010ed0:	4a15      	ldr	r2, [pc, #84]	; (8010f28 <prvAddNewTaskToReadyList+0xd8>)
 8010ed2:	441a      	add	r2, r3
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	3304      	adds	r3, #4
 8010ed8:	4619      	mov	r1, r3
 8010eda:	4610      	mov	r0, r2
 8010edc:	f7fe fd25 	bl	800f92a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010ee0:	f001 fd60 	bl	80129a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010ee4:	4b0d      	ldr	r3, [pc, #52]	; (8010f1c <prvAddNewTaskToReadyList+0xcc>)
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d00e      	beq.n	8010f0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010eec:	4b0a      	ldr	r3, [pc, #40]	; (8010f18 <prvAddNewTaskToReadyList+0xc8>)
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	d207      	bcs.n	8010f0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010efa:	4b0c      	ldr	r3, [pc, #48]	; (8010f2c <prvAddNewTaskToReadyList+0xdc>)
 8010efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f00:	601a      	str	r2, [r3, #0]
 8010f02:	f3bf 8f4f 	dsb	sy
 8010f06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f0a:	bf00      	nop
 8010f0c:	3708      	adds	r7, #8
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	bd80      	pop	{r7, pc}
 8010f12:	bf00      	nop
 8010f14:	200023b0 	.word	0x200023b0
 8010f18:	20001edc 	.word	0x20001edc
 8010f1c:	200023bc 	.word	0x200023bc
 8010f20:	200023cc 	.word	0x200023cc
 8010f24:	200023b8 	.word	0x200023b8
 8010f28:	20001ee0 	.word	0x20001ee0
 8010f2c:	e000ed04 	.word	0xe000ed04

08010f30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b084      	sub	sp, #16
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010f38:	2300      	movs	r3, #0
 8010f3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d017      	beq.n	8010f72 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010f42:	4b13      	ldr	r3, [pc, #76]	; (8010f90 <vTaskDelay+0x60>)
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d00a      	beq.n	8010f60 <vTaskDelay+0x30>
	__asm volatile
 8010f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f4e:	f383 8811 	msr	BASEPRI, r3
 8010f52:	f3bf 8f6f 	isb	sy
 8010f56:	f3bf 8f4f 	dsb	sy
 8010f5a:	60bb      	str	r3, [r7, #8]
}
 8010f5c:	bf00      	nop
 8010f5e:	e7fe      	b.n	8010f5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010f60:	f000 f88a 	bl	8011078 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010f64:	2100      	movs	r1, #0
 8010f66:	6878      	ldr	r0, [r7, #4]
 8010f68:	f001 f81e 	bl	8011fa8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010f6c:	f000 f892 	bl	8011094 <xTaskResumeAll>
 8010f70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d107      	bne.n	8010f88 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010f78:	4b06      	ldr	r3, [pc, #24]	; (8010f94 <vTaskDelay+0x64>)
 8010f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f7e:	601a      	str	r2, [r3, #0]
 8010f80:	f3bf 8f4f 	dsb	sy
 8010f84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010f88:	bf00      	nop
 8010f8a:	3710      	adds	r7, #16
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}
 8010f90:	200023d8 	.word	0x200023d8
 8010f94:	e000ed04 	.word	0xe000ed04

08010f98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b08a      	sub	sp, #40	; 0x28
 8010f9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010fa6:	463a      	mov	r2, r7
 8010fa8:	1d39      	adds	r1, r7, #4
 8010faa:	f107 0308 	add.w	r3, r7, #8
 8010fae:	4618      	mov	r0, r3
 8010fb0:	f7fe fc5a 	bl	800f868 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010fb4:	6839      	ldr	r1, [r7, #0]
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	68ba      	ldr	r2, [r7, #8]
 8010fba:	9202      	str	r2, [sp, #8]
 8010fbc:	9301      	str	r3, [sp, #4]
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	9300      	str	r3, [sp, #0]
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	460a      	mov	r2, r1
 8010fc6:	4924      	ldr	r1, [pc, #144]	; (8011058 <vTaskStartScheduler+0xc0>)
 8010fc8:	4824      	ldr	r0, [pc, #144]	; (801105c <vTaskStartScheduler+0xc4>)
 8010fca:	f7ff fdf9 	bl	8010bc0 <xTaskCreateStatic>
 8010fce:	4603      	mov	r3, r0
 8010fd0:	4a23      	ldr	r2, [pc, #140]	; (8011060 <vTaskStartScheduler+0xc8>)
 8010fd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010fd4:	4b22      	ldr	r3, [pc, #136]	; (8011060 <vTaskStartScheduler+0xc8>)
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d002      	beq.n	8010fe2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010fdc:	2301      	movs	r3, #1
 8010fde:	617b      	str	r3, [r7, #20]
 8010fe0:	e001      	b.n	8010fe6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010fe6:	697b      	ldr	r3, [r7, #20]
 8010fe8:	2b01      	cmp	r3, #1
 8010fea:	d102      	bne.n	8010ff2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010fec:	f001 f830 	bl	8012050 <xTimerCreateTimerTask>
 8010ff0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010ff2:	697b      	ldr	r3, [r7, #20]
 8010ff4:	2b01      	cmp	r3, #1
 8010ff6:	d11b      	bne.n	8011030 <vTaskStartScheduler+0x98>
	__asm volatile
 8010ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ffc:	f383 8811 	msr	BASEPRI, r3
 8011000:	f3bf 8f6f 	isb	sy
 8011004:	f3bf 8f4f 	dsb	sy
 8011008:	613b      	str	r3, [r7, #16]
}
 801100a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801100c:	4b15      	ldr	r3, [pc, #84]	; (8011064 <vTaskStartScheduler+0xcc>)
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	3354      	adds	r3, #84	; 0x54
 8011012:	4a15      	ldr	r2, [pc, #84]	; (8011068 <vTaskStartScheduler+0xd0>)
 8011014:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011016:	4b15      	ldr	r3, [pc, #84]	; (801106c <vTaskStartScheduler+0xd4>)
 8011018:	f04f 32ff 	mov.w	r2, #4294967295
 801101c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801101e:	4b14      	ldr	r3, [pc, #80]	; (8011070 <vTaskStartScheduler+0xd8>)
 8011020:	2201      	movs	r2, #1
 8011022:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011024:	4b13      	ldr	r3, [pc, #76]	; (8011074 <vTaskStartScheduler+0xdc>)
 8011026:	2200      	movs	r2, #0
 8011028:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801102a:	f001 fbe9 	bl	8012800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801102e:	e00e      	b.n	801104e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011030:	697b      	ldr	r3, [r7, #20]
 8011032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011036:	d10a      	bne.n	801104e <vTaskStartScheduler+0xb6>
	__asm volatile
 8011038:	f04f 0350 	mov.w	r3, #80	; 0x50
 801103c:	f383 8811 	msr	BASEPRI, r3
 8011040:	f3bf 8f6f 	isb	sy
 8011044:	f3bf 8f4f 	dsb	sy
 8011048:	60fb      	str	r3, [r7, #12]
}
 801104a:	bf00      	nop
 801104c:	e7fe      	b.n	801104c <vTaskStartScheduler+0xb4>
}
 801104e:	bf00      	nop
 8011050:	3718      	adds	r7, #24
 8011052:	46bd      	mov	sp, r7
 8011054:	bd80      	pop	{r7, pc}
 8011056:	bf00      	nop
 8011058:	080181f4 	.word	0x080181f4
 801105c:	080116bd 	.word	0x080116bd
 8011060:	200023d4 	.word	0x200023d4
 8011064:	20001edc 	.word	0x20001edc
 8011068:	200001cc 	.word	0x200001cc
 801106c:	200023d0 	.word	0x200023d0
 8011070:	200023bc 	.word	0x200023bc
 8011074:	200023b4 	.word	0x200023b4

08011078 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011078:	b480      	push	{r7}
 801107a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801107c:	4b04      	ldr	r3, [pc, #16]	; (8011090 <vTaskSuspendAll+0x18>)
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	3301      	adds	r3, #1
 8011082:	4a03      	ldr	r2, [pc, #12]	; (8011090 <vTaskSuspendAll+0x18>)
 8011084:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011086:	bf00      	nop
 8011088:	46bd      	mov	sp, r7
 801108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108e:	4770      	bx	lr
 8011090:	200023d8 	.word	0x200023d8

08011094 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b084      	sub	sp, #16
 8011098:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801109a:	2300      	movs	r3, #0
 801109c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801109e:	2300      	movs	r3, #0
 80110a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80110a2:	4b42      	ldr	r3, [pc, #264]	; (80111ac <xTaskResumeAll+0x118>)
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d10a      	bne.n	80110c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80110aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ae:	f383 8811 	msr	BASEPRI, r3
 80110b2:	f3bf 8f6f 	isb	sy
 80110b6:	f3bf 8f4f 	dsb	sy
 80110ba:	603b      	str	r3, [r7, #0]
}
 80110bc:	bf00      	nop
 80110be:	e7fe      	b.n	80110be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80110c0:	f001 fc40 	bl	8012944 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80110c4:	4b39      	ldr	r3, [pc, #228]	; (80111ac <xTaskResumeAll+0x118>)
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	3b01      	subs	r3, #1
 80110ca:	4a38      	ldr	r2, [pc, #224]	; (80111ac <xTaskResumeAll+0x118>)
 80110cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80110ce:	4b37      	ldr	r3, [pc, #220]	; (80111ac <xTaskResumeAll+0x118>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d162      	bne.n	801119c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80110d6:	4b36      	ldr	r3, [pc, #216]	; (80111b0 <xTaskResumeAll+0x11c>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d05e      	beq.n	801119c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80110de:	e02f      	b.n	8011140 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80110e0:	4b34      	ldr	r3, [pc, #208]	; (80111b4 <xTaskResumeAll+0x120>)
 80110e2:	68db      	ldr	r3, [r3, #12]
 80110e4:	68db      	ldr	r3, [r3, #12]
 80110e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	3318      	adds	r3, #24
 80110ec:	4618      	mov	r0, r3
 80110ee:	f7fe fc79 	bl	800f9e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	3304      	adds	r3, #4
 80110f6:	4618      	mov	r0, r3
 80110f8:	f7fe fc74 	bl	800f9e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011100:	4b2d      	ldr	r3, [pc, #180]	; (80111b8 <xTaskResumeAll+0x124>)
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	429a      	cmp	r2, r3
 8011106:	d903      	bls.n	8011110 <xTaskResumeAll+0x7c>
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801110c:	4a2a      	ldr	r2, [pc, #168]	; (80111b8 <xTaskResumeAll+0x124>)
 801110e:	6013      	str	r3, [r2, #0]
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011114:	4613      	mov	r3, r2
 8011116:	009b      	lsls	r3, r3, #2
 8011118:	4413      	add	r3, r2
 801111a:	009b      	lsls	r3, r3, #2
 801111c:	4a27      	ldr	r2, [pc, #156]	; (80111bc <xTaskResumeAll+0x128>)
 801111e:	441a      	add	r2, r3
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	3304      	adds	r3, #4
 8011124:	4619      	mov	r1, r3
 8011126:	4610      	mov	r0, r2
 8011128:	f7fe fbff 	bl	800f92a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011130:	4b23      	ldr	r3, [pc, #140]	; (80111c0 <xTaskResumeAll+0x12c>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011136:	429a      	cmp	r2, r3
 8011138:	d302      	bcc.n	8011140 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801113a:	4b22      	ldr	r3, [pc, #136]	; (80111c4 <xTaskResumeAll+0x130>)
 801113c:	2201      	movs	r2, #1
 801113e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011140:	4b1c      	ldr	r3, [pc, #112]	; (80111b4 <xTaskResumeAll+0x120>)
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d1cb      	bne.n	80110e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d001      	beq.n	8011152 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801114e:	f000 fb6f 	bl	8011830 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011152:	4b1d      	ldr	r3, [pc, #116]	; (80111c8 <xTaskResumeAll+0x134>)
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d010      	beq.n	8011180 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801115e:	f000 f847 	bl	80111f0 <xTaskIncrementTick>
 8011162:	4603      	mov	r3, r0
 8011164:	2b00      	cmp	r3, #0
 8011166:	d002      	beq.n	801116e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011168:	4b16      	ldr	r3, [pc, #88]	; (80111c4 <xTaskResumeAll+0x130>)
 801116a:	2201      	movs	r2, #1
 801116c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	3b01      	subs	r3, #1
 8011172:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d1f1      	bne.n	801115e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801117a:	4b13      	ldr	r3, [pc, #76]	; (80111c8 <xTaskResumeAll+0x134>)
 801117c:	2200      	movs	r2, #0
 801117e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011180:	4b10      	ldr	r3, [pc, #64]	; (80111c4 <xTaskResumeAll+0x130>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d009      	beq.n	801119c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011188:	2301      	movs	r3, #1
 801118a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801118c:	4b0f      	ldr	r3, [pc, #60]	; (80111cc <xTaskResumeAll+0x138>)
 801118e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011192:	601a      	str	r2, [r3, #0]
 8011194:	f3bf 8f4f 	dsb	sy
 8011198:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801119c:	f001 fc02 	bl	80129a4 <vPortExitCritical>

	return xAlreadyYielded;
 80111a0:	68bb      	ldr	r3, [r7, #8]
}
 80111a2:	4618      	mov	r0, r3
 80111a4:	3710      	adds	r7, #16
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bd80      	pop	{r7, pc}
 80111aa:	bf00      	nop
 80111ac:	200023d8 	.word	0x200023d8
 80111b0:	200023b0 	.word	0x200023b0
 80111b4:	20002370 	.word	0x20002370
 80111b8:	200023b8 	.word	0x200023b8
 80111bc:	20001ee0 	.word	0x20001ee0
 80111c0:	20001edc 	.word	0x20001edc
 80111c4:	200023c4 	.word	0x200023c4
 80111c8:	200023c0 	.word	0x200023c0
 80111cc:	e000ed04 	.word	0xe000ed04

080111d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80111d0:	b480      	push	{r7}
 80111d2:	b083      	sub	sp, #12
 80111d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80111d6:	4b05      	ldr	r3, [pc, #20]	; (80111ec <xTaskGetTickCount+0x1c>)
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80111dc:	687b      	ldr	r3, [r7, #4]
}
 80111de:	4618      	mov	r0, r3
 80111e0:	370c      	adds	r7, #12
 80111e2:	46bd      	mov	sp, r7
 80111e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e8:	4770      	bx	lr
 80111ea:	bf00      	nop
 80111ec:	200023b4 	.word	0x200023b4

080111f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b086      	sub	sp, #24
 80111f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80111f6:	2300      	movs	r3, #0
 80111f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80111fa:	4b4f      	ldr	r3, [pc, #316]	; (8011338 <xTaskIncrementTick+0x148>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	f040 808f 	bne.w	8011322 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011204:	4b4d      	ldr	r3, [pc, #308]	; (801133c <xTaskIncrementTick+0x14c>)
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	3301      	adds	r3, #1
 801120a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801120c:	4a4b      	ldr	r2, [pc, #300]	; (801133c <xTaskIncrementTick+0x14c>)
 801120e:	693b      	ldr	r3, [r7, #16]
 8011210:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011212:	693b      	ldr	r3, [r7, #16]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d120      	bne.n	801125a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011218:	4b49      	ldr	r3, [pc, #292]	; (8011340 <xTaskIncrementTick+0x150>)
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d00a      	beq.n	8011238 <xTaskIncrementTick+0x48>
	__asm volatile
 8011222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011226:	f383 8811 	msr	BASEPRI, r3
 801122a:	f3bf 8f6f 	isb	sy
 801122e:	f3bf 8f4f 	dsb	sy
 8011232:	603b      	str	r3, [r7, #0]
}
 8011234:	bf00      	nop
 8011236:	e7fe      	b.n	8011236 <xTaskIncrementTick+0x46>
 8011238:	4b41      	ldr	r3, [pc, #260]	; (8011340 <xTaskIncrementTick+0x150>)
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	60fb      	str	r3, [r7, #12]
 801123e:	4b41      	ldr	r3, [pc, #260]	; (8011344 <xTaskIncrementTick+0x154>)
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	4a3f      	ldr	r2, [pc, #252]	; (8011340 <xTaskIncrementTick+0x150>)
 8011244:	6013      	str	r3, [r2, #0]
 8011246:	4a3f      	ldr	r2, [pc, #252]	; (8011344 <xTaskIncrementTick+0x154>)
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	6013      	str	r3, [r2, #0]
 801124c:	4b3e      	ldr	r3, [pc, #248]	; (8011348 <xTaskIncrementTick+0x158>)
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	3301      	adds	r3, #1
 8011252:	4a3d      	ldr	r2, [pc, #244]	; (8011348 <xTaskIncrementTick+0x158>)
 8011254:	6013      	str	r3, [r2, #0]
 8011256:	f000 faeb 	bl	8011830 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801125a:	4b3c      	ldr	r3, [pc, #240]	; (801134c <xTaskIncrementTick+0x15c>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	693a      	ldr	r2, [r7, #16]
 8011260:	429a      	cmp	r2, r3
 8011262:	d349      	bcc.n	80112f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011264:	4b36      	ldr	r3, [pc, #216]	; (8011340 <xTaskIncrementTick+0x150>)
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d104      	bne.n	8011278 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801126e:	4b37      	ldr	r3, [pc, #220]	; (801134c <xTaskIncrementTick+0x15c>)
 8011270:	f04f 32ff 	mov.w	r2, #4294967295
 8011274:	601a      	str	r2, [r3, #0]
					break;
 8011276:	e03f      	b.n	80112f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011278:	4b31      	ldr	r3, [pc, #196]	; (8011340 <xTaskIncrementTick+0x150>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	68db      	ldr	r3, [r3, #12]
 801127e:	68db      	ldr	r3, [r3, #12]
 8011280:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011282:	68bb      	ldr	r3, [r7, #8]
 8011284:	685b      	ldr	r3, [r3, #4]
 8011286:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011288:	693a      	ldr	r2, [r7, #16]
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	429a      	cmp	r2, r3
 801128e:	d203      	bcs.n	8011298 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011290:	4a2e      	ldr	r2, [pc, #184]	; (801134c <xTaskIncrementTick+0x15c>)
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011296:	e02f      	b.n	80112f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011298:	68bb      	ldr	r3, [r7, #8]
 801129a:	3304      	adds	r3, #4
 801129c:	4618      	mov	r0, r3
 801129e:	f7fe fba1 	bl	800f9e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80112a2:	68bb      	ldr	r3, [r7, #8]
 80112a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d004      	beq.n	80112b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80112aa:	68bb      	ldr	r3, [r7, #8]
 80112ac:	3318      	adds	r3, #24
 80112ae:	4618      	mov	r0, r3
 80112b0:	f7fe fb98 	bl	800f9e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80112b4:	68bb      	ldr	r3, [r7, #8]
 80112b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112b8:	4b25      	ldr	r3, [pc, #148]	; (8011350 <xTaskIncrementTick+0x160>)
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	429a      	cmp	r2, r3
 80112be:	d903      	bls.n	80112c8 <xTaskIncrementTick+0xd8>
 80112c0:	68bb      	ldr	r3, [r7, #8]
 80112c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112c4:	4a22      	ldr	r2, [pc, #136]	; (8011350 <xTaskIncrementTick+0x160>)
 80112c6:	6013      	str	r3, [r2, #0]
 80112c8:	68bb      	ldr	r3, [r7, #8]
 80112ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112cc:	4613      	mov	r3, r2
 80112ce:	009b      	lsls	r3, r3, #2
 80112d0:	4413      	add	r3, r2
 80112d2:	009b      	lsls	r3, r3, #2
 80112d4:	4a1f      	ldr	r2, [pc, #124]	; (8011354 <xTaskIncrementTick+0x164>)
 80112d6:	441a      	add	r2, r3
 80112d8:	68bb      	ldr	r3, [r7, #8]
 80112da:	3304      	adds	r3, #4
 80112dc:	4619      	mov	r1, r3
 80112de:	4610      	mov	r0, r2
 80112e0:	f7fe fb23 	bl	800f92a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112e8:	4b1b      	ldr	r3, [pc, #108]	; (8011358 <xTaskIncrementTick+0x168>)
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112ee:	429a      	cmp	r2, r3
 80112f0:	d3b8      	bcc.n	8011264 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80112f2:	2301      	movs	r3, #1
 80112f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80112f6:	e7b5      	b.n	8011264 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80112f8:	4b17      	ldr	r3, [pc, #92]	; (8011358 <xTaskIncrementTick+0x168>)
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112fe:	4915      	ldr	r1, [pc, #84]	; (8011354 <xTaskIncrementTick+0x164>)
 8011300:	4613      	mov	r3, r2
 8011302:	009b      	lsls	r3, r3, #2
 8011304:	4413      	add	r3, r2
 8011306:	009b      	lsls	r3, r3, #2
 8011308:	440b      	add	r3, r1
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	2b01      	cmp	r3, #1
 801130e:	d901      	bls.n	8011314 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011310:	2301      	movs	r3, #1
 8011312:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011314:	4b11      	ldr	r3, [pc, #68]	; (801135c <xTaskIncrementTick+0x16c>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d007      	beq.n	801132c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801131c:	2301      	movs	r3, #1
 801131e:	617b      	str	r3, [r7, #20]
 8011320:	e004      	b.n	801132c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011322:	4b0f      	ldr	r3, [pc, #60]	; (8011360 <xTaskIncrementTick+0x170>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	3301      	adds	r3, #1
 8011328:	4a0d      	ldr	r2, [pc, #52]	; (8011360 <xTaskIncrementTick+0x170>)
 801132a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801132c:	697b      	ldr	r3, [r7, #20]
}
 801132e:	4618      	mov	r0, r3
 8011330:	3718      	adds	r7, #24
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}
 8011336:	bf00      	nop
 8011338:	200023d8 	.word	0x200023d8
 801133c:	200023b4 	.word	0x200023b4
 8011340:	20002368 	.word	0x20002368
 8011344:	2000236c 	.word	0x2000236c
 8011348:	200023c8 	.word	0x200023c8
 801134c:	200023d0 	.word	0x200023d0
 8011350:	200023b8 	.word	0x200023b8
 8011354:	20001ee0 	.word	0x20001ee0
 8011358:	20001edc 	.word	0x20001edc
 801135c:	200023c4 	.word	0x200023c4
 8011360:	200023c0 	.word	0x200023c0

08011364 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b084      	sub	sp, #16
 8011368:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801136a:	4b32      	ldr	r3, [pc, #200]	; (8011434 <vTaskSwitchContext+0xd0>)
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d003      	beq.n	801137a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011372:	4b31      	ldr	r3, [pc, #196]	; (8011438 <vTaskSwitchContext+0xd4>)
 8011374:	2201      	movs	r2, #1
 8011376:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011378:	e057      	b.n	801142a <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 801137a:	4b2f      	ldr	r3, [pc, #188]	; (8011438 <vTaskSwitchContext+0xd4>)
 801137c:	2200      	movs	r2, #0
 801137e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8011380:	4b2e      	ldr	r3, [pc, #184]	; (801143c <vTaskSwitchContext+0xd8>)
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	681a      	ldr	r2, [r3, #0]
 8011386:	4b2d      	ldr	r3, [pc, #180]	; (801143c <vTaskSwitchContext+0xd8>)
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801138c:	429a      	cmp	r2, r3
 801138e:	d808      	bhi.n	80113a2 <vTaskSwitchContext+0x3e>
 8011390:	4b2a      	ldr	r3, [pc, #168]	; (801143c <vTaskSwitchContext+0xd8>)
 8011392:	681a      	ldr	r2, [r3, #0]
 8011394:	4b29      	ldr	r3, [pc, #164]	; (801143c <vTaskSwitchContext+0xd8>)
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	3334      	adds	r3, #52	; 0x34
 801139a:	4619      	mov	r1, r3
 801139c:	4610      	mov	r0, r2
 801139e:	f7f0 f813 	bl	80013c8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113a2:	4b27      	ldr	r3, [pc, #156]	; (8011440 <vTaskSwitchContext+0xdc>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	60fb      	str	r3, [r7, #12]
 80113a8:	e010      	b.n	80113cc <vTaskSwitchContext+0x68>
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d10a      	bne.n	80113c6 <vTaskSwitchContext+0x62>
	__asm volatile
 80113b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113b4:	f383 8811 	msr	BASEPRI, r3
 80113b8:	f3bf 8f6f 	isb	sy
 80113bc:	f3bf 8f4f 	dsb	sy
 80113c0:	607b      	str	r3, [r7, #4]
}
 80113c2:	bf00      	nop
 80113c4:	e7fe      	b.n	80113c4 <vTaskSwitchContext+0x60>
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	3b01      	subs	r3, #1
 80113ca:	60fb      	str	r3, [r7, #12]
 80113cc:	491d      	ldr	r1, [pc, #116]	; (8011444 <vTaskSwitchContext+0xe0>)
 80113ce:	68fa      	ldr	r2, [r7, #12]
 80113d0:	4613      	mov	r3, r2
 80113d2:	009b      	lsls	r3, r3, #2
 80113d4:	4413      	add	r3, r2
 80113d6:	009b      	lsls	r3, r3, #2
 80113d8:	440b      	add	r3, r1
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d0e4      	beq.n	80113aa <vTaskSwitchContext+0x46>
 80113e0:	68fa      	ldr	r2, [r7, #12]
 80113e2:	4613      	mov	r3, r2
 80113e4:	009b      	lsls	r3, r3, #2
 80113e6:	4413      	add	r3, r2
 80113e8:	009b      	lsls	r3, r3, #2
 80113ea:	4a16      	ldr	r2, [pc, #88]	; (8011444 <vTaskSwitchContext+0xe0>)
 80113ec:	4413      	add	r3, r2
 80113ee:	60bb      	str	r3, [r7, #8]
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	685b      	ldr	r3, [r3, #4]
 80113f4:	685a      	ldr	r2, [r3, #4]
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	605a      	str	r2, [r3, #4]
 80113fa:	68bb      	ldr	r3, [r7, #8]
 80113fc:	685a      	ldr	r2, [r3, #4]
 80113fe:	68bb      	ldr	r3, [r7, #8]
 8011400:	3308      	adds	r3, #8
 8011402:	429a      	cmp	r2, r3
 8011404:	d104      	bne.n	8011410 <vTaskSwitchContext+0xac>
 8011406:	68bb      	ldr	r3, [r7, #8]
 8011408:	685b      	ldr	r3, [r3, #4]
 801140a:	685a      	ldr	r2, [r3, #4]
 801140c:	68bb      	ldr	r3, [r7, #8]
 801140e:	605a      	str	r2, [r3, #4]
 8011410:	68bb      	ldr	r3, [r7, #8]
 8011412:	685b      	ldr	r3, [r3, #4]
 8011414:	68db      	ldr	r3, [r3, #12]
 8011416:	4a09      	ldr	r2, [pc, #36]	; (801143c <vTaskSwitchContext+0xd8>)
 8011418:	6013      	str	r3, [r2, #0]
 801141a:	4a09      	ldr	r2, [pc, #36]	; (8011440 <vTaskSwitchContext+0xdc>)
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011420:	4b06      	ldr	r3, [pc, #24]	; (801143c <vTaskSwitchContext+0xd8>)
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	3354      	adds	r3, #84	; 0x54
 8011426:	4a08      	ldr	r2, [pc, #32]	; (8011448 <vTaskSwitchContext+0xe4>)
 8011428:	6013      	str	r3, [r2, #0]
}
 801142a:	bf00      	nop
 801142c:	3710      	adds	r7, #16
 801142e:	46bd      	mov	sp, r7
 8011430:	bd80      	pop	{r7, pc}
 8011432:	bf00      	nop
 8011434:	200023d8 	.word	0x200023d8
 8011438:	200023c4 	.word	0x200023c4
 801143c:	20001edc 	.word	0x20001edc
 8011440:	200023b8 	.word	0x200023b8
 8011444:	20001ee0 	.word	0x20001ee0
 8011448:	200001cc 	.word	0x200001cc

0801144c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b084      	sub	sp, #16
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
 8011454:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d10a      	bne.n	8011472 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801145c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011460:	f383 8811 	msr	BASEPRI, r3
 8011464:	f3bf 8f6f 	isb	sy
 8011468:	f3bf 8f4f 	dsb	sy
 801146c:	60fb      	str	r3, [r7, #12]
}
 801146e:	bf00      	nop
 8011470:	e7fe      	b.n	8011470 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011472:	4b07      	ldr	r3, [pc, #28]	; (8011490 <vTaskPlaceOnEventList+0x44>)
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	3318      	adds	r3, #24
 8011478:	4619      	mov	r1, r3
 801147a:	6878      	ldr	r0, [r7, #4]
 801147c:	f7fe fa79 	bl	800f972 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011480:	2101      	movs	r1, #1
 8011482:	6838      	ldr	r0, [r7, #0]
 8011484:	f000 fd90 	bl	8011fa8 <prvAddCurrentTaskToDelayedList>
}
 8011488:	bf00      	nop
 801148a:	3710      	adds	r7, #16
 801148c:	46bd      	mov	sp, r7
 801148e:	bd80      	pop	{r7, pc}
 8011490:	20001edc 	.word	0x20001edc

08011494 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011494:	b580      	push	{r7, lr}
 8011496:	b086      	sub	sp, #24
 8011498:	af00      	add	r7, sp, #0
 801149a:	60f8      	str	r0, [r7, #12]
 801149c:	60b9      	str	r1, [r7, #8]
 801149e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d10a      	bne.n	80114bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80114a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114aa:	f383 8811 	msr	BASEPRI, r3
 80114ae:	f3bf 8f6f 	isb	sy
 80114b2:	f3bf 8f4f 	dsb	sy
 80114b6:	617b      	str	r3, [r7, #20]
}
 80114b8:	bf00      	nop
 80114ba:	e7fe      	b.n	80114ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80114bc:	4b0a      	ldr	r3, [pc, #40]	; (80114e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	3318      	adds	r3, #24
 80114c2:	4619      	mov	r1, r3
 80114c4:	68f8      	ldr	r0, [r7, #12]
 80114c6:	f7fe fa30 	bl	800f92a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d002      	beq.n	80114d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80114d0:	f04f 33ff 	mov.w	r3, #4294967295
 80114d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80114d6:	6879      	ldr	r1, [r7, #4]
 80114d8:	68b8      	ldr	r0, [r7, #8]
 80114da:	f000 fd65 	bl	8011fa8 <prvAddCurrentTaskToDelayedList>
	}
 80114de:	bf00      	nop
 80114e0:	3718      	adds	r7, #24
 80114e2:	46bd      	mov	sp, r7
 80114e4:	bd80      	pop	{r7, pc}
 80114e6:	bf00      	nop
 80114e8:	20001edc 	.word	0x20001edc

080114ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b086      	sub	sp, #24
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	68db      	ldr	r3, [r3, #12]
 80114f8:	68db      	ldr	r3, [r3, #12]
 80114fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80114fc:	693b      	ldr	r3, [r7, #16]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d10a      	bne.n	8011518 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011506:	f383 8811 	msr	BASEPRI, r3
 801150a:	f3bf 8f6f 	isb	sy
 801150e:	f3bf 8f4f 	dsb	sy
 8011512:	60fb      	str	r3, [r7, #12]
}
 8011514:	bf00      	nop
 8011516:	e7fe      	b.n	8011516 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011518:	693b      	ldr	r3, [r7, #16]
 801151a:	3318      	adds	r3, #24
 801151c:	4618      	mov	r0, r3
 801151e:	f7fe fa61 	bl	800f9e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011522:	4b1e      	ldr	r3, [pc, #120]	; (801159c <xTaskRemoveFromEventList+0xb0>)
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d11d      	bne.n	8011566 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801152a:	693b      	ldr	r3, [r7, #16]
 801152c:	3304      	adds	r3, #4
 801152e:	4618      	mov	r0, r3
 8011530:	f7fe fa58 	bl	800f9e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011534:	693b      	ldr	r3, [r7, #16]
 8011536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011538:	4b19      	ldr	r3, [pc, #100]	; (80115a0 <xTaskRemoveFromEventList+0xb4>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	429a      	cmp	r2, r3
 801153e:	d903      	bls.n	8011548 <xTaskRemoveFromEventList+0x5c>
 8011540:	693b      	ldr	r3, [r7, #16]
 8011542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011544:	4a16      	ldr	r2, [pc, #88]	; (80115a0 <xTaskRemoveFromEventList+0xb4>)
 8011546:	6013      	str	r3, [r2, #0]
 8011548:	693b      	ldr	r3, [r7, #16]
 801154a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801154c:	4613      	mov	r3, r2
 801154e:	009b      	lsls	r3, r3, #2
 8011550:	4413      	add	r3, r2
 8011552:	009b      	lsls	r3, r3, #2
 8011554:	4a13      	ldr	r2, [pc, #76]	; (80115a4 <xTaskRemoveFromEventList+0xb8>)
 8011556:	441a      	add	r2, r3
 8011558:	693b      	ldr	r3, [r7, #16]
 801155a:	3304      	adds	r3, #4
 801155c:	4619      	mov	r1, r3
 801155e:	4610      	mov	r0, r2
 8011560:	f7fe f9e3 	bl	800f92a <vListInsertEnd>
 8011564:	e005      	b.n	8011572 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011566:	693b      	ldr	r3, [r7, #16]
 8011568:	3318      	adds	r3, #24
 801156a:	4619      	mov	r1, r3
 801156c:	480e      	ldr	r0, [pc, #56]	; (80115a8 <xTaskRemoveFromEventList+0xbc>)
 801156e:	f7fe f9dc 	bl	800f92a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011572:	693b      	ldr	r3, [r7, #16]
 8011574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011576:	4b0d      	ldr	r3, [pc, #52]	; (80115ac <xTaskRemoveFromEventList+0xc0>)
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801157c:	429a      	cmp	r2, r3
 801157e:	d905      	bls.n	801158c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011580:	2301      	movs	r3, #1
 8011582:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011584:	4b0a      	ldr	r3, [pc, #40]	; (80115b0 <xTaskRemoveFromEventList+0xc4>)
 8011586:	2201      	movs	r2, #1
 8011588:	601a      	str	r2, [r3, #0]
 801158a:	e001      	b.n	8011590 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801158c:	2300      	movs	r3, #0
 801158e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011590:	697b      	ldr	r3, [r7, #20]
}
 8011592:	4618      	mov	r0, r3
 8011594:	3718      	adds	r7, #24
 8011596:	46bd      	mov	sp, r7
 8011598:	bd80      	pop	{r7, pc}
 801159a:	bf00      	nop
 801159c:	200023d8 	.word	0x200023d8
 80115a0:	200023b8 	.word	0x200023b8
 80115a4:	20001ee0 	.word	0x20001ee0
 80115a8:	20002370 	.word	0x20002370
 80115ac:	20001edc 	.word	0x20001edc
 80115b0:	200023c4 	.word	0x200023c4

080115b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80115b4:	b480      	push	{r7}
 80115b6:	b083      	sub	sp, #12
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80115bc:	4b06      	ldr	r3, [pc, #24]	; (80115d8 <vTaskInternalSetTimeOutState+0x24>)
 80115be:	681a      	ldr	r2, [r3, #0]
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80115c4:	4b05      	ldr	r3, [pc, #20]	; (80115dc <vTaskInternalSetTimeOutState+0x28>)
 80115c6:	681a      	ldr	r2, [r3, #0]
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	605a      	str	r2, [r3, #4]
}
 80115cc:	bf00      	nop
 80115ce:	370c      	adds	r7, #12
 80115d0:	46bd      	mov	sp, r7
 80115d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d6:	4770      	bx	lr
 80115d8:	200023c8 	.word	0x200023c8
 80115dc:	200023b4 	.word	0x200023b4

080115e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b088      	sub	sp, #32
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
 80115e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d10a      	bne.n	8011606 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80115f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115f4:	f383 8811 	msr	BASEPRI, r3
 80115f8:	f3bf 8f6f 	isb	sy
 80115fc:	f3bf 8f4f 	dsb	sy
 8011600:	613b      	str	r3, [r7, #16]
}
 8011602:	bf00      	nop
 8011604:	e7fe      	b.n	8011604 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011606:	683b      	ldr	r3, [r7, #0]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d10a      	bne.n	8011622 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801160c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011610:	f383 8811 	msr	BASEPRI, r3
 8011614:	f3bf 8f6f 	isb	sy
 8011618:	f3bf 8f4f 	dsb	sy
 801161c:	60fb      	str	r3, [r7, #12]
}
 801161e:	bf00      	nop
 8011620:	e7fe      	b.n	8011620 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011622:	f001 f98f 	bl	8012944 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011626:	4b1d      	ldr	r3, [pc, #116]	; (801169c <xTaskCheckForTimeOut+0xbc>)
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	685b      	ldr	r3, [r3, #4]
 8011630:	69ba      	ldr	r2, [r7, #24]
 8011632:	1ad3      	subs	r3, r2, r3
 8011634:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011636:	683b      	ldr	r3, [r7, #0]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801163e:	d102      	bne.n	8011646 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011640:	2300      	movs	r3, #0
 8011642:	61fb      	str	r3, [r7, #28]
 8011644:	e023      	b.n	801168e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	681a      	ldr	r2, [r3, #0]
 801164a:	4b15      	ldr	r3, [pc, #84]	; (80116a0 <xTaskCheckForTimeOut+0xc0>)
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	429a      	cmp	r2, r3
 8011650:	d007      	beq.n	8011662 <xTaskCheckForTimeOut+0x82>
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	685b      	ldr	r3, [r3, #4]
 8011656:	69ba      	ldr	r2, [r7, #24]
 8011658:	429a      	cmp	r2, r3
 801165a:	d302      	bcc.n	8011662 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801165c:	2301      	movs	r3, #1
 801165e:	61fb      	str	r3, [r7, #28]
 8011660:	e015      	b.n	801168e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011662:	683b      	ldr	r3, [r7, #0]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	697a      	ldr	r2, [r7, #20]
 8011668:	429a      	cmp	r2, r3
 801166a:	d20b      	bcs.n	8011684 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	681a      	ldr	r2, [r3, #0]
 8011670:	697b      	ldr	r3, [r7, #20]
 8011672:	1ad2      	subs	r2, r2, r3
 8011674:	683b      	ldr	r3, [r7, #0]
 8011676:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011678:	6878      	ldr	r0, [r7, #4]
 801167a:	f7ff ff9b 	bl	80115b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801167e:	2300      	movs	r3, #0
 8011680:	61fb      	str	r3, [r7, #28]
 8011682:	e004      	b.n	801168e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	2200      	movs	r2, #0
 8011688:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801168a:	2301      	movs	r3, #1
 801168c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801168e:	f001 f989 	bl	80129a4 <vPortExitCritical>

	return xReturn;
 8011692:	69fb      	ldr	r3, [r7, #28]
}
 8011694:	4618      	mov	r0, r3
 8011696:	3720      	adds	r7, #32
 8011698:	46bd      	mov	sp, r7
 801169a:	bd80      	pop	{r7, pc}
 801169c:	200023b4 	.word	0x200023b4
 80116a0:	200023c8 	.word	0x200023c8

080116a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80116a4:	b480      	push	{r7}
 80116a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80116a8:	4b03      	ldr	r3, [pc, #12]	; (80116b8 <vTaskMissedYield+0x14>)
 80116aa:	2201      	movs	r2, #1
 80116ac:	601a      	str	r2, [r3, #0]
}
 80116ae:	bf00      	nop
 80116b0:	46bd      	mov	sp, r7
 80116b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b6:	4770      	bx	lr
 80116b8:	200023c4 	.word	0x200023c4

080116bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b082      	sub	sp, #8
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80116c4:	f000 f852 	bl	801176c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80116c8:	4b06      	ldr	r3, [pc, #24]	; (80116e4 <prvIdleTask+0x28>)
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	2b01      	cmp	r3, #1
 80116ce:	d9f9      	bls.n	80116c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80116d0:	4b05      	ldr	r3, [pc, #20]	; (80116e8 <prvIdleTask+0x2c>)
 80116d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116d6:	601a      	str	r2, [r3, #0]
 80116d8:	f3bf 8f4f 	dsb	sy
 80116dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80116e0:	e7f0      	b.n	80116c4 <prvIdleTask+0x8>
 80116e2:	bf00      	nop
 80116e4:	20001ee0 	.word	0x20001ee0
 80116e8:	e000ed04 	.word	0xe000ed04

080116ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b082      	sub	sp, #8
 80116f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80116f2:	2300      	movs	r3, #0
 80116f4:	607b      	str	r3, [r7, #4]
 80116f6:	e00c      	b.n	8011712 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80116f8:	687a      	ldr	r2, [r7, #4]
 80116fa:	4613      	mov	r3, r2
 80116fc:	009b      	lsls	r3, r3, #2
 80116fe:	4413      	add	r3, r2
 8011700:	009b      	lsls	r3, r3, #2
 8011702:	4a12      	ldr	r2, [pc, #72]	; (801174c <prvInitialiseTaskLists+0x60>)
 8011704:	4413      	add	r3, r2
 8011706:	4618      	mov	r0, r3
 8011708:	f7fe f8e2 	bl	800f8d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	3301      	adds	r3, #1
 8011710:	607b      	str	r3, [r7, #4]
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	2b37      	cmp	r3, #55	; 0x37
 8011716:	d9ef      	bls.n	80116f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011718:	480d      	ldr	r0, [pc, #52]	; (8011750 <prvInitialiseTaskLists+0x64>)
 801171a:	f7fe f8d9 	bl	800f8d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801171e:	480d      	ldr	r0, [pc, #52]	; (8011754 <prvInitialiseTaskLists+0x68>)
 8011720:	f7fe f8d6 	bl	800f8d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011724:	480c      	ldr	r0, [pc, #48]	; (8011758 <prvInitialiseTaskLists+0x6c>)
 8011726:	f7fe f8d3 	bl	800f8d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801172a:	480c      	ldr	r0, [pc, #48]	; (801175c <prvInitialiseTaskLists+0x70>)
 801172c:	f7fe f8d0 	bl	800f8d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011730:	480b      	ldr	r0, [pc, #44]	; (8011760 <prvInitialiseTaskLists+0x74>)
 8011732:	f7fe f8cd 	bl	800f8d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011736:	4b0b      	ldr	r3, [pc, #44]	; (8011764 <prvInitialiseTaskLists+0x78>)
 8011738:	4a05      	ldr	r2, [pc, #20]	; (8011750 <prvInitialiseTaskLists+0x64>)
 801173a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801173c:	4b0a      	ldr	r3, [pc, #40]	; (8011768 <prvInitialiseTaskLists+0x7c>)
 801173e:	4a05      	ldr	r2, [pc, #20]	; (8011754 <prvInitialiseTaskLists+0x68>)
 8011740:	601a      	str	r2, [r3, #0]
}
 8011742:	bf00      	nop
 8011744:	3708      	adds	r7, #8
 8011746:	46bd      	mov	sp, r7
 8011748:	bd80      	pop	{r7, pc}
 801174a:	bf00      	nop
 801174c:	20001ee0 	.word	0x20001ee0
 8011750:	20002340 	.word	0x20002340
 8011754:	20002354 	.word	0x20002354
 8011758:	20002370 	.word	0x20002370
 801175c:	20002384 	.word	0x20002384
 8011760:	2000239c 	.word	0x2000239c
 8011764:	20002368 	.word	0x20002368
 8011768:	2000236c 	.word	0x2000236c

0801176c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801176c:	b580      	push	{r7, lr}
 801176e:	b082      	sub	sp, #8
 8011770:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011772:	e019      	b.n	80117a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011774:	f001 f8e6 	bl	8012944 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011778:	4b10      	ldr	r3, [pc, #64]	; (80117bc <prvCheckTasksWaitingTermination+0x50>)
 801177a:	68db      	ldr	r3, [r3, #12]
 801177c:	68db      	ldr	r3, [r3, #12]
 801177e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	3304      	adds	r3, #4
 8011784:	4618      	mov	r0, r3
 8011786:	f7fe f92d 	bl	800f9e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801178a:	4b0d      	ldr	r3, [pc, #52]	; (80117c0 <prvCheckTasksWaitingTermination+0x54>)
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	3b01      	subs	r3, #1
 8011790:	4a0b      	ldr	r2, [pc, #44]	; (80117c0 <prvCheckTasksWaitingTermination+0x54>)
 8011792:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011794:	4b0b      	ldr	r3, [pc, #44]	; (80117c4 <prvCheckTasksWaitingTermination+0x58>)
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	3b01      	subs	r3, #1
 801179a:	4a0a      	ldr	r2, [pc, #40]	; (80117c4 <prvCheckTasksWaitingTermination+0x58>)
 801179c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801179e:	f001 f901 	bl	80129a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80117a2:	6878      	ldr	r0, [r7, #4]
 80117a4:	f000 f810 	bl	80117c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80117a8:	4b06      	ldr	r3, [pc, #24]	; (80117c4 <prvCheckTasksWaitingTermination+0x58>)
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d1e1      	bne.n	8011774 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80117b0:	bf00      	nop
 80117b2:	bf00      	nop
 80117b4:	3708      	adds	r7, #8
 80117b6:	46bd      	mov	sp, r7
 80117b8:	bd80      	pop	{r7, pc}
 80117ba:	bf00      	nop
 80117bc:	20002384 	.word	0x20002384
 80117c0:	200023b0 	.word	0x200023b0
 80117c4:	20002398 	.word	0x20002398

080117c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b084      	sub	sp, #16
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	3354      	adds	r3, #84	; 0x54
 80117d4:	4618      	mov	r0, r3
 80117d6:	f002 feff 	bl	80145d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d108      	bne.n	80117f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117e8:	4618      	mov	r0, r3
 80117ea:	f001 fa99 	bl	8012d20 <vPortFree>
				vPortFree( pxTCB );
 80117ee:	6878      	ldr	r0, [r7, #4]
 80117f0:	f001 fa96 	bl	8012d20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80117f4:	e018      	b.n	8011828 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80117fc:	2b01      	cmp	r3, #1
 80117fe:	d103      	bne.n	8011808 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011800:	6878      	ldr	r0, [r7, #4]
 8011802:	f001 fa8d 	bl	8012d20 <vPortFree>
	}
 8011806:	e00f      	b.n	8011828 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 801180e:	2b02      	cmp	r3, #2
 8011810:	d00a      	beq.n	8011828 <prvDeleteTCB+0x60>
	__asm volatile
 8011812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011816:	f383 8811 	msr	BASEPRI, r3
 801181a:	f3bf 8f6f 	isb	sy
 801181e:	f3bf 8f4f 	dsb	sy
 8011822:	60fb      	str	r3, [r7, #12]
}
 8011824:	bf00      	nop
 8011826:	e7fe      	b.n	8011826 <prvDeleteTCB+0x5e>
	}
 8011828:	bf00      	nop
 801182a:	3710      	adds	r7, #16
 801182c:	46bd      	mov	sp, r7
 801182e:	bd80      	pop	{r7, pc}

08011830 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011830:	b480      	push	{r7}
 8011832:	b083      	sub	sp, #12
 8011834:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011836:	4b0c      	ldr	r3, [pc, #48]	; (8011868 <prvResetNextTaskUnblockTime+0x38>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d104      	bne.n	801184a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011840:	4b0a      	ldr	r3, [pc, #40]	; (801186c <prvResetNextTaskUnblockTime+0x3c>)
 8011842:	f04f 32ff 	mov.w	r2, #4294967295
 8011846:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011848:	e008      	b.n	801185c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801184a:	4b07      	ldr	r3, [pc, #28]	; (8011868 <prvResetNextTaskUnblockTime+0x38>)
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	68db      	ldr	r3, [r3, #12]
 8011850:	68db      	ldr	r3, [r3, #12]
 8011852:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	685b      	ldr	r3, [r3, #4]
 8011858:	4a04      	ldr	r2, [pc, #16]	; (801186c <prvResetNextTaskUnblockTime+0x3c>)
 801185a:	6013      	str	r3, [r2, #0]
}
 801185c:	bf00      	nop
 801185e:	370c      	adds	r7, #12
 8011860:	46bd      	mov	sp, r7
 8011862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011866:	4770      	bx	lr
 8011868:	20002368 	.word	0x20002368
 801186c:	200023d0 	.word	0x200023d0

08011870 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8011870:	b480      	push	{r7}
 8011872:	b083      	sub	sp, #12
 8011874:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8011876:	4b05      	ldr	r3, [pc, #20]	; (801188c <xTaskGetCurrentTaskHandle+0x1c>)
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	607b      	str	r3, [r7, #4]

		return xReturn;
 801187c:	687b      	ldr	r3, [r7, #4]
	}
 801187e:	4618      	mov	r0, r3
 8011880:	370c      	adds	r7, #12
 8011882:	46bd      	mov	sp, r7
 8011884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011888:	4770      	bx	lr
 801188a:	bf00      	nop
 801188c:	20001edc 	.word	0x20001edc

08011890 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011890:	b480      	push	{r7}
 8011892:	b083      	sub	sp, #12
 8011894:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011896:	4b0b      	ldr	r3, [pc, #44]	; (80118c4 <xTaskGetSchedulerState+0x34>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d102      	bne.n	80118a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801189e:	2301      	movs	r3, #1
 80118a0:	607b      	str	r3, [r7, #4]
 80118a2:	e008      	b.n	80118b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80118a4:	4b08      	ldr	r3, [pc, #32]	; (80118c8 <xTaskGetSchedulerState+0x38>)
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d102      	bne.n	80118b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80118ac:	2302      	movs	r3, #2
 80118ae:	607b      	str	r3, [r7, #4]
 80118b0:	e001      	b.n	80118b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80118b2:	2300      	movs	r3, #0
 80118b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80118b6:	687b      	ldr	r3, [r7, #4]
	}
 80118b8:	4618      	mov	r0, r3
 80118ba:	370c      	adds	r7, #12
 80118bc:	46bd      	mov	sp, r7
 80118be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c2:	4770      	bx	lr
 80118c4:	200023bc 	.word	0x200023bc
 80118c8:	200023d8 	.word	0x200023d8

080118cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b084      	sub	sp, #16
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80118d8:	2300      	movs	r3, #0
 80118da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d051      	beq.n	8011986 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118e6:	4b2a      	ldr	r3, [pc, #168]	; (8011990 <xTaskPriorityInherit+0xc4>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ec:	429a      	cmp	r2, r3
 80118ee:	d241      	bcs.n	8011974 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80118f0:	68bb      	ldr	r3, [r7, #8]
 80118f2:	699b      	ldr	r3, [r3, #24]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	db06      	blt.n	8011906 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80118f8:	4b25      	ldr	r3, [pc, #148]	; (8011990 <xTaskPriorityInherit+0xc4>)
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011902:	68bb      	ldr	r3, [r7, #8]
 8011904:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011906:	68bb      	ldr	r3, [r7, #8]
 8011908:	6959      	ldr	r1, [r3, #20]
 801190a:	68bb      	ldr	r3, [r7, #8]
 801190c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801190e:	4613      	mov	r3, r2
 8011910:	009b      	lsls	r3, r3, #2
 8011912:	4413      	add	r3, r2
 8011914:	009b      	lsls	r3, r3, #2
 8011916:	4a1f      	ldr	r2, [pc, #124]	; (8011994 <xTaskPriorityInherit+0xc8>)
 8011918:	4413      	add	r3, r2
 801191a:	4299      	cmp	r1, r3
 801191c:	d122      	bne.n	8011964 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801191e:	68bb      	ldr	r3, [r7, #8]
 8011920:	3304      	adds	r3, #4
 8011922:	4618      	mov	r0, r3
 8011924:	f7fe f85e 	bl	800f9e4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011928:	4b19      	ldr	r3, [pc, #100]	; (8011990 <xTaskPriorityInherit+0xc4>)
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011932:	68bb      	ldr	r3, [r7, #8]
 8011934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011936:	4b18      	ldr	r3, [pc, #96]	; (8011998 <xTaskPriorityInherit+0xcc>)
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	429a      	cmp	r2, r3
 801193c:	d903      	bls.n	8011946 <xTaskPriorityInherit+0x7a>
 801193e:	68bb      	ldr	r3, [r7, #8]
 8011940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011942:	4a15      	ldr	r2, [pc, #84]	; (8011998 <xTaskPriorityInherit+0xcc>)
 8011944:	6013      	str	r3, [r2, #0]
 8011946:	68bb      	ldr	r3, [r7, #8]
 8011948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801194a:	4613      	mov	r3, r2
 801194c:	009b      	lsls	r3, r3, #2
 801194e:	4413      	add	r3, r2
 8011950:	009b      	lsls	r3, r3, #2
 8011952:	4a10      	ldr	r2, [pc, #64]	; (8011994 <xTaskPriorityInherit+0xc8>)
 8011954:	441a      	add	r2, r3
 8011956:	68bb      	ldr	r3, [r7, #8]
 8011958:	3304      	adds	r3, #4
 801195a:	4619      	mov	r1, r3
 801195c:	4610      	mov	r0, r2
 801195e:	f7fd ffe4 	bl	800f92a <vListInsertEnd>
 8011962:	e004      	b.n	801196e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011964:	4b0a      	ldr	r3, [pc, #40]	; (8011990 <xTaskPriorityInherit+0xc4>)
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801196a:	68bb      	ldr	r3, [r7, #8]
 801196c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801196e:	2301      	movs	r3, #1
 8011970:	60fb      	str	r3, [r7, #12]
 8011972:	e008      	b.n	8011986 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011974:	68bb      	ldr	r3, [r7, #8]
 8011976:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011978:	4b05      	ldr	r3, [pc, #20]	; (8011990 <xTaskPriorityInherit+0xc4>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801197e:	429a      	cmp	r2, r3
 8011980:	d201      	bcs.n	8011986 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011982:	2301      	movs	r3, #1
 8011984:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011986:	68fb      	ldr	r3, [r7, #12]
	}
 8011988:	4618      	mov	r0, r3
 801198a:	3710      	adds	r7, #16
 801198c:	46bd      	mov	sp, r7
 801198e:	bd80      	pop	{r7, pc}
 8011990:	20001edc 	.word	0x20001edc
 8011994:	20001ee0 	.word	0x20001ee0
 8011998:	200023b8 	.word	0x200023b8

0801199c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801199c:	b580      	push	{r7, lr}
 801199e:	b086      	sub	sp, #24
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80119a8:	2300      	movs	r3, #0
 80119aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d056      	beq.n	8011a60 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80119b2:	4b2e      	ldr	r3, [pc, #184]	; (8011a6c <xTaskPriorityDisinherit+0xd0>)
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	693a      	ldr	r2, [r7, #16]
 80119b8:	429a      	cmp	r2, r3
 80119ba:	d00a      	beq.n	80119d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80119bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119c0:	f383 8811 	msr	BASEPRI, r3
 80119c4:	f3bf 8f6f 	isb	sy
 80119c8:	f3bf 8f4f 	dsb	sy
 80119cc:	60fb      	str	r3, [r7, #12]
}
 80119ce:	bf00      	nop
 80119d0:	e7fe      	b.n	80119d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80119d2:	693b      	ldr	r3, [r7, #16]
 80119d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d10a      	bne.n	80119f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80119da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119de:	f383 8811 	msr	BASEPRI, r3
 80119e2:	f3bf 8f6f 	isb	sy
 80119e6:	f3bf 8f4f 	dsb	sy
 80119ea:	60bb      	str	r3, [r7, #8]
}
 80119ec:	bf00      	nop
 80119ee:	e7fe      	b.n	80119ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80119f0:	693b      	ldr	r3, [r7, #16]
 80119f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119f4:	1e5a      	subs	r2, r3, #1
 80119f6:	693b      	ldr	r3, [r7, #16]
 80119f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119fe:	693b      	ldr	r3, [r7, #16]
 8011a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a02:	429a      	cmp	r2, r3
 8011a04:	d02c      	beq.n	8011a60 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011a06:	693b      	ldr	r3, [r7, #16]
 8011a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d128      	bne.n	8011a60 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011a0e:	693b      	ldr	r3, [r7, #16]
 8011a10:	3304      	adds	r3, #4
 8011a12:	4618      	mov	r0, r3
 8011a14:	f7fd ffe6 	bl	800f9e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011a18:	693b      	ldr	r3, [r7, #16]
 8011a1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011a1c:	693b      	ldr	r3, [r7, #16]
 8011a1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a20:	693b      	ldr	r3, [r7, #16]
 8011a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a24:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011a28:	693b      	ldr	r3, [r7, #16]
 8011a2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011a2c:	693b      	ldr	r3, [r7, #16]
 8011a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a30:	4b0f      	ldr	r3, [pc, #60]	; (8011a70 <xTaskPriorityDisinherit+0xd4>)
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	429a      	cmp	r2, r3
 8011a36:	d903      	bls.n	8011a40 <xTaskPriorityDisinherit+0xa4>
 8011a38:	693b      	ldr	r3, [r7, #16]
 8011a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a3c:	4a0c      	ldr	r2, [pc, #48]	; (8011a70 <xTaskPriorityDisinherit+0xd4>)
 8011a3e:	6013      	str	r3, [r2, #0]
 8011a40:	693b      	ldr	r3, [r7, #16]
 8011a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a44:	4613      	mov	r3, r2
 8011a46:	009b      	lsls	r3, r3, #2
 8011a48:	4413      	add	r3, r2
 8011a4a:	009b      	lsls	r3, r3, #2
 8011a4c:	4a09      	ldr	r2, [pc, #36]	; (8011a74 <xTaskPriorityDisinherit+0xd8>)
 8011a4e:	441a      	add	r2, r3
 8011a50:	693b      	ldr	r3, [r7, #16]
 8011a52:	3304      	adds	r3, #4
 8011a54:	4619      	mov	r1, r3
 8011a56:	4610      	mov	r0, r2
 8011a58:	f7fd ff67 	bl	800f92a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011a5c:	2301      	movs	r3, #1
 8011a5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011a60:	697b      	ldr	r3, [r7, #20]
	}
 8011a62:	4618      	mov	r0, r3
 8011a64:	3718      	adds	r7, #24
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}
 8011a6a:	bf00      	nop
 8011a6c:	20001edc 	.word	0x20001edc
 8011a70:	200023b8 	.word	0x200023b8
 8011a74:	20001ee0 	.word	0x20001ee0

08011a78 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b088      	sub	sp, #32
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
 8011a80:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011a86:	2301      	movs	r3, #1
 8011a88:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d06a      	beq.n	8011b66 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011a90:	69bb      	ldr	r3, [r7, #24]
 8011a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d10a      	bne.n	8011aae <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a9c:	f383 8811 	msr	BASEPRI, r3
 8011aa0:	f3bf 8f6f 	isb	sy
 8011aa4:	f3bf 8f4f 	dsb	sy
 8011aa8:	60fb      	str	r3, [r7, #12]
}
 8011aaa:	bf00      	nop
 8011aac:	e7fe      	b.n	8011aac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011aae:	69bb      	ldr	r3, [r7, #24]
 8011ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ab2:	683a      	ldr	r2, [r7, #0]
 8011ab4:	429a      	cmp	r2, r3
 8011ab6:	d902      	bls.n	8011abe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	61fb      	str	r3, [r7, #28]
 8011abc:	e002      	b.n	8011ac4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011abe:	69bb      	ldr	r3, [r7, #24]
 8011ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ac2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011ac4:	69bb      	ldr	r3, [r7, #24]
 8011ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ac8:	69fa      	ldr	r2, [r7, #28]
 8011aca:	429a      	cmp	r2, r3
 8011acc:	d04b      	beq.n	8011b66 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011ace:	69bb      	ldr	r3, [r7, #24]
 8011ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ad2:	697a      	ldr	r2, [r7, #20]
 8011ad4:	429a      	cmp	r2, r3
 8011ad6:	d146      	bne.n	8011b66 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011ad8:	4b25      	ldr	r3, [pc, #148]	; (8011b70 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	69ba      	ldr	r2, [r7, #24]
 8011ade:	429a      	cmp	r2, r3
 8011ae0:	d10a      	bne.n	8011af8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8011ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ae6:	f383 8811 	msr	BASEPRI, r3
 8011aea:	f3bf 8f6f 	isb	sy
 8011aee:	f3bf 8f4f 	dsb	sy
 8011af2:	60bb      	str	r3, [r7, #8]
}
 8011af4:	bf00      	nop
 8011af6:	e7fe      	b.n	8011af6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011af8:	69bb      	ldr	r3, [r7, #24]
 8011afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011afc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011afe:	69bb      	ldr	r3, [r7, #24]
 8011b00:	69fa      	ldr	r2, [r7, #28]
 8011b02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011b04:	69bb      	ldr	r3, [r7, #24]
 8011b06:	699b      	ldr	r3, [r3, #24]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	db04      	blt.n	8011b16 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b0c:	69fb      	ldr	r3, [r7, #28]
 8011b0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011b12:	69bb      	ldr	r3, [r7, #24]
 8011b14:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011b16:	69bb      	ldr	r3, [r7, #24]
 8011b18:	6959      	ldr	r1, [r3, #20]
 8011b1a:	693a      	ldr	r2, [r7, #16]
 8011b1c:	4613      	mov	r3, r2
 8011b1e:	009b      	lsls	r3, r3, #2
 8011b20:	4413      	add	r3, r2
 8011b22:	009b      	lsls	r3, r3, #2
 8011b24:	4a13      	ldr	r2, [pc, #76]	; (8011b74 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011b26:	4413      	add	r3, r2
 8011b28:	4299      	cmp	r1, r3
 8011b2a:	d11c      	bne.n	8011b66 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b2c:	69bb      	ldr	r3, [r7, #24]
 8011b2e:	3304      	adds	r3, #4
 8011b30:	4618      	mov	r0, r3
 8011b32:	f7fd ff57 	bl	800f9e4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011b36:	69bb      	ldr	r3, [r7, #24]
 8011b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b3a:	4b0f      	ldr	r3, [pc, #60]	; (8011b78 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	429a      	cmp	r2, r3
 8011b40:	d903      	bls.n	8011b4a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8011b42:	69bb      	ldr	r3, [r7, #24]
 8011b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b46:	4a0c      	ldr	r2, [pc, #48]	; (8011b78 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011b48:	6013      	str	r3, [r2, #0]
 8011b4a:	69bb      	ldr	r3, [r7, #24]
 8011b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b4e:	4613      	mov	r3, r2
 8011b50:	009b      	lsls	r3, r3, #2
 8011b52:	4413      	add	r3, r2
 8011b54:	009b      	lsls	r3, r3, #2
 8011b56:	4a07      	ldr	r2, [pc, #28]	; (8011b74 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011b58:	441a      	add	r2, r3
 8011b5a:	69bb      	ldr	r3, [r7, #24]
 8011b5c:	3304      	adds	r3, #4
 8011b5e:	4619      	mov	r1, r3
 8011b60:	4610      	mov	r0, r2
 8011b62:	f7fd fee2 	bl	800f92a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011b66:	bf00      	nop
 8011b68:	3720      	adds	r7, #32
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	bd80      	pop	{r7, pc}
 8011b6e:	bf00      	nop
 8011b70:	20001edc 	.word	0x20001edc
 8011b74:	20001ee0 	.word	0x20001ee0
 8011b78:	200023b8 	.word	0x200023b8

08011b7c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011b7c:	b480      	push	{r7}
 8011b7e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011b80:	4b07      	ldr	r3, [pc, #28]	; (8011ba0 <pvTaskIncrementMutexHeldCount+0x24>)
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d004      	beq.n	8011b92 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011b88:	4b05      	ldr	r3, [pc, #20]	; (8011ba0 <pvTaskIncrementMutexHeldCount+0x24>)
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011b8e:	3201      	adds	r2, #1
 8011b90:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8011b92:	4b03      	ldr	r3, [pc, #12]	; (8011ba0 <pvTaskIncrementMutexHeldCount+0x24>)
 8011b94:	681b      	ldr	r3, [r3, #0]
	}
 8011b96:	4618      	mov	r0, r3
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9e:	4770      	bx	lr
 8011ba0:	20001edc 	.word	0x20001edc

08011ba4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b086      	sub	sp, #24
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	60f8      	str	r0, [r7, #12]
 8011bac:	60b9      	str	r1, [r7, #8]
 8011bae:	607a      	str	r2, [r7, #4]
 8011bb0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8011bb2:	f000 fec7 	bl	8012944 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011bb6:	4b29      	ldr	r3, [pc, #164]	; (8011c5c <xTaskNotifyWait+0xb8>)
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8011bbe:	b2db      	uxtb	r3, r3
 8011bc0:	2b02      	cmp	r3, #2
 8011bc2:	d01c      	beq.n	8011bfe <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8011bc4:	4b25      	ldr	r3, [pc, #148]	; (8011c5c <xTaskNotifyWait+0xb8>)
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8011bcc:	68fa      	ldr	r2, [r7, #12]
 8011bce:	43d2      	mvns	r2, r2
 8011bd0:	400a      	ands	r2, r1
 8011bd2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8011bd6:	4b21      	ldr	r3, [pc, #132]	; (8011c5c <xTaskNotifyWait+0xb8>)
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	2201      	movs	r2, #1
 8011bdc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8011be0:	683b      	ldr	r3, [r7, #0]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d00b      	beq.n	8011bfe <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011be6:	2101      	movs	r1, #1
 8011be8:	6838      	ldr	r0, [r7, #0]
 8011bea:	f000 f9dd 	bl	8011fa8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8011bee:	4b1c      	ldr	r3, [pc, #112]	; (8011c60 <xTaskNotifyWait+0xbc>)
 8011bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bf4:	601a      	str	r2, [r3, #0]
 8011bf6:	f3bf 8f4f 	dsb	sy
 8011bfa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011bfe:	f000 fed1 	bl	80129a4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8011c02:	f000 fe9f 	bl	8012944 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d005      	beq.n	8011c18 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8011c0c:	4b13      	ldr	r3, [pc, #76]	; (8011c5c <xTaskNotifyWait+0xb8>)
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011c18:	4b10      	ldr	r3, [pc, #64]	; (8011c5c <xTaskNotifyWait+0xb8>)
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8011c20:	b2db      	uxtb	r3, r3
 8011c22:	2b02      	cmp	r3, #2
 8011c24:	d002      	beq.n	8011c2c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8011c26:	2300      	movs	r3, #0
 8011c28:	617b      	str	r3, [r7, #20]
 8011c2a:	e00a      	b.n	8011c42 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8011c2c:	4b0b      	ldr	r3, [pc, #44]	; (8011c5c <xTaskNotifyWait+0xb8>)
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8011c34:	68ba      	ldr	r2, [r7, #8]
 8011c36:	43d2      	mvns	r2, r2
 8011c38:	400a      	ands	r2, r1
 8011c3a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				xReturn = pdTRUE;
 8011c3e:	2301      	movs	r3, #1
 8011c40:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011c42:	4b06      	ldr	r3, [pc, #24]	; (8011c5c <xTaskNotifyWait+0xb8>)
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	2200      	movs	r2, #0
 8011c48:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		}
		taskEXIT_CRITICAL();
 8011c4c:	f000 feaa 	bl	80129a4 <vPortExitCritical>

		return xReturn;
 8011c50:	697b      	ldr	r3, [r7, #20]
	}
 8011c52:	4618      	mov	r0, r3
 8011c54:	3718      	adds	r7, #24
 8011c56:	46bd      	mov	sp, r7
 8011c58:	bd80      	pop	{r7, pc}
 8011c5a:	bf00      	nop
 8011c5c:	20001edc 	.word	0x20001edc
 8011c60:	e000ed04 	.word	0xe000ed04

08011c64 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b08a      	sub	sp, #40	; 0x28
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	60f8      	str	r0, [r7, #12]
 8011c6c:	60b9      	str	r1, [r7, #8]
 8011c6e:	603b      	str	r3, [r7, #0]
 8011c70:	4613      	mov	r3, r2
 8011c72:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8011c74:	2301      	movs	r3, #1
 8011c76:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d10a      	bne.n	8011c94 <xTaskGenericNotify+0x30>
	__asm volatile
 8011c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c82:	f383 8811 	msr	BASEPRI, r3
 8011c86:	f3bf 8f6f 	isb	sy
 8011c8a:	f3bf 8f4f 	dsb	sy
 8011c8e:	61bb      	str	r3, [r7, #24]
}
 8011c90:	bf00      	nop
 8011c92:	e7fe      	b.n	8011c92 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8011c98:	f000 fe54 	bl	8012944 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d004      	beq.n	8011cac <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011ca2:	6a3b      	ldr	r3, [r7, #32]
 8011ca4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8011ca8:	683b      	ldr	r3, [r7, #0]
 8011caa:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011cac:	6a3b      	ldr	r3, [r7, #32]
 8011cae:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8011cb2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011cb4:	6a3b      	ldr	r3, [r7, #32]
 8011cb6:	2202      	movs	r2, #2
 8011cb8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 8011cbc:	79fb      	ldrb	r3, [r7, #7]
 8011cbe:	2b04      	cmp	r3, #4
 8011cc0:	d82d      	bhi.n	8011d1e <xTaskGenericNotify+0xba>
 8011cc2:	a201      	add	r2, pc, #4	; (adr r2, 8011cc8 <xTaskGenericNotify+0x64>)
 8011cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cc8:	08011d41 	.word	0x08011d41
 8011ccc:	08011cdd 	.word	0x08011cdd
 8011cd0:	08011cef 	.word	0x08011cef
 8011cd4:	08011cff 	.word	0x08011cff
 8011cd8:	08011d09 	.word	0x08011d09
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011cdc:	6a3b      	ldr	r3, [r7, #32]
 8011cde:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8011ce2:	68bb      	ldr	r3, [r7, #8]
 8011ce4:	431a      	orrs	r2, r3
 8011ce6:	6a3b      	ldr	r3, [r7, #32]
 8011ce8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8011cec:	e02b      	b.n	8011d46 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011cee:	6a3b      	ldr	r3, [r7, #32]
 8011cf0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011cf4:	1c5a      	adds	r2, r3, #1
 8011cf6:	6a3b      	ldr	r3, [r7, #32]
 8011cf8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8011cfc:	e023      	b.n	8011d46 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011cfe:	6a3b      	ldr	r3, [r7, #32]
 8011d00:	68ba      	ldr	r2, [r7, #8]
 8011d02:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8011d06:	e01e      	b.n	8011d46 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011d08:	7ffb      	ldrb	r3, [r7, #31]
 8011d0a:	2b02      	cmp	r3, #2
 8011d0c:	d004      	beq.n	8011d18 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011d0e:	6a3b      	ldr	r3, [r7, #32]
 8011d10:	68ba      	ldr	r2, [r7, #8]
 8011d12:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011d16:	e016      	b.n	8011d46 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8011d18:	2300      	movs	r3, #0
 8011d1a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8011d1c:	e013      	b.n	8011d46 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011d1e:	6a3b      	ldr	r3, [r7, #32]
 8011d20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d28:	d00c      	beq.n	8011d44 <xTaskGenericNotify+0xe0>
	__asm volatile
 8011d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d2e:	f383 8811 	msr	BASEPRI, r3
 8011d32:	f3bf 8f6f 	isb	sy
 8011d36:	f3bf 8f4f 	dsb	sy
 8011d3a:	617b      	str	r3, [r7, #20]
}
 8011d3c:	bf00      	nop
 8011d3e:	e7fe      	b.n	8011d3e <xTaskGenericNotify+0xda>
					break;
 8011d40:	bf00      	nop
 8011d42:	e000      	b.n	8011d46 <xTaskGenericNotify+0xe2>

					break;
 8011d44:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011d46:	7ffb      	ldrb	r3, [r7, #31]
 8011d48:	2b01      	cmp	r3, #1
 8011d4a:	d13a      	bne.n	8011dc2 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011d4c:	6a3b      	ldr	r3, [r7, #32]
 8011d4e:	3304      	adds	r3, #4
 8011d50:	4618      	mov	r0, r3
 8011d52:	f7fd fe47 	bl	800f9e4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8011d56:	6a3b      	ldr	r3, [r7, #32]
 8011d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d5a:	4b1d      	ldr	r3, [pc, #116]	; (8011dd0 <xTaskGenericNotify+0x16c>)
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	429a      	cmp	r2, r3
 8011d60:	d903      	bls.n	8011d6a <xTaskGenericNotify+0x106>
 8011d62:	6a3b      	ldr	r3, [r7, #32]
 8011d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d66:	4a1a      	ldr	r2, [pc, #104]	; (8011dd0 <xTaskGenericNotify+0x16c>)
 8011d68:	6013      	str	r3, [r2, #0]
 8011d6a:	6a3b      	ldr	r3, [r7, #32]
 8011d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d6e:	4613      	mov	r3, r2
 8011d70:	009b      	lsls	r3, r3, #2
 8011d72:	4413      	add	r3, r2
 8011d74:	009b      	lsls	r3, r3, #2
 8011d76:	4a17      	ldr	r2, [pc, #92]	; (8011dd4 <xTaskGenericNotify+0x170>)
 8011d78:	441a      	add	r2, r3
 8011d7a:	6a3b      	ldr	r3, [r7, #32]
 8011d7c:	3304      	adds	r3, #4
 8011d7e:	4619      	mov	r1, r3
 8011d80:	4610      	mov	r0, r2
 8011d82:	f7fd fdd2 	bl	800f92a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011d86:	6a3b      	ldr	r3, [r7, #32]
 8011d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d00a      	beq.n	8011da4 <xTaskGenericNotify+0x140>
	__asm volatile
 8011d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d92:	f383 8811 	msr	BASEPRI, r3
 8011d96:	f3bf 8f6f 	isb	sy
 8011d9a:	f3bf 8f4f 	dsb	sy
 8011d9e:	613b      	str	r3, [r7, #16]
}
 8011da0:	bf00      	nop
 8011da2:	e7fe      	b.n	8011da2 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011da4:	6a3b      	ldr	r3, [r7, #32]
 8011da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011da8:	4b0b      	ldr	r3, [pc, #44]	; (8011dd8 <xTaskGenericNotify+0x174>)
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dae:	429a      	cmp	r2, r3
 8011db0:	d907      	bls.n	8011dc2 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8011db2:	4b0a      	ldr	r3, [pc, #40]	; (8011ddc <xTaskGenericNotify+0x178>)
 8011db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011db8:	601a      	str	r2, [r3, #0]
 8011dba:	f3bf 8f4f 	dsb	sy
 8011dbe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011dc2:	f000 fdef 	bl	80129a4 <vPortExitCritical>

		return xReturn;
 8011dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8011dc8:	4618      	mov	r0, r3
 8011dca:	3728      	adds	r7, #40	; 0x28
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	bd80      	pop	{r7, pc}
 8011dd0:	200023b8 	.word	0x200023b8
 8011dd4:	20001ee0 	.word	0x20001ee0
 8011dd8:	20001edc 	.word	0x20001edc
 8011ddc:	e000ed04 	.word	0xe000ed04

08011de0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b08e      	sub	sp, #56	; 0x38
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	60f8      	str	r0, [r7, #12]
 8011de8:	60b9      	str	r1, [r7, #8]
 8011dea:	603b      	str	r3, [r7, #0]
 8011dec:	4613      	mov	r3, r2
 8011dee:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8011df0:	2301      	movs	r3, #1
 8011df2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d10a      	bne.n	8011e10 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8011dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dfe:	f383 8811 	msr	BASEPRI, r3
 8011e02:	f3bf 8f6f 	isb	sy
 8011e06:	f3bf 8f4f 	dsb	sy
 8011e0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011e0c:	bf00      	nop
 8011e0e:	e7fe      	b.n	8011e0e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011e10:	f000 fe7a 	bl	8012b08 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8011e18:	f3ef 8211 	mrs	r2, BASEPRI
 8011e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e20:	f383 8811 	msr	BASEPRI, r3
 8011e24:	f3bf 8f6f 	isb	sy
 8011e28:	f3bf 8f4f 	dsb	sy
 8011e2c:	623a      	str	r2, [r7, #32]
 8011e2e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8011e30:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011e32:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d004      	beq.n	8011e44 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e3c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e46:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8011e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e50:	2202      	movs	r2, #2
 8011e52:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 8011e56:	79fb      	ldrb	r3, [r7, #7]
 8011e58:	2b04      	cmp	r3, #4
 8011e5a:	d82f      	bhi.n	8011ebc <xTaskGenericNotifyFromISR+0xdc>
 8011e5c:	a201      	add	r2, pc, #4	; (adr r2, 8011e64 <xTaskGenericNotifyFromISR+0x84>)
 8011e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e62:	bf00      	nop
 8011e64:	08011edf 	.word	0x08011edf
 8011e68:	08011e79 	.word	0x08011e79
 8011e6c:	08011e8b 	.word	0x08011e8b
 8011e70:	08011e9b 	.word	0x08011e9b
 8011e74:	08011ea5 	.word	0x08011ea5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e7a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8011e7e:	68bb      	ldr	r3, [r7, #8]
 8011e80:	431a      	orrs	r2, r3
 8011e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e84:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8011e88:	e02c      	b.n	8011ee4 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011e90:	1c5a      	adds	r2, r3, #1
 8011e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e94:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8011e98:	e024      	b.n	8011ee4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e9c:	68ba      	ldr	r2, [r7, #8]
 8011e9e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8011ea2:	e01f      	b.n	8011ee4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011ea4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011ea8:	2b02      	cmp	r3, #2
 8011eaa:	d004      	beq.n	8011eb6 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eae:	68ba      	ldr	r2, [r7, #8]
 8011eb0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011eb4:	e016      	b.n	8011ee4 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8011eba:	e013      	b.n	8011ee4 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ebe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ec6:	d00c      	beq.n	8011ee2 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8011ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ecc:	f383 8811 	msr	BASEPRI, r3
 8011ed0:	f3bf 8f6f 	isb	sy
 8011ed4:	f3bf 8f4f 	dsb	sy
 8011ed8:	61bb      	str	r3, [r7, #24]
}
 8011eda:	bf00      	nop
 8011edc:	e7fe      	b.n	8011edc <xTaskGenericNotifyFromISR+0xfc>
					break;
 8011ede:	bf00      	nop
 8011ee0:	e000      	b.n	8011ee4 <xTaskGenericNotifyFromISR+0x104>
					break;
 8011ee2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011ee4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011ee8:	2b01      	cmp	r3, #1
 8011eea:	d146      	bne.n	8011f7a <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d00a      	beq.n	8011f0a <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8011ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ef8:	f383 8811 	msr	BASEPRI, r3
 8011efc:	f3bf 8f6f 	isb	sy
 8011f00:	f3bf 8f4f 	dsb	sy
 8011f04:	617b      	str	r3, [r7, #20]
}
 8011f06:	bf00      	nop
 8011f08:	e7fe      	b.n	8011f08 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011f0a:	4b21      	ldr	r3, [pc, #132]	; (8011f90 <xTaskGenericNotifyFromISR+0x1b0>)
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d11d      	bne.n	8011f4e <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f14:	3304      	adds	r3, #4
 8011f16:	4618      	mov	r0, r3
 8011f18:	f7fd fd64 	bl	800f9e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f20:	4b1c      	ldr	r3, [pc, #112]	; (8011f94 <xTaskGenericNotifyFromISR+0x1b4>)
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	429a      	cmp	r2, r3
 8011f26:	d903      	bls.n	8011f30 <xTaskGenericNotifyFromISR+0x150>
 8011f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f2c:	4a19      	ldr	r2, [pc, #100]	; (8011f94 <xTaskGenericNotifyFromISR+0x1b4>)
 8011f2e:	6013      	str	r3, [r2, #0]
 8011f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f34:	4613      	mov	r3, r2
 8011f36:	009b      	lsls	r3, r3, #2
 8011f38:	4413      	add	r3, r2
 8011f3a:	009b      	lsls	r3, r3, #2
 8011f3c:	4a16      	ldr	r2, [pc, #88]	; (8011f98 <xTaskGenericNotifyFromISR+0x1b8>)
 8011f3e:	441a      	add	r2, r3
 8011f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f42:	3304      	adds	r3, #4
 8011f44:	4619      	mov	r1, r3
 8011f46:	4610      	mov	r0, r2
 8011f48:	f7fd fcef 	bl	800f92a <vListInsertEnd>
 8011f4c:	e005      	b.n	8011f5a <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8011f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f50:	3318      	adds	r3, #24
 8011f52:	4619      	mov	r1, r3
 8011f54:	4811      	ldr	r0, [pc, #68]	; (8011f9c <xTaskGenericNotifyFromISR+0x1bc>)
 8011f56:	f7fd fce8 	bl	800f92a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f5e:	4b10      	ldr	r3, [pc, #64]	; (8011fa0 <xTaskGenericNotifyFromISR+0x1c0>)
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f64:	429a      	cmp	r2, r3
 8011f66:	d908      	bls.n	8011f7a <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8011f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d002      	beq.n	8011f74 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8011f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f70:	2201      	movs	r2, #1
 8011f72:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8011f74:	4b0b      	ldr	r3, [pc, #44]	; (8011fa4 <xTaskGenericNotifyFromISR+0x1c4>)
 8011f76:	2201      	movs	r2, #1
 8011f78:	601a      	str	r2, [r3, #0]
 8011f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f7c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011f7e:	693b      	ldr	r3, [r7, #16]
 8011f80:	f383 8811 	msr	BASEPRI, r3
}
 8011f84:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8011f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8011f88:	4618      	mov	r0, r3
 8011f8a:	3738      	adds	r7, #56	; 0x38
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bd80      	pop	{r7, pc}
 8011f90:	200023d8 	.word	0x200023d8
 8011f94:	200023b8 	.word	0x200023b8
 8011f98:	20001ee0 	.word	0x20001ee0
 8011f9c:	20002370 	.word	0x20002370
 8011fa0:	20001edc 	.word	0x20001edc
 8011fa4:	200023c4 	.word	0x200023c4

08011fa8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b084      	sub	sp, #16
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
 8011fb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011fb2:	4b21      	ldr	r3, [pc, #132]	; (8012038 <prvAddCurrentTaskToDelayedList+0x90>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011fb8:	4b20      	ldr	r3, [pc, #128]	; (801203c <prvAddCurrentTaskToDelayedList+0x94>)
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	3304      	adds	r3, #4
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f7fd fd10 	bl	800f9e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fca:	d10a      	bne.n	8011fe2 <prvAddCurrentTaskToDelayedList+0x3a>
 8011fcc:	683b      	ldr	r3, [r7, #0]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d007      	beq.n	8011fe2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011fd2:	4b1a      	ldr	r3, [pc, #104]	; (801203c <prvAddCurrentTaskToDelayedList+0x94>)
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	3304      	adds	r3, #4
 8011fd8:	4619      	mov	r1, r3
 8011fda:	4819      	ldr	r0, [pc, #100]	; (8012040 <prvAddCurrentTaskToDelayedList+0x98>)
 8011fdc:	f7fd fca5 	bl	800f92a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011fe0:	e026      	b.n	8012030 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011fe2:	68fa      	ldr	r2, [r7, #12]
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	4413      	add	r3, r2
 8011fe8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011fea:	4b14      	ldr	r3, [pc, #80]	; (801203c <prvAddCurrentTaskToDelayedList+0x94>)
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	68ba      	ldr	r2, [r7, #8]
 8011ff0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011ff2:	68ba      	ldr	r2, [r7, #8]
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	429a      	cmp	r2, r3
 8011ff8:	d209      	bcs.n	801200e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011ffa:	4b12      	ldr	r3, [pc, #72]	; (8012044 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011ffc:	681a      	ldr	r2, [r3, #0]
 8011ffe:	4b0f      	ldr	r3, [pc, #60]	; (801203c <prvAddCurrentTaskToDelayedList+0x94>)
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	3304      	adds	r3, #4
 8012004:	4619      	mov	r1, r3
 8012006:	4610      	mov	r0, r2
 8012008:	f7fd fcb3 	bl	800f972 <vListInsert>
}
 801200c:	e010      	b.n	8012030 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801200e:	4b0e      	ldr	r3, [pc, #56]	; (8012048 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012010:	681a      	ldr	r2, [r3, #0]
 8012012:	4b0a      	ldr	r3, [pc, #40]	; (801203c <prvAddCurrentTaskToDelayedList+0x94>)
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	3304      	adds	r3, #4
 8012018:	4619      	mov	r1, r3
 801201a:	4610      	mov	r0, r2
 801201c:	f7fd fca9 	bl	800f972 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012020:	4b0a      	ldr	r3, [pc, #40]	; (801204c <prvAddCurrentTaskToDelayedList+0xa4>)
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	68ba      	ldr	r2, [r7, #8]
 8012026:	429a      	cmp	r2, r3
 8012028:	d202      	bcs.n	8012030 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801202a:	4a08      	ldr	r2, [pc, #32]	; (801204c <prvAddCurrentTaskToDelayedList+0xa4>)
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	6013      	str	r3, [r2, #0]
}
 8012030:	bf00      	nop
 8012032:	3710      	adds	r7, #16
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}
 8012038:	200023b4 	.word	0x200023b4
 801203c:	20001edc 	.word	0x20001edc
 8012040:	2000239c 	.word	0x2000239c
 8012044:	2000236c 	.word	0x2000236c
 8012048:	20002368 	.word	0x20002368
 801204c:	200023d0 	.word	0x200023d0

08012050 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b08a      	sub	sp, #40	; 0x28
 8012054:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012056:	2300      	movs	r3, #0
 8012058:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801205a:	f000 fb07 	bl	801266c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801205e:	4b1c      	ldr	r3, [pc, #112]	; (80120d0 <xTimerCreateTimerTask+0x80>)
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d021      	beq.n	80120aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012066:	2300      	movs	r3, #0
 8012068:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801206a:	2300      	movs	r3, #0
 801206c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801206e:	1d3a      	adds	r2, r7, #4
 8012070:	f107 0108 	add.w	r1, r7, #8
 8012074:	f107 030c 	add.w	r3, r7, #12
 8012078:	4618      	mov	r0, r3
 801207a:	f7fd fc0f 	bl	800f89c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801207e:	6879      	ldr	r1, [r7, #4]
 8012080:	68bb      	ldr	r3, [r7, #8]
 8012082:	68fa      	ldr	r2, [r7, #12]
 8012084:	9202      	str	r2, [sp, #8]
 8012086:	9301      	str	r3, [sp, #4]
 8012088:	2302      	movs	r3, #2
 801208a:	9300      	str	r3, [sp, #0]
 801208c:	2300      	movs	r3, #0
 801208e:	460a      	mov	r2, r1
 8012090:	4910      	ldr	r1, [pc, #64]	; (80120d4 <xTimerCreateTimerTask+0x84>)
 8012092:	4811      	ldr	r0, [pc, #68]	; (80120d8 <xTimerCreateTimerTask+0x88>)
 8012094:	f7fe fd94 	bl	8010bc0 <xTaskCreateStatic>
 8012098:	4603      	mov	r3, r0
 801209a:	4a10      	ldr	r2, [pc, #64]	; (80120dc <xTimerCreateTimerTask+0x8c>)
 801209c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801209e:	4b0f      	ldr	r3, [pc, #60]	; (80120dc <xTimerCreateTimerTask+0x8c>)
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d001      	beq.n	80120aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80120a6:	2301      	movs	r3, #1
 80120a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80120aa:	697b      	ldr	r3, [r7, #20]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d10a      	bne.n	80120c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80120b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120b4:	f383 8811 	msr	BASEPRI, r3
 80120b8:	f3bf 8f6f 	isb	sy
 80120bc:	f3bf 8f4f 	dsb	sy
 80120c0:	613b      	str	r3, [r7, #16]
}
 80120c2:	bf00      	nop
 80120c4:	e7fe      	b.n	80120c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80120c6:	697b      	ldr	r3, [r7, #20]
}
 80120c8:	4618      	mov	r0, r3
 80120ca:	3718      	adds	r7, #24
 80120cc:	46bd      	mov	sp, r7
 80120ce:	bd80      	pop	{r7, pc}
 80120d0:	2000240c 	.word	0x2000240c
 80120d4:	080181fc 	.word	0x080181fc
 80120d8:	08012215 	.word	0x08012215
 80120dc:	20002410 	.word	0x20002410

080120e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b08a      	sub	sp, #40	; 0x28
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	60f8      	str	r0, [r7, #12]
 80120e8:	60b9      	str	r1, [r7, #8]
 80120ea:	607a      	str	r2, [r7, #4]
 80120ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80120ee:	2300      	movs	r3, #0
 80120f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d10a      	bne.n	801210e <xTimerGenericCommand+0x2e>
	__asm volatile
 80120f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120fc:	f383 8811 	msr	BASEPRI, r3
 8012100:	f3bf 8f6f 	isb	sy
 8012104:	f3bf 8f4f 	dsb	sy
 8012108:	623b      	str	r3, [r7, #32]
}
 801210a:	bf00      	nop
 801210c:	e7fe      	b.n	801210c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801210e:	4b1a      	ldr	r3, [pc, #104]	; (8012178 <xTimerGenericCommand+0x98>)
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d02a      	beq.n	801216c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012116:	68bb      	ldr	r3, [r7, #8]
 8012118:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012122:	68bb      	ldr	r3, [r7, #8]
 8012124:	2b05      	cmp	r3, #5
 8012126:	dc18      	bgt.n	801215a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012128:	f7ff fbb2 	bl	8011890 <xTaskGetSchedulerState>
 801212c:	4603      	mov	r3, r0
 801212e:	2b02      	cmp	r3, #2
 8012130:	d109      	bne.n	8012146 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012132:	4b11      	ldr	r3, [pc, #68]	; (8012178 <xTimerGenericCommand+0x98>)
 8012134:	6818      	ldr	r0, [r3, #0]
 8012136:	f107 0110 	add.w	r1, r7, #16
 801213a:	2300      	movs	r3, #0
 801213c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801213e:	f7fd fed9 	bl	800fef4 <xQueueGenericSend>
 8012142:	6278      	str	r0, [r7, #36]	; 0x24
 8012144:	e012      	b.n	801216c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012146:	4b0c      	ldr	r3, [pc, #48]	; (8012178 <xTimerGenericCommand+0x98>)
 8012148:	6818      	ldr	r0, [r3, #0]
 801214a:	f107 0110 	add.w	r1, r7, #16
 801214e:	2300      	movs	r3, #0
 8012150:	2200      	movs	r2, #0
 8012152:	f7fd fecf 	bl	800fef4 <xQueueGenericSend>
 8012156:	6278      	str	r0, [r7, #36]	; 0x24
 8012158:	e008      	b.n	801216c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801215a:	4b07      	ldr	r3, [pc, #28]	; (8012178 <xTimerGenericCommand+0x98>)
 801215c:	6818      	ldr	r0, [r3, #0]
 801215e:	f107 0110 	add.w	r1, r7, #16
 8012162:	2300      	movs	r3, #0
 8012164:	683a      	ldr	r2, [r7, #0]
 8012166:	f7fd ffc3 	bl	80100f0 <xQueueGenericSendFromISR>
 801216a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801216e:	4618      	mov	r0, r3
 8012170:	3728      	adds	r7, #40	; 0x28
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}
 8012176:	bf00      	nop
 8012178:	2000240c 	.word	0x2000240c

0801217c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b088      	sub	sp, #32
 8012180:	af02      	add	r7, sp, #8
 8012182:	6078      	str	r0, [r7, #4]
 8012184:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012186:	4b22      	ldr	r3, [pc, #136]	; (8012210 <prvProcessExpiredTimer+0x94>)
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	68db      	ldr	r3, [r3, #12]
 801218c:	68db      	ldr	r3, [r3, #12]
 801218e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012190:	697b      	ldr	r3, [r7, #20]
 8012192:	3304      	adds	r3, #4
 8012194:	4618      	mov	r0, r3
 8012196:	f7fd fc25 	bl	800f9e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801219a:	697b      	ldr	r3, [r7, #20]
 801219c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80121a0:	f003 0304 	and.w	r3, r3, #4
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d022      	beq.n	80121ee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80121a8:	697b      	ldr	r3, [r7, #20]
 80121aa:	699a      	ldr	r2, [r3, #24]
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	18d1      	adds	r1, r2, r3
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	683a      	ldr	r2, [r7, #0]
 80121b4:	6978      	ldr	r0, [r7, #20]
 80121b6:	f000 f8d1 	bl	801235c <prvInsertTimerInActiveList>
 80121ba:	4603      	mov	r3, r0
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d01f      	beq.n	8012200 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80121c0:	2300      	movs	r3, #0
 80121c2:	9300      	str	r3, [sp, #0]
 80121c4:	2300      	movs	r3, #0
 80121c6:	687a      	ldr	r2, [r7, #4]
 80121c8:	2100      	movs	r1, #0
 80121ca:	6978      	ldr	r0, [r7, #20]
 80121cc:	f7ff ff88 	bl	80120e0 <xTimerGenericCommand>
 80121d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80121d2:	693b      	ldr	r3, [r7, #16]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d113      	bne.n	8012200 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80121d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121dc:	f383 8811 	msr	BASEPRI, r3
 80121e0:	f3bf 8f6f 	isb	sy
 80121e4:	f3bf 8f4f 	dsb	sy
 80121e8:	60fb      	str	r3, [r7, #12]
}
 80121ea:	bf00      	nop
 80121ec:	e7fe      	b.n	80121ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80121ee:	697b      	ldr	r3, [r7, #20]
 80121f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80121f4:	f023 0301 	bic.w	r3, r3, #1
 80121f8:	b2da      	uxtb	r2, r3
 80121fa:	697b      	ldr	r3, [r7, #20]
 80121fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012200:	697b      	ldr	r3, [r7, #20]
 8012202:	6a1b      	ldr	r3, [r3, #32]
 8012204:	6978      	ldr	r0, [r7, #20]
 8012206:	4798      	blx	r3
}
 8012208:	bf00      	nop
 801220a:	3718      	adds	r7, #24
 801220c:	46bd      	mov	sp, r7
 801220e:	bd80      	pop	{r7, pc}
 8012210:	20002404 	.word	0x20002404

08012214 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b084      	sub	sp, #16
 8012218:	af00      	add	r7, sp, #0
 801221a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801221c:	f107 0308 	add.w	r3, r7, #8
 8012220:	4618      	mov	r0, r3
 8012222:	f000 f857 	bl	80122d4 <prvGetNextExpireTime>
 8012226:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012228:	68bb      	ldr	r3, [r7, #8]
 801222a:	4619      	mov	r1, r3
 801222c:	68f8      	ldr	r0, [r7, #12]
 801222e:	f000 f803 	bl	8012238 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012232:	f000 f8d5 	bl	80123e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012236:	e7f1      	b.n	801221c <prvTimerTask+0x8>

08012238 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b084      	sub	sp, #16
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
 8012240:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012242:	f7fe ff19 	bl	8011078 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012246:	f107 0308 	add.w	r3, r7, #8
 801224a:	4618      	mov	r0, r3
 801224c:	f000 f866 	bl	801231c <prvSampleTimeNow>
 8012250:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012252:	68bb      	ldr	r3, [r7, #8]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d130      	bne.n	80122ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012258:	683b      	ldr	r3, [r7, #0]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d10a      	bne.n	8012274 <prvProcessTimerOrBlockTask+0x3c>
 801225e:	687a      	ldr	r2, [r7, #4]
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	429a      	cmp	r2, r3
 8012264:	d806      	bhi.n	8012274 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012266:	f7fe ff15 	bl	8011094 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801226a:	68f9      	ldr	r1, [r7, #12]
 801226c:	6878      	ldr	r0, [r7, #4]
 801226e:	f7ff ff85 	bl	801217c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012272:	e024      	b.n	80122be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012274:	683b      	ldr	r3, [r7, #0]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d008      	beq.n	801228c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801227a:	4b13      	ldr	r3, [pc, #76]	; (80122c8 <prvProcessTimerOrBlockTask+0x90>)
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d101      	bne.n	8012288 <prvProcessTimerOrBlockTask+0x50>
 8012284:	2301      	movs	r3, #1
 8012286:	e000      	b.n	801228a <prvProcessTimerOrBlockTask+0x52>
 8012288:	2300      	movs	r3, #0
 801228a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801228c:	4b0f      	ldr	r3, [pc, #60]	; (80122cc <prvProcessTimerOrBlockTask+0x94>)
 801228e:	6818      	ldr	r0, [r3, #0]
 8012290:	687a      	ldr	r2, [r7, #4]
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	1ad3      	subs	r3, r2, r3
 8012296:	683a      	ldr	r2, [r7, #0]
 8012298:	4619      	mov	r1, r3
 801229a:	f7fe fc5d 	bl	8010b58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801229e:	f7fe fef9 	bl	8011094 <xTaskResumeAll>
 80122a2:	4603      	mov	r3, r0
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d10a      	bne.n	80122be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80122a8:	4b09      	ldr	r3, [pc, #36]	; (80122d0 <prvProcessTimerOrBlockTask+0x98>)
 80122aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122ae:	601a      	str	r2, [r3, #0]
 80122b0:	f3bf 8f4f 	dsb	sy
 80122b4:	f3bf 8f6f 	isb	sy
}
 80122b8:	e001      	b.n	80122be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80122ba:	f7fe feeb 	bl	8011094 <xTaskResumeAll>
}
 80122be:	bf00      	nop
 80122c0:	3710      	adds	r7, #16
 80122c2:	46bd      	mov	sp, r7
 80122c4:	bd80      	pop	{r7, pc}
 80122c6:	bf00      	nop
 80122c8:	20002408 	.word	0x20002408
 80122cc:	2000240c 	.word	0x2000240c
 80122d0:	e000ed04 	.word	0xe000ed04

080122d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80122d4:	b480      	push	{r7}
 80122d6:	b085      	sub	sp, #20
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80122dc:	4b0e      	ldr	r3, [pc, #56]	; (8012318 <prvGetNextExpireTime+0x44>)
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d101      	bne.n	80122ea <prvGetNextExpireTime+0x16>
 80122e6:	2201      	movs	r2, #1
 80122e8:	e000      	b.n	80122ec <prvGetNextExpireTime+0x18>
 80122ea:	2200      	movs	r2, #0
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d105      	bne.n	8012304 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80122f8:	4b07      	ldr	r3, [pc, #28]	; (8012318 <prvGetNextExpireTime+0x44>)
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	68db      	ldr	r3, [r3, #12]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	60fb      	str	r3, [r7, #12]
 8012302:	e001      	b.n	8012308 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012304:	2300      	movs	r3, #0
 8012306:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012308:	68fb      	ldr	r3, [r7, #12]
}
 801230a:	4618      	mov	r0, r3
 801230c:	3714      	adds	r7, #20
 801230e:	46bd      	mov	sp, r7
 8012310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012314:	4770      	bx	lr
 8012316:	bf00      	nop
 8012318:	20002404 	.word	0x20002404

0801231c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b084      	sub	sp, #16
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012324:	f7fe ff54 	bl	80111d0 <xTaskGetTickCount>
 8012328:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801232a:	4b0b      	ldr	r3, [pc, #44]	; (8012358 <prvSampleTimeNow+0x3c>)
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	68fa      	ldr	r2, [r7, #12]
 8012330:	429a      	cmp	r2, r3
 8012332:	d205      	bcs.n	8012340 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012334:	f000 f936 	bl	80125a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	2201      	movs	r2, #1
 801233c:	601a      	str	r2, [r3, #0]
 801233e:	e002      	b.n	8012346 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	2200      	movs	r2, #0
 8012344:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012346:	4a04      	ldr	r2, [pc, #16]	; (8012358 <prvSampleTimeNow+0x3c>)
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801234c:	68fb      	ldr	r3, [r7, #12]
}
 801234e:	4618      	mov	r0, r3
 8012350:	3710      	adds	r7, #16
 8012352:	46bd      	mov	sp, r7
 8012354:	bd80      	pop	{r7, pc}
 8012356:	bf00      	nop
 8012358:	20002414 	.word	0x20002414

0801235c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b086      	sub	sp, #24
 8012360:	af00      	add	r7, sp, #0
 8012362:	60f8      	str	r0, [r7, #12]
 8012364:	60b9      	str	r1, [r7, #8]
 8012366:	607a      	str	r2, [r7, #4]
 8012368:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801236a:	2300      	movs	r3, #0
 801236c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	68ba      	ldr	r2, [r7, #8]
 8012372:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	68fa      	ldr	r2, [r7, #12]
 8012378:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801237a:	68ba      	ldr	r2, [r7, #8]
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	429a      	cmp	r2, r3
 8012380:	d812      	bhi.n	80123a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012382:	687a      	ldr	r2, [r7, #4]
 8012384:	683b      	ldr	r3, [r7, #0]
 8012386:	1ad2      	subs	r2, r2, r3
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	699b      	ldr	r3, [r3, #24]
 801238c:	429a      	cmp	r2, r3
 801238e:	d302      	bcc.n	8012396 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012390:	2301      	movs	r3, #1
 8012392:	617b      	str	r3, [r7, #20]
 8012394:	e01b      	b.n	80123ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012396:	4b10      	ldr	r3, [pc, #64]	; (80123d8 <prvInsertTimerInActiveList+0x7c>)
 8012398:	681a      	ldr	r2, [r3, #0]
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	3304      	adds	r3, #4
 801239e:	4619      	mov	r1, r3
 80123a0:	4610      	mov	r0, r2
 80123a2:	f7fd fae6 	bl	800f972 <vListInsert>
 80123a6:	e012      	b.n	80123ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80123a8:	687a      	ldr	r2, [r7, #4]
 80123aa:	683b      	ldr	r3, [r7, #0]
 80123ac:	429a      	cmp	r2, r3
 80123ae:	d206      	bcs.n	80123be <prvInsertTimerInActiveList+0x62>
 80123b0:	68ba      	ldr	r2, [r7, #8]
 80123b2:	683b      	ldr	r3, [r7, #0]
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d302      	bcc.n	80123be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80123b8:	2301      	movs	r3, #1
 80123ba:	617b      	str	r3, [r7, #20]
 80123bc:	e007      	b.n	80123ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80123be:	4b07      	ldr	r3, [pc, #28]	; (80123dc <prvInsertTimerInActiveList+0x80>)
 80123c0:	681a      	ldr	r2, [r3, #0]
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	3304      	adds	r3, #4
 80123c6:	4619      	mov	r1, r3
 80123c8:	4610      	mov	r0, r2
 80123ca:	f7fd fad2 	bl	800f972 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80123ce:	697b      	ldr	r3, [r7, #20]
}
 80123d0:	4618      	mov	r0, r3
 80123d2:	3718      	adds	r7, #24
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}
 80123d8:	20002408 	.word	0x20002408
 80123dc:	20002404 	.word	0x20002404

080123e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b08e      	sub	sp, #56	; 0x38
 80123e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80123e6:	e0ca      	b.n	801257e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	da18      	bge.n	8012420 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80123ee:	1d3b      	adds	r3, r7, #4
 80123f0:	3304      	adds	r3, #4
 80123f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80123f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d10a      	bne.n	8012410 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80123fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123fe:	f383 8811 	msr	BASEPRI, r3
 8012402:	f3bf 8f6f 	isb	sy
 8012406:	f3bf 8f4f 	dsb	sy
 801240a:	61fb      	str	r3, [r7, #28]
}
 801240c:	bf00      	nop
 801240e:	e7fe      	b.n	801240e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012416:	6850      	ldr	r0, [r2, #4]
 8012418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801241a:	6892      	ldr	r2, [r2, #8]
 801241c:	4611      	mov	r1, r2
 801241e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	2b00      	cmp	r3, #0
 8012424:	f2c0 80ab 	blt.w	801257e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801242c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801242e:	695b      	ldr	r3, [r3, #20]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d004      	beq.n	801243e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012436:	3304      	adds	r3, #4
 8012438:	4618      	mov	r0, r3
 801243a:	f7fd fad3 	bl	800f9e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801243e:	463b      	mov	r3, r7
 8012440:	4618      	mov	r0, r3
 8012442:	f7ff ff6b 	bl	801231c <prvSampleTimeNow>
 8012446:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2b09      	cmp	r3, #9
 801244c:	f200 8096 	bhi.w	801257c <prvProcessReceivedCommands+0x19c>
 8012450:	a201      	add	r2, pc, #4	; (adr r2, 8012458 <prvProcessReceivedCommands+0x78>)
 8012452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012456:	bf00      	nop
 8012458:	08012481 	.word	0x08012481
 801245c:	08012481 	.word	0x08012481
 8012460:	08012481 	.word	0x08012481
 8012464:	080124f5 	.word	0x080124f5
 8012468:	08012509 	.word	0x08012509
 801246c:	08012553 	.word	0x08012553
 8012470:	08012481 	.word	0x08012481
 8012474:	08012481 	.word	0x08012481
 8012478:	080124f5 	.word	0x080124f5
 801247c:	08012509 	.word	0x08012509
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012482:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012486:	f043 0301 	orr.w	r3, r3, #1
 801248a:	b2da      	uxtb	r2, r3
 801248c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801248e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012492:	68ba      	ldr	r2, [r7, #8]
 8012494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012496:	699b      	ldr	r3, [r3, #24]
 8012498:	18d1      	adds	r1, r2, r3
 801249a:	68bb      	ldr	r3, [r7, #8]
 801249c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801249e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80124a0:	f7ff ff5c 	bl	801235c <prvInsertTimerInActiveList>
 80124a4:	4603      	mov	r3, r0
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d069      	beq.n	801257e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80124aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ac:	6a1b      	ldr	r3, [r3, #32]
 80124ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80124b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80124b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124b8:	f003 0304 	and.w	r3, r3, #4
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d05e      	beq.n	801257e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80124c0:	68ba      	ldr	r2, [r7, #8]
 80124c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124c4:	699b      	ldr	r3, [r3, #24]
 80124c6:	441a      	add	r2, r3
 80124c8:	2300      	movs	r3, #0
 80124ca:	9300      	str	r3, [sp, #0]
 80124cc:	2300      	movs	r3, #0
 80124ce:	2100      	movs	r1, #0
 80124d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80124d2:	f7ff fe05 	bl	80120e0 <xTimerGenericCommand>
 80124d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80124d8:	6a3b      	ldr	r3, [r7, #32]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d14f      	bne.n	801257e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80124de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124e2:	f383 8811 	msr	BASEPRI, r3
 80124e6:	f3bf 8f6f 	isb	sy
 80124ea:	f3bf 8f4f 	dsb	sy
 80124ee:	61bb      	str	r3, [r7, #24]
}
 80124f0:	bf00      	nop
 80124f2:	e7fe      	b.n	80124f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80124f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124fa:	f023 0301 	bic.w	r3, r3, #1
 80124fe:	b2da      	uxtb	r2, r3
 8012500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012502:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012506:	e03a      	b.n	801257e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801250a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801250e:	f043 0301 	orr.w	r3, r3, #1
 8012512:	b2da      	uxtb	r2, r3
 8012514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012516:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801251a:	68ba      	ldr	r2, [r7, #8]
 801251c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801251e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012522:	699b      	ldr	r3, [r3, #24]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d10a      	bne.n	801253e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8012528:	f04f 0350 	mov.w	r3, #80	; 0x50
 801252c:	f383 8811 	msr	BASEPRI, r3
 8012530:	f3bf 8f6f 	isb	sy
 8012534:	f3bf 8f4f 	dsb	sy
 8012538:	617b      	str	r3, [r7, #20]
}
 801253a:	bf00      	nop
 801253c:	e7fe      	b.n	801253c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012540:	699a      	ldr	r2, [r3, #24]
 8012542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012544:	18d1      	adds	r1, r2, r3
 8012546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801254a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801254c:	f7ff ff06 	bl	801235c <prvInsertTimerInActiveList>
					break;
 8012550:	e015      	b.n	801257e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012554:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012558:	f003 0302 	and.w	r3, r3, #2
 801255c:	2b00      	cmp	r3, #0
 801255e:	d103      	bne.n	8012568 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8012560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012562:	f000 fbdd 	bl	8012d20 <vPortFree>
 8012566:	e00a      	b.n	801257e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801256a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801256e:	f023 0301 	bic.w	r3, r3, #1
 8012572:	b2da      	uxtb	r2, r3
 8012574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012576:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801257a:	e000      	b.n	801257e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 801257c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801257e:	4b08      	ldr	r3, [pc, #32]	; (80125a0 <prvProcessReceivedCommands+0x1c0>)
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	1d39      	adds	r1, r7, #4
 8012584:	2200      	movs	r2, #0
 8012586:	4618      	mov	r0, r3
 8012588:	f7fd feda 	bl	8010340 <xQueueReceive>
 801258c:	4603      	mov	r3, r0
 801258e:	2b00      	cmp	r3, #0
 8012590:	f47f af2a 	bne.w	80123e8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8012594:	bf00      	nop
 8012596:	bf00      	nop
 8012598:	3730      	adds	r7, #48	; 0x30
 801259a:	46bd      	mov	sp, r7
 801259c:	bd80      	pop	{r7, pc}
 801259e:	bf00      	nop
 80125a0:	2000240c 	.word	0x2000240c

080125a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b088      	sub	sp, #32
 80125a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80125aa:	e048      	b.n	801263e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80125ac:	4b2d      	ldr	r3, [pc, #180]	; (8012664 <prvSwitchTimerLists+0xc0>)
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	68db      	ldr	r3, [r3, #12]
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80125b6:	4b2b      	ldr	r3, [pc, #172]	; (8012664 <prvSwitchTimerLists+0xc0>)
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	68db      	ldr	r3, [r3, #12]
 80125bc:	68db      	ldr	r3, [r3, #12]
 80125be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	3304      	adds	r3, #4
 80125c4:	4618      	mov	r0, r3
 80125c6:	f7fd fa0d 	bl	800f9e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	6a1b      	ldr	r3, [r3, #32]
 80125ce:	68f8      	ldr	r0, [r7, #12]
 80125d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80125d8:	f003 0304 	and.w	r3, r3, #4
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d02e      	beq.n	801263e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	699b      	ldr	r3, [r3, #24]
 80125e4:	693a      	ldr	r2, [r7, #16]
 80125e6:	4413      	add	r3, r2
 80125e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80125ea:	68ba      	ldr	r2, [r7, #8]
 80125ec:	693b      	ldr	r3, [r7, #16]
 80125ee:	429a      	cmp	r2, r3
 80125f0:	d90e      	bls.n	8012610 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	68ba      	ldr	r2, [r7, #8]
 80125f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	68fa      	ldr	r2, [r7, #12]
 80125fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80125fe:	4b19      	ldr	r3, [pc, #100]	; (8012664 <prvSwitchTimerLists+0xc0>)
 8012600:	681a      	ldr	r2, [r3, #0]
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	3304      	adds	r3, #4
 8012606:	4619      	mov	r1, r3
 8012608:	4610      	mov	r0, r2
 801260a:	f7fd f9b2 	bl	800f972 <vListInsert>
 801260e:	e016      	b.n	801263e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012610:	2300      	movs	r3, #0
 8012612:	9300      	str	r3, [sp, #0]
 8012614:	2300      	movs	r3, #0
 8012616:	693a      	ldr	r2, [r7, #16]
 8012618:	2100      	movs	r1, #0
 801261a:	68f8      	ldr	r0, [r7, #12]
 801261c:	f7ff fd60 	bl	80120e0 <xTimerGenericCommand>
 8012620:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d10a      	bne.n	801263e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012628:	f04f 0350 	mov.w	r3, #80	; 0x50
 801262c:	f383 8811 	msr	BASEPRI, r3
 8012630:	f3bf 8f6f 	isb	sy
 8012634:	f3bf 8f4f 	dsb	sy
 8012638:	603b      	str	r3, [r7, #0]
}
 801263a:	bf00      	nop
 801263c:	e7fe      	b.n	801263c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801263e:	4b09      	ldr	r3, [pc, #36]	; (8012664 <prvSwitchTimerLists+0xc0>)
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d1b1      	bne.n	80125ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012648:	4b06      	ldr	r3, [pc, #24]	; (8012664 <prvSwitchTimerLists+0xc0>)
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801264e:	4b06      	ldr	r3, [pc, #24]	; (8012668 <prvSwitchTimerLists+0xc4>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	4a04      	ldr	r2, [pc, #16]	; (8012664 <prvSwitchTimerLists+0xc0>)
 8012654:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012656:	4a04      	ldr	r2, [pc, #16]	; (8012668 <prvSwitchTimerLists+0xc4>)
 8012658:	697b      	ldr	r3, [r7, #20]
 801265a:	6013      	str	r3, [r2, #0]
}
 801265c:	bf00      	nop
 801265e:	3718      	adds	r7, #24
 8012660:	46bd      	mov	sp, r7
 8012662:	bd80      	pop	{r7, pc}
 8012664:	20002404 	.word	0x20002404
 8012668:	20002408 	.word	0x20002408

0801266c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b082      	sub	sp, #8
 8012670:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012672:	f000 f967 	bl	8012944 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012676:	4b15      	ldr	r3, [pc, #84]	; (80126cc <prvCheckForValidListAndQueue+0x60>)
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d120      	bne.n	80126c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801267e:	4814      	ldr	r0, [pc, #80]	; (80126d0 <prvCheckForValidListAndQueue+0x64>)
 8012680:	f7fd f926 	bl	800f8d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012684:	4813      	ldr	r0, [pc, #76]	; (80126d4 <prvCheckForValidListAndQueue+0x68>)
 8012686:	f7fd f923 	bl	800f8d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801268a:	4b13      	ldr	r3, [pc, #76]	; (80126d8 <prvCheckForValidListAndQueue+0x6c>)
 801268c:	4a10      	ldr	r2, [pc, #64]	; (80126d0 <prvCheckForValidListAndQueue+0x64>)
 801268e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012690:	4b12      	ldr	r3, [pc, #72]	; (80126dc <prvCheckForValidListAndQueue+0x70>)
 8012692:	4a10      	ldr	r2, [pc, #64]	; (80126d4 <prvCheckForValidListAndQueue+0x68>)
 8012694:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012696:	2300      	movs	r3, #0
 8012698:	9300      	str	r3, [sp, #0]
 801269a:	4b11      	ldr	r3, [pc, #68]	; (80126e0 <prvCheckForValidListAndQueue+0x74>)
 801269c:	4a11      	ldr	r2, [pc, #68]	; (80126e4 <prvCheckForValidListAndQueue+0x78>)
 801269e:	2110      	movs	r1, #16
 80126a0:	200a      	movs	r0, #10
 80126a2:	f7fd fa31 	bl	800fb08 <xQueueGenericCreateStatic>
 80126a6:	4603      	mov	r3, r0
 80126a8:	4a08      	ldr	r2, [pc, #32]	; (80126cc <prvCheckForValidListAndQueue+0x60>)
 80126aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80126ac:	4b07      	ldr	r3, [pc, #28]	; (80126cc <prvCheckForValidListAndQueue+0x60>)
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d005      	beq.n	80126c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80126b4:	4b05      	ldr	r3, [pc, #20]	; (80126cc <prvCheckForValidListAndQueue+0x60>)
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	490b      	ldr	r1, [pc, #44]	; (80126e8 <prvCheckForValidListAndQueue+0x7c>)
 80126ba:	4618      	mov	r0, r3
 80126bc:	f7fe f9f8 	bl	8010ab0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80126c0:	f000 f970 	bl	80129a4 <vPortExitCritical>
}
 80126c4:	bf00      	nop
 80126c6:	46bd      	mov	sp, r7
 80126c8:	bd80      	pop	{r7, pc}
 80126ca:	bf00      	nop
 80126cc:	2000240c 	.word	0x2000240c
 80126d0:	200023dc 	.word	0x200023dc
 80126d4:	200023f0 	.word	0x200023f0
 80126d8:	20002404 	.word	0x20002404
 80126dc:	20002408 	.word	0x20002408
 80126e0:	200024b8 	.word	0x200024b8
 80126e4:	20002418 	.word	0x20002418
 80126e8:	08018204 	.word	0x08018204

080126ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80126ec:	b480      	push	{r7}
 80126ee:	b085      	sub	sp, #20
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	60f8      	str	r0, [r7, #12]
 80126f4:	60b9      	str	r1, [r7, #8]
 80126f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	3b04      	subs	r3, #4
 80126fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012704:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	3b04      	subs	r3, #4
 801270a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801270c:	68bb      	ldr	r3, [r7, #8]
 801270e:	f023 0201 	bic.w	r2, r3, #1
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	3b04      	subs	r3, #4
 801271a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801271c:	4a0c      	ldr	r2, [pc, #48]	; (8012750 <pxPortInitialiseStack+0x64>)
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	3b14      	subs	r3, #20
 8012726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012728:	687a      	ldr	r2, [r7, #4]
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	3b04      	subs	r3, #4
 8012732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	f06f 0202 	mvn.w	r2, #2
 801273a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	3b20      	subs	r3, #32
 8012740:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012742:	68fb      	ldr	r3, [r7, #12]
}
 8012744:	4618      	mov	r0, r3
 8012746:	3714      	adds	r7, #20
 8012748:	46bd      	mov	sp, r7
 801274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801274e:	4770      	bx	lr
 8012750:	08012755 	.word	0x08012755

08012754 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012754:	b480      	push	{r7}
 8012756:	b085      	sub	sp, #20
 8012758:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801275a:	2300      	movs	r3, #0
 801275c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801275e:	4b12      	ldr	r3, [pc, #72]	; (80127a8 <prvTaskExitError+0x54>)
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012766:	d00a      	beq.n	801277e <prvTaskExitError+0x2a>
	__asm volatile
 8012768:	f04f 0350 	mov.w	r3, #80	; 0x50
 801276c:	f383 8811 	msr	BASEPRI, r3
 8012770:	f3bf 8f6f 	isb	sy
 8012774:	f3bf 8f4f 	dsb	sy
 8012778:	60fb      	str	r3, [r7, #12]
}
 801277a:	bf00      	nop
 801277c:	e7fe      	b.n	801277c <prvTaskExitError+0x28>
	__asm volatile
 801277e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012782:	f383 8811 	msr	BASEPRI, r3
 8012786:	f3bf 8f6f 	isb	sy
 801278a:	f3bf 8f4f 	dsb	sy
 801278e:	60bb      	str	r3, [r7, #8]
}
 8012790:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012792:	bf00      	nop
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d0fc      	beq.n	8012794 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801279a:	bf00      	nop
 801279c:	bf00      	nop
 801279e:	3714      	adds	r7, #20
 80127a0:	46bd      	mov	sp, r7
 80127a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a6:	4770      	bx	lr
 80127a8:	20000160 	.word	0x20000160
 80127ac:	00000000 	.word	0x00000000

080127b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80127b0:	4b07      	ldr	r3, [pc, #28]	; (80127d0 <pxCurrentTCBConst2>)
 80127b2:	6819      	ldr	r1, [r3, #0]
 80127b4:	6808      	ldr	r0, [r1, #0]
 80127b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127ba:	f380 8809 	msr	PSP, r0
 80127be:	f3bf 8f6f 	isb	sy
 80127c2:	f04f 0000 	mov.w	r0, #0
 80127c6:	f380 8811 	msr	BASEPRI, r0
 80127ca:	4770      	bx	lr
 80127cc:	f3af 8000 	nop.w

080127d0 <pxCurrentTCBConst2>:
 80127d0:	20001edc 	.word	0x20001edc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80127d4:	bf00      	nop
 80127d6:	bf00      	nop

080127d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80127d8:	4808      	ldr	r0, [pc, #32]	; (80127fc <prvPortStartFirstTask+0x24>)
 80127da:	6800      	ldr	r0, [r0, #0]
 80127dc:	6800      	ldr	r0, [r0, #0]
 80127de:	f380 8808 	msr	MSP, r0
 80127e2:	f04f 0000 	mov.w	r0, #0
 80127e6:	f380 8814 	msr	CONTROL, r0
 80127ea:	b662      	cpsie	i
 80127ec:	b661      	cpsie	f
 80127ee:	f3bf 8f4f 	dsb	sy
 80127f2:	f3bf 8f6f 	isb	sy
 80127f6:	df00      	svc	0
 80127f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80127fa:	bf00      	nop
 80127fc:	e000ed08 	.word	0xe000ed08

08012800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b086      	sub	sp, #24
 8012804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012806:	4b46      	ldr	r3, [pc, #280]	; (8012920 <xPortStartScheduler+0x120>)
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	4a46      	ldr	r2, [pc, #280]	; (8012924 <xPortStartScheduler+0x124>)
 801280c:	4293      	cmp	r3, r2
 801280e:	d10a      	bne.n	8012826 <xPortStartScheduler+0x26>
	__asm volatile
 8012810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012814:	f383 8811 	msr	BASEPRI, r3
 8012818:	f3bf 8f6f 	isb	sy
 801281c:	f3bf 8f4f 	dsb	sy
 8012820:	613b      	str	r3, [r7, #16]
}
 8012822:	bf00      	nop
 8012824:	e7fe      	b.n	8012824 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012826:	4b3e      	ldr	r3, [pc, #248]	; (8012920 <xPortStartScheduler+0x120>)
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	4a3f      	ldr	r2, [pc, #252]	; (8012928 <xPortStartScheduler+0x128>)
 801282c:	4293      	cmp	r3, r2
 801282e:	d10a      	bne.n	8012846 <xPortStartScheduler+0x46>
	__asm volatile
 8012830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012834:	f383 8811 	msr	BASEPRI, r3
 8012838:	f3bf 8f6f 	isb	sy
 801283c:	f3bf 8f4f 	dsb	sy
 8012840:	60fb      	str	r3, [r7, #12]
}
 8012842:	bf00      	nop
 8012844:	e7fe      	b.n	8012844 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012846:	4b39      	ldr	r3, [pc, #228]	; (801292c <xPortStartScheduler+0x12c>)
 8012848:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801284a:	697b      	ldr	r3, [r7, #20]
 801284c:	781b      	ldrb	r3, [r3, #0]
 801284e:	b2db      	uxtb	r3, r3
 8012850:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012852:	697b      	ldr	r3, [r7, #20]
 8012854:	22ff      	movs	r2, #255	; 0xff
 8012856:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012858:	697b      	ldr	r3, [r7, #20]
 801285a:	781b      	ldrb	r3, [r3, #0]
 801285c:	b2db      	uxtb	r3, r3
 801285e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012860:	78fb      	ldrb	r3, [r7, #3]
 8012862:	b2db      	uxtb	r3, r3
 8012864:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012868:	b2da      	uxtb	r2, r3
 801286a:	4b31      	ldr	r3, [pc, #196]	; (8012930 <xPortStartScheduler+0x130>)
 801286c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801286e:	4b31      	ldr	r3, [pc, #196]	; (8012934 <xPortStartScheduler+0x134>)
 8012870:	2207      	movs	r2, #7
 8012872:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012874:	e009      	b.n	801288a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012876:	4b2f      	ldr	r3, [pc, #188]	; (8012934 <xPortStartScheduler+0x134>)
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	3b01      	subs	r3, #1
 801287c:	4a2d      	ldr	r2, [pc, #180]	; (8012934 <xPortStartScheduler+0x134>)
 801287e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012880:	78fb      	ldrb	r3, [r7, #3]
 8012882:	b2db      	uxtb	r3, r3
 8012884:	005b      	lsls	r3, r3, #1
 8012886:	b2db      	uxtb	r3, r3
 8012888:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801288a:	78fb      	ldrb	r3, [r7, #3]
 801288c:	b2db      	uxtb	r3, r3
 801288e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012892:	2b80      	cmp	r3, #128	; 0x80
 8012894:	d0ef      	beq.n	8012876 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012896:	4b27      	ldr	r3, [pc, #156]	; (8012934 <xPortStartScheduler+0x134>)
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	f1c3 0307 	rsb	r3, r3, #7
 801289e:	2b04      	cmp	r3, #4
 80128a0:	d00a      	beq.n	80128b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80128a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128a6:	f383 8811 	msr	BASEPRI, r3
 80128aa:	f3bf 8f6f 	isb	sy
 80128ae:	f3bf 8f4f 	dsb	sy
 80128b2:	60bb      	str	r3, [r7, #8]
}
 80128b4:	bf00      	nop
 80128b6:	e7fe      	b.n	80128b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80128b8:	4b1e      	ldr	r3, [pc, #120]	; (8012934 <xPortStartScheduler+0x134>)
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	021b      	lsls	r3, r3, #8
 80128be:	4a1d      	ldr	r2, [pc, #116]	; (8012934 <xPortStartScheduler+0x134>)
 80128c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80128c2:	4b1c      	ldr	r3, [pc, #112]	; (8012934 <xPortStartScheduler+0x134>)
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80128ca:	4a1a      	ldr	r2, [pc, #104]	; (8012934 <xPortStartScheduler+0x134>)
 80128cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	b2da      	uxtb	r2, r3
 80128d2:	697b      	ldr	r3, [r7, #20]
 80128d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80128d6:	4b18      	ldr	r3, [pc, #96]	; (8012938 <xPortStartScheduler+0x138>)
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	4a17      	ldr	r2, [pc, #92]	; (8012938 <xPortStartScheduler+0x138>)
 80128dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80128e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80128e2:	4b15      	ldr	r3, [pc, #84]	; (8012938 <xPortStartScheduler+0x138>)
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	4a14      	ldr	r2, [pc, #80]	; (8012938 <xPortStartScheduler+0x138>)
 80128e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80128ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80128ee:	f000 f8dd 	bl	8012aac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80128f2:	4b12      	ldr	r3, [pc, #72]	; (801293c <xPortStartScheduler+0x13c>)
 80128f4:	2200      	movs	r2, #0
 80128f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80128f8:	f000 f8fc 	bl	8012af4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80128fc:	4b10      	ldr	r3, [pc, #64]	; (8012940 <xPortStartScheduler+0x140>)
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	4a0f      	ldr	r2, [pc, #60]	; (8012940 <xPortStartScheduler+0x140>)
 8012902:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012906:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012908:	f7ff ff66 	bl	80127d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801290c:	f7fe fd2a 	bl	8011364 <vTaskSwitchContext>
	prvTaskExitError();
 8012910:	f7ff ff20 	bl	8012754 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012914:	2300      	movs	r3, #0
}
 8012916:	4618      	mov	r0, r3
 8012918:	3718      	adds	r7, #24
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}
 801291e:	bf00      	nop
 8012920:	e000ed00 	.word	0xe000ed00
 8012924:	410fc271 	.word	0x410fc271
 8012928:	410fc270 	.word	0x410fc270
 801292c:	e000e400 	.word	0xe000e400
 8012930:	20002508 	.word	0x20002508
 8012934:	2000250c 	.word	0x2000250c
 8012938:	e000ed20 	.word	0xe000ed20
 801293c:	20000160 	.word	0x20000160
 8012940:	e000ef34 	.word	0xe000ef34

08012944 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012944:	b480      	push	{r7}
 8012946:	b083      	sub	sp, #12
 8012948:	af00      	add	r7, sp, #0
	__asm volatile
 801294a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801294e:	f383 8811 	msr	BASEPRI, r3
 8012952:	f3bf 8f6f 	isb	sy
 8012956:	f3bf 8f4f 	dsb	sy
 801295a:	607b      	str	r3, [r7, #4]
}
 801295c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801295e:	4b0f      	ldr	r3, [pc, #60]	; (801299c <vPortEnterCritical+0x58>)
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	3301      	adds	r3, #1
 8012964:	4a0d      	ldr	r2, [pc, #52]	; (801299c <vPortEnterCritical+0x58>)
 8012966:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012968:	4b0c      	ldr	r3, [pc, #48]	; (801299c <vPortEnterCritical+0x58>)
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	2b01      	cmp	r3, #1
 801296e:	d10f      	bne.n	8012990 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012970:	4b0b      	ldr	r3, [pc, #44]	; (80129a0 <vPortEnterCritical+0x5c>)
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	b2db      	uxtb	r3, r3
 8012976:	2b00      	cmp	r3, #0
 8012978:	d00a      	beq.n	8012990 <vPortEnterCritical+0x4c>
	__asm volatile
 801297a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801297e:	f383 8811 	msr	BASEPRI, r3
 8012982:	f3bf 8f6f 	isb	sy
 8012986:	f3bf 8f4f 	dsb	sy
 801298a:	603b      	str	r3, [r7, #0]
}
 801298c:	bf00      	nop
 801298e:	e7fe      	b.n	801298e <vPortEnterCritical+0x4a>
	}
}
 8012990:	bf00      	nop
 8012992:	370c      	adds	r7, #12
 8012994:	46bd      	mov	sp, r7
 8012996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299a:	4770      	bx	lr
 801299c:	20000160 	.word	0x20000160
 80129a0:	e000ed04 	.word	0xe000ed04

080129a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80129a4:	b480      	push	{r7}
 80129a6:	b083      	sub	sp, #12
 80129a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80129aa:	4b12      	ldr	r3, [pc, #72]	; (80129f4 <vPortExitCritical+0x50>)
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d10a      	bne.n	80129c8 <vPortExitCritical+0x24>
	__asm volatile
 80129b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129b6:	f383 8811 	msr	BASEPRI, r3
 80129ba:	f3bf 8f6f 	isb	sy
 80129be:	f3bf 8f4f 	dsb	sy
 80129c2:	607b      	str	r3, [r7, #4]
}
 80129c4:	bf00      	nop
 80129c6:	e7fe      	b.n	80129c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80129c8:	4b0a      	ldr	r3, [pc, #40]	; (80129f4 <vPortExitCritical+0x50>)
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	3b01      	subs	r3, #1
 80129ce:	4a09      	ldr	r2, [pc, #36]	; (80129f4 <vPortExitCritical+0x50>)
 80129d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80129d2:	4b08      	ldr	r3, [pc, #32]	; (80129f4 <vPortExitCritical+0x50>)
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d105      	bne.n	80129e6 <vPortExitCritical+0x42>
 80129da:	2300      	movs	r3, #0
 80129dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80129de:	683b      	ldr	r3, [r7, #0]
 80129e0:	f383 8811 	msr	BASEPRI, r3
}
 80129e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80129e6:	bf00      	nop
 80129e8:	370c      	adds	r7, #12
 80129ea:	46bd      	mov	sp, r7
 80129ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f0:	4770      	bx	lr
 80129f2:	bf00      	nop
 80129f4:	20000160 	.word	0x20000160
	...

08012a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012a00:	f3ef 8009 	mrs	r0, PSP
 8012a04:	f3bf 8f6f 	isb	sy
 8012a08:	4b15      	ldr	r3, [pc, #84]	; (8012a60 <pxCurrentTCBConst>)
 8012a0a:	681a      	ldr	r2, [r3, #0]
 8012a0c:	f01e 0f10 	tst.w	lr, #16
 8012a10:	bf08      	it	eq
 8012a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a1a:	6010      	str	r0, [r2, #0]
 8012a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012a20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012a24:	f380 8811 	msr	BASEPRI, r0
 8012a28:	f3bf 8f4f 	dsb	sy
 8012a2c:	f3bf 8f6f 	isb	sy
 8012a30:	f7fe fc98 	bl	8011364 <vTaskSwitchContext>
 8012a34:	f04f 0000 	mov.w	r0, #0
 8012a38:	f380 8811 	msr	BASEPRI, r0
 8012a3c:	bc09      	pop	{r0, r3}
 8012a3e:	6819      	ldr	r1, [r3, #0]
 8012a40:	6808      	ldr	r0, [r1, #0]
 8012a42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a46:	f01e 0f10 	tst.w	lr, #16
 8012a4a:	bf08      	it	eq
 8012a4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012a50:	f380 8809 	msr	PSP, r0
 8012a54:	f3bf 8f6f 	isb	sy
 8012a58:	4770      	bx	lr
 8012a5a:	bf00      	nop
 8012a5c:	f3af 8000 	nop.w

08012a60 <pxCurrentTCBConst>:
 8012a60:	20001edc 	.word	0x20001edc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012a64:	bf00      	nop
 8012a66:	bf00      	nop

08012a68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b082      	sub	sp, #8
 8012a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8012a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a72:	f383 8811 	msr	BASEPRI, r3
 8012a76:	f3bf 8f6f 	isb	sy
 8012a7a:	f3bf 8f4f 	dsb	sy
 8012a7e:	607b      	str	r3, [r7, #4]
}
 8012a80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012a82:	f7fe fbb5 	bl	80111f0 <xTaskIncrementTick>
 8012a86:	4603      	mov	r3, r0
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d003      	beq.n	8012a94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012a8c:	4b06      	ldr	r3, [pc, #24]	; (8012aa8 <xPortSysTickHandler+0x40>)
 8012a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a92:	601a      	str	r2, [r3, #0]
 8012a94:	2300      	movs	r3, #0
 8012a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012a98:	683b      	ldr	r3, [r7, #0]
 8012a9a:	f383 8811 	msr	BASEPRI, r3
}
 8012a9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012aa0:	bf00      	nop
 8012aa2:	3708      	adds	r7, #8
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	bd80      	pop	{r7, pc}
 8012aa8:	e000ed04 	.word	0xe000ed04

08012aac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012aac:	b480      	push	{r7}
 8012aae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012ab0:	4b0b      	ldr	r3, [pc, #44]	; (8012ae0 <vPortSetupTimerInterrupt+0x34>)
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012ab6:	4b0b      	ldr	r3, [pc, #44]	; (8012ae4 <vPortSetupTimerInterrupt+0x38>)
 8012ab8:	2200      	movs	r2, #0
 8012aba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012abc:	4b0a      	ldr	r3, [pc, #40]	; (8012ae8 <vPortSetupTimerInterrupt+0x3c>)
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	4a0a      	ldr	r2, [pc, #40]	; (8012aec <vPortSetupTimerInterrupt+0x40>)
 8012ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8012ac6:	099b      	lsrs	r3, r3, #6
 8012ac8:	4a09      	ldr	r2, [pc, #36]	; (8012af0 <vPortSetupTimerInterrupt+0x44>)
 8012aca:	3b01      	subs	r3, #1
 8012acc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012ace:	4b04      	ldr	r3, [pc, #16]	; (8012ae0 <vPortSetupTimerInterrupt+0x34>)
 8012ad0:	2207      	movs	r2, #7
 8012ad2:	601a      	str	r2, [r3, #0]
}
 8012ad4:	bf00      	nop
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012adc:	4770      	bx	lr
 8012ade:	bf00      	nop
 8012ae0:	e000e010 	.word	0xe000e010
 8012ae4:	e000e018 	.word	0xe000e018
 8012ae8:	20000154 	.word	0x20000154
 8012aec:	10624dd3 	.word	0x10624dd3
 8012af0:	e000e014 	.word	0xe000e014

08012af4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012af4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012b04 <vPortEnableVFP+0x10>
 8012af8:	6801      	ldr	r1, [r0, #0]
 8012afa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012afe:	6001      	str	r1, [r0, #0]
 8012b00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012b02:	bf00      	nop
 8012b04:	e000ed88 	.word	0xe000ed88

08012b08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012b08:	b480      	push	{r7}
 8012b0a:	b085      	sub	sp, #20
 8012b0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012b0e:	f3ef 8305 	mrs	r3, IPSR
 8012b12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	2b0f      	cmp	r3, #15
 8012b18:	d914      	bls.n	8012b44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012b1a:	4a17      	ldr	r2, [pc, #92]	; (8012b78 <vPortValidateInterruptPriority+0x70>)
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	4413      	add	r3, r2
 8012b20:	781b      	ldrb	r3, [r3, #0]
 8012b22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012b24:	4b15      	ldr	r3, [pc, #84]	; (8012b7c <vPortValidateInterruptPriority+0x74>)
 8012b26:	781b      	ldrb	r3, [r3, #0]
 8012b28:	7afa      	ldrb	r2, [r7, #11]
 8012b2a:	429a      	cmp	r2, r3
 8012b2c:	d20a      	bcs.n	8012b44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b32:	f383 8811 	msr	BASEPRI, r3
 8012b36:	f3bf 8f6f 	isb	sy
 8012b3a:	f3bf 8f4f 	dsb	sy
 8012b3e:	607b      	str	r3, [r7, #4]
}
 8012b40:	bf00      	nop
 8012b42:	e7fe      	b.n	8012b42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012b44:	4b0e      	ldr	r3, [pc, #56]	; (8012b80 <vPortValidateInterruptPriority+0x78>)
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012b4c:	4b0d      	ldr	r3, [pc, #52]	; (8012b84 <vPortValidateInterruptPriority+0x7c>)
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	429a      	cmp	r2, r3
 8012b52:	d90a      	bls.n	8012b6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b58:	f383 8811 	msr	BASEPRI, r3
 8012b5c:	f3bf 8f6f 	isb	sy
 8012b60:	f3bf 8f4f 	dsb	sy
 8012b64:	603b      	str	r3, [r7, #0]
}
 8012b66:	bf00      	nop
 8012b68:	e7fe      	b.n	8012b68 <vPortValidateInterruptPriority+0x60>
	}
 8012b6a:	bf00      	nop
 8012b6c:	3714      	adds	r7, #20
 8012b6e:	46bd      	mov	sp, r7
 8012b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b74:	4770      	bx	lr
 8012b76:	bf00      	nop
 8012b78:	e000e3f0 	.word	0xe000e3f0
 8012b7c:	20002508 	.word	0x20002508
 8012b80:	e000ed0c 	.word	0xe000ed0c
 8012b84:	2000250c 	.word	0x2000250c

08012b88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b08a      	sub	sp, #40	; 0x28
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012b90:	2300      	movs	r3, #0
 8012b92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012b94:	f7fe fa70 	bl	8011078 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012b98:	4b5b      	ldr	r3, [pc, #364]	; (8012d08 <pvPortMalloc+0x180>)
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d101      	bne.n	8012ba4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012ba0:	f000 f920 	bl	8012de4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012ba4:	4b59      	ldr	r3, [pc, #356]	; (8012d0c <pvPortMalloc+0x184>)
 8012ba6:	681a      	ldr	r2, [r3, #0]
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	4013      	ands	r3, r2
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	f040 8093 	bne.w	8012cd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d01d      	beq.n	8012bf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012bb8:	2208      	movs	r2, #8
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	4413      	add	r3, r2
 8012bbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	f003 0307 	and.w	r3, r3, #7
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d014      	beq.n	8012bf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	f023 0307 	bic.w	r3, r3, #7
 8012bd0:	3308      	adds	r3, #8
 8012bd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	f003 0307 	and.w	r3, r3, #7
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d00a      	beq.n	8012bf4 <pvPortMalloc+0x6c>
	__asm volatile
 8012bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012be2:	f383 8811 	msr	BASEPRI, r3
 8012be6:	f3bf 8f6f 	isb	sy
 8012bea:	f3bf 8f4f 	dsb	sy
 8012bee:	617b      	str	r3, [r7, #20]
}
 8012bf0:	bf00      	nop
 8012bf2:	e7fe      	b.n	8012bf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d06e      	beq.n	8012cd8 <pvPortMalloc+0x150>
 8012bfa:	4b45      	ldr	r3, [pc, #276]	; (8012d10 <pvPortMalloc+0x188>)
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	687a      	ldr	r2, [r7, #4]
 8012c00:	429a      	cmp	r2, r3
 8012c02:	d869      	bhi.n	8012cd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012c04:	4b43      	ldr	r3, [pc, #268]	; (8012d14 <pvPortMalloc+0x18c>)
 8012c06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012c08:	4b42      	ldr	r3, [pc, #264]	; (8012d14 <pvPortMalloc+0x18c>)
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012c0e:	e004      	b.n	8012c1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c1c:	685b      	ldr	r3, [r3, #4]
 8012c1e:	687a      	ldr	r2, [r7, #4]
 8012c20:	429a      	cmp	r2, r3
 8012c22:	d903      	bls.n	8012c2c <pvPortMalloc+0xa4>
 8012c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d1f1      	bne.n	8012c10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012c2c:	4b36      	ldr	r3, [pc, #216]	; (8012d08 <pvPortMalloc+0x180>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c32:	429a      	cmp	r2, r3
 8012c34:	d050      	beq.n	8012cd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012c36:	6a3b      	ldr	r3, [r7, #32]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	2208      	movs	r2, #8
 8012c3c:	4413      	add	r3, r2
 8012c3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c42:	681a      	ldr	r2, [r3, #0]
 8012c44:	6a3b      	ldr	r3, [r7, #32]
 8012c46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c4a:	685a      	ldr	r2, [r3, #4]
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	1ad2      	subs	r2, r2, r3
 8012c50:	2308      	movs	r3, #8
 8012c52:	005b      	lsls	r3, r3, #1
 8012c54:	429a      	cmp	r2, r3
 8012c56:	d91f      	bls.n	8012c98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	4413      	add	r3, r2
 8012c5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012c60:	69bb      	ldr	r3, [r7, #24]
 8012c62:	f003 0307 	and.w	r3, r3, #7
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d00a      	beq.n	8012c80 <pvPortMalloc+0xf8>
	__asm volatile
 8012c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c6e:	f383 8811 	msr	BASEPRI, r3
 8012c72:	f3bf 8f6f 	isb	sy
 8012c76:	f3bf 8f4f 	dsb	sy
 8012c7a:	613b      	str	r3, [r7, #16]
}
 8012c7c:	bf00      	nop
 8012c7e:	e7fe      	b.n	8012c7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c82:	685a      	ldr	r2, [r3, #4]
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	1ad2      	subs	r2, r2, r3
 8012c88:	69bb      	ldr	r3, [r7, #24]
 8012c8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c8e:	687a      	ldr	r2, [r7, #4]
 8012c90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012c92:	69b8      	ldr	r0, [r7, #24]
 8012c94:	f000 f908 	bl	8012ea8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012c98:	4b1d      	ldr	r3, [pc, #116]	; (8012d10 <pvPortMalloc+0x188>)
 8012c9a:	681a      	ldr	r2, [r3, #0]
 8012c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c9e:	685b      	ldr	r3, [r3, #4]
 8012ca0:	1ad3      	subs	r3, r2, r3
 8012ca2:	4a1b      	ldr	r2, [pc, #108]	; (8012d10 <pvPortMalloc+0x188>)
 8012ca4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012ca6:	4b1a      	ldr	r3, [pc, #104]	; (8012d10 <pvPortMalloc+0x188>)
 8012ca8:	681a      	ldr	r2, [r3, #0]
 8012caa:	4b1b      	ldr	r3, [pc, #108]	; (8012d18 <pvPortMalloc+0x190>)
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	429a      	cmp	r2, r3
 8012cb0:	d203      	bcs.n	8012cba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012cb2:	4b17      	ldr	r3, [pc, #92]	; (8012d10 <pvPortMalloc+0x188>)
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	4a18      	ldr	r2, [pc, #96]	; (8012d18 <pvPortMalloc+0x190>)
 8012cb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cbc:	685a      	ldr	r2, [r3, #4]
 8012cbe:	4b13      	ldr	r3, [pc, #76]	; (8012d0c <pvPortMalloc+0x184>)
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	431a      	orrs	r2, r3
 8012cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cca:	2200      	movs	r2, #0
 8012ccc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012cce:	4b13      	ldr	r3, [pc, #76]	; (8012d1c <pvPortMalloc+0x194>)
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	3301      	adds	r3, #1
 8012cd4:	4a11      	ldr	r2, [pc, #68]	; (8012d1c <pvPortMalloc+0x194>)
 8012cd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012cd8:	f7fe f9dc 	bl	8011094 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012cdc:	69fb      	ldr	r3, [r7, #28]
 8012cde:	f003 0307 	and.w	r3, r3, #7
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d00a      	beq.n	8012cfc <pvPortMalloc+0x174>
	__asm volatile
 8012ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cea:	f383 8811 	msr	BASEPRI, r3
 8012cee:	f3bf 8f6f 	isb	sy
 8012cf2:	f3bf 8f4f 	dsb	sy
 8012cf6:	60fb      	str	r3, [r7, #12]
}
 8012cf8:	bf00      	nop
 8012cfa:	e7fe      	b.n	8012cfa <pvPortMalloc+0x172>
	return pvReturn;
 8012cfc:	69fb      	ldr	r3, [r7, #28]
}
 8012cfe:	4618      	mov	r0, r3
 8012d00:	3728      	adds	r7, #40	; 0x28
 8012d02:	46bd      	mov	sp, r7
 8012d04:	bd80      	pop	{r7, pc}
 8012d06:	bf00      	nop
 8012d08:	20003118 	.word	0x20003118
 8012d0c:	2000312c 	.word	0x2000312c
 8012d10:	2000311c 	.word	0x2000311c
 8012d14:	20003110 	.word	0x20003110
 8012d18:	20003120 	.word	0x20003120
 8012d1c:	20003124 	.word	0x20003124

08012d20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b086      	sub	sp, #24
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d04d      	beq.n	8012dce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012d32:	2308      	movs	r3, #8
 8012d34:	425b      	negs	r3, r3
 8012d36:	697a      	ldr	r2, [r7, #20]
 8012d38:	4413      	add	r3, r2
 8012d3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012d3c:	697b      	ldr	r3, [r7, #20]
 8012d3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012d40:	693b      	ldr	r3, [r7, #16]
 8012d42:	685a      	ldr	r2, [r3, #4]
 8012d44:	4b24      	ldr	r3, [pc, #144]	; (8012dd8 <vPortFree+0xb8>)
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	4013      	ands	r3, r2
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d10a      	bne.n	8012d64 <vPortFree+0x44>
	__asm volatile
 8012d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d52:	f383 8811 	msr	BASEPRI, r3
 8012d56:	f3bf 8f6f 	isb	sy
 8012d5a:	f3bf 8f4f 	dsb	sy
 8012d5e:	60fb      	str	r3, [r7, #12]
}
 8012d60:	bf00      	nop
 8012d62:	e7fe      	b.n	8012d62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012d64:	693b      	ldr	r3, [r7, #16]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d00a      	beq.n	8012d82 <vPortFree+0x62>
	__asm volatile
 8012d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d70:	f383 8811 	msr	BASEPRI, r3
 8012d74:	f3bf 8f6f 	isb	sy
 8012d78:	f3bf 8f4f 	dsb	sy
 8012d7c:	60bb      	str	r3, [r7, #8]
}
 8012d7e:	bf00      	nop
 8012d80:	e7fe      	b.n	8012d80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012d82:	693b      	ldr	r3, [r7, #16]
 8012d84:	685a      	ldr	r2, [r3, #4]
 8012d86:	4b14      	ldr	r3, [pc, #80]	; (8012dd8 <vPortFree+0xb8>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	4013      	ands	r3, r2
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d01e      	beq.n	8012dce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012d90:	693b      	ldr	r3, [r7, #16]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d11a      	bne.n	8012dce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012d98:	693b      	ldr	r3, [r7, #16]
 8012d9a:	685a      	ldr	r2, [r3, #4]
 8012d9c:	4b0e      	ldr	r3, [pc, #56]	; (8012dd8 <vPortFree+0xb8>)
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	43db      	mvns	r3, r3
 8012da2:	401a      	ands	r2, r3
 8012da4:	693b      	ldr	r3, [r7, #16]
 8012da6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012da8:	f7fe f966 	bl	8011078 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012dac:	693b      	ldr	r3, [r7, #16]
 8012dae:	685a      	ldr	r2, [r3, #4]
 8012db0:	4b0a      	ldr	r3, [pc, #40]	; (8012ddc <vPortFree+0xbc>)
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	4413      	add	r3, r2
 8012db6:	4a09      	ldr	r2, [pc, #36]	; (8012ddc <vPortFree+0xbc>)
 8012db8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012dba:	6938      	ldr	r0, [r7, #16]
 8012dbc:	f000 f874 	bl	8012ea8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012dc0:	4b07      	ldr	r3, [pc, #28]	; (8012de0 <vPortFree+0xc0>)
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	3301      	adds	r3, #1
 8012dc6:	4a06      	ldr	r2, [pc, #24]	; (8012de0 <vPortFree+0xc0>)
 8012dc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012dca:	f7fe f963 	bl	8011094 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012dce:	bf00      	nop
 8012dd0:	3718      	adds	r7, #24
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	bd80      	pop	{r7, pc}
 8012dd6:	bf00      	nop
 8012dd8:	2000312c 	.word	0x2000312c
 8012ddc:	2000311c 	.word	0x2000311c
 8012de0:	20003128 	.word	0x20003128

08012de4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012de4:	b480      	push	{r7}
 8012de6:	b085      	sub	sp, #20
 8012de8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012dea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8012dee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012df0:	4b27      	ldr	r3, [pc, #156]	; (8012e90 <prvHeapInit+0xac>)
 8012df2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	f003 0307 	and.w	r3, r3, #7
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d00c      	beq.n	8012e18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	3307      	adds	r3, #7
 8012e02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	f023 0307 	bic.w	r3, r3, #7
 8012e0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012e0c:	68ba      	ldr	r2, [r7, #8]
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	1ad3      	subs	r3, r2, r3
 8012e12:	4a1f      	ldr	r2, [pc, #124]	; (8012e90 <prvHeapInit+0xac>)
 8012e14:	4413      	add	r3, r2
 8012e16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012e1c:	4a1d      	ldr	r2, [pc, #116]	; (8012e94 <prvHeapInit+0xb0>)
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012e22:	4b1c      	ldr	r3, [pc, #112]	; (8012e94 <prvHeapInit+0xb0>)
 8012e24:	2200      	movs	r2, #0
 8012e26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	68ba      	ldr	r2, [r7, #8]
 8012e2c:	4413      	add	r3, r2
 8012e2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012e30:	2208      	movs	r2, #8
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	1a9b      	subs	r3, r3, r2
 8012e36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	f023 0307 	bic.w	r3, r3, #7
 8012e3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	4a15      	ldr	r2, [pc, #84]	; (8012e98 <prvHeapInit+0xb4>)
 8012e44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012e46:	4b14      	ldr	r3, [pc, #80]	; (8012e98 <prvHeapInit+0xb4>)
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	2200      	movs	r2, #0
 8012e4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012e4e:	4b12      	ldr	r3, [pc, #72]	; (8012e98 <prvHeapInit+0xb4>)
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	2200      	movs	r2, #0
 8012e54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012e5a:	683b      	ldr	r3, [r7, #0]
 8012e5c:	68fa      	ldr	r2, [r7, #12]
 8012e5e:	1ad2      	subs	r2, r2, r3
 8012e60:	683b      	ldr	r3, [r7, #0]
 8012e62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012e64:	4b0c      	ldr	r3, [pc, #48]	; (8012e98 <prvHeapInit+0xb4>)
 8012e66:	681a      	ldr	r2, [r3, #0]
 8012e68:	683b      	ldr	r3, [r7, #0]
 8012e6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012e6c:	683b      	ldr	r3, [r7, #0]
 8012e6e:	685b      	ldr	r3, [r3, #4]
 8012e70:	4a0a      	ldr	r2, [pc, #40]	; (8012e9c <prvHeapInit+0xb8>)
 8012e72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012e74:	683b      	ldr	r3, [r7, #0]
 8012e76:	685b      	ldr	r3, [r3, #4]
 8012e78:	4a09      	ldr	r2, [pc, #36]	; (8012ea0 <prvHeapInit+0xbc>)
 8012e7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012e7c:	4b09      	ldr	r3, [pc, #36]	; (8012ea4 <prvHeapInit+0xc0>)
 8012e7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012e82:	601a      	str	r2, [r3, #0]
}
 8012e84:	bf00      	nop
 8012e86:	3714      	adds	r7, #20
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e8e:	4770      	bx	lr
 8012e90:	20002510 	.word	0x20002510
 8012e94:	20003110 	.word	0x20003110
 8012e98:	20003118 	.word	0x20003118
 8012e9c:	20003120 	.word	0x20003120
 8012ea0:	2000311c 	.word	0x2000311c
 8012ea4:	2000312c 	.word	0x2000312c

08012ea8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012ea8:	b480      	push	{r7}
 8012eaa:	b085      	sub	sp, #20
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012eb0:	4b28      	ldr	r3, [pc, #160]	; (8012f54 <prvInsertBlockIntoFreeList+0xac>)
 8012eb2:	60fb      	str	r3, [r7, #12]
 8012eb4:	e002      	b.n	8012ebc <prvInsertBlockIntoFreeList+0x14>
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	60fb      	str	r3, [r7, #12]
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	687a      	ldr	r2, [r7, #4]
 8012ec2:	429a      	cmp	r2, r3
 8012ec4:	d8f7      	bhi.n	8012eb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	685b      	ldr	r3, [r3, #4]
 8012ece:	68ba      	ldr	r2, [r7, #8]
 8012ed0:	4413      	add	r3, r2
 8012ed2:	687a      	ldr	r2, [r7, #4]
 8012ed4:	429a      	cmp	r2, r3
 8012ed6:	d108      	bne.n	8012eea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	685a      	ldr	r2, [r3, #4]
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	685b      	ldr	r3, [r3, #4]
 8012ee0:	441a      	add	r2, r3
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	685b      	ldr	r3, [r3, #4]
 8012ef2:	68ba      	ldr	r2, [r7, #8]
 8012ef4:	441a      	add	r2, r3
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	429a      	cmp	r2, r3
 8012efc:	d118      	bne.n	8012f30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	681a      	ldr	r2, [r3, #0]
 8012f02:	4b15      	ldr	r3, [pc, #84]	; (8012f58 <prvInsertBlockIntoFreeList+0xb0>)
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	429a      	cmp	r2, r3
 8012f08:	d00d      	beq.n	8012f26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	685a      	ldr	r2, [r3, #4]
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	685b      	ldr	r3, [r3, #4]
 8012f14:	441a      	add	r2, r3
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	681a      	ldr	r2, [r3, #0]
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	601a      	str	r2, [r3, #0]
 8012f24:	e008      	b.n	8012f38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012f26:	4b0c      	ldr	r3, [pc, #48]	; (8012f58 <prvInsertBlockIntoFreeList+0xb0>)
 8012f28:	681a      	ldr	r2, [r3, #0]
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	601a      	str	r2, [r3, #0]
 8012f2e:	e003      	b.n	8012f38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	681a      	ldr	r2, [r3, #0]
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012f38:	68fa      	ldr	r2, [r7, #12]
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	d002      	beq.n	8012f46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	687a      	ldr	r2, [r7, #4]
 8012f44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012f46:	bf00      	nop
 8012f48:	3714      	adds	r7, #20
 8012f4a:	46bd      	mov	sp, r7
 8012f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f50:	4770      	bx	lr
 8012f52:	bf00      	nop
 8012f54:	20003110 	.word	0x20003110
 8012f58:	20003118 	.word	0x20003118

08012f5c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8012f5c:	b480      	push	{r7}
 8012f5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8012f60:	4b03      	ldr	r3, [pc, #12]	; (8012f70 <LL_FLASH_GetUDN+0x14>)
 8012f62:	681b      	ldr	r3, [r3, #0]
}
 8012f64:	4618      	mov	r0, r3
 8012f66:	46bd      	mov	sp, r7
 8012f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f6c:	4770      	bx	lr
 8012f6e:	bf00      	nop
 8012f70:	1fff7580 	.word	0x1fff7580

08012f74 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8012f74:	b480      	push	{r7}
 8012f76:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8012f78:	4b03      	ldr	r3, [pc, #12]	; (8012f88 <LL_FLASH_GetDeviceID+0x14>)
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	b2db      	uxtb	r3, r3
}
 8012f7e:	4618      	mov	r0, r3
 8012f80:	46bd      	mov	sp, r7
 8012f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f86:	4770      	bx	lr
 8012f88:	1fff7584 	.word	0x1fff7584

08012f8c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8012f8c:	b480      	push	{r7}
 8012f8e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8012f90:	4b03      	ldr	r3, [pc, #12]	; (8012fa0 <LL_FLASH_GetSTCompanyID+0x14>)
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	0a1b      	lsrs	r3, r3, #8
}
 8012f96:	4618      	mov	r0, r3
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9e:	4770      	bx	lr
 8012fa0:	1fff7584 	.word	0x1fff7584

08012fa4 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8012fa4:	b5b0      	push	{r4, r5, r7, lr}
 8012fa6:	b090      	sub	sp, #64	; 0x40
 8012fa8:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8012faa:	4b2e      	ldr	r3, [pc, #184]	; (8013064 <APP_BLE_Init+0xc0>)
 8012fac:	1d3c      	adds	r4, r7, #4
 8012fae:	461d      	mov	r5, r3
 8012fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012fb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012fbc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012fc0:	c403      	stmia	r4!, {r0, r1}
 8012fc2:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8012fc4:	f000 f8ee 	bl	80131a4 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8012fc8:	2101      	movs	r1, #1
 8012fca:	2002      	movs	r0, #2
 8012fcc:	f000 fd14 	bl	80139f8 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  HciUserEvtProcessId = osThreadNew(HciUserEvtProcess, NULL, &HciUserEvtProcess_attr);
 8012fd0:	4a25      	ldr	r2, [pc, #148]	; (8013068 <APP_BLE_Init+0xc4>)
 8012fd2:	2100      	movs	r1, #0
 8012fd4:	4825      	ldr	r0, [pc, #148]	; (801306c <APP_BLE_Init+0xc8>)
 8012fd6:	f7fc f89d 	bl	800f114 <osThreadNew>
 8012fda:	4603      	mov	r3, r0
 8012fdc:	4a24      	ldr	r2, [pc, #144]	; (8013070 <APP_BLE_Init+0xcc>)
 8012fde:	6013      	str	r3, [r2, #0]

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8012fe0:	1d3b      	adds	r3, r7, #4
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	f7fb f9aa 	bl	800e33c <SHCI_C2_BLE_Init>
 8012fe8:	4603      	mov	r3, r0
 8012fea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (status != SHCI_Success)
 8012fee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d001      	beq.n	8012ffa <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8012ff6:	f7f3 fef2 	bl	8006dde <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8012ffa:	f000 f8fb 	bl	80131f4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8012ffe:	f7fb f8f7 	bl	800e1f0 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8013002:	4b1c      	ldr	r3, [pc, #112]	; (8013074 <APP_BLE_Init+0xd0>)
 8013004:	2200      	movs	r2, #0
 8013006:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 801300a:	4b1a      	ldr	r3, [pc, #104]	; (8013074 <APP_BLE_Init+0xd0>)
 801300c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013010:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  AdvUpdateProcessId = osThreadNew(AdvUpdateProcess, NULL, &AdvUpdateProcess_attr);
 8013012:	4a19      	ldr	r2, [pc, #100]	; (8013078 <APP_BLE_Init+0xd4>)
 8013014:	2100      	movs	r1, #0
 8013016:	4819      	ldr	r0, [pc, #100]	; (801307c <APP_BLE_Init+0xd8>)
 8013018:	f7fc f87c 	bl	800f114 <osThreadNew>
 801301c:	4603      	mov	r3, r0
 801301e:	4a18      	ldr	r2, [pc, #96]	; (8013080 <APP_BLE_Init+0xdc>)
 8013020:	6013      	str	r3, [r2, #0]
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

  /**
   * Initialize DIS Application
   */
  DISAPP_Init();
 8013022:	f000 fb37 	bl	8013694 <DISAPP_Init>

  /**
   * Initialize HRS Application
   */
  HRSAPP_Init();
 8013026:	f000 fb59 	bl	80136dc <HRSAPP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the connection state machine
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Mgr);
 801302a:	4b16      	ldr	r3, [pc, #88]	; (8013084 <APP_BLE_Init+0xe0>)
 801302c:	2200      	movs	r2, #0
 801302e:	4916      	ldr	r1, [pc, #88]	; (8013088 <APP_BLE_Init+0xe4>)
 8013030:	2000      	movs	r0, #0
 8013032:	f7f3 fa69 	bl	8006508 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = AD_TYPE_16_BIT_SERV_UUID;
 8013036:	4b0f      	ldr	r3, [pc, #60]	; (8013074 <APP_BLE_Init+0xd0>)
 8013038:	2202      	movs	r2, #2
 801303a:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 1;
 801303c:	4b0d      	ldr	r3, [pc, #52]	; (8013074 <APP_BLE_Init+0xd0>)
 801303e:	2201      	movs	r2, #1
 8013040:	761a      	strb	r2, [r3, #24]
  Add_Advertisment_Service_UUID(HEART_RATE_SERVICE_UUID);
 8013042:	f641 000d 	movw	r0, #6157	; 0x180d
 8013046:	f000 fa5d 	bl	8013504 <Add_Advertisment_Service_UUID>

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 801304a:	4b10      	ldr	r3, [pc, #64]	; (801308c <APP_BLE_Init+0xe8>)
 801304c:	2280      	movs	r2, #128	; 0x80
 801304e:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8013050:	4b0f      	ldr	r3, [pc, #60]	; (8013090 <APP_BLE_Init+0xec>)
 8013052:	22a0      	movs	r2, #160	; 0xa0
 8013054:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by Collector
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8013056:	2001      	movs	r0, #1
 8013058:	f000 f9a0 	bl	801339c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 801305c:	bf00      	nop
}
 801305e:	3740      	adds	r7, #64	; 0x40
 8013060:	46bd      	mov	sp, r7
 8013062:	bdb0      	pop	{r4, r5, r7, pc}
 8013064:	08018238 	.word	0x08018238
 8013068:	08018540 	.word	0x08018540
 801306c:	0801359d 	.word	0x0801359d
 8013070:	200031cc 	.word	0x200031cc
 8013074:	20003138 	.word	0x20003138
 8013078:	0801851c 	.word	0x0801851c
 801307c:	08013575 	.word	0x08013575
 8013080:	200031c8 	.word	0x200031c8
 8013084:	0801355d 	.word	0x0801355d
 8013088:	200031b9 	.word	0x200031b9
 801308c:	200031bc 	.word	0x200031bc
 8013090:	200031be 	.word	0x200031be

08013094 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b08a      	sub	sp, #40	; 0x28
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 801309c:	2392      	movs	r3, #146	; 0x92
 801309e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	3301      	adds	r3, #1
 80130a6:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 80130a8:	6a3b      	ldr	r3, [r7, #32]
 80130aa:	781b      	ldrb	r3, [r3, #0]
 80130ac:	2bff      	cmp	r3, #255	; 0xff
 80130ae:	d061      	beq.n	8013174 <SVCCTL_App_Notification+0xe0>
 80130b0:	2bff      	cmp	r3, #255	; 0xff
 80130b2:	dc6c      	bgt.n	801318e <SVCCTL_App_Notification+0xfa>
 80130b4:	2b05      	cmp	r3, #5
 80130b6:	d002      	beq.n	80130be <SVCCTL_App_Notification+0x2a>
 80130b8:	2b3e      	cmp	r3, #62	; 0x3e
 80130ba:	d016      	beq.n	80130ea <SVCCTL_App_Notification+0x56>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80130bc:	e067      	b.n	801318e <SVCCTL_App_Notification+0xfa>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 80130be:	6a3b      	ldr	r3, [r7, #32]
 80130c0:	3302      	adds	r3, #2
 80130c2:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80130ca:	b29a      	uxth	r2, r3
 80130cc:	4b34      	ldr	r3, [pc, #208]	; (80131a0 <SVCCTL_App_Notification+0x10c>)
 80130ce:	8adb      	ldrh	r3, [r3, #22]
 80130d0:	429a      	cmp	r2, r3
 80130d2:	d106      	bne.n	80130e2 <SVCCTL_App_Notification+0x4e>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80130d4:	4b32      	ldr	r3, [pc, #200]	; (80131a0 <SVCCTL_App_Notification+0x10c>)
 80130d6:	2200      	movs	r2, #0
 80130d8:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80130da:	4b31      	ldr	r3, [pc, #196]	; (80131a0 <SVCCTL_App_Notification+0x10c>)
 80130dc:	2200      	movs	r2, #0
 80130de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 80130e2:	2001      	movs	r0, #1
 80130e4:	f000 f95a 	bl	801339c <Adv_Request>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80130e8:	e054      	b.n	8013194 <SVCCTL_App_Notification+0x100>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80130ea:	6a3b      	ldr	r3, [r7, #32]
 80130ec:	3302      	adds	r3, #2
 80130ee:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 80130f0:	69bb      	ldr	r3, [r7, #24]
 80130f2:	781b      	ldrb	r3, [r3, #0]
 80130f4:	2b0c      	cmp	r3, #12
 80130f6:	d005      	beq.n	8013104 <SVCCTL_App_Notification+0x70>
 80130f8:	2b0c      	cmp	r3, #12
 80130fa:	dc37      	bgt.n	801316c <SVCCTL_App_Notification+0xd8>
 80130fc:	2b01      	cmp	r3, #1
 80130fe:	d017      	beq.n	8013130 <SVCCTL_App_Notification+0x9c>
 8013100:	2b03      	cmp	r3, #3
          break;
 8013102:	e033      	b.n	801316c <SVCCTL_App_Notification+0xd8>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 8013104:	69bb      	ldr	r3, [r7, #24]
 8013106:	3301      	adds	r3, #1
 8013108:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 801310a:	4b25      	ldr	r3, [pc, #148]	; (80131a0 <SVCCTL_App_Notification+0x10c>)
 801310c:	8adb      	ldrh	r3, [r3, #22]
 801310e:	f107 020a 	add.w	r2, r7, #10
 8013112:	f107 010b 	add.w	r1, r7, #11
 8013116:	4618      	mov	r0, r3
 8013118:	f7fa fdb1 	bl	800dc7e <hci_le_read_phy>
 801311c:	4603      	mov	r3, r0
 801311e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 8013122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013126:	2b00      	cmp	r3, #0
 8013128:	d122      	bne.n	8013170 <SVCCTL_App_Notification+0xdc>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 801312a:	7afb      	ldrb	r3, [r7, #11]
 801312c:	2b02      	cmp	r3, #2
          break;
 801312e:	e01f      	b.n	8013170 <SVCCTL_App_Notification+0xdc>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8013130:	69bb      	ldr	r3, [r7, #24]
 8013132:	3301      	adds	r3, #1
 8013134:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8013136:	4b1a      	ldr	r3, [pc, #104]	; (80131a0 <SVCCTL_App_Notification+0x10c>)
 8013138:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801313c:	4618      	mov	r0, r3
 801313e:	f7f3 fa5d 	bl	80065fc <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8013142:	4b17      	ldr	r3, [pc, #92]	; (80131a0 <SVCCTL_App_Notification+0x10c>)
 8013144:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8013148:	2b04      	cmp	r3, #4
 801314a:	d104      	bne.n	8013156 <SVCCTL_App_Notification+0xc2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 801314c:	4b14      	ldr	r3, [pc, #80]	; (80131a0 <SVCCTL_App_Notification+0x10c>)
 801314e:	2206      	movs	r2, #6
 8013150:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8013154:	e003      	b.n	801315e <SVCCTL_App_Notification+0xca>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8013156:	4b12      	ldr	r3, [pc, #72]	; (80131a0 <SVCCTL_App_Notification+0x10c>)
 8013158:	2205      	movs	r2, #5
 801315a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 801315e:	693b      	ldr	r3, [r7, #16]
 8013160:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8013164:	b29a      	uxth	r2, r3
 8013166:	4b0e      	ldr	r3, [pc, #56]	; (80131a0 <SVCCTL_App_Notification+0x10c>)
 8013168:	82da      	strh	r2, [r3, #22]
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 801316a:	e002      	b.n	8013172 <SVCCTL_App_Notification+0xde>
          break;
 801316c:	bf00      	nop
 801316e:	e011      	b.n	8013194 <SVCCTL_App_Notification+0x100>
          break;
 8013170:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8013172:	e00f      	b.n	8013194 <SVCCTL_App_Notification+0x100>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8013174:	6a3b      	ldr	r3, [r7, #32]
 8013176:	3302      	adds	r3, #2
 8013178:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 801317a:	69fb      	ldr	r3, [r7, #28]
 801317c:	881b      	ldrh	r3, [r3, #0]
 801317e:	b29b      	uxth	r3, r3
 8013180:	461a      	mov	r2, r3
 8013182:	f240 4307 	movw	r3, #1031	; 0x407
 8013186:	429a      	cmp	r2, r3
 8013188:	d103      	bne.n	8013192 <SVCCTL_App_Notification+0xfe>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 801318a:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 801318c:	e001      	b.n	8013192 <SVCCTL_App_Notification+0xfe>
      break;
 801318e:	bf00      	nop
 8013190:	e000      	b.n	8013194 <SVCCTL_App_Notification+0x100>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8013192:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8013194:	2301      	movs	r3, #1
}
 8013196:	4618      	mov	r0, r3
 8013198:	3728      	adds	r7, #40	; 0x28
 801319a:	46bd      	mov	sp, r7
 801319c:	bd80      	pop	{r7, pc}
 801319e:	bf00      	nop
 80131a0:	20003138 	.word	0x20003138

080131a4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b082      	sub	sp, #8
 80131a8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  MtxHciId = osMutexNew(NULL);
 80131aa:	2000      	movs	r0, #0
 80131ac:	f7fc f92e 	bl	800f40c <osMutexNew>
 80131b0:	4603      	mov	r3, r0
 80131b2:	4a0b      	ldr	r2, [pc, #44]	; (80131e0 <Ble_Tl_Init+0x3c>)
 80131b4:	6013      	str	r3, [r2, #0]
  SemHciId = osSemaphoreNew(1, 0, NULL); /*< Create the semaphore and make it busy at initialization */
 80131b6:	2200      	movs	r2, #0
 80131b8:	2100      	movs	r1, #0
 80131ba:	2001      	movs	r0, #1
 80131bc:	f7fc fa34 	bl	800f628 <osSemaphoreNew>
 80131c0:	4603      	mov	r3, r0
 80131c2:	4a08      	ldr	r2, [pc, #32]	; (80131e4 <Ble_Tl_Init+0x40>)
 80131c4:	6013      	str	r3, [r2, #0]

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80131c6:	4b08      	ldr	r3, [pc, #32]	; (80131e8 <Ble_Tl_Init+0x44>)
 80131c8:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80131ca:	4b08      	ldr	r3, [pc, #32]	; (80131ec <Ble_Tl_Init+0x48>)
 80131cc:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80131ce:	463b      	mov	r3, r7
 80131d0:	4619      	mov	r1, r3
 80131d2:	4807      	ldr	r0, [pc, #28]	; (80131f0 <Ble_Tl_Init+0x4c>)
 80131d4:	f7fb f9a4 	bl	800e520 <hci_init>

  return;
 80131d8:	bf00      	nop
}
 80131da:	3708      	adds	r7, #8
 80131dc:	46bd      	mov	sp, r7
 80131de:	bd80      	pop	{r7, pc}
 80131e0:	200031c0 	.word	0x200031c0
 80131e4:	200031c4 	.word	0x200031c4
 80131e8:	200300d8 	.word	0x200300d8
 80131ec:	08013655 	.word	0x08013655
 80131f0:	0801361d 	.word	0x0801361d

080131f4 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80131f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131f6:	b08d      	sub	sp, #52	; 0x34
 80131f8:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80131fa:	f44f 7350 	mov.w	r3, #832	; 0x340
 80131fe:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8013200:	2392      	movs	r3, #146	; 0x92
 8013202:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8013204:	f7fa fd17 	bl	800dc36 <hci_reset>
 8013208:	4603      	mov	r3, r0
 801320a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 801320c:	f000 f936 	bl	801347c <BleGetBdAddress>
 8013210:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8013212:	693a      	ldr	r2, [r7, #16]
 8013214:	2106      	movs	r1, #6
 8013216:	2000      	movs	r0, #0
 8013218:	f7fa fc21 	bl	800da5e <aci_hal_write_config_data>
 801321c:	4603      	mov	r3, r0
 801321e:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 8013220:	693b      	ldr	r3, [r7, #16]
 8013222:	3305      	adds	r3, #5
 8013224:	781a      	ldrb	r2, [r3, #0]
 8013226:	4b57      	ldr	r3, [pc, #348]	; (8013384 <Ble_Hci_Gap_Gatt_Init+0x190>)
 8013228:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 801322a:	693b      	ldr	r3, [r7, #16]
 801322c:	3304      	adds	r3, #4
 801322e:	781a      	ldrb	r2, [r3, #0]
 8013230:	4b54      	ldr	r3, [pc, #336]	; (8013384 <Ble_Hci_Gap_Gatt_Init+0x190>)
 8013232:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 8013234:	693b      	ldr	r3, [r7, #16]
 8013236:	3303      	adds	r3, #3
 8013238:	781a      	ldrb	r2, [r3, #0]
 801323a:	4b52      	ldr	r3, [pc, #328]	; (8013384 <Ble_Hci_Gap_Gatt_Init+0x190>)
 801323c:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 801323e:	693b      	ldr	r3, [r7, #16]
 8013240:	3302      	adds	r3, #2
 8013242:	781a      	ldrb	r2, [r3, #0]
 8013244:	4b4f      	ldr	r3, [pc, #316]	; (8013384 <Ble_Hci_Gap_Gatt_Init+0x190>)
 8013246:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 8013248:	693b      	ldr	r3, [r7, #16]
 801324a:	3301      	adds	r3, #1
 801324c:	781a      	ldrb	r2, [r3, #0]
 801324e:	4b4d      	ldr	r3, [pc, #308]	; (8013384 <Ble_Hci_Gap_Gatt_Init+0x190>)
 8013250:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 8013252:	693b      	ldr	r3, [r7, #16]
 8013254:	781a      	ldrb	r2, [r3, #0]
 8013256:	4b4b      	ldr	r3, [pc, #300]	; (8013384 <Ble_Hci_Gap_Gatt_Init+0x190>)
 8013258:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 801325a:	4a4b      	ldr	r2, [pc, #300]	; (8013388 <Ble_Hci_Gap_Gatt_Init+0x194>)
 801325c:	2110      	movs	r1, #16
 801325e:	2018      	movs	r0, #24
 8013260:	f7fa fbfd 	bl	800da5e <aci_hal_write_config_data>
 8013264:	4603      	mov	r3, r0
 8013266:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8013268:	4a48      	ldr	r2, [pc, #288]	; (801338c <Ble_Hci_Gap_Gatt_Init+0x198>)
 801326a:	2110      	movs	r1, #16
 801326c:	2008      	movs	r0, #8
 801326e:	f7fa fbf6 	bl	800da5e <aci_hal_write_config_data>
 8013272:	4603      	mov	r3, r0
 8013274:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8013276:	2118      	movs	r1, #24
 8013278:	2001      	movs	r0, #1
 801327a:	f7fa fc75 	bl	800db68 <aci_hal_set_tx_power_level>
 801327e:	4603      	mov	r3, r0
 8013280:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8013282:	f7fa f893 	bl	800d3ac <aci_gatt_init>
 8013286:	4603      	mov	r3, r0
 8013288:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 801328a:	2300      	movs	r3, #0
 801328c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 801328e:	7bfb      	ldrb	r3, [r7, #15]
 8013290:	f043 0301 	orr.w	r3, r3, #1
 8013294:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8013296:	7bfb      	ldrb	r3, [r7, #15]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d01f      	beq.n	80132dc <Ble_Hci_Gap_Gatt_Init+0xe8>
  {
    const char *name = "STM32WB";
 801329c:	4b3c      	ldr	r3, [pc, #240]	; (8013390 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 801329e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80132a0:	1dba      	adds	r2, r7, #6
 80132a2:	7bf8      	ldrb	r0, [r7, #15]
 80132a4:	1cbb      	adds	r3, r7, #2
 80132a6:	9301      	str	r3, [sp, #4]
 80132a8:	1d3b      	adds	r3, r7, #4
 80132aa:	9300      	str	r3, [sp, #0]
 80132ac:	4613      	mov	r3, r2
 80132ae:	2207      	movs	r2, #7
 80132b0:	2100      	movs	r1, #0
 80132b2:	f7f9 ff38 	bl	800d126 <aci_gap_init>
 80132b6:	4603      	mov	r3, r0
 80132b8:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80132ba:	88fc      	ldrh	r4, [r7, #6]
 80132bc:	88bd      	ldrh	r5, [r7, #4]
 80132be:	68b8      	ldr	r0, [r7, #8]
 80132c0:	f7ec ffae 	bl	8000220 <strlen>
 80132c4:	4603      	mov	r3, r0
 80132c6:	b2da      	uxtb	r2, r3
 80132c8:	68bb      	ldr	r3, [r7, #8]
 80132ca:	9300      	str	r3, [sp, #0]
 80132cc:	4613      	mov	r3, r2
 80132ce:	2200      	movs	r2, #0
 80132d0:	4629      	mov	r1, r5
 80132d2:	4620      	mov	r0, r4
 80132d4:	f7fa fa6d 	bl	800d7b2 <aci_gatt_update_char_value>
 80132d8:	4603      	mov	r3, r0
 80132da:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80132dc:	88f8      	ldrh	r0, [r7, #6]
 80132de:	8879      	ldrh	r1, [r7, #2]
 80132e0:	463b      	mov	r3, r7
 80132e2:	9300      	str	r3, [sp, #0]
 80132e4:	2302      	movs	r3, #2
 80132e6:	2200      	movs	r2, #0
 80132e8:	f7fa fa63 	bl	800d7b2 <aci_gatt_update_char_value>
 80132ec:	4603      	mov	r3, r0
 80132ee:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80132f0:	2202      	movs	r2, #2
 80132f2:	2102      	movs	r1, #2
 80132f4:	2000      	movs	r0, #0
 80132f6:	f7fa fd40 	bl	800dd7a <hci_le_set_default_phy>
 80132fa:	4603      	mov	r3, r0
 80132fc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80132fe:	4b25      	ldr	r3, [pc, #148]	; (8013394 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8013300:	2201      	movs	r2, #1
 8013302:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8013304:	4b23      	ldr	r3, [pc, #140]	; (8013394 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8013306:	781b      	ldrb	r3, [r3, #0]
 8013308:	4618      	mov	r0, r3
 801330a:	f7f9 fdf4 	bl	800cef6 <aci_gap_set_io_capability>
 801330e:	4603      	mov	r3, r0
 8013310:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8013312:	4b20      	ldr	r3, [pc, #128]	; (8013394 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8013314:	2201      	movs	r2, #1
 8013316:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8013318:	4b1e      	ldr	r3, [pc, #120]	; (8013394 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 801331a:	2208      	movs	r2, #8
 801331c:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 801331e:	4b1d      	ldr	r3, [pc, #116]	; (8013394 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8013320:	2210      	movs	r2, #16
 8013322:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8013324:	4b1b      	ldr	r3, [pc, #108]	; (8013394 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8013326:	2200      	movs	r2, #0
 8013328:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 801332a:	4b1a      	ldr	r3, [pc, #104]	; (8013394 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 801332c:	4a1a      	ldr	r2, [pc, #104]	; (8013398 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 801332e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8013330:	4b18      	ldr	r3, [pc, #96]	; (8013394 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8013332:	2201      	movs	r2, #1
 8013334:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8013336:	4b17      	ldr	r3, [pc, #92]	; (8013394 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8013338:	789c      	ldrb	r4, [r3, #2]
 801333a:	4b16      	ldr	r3, [pc, #88]	; (8013394 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 801333c:	785d      	ldrb	r5, [r3, #1]
 801333e:	4b15      	ldr	r3, [pc, #84]	; (8013394 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8013340:	791b      	ldrb	r3, [r3, #4]
 8013342:	4a14      	ldr	r2, [pc, #80]	; (8013394 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8013344:	7952      	ldrb	r2, [r2, #5]
 8013346:	4913      	ldr	r1, [pc, #76]	; (8013394 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8013348:	78c9      	ldrb	r1, [r1, #3]
 801334a:	4812      	ldr	r0, [pc, #72]	; (8013394 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 801334c:	6880      	ldr	r0, [r0, #8]
 801334e:	2600      	movs	r6, #0
 8013350:	9604      	str	r6, [sp, #16]
 8013352:	9003      	str	r0, [sp, #12]
 8013354:	9102      	str	r1, [sp, #8]
 8013356:	9201      	str	r2, [sp, #4]
 8013358:	9300      	str	r3, [sp, #0]
 801335a:	2300      	movs	r3, #0
 801335c:	2201      	movs	r2, #1
 801335e:	4629      	mov	r1, r5
 8013360:	4620      	mov	r0, r4
 8013362:	f7f9 fe1c 	bl	800cf9e <aci_gap_set_authentication_requirement>
 8013366:	4603      	mov	r3, r0
 8013368:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 801336a:	4b0a      	ldr	r3, [pc, #40]	; (8013394 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 801336c:	789b      	ldrb	r3, [r3, #2]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d003      	beq.n	801337a <Ble_Hci_Gap_Gatt_Init+0x186>
  {
    ret = aci_gap_configure_whitelist();
 8013372:	f7f9 fff7 	bl	800d364 <aci_gap_configure_filter_accept_list>
 8013376:	4603      	mov	r3, r0
 8013378:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 801337a:	bf00      	nop
 801337c:	371c      	adds	r7, #28
 801337e:	46bd      	mov	sp, r7
 8013380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013382:	bf00      	nop
 8013384:	20000164 	.word	0x20000164
 8013388:	080184f4 	.word	0x080184f4
 801338c:	08018504 	.word	0x08018504
 8013390:	08018274 	.word	0x08018274
 8013394:	20003138 	.word	0x20003138
 8013398:	0001b207 	.word	0x0001b207

0801339c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 801339c:	b580      	push	{r7, lr}
 801339e:	b08c      	sub	sp, #48	; 0x30
 80133a0:	af08      	add	r7, sp, #32
 80133a2:	4603      	mov	r3, r0
 80133a4:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80133a6:	2392      	movs	r3, #146	; 0x92
 80133a8:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 80133aa:	79fb      	ldrb	r3, [r7, #7]
 80133ac:	2b01      	cmp	r3, #1
 80133ae:	d106      	bne.n	80133be <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 80133b0:	4b2b      	ldr	r3, [pc, #172]	; (8013460 <Adv_Request+0xc4>)
 80133b2:	881b      	ldrh	r3, [r3, #0]
 80133b4:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 80133b6:	4b2b      	ldr	r3, [pc, #172]	; (8013464 <Adv_Request+0xc8>)
 80133b8:	881b      	ldrh	r3, [r3, #0]
 80133ba:	81bb      	strh	r3, [r7, #12]
 80133bc:	e005      	b.n	80133ca <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 80133be:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80133c2:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 80133c4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80133c8:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80133ca:	4b27      	ldr	r3, [pc, #156]	; (8013468 <Adv_Request+0xcc>)
 80133cc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80133d0:	4618      	mov	r0, r3
 80133d2:	f7f3 f913 	bl	80065fc <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 80133d6:	79fb      	ldrb	r3, [r7, #7]
 80133d8:	2b02      	cmp	r3, #2
 80133da:	d10d      	bne.n	80133f8 <Adv_Request+0x5c>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 80133dc:	4b22      	ldr	r3, [pc, #136]	; (8013468 <Adv_Request+0xcc>)
 80133de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80133e2:	2b01      	cmp	r3, #1
 80133e4:	d004      	beq.n	80133f0 <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 80133e6:	4b20      	ldr	r3, [pc, #128]	; (8013468 <Adv_Request+0xcc>)
 80133e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80133ec:	2b02      	cmp	r3, #2
 80133ee:	d103      	bne.n	80133f8 <Adv_Request+0x5c>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 80133f0:	f7f9 fc63 	bl	800ccba <aci_gap_set_non_discoverable>
 80133f4:	4603      	mov	r3, r0
 80133f6:	72fb      	strb	r3, [r7, #11]
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 80133f8:	4a1b      	ldr	r2, [pc, #108]	; (8013468 <Adv_Request+0xcc>)
 80133fa:	79fb      	ldrb	r3, [r7, #7]
 80133fc:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 8013400:	4b19      	ldr	r3, [pc, #100]	; (8013468 <Adv_Request+0xcc>)
 8013402:	7e1b      	ldrb	r3, [r3, #24]
 8013404:	89ba      	ldrh	r2, [r7, #12]
 8013406:	89f9      	ldrh	r1, [r7, #14]
 8013408:	2000      	movs	r0, #0
 801340a:	9006      	str	r0, [sp, #24]
 801340c:	2000      	movs	r0, #0
 801340e:	9005      	str	r0, [sp, #20]
 8013410:	4816      	ldr	r0, [pc, #88]	; (801346c <Adv_Request+0xd0>)
 8013412:	9004      	str	r0, [sp, #16]
 8013414:	9303      	str	r3, [sp, #12]
 8013416:	4b16      	ldr	r3, [pc, #88]	; (8013470 <Adv_Request+0xd4>)
 8013418:	9302      	str	r3, [sp, #8]
 801341a:	2308      	movs	r3, #8
 801341c:	9301      	str	r3, [sp, #4]
 801341e:	2300      	movs	r3, #0
 8013420:	9300      	str	r3, [sp, #0]
 8013422:	2300      	movs	r3, #0
 8013424:	2000      	movs	r0, #0
 8013426:	f7f9 fc6c 	bl	800cd02 <aci_gap_set_discoverable>
 801342a:	4603      	mov	r3, r0
 801342c:	72fb      	strb	r3, [r7, #11]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 801342e:	4911      	ldr	r1, [pc, #68]	; (8013474 <Adv_Request+0xd8>)
 8013430:	200e      	movs	r0, #14
 8013432:	f7f9 ff25 	bl	800d280 <aci_gap_update_adv_data>
 8013436:	4603      	mov	r3, r0
 8013438:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 801343a:	7afb      	ldrb	r3, [r7, #11]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d10a      	bne.n	8013456 <Adv_Request+0xba>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
    }
  }
  else
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 8013440:	79fb      	ldrb	r3, [r7, #7]
 8013442:	2b01      	cmp	r3, #1
 8013444:	d107      	bne.n	8013456 <Adv_Request+0xba>
    {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
      /* Start Timer to STOP ADV - TIMEOUT - and next Restart Low Power Advertising */
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8013446:	4b08      	ldr	r3, [pc, #32]	; (8013468 <Adv_Request+0xcc>)
 8013448:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801344c:	490a      	ldr	r1, [pc, #40]	; (8013478 <Adv_Request+0xdc>)
 801344e:	4618      	mov	r0, r3
 8013450:	f7f3 f958 	bl	8006704 <HW_TS_Start>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 8013454:	bf00      	nop
 8013456:	bf00      	nop
}
 8013458:	3710      	adds	r7, #16
 801345a:	46bd      	mov	sp, r7
 801345c:	bd80      	pop	{r7, pc}
 801345e:	bf00      	nop
 8013460:	200031bc 	.word	0x200031bc
 8013464:	200031be 	.word	0x200031be
 8013468:	20003138 	.word	0x20003138
 801346c:	20003151 	.word	0x20003151
 8013470:	08018514 	.word	0x08018514
 8013474:	20000164 	.word	0x20000164
 8013478:	0001e046 	.word	0x0001e046

0801347c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 801347c:	b580      	push	{r7, lr}
 801347e:	b086      	sub	sp, #24
 8013480:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8013482:	f7ff fd6b 	bl	8012f5c <LL_FLASH_GetUDN>
 8013486:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8013488:	693b      	ldr	r3, [r7, #16]
 801348a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801348e:	d023      	beq.n	80134d8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8013490:	f7ff fd7c 	bl	8012f8c <LL_FLASH_GetSTCompanyID>
 8013494:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8013496:	f7ff fd6d 	bl	8012f74 <LL_FLASH_GetDeviceID>
 801349a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 801349c:	693b      	ldr	r3, [r7, #16]
 801349e:	b2da      	uxtb	r2, r3
 80134a0:	4b16      	ldr	r3, [pc, #88]	; (80134fc <BleGetBdAddress+0x80>)
 80134a2:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80134a4:	693b      	ldr	r3, [r7, #16]
 80134a6:	0a1b      	lsrs	r3, r3, #8
 80134a8:	b2da      	uxtb	r2, r3
 80134aa:	4b14      	ldr	r3, [pc, #80]	; (80134fc <BleGetBdAddress+0x80>)
 80134ac:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	b2da      	uxtb	r2, r3
 80134b2:	4b12      	ldr	r3, [pc, #72]	; (80134fc <BleGetBdAddress+0x80>)
 80134b4:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80134b6:	68bb      	ldr	r3, [r7, #8]
 80134b8:	b2da      	uxtb	r2, r3
 80134ba:	4b10      	ldr	r3, [pc, #64]	; (80134fc <BleGetBdAddress+0x80>)
 80134bc:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80134be:	68bb      	ldr	r3, [r7, #8]
 80134c0:	0a1b      	lsrs	r3, r3, #8
 80134c2:	b2da      	uxtb	r2, r3
 80134c4:	4b0d      	ldr	r3, [pc, #52]	; (80134fc <BleGetBdAddress+0x80>)
 80134c6:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80134c8:	68bb      	ldr	r3, [r7, #8]
 80134ca:	0c1b      	lsrs	r3, r3, #16
 80134cc:	b2da      	uxtb	r2, r3
 80134ce:	4b0b      	ldr	r3, [pc, #44]	; (80134fc <BleGetBdAddress+0x80>)
 80134d0:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80134d2:	4b0a      	ldr	r3, [pc, #40]	; (80134fc <BleGetBdAddress+0x80>)
 80134d4:	617b      	str	r3, [r7, #20]
 80134d6:	e00b      	b.n	80134f0 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80134d8:	2000      	movs	r0, #0
 80134da:	f7fb fca7 	bl	800ee2c <OTP_Read>
 80134de:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d002      	beq.n	80134ec <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	617b      	str	r3, [r7, #20]
 80134ea:	e001      	b.n	80134f0 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80134ec:	4b04      	ldr	r3, [pc, #16]	; (8013500 <BleGetBdAddress+0x84>)
 80134ee:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80134f0:	697b      	ldr	r3, [r7, #20]
}
 80134f2:	4618      	mov	r0, r3
 80134f4:	3718      	adds	r7, #24
 80134f6:	46bd      	mov	sp, r7
 80134f8:	bd80      	pop	{r7, pc}
 80134fa:	bf00      	nop
 80134fc:	20003130 	.word	0x20003130
 8013500:	080184ec 	.word	0x080184ec

08013504 <Add_Advertisment_Service_UUID>:
 *
 *SPECIFIC FUNCTIONS
 *
 *************************************************************/
static void Add_Advertisment_Service_UUID(uint16_t servUUID)
{
 8013504:	b480      	push	{r7}
 8013506:	b083      	sub	sp, #12
 8013508:	af00      	add	r7, sp, #0
 801350a:	4603      	mov	r3, r0
 801350c:	80fb      	strh	r3, [r7, #6]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 801350e:	4b12      	ldr	r3, [pc, #72]	; (8013558 <Add_Advertisment_Service_UUID+0x54>)
 8013510:	7e1b      	ldrb	r3, [r3, #24]
 8013512:	4619      	mov	r1, r3
      (uint8_t) (servUUID & 0xFF);
 8013514:	88fb      	ldrh	r3, [r7, #6]
 8013516:	b2da      	uxtb	r2, r3
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 8013518:	4b0f      	ldr	r3, [pc, #60]	; (8013558 <Add_Advertisment_Service_UUID+0x54>)
 801351a:	440b      	add	r3, r1
 801351c:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen++;
 801351e:	4b0e      	ldr	r3, [pc, #56]	; (8013558 <Add_Advertisment_Service_UUID+0x54>)
 8013520:	7e1b      	ldrb	r3, [r3, #24]
 8013522:	3301      	adds	r3, #1
 8013524:	b2da      	uxtb	r2, r3
 8013526:	4b0c      	ldr	r3, [pc, #48]	; (8013558 <Add_Advertisment_Service_UUID+0x54>)
 8013528:	761a      	strb	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
      (uint8_t) (servUUID >> 8) & 0xFF;
 801352a:	88fb      	ldrh	r3, [r7, #6]
 801352c:	0a1b      	lsrs	r3, r3, #8
 801352e:	b29a      	uxth	r2, r3
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 8013530:	4b09      	ldr	r3, [pc, #36]	; (8013558 <Add_Advertisment_Service_UUID+0x54>)
 8013532:	7e1b      	ldrb	r3, [r3, #24]
 8013534:	4619      	mov	r1, r3
      (uint8_t) (servUUID >> 8) & 0xFF;
 8013536:	b2d2      	uxtb	r2, r2
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 8013538:	4b07      	ldr	r3, [pc, #28]	; (8013558 <Add_Advertisment_Service_UUID+0x54>)
 801353a:	440b      	add	r3, r1
 801353c:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen++;
 801353e:	4b06      	ldr	r3, [pc, #24]	; (8013558 <Add_Advertisment_Service_UUID+0x54>)
 8013540:	7e1b      	ldrb	r3, [r3, #24]
 8013542:	3301      	adds	r3, #1
 8013544:	b2da      	uxtb	r2, r3
 8013546:	4b04      	ldr	r3, [pc, #16]	; (8013558 <Add_Advertisment_Service_UUID+0x54>)
 8013548:	761a      	strb	r2, [r3, #24]

  return;
 801354a:	bf00      	nop
}
 801354c:	370c      	adds	r7, #12
 801354e:	46bd      	mov	sp, r7
 8013550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013554:	4770      	bx	lr
 8013556:	bf00      	nop
 8013558:	20003138 	.word	0x20003138

0801355c <Adv_Mgr>:

static void Adv_Mgr(void)
{
 801355c:	b580      	push	{r7, lr}
 801355e:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as an aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  osThreadFlagsSet(AdvUpdateProcessId, 1);
 8013560:	4b03      	ldr	r3, [pc, #12]	; (8013570 <Adv_Mgr+0x14>)
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	2101      	movs	r1, #1
 8013566:	4618      	mov	r0, r3
 8013568:	f7fb fe66 	bl	800f238 <osThreadFlagsSet>

  return;
 801356c:	bf00      	nop
}
 801356e:	bd80      	pop	{r7, pc}
 8013570:	200031c8 	.word	0x200031c8

08013574 <AdvUpdateProcess>:

static void AdvUpdateProcess(void *argument)
{
 8013574:	b580      	push	{r7, lr}
 8013576:	b082      	sub	sp, #8
 8013578:	af00      	add	r7, sp, #0
 801357a:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 801357c:	f04f 32ff 	mov.w	r2, #4294967295
 8013580:	2100      	movs	r1, #0
 8013582:	2001      	movs	r0, #1
 8013584:	f7fb fea6 	bl	800f2d4 <osThreadFlagsWait>
    Adv_Update();
 8013588:	f000 f801 	bl	801358e <Adv_Update>
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 801358c:	e7f6      	b.n	801357c <AdvUpdateProcess+0x8>

0801358e <Adv_Update>:
  }
}

static void Adv_Update(void)
{
 801358e:	b580      	push	{r7, lr}
 8013590:	af00      	add	r7, sp, #0
  Adv_Request(APP_BLE_LP_ADV);
 8013592:	2002      	movs	r0, #2
 8013594:	f7ff ff02 	bl	801339c <Adv_Request>

  return;
 8013598:	bf00      	nop
}
 801359a:	bd80      	pop	{r7, pc}

0801359c <HciUserEvtProcess>:

static void HciUserEvtProcess(void *argument)
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b082      	sub	sp, #8
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80135a4:	f04f 32ff 	mov.w	r2, #4294967295
 80135a8:	2100      	movs	r1, #0
 80135aa:	2001      	movs	r0, #1
 80135ac:	f7fb fe92 	bl	800f2d4 <osThreadFlagsWait>
    hci_user_evt_proc();
 80135b0:	f7fa ffd2 	bl	800e558 <hci_user_evt_proc>
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80135b4:	e7f6      	b.n	80135a4 <HciUserEvtProcess+0x8>
	...

080135b8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b082      	sub	sp, #8
 80135bc:	af00      	add	r7, sp, #0
 80135be:	6078      	str	r0, [r7, #4]
  UNUSED(p_Data);
  osThreadFlagsSet(HciUserEvtProcessId, 1);
 80135c0:	4b04      	ldr	r3, [pc, #16]	; (80135d4 <hci_notify_asynch_evt+0x1c>)
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	2101      	movs	r1, #1
 80135c6:	4618      	mov	r0, r3
 80135c8:	f7fb fe36 	bl	800f238 <osThreadFlagsSet>

  return;
 80135cc:	bf00      	nop
}
 80135ce:	3708      	adds	r7, #8
 80135d0:	46bd      	mov	sp, r7
 80135d2:	bd80      	pop	{r7, pc}
 80135d4:	200031cc 	.word	0x200031cc

080135d8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80135d8:	b580      	push	{r7, lr}
 80135da:	b082      	sub	sp, #8
 80135dc:	af00      	add	r7, sp, #0
 80135de:	6078      	str	r0, [r7, #4]
  UNUSED(Flag);
  osSemaphoreRelease(SemHciId);
 80135e0:	4b04      	ldr	r3, [pc, #16]	; (80135f4 <hci_cmd_resp_release+0x1c>)
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	4618      	mov	r0, r3
 80135e6:	f7fc f8fb 	bl	800f7e0 <osSemaphoreRelease>

  return;
 80135ea:	bf00      	nop
}
 80135ec:	3708      	adds	r7, #8
 80135ee:	46bd      	mov	sp, r7
 80135f0:	bd80      	pop	{r7, pc}
 80135f2:	bf00      	nop
 80135f4:	200031c4 	.word	0x200031c4

080135f8 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b082      	sub	sp, #8
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
  UNUSED(Timeout);
  osSemaphoreAcquire(SemHciId, osWaitForever);
 8013600:	4b05      	ldr	r3, [pc, #20]	; (8013618 <hci_cmd_resp_wait+0x20>)
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	f04f 31ff 	mov.w	r1, #4294967295
 8013608:	4618      	mov	r0, r3
 801360a:	f7fc f897 	bl	800f73c <osSemaphoreAcquire>

  return;
 801360e:	bf00      	nop
}
 8013610:	3708      	adds	r7, #8
 8013612:	46bd      	mov	sp, r7
 8013614:	bd80      	pop	{r7, pc}
 8013616:	bf00      	nop
 8013618:	200031c4 	.word	0x200031c4

0801361c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b084      	sub	sp, #16
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	685b      	ldr	r3, [r3, #4]
 801362c:	3308      	adds	r3, #8
 801362e:	4618      	mov	r0, r3
 8013630:	f7fa fe30 	bl	800e294 <SVCCTL_UserEvtRx>
 8013634:	4603      	mov	r3, r0
 8013636:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8013638:	7afb      	ldrb	r3, [r7, #11]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d003      	beq.n	8013646 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	2201      	movs	r2, #1
 8013642:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8013644:	e003      	b.n	801364e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	2200      	movs	r2, #0
 801364a:	701a      	strb	r2, [r3, #0]
  return;
 801364c:	bf00      	nop
}
 801364e:	3710      	adds	r7, #16
 8013650:	46bd      	mov	sp, r7
 8013652:	bd80      	pop	{r7, pc}

08013654 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b082      	sub	sp, #8
 8013658:	af00      	add	r7, sp, #0
 801365a:	4603      	mov	r3, r0
 801365c:	71fb      	strb	r3, [r7, #7]
  switch (Status)
 801365e:	79fb      	ldrb	r3, [r7, #7]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d002      	beq.n	801366a <BLE_StatusNot+0x16>
 8013664:	2b01      	cmp	r3, #1
 8013666:	d008      	beq.n	801367a <BLE_StatusNot+0x26>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8013668:	e00d      	b.n	8013686 <BLE_StatusNot+0x32>
      osMutexAcquire(MtxHciId, osWaitForever);
 801366a:	4b09      	ldr	r3, [pc, #36]	; (8013690 <BLE_StatusNot+0x3c>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	f04f 31ff 	mov.w	r1, #4294967295
 8013672:	4618      	mov	r0, r3
 8013674:	f7fb ff50 	bl	800f518 <osMutexAcquire>
      break;
 8013678:	e005      	b.n	8013686 <BLE_StatusNot+0x32>
      osMutexRelease(MtxHciId);
 801367a:	4b05      	ldr	r3, [pc, #20]	; (8013690 <BLE_StatusNot+0x3c>)
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	4618      	mov	r0, r3
 8013680:	f7fb ff95 	bl	800f5ae <osMutexRelease>
      break;
 8013684:	bf00      	nop
  }

  return;
 8013686:	bf00      	nop
}
 8013688:	3708      	adds	r7, #8
 801368a:	46bd      	mov	sp, r7
 801368c:	bd80      	pop	{r7, pc}
 801368e:	bf00      	nop
 8013690:	200031c0 	.word	0x200031c0

08013694 <DISAPP_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void DISAPP_Init(void)
{
 8013694:	b480      	push	{r7}
 8013696:	af00      	add	r7, sp, #0
/* USER CODE BEGIN DISAPP_Init */

/* USER CODE END DISAPP_Init */
}
 8013698:	bf00      	nop
 801369a:	46bd      	mov	sp, r7
 801369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a0:	4770      	bx	lr

080136a2 <HRS_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void HRS_Notification(HRS_App_Notification_evt_t *pNotification)
{
 80136a2:	b480      	push	{r7}
 80136a4:	b083      	sub	sp, #12
 80136a6:	af00      	add	r7, sp, #0
 80136a8:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HRS_Notification_1 */

/* USER CODE END HRS_Notification_1 */
  switch(pNotification->HRS_Evt_Opcode)
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	781b      	ldrb	r3, [r3, #0]
 80136ae:	2b02      	cmp	r3, #2
 80136b0:	d006      	beq.n	80136c0 <HRS_Notification+0x1e>
 80136b2:	2b02      	cmp	r3, #2
 80136b4:	dc06      	bgt.n	80136c4 <HRS_Notification+0x22>
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d006      	beq.n	80136c8 <HRS_Notification+0x26>
 80136ba:	2b01      	cmp	r3, #1
 80136bc:	d006      	beq.n	80136cc <HRS_Notification+0x2a>

   default:
/* USER CODE BEGIN HRS_Notification_Default */

/* USER CODE END HRS_Notification_Default */
      break;
 80136be:	e001      	b.n	80136c4 <HRS_Notification+0x22>
      break;
 80136c0:	bf00      	nop
 80136c2:	e004      	b.n	80136ce <HRS_Notification+0x2c>
      break;
 80136c4:	bf00      	nop
 80136c6:	e002      	b.n	80136ce <HRS_Notification+0x2c>
      break;
 80136c8:	bf00      	nop
 80136ca:	e000      	b.n	80136ce <HRS_Notification+0x2c>
      break;
 80136cc:	bf00      	nop
  }
/* USER CODE BEGIN HRS_Notification_2 */

/* USER CODE END HRS_Notification_2 */
  return;
 80136ce:	bf00      	nop
}
 80136d0:	370c      	adds	r7, #12
 80136d2:	46bd      	mov	sp, r7
 80136d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d8:	4770      	bx	lr
	...

080136dc <HRSAPP_Init>:

void HRSAPP_Init(void)
{
 80136dc:	b580      	push	{r7, lr}
 80136de:	af00      	add	r7, sp, #0
  HrsProcessId = osThreadNew(HrsProcess, NULL, &HrsProcess_attr);
 80136e0:	4a04      	ldr	r2, [pc, #16]	; (80136f4 <HRSAPP_Init+0x18>)
 80136e2:	2100      	movs	r1, #0
 80136e4:	4804      	ldr	r0, [pc, #16]	; (80136f8 <HRSAPP_Init+0x1c>)
 80136e6:	f7fb fd15 	bl	800f114 <osThreadNew>
 80136ea:	4603      	mov	r3, r0
 80136ec:	4a03      	ldr	r2, [pc, #12]	; (80136fc <HRSAPP_Init+0x20>)
 80136ee:	6013      	str	r3, [r2, #0]
/* USER CODE BEGIN HRSAPP_Init */

/* USER CODE END HRSAPP_Init */
  return;
 80136f0:	bf00      	nop
}
 80136f2:	bd80      	pop	{r7, pc}
 80136f4:	08018564 	.word	0x08018564
 80136f8:	08013701 	.word	0x08013701
 80136fc:	200031d0 	.word	0x200031d0

08013700 <HrsProcess>:

static void HrsProcess(void *argument)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b082      	sub	sp, #8
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8013708:	f04f 32ff 	mov.w	r2, #4294967295
 801370c:	2100      	movs	r1, #0
 801370e:	2001      	movs	r0, #1
 8013710:	f7fb fde0 	bl	800f2d4 <osThreadFlagsWait>
    HRSAPP_Measurement( );
 8013714:	f000 f801 	bl	801371a <HRSAPP_Measurement>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8013718:	e7f6      	b.n	8013708 <HrsProcess+0x8>

0801371a <HRSAPP_Measurement>:
  }
}

static void HRSAPP_Measurement(void)
{
 801371a:	b480      	push	{r7}
 801371c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN HRSAPP_Measurement */

/* USER CODE END HRSAPP_Measurement */
  return;
 801371e:	bf00      	nop
}
 8013720:	46bd      	mov	sp, r7
 8013722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013726:	4770      	bx	lr

08013728 <LL_PWR_EnableBootC2>:
{
 8013728:	b480      	push	{r7}
 801372a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 801372c:	4b05      	ldr	r3, [pc, #20]	; (8013744 <LL_PWR_EnableBootC2+0x1c>)
 801372e:	68db      	ldr	r3, [r3, #12]
 8013730:	4a04      	ldr	r2, [pc, #16]	; (8013744 <LL_PWR_EnableBootC2+0x1c>)
 8013732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013736:	60d3      	str	r3, [r2, #12]
}
 8013738:	bf00      	nop
 801373a:	46bd      	mov	sp, r7
 801373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013740:	4770      	bx	lr
 8013742:	bf00      	nop
 8013744:	58000400 	.word	0x58000400

08013748 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8013748:	b480      	push	{r7}
 801374a:	b083      	sub	sp, #12
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8013750:	4b06      	ldr	r3, [pc, #24]	; (801376c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8013752:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8013756:	4905      	ldr	r1, [pc, #20]	; (801376c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	4313      	orrs	r3, r2
 801375c:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8013760:	bf00      	nop
 8013762:	370c      	adds	r7, #12
 8013764:	46bd      	mov	sp, r7
 8013766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376a:	4770      	bx	lr
 801376c:	58000800 	.word	0x58000800

08013770 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8013770:	b480      	push	{r7}
 8013772:	b083      	sub	sp, #12
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8013778:	4b05      	ldr	r3, [pc, #20]	; (8013790 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801377a:	6a1a      	ldr	r2, [r3, #32]
 801377c:	4904      	ldr	r1, [pc, #16]	; (8013790 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	4313      	orrs	r3, r2
 8013782:	620b      	str	r3, [r1, #32]
}
 8013784:	bf00      	nop
 8013786:	370c      	adds	r7, #12
 8013788:	46bd      	mov	sp, r7
 801378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801378e:	4770      	bx	lr
 8013790:	58000800 	.word	0x58000800

08013794 <LL_AHB3_GRP1_EnableClock>:
{
 8013794:	b480      	push	{r7}
 8013796:	b085      	sub	sp, #20
 8013798:	af00      	add	r7, sp, #0
 801379a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 801379c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80137a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80137a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	4313      	orrs	r3, r2
 80137aa:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80137ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80137b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	4013      	ands	r3, r2
 80137b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80137b8:	68fb      	ldr	r3, [r7, #12]
}
 80137ba:	bf00      	nop
 80137bc:	3714      	adds	r7, #20
 80137be:	46bd      	mov	sp, r7
 80137c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c4:	4770      	bx	lr

080137c6 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80137c6:	b480      	push	{r7}
 80137c8:	b085      	sub	sp, #20
 80137ca:	af00      	add	r7, sp, #0
 80137cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80137ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80137d2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80137d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	4313      	orrs	r3, r2
 80137de:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80137e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80137e6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	4013      	ands	r3, r2
 80137ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80137f0:	68fb      	ldr	r3, [r7, #12]
}
 80137f2:	bf00      	nop
 80137f4:	3714      	adds	r7, #20
 80137f6:	46bd      	mov	sp, r7
 80137f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137fc:	4770      	bx	lr

080137fe <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 80137fe:	b480      	push	{r7}
 8013800:	b083      	sub	sp, #12
 8013802:	af00      	add	r7, sp, #0
 8013804:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	601a      	str	r2, [r3, #0]
}
 8013812:	bf00      	nop
 8013814:	370c      	adds	r7, #12
 8013816:	46bd      	mov	sp, r7
 8013818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801381c:	4770      	bx	lr

0801381e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 801381e:	b480      	push	{r7}
 8013820:	b083      	sub	sp, #12
 8013822:	af00      	add	r7, sp, #0
 8013824:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	f043 0201 	orr.w	r2, r3, #1
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	601a      	str	r2, [r3, #0]
}
 8013832:	bf00      	nop
 8013834:	370c      	adds	r7, #12
 8013836:	46bd      	mov	sp, r7
 8013838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383c:	4770      	bx	lr

0801383e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801383e:	b480      	push	{r7}
 8013840:	b083      	sub	sp, #12
 8013842:	af00      	add	r7, sp, #0
 8013844:	6078      	str	r0, [r7, #4]
 8013846:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	685a      	ldr	r2, [r3, #4]
 801384c:	683b      	ldr	r3, [r7, #0]
 801384e:	041b      	lsls	r3, r3, #16
 8013850:	43db      	mvns	r3, r3
 8013852:	401a      	ands	r2, r3
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	605a      	str	r2, [r3, #4]
}
 8013858:	bf00      	nop
 801385a:	370c      	adds	r7, #12
 801385c:	46bd      	mov	sp, r7
 801385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013862:	4770      	bx	lr

08013864 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8013864:	b480      	push	{r7}
 8013866:	b083      	sub	sp, #12
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
 801386c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	685a      	ldr	r2, [r3, #4]
 8013872:	683b      	ldr	r3, [r7, #0]
 8013874:	43db      	mvns	r3, r3
 8013876:	401a      	ands	r2, r3
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	605a      	str	r2, [r3, #4]
}
 801387c:	bf00      	nop
 801387e:	370c      	adds	r7, #12
 8013880:	46bd      	mov	sp, r7
 8013882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013886:	4770      	bx	lr

08013888 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8013888:	b480      	push	{r7}
 801388a:	b083      	sub	sp, #12
 801388c:	af00      	add	r7, sp, #0
 801388e:	6078      	str	r0, [r7, #4]
 8013890:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8013892:	683b      	ldr	r3, [r7, #0]
 8013894:	041a      	lsls	r2, r3, #16
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	609a      	str	r2, [r3, #8]
}
 801389a:	bf00      	nop
 801389c:	370c      	adds	r7, #12
 801389e:	46bd      	mov	sp, r7
 80138a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a4:	4770      	bx	lr

080138a6 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80138a6:	b480      	push	{r7}
 80138a8:	b083      	sub	sp, #12
 80138aa:	af00      	add	r7, sp, #0
 80138ac:	6078      	str	r0, [r7, #4]
 80138ae:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	68da      	ldr	r2, [r3, #12]
 80138b4:	683b      	ldr	r3, [r7, #0]
 80138b6:	4013      	ands	r3, r2
 80138b8:	683a      	ldr	r2, [r7, #0]
 80138ba:	429a      	cmp	r2, r3
 80138bc:	d101      	bne.n	80138c2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80138be:	2301      	movs	r3, #1
 80138c0:	e000      	b.n	80138c4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80138c2:	2300      	movs	r3, #0
}
 80138c4:	4618      	mov	r0, r3
 80138c6:	370c      	adds	r7, #12
 80138c8:	46bd      	mov	sp, r7
 80138ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ce:	4770      	bx	lr

080138d0 <HW_IPCC_Enable>:
}
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80138d0:	b580      	push	{r7, lr}
 80138d2:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80138d4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80138d8:	f7ff ff75 	bl	80137c6 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80138dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80138e0:	f7ff ff46 	bl	8013770 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80138e4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80138e8:	f7ff ff2e 	bl	8013748 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80138ec:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80138ee:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80138f0:	f7ff ff1a 	bl	8013728 <LL_PWR_EnableBootC2>

  return;
 80138f4:	bf00      	nop
}
 80138f6:	bd80      	pop	{r7, pc}

080138f8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80138fc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8013900:	f7ff ff48 	bl	8013794 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8013904:	4806      	ldr	r0, [pc, #24]	; (8013920 <HW_IPCC_Init+0x28>)
 8013906:	f7ff ff8a 	bl	801381e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 801390a:	4805      	ldr	r0, [pc, #20]	; (8013920 <HW_IPCC_Init+0x28>)
 801390c:	f7ff ff77 	bl	80137fe <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8013910:	202c      	movs	r0, #44	; 0x2c
 8013912:	f7f4 f86b 	bl	80079ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8013916:	202d      	movs	r0, #45	; 0x2d
 8013918:	f7f4 f868 	bl	80079ec <HAL_NVIC_EnableIRQ>

  return;
 801391c:	bf00      	nop
}
 801391e:	bd80      	pop	{r7, pc}
 8013920:	58000c00 	.word	0x58000c00

08013924 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8013924:	b580      	push	{r7, lr}
 8013926:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8013928:	2101      	movs	r1, #1
 801392a:	4802      	ldr	r0, [pc, #8]	; (8013934 <HW_IPCC_BLE_Init+0x10>)
 801392c:	f7ff ff9a 	bl	8013864 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8013930:	bf00      	nop
}
 8013932:	bd80      	pop	{r7, pc}
 8013934:	58000c00 	.word	0x58000c00

08013938 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8013938:	b580      	push	{r7, lr}
 801393a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 801393c:	2101      	movs	r1, #1
 801393e:	4802      	ldr	r0, [pc, #8]	; (8013948 <HW_IPCC_BLE_SendCmd+0x10>)
 8013940:	f7ff ffa2 	bl	8013888 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8013944:	bf00      	nop
}
 8013946:	bd80      	pop	{r7, pc}
 8013948:	58000c00 	.word	0x58000c00

0801394c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 801394c:	b580      	push	{r7, lr}
 801394e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8013950:	2102      	movs	r1, #2
 8013952:	4802      	ldr	r0, [pc, #8]	; (801395c <HW_IPCC_SYS_Init+0x10>)
 8013954:	f7ff ff86 	bl	8013864 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8013958:	bf00      	nop
}
 801395a:	bd80      	pop	{r7, pc}
 801395c:	58000c00 	.word	0x58000c00

08013960 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8013960:	b580      	push	{r7, lr}
 8013962:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8013964:	2102      	movs	r1, #2
 8013966:	4804      	ldr	r0, [pc, #16]	; (8013978 <HW_IPCC_SYS_SendCmd+0x18>)
 8013968:	f7ff ff8e 	bl	8013888 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801396c:	2102      	movs	r1, #2
 801396e:	4802      	ldr	r0, [pc, #8]	; (8013978 <HW_IPCC_SYS_SendCmd+0x18>)
 8013970:	f7ff ff65 	bl	801383e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8013974:	bf00      	nop
}
 8013976:	bd80      	pop	{r7, pc}
 8013978:	58000c00 	.word	0x58000c00

0801397c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 801397c:	b580      	push	{r7, lr}
 801397e:	b082      	sub	sp, #8
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8013984:	2108      	movs	r1, #8
 8013986:	480c      	ldr	r0, [pc, #48]	; (80139b8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8013988:	f7ff ff8d 	bl	80138a6 <LL_C1_IPCC_IsActiveFlag_CHx>
 801398c:	4603      	mov	r3, r0
 801398e:	2b00      	cmp	r3, #0
 8013990:	d007      	beq.n	80139a2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8013992:	4a0a      	ldr	r2, [pc, #40]	; (80139bc <HW_IPCC_MM_SendFreeBuf+0x40>)
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8013998:	2108      	movs	r1, #8
 801399a:	4807      	ldr	r0, [pc, #28]	; (80139b8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801399c:	f7ff ff4f 	bl	801383e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80139a0:	e006      	b.n	80139b0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80139a6:	2108      	movs	r1, #8
 80139a8:	4803      	ldr	r0, [pc, #12]	; (80139b8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80139aa:	f7ff ff6d 	bl	8013888 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80139ae:	bf00      	nop
}
 80139b0:	3708      	adds	r7, #8
 80139b2:	46bd      	mov	sp, r7
 80139b4:	bd80      	pop	{r7, pc}
 80139b6:	bf00      	nop
 80139b8:	58000c00 	.word	0x58000c00
 80139bc:	200031d4 	.word	0x200031d4

080139c0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80139c4:	2108      	movs	r1, #8
 80139c6:	4802      	ldr	r0, [pc, #8]	; (80139d0 <HW_IPCC_TRACES_Init+0x10>)
 80139c8:	f7ff ff4c 	bl	8013864 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80139cc:	bf00      	nop
}
 80139ce:	bd80      	pop	{r7, pc}
 80139d0:	58000c00 	.word	0x58000c00

080139d4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80139d4:	b480      	push	{r7}
 80139d6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80139d8:	4b05      	ldr	r3, [pc, #20]	; (80139f0 <UTIL_LPM_Init+0x1c>)
 80139da:	2200      	movs	r2, #0
 80139dc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80139de:	4b05      	ldr	r3, [pc, #20]	; (80139f4 <UTIL_LPM_Init+0x20>)
 80139e0:	2200      	movs	r2, #0
 80139e2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80139e4:	bf00      	nop
 80139e6:	46bd      	mov	sp, r7
 80139e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ec:	4770      	bx	lr
 80139ee:	bf00      	nop
 80139f0:	200031d8 	.word	0x200031d8
 80139f4:	200031dc 	.word	0x200031dc

080139f8 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80139f8:	b480      	push	{r7}
 80139fa:	b087      	sub	sp, #28
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	6078      	str	r0, [r7, #4]
 8013a00:	460b      	mov	r3, r1
 8013a02:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013a04:	f3ef 8310 	mrs	r3, PRIMASK
 8013a08:	613b      	str	r3, [r7, #16]
  return(result);
 8013a0a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8013a0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013a0e:	b672      	cpsid	i
}
 8013a10:	bf00      	nop
  
  switch(state)
 8013a12:	78fb      	ldrb	r3, [r7, #3]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d008      	beq.n	8013a2a <UTIL_LPM_SetOffMode+0x32>
 8013a18:	2b01      	cmp	r3, #1
 8013a1a:	d10e      	bne.n	8013a3a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8013a1c:	4b0d      	ldr	r3, [pc, #52]	; (8013a54 <UTIL_LPM_SetOffMode+0x5c>)
 8013a1e:	681a      	ldr	r2, [r3, #0]
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	4313      	orrs	r3, r2
 8013a24:	4a0b      	ldr	r2, [pc, #44]	; (8013a54 <UTIL_LPM_SetOffMode+0x5c>)
 8013a26:	6013      	str	r3, [r2, #0]
      break;
 8013a28:	e008      	b.n	8013a3c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	43da      	mvns	r2, r3
 8013a2e:	4b09      	ldr	r3, [pc, #36]	; (8013a54 <UTIL_LPM_SetOffMode+0x5c>)
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	4013      	ands	r3, r2
 8013a34:	4a07      	ldr	r2, [pc, #28]	; (8013a54 <UTIL_LPM_SetOffMode+0x5c>)
 8013a36:	6013      	str	r3, [r2, #0]
      break;
 8013a38:	e000      	b.n	8013a3c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8013a3a:	bf00      	nop
 8013a3c:	697b      	ldr	r3, [r7, #20]
 8013a3e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	f383 8810 	msr	PRIMASK, r3
}
 8013a46:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8013a48:	bf00      	nop
 8013a4a:	371c      	adds	r7, #28
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a52:	4770      	bx	lr
 8013a54:	200031dc 	.word	0x200031dc

08013a58 <__cvt>:
 8013a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013a5c:	ec55 4b10 	vmov	r4, r5, d0
 8013a60:	2d00      	cmp	r5, #0
 8013a62:	460e      	mov	r6, r1
 8013a64:	4619      	mov	r1, r3
 8013a66:	462b      	mov	r3, r5
 8013a68:	bfbb      	ittet	lt
 8013a6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013a6e:	461d      	movlt	r5, r3
 8013a70:	2300      	movge	r3, #0
 8013a72:	232d      	movlt	r3, #45	; 0x2d
 8013a74:	700b      	strb	r3, [r1, #0]
 8013a76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013a78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013a7c:	4691      	mov	r9, r2
 8013a7e:	f023 0820 	bic.w	r8, r3, #32
 8013a82:	bfbc      	itt	lt
 8013a84:	4622      	movlt	r2, r4
 8013a86:	4614      	movlt	r4, r2
 8013a88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013a8c:	d005      	beq.n	8013a9a <__cvt+0x42>
 8013a8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013a92:	d100      	bne.n	8013a96 <__cvt+0x3e>
 8013a94:	3601      	adds	r6, #1
 8013a96:	2102      	movs	r1, #2
 8013a98:	e000      	b.n	8013a9c <__cvt+0x44>
 8013a9a:	2103      	movs	r1, #3
 8013a9c:	ab03      	add	r3, sp, #12
 8013a9e:	9301      	str	r3, [sp, #4]
 8013aa0:	ab02      	add	r3, sp, #8
 8013aa2:	9300      	str	r3, [sp, #0]
 8013aa4:	ec45 4b10 	vmov	d0, r4, r5
 8013aa8:	4653      	mov	r3, sl
 8013aaa:	4632      	mov	r2, r6
 8013aac:	f000 fee4 	bl	8014878 <_dtoa_r>
 8013ab0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013ab4:	4607      	mov	r7, r0
 8013ab6:	d102      	bne.n	8013abe <__cvt+0x66>
 8013ab8:	f019 0f01 	tst.w	r9, #1
 8013abc:	d022      	beq.n	8013b04 <__cvt+0xac>
 8013abe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013ac2:	eb07 0906 	add.w	r9, r7, r6
 8013ac6:	d110      	bne.n	8013aea <__cvt+0x92>
 8013ac8:	783b      	ldrb	r3, [r7, #0]
 8013aca:	2b30      	cmp	r3, #48	; 0x30
 8013acc:	d10a      	bne.n	8013ae4 <__cvt+0x8c>
 8013ace:	2200      	movs	r2, #0
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	4620      	mov	r0, r4
 8013ad4:	4629      	mov	r1, r5
 8013ad6:	f7ec ffcf 	bl	8000a78 <__aeabi_dcmpeq>
 8013ada:	b918      	cbnz	r0, 8013ae4 <__cvt+0x8c>
 8013adc:	f1c6 0601 	rsb	r6, r6, #1
 8013ae0:	f8ca 6000 	str.w	r6, [sl]
 8013ae4:	f8da 3000 	ldr.w	r3, [sl]
 8013ae8:	4499      	add	r9, r3
 8013aea:	2200      	movs	r2, #0
 8013aec:	2300      	movs	r3, #0
 8013aee:	4620      	mov	r0, r4
 8013af0:	4629      	mov	r1, r5
 8013af2:	f7ec ffc1 	bl	8000a78 <__aeabi_dcmpeq>
 8013af6:	b108      	cbz	r0, 8013afc <__cvt+0xa4>
 8013af8:	f8cd 900c 	str.w	r9, [sp, #12]
 8013afc:	2230      	movs	r2, #48	; 0x30
 8013afe:	9b03      	ldr	r3, [sp, #12]
 8013b00:	454b      	cmp	r3, r9
 8013b02:	d307      	bcc.n	8013b14 <__cvt+0xbc>
 8013b04:	9b03      	ldr	r3, [sp, #12]
 8013b06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013b08:	1bdb      	subs	r3, r3, r7
 8013b0a:	4638      	mov	r0, r7
 8013b0c:	6013      	str	r3, [r2, #0]
 8013b0e:	b004      	add	sp, #16
 8013b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b14:	1c59      	adds	r1, r3, #1
 8013b16:	9103      	str	r1, [sp, #12]
 8013b18:	701a      	strb	r2, [r3, #0]
 8013b1a:	e7f0      	b.n	8013afe <__cvt+0xa6>

08013b1c <__exponent>:
 8013b1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013b1e:	4603      	mov	r3, r0
 8013b20:	2900      	cmp	r1, #0
 8013b22:	bfb8      	it	lt
 8013b24:	4249      	neglt	r1, r1
 8013b26:	f803 2b02 	strb.w	r2, [r3], #2
 8013b2a:	bfb4      	ite	lt
 8013b2c:	222d      	movlt	r2, #45	; 0x2d
 8013b2e:	222b      	movge	r2, #43	; 0x2b
 8013b30:	2909      	cmp	r1, #9
 8013b32:	7042      	strb	r2, [r0, #1]
 8013b34:	dd2a      	ble.n	8013b8c <__exponent+0x70>
 8013b36:	f10d 0207 	add.w	r2, sp, #7
 8013b3a:	4617      	mov	r7, r2
 8013b3c:	260a      	movs	r6, #10
 8013b3e:	4694      	mov	ip, r2
 8013b40:	fb91 f5f6 	sdiv	r5, r1, r6
 8013b44:	fb06 1415 	mls	r4, r6, r5, r1
 8013b48:	3430      	adds	r4, #48	; 0x30
 8013b4a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8013b4e:	460c      	mov	r4, r1
 8013b50:	2c63      	cmp	r4, #99	; 0x63
 8013b52:	f102 32ff 	add.w	r2, r2, #4294967295
 8013b56:	4629      	mov	r1, r5
 8013b58:	dcf1      	bgt.n	8013b3e <__exponent+0x22>
 8013b5a:	3130      	adds	r1, #48	; 0x30
 8013b5c:	f1ac 0402 	sub.w	r4, ip, #2
 8013b60:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013b64:	1c41      	adds	r1, r0, #1
 8013b66:	4622      	mov	r2, r4
 8013b68:	42ba      	cmp	r2, r7
 8013b6a:	d30a      	bcc.n	8013b82 <__exponent+0x66>
 8013b6c:	f10d 0209 	add.w	r2, sp, #9
 8013b70:	eba2 020c 	sub.w	r2, r2, ip
 8013b74:	42bc      	cmp	r4, r7
 8013b76:	bf88      	it	hi
 8013b78:	2200      	movhi	r2, #0
 8013b7a:	4413      	add	r3, r2
 8013b7c:	1a18      	subs	r0, r3, r0
 8013b7e:	b003      	add	sp, #12
 8013b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b82:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013b86:	f801 5f01 	strb.w	r5, [r1, #1]!
 8013b8a:	e7ed      	b.n	8013b68 <__exponent+0x4c>
 8013b8c:	2330      	movs	r3, #48	; 0x30
 8013b8e:	3130      	adds	r1, #48	; 0x30
 8013b90:	7083      	strb	r3, [r0, #2]
 8013b92:	70c1      	strb	r1, [r0, #3]
 8013b94:	1d03      	adds	r3, r0, #4
 8013b96:	e7f1      	b.n	8013b7c <__exponent+0x60>

08013b98 <_printf_float>:
 8013b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b9c:	ed2d 8b02 	vpush	{d8}
 8013ba0:	b08d      	sub	sp, #52	; 0x34
 8013ba2:	460c      	mov	r4, r1
 8013ba4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013ba8:	4616      	mov	r6, r2
 8013baa:	461f      	mov	r7, r3
 8013bac:	4605      	mov	r5, r0
 8013bae:	f000 fcff 	bl	80145b0 <_localeconv_r>
 8013bb2:	f8d0 a000 	ldr.w	sl, [r0]
 8013bb6:	4650      	mov	r0, sl
 8013bb8:	f7ec fb32 	bl	8000220 <strlen>
 8013bbc:	2300      	movs	r3, #0
 8013bbe:	930a      	str	r3, [sp, #40]	; 0x28
 8013bc0:	6823      	ldr	r3, [r4, #0]
 8013bc2:	9305      	str	r3, [sp, #20]
 8013bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8013bc8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013bcc:	3307      	adds	r3, #7
 8013bce:	f023 0307 	bic.w	r3, r3, #7
 8013bd2:	f103 0208 	add.w	r2, r3, #8
 8013bd6:	f8c8 2000 	str.w	r2, [r8]
 8013bda:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013bde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013be2:	9307      	str	r3, [sp, #28]
 8013be4:	f8cd 8018 	str.w	r8, [sp, #24]
 8013be8:	ee08 0a10 	vmov	s16, r0
 8013bec:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8013bf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013bf4:	4b9e      	ldr	r3, [pc, #632]	; (8013e70 <_printf_float+0x2d8>)
 8013bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8013bfa:	f7ec ff6f 	bl	8000adc <__aeabi_dcmpun>
 8013bfe:	bb88      	cbnz	r0, 8013c64 <_printf_float+0xcc>
 8013c00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013c04:	4b9a      	ldr	r3, [pc, #616]	; (8013e70 <_printf_float+0x2d8>)
 8013c06:	f04f 32ff 	mov.w	r2, #4294967295
 8013c0a:	f7ec ff49 	bl	8000aa0 <__aeabi_dcmple>
 8013c0e:	bb48      	cbnz	r0, 8013c64 <_printf_float+0xcc>
 8013c10:	2200      	movs	r2, #0
 8013c12:	2300      	movs	r3, #0
 8013c14:	4640      	mov	r0, r8
 8013c16:	4649      	mov	r1, r9
 8013c18:	f7ec ff38 	bl	8000a8c <__aeabi_dcmplt>
 8013c1c:	b110      	cbz	r0, 8013c24 <_printf_float+0x8c>
 8013c1e:	232d      	movs	r3, #45	; 0x2d
 8013c20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c24:	4a93      	ldr	r2, [pc, #588]	; (8013e74 <_printf_float+0x2dc>)
 8013c26:	4b94      	ldr	r3, [pc, #592]	; (8013e78 <_printf_float+0x2e0>)
 8013c28:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013c2c:	bf94      	ite	ls
 8013c2e:	4690      	movls	r8, r2
 8013c30:	4698      	movhi	r8, r3
 8013c32:	2303      	movs	r3, #3
 8013c34:	6123      	str	r3, [r4, #16]
 8013c36:	9b05      	ldr	r3, [sp, #20]
 8013c38:	f023 0304 	bic.w	r3, r3, #4
 8013c3c:	6023      	str	r3, [r4, #0]
 8013c3e:	f04f 0900 	mov.w	r9, #0
 8013c42:	9700      	str	r7, [sp, #0]
 8013c44:	4633      	mov	r3, r6
 8013c46:	aa0b      	add	r2, sp, #44	; 0x2c
 8013c48:	4621      	mov	r1, r4
 8013c4a:	4628      	mov	r0, r5
 8013c4c:	f000 f9da 	bl	8014004 <_printf_common>
 8013c50:	3001      	adds	r0, #1
 8013c52:	f040 8090 	bne.w	8013d76 <_printf_float+0x1de>
 8013c56:	f04f 30ff 	mov.w	r0, #4294967295
 8013c5a:	b00d      	add	sp, #52	; 0x34
 8013c5c:	ecbd 8b02 	vpop	{d8}
 8013c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c64:	4642      	mov	r2, r8
 8013c66:	464b      	mov	r3, r9
 8013c68:	4640      	mov	r0, r8
 8013c6a:	4649      	mov	r1, r9
 8013c6c:	f7ec ff36 	bl	8000adc <__aeabi_dcmpun>
 8013c70:	b140      	cbz	r0, 8013c84 <_printf_float+0xec>
 8013c72:	464b      	mov	r3, r9
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	bfbc      	itt	lt
 8013c78:	232d      	movlt	r3, #45	; 0x2d
 8013c7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013c7e:	4a7f      	ldr	r2, [pc, #508]	; (8013e7c <_printf_float+0x2e4>)
 8013c80:	4b7f      	ldr	r3, [pc, #508]	; (8013e80 <_printf_float+0x2e8>)
 8013c82:	e7d1      	b.n	8013c28 <_printf_float+0x90>
 8013c84:	6863      	ldr	r3, [r4, #4]
 8013c86:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013c8a:	9206      	str	r2, [sp, #24]
 8013c8c:	1c5a      	adds	r2, r3, #1
 8013c8e:	d13f      	bne.n	8013d10 <_printf_float+0x178>
 8013c90:	2306      	movs	r3, #6
 8013c92:	6063      	str	r3, [r4, #4]
 8013c94:	9b05      	ldr	r3, [sp, #20]
 8013c96:	6861      	ldr	r1, [r4, #4]
 8013c98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	9303      	str	r3, [sp, #12]
 8013ca0:	ab0a      	add	r3, sp, #40	; 0x28
 8013ca2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013ca6:	ab09      	add	r3, sp, #36	; 0x24
 8013ca8:	ec49 8b10 	vmov	d0, r8, r9
 8013cac:	9300      	str	r3, [sp, #0]
 8013cae:	6022      	str	r2, [r4, #0]
 8013cb0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013cb4:	4628      	mov	r0, r5
 8013cb6:	f7ff fecf 	bl	8013a58 <__cvt>
 8013cba:	9b06      	ldr	r3, [sp, #24]
 8013cbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013cbe:	2b47      	cmp	r3, #71	; 0x47
 8013cc0:	4680      	mov	r8, r0
 8013cc2:	d108      	bne.n	8013cd6 <_printf_float+0x13e>
 8013cc4:	1cc8      	adds	r0, r1, #3
 8013cc6:	db02      	blt.n	8013cce <_printf_float+0x136>
 8013cc8:	6863      	ldr	r3, [r4, #4]
 8013cca:	4299      	cmp	r1, r3
 8013ccc:	dd41      	ble.n	8013d52 <_printf_float+0x1ba>
 8013cce:	f1ab 0302 	sub.w	r3, fp, #2
 8013cd2:	fa5f fb83 	uxtb.w	fp, r3
 8013cd6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013cda:	d820      	bhi.n	8013d1e <_printf_float+0x186>
 8013cdc:	3901      	subs	r1, #1
 8013cde:	465a      	mov	r2, fp
 8013ce0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013ce4:	9109      	str	r1, [sp, #36]	; 0x24
 8013ce6:	f7ff ff19 	bl	8013b1c <__exponent>
 8013cea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013cec:	1813      	adds	r3, r2, r0
 8013cee:	2a01      	cmp	r2, #1
 8013cf0:	4681      	mov	r9, r0
 8013cf2:	6123      	str	r3, [r4, #16]
 8013cf4:	dc02      	bgt.n	8013cfc <_printf_float+0x164>
 8013cf6:	6822      	ldr	r2, [r4, #0]
 8013cf8:	07d2      	lsls	r2, r2, #31
 8013cfa:	d501      	bpl.n	8013d00 <_printf_float+0x168>
 8013cfc:	3301      	adds	r3, #1
 8013cfe:	6123      	str	r3, [r4, #16]
 8013d00:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d09c      	beq.n	8013c42 <_printf_float+0xaa>
 8013d08:	232d      	movs	r3, #45	; 0x2d
 8013d0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013d0e:	e798      	b.n	8013c42 <_printf_float+0xaa>
 8013d10:	9a06      	ldr	r2, [sp, #24]
 8013d12:	2a47      	cmp	r2, #71	; 0x47
 8013d14:	d1be      	bne.n	8013c94 <_printf_float+0xfc>
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d1bc      	bne.n	8013c94 <_printf_float+0xfc>
 8013d1a:	2301      	movs	r3, #1
 8013d1c:	e7b9      	b.n	8013c92 <_printf_float+0xfa>
 8013d1e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013d22:	d118      	bne.n	8013d56 <_printf_float+0x1be>
 8013d24:	2900      	cmp	r1, #0
 8013d26:	6863      	ldr	r3, [r4, #4]
 8013d28:	dd0b      	ble.n	8013d42 <_printf_float+0x1aa>
 8013d2a:	6121      	str	r1, [r4, #16]
 8013d2c:	b913      	cbnz	r3, 8013d34 <_printf_float+0x19c>
 8013d2e:	6822      	ldr	r2, [r4, #0]
 8013d30:	07d0      	lsls	r0, r2, #31
 8013d32:	d502      	bpl.n	8013d3a <_printf_float+0x1a2>
 8013d34:	3301      	adds	r3, #1
 8013d36:	440b      	add	r3, r1
 8013d38:	6123      	str	r3, [r4, #16]
 8013d3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8013d3c:	f04f 0900 	mov.w	r9, #0
 8013d40:	e7de      	b.n	8013d00 <_printf_float+0x168>
 8013d42:	b913      	cbnz	r3, 8013d4a <_printf_float+0x1b2>
 8013d44:	6822      	ldr	r2, [r4, #0]
 8013d46:	07d2      	lsls	r2, r2, #31
 8013d48:	d501      	bpl.n	8013d4e <_printf_float+0x1b6>
 8013d4a:	3302      	adds	r3, #2
 8013d4c:	e7f4      	b.n	8013d38 <_printf_float+0x1a0>
 8013d4e:	2301      	movs	r3, #1
 8013d50:	e7f2      	b.n	8013d38 <_printf_float+0x1a0>
 8013d52:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d58:	4299      	cmp	r1, r3
 8013d5a:	db05      	blt.n	8013d68 <_printf_float+0x1d0>
 8013d5c:	6823      	ldr	r3, [r4, #0]
 8013d5e:	6121      	str	r1, [r4, #16]
 8013d60:	07d8      	lsls	r0, r3, #31
 8013d62:	d5ea      	bpl.n	8013d3a <_printf_float+0x1a2>
 8013d64:	1c4b      	adds	r3, r1, #1
 8013d66:	e7e7      	b.n	8013d38 <_printf_float+0x1a0>
 8013d68:	2900      	cmp	r1, #0
 8013d6a:	bfd4      	ite	le
 8013d6c:	f1c1 0202 	rsble	r2, r1, #2
 8013d70:	2201      	movgt	r2, #1
 8013d72:	4413      	add	r3, r2
 8013d74:	e7e0      	b.n	8013d38 <_printf_float+0x1a0>
 8013d76:	6823      	ldr	r3, [r4, #0]
 8013d78:	055a      	lsls	r2, r3, #21
 8013d7a:	d407      	bmi.n	8013d8c <_printf_float+0x1f4>
 8013d7c:	6923      	ldr	r3, [r4, #16]
 8013d7e:	4642      	mov	r2, r8
 8013d80:	4631      	mov	r1, r6
 8013d82:	4628      	mov	r0, r5
 8013d84:	47b8      	blx	r7
 8013d86:	3001      	adds	r0, #1
 8013d88:	d12c      	bne.n	8013de4 <_printf_float+0x24c>
 8013d8a:	e764      	b.n	8013c56 <_printf_float+0xbe>
 8013d8c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013d90:	f240 80e0 	bls.w	8013f54 <_printf_float+0x3bc>
 8013d94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013d98:	2200      	movs	r2, #0
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	f7ec fe6c 	bl	8000a78 <__aeabi_dcmpeq>
 8013da0:	2800      	cmp	r0, #0
 8013da2:	d034      	beq.n	8013e0e <_printf_float+0x276>
 8013da4:	4a37      	ldr	r2, [pc, #220]	; (8013e84 <_printf_float+0x2ec>)
 8013da6:	2301      	movs	r3, #1
 8013da8:	4631      	mov	r1, r6
 8013daa:	4628      	mov	r0, r5
 8013dac:	47b8      	blx	r7
 8013dae:	3001      	adds	r0, #1
 8013db0:	f43f af51 	beq.w	8013c56 <_printf_float+0xbe>
 8013db4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013db8:	429a      	cmp	r2, r3
 8013dba:	db02      	blt.n	8013dc2 <_printf_float+0x22a>
 8013dbc:	6823      	ldr	r3, [r4, #0]
 8013dbe:	07d8      	lsls	r0, r3, #31
 8013dc0:	d510      	bpl.n	8013de4 <_printf_float+0x24c>
 8013dc2:	ee18 3a10 	vmov	r3, s16
 8013dc6:	4652      	mov	r2, sl
 8013dc8:	4631      	mov	r1, r6
 8013dca:	4628      	mov	r0, r5
 8013dcc:	47b8      	blx	r7
 8013dce:	3001      	adds	r0, #1
 8013dd0:	f43f af41 	beq.w	8013c56 <_printf_float+0xbe>
 8013dd4:	f04f 0800 	mov.w	r8, #0
 8013dd8:	f104 091a 	add.w	r9, r4, #26
 8013ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013dde:	3b01      	subs	r3, #1
 8013de0:	4543      	cmp	r3, r8
 8013de2:	dc09      	bgt.n	8013df8 <_printf_float+0x260>
 8013de4:	6823      	ldr	r3, [r4, #0]
 8013de6:	079b      	lsls	r3, r3, #30
 8013de8:	f100 8107 	bmi.w	8013ffa <_printf_float+0x462>
 8013dec:	68e0      	ldr	r0, [r4, #12]
 8013dee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013df0:	4298      	cmp	r0, r3
 8013df2:	bfb8      	it	lt
 8013df4:	4618      	movlt	r0, r3
 8013df6:	e730      	b.n	8013c5a <_printf_float+0xc2>
 8013df8:	2301      	movs	r3, #1
 8013dfa:	464a      	mov	r2, r9
 8013dfc:	4631      	mov	r1, r6
 8013dfe:	4628      	mov	r0, r5
 8013e00:	47b8      	blx	r7
 8013e02:	3001      	adds	r0, #1
 8013e04:	f43f af27 	beq.w	8013c56 <_printf_float+0xbe>
 8013e08:	f108 0801 	add.w	r8, r8, #1
 8013e0c:	e7e6      	b.n	8013ddc <_printf_float+0x244>
 8013e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	dc39      	bgt.n	8013e88 <_printf_float+0x2f0>
 8013e14:	4a1b      	ldr	r2, [pc, #108]	; (8013e84 <_printf_float+0x2ec>)
 8013e16:	2301      	movs	r3, #1
 8013e18:	4631      	mov	r1, r6
 8013e1a:	4628      	mov	r0, r5
 8013e1c:	47b8      	blx	r7
 8013e1e:	3001      	adds	r0, #1
 8013e20:	f43f af19 	beq.w	8013c56 <_printf_float+0xbe>
 8013e24:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013e28:	4313      	orrs	r3, r2
 8013e2a:	d102      	bne.n	8013e32 <_printf_float+0x29a>
 8013e2c:	6823      	ldr	r3, [r4, #0]
 8013e2e:	07d9      	lsls	r1, r3, #31
 8013e30:	d5d8      	bpl.n	8013de4 <_printf_float+0x24c>
 8013e32:	ee18 3a10 	vmov	r3, s16
 8013e36:	4652      	mov	r2, sl
 8013e38:	4631      	mov	r1, r6
 8013e3a:	4628      	mov	r0, r5
 8013e3c:	47b8      	blx	r7
 8013e3e:	3001      	adds	r0, #1
 8013e40:	f43f af09 	beq.w	8013c56 <_printf_float+0xbe>
 8013e44:	f04f 0900 	mov.w	r9, #0
 8013e48:	f104 0a1a 	add.w	sl, r4, #26
 8013e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e4e:	425b      	negs	r3, r3
 8013e50:	454b      	cmp	r3, r9
 8013e52:	dc01      	bgt.n	8013e58 <_printf_float+0x2c0>
 8013e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e56:	e792      	b.n	8013d7e <_printf_float+0x1e6>
 8013e58:	2301      	movs	r3, #1
 8013e5a:	4652      	mov	r2, sl
 8013e5c:	4631      	mov	r1, r6
 8013e5e:	4628      	mov	r0, r5
 8013e60:	47b8      	blx	r7
 8013e62:	3001      	adds	r0, #1
 8013e64:	f43f aef7 	beq.w	8013c56 <_printf_float+0xbe>
 8013e68:	f109 0901 	add.w	r9, r9, #1
 8013e6c:	e7ee      	b.n	8013e4c <_printf_float+0x2b4>
 8013e6e:	bf00      	nop
 8013e70:	7fefffff 	.word	0x7fefffff
 8013e74:	08018588 	.word	0x08018588
 8013e78:	0801858c 	.word	0x0801858c
 8013e7c:	08018590 	.word	0x08018590
 8013e80:	08018594 	.word	0x08018594
 8013e84:	08018598 	.word	0x08018598
 8013e88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013e8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013e8c:	429a      	cmp	r2, r3
 8013e8e:	bfa8      	it	ge
 8013e90:	461a      	movge	r2, r3
 8013e92:	2a00      	cmp	r2, #0
 8013e94:	4691      	mov	r9, r2
 8013e96:	dc37      	bgt.n	8013f08 <_printf_float+0x370>
 8013e98:	f04f 0b00 	mov.w	fp, #0
 8013e9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013ea0:	f104 021a 	add.w	r2, r4, #26
 8013ea4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013ea6:	9305      	str	r3, [sp, #20]
 8013ea8:	eba3 0309 	sub.w	r3, r3, r9
 8013eac:	455b      	cmp	r3, fp
 8013eae:	dc33      	bgt.n	8013f18 <_printf_float+0x380>
 8013eb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013eb4:	429a      	cmp	r2, r3
 8013eb6:	db3b      	blt.n	8013f30 <_printf_float+0x398>
 8013eb8:	6823      	ldr	r3, [r4, #0]
 8013eba:	07da      	lsls	r2, r3, #31
 8013ebc:	d438      	bmi.n	8013f30 <_printf_float+0x398>
 8013ebe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013ec2:	eba2 0903 	sub.w	r9, r2, r3
 8013ec6:	9b05      	ldr	r3, [sp, #20]
 8013ec8:	1ad2      	subs	r2, r2, r3
 8013eca:	4591      	cmp	r9, r2
 8013ecc:	bfa8      	it	ge
 8013ece:	4691      	movge	r9, r2
 8013ed0:	f1b9 0f00 	cmp.w	r9, #0
 8013ed4:	dc35      	bgt.n	8013f42 <_printf_float+0x3aa>
 8013ed6:	f04f 0800 	mov.w	r8, #0
 8013eda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013ede:	f104 0a1a 	add.w	sl, r4, #26
 8013ee2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013ee6:	1a9b      	subs	r3, r3, r2
 8013ee8:	eba3 0309 	sub.w	r3, r3, r9
 8013eec:	4543      	cmp	r3, r8
 8013eee:	f77f af79 	ble.w	8013de4 <_printf_float+0x24c>
 8013ef2:	2301      	movs	r3, #1
 8013ef4:	4652      	mov	r2, sl
 8013ef6:	4631      	mov	r1, r6
 8013ef8:	4628      	mov	r0, r5
 8013efa:	47b8      	blx	r7
 8013efc:	3001      	adds	r0, #1
 8013efe:	f43f aeaa 	beq.w	8013c56 <_printf_float+0xbe>
 8013f02:	f108 0801 	add.w	r8, r8, #1
 8013f06:	e7ec      	b.n	8013ee2 <_printf_float+0x34a>
 8013f08:	4613      	mov	r3, r2
 8013f0a:	4631      	mov	r1, r6
 8013f0c:	4642      	mov	r2, r8
 8013f0e:	4628      	mov	r0, r5
 8013f10:	47b8      	blx	r7
 8013f12:	3001      	adds	r0, #1
 8013f14:	d1c0      	bne.n	8013e98 <_printf_float+0x300>
 8013f16:	e69e      	b.n	8013c56 <_printf_float+0xbe>
 8013f18:	2301      	movs	r3, #1
 8013f1a:	4631      	mov	r1, r6
 8013f1c:	4628      	mov	r0, r5
 8013f1e:	9205      	str	r2, [sp, #20]
 8013f20:	47b8      	blx	r7
 8013f22:	3001      	adds	r0, #1
 8013f24:	f43f ae97 	beq.w	8013c56 <_printf_float+0xbe>
 8013f28:	9a05      	ldr	r2, [sp, #20]
 8013f2a:	f10b 0b01 	add.w	fp, fp, #1
 8013f2e:	e7b9      	b.n	8013ea4 <_printf_float+0x30c>
 8013f30:	ee18 3a10 	vmov	r3, s16
 8013f34:	4652      	mov	r2, sl
 8013f36:	4631      	mov	r1, r6
 8013f38:	4628      	mov	r0, r5
 8013f3a:	47b8      	blx	r7
 8013f3c:	3001      	adds	r0, #1
 8013f3e:	d1be      	bne.n	8013ebe <_printf_float+0x326>
 8013f40:	e689      	b.n	8013c56 <_printf_float+0xbe>
 8013f42:	9a05      	ldr	r2, [sp, #20]
 8013f44:	464b      	mov	r3, r9
 8013f46:	4442      	add	r2, r8
 8013f48:	4631      	mov	r1, r6
 8013f4a:	4628      	mov	r0, r5
 8013f4c:	47b8      	blx	r7
 8013f4e:	3001      	adds	r0, #1
 8013f50:	d1c1      	bne.n	8013ed6 <_printf_float+0x33e>
 8013f52:	e680      	b.n	8013c56 <_printf_float+0xbe>
 8013f54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013f56:	2a01      	cmp	r2, #1
 8013f58:	dc01      	bgt.n	8013f5e <_printf_float+0x3c6>
 8013f5a:	07db      	lsls	r3, r3, #31
 8013f5c:	d53a      	bpl.n	8013fd4 <_printf_float+0x43c>
 8013f5e:	2301      	movs	r3, #1
 8013f60:	4642      	mov	r2, r8
 8013f62:	4631      	mov	r1, r6
 8013f64:	4628      	mov	r0, r5
 8013f66:	47b8      	blx	r7
 8013f68:	3001      	adds	r0, #1
 8013f6a:	f43f ae74 	beq.w	8013c56 <_printf_float+0xbe>
 8013f6e:	ee18 3a10 	vmov	r3, s16
 8013f72:	4652      	mov	r2, sl
 8013f74:	4631      	mov	r1, r6
 8013f76:	4628      	mov	r0, r5
 8013f78:	47b8      	blx	r7
 8013f7a:	3001      	adds	r0, #1
 8013f7c:	f43f ae6b 	beq.w	8013c56 <_printf_float+0xbe>
 8013f80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013f84:	2200      	movs	r2, #0
 8013f86:	2300      	movs	r3, #0
 8013f88:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8013f8c:	f7ec fd74 	bl	8000a78 <__aeabi_dcmpeq>
 8013f90:	b9d8      	cbnz	r0, 8013fca <_printf_float+0x432>
 8013f92:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013f96:	f108 0201 	add.w	r2, r8, #1
 8013f9a:	4631      	mov	r1, r6
 8013f9c:	4628      	mov	r0, r5
 8013f9e:	47b8      	blx	r7
 8013fa0:	3001      	adds	r0, #1
 8013fa2:	d10e      	bne.n	8013fc2 <_printf_float+0x42a>
 8013fa4:	e657      	b.n	8013c56 <_printf_float+0xbe>
 8013fa6:	2301      	movs	r3, #1
 8013fa8:	4652      	mov	r2, sl
 8013faa:	4631      	mov	r1, r6
 8013fac:	4628      	mov	r0, r5
 8013fae:	47b8      	blx	r7
 8013fb0:	3001      	adds	r0, #1
 8013fb2:	f43f ae50 	beq.w	8013c56 <_printf_float+0xbe>
 8013fb6:	f108 0801 	add.w	r8, r8, #1
 8013fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fbc:	3b01      	subs	r3, #1
 8013fbe:	4543      	cmp	r3, r8
 8013fc0:	dcf1      	bgt.n	8013fa6 <_printf_float+0x40e>
 8013fc2:	464b      	mov	r3, r9
 8013fc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013fc8:	e6da      	b.n	8013d80 <_printf_float+0x1e8>
 8013fca:	f04f 0800 	mov.w	r8, #0
 8013fce:	f104 0a1a 	add.w	sl, r4, #26
 8013fd2:	e7f2      	b.n	8013fba <_printf_float+0x422>
 8013fd4:	2301      	movs	r3, #1
 8013fd6:	4642      	mov	r2, r8
 8013fd8:	e7df      	b.n	8013f9a <_printf_float+0x402>
 8013fda:	2301      	movs	r3, #1
 8013fdc:	464a      	mov	r2, r9
 8013fde:	4631      	mov	r1, r6
 8013fe0:	4628      	mov	r0, r5
 8013fe2:	47b8      	blx	r7
 8013fe4:	3001      	adds	r0, #1
 8013fe6:	f43f ae36 	beq.w	8013c56 <_printf_float+0xbe>
 8013fea:	f108 0801 	add.w	r8, r8, #1
 8013fee:	68e3      	ldr	r3, [r4, #12]
 8013ff0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013ff2:	1a5b      	subs	r3, r3, r1
 8013ff4:	4543      	cmp	r3, r8
 8013ff6:	dcf0      	bgt.n	8013fda <_printf_float+0x442>
 8013ff8:	e6f8      	b.n	8013dec <_printf_float+0x254>
 8013ffa:	f04f 0800 	mov.w	r8, #0
 8013ffe:	f104 0919 	add.w	r9, r4, #25
 8014002:	e7f4      	b.n	8013fee <_printf_float+0x456>

08014004 <_printf_common>:
 8014004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014008:	4616      	mov	r6, r2
 801400a:	4699      	mov	r9, r3
 801400c:	688a      	ldr	r2, [r1, #8]
 801400e:	690b      	ldr	r3, [r1, #16]
 8014010:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014014:	4293      	cmp	r3, r2
 8014016:	bfb8      	it	lt
 8014018:	4613      	movlt	r3, r2
 801401a:	6033      	str	r3, [r6, #0]
 801401c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014020:	4607      	mov	r7, r0
 8014022:	460c      	mov	r4, r1
 8014024:	b10a      	cbz	r2, 801402a <_printf_common+0x26>
 8014026:	3301      	adds	r3, #1
 8014028:	6033      	str	r3, [r6, #0]
 801402a:	6823      	ldr	r3, [r4, #0]
 801402c:	0699      	lsls	r1, r3, #26
 801402e:	bf42      	ittt	mi
 8014030:	6833      	ldrmi	r3, [r6, #0]
 8014032:	3302      	addmi	r3, #2
 8014034:	6033      	strmi	r3, [r6, #0]
 8014036:	6825      	ldr	r5, [r4, #0]
 8014038:	f015 0506 	ands.w	r5, r5, #6
 801403c:	d106      	bne.n	801404c <_printf_common+0x48>
 801403e:	f104 0a19 	add.w	sl, r4, #25
 8014042:	68e3      	ldr	r3, [r4, #12]
 8014044:	6832      	ldr	r2, [r6, #0]
 8014046:	1a9b      	subs	r3, r3, r2
 8014048:	42ab      	cmp	r3, r5
 801404a:	dc26      	bgt.n	801409a <_printf_common+0x96>
 801404c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014050:	1e13      	subs	r3, r2, #0
 8014052:	6822      	ldr	r2, [r4, #0]
 8014054:	bf18      	it	ne
 8014056:	2301      	movne	r3, #1
 8014058:	0692      	lsls	r2, r2, #26
 801405a:	d42b      	bmi.n	80140b4 <_printf_common+0xb0>
 801405c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014060:	4649      	mov	r1, r9
 8014062:	4638      	mov	r0, r7
 8014064:	47c0      	blx	r8
 8014066:	3001      	adds	r0, #1
 8014068:	d01e      	beq.n	80140a8 <_printf_common+0xa4>
 801406a:	6823      	ldr	r3, [r4, #0]
 801406c:	6922      	ldr	r2, [r4, #16]
 801406e:	f003 0306 	and.w	r3, r3, #6
 8014072:	2b04      	cmp	r3, #4
 8014074:	bf02      	ittt	eq
 8014076:	68e5      	ldreq	r5, [r4, #12]
 8014078:	6833      	ldreq	r3, [r6, #0]
 801407a:	1aed      	subeq	r5, r5, r3
 801407c:	68a3      	ldr	r3, [r4, #8]
 801407e:	bf0c      	ite	eq
 8014080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014084:	2500      	movne	r5, #0
 8014086:	4293      	cmp	r3, r2
 8014088:	bfc4      	itt	gt
 801408a:	1a9b      	subgt	r3, r3, r2
 801408c:	18ed      	addgt	r5, r5, r3
 801408e:	2600      	movs	r6, #0
 8014090:	341a      	adds	r4, #26
 8014092:	42b5      	cmp	r5, r6
 8014094:	d11a      	bne.n	80140cc <_printf_common+0xc8>
 8014096:	2000      	movs	r0, #0
 8014098:	e008      	b.n	80140ac <_printf_common+0xa8>
 801409a:	2301      	movs	r3, #1
 801409c:	4652      	mov	r2, sl
 801409e:	4649      	mov	r1, r9
 80140a0:	4638      	mov	r0, r7
 80140a2:	47c0      	blx	r8
 80140a4:	3001      	adds	r0, #1
 80140a6:	d103      	bne.n	80140b0 <_printf_common+0xac>
 80140a8:	f04f 30ff 	mov.w	r0, #4294967295
 80140ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140b0:	3501      	adds	r5, #1
 80140b2:	e7c6      	b.n	8014042 <_printf_common+0x3e>
 80140b4:	18e1      	adds	r1, r4, r3
 80140b6:	1c5a      	adds	r2, r3, #1
 80140b8:	2030      	movs	r0, #48	; 0x30
 80140ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80140be:	4422      	add	r2, r4
 80140c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80140c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80140c8:	3302      	adds	r3, #2
 80140ca:	e7c7      	b.n	801405c <_printf_common+0x58>
 80140cc:	2301      	movs	r3, #1
 80140ce:	4622      	mov	r2, r4
 80140d0:	4649      	mov	r1, r9
 80140d2:	4638      	mov	r0, r7
 80140d4:	47c0      	blx	r8
 80140d6:	3001      	adds	r0, #1
 80140d8:	d0e6      	beq.n	80140a8 <_printf_common+0xa4>
 80140da:	3601      	adds	r6, #1
 80140dc:	e7d9      	b.n	8014092 <_printf_common+0x8e>
	...

080140e0 <_printf_i>:
 80140e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80140e4:	7e0f      	ldrb	r7, [r1, #24]
 80140e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80140e8:	2f78      	cmp	r7, #120	; 0x78
 80140ea:	4691      	mov	r9, r2
 80140ec:	4680      	mov	r8, r0
 80140ee:	460c      	mov	r4, r1
 80140f0:	469a      	mov	sl, r3
 80140f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80140f6:	d807      	bhi.n	8014108 <_printf_i+0x28>
 80140f8:	2f62      	cmp	r7, #98	; 0x62
 80140fa:	d80a      	bhi.n	8014112 <_printf_i+0x32>
 80140fc:	2f00      	cmp	r7, #0
 80140fe:	f000 80d4 	beq.w	80142aa <_printf_i+0x1ca>
 8014102:	2f58      	cmp	r7, #88	; 0x58
 8014104:	f000 80c0 	beq.w	8014288 <_printf_i+0x1a8>
 8014108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801410c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014110:	e03a      	b.n	8014188 <_printf_i+0xa8>
 8014112:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014116:	2b15      	cmp	r3, #21
 8014118:	d8f6      	bhi.n	8014108 <_printf_i+0x28>
 801411a:	a101      	add	r1, pc, #4	; (adr r1, 8014120 <_printf_i+0x40>)
 801411c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014120:	08014179 	.word	0x08014179
 8014124:	0801418d 	.word	0x0801418d
 8014128:	08014109 	.word	0x08014109
 801412c:	08014109 	.word	0x08014109
 8014130:	08014109 	.word	0x08014109
 8014134:	08014109 	.word	0x08014109
 8014138:	0801418d 	.word	0x0801418d
 801413c:	08014109 	.word	0x08014109
 8014140:	08014109 	.word	0x08014109
 8014144:	08014109 	.word	0x08014109
 8014148:	08014109 	.word	0x08014109
 801414c:	08014291 	.word	0x08014291
 8014150:	080141b9 	.word	0x080141b9
 8014154:	0801424b 	.word	0x0801424b
 8014158:	08014109 	.word	0x08014109
 801415c:	08014109 	.word	0x08014109
 8014160:	080142b3 	.word	0x080142b3
 8014164:	08014109 	.word	0x08014109
 8014168:	080141b9 	.word	0x080141b9
 801416c:	08014109 	.word	0x08014109
 8014170:	08014109 	.word	0x08014109
 8014174:	08014253 	.word	0x08014253
 8014178:	682b      	ldr	r3, [r5, #0]
 801417a:	1d1a      	adds	r2, r3, #4
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	602a      	str	r2, [r5, #0]
 8014180:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014184:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014188:	2301      	movs	r3, #1
 801418a:	e09f      	b.n	80142cc <_printf_i+0x1ec>
 801418c:	6820      	ldr	r0, [r4, #0]
 801418e:	682b      	ldr	r3, [r5, #0]
 8014190:	0607      	lsls	r7, r0, #24
 8014192:	f103 0104 	add.w	r1, r3, #4
 8014196:	6029      	str	r1, [r5, #0]
 8014198:	d501      	bpl.n	801419e <_printf_i+0xbe>
 801419a:	681e      	ldr	r6, [r3, #0]
 801419c:	e003      	b.n	80141a6 <_printf_i+0xc6>
 801419e:	0646      	lsls	r6, r0, #25
 80141a0:	d5fb      	bpl.n	801419a <_printf_i+0xba>
 80141a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80141a6:	2e00      	cmp	r6, #0
 80141a8:	da03      	bge.n	80141b2 <_printf_i+0xd2>
 80141aa:	232d      	movs	r3, #45	; 0x2d
 80141ac:	4276      	negs	r6, r6
 80141ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80141b2:	485a      	ldr	r0, [pc, #360]	; (801431c <_printf_i+0x23c>)
 80141b4:	230a      	movs	r3, #10
 80141b6:	e012      	b.n	80141de <_printf_i+0xfe>
 80141b8:	682b      	ldr	r3, [r5, #0]
 80141ba:	6820      	ldr	r0, [r4, #0]
 80141bc:	1d19      	adds	r1, r3, #4
 80141be:	6029      	str	r1, [r5, #0]
 80141c0:	0605      	lsls	r5, r0, #24
 80141c2:	d501      	bpl.n	80141c8 <_printf_i+0xe8>
 80141c4:	681e      	ldr	r6, [r3, #0]
 80141c6:	e002      	b.n	80141ce <_printf_i+0xee>
 80141c8:	0641      	lsls	r1, r0, #25
 80141ca:	d5fb      	bpl.n	80141c4 <_printf_i+0xe4>
 80141cc:	881e      	ldrh	r6, [r3, #0]
 80141ce:	4853      	ldr	r0, [pc, #332]	; (801431c <_printf_i+0x23c>)
 80141d0:	2f6f      	cmp	r7, #111	; 0x6f
 80141d2:	bf0c      	ite	eq
 80141d4:	2308      	moveq	r3, #8
 80141d6:	230a      	movne	r3, #10
 80141d8:	2100      	movs	r1, #0
 80141da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80141de:	6865      	ldr	r5, [r4, #4]
 80141e0:	60a5      	str	r5, [r4, #8]
 80141e2:	2d00      	cmp	r5, #0
 80141e4:	bfa2      	ittt	ge
 80141e6:	6821      	ldrge	r1, [r4, #0]
 80141e8:	f021 0104 	bicge.w	r1, r1, #4
 80141ec:	6021      	strge	r1, [r4, #0]
 80141ee:	b90e      	cbnz	r6, 80141f4 <_printf_i+0x114>
 80141f0:	2d00      	cmp	r5, #0
 80141f2:	d04b      	beq.n	801428c <_printf_i+0x1ac>
 80141f4:	4615      	mov	r5, r2
 80141f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80141fa:	fb03 6711 	mls	r7, r3, r1, r6
 80141fe:	5dc7      	ldrb	r7, [r0, r7]
 8014200:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014204:	4637      	mov	r7, r6
 8014206:	42bb      	cmp	r3, r7
 8014208:	460e      	mov	r6, r1
 801420a:	d9f4      	bls.n	80141f6 <_printf_i+0x116>
 801420c:	2b08      	cmp	r3, #8
 801420e:	d10b      	bne.n	8014228 <_printf_i+0x148>
 8014210:	6823      	ldr	r3, [r4, #0]
 8014212:	07de      	lsls	r6, r3, #31
 8014214:	d508      	bpl.n	8014228 <_printf_i+0x148>
 8014216:	6923      	ldr	r3, [r4, #16]
 8014218:	6861      	ldr	r1, [r4, #4]
 801421a:	4299      	cmp	r1, r3
 801421c:	bfde      	ittt	le
 801421e:	2330      	movle	r3, #48	; 0x30
 8014220:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014224:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014228:	1b52      	subs	r2, r2, r5
 801422a:	6122      	str	r2, [r4, #16]
 801422c:	f8cd a000 	str.w	sl, [sp]
 8014230:	464b      	mov	r3, r9
 8014232:	aa03      	add	r2, sp, #12
 8014234:	4621      	mov	r1, r4
 8014236:	4640      	mov	r0, r8
 8014238:	f7ff fee4 	bl	8014004 <_printf_common>
 801423c:	3001      	adds	r0, #1
 801423e:	d14a      	bne.n	80142d6 <_printf_i+0x1f6>
 8014240:	f04f 30ff 	mov.w	r0, #4294967295
 8014244:	b004      	add	sp, #16
 8014246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801424a:	6823      	ldr	r3, [r4, #0]
 801424c:	f043 0320 	orr.w	r3, r3, #32
 8014250:	6023      	str	r3, [r4, #0]
 8014252:	4833      	ldr	r0, [pc, #204]	; (8014320 <_printf_i+0x240>)
 8014254:	2778      	movs	r7, #120	; 0x78
 8014256:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801425a:	6823      	ldr	r3, [r4, #0]
 801425c:	6829      	ldr	r1, [r5, #0]
 801425e:	061f      	lsls	r7, r3, #24
 8014260:	f851 6b04 	ldr.w	r6, [r1], #4
 8014264:	d402      	bmi.n	801426c <_printf_i+0x18c>
 8014266:	065f      	lsls	r7, r3, #25
 8014268:	bf48      	it	mi
 801426a:	b2b6      	uxthmi	r6, r6
 801426c:	07df      	lsls	r7, r3, #31
 801426e:	bf48      	it	mi
 8014270:	f043 0320 	orrmi.w	r3, r3, #32
 8014274:	6029      	str	r1, [r5, #0]
 8014276:	bf48      	it	mi
 8014278:	6023      	strmi	r3, [r4, #0]
 801427a:	b91e      	cbnz	r6, 8014284 <_printf_i+0x1a4>
 801427c:	6823      	ldr	r3, [r4, #0]
 801427e:	f023 0320 	bic.w	r3, r3, #32
 8014282:	6023      	str	r3, [r4, #0]
 8014284:	2310      	movs	r3, #16
 8014286:	e7a7      	b.n	80141d8 <_printf_i+0xf8>
 8014288:	4824      	ldr	r0, [pc, #144]	; (801431c <_printf_i+0x23c>)
 801428a:	e7e4      	b.n	8014256 <_printf_i+0x176>
 801428c:	4615      	mov	r5, r2
 801428e:	e7bd      	b.n	801420c <_printf_i+0x12c>
 8014290:	682b      	ldr	r3, [r5, #0]
 8014292:	6826      	ldr	r6, [r4, #0]
 8014294:	6961      	ldr	r1, [r4, #20]
 8014296:	1d18      	adds	r0, r3, #4
 8014298:	6028      	str	r0, [r5, #0]
 801429a:	0635      	lsls	r5, r6, #24
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	d501      	bpl.n	80142a4 <_printf_i+0x1c4>
 80142a0:	6019      	str	r1, [r3, #0]
 80142a2:	e002      	b.n	80142aa <_printf_i+0x1ca>
 80142a4:	0670      	lsls	r0, r6, #25
 80142a6:	d5fb      	bpl.n	80142a0 <_printf_i+0x1c0>
 80142a8:	8019      	strh	r1, [r3, #0]
 80142aa:	2300      	movs	r3, #0
 80142ac:	6123      	str	r3, [r4, #16]
 80142ae:	4615      	mov	r5, r2
 80142b0:	e7bc      	b.n	801422c <_printf_i+0x14c>
 80142b2:	682b      	ldr	r3, [r5, #0]
 80142b4:	1d1a      	adds	r2, r3, #4
 80142b6:	602a      	str	r2, [r5, #0]
 80142b8:	681d      	ldr	r5, [r3, #0]
 80142ba:	6862      	ldr	r2, [r4, #4]
 80142bc:	2100      	movs	r1, #0
 80142be:	4628      	mov	r0, r5
 80142c0:	f7eb ff5e 	bl	8000180 <memchr>
 80142c4:	b108      	cbz	r0, 80142ca <_printf_i+0x1ea>
 80142c6:	1b40      	subs	r0, r0, r5
 80142c8:	6060      	str	r0, [r4, #4]
 80142ca:	6863      	ldr	r3, [r4, #4]
 80142cc:	6123      	str	r3, [r4, #16]
 80142ce:	2300      	movs	r3, #0
 80142d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80142d4:	e7aa      	b.n	801422c <_printf_i+0x14c>
 80142d6:	6923      	ldr	r3, [r4, #16]
 80142d8:	462a      	mov	r2, r5
 80142da:	4649      	mov	r1, r9
 80142dc:	4640      	mov	r0, r8
 80142de:	47d0      	blx	sl
 80142e0:	3001      	adds	r0, #1
 80142e2:	d0ad      	beq.n	8014240 <_printf_i+0x160>
 80142e4:	6823      	ldr	r3, [r4, #0]
 80142e6:	079b      	lsls	r3, r3, #30
 80142e8:	d413      	bmi.n	8014312 <_printf_i+0x232>
 80142ea:	68e0      	ldr	r0, [r4, #12]
 80142ec:	9b03      	ldr	r3, [sp, #12]
 80142ee:	4298      	cmp	r0, r3
 80142f0:	bfb8      	it	lt
 80142f2:	4618      	movlt	r0, r3
 80142f4:	e7a6      	b.n	8014244 <_printf_i+0x164>
 80142f6:	2301      	movs	r3, #1
 80142f8:	4632      	mov	r2, r6
 80142fa:	4649      	mov	r1, r9
 80142fc:	4640      	mov	r0, r8
 80142fe:	47d0      	blx	sl
 8014300:	3001      	adds	r0, #1
 8014302:	d09d      	beq.n	8014240 <_printf_i+0x160>
 8014304:	3501      	adds	r5, #1
 8014306:	68e3      	ldr	r3, [r4, #12]
 8014308:	9903      	ldr	r1, [sp, #12]
 801430a:	1a5b      	subs	r3, r3, r1
 801430c:	42ab      	cmp	r3, r5
 801430e:	dcf2      	bgt.n	80142f6 <_printf_i+0x216>
 8014310:	e7eb      	b.n	80142ea <_printf_i+0x20a>
 8014312:	2500      	movs	r5, #0
 8014314:	f104 0619 	add.w	r6, r4, #25
 8014318:	e7f5      	b.n	8014306 <_printf_i+0x226>
 801431a:	bf00      	nop
 801431c:	0801859a 	.word	0x0801859a
 8014320:	080185ab 	.word	0x080185ab

08014324 <std>:
 8014324:	2300      	movs	r3, #0
 8014326:	b510      	push	{r4, lr}
 8014328:	4604      	mov	r4, r0
 801432a:	e9c0 3300 	strd	r3, r3, [r0]
 801432e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014332:	6083      	str	r3, [r0, #8]
 8014334:	8181      	strh	r1, [r0, #12]
 8014336:	6643      	str	r3, [r0, #100]	; 0x64
 8014338:	81c2      	strh	r2, [r0, #14]
 801433a:	6183      	str	r3, [r0, #24]
 801433c:	4619      	mov	r1, r3
 801433e:	2208      	movs	r2, #8
 8014340:	305c      	adds	r0, #92	; 0x5c
 8014342:	f000 f92d 	bl	80145a0 <memset>
 8014346:	4b0d      	ldr	r3, [pc, #52]	; (801437c <std+0x58>)
 8014348:	6263      	str	r3, [r4, #36]	; 0x24
 801434a:	4b0d      	ldr	r3, [pc, #52]	; (8014380 <std+0x5c>)
 801434c:	62a3      	str	r3, [r4, #40]	; 0x28
 801434e:	4b0d      	ldr	r3, [pc, #52]	; (8014384 <std+0x60>)
 8014350:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014352:	4b0d      	ldr	r3, [pc, #52]	; (8014388 <std+0x64>)
 8014354:	6323      	str	r3, [r4, #48]	; 0x30
 8014356:	4b0d      	ldr	r3, [pc, #52]	; (801438c <std+0x68>)
 8014358:	6224      	str	r4, [r4, #32]
 801435a:	429c      	cmp	r4, r3
 801435c:	d006      	beq.n	801436c <std+0x48>
 801435e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8014362:	4294      	cmp	r4, r2
 8014364:	d002      	beq.n	801436c <std+0x48>
 8014366:	33d0      	adds	r3, #208	; 0xd0
 8014368:	429c      	cmp	r4, r3
 801436a:	d105      	bne.n	8014378 <std+0x54>
 801436c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014374:	f000 b9e6 	b.w	8014744 <__retarget_lock_init_recursive>
 8014378:	bd10      	pop	{r4, pc}
 801437a:	bf00      	nop
 801437c:	080144a9 	.word	0x080144a9
 8014380:	080144cb 	.word	0x080144cb
 8014384:	08014503 	.word	0x08014503
 8014388:	08014527 	.word	0x08014527
 801438c:	200031e0 	.word	0x200031e0

08014390 <stdio_exit_handler>:
 8014390:	4a02      	ldr	r2, [pc, #8]	; (801439c <stdio_exit_handler+0xc>)
 8014392:	4903      	ldr	r1, [pc, #12]	; (80143a0 <stdio_exit_handler+0x10>)
 8014394:	4803      	ldr	r0, [pc, #12]	; (80143a4 <stdio_exit_handler+0x14>)
 8014396:	f000 b869 	b.w	801446c <_fwalk_sglue>
 801439a:	bf00      	nop
 801439c:	20000174 	.word	0x20000174
 80143a0:	08016399 	.word	0x08016399
 80143a4:	20000180 	.word	0x20000180

080143a8 <cleanup_stdio>:
 80143a8:	6841      	ldr	r1, [r0, #4]
 80143aa:	4b0c      	ldr	r3, [pc, #48]	; (80143dc <cleanup_stdio+0x34>)
 80143ac:	4299      	cmp	r1, r3
 80143ae:	b510      	push	{r4, lr}
 80143b0:	4604      	mov	r4, r0
 80143b2:	d001      	beq.n	80143b8 <cleanup_stdio+0x10>
 80143b4:	f001 fff0 	bl	8016398 <_fflush_r>
 80143b8:	68a1      	ldr	r1, [r4, #8]
 80143ba:	4b09      	ldr	r3, [pc, #36]	; (80143e0 <cleanup_stdio+0x38>)
 80143bc:	4299      	cmp	r1, r3
 80143be:	d002      	beq.n	80143c6 <cleanup_stdio+0x1e>
 80143c0:	4620      	mov	r0, r4
 80143c2:	f001 ffe9 	bl	8016398 <_fflush_r>
 80143c6:	68e1      	ldr	r1, [r4, #12]
 80143c8:	4b06      	ldr	r3, [pc, #24]	; (80143e4 <cleanup_stdio+0x3c>)
 80143ca:	4299      	cmp	r1, r3
 80143cc:	d004      	beq.n	80143d8 <cleanup_stdio+0x30>
 80143ce:	4620      	mov	r0, r4
 80143d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143d4:	f001 bfe0 	b.w	8016398 <_fflush_r>
 80143d8:	bd10      	pop	{r4, pc}
 80143da:	bf00      	nop
 80143dc:	200031e0 	.word	0x200031e0
 80143e0:	20003248 	.word	0x20003248
 80143e4:	200032b0 	.word	0x200032b0

080143e8 <global_stdio_init.part.0>:
 80143e8:	b510      	push	{r4, lr}
 80143ea:	4b0b      	ldr	r3, [pc, #44]	; (8014418 <global_stdio_init.part.0+0x30>)
 80143ec:	4c0b      	ldr	r4, [pc, #44]	; (801441c <global_stdio_init.part.0+0x34>)
 80143ee:	4a0c      	ldr	r2, [pc, #48]	; (8014420 <global_stdio_init.part.0+0x38>)
 80143f0:	601a      	str	r2, [r3, #0]
 80143f2:	4620      	mov	r0, r4
 80143f4:	2200      	movs	r2, #0
 80143f6:	2104      	movs	r1, #4
 80143f8:	f7ff ff94 	bl	8014324 <std>
 80143fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014400:	2201      	movs	r2, #1
 8014402:	2109      	movs	r1, #9
 8014404:	f7ff ff8e 	bl	8014324 <std>
 8014408:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801440c:	2202      	movs	r2, #2
 801440e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014412:	2112      	movs	r1, #18
 8014414:	f7ff bf86 	b.w	8014324 <std>
 8014418:	20003318 	.word	0x20003318
 801441c:	200031e0 	.word	0x200031e0
 8014420:	08014391 	.word	0x08014391

08014424 <__sfp_lock_acquire>:
 8014424:	4801      	ldr	r0, [pc, #4]	; (801442c <__sfp_lock_acquire+0x8>)
 8014426:	f000 b98e 	b.w	8014746 <__retarget_lock_acquire_recursive>
 801442a:	bf00      	nop
 801442c:	20003321 	.word	0x20003321

08014430 <__sfp_lock_release>:
 8014430:	4801      	ldr	r0, [pc, #4]	; (8014438 <__sfp_lock_release+0x8>)
 8014432:	f000 b989 	b.w	8014748 <__retarget_lock_release_recursive>
 8014436:	bf00      	nop
 8014438:	20003321 	.word	0x20003321

0801443c <__sinit>:
 801443c:	b510      	push	{r4, lr}
 801443e:	4604      	mov	r4, r0
 8014440:	f7ff fff0 	bl	8014424 <__sfp_lock_acquire>
 8014444:	6a23      	ldr	r3, [r4, #32]
 8014446:	b11b      	cbz	r3, 8014450 <__sinit+0x14>
 8014448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801444c:	f7ff bff0 	b.w	8014430 <__sfp_lock_release>
 8014450:	4b04      	ldr	r3, [pc, #16]	; (8014464 <__sinit+0x28>)
 8014452:	6223      	str	r3, [r4, #32]
 8014454:	4b04      	ldr	r3, [pc, #16]	; (8014468 <__sinit+0x2c>)
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d1f5      	bne.n	8014448 <__sinit+0xc>
 801445c:	f7ff ffc4 	bl	80143e8 <global_stdio_init.part.0>
 8014460:	e7f2      	b.n	8014448 <__sinit+0xc>
 8014462:	bf00      	nop
 8014464:	080143a9 	.word	0x080143a9
 8014468:	20003318 	.word	0x20003318

0801446c <_fwalk_sglue>:
 801446c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014470:	4607      	mov	r7, r0
 8014472:	4688      	mov	r8, r1
 8014474:	4614      	mov	r4, r2
 8014476:	2600      	movs	r6, #0
 8014478:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801447c:	f1b9 0901 	subs.w	r9, r9, #1
 8014480:	d505      	bpl.n	801448e <_fwalk_sglue+0x22>
 8014482:	6824      	ldr	r4, [r4, #0]
 8014484:	2c00      	cmp	r4, #0
 8014486:	d1f7      	bne.n	8014478 <_fwalk_sglue+0xc>
 8014488:	4630      	mov	r0, r6
 801448a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801448e:	89ab      	ldrh	r3, [r5, #12]
 8014490:	2b01      	cmp	r3, #1
 8014492:	d907      	bls.n	80144a4 <_fwalk_sglue+0x38>
 8014494:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014498:	3301      	adds	r3, #1
 801449a:	d003      	beq.n	80144a4 <_fwalk_sglue+0x38>
 801449c:	4629      	mov	r1, r5
 801449e:	4638      	mov	r0, r7
 80144a0:	47c0      	blx	r8
 80144a2:	4306      	orrs	r6, r0
 80144a4:	3568      	adds	r5, #104	; 0x68
 80144a6:	e7e9      	b.n	801447c <_fwalk_sglue+0x10>

080144a8 <__sread>:
 80144a8:	b510      	push	{r4, lr}
 80144aa:	460c      	mov	r4, r1
 80144ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80144b0:	f000 f8fa 	bl	80146a8 <_read_r>
 80144b4:	2800      	cmp	r0, #0
 80144b6:	bfab      	itete	ge
 80144b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80144ba:	89a3      	ldrhlt	r3, [r4, #12]
 80144bc:	181b      	addge	r3, r3, r0
 80144be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80144c2:	bfac      	ite	ge
 80144c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80144c6:	81a3      	strhlt	r3, [r4, #12]
 80144c8:	bd10      	pop	{r4, pc}

080144ca <__swrite>:
 80144ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144ce:	461f      	mov	r7, r3
 80144d0:	898b      	ldrh	r3, [r1, #12]
 80144d2:	05db      	lsls	r3, r3, #23
 80144d4:	4605      	mov	r5, r0
 80144d6:	460c      	mov	r4, r1
 80144d8:	4616      	mov	r6, r2
 80144da:	d505      	bpl.n	80144e8 <__swrite+0x1e>
 80144dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80144e0:	2302      	movs	r3, #2
 80144e2:	2200      	movs	r2, #0
 80144e4:	f000 f8ce 	bl	8014684 <_lseek_r>
 80144e8:	89a3      	ldrh	r3, [r4, #12]
 80144ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80144ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80144f2:	81a3      	strh	r3, [r4, #12]
 80144f4:	4632      	mov	r2, r6
 80144f6:	463b      	mov	r3, r7
 80144f8:	4628      	mov	r0, r5
 80144fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80144fe:	f000 b8e5 	b.w	80146cc <_write_r>

08014502 <__sseek>:
 8014502:	b510      	push	{r4, lr}
 8014504:	460c      	mov	r4, r1
 8014506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801450a:	f000 f8bb 	bl	8014684 <_lseek_r>
 801450e:	1c43      	adds	r3, r0, #1
 8014510:	89a3      	ldrh	r3, [r4, #12]
 8014512:	bf15      	itete	ne
 8014514:	6560      	strne	r0, [r4, #84]	; 0x54
 8014516:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801451a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801451e:	81a3      	strheq	r3, [r4, #12]
 8014520:	bf18      	it	ne
 8014522:	81a3      	strhne	r3, [r4, #12]
 8014524:	bd10      	pop	{r4, pc}

08014526 <__sclose>:
 8014526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801452a:	f000 b845 	b.w	80145b8 <_close_r>

0801452e <_vsniprintf_r>:
 801452e:	b530      	push	{r4, r5, lr}
 8014530:	4614      	mov	r4, r2
 8014532:	2c00      	cmp	r4, #0
 8014534:	b09b      	sub	sp, #108	; 0x6c
 8014536:	4605      	mov	r5, r0
 8014538:	461a      	mov	r2, r3
 801453a:	da05      	bge.n	8014548 <_vsniprintf_r+0x1a>
 801453c:	238b      	movs	r3, #139	; 0x8b
 801453e:	6003      	str	r3, [r0, #0]
 8014540:	f04f 30ff 	mov.w	r0, #4294967295
 8014544:	b01b      	add	sp, #108	; 0x6c
 8014546:	bd30      	pop	{r4, r5, pc}
 8014548:	f44f 7302 	mov.w	r3, #520	; 0x208
 801454c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014550:	bf14      	ite	ne
 8014552:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014556:	4623      	moveq	r3, r4
 8014558:	9302      	str	r3, [sp, #8]
 801455a:	9305      	str	r3, [sp, #20]
 801455c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014560:	9100      	str	r1, [sp, #0]
 8014562:	9104      	str	r1, [sp, #16]
 8014564:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014568:	4669      	mov	r1, sp
 801456a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801456c:	f001 fc4c 	bl	8015e08 <_svfiprintf_r>
 8014570:	1c43      	adds	r3, r0, #1
 8014572:	bfbc      	itt	lt
 8014574:	238b      	movlt	r3, #139	; 0x8b
 8014576:	602b      	strlt	r3, [r5, #0]
 8014578:	2c00      	cmp	r4, #0
 801457a:	d0e3      	beq.n	8014544 <_vsniprintf_r+0x16>
 801457c:	9b00      	ldr	r3, [sp, #0]
 801457e:	2200      	movs	r2, #0
 8014580:	701a      	strb	r2, [r3, #0]
 8014582:	e7df      	b.n	8014544 <_vsniprintf_r+0x16>

08014584 <vsniprintf>:
 8014584:	b507      	push	{r0, r1, r2, lr}
 8014586:	9300      	str	r3, [sp, #0]
 8014588:	4613      	mov	r3, r2
 801458a:	460a      	mov	r2, r1
 801458c:	4601      	mov	r1, r0
 801458e:	4803      	ldr	r0, [pc, #12]	; (801459c <vsniprintf+0x18>)
 8014590:	6800      	ldr	r0, [r0, #0]
 8014592:	f7ff ffcc 	bl	801452e <_vsniprintf_r>
 8014596:	b003      	add	sp, #12
 8014598:	f85d fb04 	ldr.w	pc, [sp], #4
 801459c:	200001cc 	.word	0x200001cc

080145a0 <memset>:
 80145a0:	4402      	add	r2, r0
 80145a2:	4603      	mov	r3, r0
 80145a4:	4293      	cmp	r3, r2
 80145a6:	d100      	bne.n	80145aa <memset+0xa>
 80145a8:	4770      	bx	lr
 80145aa:	f803 1b01 	strb.w	r1, [r3], #1
 80145ae:	e7f9      	b.n	80145a4 <memset+0x4>

080145b0 <_localeconv_r>:
 80145b0:	4800      	ldr	r0, [pc, #0]	; (80145b4 <_localeconv_r+0x4>)
 80145b2:	4770      	bx	lr
 80145b4:	200002c0 	.word	0x200002c0

080145b8 <_close_r>:
 80145b8:	b538      	push	{r3, r4, r5, lr}
 80145ba:	4d06      	ldr	r5, [pc, #24]	; (80145d4 <_close_r+0x1c>)
 80145bc:	2300      	movs	r3, #0
 80145be:	4604      	mov	r4, r0
 80145c0:	4608      	mov	r0, r1
 80145c2:	602b      	str	r3, [r5, #0]
 80145c4:	f7f2 ff9d 	bl	8007502 <_close>
 80145c8:	1c43      	adds	r3, r0, #1
 80145ca:	d102      	bne.n	80145d2 <_close_r+0x1a>
 80145cc:	682b      	ldr	r3, [r5, #0]
 80145ce:	b103      	cbz	r3, 80145d2 <_close_r+0x1a>
 80145d0:	6023      	str	r3, [r4, #0]
 80145d2:	bd38      	pop	{r3, r4, r5, pc}
 80145d4:	2000331c 	.word	0x2000331c

080145d8 <_reclaim_reent>:
 80145d8:	4b29      	ldr	r3, [pc, #164]	; (8014680 <_reclaim_reent+0xa8>)
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	4283      	cmp	r3, r0
 80145de:	b570      	push	{r4, r5, r6, lr}
 80145e0:	4604      	mov	r4, r0
 80145e2:	d04b      	beq.n	801467c <_reclaim_reent+0xa4>
 80145e4:	69c3      	ldr	r3, [r0, #28]
 80145e6:	b143      	cbz	r3, 80145fa <_reclaim_reent+0x22>
 80145e8:	68db      	ldr	r3, [r3, #12]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d144      	bne.n	8014678 <_reclaim_reent+0xa0>
 80145ee:	69e3      	ldr	r3, [r4, #28]
 80145f0:	6819      	ldr	r1, [r3, #0]
 80145f2:	b111      	cbz	r1, 80145fa <_reclaim_reent+0x22>
 80145f4:	4620      	mov	r0, r4
 80145f6:	f000 ff31 	bl	801545c <_free_r>
 80145fa:	6961      	ldr	r1, [r4, #20]
 80145fc:	b111      	cbz	r1, 8014604 <_reclaim_reent+0x2c>
 80145fe:	4620      	mov	r0, r4
 8014600:	f000 ff2c 	bl	801545c <_free_r>
 8014604:	69e1      	ldr	r1, [r4, #28]
 8014606:	b111      	cbz	r1, 801460e <_reclaim_reent+0x36>
 8014608:	4620      	mov	r0, r4
 801460a:	f000 ff27 	bl	801545c <_free_r>
 801460e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014610:	b111      	cbz	r1, 8014618 <_reclaim_reent+0x40>
 8014612:	4620      	mov	r0, r4
 8014614:	f000 ff22 	bl	801545c <_free_r>
 8014618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801461a:	b111      	cbz	r1, 8014622 <_reclaim_reent+0x4a>
 801461c:	4620      	mov	r0, r4
 801461e:	f000 ff1d 	bl	801545c <_free_r>
 8014622:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014624:	b111      	cbz	r1, 801462c <_reclaim_reent+0x54>
 8014626:	4620      	mov	r0, r4
 8014628:	f000 ff18 	bl	801545c <_free_r>
 801462c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801462e:	b111      	cbz	r1, 8014636 <_reclaim_reent+0x5e>
 8014630:	4620      	mov	r0, r4
 8014632:	f000 ff13 	bl	801545c <_free_r>
 8014636:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8014638:	b111      	cbz	r1, 8014640 <_reclaim_reent+0x68>
 801463a:	4620      	mov	r0, r4
 801463c:	f000 ff0e 	bl	801545c <_free_r>
 8014640:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014642:	b111      	cbz	r1, 801464a <_reclaim_reent+0x72>
 8014644:	4620      	mov	r0, r4
 8014646:	f000 ff09 	bl	801545c <_free_r>
 801464a:	6a23      	ldr	r3, [r4, #32]
 801464c:	b1b3      	cbz	r3, 801467c <_reclaim_reent+0xa4>
 801464e:	4620      	mov	r0, r4
 8014650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014654:	4718      	bx	r3
 8014656:	5949      	ldr	r1, [r1, r5]
 8014658:	b941      	cbnz	r1, 801466c <_reclaim_reent+0x94>
 801465a:	3504      	adds	r5, #4
 801465c:	69e3      	ldr	r3, [r4, #28]
 801465e:	2d80      	cmp	r5, #128	; 0x80
 8014660:	68d9      	ldr	r1, [r3, #12]
 8014662:	d1f8      	bne.n	8014656 <_reclaim_reent+0x7e>
 8014664:	4620      	mov	r0, r4
 8014666:	f000 fef9 	bl	801545c <_free_r>
 801466a:	e7c0      	b.n	80145ee <_reclaim_reent+0x16>
 801466c:	680e      	ldr	r6, [r1, #0]
 801466e:	4620      	mov	r0, r4
 8014670:	f000 fef4 	bl	801545c <_free_r>
 8014674:	4631      	mov	r1, r6
 8014676:	e7ef      	b.n	8014658 <_reclaim_reent+0x80>
 8014678:	2500      	movs	r5, #0
 801467a:	e7ef      	b.n	801465c <_reclaim_reent+0x84>
 801467c:	bd70      	pop	{r4, r5, r6, pc}
 801467e:	bf00      	nop
 8014680:	200001cc 	.word	0x200001cc

08014684 <_lseek_r>:
 8014684:	b538      	push	{r3, r4, r5, lr}
 8014686:	4d07      	ldr	r5, [pc, #28]	; (80146a4 <_lseek_r+0x20>)
 8014688:	4604      	mov	r4, r0
 801468a:	4608      	mov	r0, r1
 801468c:	4611      	mov	r1, r2
 801468e:	2200      	movs	r2, #0
 8014690:	602a      	str	r2, [r5, #0]
 8014692:	461a      	mov	r2, r3
 8014694:	f7f2 ff5c 	bl	8007550 <_lseek>
 8014698:	1c43      	adds	r3, r0, #1
 801469a:	d102      	bne.n	80146a2 <_lseek_r+0x1e>
 801469c:	682b      	ldr	r3, [r5, #0]
 801469e:	b103      	cbz	r3, 80146a2 <_lseek_r+0x1e>
 80146a0:	6023      	str	r3, [r4, #0]
 80146a2:	bd38      	pop	{r3, r4, r5, pc}
 80146a4:	2000331c 	.word	0x2000331c

080146a8 <_read_r>:
 80146a8:	b538      	push	{r3, r4, r5, lr}
 80146aa:	4d07      	ldr	r5, [pc, #28]	; (80146c8 <_read_r+0x20>)
 80146ac:	4604      	mov	r4, r0
 80146ae:	4608      	mov	r0, r1
 80146b0:	4611      	mov	r1, r2
 80146b2:	2200      	movs	r2, #0
 80146b4:	602a      	str	r2, [r5, #0]
 80146b6:	461a      	mov	r2, r3
 80146b8:	f7f2 feea 	bl	8007490 <_read>
 80146bc:	1c43      	adds	r3, r0, #1
 80146be:	d102      	bne.n	80146c6 <_read_r+0x1e>
 80146c0:	682b      	ldr	r3, [r5, #0]
 80146c2:	b103      	cbz	r3, 80146c6 <_read_r+0x1e>
 80146c4:	6023      	str	r3, [r4, #0]
 80146c6:	bd38      	pop	{r3, r4, r5, pc}
 80146c8:	2000331c 	.word	0x2000331c

080146cc <_write_r>:
 80146cc:	b538      	push	{r3, r4, r5, lr}
 80146ce:	4d07      	ldr	r5, [pc, #28]	; (80146ec <_write_r+0x20>)
 80146d0:	4604      	mov	r4, r0
 80146d2:	4608      	mov	r0, r1
 80146d4:	4611      	mov	r1, r2
 80146d6:	2200      	movs	r2, #0
 80146d8:	602a      	str	r2, [r5, #0]
 80146da:	461a      	mov	r2, r3
 80146dc:	f7f2 fef5 	bl	80074ca <_write>
 80146e0:	1c43      	adds	r3, r0, #1
 80146e2:	d102      	bne.n	80146ea <_write_r+0x1e>
 80146e4:	682b      	ldr	r3, [r5, #0]
 80146e6:	b103      	cbz	r3, 80146ea <_write_r+0x1e>
 80146e8:	6023      	str	r3, [r4, #0]
 80146ea:	bd38      	pop	{r3, r4, r5, pc}
 80146ec:	2000331c 	.word	0x2000331c

080146f0 <__errno>:
 80146f0:	4b01      	ldr	r3, [pc, #4]	; (80146f8 <__errno+0x8>)
 80146f2:	6818      	ldr	r0, [r3, #0]
 80146f4:	4770      	bx	lr
 80146f6:	bf00      	nop
 80146f8:	200001cc 	.word	0x200001cc

080146fc <__libc_init_array>:
 80146fc:	b570      	push	{r4, r5, r6, lr}
 80146fe:	4d0d      	ldr	r5, [pc, #52]	; (8014734 <__libc_init_array+0x38>)
 8014700:	4c0d      	ldr	r4, [pc, #52]	; (8014738 <__libc_init_array+0x3c>)
 8014702:	1b64      	subs	r4, r4, r5
 8014704:	10a4      	asrs	r4, r4, #2
 8014706:	2600      	movs	r6, #0
 8014708:	42a6      	cmp	r6, r4
 801470a:	d109      	bne.n	8014720 <__libc_init_array+0x24>
 801470c:	4d0b      	ldr	r5, [pc, #44]	; (801473c <__libc_init_array+0x40>)
 801470e:	4c0c      	ldr	r4, [pc, #48]	; (8014740 <__libc_init_array+0x44>)
 8014710:	f002 ffce 	bl	80176b0 <_init>
 8014714:	1b64      	subs	r4, r4, r5
 8014716:	10a4      	asrs	r4, r4, #2
 8014718:	2600      	movs	r6, #0
 801471a:	42a6      	cmp	r6, r4
 801471c:	d105      	bne.n	801472a <__libc_init_array+0x2e>
 801471e:	bd70      	pop	{r4, r5, r6, pc}
 8014720:	f855 3b04 	ldr.w	r3, [r5], #4
 8014724:	4798      	blx	r3
 8014726:	3601      	adds	r6, #1
 8014728:	e7ee      	b.n	8014708 <__libc_init_array+0xc>
 801472a:	f855 3b04 	ldr.w	r3, [r5], #4
 801472e:	4798      	blx	r3
 8014730:	3601      	adds	r6, #1
 8014732:	e7f2      	b.n	801471a <__libc_init_array+0x1e>
 8014734:	08018938 	.word	0x08018938
 8014738:	08018938 	.word	0x08018938
 801473c:	08018938 	.word	0x08018938
 8014740:	0801893c 	.word	0x0801893c

08014744 <__retarget_lock_init_recursive>:
 8014744:	4770      	bx	lr

08014746 <__retarget_lock_acquire_recursive>:
 8014746:	4770      	bx	lr

08014748 <__retarget_lock_release_recursive>:
 8014748:	4770      	bx	lr

0801474a <memcpy>:
 801474a:	440a      	add	r2, r1
 801474c:	4291      	cmp	r1, r2
 801474e:	f100 33ff 	add.w	r3, r0, #4294967295
 8014752:	d100      	bne.n	8014756 <memcpy+0xc>
 8014754:	4770      	bx	lr
 8014756:	b510      	push	{r4, lr}
 8014758:	f811 4b01 	ldrb.w	r4, [r1], #1
 801475c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014760:	4291      	cmp	r1, r2
 8014762:	d1f9      	bne.n	8014758 <memcpy+0xe>
 8014764:	bd10      	pop	{r4, pc}

08014766 <quorem>:
 8014766:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801476a:	6903      	ldr	r3, [r0, #16]
 801476c:	690c      	ldr	r4, [r1, #16]
 801476e:	42a3      	cmp	r3, r4
 8014770:	4607      	mov	r7, r0
 8014772:	db7e      	blt.n	8014872 <quorem+0x10c>
 8014774:	3c01      	subs	r4, #1
 8014776:	f101 0814 	add.w	r8, r1, #20
 801477a:	f100 0514 	add.w	r5, r0, #20
 801477e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014782:	9301      	str	r3, [sp, #4]
 8014784:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014788:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801478c:	3301      	adds	r3, #1
 801478e:	429a      	cmp	r2, r3
 8014790:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014794:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014798:	fbb2 f6f3 	udiv	r6, r2, r3
 801479c:	d331      	bcc.n	8014802 <quorem+0x9c>
 801479e:	f04f 0e00 	mov.w	lr, #0
 80147a2:	4640      	mov	r0, r8
 80147a4:	46ac      	mov	ip, r5
 80147a6:	46f2      	mov	sl, lr
 80147a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80147ac:	b293      	uxth	r3, r2
 80147ae:	fb06 e303 	mla	r3, r6, r3, lr
 80147b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80147b6:	0c1a      	lsrs	r2, r3, #16
 80147b8:	b29b      	uxth	r3, r3
 80147ba:	ebaa 0303 	sub.w	r3, sl, r3
 80147be:	f8dc a000 	ldr.w	sl, [ip]
 80147c2:	fa13 f38a 	uxtah	r3, r3, sl
 80147c6:	fb06 220e 	mla	r2, r6, lr, r2
 80147ca:	9300      	str	r3, [sp, #0]
 80147cc:	9b00      	ldr	r3, [sp, #0]
 80147ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80147d2:	b292      	uxth	r2, r2
 80147d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80147d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80147dc:	f8bd 3000 	ldrh.w	r3, [sp]
 80147e0:	4581      	cmp	r9, r0
 80147e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80147e6:	f84c 3b04 	str.w	r3, [ip], #4
 80147ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80147ee:	d2db      	bcs.n	80147a8 <quorem+0x42>
 80147f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80147f4:	b92b      	cbnz	r3, 8014802 <quorem+0x9c>
 80147f6:	9b01      	ldr	r3, [sp, #4]
 80147f8:	3b04      	subs	r3, #4
 80147fa:	429d      	cmp	r5, r3
 80147fc:	461a      	mov	r2, r3
 80147fe:	d32c      	bcc.n	801485a <quorem+0xf4>
 8014800:	613c      	str	r4, [r7, #16]
 8014802:	4638      	mov	r0, r7
 8014804:	f001 f9a6 	bl	8015b54 <__mcmp>
 8014808:	2800      	cmp	r0, #0
 801480a:	db22      	blt.n	8014852 <quorem+0xec>
 801480c:	3601      	adds	r6, #1
 801480e:	4629      	mov	r1, r5
 8014810:	2000      	movs	r0, #0
 8014812:	f858 2b04 	ldr.w	r2, [r8], #4
 8014816:	f8d1 c000 	ldr.w	ip, [r1]
 801481a:	b293      	uxth	r3, r2
 801481c:	1ac3      	subs	r3, r0, r3
 801481e:	0c12      	lsrs	r2, r2, #16
 8014820:	fa13 f38c 	uxtah	r3, r3, ip
 8014824:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8014828:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801482c:	b29b      	uxth	r3, r3
 801482e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014832:	45c1      	cmp	r9, r8
 8014834:	f841 3b04 	str.w	r3, [r1], #4
 8014838:	ea4f 4022 	mov.w	r0, r2, asr #16
 801483c:	d2e9      	bcs.n	8014812 <quorem+0xac>
 801483e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014842:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014846:	b922      	cbnz	r2, 8014852 <quorem+0xec>
 8014848:	3b04      	subs	r3, #4
 801484a:	429d      	cmp	r5, r3
 801484c:	461a      	mov	r2, r3
 801484e:	d30a      	bcc.n	8014866 <quorem+0x100>
 8014850:	613c      	str	r4, [r7, #16]
 8014852:	4630      	mov	r0, r6
 8014854:	b003      	add	sp, #12
 8014856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801485a:	6812      	ldr	r2, [r2, #0]
 801485c:	3b04      	subs	r3, #4
 801485e:	2a00      	cmp	r2, #0
 8014860:	d1ce      	bne.n	8014800 <quorem+0x9a>
 8014862:	3c01      	subs	r4, #1
 8014864:	e7c9      	b.n	80147fa <quorem+0x94>
 8014866:	6812      	ldr	r2, [r2, #0]
 8014868:	3b04      	subs	r3, #4
 801486a:	2a00      	cmp	r2, #0
 801486c:	d1f0      	bne.n	8014850 <quorem+0xea>
 801486e:	3c01      	subs	r4, #1
 8014870:	e7eb      	b.n	801484a <quorem+0xe4>
 8014872:	2000      	movs	r0, #0
 8014874:	e7ee      	b.n	8014854 <quorem+0xee>
	...

08014878 <_dtoa_r>:
 8014878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801487c:	ed2d 8b04 	vpush	{d8-d9}
 8014880:	69c5      	ldr	r5, [r0, #28]
 8014882:	b093      	sub	sp, #76	; 0x4c
 8014884:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014888:	ec57 6b10 	vmov	r6, r7, d0
 801488c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014890:	9107      	str	r1, [sp, #28]
 8014892:	4604      	mov	r4, r0
 8014894:	920a      	str	r2, [sp, #40]	; 0x28
 8014896:	930d      	str	r3, [sp, #52]	; 0x34
 8014898:	b975      	cbnz	r5, 80148b8 <_dtoa_r+0x40>
 801489a:	2010      	movs	r0, #16
 801489c:	f000 fe2a 	bl	80154f4 <malloc>
 80148a0:	4602      	mov	r2, r0
 80148a2:	61e0      	str	r0, [r4, #28]
 80148a4:	b920      	cbnz	r0, 80148b0 <_dtoa_r+0x38>
 80148a6:	4bae      	ldr	r3, [pc, #696]	; (8014b60 <_dtoa_r+0x2e8>)
 80148a8:	21ef      	movs	r1, #239	; 0xef
 80148aa:	48ae      	ldr	r0, [pc, #696]	; (8014b64 <_dtoa_r+0x2ec>)
 80148ac:	f001 fe5c 	bl	8016568 <__assert_func>
 80148b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80148b4:	6005      	str	r5, [r0, #0]
 80148b6:	60c5      	str	r5, [r0, #12]
 80148b8:	69e3      	ldr	r3, [r4, #28]
 80148ba:	6819      	ldr	r1, [r3, #0]
 80148bc:	b151      	cbz	r1, 80148d4 <_dtoa_r+0x5c>
 80148be:	685a      	ldr	r2, [r3, #4]
 80148c0:	604a      	str	r2, [r1, #4]
 80148c2:	2301      	movs	r3, #1
 80148c4:	4093      	lsls	r3, r2
 80148c6:	608b      	str	r3, [r1, #8]
 80148c8:	4620      	mov	r0, r4
 80148ca:	f000 ff07 	bl	80156dc <_Bfree>
 80148ce:	69e3      	ldr	r3, [r4, #28]
 80148d0:	2200      	movs	r2, #0
 80148d2:	601a      	str	r2, [r3, #0]
 80148d4:	1e3b      	subs	r3, r7, #0
 80148d6:	bfbb      	ittet	lt
 80148d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80148dc:	9303      	strlt	r3, [sp, #12]
 80148de:	2300      	movge	r3, #0
 80148e0:	2201      	movlt	r2, #1
 80148e2:	bfac      	ite	ge
 80148e4:	f8c8 3000 	strge.w	r3, [r8]
 80148e8:	f8c8 2000 	strlt.w	r2, [r8]
 80148ec:	4b9e      	ldr	r3, [pc, #632]	; (8014b68 <_dtoa_r+0x2f0>)
 80148ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80148f2:	ea33 0308 	bics.w	r3, r3, r8
 80148f6:	d11b      	bne.n	8014930 <_dtoa_r+0xb8>
 80148f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80148fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80148fe:	6013      	str	r3, [r2, #0]
 8014900:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8014904:	4333      	orrs	r3, r6
 8014906:	f000 8593 	beq.w	8015430 <_dtoa_r+0xbb8>
 801490a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801490c:	b963      	cbnz	r3, 8014928 <_dtoa_r+0xb0>
 801490e:	4b97      	ldr	r3, [pc, #604]	; (8014b6c <_dtoa_r+0x2f4>)
 8014910:	e027      	b.n	8014962 <_dtoa_r+0xea>
 8014912:	4b97      	ldr	r3, [pc, #604]	; (8014b70 <_dtoa_r+0x2f8>)
 8014914:	9300      	str	r3, [sp, #0]
 8014916:	3308      	adds	r3, #8
 8014918:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801491a:	6013      	str	r3, [r2, #0]
 801491c:	9800      	ldr	r0, [sp, #0]
 801491e:	b013      	add	sp, #76	; 0x4c
 8014920:	ecbd 8b04 	vpop	{d8-d9}
 8014924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014928:	4b90      	ldr	r3, [pc, #576]	; (8014b6c <_dtoa_r+0x2f4>)
 801492a:	9300      	str	r3, [sp, #0]
 801492c:	3303      	adds	r3, #3
 801492e:	e7f3      	b.n	8014918 <_dtoa_r+0xa0>
 8014930:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014934:	2200      	movs	r2, #0
 8014936:	ec51 0b17 	vmov	r0, r1, d7
 801493a:	eeb0 8a47 	vmov.f32	s16, s14
 801493e:	eef0 8a67 	vmov.f32	s17, s15
 8014942:	2300      	movs	r3, #0
 8014944:	f7ec f898 	bl	8000a78 <__aeabi_dcmpeq>
 8014948:	4681      	mov	r9, r0
 801494a:	b160      	cbz	r0, 8014966 <_dtoa_r+0xee>
 801494c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801494e:	2301      	movs	r3, #1
 8014950:	6013      	str	r3, [r2, #0]
 8014952:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014954:	2b00      	cmp	r3, #0
 8014956:	f000 8568 	beq.w	801542a <_dtoa_r+0xbb2>
 801495a:	4b86      	ldr	r3, [pc, #536]	; (8014b74 <_dtoa_r+0x2fc>)
 801495c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801495e:	6013      	str	r3, [r2, #0]
 8014960:	3b01      	subs	r3, #1
 8014962:	9300      	str	r3, [sp, #0]
 8014964:	e7da      	b.n	801491c <_dtoa_r+0xa4>
 8014966:	aa10      	add	r2, sp, #64	; 0x40
 8014968:	a911      	add	r1, sp, #68	; 0x44
 801496a:	4620      	mov	r0, r4
 801496c:	eeb0 0a48 	vmov.f32	s0, s16
 8014970:	eef0 0a68 	vmov.f32	s1, s17
 8014974:	f001 f994 	bl	8015ca0 <__d2b>
 8014978:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801497c:	4682      	mov	sl, r0
 801497e:	2d00      	cmp	r5, #0
 8014980:	d07f      	beq.n	8014a82 <_dtoa_r+0x20a>
 8014982:	ee18 3a90 	vmov	r3, s17
 8014986:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801498a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801498e:	ec51 0b18 	vmov	r0, r1, d8
 8014992:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014996:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801499a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801499e:	4619      	mov	r1, r3
 80149a0:	2200      	movs	r2, #0
 80149a2:	4b75      	ldr	r3, [pc, #468]	; (8014b78 <_dtoa_r+0x300>)
 80149a4:	f7eb fc48 	bl	8000238 <__aeabi_dsub>
 80149a8:	a367      	add	r3, pc, #412	; (adr r3, 8014b48 <_dtoa_r+0x2d0>)
 80149aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ae:	f7eb fdfb 	bl	80005a8 <__aeabi_dmul>
 80149b2:	a367      	add	r3, pc, #412	; (adr r3, 8014b50 <_dtoa_r+0x2d8>)
 80149b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149b8:	f7eb fc40 	bl	800023c <__adddf3>
 80149bc:	4606      	mov	r6, r0
 80149be:	4628      	mov	r0, r5
 80149c0:	460f      	mov	r7, r1
 80149c2:	f7eb fd87 	bl	80004d4 <__aeabi_i2d>
 80149c6:	a364      	add	r3, pc, #400	; (adr r3, 8014b58 <_dtoa_r+0x2e0>)
 80149c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149cc:	f7eb fdec 	bl	80005a8 <__aeabi_dmul>
 80149d0:	4602      	mov	r2, r0
 80149d2:	460b      	mov	r3, r1
 80149d4:	4630      	mov	r0, r6
 80149d6:	4639      	mov	r1, r7
 80149d8:	f7eb fc30 	bl	800023c <__adddf3>
 80149dc:	4606      	mov	r6, r0
 80149de:	460f      	mov	r7, r1
 80149e0:	f7ec f892 	bl	8000b08 <__aeabi_d2iz>
 80149e4:	2200      	movs	r2, #0
 80149e6:	4683      	mov	fp, r0
 80149e8:	2300      	movs	r3, #0
 80149ea:	4630      	mov	r0, r6
 80149ec:	4639      	mov	r1, r7
 80149ee:	f7ec f84d 	bl	8000a8c <__aeabi_dcmplt>
 80149f2:	b148      	cbz	r0, 8014a08 <_dtoa_r+0x190>
 80149f4:	4658      	mov	r0, fp
 80149f6:	f7eb fd6d 	bl	80004d4 <__aeabi_i2d>
 80149fa:	4632      	mov	r2, r6
 80149fc:	463b      	mov	r3, r7
 80149fe:	f7ec f83b 	bl	8000a78 <__aeabi_dcmpeq>
 8014a02:	b908      	cbnz	r0, 8014a08 <_dtoa_r+0x190>
 8014a04:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014a08:	f1bb 0f16 	cmp.w	fp, #22
 8014a0c:	d857      	bhi.n	8014abe <_dtoa_r+0x246>
 8014a0e:	4b5b      	ldr	r3, [pc, #364]	; (8014b7c <_dtoa_r+0x304>)
 8014a10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a18:	ec51 0b18 	vmov	r0, r1, d8
 8014a1c:	f7ec f836 	bl	8000a8c <__aeabi_dcmplt>
 8014a20:	2800      	cmp	r0, #0
 8014a22:	d04e      	beq.n	8014ac2 <_dtoa_r+0x24a>
 8014a24:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014a28:	2300      	movs	r3, #0
 8014a2a:	930c      	str	r3, [sp, #48]	; 0x30
 8014a2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a2e:	1b5b      	subs	r3, r3, r5
 8014a30:	1e5a      	subs	r2, r3, #1
 8014a32:	bf45      	ittet	mi
 8014a34:	f1c3 0301 	rsbmi	r3, r3, #1
 8014a38:	9305      	strmi	r3, [sp, #20]
 8014a3a:	2300      	movpl	r3, #0
 8014a3c:	2300      	movmi	r3, #0
 8014a3e:	9206      	str	r2, [sp, #24]
 8014a40:	bf54      	ite	pl
 8014a42:	9305      	strpl	r3, [sp, #20]
 8014a44:	9306      	strmi	r3, [sp, #24]
 8014a46:	f1bb 0f00 	cmp.w	fp, #0
 8014a4a:	db3c      	blt.n	8014ac6 <_dtoa_r+0x24e>
 8014a4c:	9b06      	ldr	r3, [sp, #24]
 8014a4e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8014a52:	445b      	add	r3, fp
 8014a54:	9306      	str	r3, [sp, #24]
 8014a56:	2300      	movs	r3, #0
 8014a58:	9308      	str	r3, [sp, #32]
 8014a5a:	9b07      	ldr	r3, [sp, #28]
 8014a5c:	2b09      	cmp	r3, #9
 8014a5e:	d868      	bhi.n	8014b32 <_dtoa_r+0x2ba>
 8014a60:	2b05      	cmp	r3, #5
 8014a62:	bfc4      	itt	gt
 8014a64:	3b04      	subgt	r3, #4
 8014a66:	9307      	strgt	r3, [sp, #28]
 8014a68:	9b07      	ldr	r3, [sp, #28]
 8014a6a:	f1a3 0302 	sub.w	r3, r3, #2
 8014a6e:	bfcc      	ite	gt
 8014a70:	2500      	movgt	r5, #0
 8014a72:	2501      	movle	r5, #1
 8014a74:	2b03      	cmp	r3, #3
 8014a76:	f200 8085 	bhi.w	8014b84 <_dtoa_r+0x30c>
 8014a7a:	e8df f003 	tbb	[pc, r3]
 8014a7e:	3b2e      	.short	0x3b2e
 8014a80:	5839      	.short	0x5839
 8014a82:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014a86:	441d      	add	r5, r3
 8014a88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014a8c:	2b20      	cmp	r3, #32
 8014a8e:	bfc1      	itttt	gt
 8014a90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014a94:	fa08 f803 	lslgt.w	r8, r8, r3
 8014a98:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8014a9c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8014aa0:	bfd6      	itet	le
 8014aa2:	f1c3 0320 	rsble	r3, r3, #32
 8014aa6:	ea48 0003 	orrgt.w	r0, r8, r3
 8014aaa:	fa06 f003 	lslle.w	r0, r6, r3
 8014aae:	f7eb fd01 	bl	80004b4 <__aeabi_ui2d>
 8014ab2:	2201      	movs	r2, #1
 8014ab4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8014ab8:	3d01      	subs	r5, #1
 8014aba:	920e      	str	r2, [sp, #56]	; 0x38
 8014abc:	e76f      	b.n	801499e <_dtoa_r+0x126>
 8014abe:	2301      	movs	r3, #1
 8014ac0:	e7b3      	b.n	8014a2a <_dtoa_r+0x1b2>
 8014ac2:	900c      	str	r0, [sp, #48]	; 0x30
 8014ac4:	e7b2      	b.n	8014a2c <_dtoa_r+0x1b4>
 8014ac6:	9b05      	ldr	r3, [sp, #20]
 8014ac8:	eba3 030b 	sub.w	r3, r3, fp
 8014acc:	9305      	str	r3, [sp, #20]
 8014ace:	f1cb 0300 	rsb	r3, fp, #0
 8014ad2:	9308      	str	r3, [sp, #32]
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	930b      	str	r3, [sp, #44]	; 0x2c
 8014ad8:	e7bf      	b.n	8014a5a <_dtoa_r+0x1e2>
 8014ada:	2300      	movs	r3, #0
 8014adc:	9309      	str	r3, [sp, #36]	; 0x24
 8014ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	dc52      	bgt.n	8014b8a <_dtoa_r+0x312>
 8014ae4:	2301      	movs	r3, #1
 8014ae6:	9301      	str	r3, [sp, #4]
 8014ae8:	9304      	str	r3, [sp, #16]
 8014aea:	461a      	mov	r2, r3
 8014aec:	920a      	str	r2, [sp, #40]	; 0x28
 8014aee:	e00b      	b.n	8014b08 <_dtoa_r+0x290>
 8014af0:	2301      	movs	r3, #1
 8014af2:	e7f3      	b.n	8014adc <_dtoa_r+0x264>
 8014af4:	2300      	movs	r3, #0
 8014af6:	9309      	str	r3, [sp, #36]	; 0x24
 8014af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014afa:	445b      	add	r3, fp
 8014afc:	9301      	str	r3, [sp, #4]
 8014afe:	3301      	adds	r3, #1
 8014b00:	2b01      	cmp	r3, #1
 8014b02:	9304      	str	r3, [sp, #16]
 8014b04:	bfb8      	it	lt
 8014b06:	2301      	movlt	r3, #1
 8014b08:	69e0      	ldr	r0, [r4, #28]
 8014b0a:	2100      	movs	r1, #0
 8014b0c:	2204      	movs	r2, #4
 8014b0e:	f102 0614 	add.w	r6, r2, #20
 8014b12:	429e      	cmp	r6, r3
 8014b14:	d93d      	bls.n	8014b92 <_dtoa_r+0x31a>
 8014b16:	6041      	str	r1, [r0, #4]
 8014b18:	4620      	mov	r0, r4
 8014b1a:	f000 fd9f 	bl	801565c <_Balloc>
 8014b1e:	9000      	str	r0, [sp, #0]
 8014b20:	2800      	cmp	r0, #0
 8014b22:	d139      	bne.n	8014b98 <_dtoa_r+0x320>
 8014b24:	4b16      	ldr	r3, [pc, #88]	; (8014b80 <_dtoa_r+0x308>)
 8014b26:	4602      	mov	r2, r0
 8014b28:	f240 11af 	movw	r1, #431	; 0x1af
 8014b2c:	e6bd      	b.n	80148aa <_dtoa_r+0x32>
 8014b2e:	2301      	movs	r3, #1
 8014b30:	e7e1      	b.n	8014af6 <_dtoa_r+0x27e>
 8014b32:	2501      	movs	r5, #1
 8014b34:	2300      	movs	r3, #0
 8014b36:	9307      	str	r3, [sp, #28]
 8014b38:	9509      	str	r5, [sp, #36]	; 0x24
 8014b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8014b3e:	9301      	str	r3, [sp, #4]
 8014b40:	9304      	str	r3, [sp, #16]
 8014b42:	2200      	movs	r2, #0
 8014b44:	2312      	movs	r3, #18
 8014b46:	e7d1      	b.n	8014aec <_dtoa_r+0x274>
 8014b48:	636f4361 	.word	0x636f4361
 8014b4c:	3fd287a7 	.word	0x3fd287a7
 8014b50:	8b60c8b3 	.word	0x8b60c8b3
 8014b54:	3fc68a28 	.word	0x3fc68a28
 8014b58:	509f79fb 	.word	0x509f79fb
 8014b5c:	3fd34413 	.word	0x3fd34413
 8014b60:	080185c9 	.word	0x080185c9
 8014b64:	080185e0 	.word	0x080185e0
 8014b68:	7ff00000 	.word	0x7ff00000
 8014b6c:	080185c5 	.word	0x080185c5
 8014b70:	080185bc 	.word	0x080185bc
 8014b74:	08018599 	.word	0x08018599
 8014b78:	3ff80000 	.word	0x3ff80000
 8014b7c:	080186d0 	.word	0x080186d0
 8014b80:	08018638 	.word	0x08018638
 8014b84:	2301      	movs	r3, #1
 8014b86:	9309      	str	r3, [sp, #36]	; 0x24
 8014b88:	e7d7      	b.n	8014b3a <_dtoa_r+0x2c2>
 8014b8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b8c:	9301      	str	r3, [sp, #4]
 8014b8e:	9304      	str	r3, [sp, #16]
 8014b90:	e7ba      	b.n	8014b08 <_dtoa_r+0x290>
 8014b92:	3101      	adds	r1, #1
 8014b94:	0052      	lsls	r2, r2, #1
 8014b96:	e7ba      	b.n	8014b0e <_dtoa_r+0x296>
 8014b98:	69e3      	ldr	r3, [r4, #28]
 8014b9a:	9a00      	ldr	r2, [sp, #0]
 8014b9c:	601a      	str	r2, [r3, #0]
 8014b9e:	9b04      	ldr	r3, [sp, #16]
 8014ba0:	2b0e      	cmp	r3, #14
 8014ba2:	f200 80a8 	bhi.w	8014cf6 <_dtoa_r+0x47e>
 8014ba6:	2d00      	cmp	r5, #0
 8014ba8:	f000 80a5 	beq.w	8014cf6 <_dtoa_r+0x47e>
 8014bac:	f1bb 0f00 	cmp.w	fp, #0
 8014bb0:	dd38      	ble.n	8014c24 <_dtoa_r+0x3ac>
 8014bb2:	4bc0      	ldr	r3, [pc, #768]	; (8014eb4 <_dtoa_r+0x63c>)
 8014bb4:	f00b 020f 	and.w	r2, fp, #15
 8014bb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014bbc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8014bc0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8014bc4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8014bc8:	d019      	beq.n	8014bfe <_dtoa_r+0x386>
 8014bca:	4bbb      	ldr	r3, [pc, #748]	; (8014eb8 <_dtoa_r+0x640>)
 8014bcc:	ec51 0b18 	vmov	r0, r1, d8
 8014bd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014bd4:	f7eb fe12 	bl	80007fc <__aeabi_ddiv>
 8014bd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014bdc:	f008 080f 	and.w	r8, r8, #15
 8014be0:	2503      	movs	r5, #3
 8014be2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8014eb8 <_dtoa_r+0x640>
 8014be6:	f1b8 0f00 	cmp.w	r8, #0
 8014bea:	d10a      	bne.n	8014c02 <_dtoa_r+0x38a>
 8014bec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014bf0:	4632      	mov	r2, r6
 8014bf2:	463b      	mov	r3, r7
 8014bf4:	f7eb fe02 	bl	80007fc <__aeabi_ddiv>
 8014bf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014bfc:	e02b      	b.n	8014c56 <_dtoa_r+0x3de>
 8014bfe:	2502      	movs	r5, #2
 8014c00:	e7ef      	b.n	8014be2 <_dtoa_r+0x36a>
 8014c02:	f018 0f01 	tst.w	r8, #1
 8014c06:	d008      	beq.n	8014c1a <_dtoa_r+0x3a2>
 8014c08:	4630      	mov	r0, r6
 8014c0a:	4639      	mov	r1, r7
 8014c0c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8014c10:	f7eb fcca 	bl	80005a8 <__aeabi_dmul>
 8014c14:	3501      	adds	r5, #1
 8014c16:	4606      	mov	r6, r0
 8014c18:	460f      	mov	r7, r1
 8014c1a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014c1e:	f109 0908 	add.w	r9, r9, #8
 8014c22:	e7e0      	b.n	8014be6 <_dtoa_r+0x36e>
 8014c24:	f000 809f 	beq.w	8014d66 <_dtoa_r+0x4ee>
 8014c28:	f1cb 0600 	rsb	r6, fp, #0
 8014c2c:	4ba1      	ldr	r3, [pc, #644]	; (8014eb4 <_dtoa_r+0x63c>)
 8014c2e:	4fa2      	ldr	r7, [pc, #648]	; (8014eb8 <_dtoa_r+0x640>)
 8014c30:	f006 020f 	and.w	r2, r6, #15
 8014c34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c3c:	ec51 0b18 	vmov	r0, r1, d8
 8014c40:	f7eb fcb2 	bl	80005a8 <__aeabi_dmul>
 8014c44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014c48:	1136      	asrs	r6, r6, #4
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	2502      	movs	r5, #2
 8014c4e:	2e00      	cmp	r6, #0
 8014c50:	d17e      	bne.n	8014d50 <_dtoa_r+0x4d8>
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d1d0      	bne.n	8014bf8 <_dtoa_r+0x380>
 8014c56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c58:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	f000 8084 	beq.w	8014d6a <_dtoa_r+0x4f2>
 8014c62:	4b96      	ldr	r3, [pc, #600]	; (8014ebc <_dtoa_r+0x644>)
 8014c64:	2200      	movs	r2, #0
 8014c66:	4640      	mov	r0, r8
 8014c68:	4649      	mov	r1, r9
 8014c6a:	f7eb ff0f 	bl	8000a8c <__aeabi_dcmplt>
 8014c6e:	2800      	cmp	r0, #0
 8014c70:	d07b      	beq.n	8014d6a <_dtoa_r+0x4f2>
 8014c72:	9b04      	ldr	r3, [sp, #16]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d078      	beq.n	8014d6a <_dtoa_r+0x4f2>
 8014c78:	9b01      	ldr	r3, [sp, #4]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	dd39      	ble.n	8014cf2 <_dtoa_r+0x47a>
 8014c7e:	4b90      	ldr	r3, [pc, #576]	; (8014ec0 <_dtoa_r+0x648>)
 8014c80:	2200      	movs	r2, #0
 8014c82:	4640      	mov	r0, r8
 8014c84:	4649      	mov	r1, r9
 8014c86:	f7eb fc8f 	bl	80005a8 <__aeabi_dmul>
 8014c8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014c8e:	9e01      	ldr	r6, [sp, #4]
 8014c90:	f10b 37ff 	add.w	r7, fp, #4294967295
 8014c94:	3501      	adds	r5, #1
 8014c96:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014c9a:	4628      	mov	r0, r5
 8014c9c:	f7eb fc1a 	bl	80004d4 <__aeabi_i2d>
 8014ca0:	4642      	mov	r2, r8
 8014ca2:	464b      	mov	r3, r9
 8014ca4:	f7eb fc80 	bl	80005a8 <__aeabi_dmul>
 8014ca8:	4b86      	ldr	r3, [pc, #536]	; (8014ec4 <_dtoa_r+0x64c>)
 8014caa:	2200      	movs	r2, #0
 8014cac:	f7eb fac6 	bl	800023c <__adddf3>
 8014cb0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8014cb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014cb8:	9303      	str	r3, [sp, #12]
 8014cba:	2e00      	cmp	r6, #0
 8014cbc:	d158      	bne.n	8014d70 <_dtoa_r+0x4f8>
 8014cbe:	4b82      	ldr	r3, [pc, #520]	; (8014ec8 <_dtoa_r+0x650>)
 8014cc0:	2200      	movs	r2, #0
 8014cc2:	4640      	mov	r0, r8
 8014cc4:	4649      	mov	r1, r9
 8014cc6:	f7eb fab7 	bl	8000238 <__aeabi_dsub>
 8014cca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014cce:	4680      	mov	r8, r0
 8014cd0:	4689      	mov	r9, r1
 8014cd2:	f7eb fef9 	bl	8000ac8 <__aeabi_dcmpgt>
 8014cd6:	2800      	cmp	r0, #0
 8014cd8:	f040 8296 	bne.w	8015208 <_dtoa_r+0x990>
 8014cdc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8014ce0:	4640      	mov	r0, r8
 8014ce2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014ce6:	4649      	mov	r1, r9
 8014ce8:	f7eb fed0 	bl	8000a8c <__aeabi_dcmplt>
 8014cec:	2800      	cmp	r0, #0
 8014cee:	f040 8289 	bne.w	8015204 <_dtoa_r+0x98c>
 8014cf2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014cf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	f2c0 814e 	blt.w	8014f9a <_dtoa_r+0x722>
 8014cfe:	f1bb 0f0e 	cmp.w	fp, #14
 8014d02:	f300 814a 	bgt.w	8014f9a <_dtoa_r+0x722>
 8014d06:	4b6b      	ldr	r3, [pc, #428]	; (8014eb4 <_dtoa_r+0x63c>)
 8014d08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014d0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	f280 80dc 	bge.w	8014ed0 <_dtoa_r+0x658>
 8014d18:	9b04      	ldr	r3, [sp, #16]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	f300 80d8 	bgt.w	8014ed0 <_dtoa_r+0x658>
 8014d20:	f040 826f 	bne.w	8015202 <_dtoa_r+0x98a>
 8014d24:	4b68      	ldr	r3, [pc, #416]	; (8014ec8 <_dtoa_r+0x650>)
 8014d26:	2200      	movs	r2, #0
 8014d28:	4640      	mov	r0, r8
 8014d2a:	4649      	mov	r1, r9
 8014d2c:	f7eb fc3c 	bl	80005a8 <__aeabi_dmul>
 8014d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014d34:	f7eb febe 	bl	8000ab4 <__aeabi_dcmpge>
 8014d38:	9e04      	ldr	r6, [sp, #16]
 8014d3a:	4637      	mov	r7, r6
 8014d3c:	2800      	cmp	r0, #0
 8014d3e:	f040 8245 	bne.w	80151cc <_dtoa_r+0x954>
 8014d42:	9d00      	ldr	r5, [sp, #0]
 8014d44:	2331      	movs	r3, #49	; 0x31
 8014d46:	f805 3b01 	strb.w	r3, [r5], #1
 8014d4a:	f10b 0b01 	add.w	fp, fp, #1
 8014d4e:	e241      	b.n	80151d4 <_dtoa_r+0x95c>
 8014d50:	07f2      	lsls	r2, r6, #31
 8014d52:	d505      	bpl.n	8014d60 <_dtoa_r+0x4e8>
 8014d54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014d58:	f7eb fc26 	bl	80005a8 <__aeabi_dmul>
 8014d5c:	3501      	adds	r5, #1
 8014d5e:	2301      	movs	r3, #1
 8014d60:	1076      	asrs	r6, r6, #1
 8014d62:	3708      	adds	r7, #8
 8014d64:	e773      	b.n	8014c4e <_dtoa_r+0x3d6>
 8014d66:	2502      	movs	r5, #2
 8014d68:	e775      	b.n	8014c56 <_dtoa_r+0x3de>
 8014d6a:	9e04      	ldr	r6, [sp, #16]
 8014d6c:	465f      	mov	r7, fp
 8014d6e:	e792      	b.n	8014c96 <_dtoa_r+0x41e>
 8014d70:	9900      	ldr	r1, [sp, #0]
 8014d72:	4b50      	ldr	r3, [pc, #320]	; (8014eb4 <_dtoa_r+0x63c>)
 8014d74:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014d78:	4431      	add	r1, r6
 8014d7a:	9102      	str	r1, [sp, #8]
 8014d7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014d7e:	eeb0 9a47 	vmov.f32	s18, s14
 8014d82:	eef0 9a67 	vmov.f32	s19, s15
 8014d86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014d8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014d8e:	2900      	cmp	r1, #0
 8014d90:	d044      	beq.n	8014e1c <_dtoa_r+0x5a4>
 8014d92:	494e      	ldr	r1, [pc, #312]	; (8014ecc <_dtoa_r+0x654>)
 8014d94:	2000      	movs	r0, #0
 8014d96:	f7eb fd31 	bl	80007fc <__aeabi_ddiv>
 8014d9a:	ec53 2b19 	vmov	r2, r3, d9
 8014d9e:	f7eb fa4b 	bl	8000238 <__aeabi_dsub>
 8014da2:	9d00      	ldr	r5, [sp, #0]
 8014da4:	ec41 0b19 	vmov	d9, r0, r1
 8014da8:	4649      	mov	r1, r9
 8014daa:	4640      	mov	r0, r8
 8014dac:	f7eb feac 	bl	8000b08 <__aeabi_d2iz>
 8014db0:	4606      	mov	r6, r0
 8014db2:	f7eb fb8f 	bl	80004d4 <__aeabi_i2d>
 8014db6:	4602      	mov	r2, r0
 8014db8:	460b      	mov	r3, r1
 8014dba:	4640      	mov	r0, r8
 8014dbc:	4649      	mov	r1, r9
 8014dbe:	f7eb fa3b 	bl	8000238 <__aeabi_dsub>
 8014dc2:	3630      	adds	r6, #48	; 0x30
 8014dc4:	f805 6b01 	strb.w	r6, [r5], #1
 8014dc8:	ec53 2b19 	vmov	r2, r3, d9
 8014dcc:	4680      	mov	r8, r0
 8014dce:	4689      	mov	r9, r1
 8014dd0:	f7eb fe5c 	bl	8000a8c <__aeabi_dcmplt>
 8014dd4:	2800      	cmp	r0, #0
 8014dd6:	d164      	bne.n	8014ea2 <_dtoa_r+0x62a>
 8014dd8:	4642      	mov	r2, r8
 8014dda:	464b      	mov	r3, r9
 8014ddc:	4937      	ldr	r1, [pc, #220]	; (8014ebc <_dtoa_r+0x644>)
 8014dde:	2000      	movs	r0, #0
 8014de0:	f7eb fa2a 	bl	8000238 <__aeabi_dsub>
 8014de4:	ec53 2b19 	vmov	r2, r3, d9
 8014de8:	f7eb fe50 	bl	8000a8c <__aeabi_dcmplt>
 8014dec:	2800      	cmp	r0, #0
 8014dee:	f040 80b6 	bne.w	8014f5e <_dtoa_r+0x6e6>
 8014df2:	9b02      	ldr	r3, [sp, #8]
 8014df4:	429d      	cmp	r5, r3
 8014df6:	f43f af7c 	beq.w	8014cf2 <_dtoa_r+0x47a>
 8014dfa:	4b31      	ldr	r3, [pc, #196]	; (8014ec0 <_dtoa_r+0x648>)
 8014dfc:	ec51 0b19 	vmov	r0, r1, d9
 8014e00:	2200      	movs	r2, #0
 8014e02:	f7eb fbd1 	bl	80005a8 <__aeabi_dmul>
 8014e06:	4b2e      	ldr	r3, [pc, #184]	; (8014ec0 <_dtoa_r+0x648>)
 8014e08:	ec41 0b19 	vmov	d9, r0, r1
 8014e0c:	2200      	movs	r2, #0
 8014e0e:	4640      	mov	r0, r8
 8014e10:	4649      	mov	r1, r9
 8014e12:	f7eb fbc9 	bl	80005a8 <__aeabi_dmul>
 8014e16:	4680      	mov	r8, r0
 8014e18:	4689      	mov	r9, r1
 8014e1a:	e7c5      	b.n	8014da8 <_dtoa_r+0x530>
 8014e1c:	ec51 0b17 	vmov	r0, r1, d7
 8014e20:	f7eb fbc2 	bl	80005a8 <__aeabi_dmul>
 8014e24:	9b02      	ldr	r3, [sp, #8]
 8014e26:	9d00      	ldr	r5, [sp, #0]
 8014e28:	930f      	str	r3, [sp, #60]	; 0x3c
 8014e2a:	ec41 0b19 	vmov	d9, r0, r1
 8014e2e:	4649      	mov	r1, r9
 8014e30:	4640      	mov	r0, r8
 8014e32:	f7eb fe69 	bl	8000b08 <__aeabi_d2iz>
 8014e36:	4606      	mov	r6, r0
 8014e38:	f7eb fb4c 	bl	80004d4 <__aeabi_i2d>
 8014e3c:	3630      	adds	r6, #48	; 0x30
 8014e3e:	4602      	mov	r2, r0
 8014e40:	460b      	mov	r3, r1
 8014e42:	4640      	mov	r0, r8
 8014e44:	4649      	mov	r1, r9
 8014e46:	f7eb f9f7 	bl	8000238 <__aeabi_dsub>
 8014e4a:	f805 6b01 	strb.w	r6, [r5], #1
 8014e4e:	9b02      	ldr	r3, [sp, #8]
 8014e50:	429d      	cmp	r5, r3
 8014e52:	4680      	mov	r8, r0
 8014e54:	4689      	mov	r9, r1
 8014e56:	f04f 0200 	mov.w	r2, #0
 8014e5a:	d124      	bne.n	8014ea6 <_dtoa_r+0x62e>
 8014e5c:	4b1b      	ldr	r3, [pc, #108]	; (8014ecc <_dtoa_r+0x654>)
 8014e5e:	ec51 0b19 	vmov	r0, r1, d9
 8014e62:	f7eb f9eb 	bl	800023c <__adddf3>
 8014e66:	4602      	mov	r2, r0
 8014e68:	460b      	mov	r3, r1
 8014e6a:	4640      	mov	r0, r8
 8014e6c:	4649      	mov	r1, r9
 8014e6e:	f7eb fe2b 	bl	8000ac8 <__aeabi_dcmpgt>
 8014e72:	2800      	cmp	r0, #0
 8014e74:	d173      	bne.n	8014f5e <_dtoa_r+0x6e6>
 8014e76:	ec53 2b19 	vmov	r2, r3, d9
 8014e7a:	4914      	ldr	r1, [pc, #80]	; (8014ecc <_dtoa_r+0x654>)
 8014e7c:	2000      	movs	r0, #0
 8014e7e:	f7eb f9db 	bl	8000238 <__aeabi_dsub>
 8014e82:	4602      	mov	r2, r0
 8014e84:	460b      	mov	r3, r1
 8014e86:	4640      	mov	r0, r8
 8014e88:	4649      	mov	r1, r9
 8014e8a:	f7eb fdff 	bl	8000a8c <__aeabi_dcmplt>
 8014e8e:	2800      	cmp	r0, #0
 8014e90:	f43f af2f 	beq.w	8014cf2 <_dtoa_r+0x47a>
 8014e94:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014e96:	1e6b      	subs	r3, r5, #1
 8014e98:	930f      	str	r3, [sp, #60]	; 0x3c
 8014e9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014e9e:	2b30      	cmp	r3, #48	; 0x30
 8014ea0:	d0f8      	beq.n	8014e94 <_dtoa_r+0x61c>
 8014ea2:	46bb      	mov	fp, r7
 8014ea4:	e04a      	b.n	8014f3c <_dtoa_r+0x6c4>
 8014ea6:	4b06      	ldr	r3, [pc, #24]	; (8014ec0 <_dtoa_r+0x648>)
 8014ea8:	f7eb fb7e 	bl	80005a8 <__aeabi_dmul>
 8014eac:	4680      	mov	r8, r0
 8014eae:	4689      	mov	r9, r1
 8014eb0:	e7bd      	b.n	8014e2e <_dtoa_r+0x5b6>
 8014eb2:	bf00      	nop
 8014eb4:	080186d0 	.word	0x080186d0
 8014eb8:	080186a8 	.word	0x080186a8
 8014ebc:	3ff00000 	.word	0x3ff00000
 8014ec0:	40240000 	.word	0x40240000
 8014ec4:	401c0000 	.word	0x401c0000
 8014ec8:	40140000 	.word	0x40140000
 8014ecc:	3fe00000 	.word	0x3fe00000
 8014ed0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014ed4:	9d00      	ldr	r5, [sp, #0]
 8014ed6:	4642      	mov	r2, r8
 8014ed8:	464b      	mov	r3, r9
 8014eda:	4630      	mov	r0, r6
 8014edc:	4639      	mov	r1, r7
 8014ede:	f7eb fc8d 	bl	80007fc <__aeabi_ddiv>
 8014ee2:	f7eb fe11 	bl	8000b08 <__aeabi_d2iz>
 8014ee6:	9001      	str	r0, [sp, #4]
 8014ee8:	f7eb faf4 	bl	80004d4 <__aeabi_i2d>
 8014eec:	4642      	mov	r2, r8
 8014eee:	464b      	mov	r3, r9
 8014ef0:	f7eb fb5a 	bl	80005a8 <__aeabi_dmul>
 8014ef4:	4602      	mov	r2, r0
 8014ef6:	460b      	mov	r3, r1
 8014ef8:	4630      	mov	r0, r6
 8014efa:	4639      	mov	r1, r7
 8014efc:	f7eb f99c 	bl	8000238 <__aeabi_dsub>
 8014f00:	9e01      	ldr	r6, [sp, #4]
 8014f02:	9f04      	ldr	r7, [sp, #16]
 8014f04:	3630      	adds	r6, #48	; 0x30
 8014f06:	f805 6b01 	strb.w	r6, [r5], #1
 8014f0a:	9e00      	ldr	r6, [sp, #0]
 8014f0c:	1bae      	subs	r6, r5, r6
 8014f0e:	42b7      	cmp	r7, r6
 8014f10:	4602      	mov	r2, r0
 8014f12:	460b      	mov	r3, r1
 8014f14:	d134      	bne.n	8014f80 <_dtoa_r+0x708>
 8014f16:	f7eb f991 	bl	800023c <__adddf3>
 8014f1a:	4642      	mov	r2, r8
 8014f1c:	464b      	mov	r3, r9
 8014f1e:	4606      	mov	r6, r0
 8014f20:	460f      	mov	r7, r1
 8014f22:	f7eb fdd1 	bl	8000ac8 <__aeabi_dcmpgt>
 8014f26:	b9c8      	cbnz	r0, 8014f5c <_dtoa_r+0x6e4>
 8014f28:	4642      	mov	r2, r8
 8014f2a:	464b      	mov	r3, r9
 8014f2c:	4630      	mov	r0, r6
 8014f2e:	4639      	mov	r1, r7
 8014f30:	f7eb fda2 	bl	8000a78 <__aeabi_dcmpeq>
 8014f34:	b110      	cbz	r0, 8014f3c <_dtoa_r+0x6c4>
 8014f36:	9b01      	ldr	r3, [sp, #4]
 8014f38:	07db      	lsls	r3, r3, #31
 8014f3a:	d40f      	bmi.n	8014f5c <_dtoa_r+0x6e4>
 8014f3c:	4651      	mov	r1, sl
 8014f3e:	4620      	mov	r0, r4
 8014f40:	f000 fbcc 	bl	80156dc <_Bfree>
 8014f44:	2300      	movs	r3, #0
 8014f46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014f48:	702b      	strb	r3, [r5, #0]
 8014f4a:	f10b 0301 	add.w	r3, fp, #1
 8014f4e:	6013      	str	r3, [r2, #0]
 8014f50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	f43f ace2 	beq.w	801491c <_dtoa_r+0xa4>
 8014f58:	601d      	str	r5, [r3, #0]
 8014f5a:	e4df      	b.n	801491c <_dtoa_r+0xa4>
 8014f5c:	465f      	mov	r7, fp
 8014f5e:	462b      	mov	r3, r5
 8014f60:	461d      	mov	r5, r3
 8014f62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014f66:	2a39      	cmp	r2, #57	; 0x39
 8014f68:	d106      	bne.n	8014f78 <_dtoa_r+0x700>
 8014f6a:	9a00      	ldr	r2, [sp, #0]
 8014f6c:	429a      	cmp	r2, r3
 8014f6e:	d1f7      	bne.n	8014f60 <_dtoa_r+0x6e8>
 8014f70:	9900      	ldr	r1, [sp, #0]
 8014f72:	2230      	movs	r2, #48	; 0x30
 8014f74:	3701      	adds	r7, #1
 8014f76:	700a      	strb	r2, [r1, #0]
 8014f78:	781a      	ldrb	r2, [r3, #0]
 8014f7a:	3201      	adds	r2, #1
 8014f7c:	701a      	strb	r2, [r3, #0]
 8014f7e:	e790      	b.n	8014ea2 <_dtoa_r+0x62a>
 8014f80:	4ba3      	ldr	r3, [pc, #652]	; (8015210 <_dtoa_r+0x998>)
 8014f82:	2200      	movs	r2, #0
 8014f84:	f7eb fb10 	bl	80005a8 <__aeabi_dmul>
 8014f88:	2200      	movs	r2, #0
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	4606      	mov	r6, r0
 8014f8e:	460f      	mov	r7, r1
 8014f90:	f7eb fd72 	bl	8000a78 <__aeabi_dcmpeq>
 8014f94:	2800      	cmp	r0, #0
 8014f96:	d09e      	beq.n	8014ed6 <_dtoa_r+0x65e>
 8014f98:	e7d0      	b.n	8014f3c <_dtoa_r+0x6c4>
 8014f9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014f9c:	2a00      	cmp	r2, #0
 8014f9e:	f000 80ca 	beq.w	8015136 <_dtoa_r+0x8be>
 8014fa2:	9a07      	ldr	r2, [sp, #28]
 8014fa4:	2a01      	cmp	r2, #1
 8014fa6:	f300 80ad 	bgt.w	8015104 <_dtoa_r+0x88c>
 8014faa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014fac:	2a00      	cmp	r2, #0
 8014fae:	f000 80a5 	beq.w	80150fc <_dtoa_r+0x884>
 8014fb2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014fb6:	9e08      	ldr	r6, [sp, #32]
 8014fb8:	9d05      	ldr	r5, [sp, #20]
 8014fba:	9a05      	ldr	r2, [sp, #20]
 8014fbc:	441a      	add	r2, r3
 8014fbe:	9205      	str	r2, [sp, #20]
 8014fc0:	9a06      	ldr	r2, [sp, #24]
 8014fc2:	2101      	movs	r1, #1
 8014fc4:	441a      	add	r2, r3
 8014fc6:	4620      	mov	r0, r4
 8014fc8:	9206      	str	r2, [sp, #24]
 8014fca:	f000 fc3d 	bl	8015848 <__i2b>
 8014fce:	4607      	mov	r7, r0
 8014fd0:	b165      	cbz	r5, 8014fec <_dtoa_r+0x774>
 8014fd2:	9b06      	ldr	r3, [sp, #24]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	dd09      	ble.n	8014fec <_dtoa_r+0x774>
 8014fd8:	42ab      	cmp	r3, r5
 8014fda:	9a05      	ldr	r2, [sp, #20]
 8014fdc:	bfa8      	it	ge
 8014fde:	462b      	movge	r3, r5
 8014fe0:	1ad2      	subs	r2, r2, r3
 8014fe2:	9205      	str	r2, [sp, #20]
 8014fe4:	9a06      	ldr	r2, [sp, #24]
 8014fe6:	1aed      	subs	r5, r5, r3
 8014fe8:	1ad3      	subs	r3, r2, r3
 8014fea:	9306      	str	r3, [sp, #24]
 8014fec:	9b08      	ldr	r3, [sp, #32]
 8014fee:	b1f3      	cbz	r3, 801502e <_dtoa_r+0x7b6>
 8014ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	f000 80a3 	beq.w	801513e <_dtoa_r+0x8c6>
 8014ff8:	2e00      	cmp	r6, #0
 8014ffa:	dd10      	ble.n	801501e <_dtoa_r+0x7a6>
 8014ffc:	4639      	mov	r1, r7
 8014ffe:	4632      	mov	r2, r6
 8015000:	4620      	mov	r0, r4
 8015002:	f000 fce1 	bl	80159c8 <__pow5mult>
 8015006:	4652      	mov	r2, sl
 8015008:	4601      	mov	r1, r0
 801500a:	4607      	mov	r7, r0
 801500c:	4620      	mov	r0, r4
 801500e:	f000 fc31 	bl	8015874 <__multiply>
 8015012:	4651      	mov	r1, sl
 8015014:	4680      	mov	r8, r0
 8015016:	4620      	mov	r0, r4
 8015018:	f000 fb60 	bl	80156dc <_Bfree>
 801501c:	46c2      	mov	sl, r8
 801501e:	9b08      	ldr	r3, [sp, #32]
 8015020:	1b9a      	subs	r2, r3, r6
 8015022:	d004      	beq.n	801502e <_dtoa_r+0x7b6>
 8015024:	4651      	mov	r1, sl
 8015026:	4620      	mov	r0, r4
 8015028:	f000 fcce 	bl	80159c8 <__pow5mult>
 801502c:	4682      	mov	sl, r0
 801502e:	2101      	movs	r1, #1
 8015030:	4620      	mov	r0, r4
 8015032:	f000 fc09 	bl	8015848 <__i2b>
 8015036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015038:	2b00      	cmp	r3, #0
 801503a:	4606      	mov	r6, r0
 801503c:	f340 8081 	ble.w	8015142 <_dtoa_r+0x8ca>
 8015040:	461a      	mov	r2, r3
 8015042:	4601      	mov	r1, r0
 8015044:	4620      	mov	r0, r4
 8015046:	f000 fcbf 	bl	80159c8 <__pow5mult>
 801504a:	9b07      	ldr	r3, [sp, #28]
 801504c:	2b01      	cmp	r3, #1
 801504e:	4606      	mov	r6, r0
 8015050:	dd7a      	ble.n	8015148 <_dtoa_r+0x8d0>
 8015052:	f04f 0800 	mov.w	r8, #0
 8015056:	6933      	ldr	r3, [r6, #16]
 8015058:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801505c:	6918      	ldr	r0, [r3, #16]
 801505e:	f000 fba5 	bl	80157ac <__hi0bits>
 8015062:	f1c0 0020 	rsb	r0, r0, #32
 8015066:	9b06      	ldr	r3, [sp, #24]
 8015068:	4418      	add	r0, r3
 801506a:	f010 001f 	ands.w	r0, r0, #31
 801506e:	f000 8094 	beq.w	801519a <_dtoa_r+0x922>
 8015072:	f1c0 0320 	rsb	r3, r0, #32
 8015076:	2b04      	cmp	r3, #4
 8015078:	f340 8085 	ble.w	8015186 <_dtoa_r+0x90e>
 801507c:	9b05      	ldr	r3, [sp, #20]
 801507e:	f1c0 001c 	rsb	r0, r0, #28
 8015082:	4403      	add	r3, r0
 8015084:	9305      	str	r3, [sp, #20]
 8015086:	9b06      	ldr	r3, [sp, #24]
 8015088:	4403      	add	r3, r0
 801508a:	4405      	add	r5, r0
 801508c:	9306      	str	r3, [sp, #24]
 801508e:	9b05      	ldr	r3, [sp, #20]
 8015090:	2b00      	cmp	r3, #0
 8015092:	dd05      	ble.n	80150a0 <_dtoa_r+0x828>
 8015094:	4651      	mov	r1, sl
 8015096:	461a      	mov	r2, r3
 8015098:	4620      	mov	r0, r4
 801509a:	f000 fcef 	bl	8015a7c <__lshift>
 801509e:	4682      	mov	sl, r0
 80150a0:	9b06      	ldr	r3, [sp, #24]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	dd05      	ble.n	80150b2 <_dtoa_r+0x83a>
 80150a6:	4631      	mov	r1, r6
 80150a8:	461a      	mov	r2, r3
 80150aa:	4620      	mov	r0, r4
 80150ac:	f000 fce6 	bl	8015a7c <__lshift>
 80150b0:	4606      	mov	r6, r0
 80150b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d072      	beq.n	801519e <_dtoa_r+0x926>
 80150b8:	4631      	mov	r1, r6
 80150ba:	4650      	mov	r0, sl
 80150bc:	f000 fd4a 	bl	8015b54 <__mcmp>
 80150c0:	2800      	cmp	r0, #0
 80150c2:	da6c      	bge.n	801519e <_dtoa_r+0x926>
 80150c4:	2300      	movs	r3, #0
 80150c6:	4651      	mov	r1, sl
 80150c8:	220a      	movs	r2, #10
 80150ca:	4620      	mov	r0, r4
 80150cc:	f000 fb28 	bl	8015720 <__multadd>
 80150d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80150d6:	4682      	mov	sl, r0
 80150d8:	2b00      	cmp	r3, #0
 80150da:	f000 81b0 	beq.w	801543e <_dtoa_r+0xbc6>
 80150de:	2300      	movs	r3, #0
 80150e0:	4639      	mov	r1, r7
 80150e2:	220a      	movs	r2, #10
 80150e4:	4620      	mov	r0, r4
 80150e6:	f000 fb1b 	bl	8015720 <__multadd>
 80150ea:	9b01      	ldr	r3, [sp, #4]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	4607      	mov	r7, r0
 80150f0:	f300 8096 	bgt.w	8015220 <_dtoa_r+0x9a8>
 80150f4:	9b07      	ldr	r3, [sp, #28]
 80150f6:	2b02      	cmp	r3, #2
 80150f8:	dc59      	bgt.n	80151ae <_dtoa_r+0x936>
 80150fa:	e091      	b.n	8015220 <_dtoa_r+0x9a8>
 80150fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80150fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015102:	e758      	b.n	8014fb6 <_dtoa_r+0x73e>
 8015104:	9b04      	ldr	r3, [sp, #16]
 8015106:	1e5e      	subs	r6, r3, #1
 8015108:	9b08      	ldr	r3, [sp, #32]
 801510a:	42b3      	cmp	r3, r6
 801510c:	bfbf      	itttt	lt
 801510e:	9b08      	ldrlt	r3, [sp, #32]
 8015110:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8015112:	9608      	strlt	r6, [sp, #32]
 8015114:	1af3      	sublt	r3, r6, r3
 8015116:	bfb4      	ite	lt
 8015118:	18d2      	addlt	r2, r2, r3
 801511a:	1b9e      	subge	r6, r3, r6
 801511c:	9b04      	ldr	r3, [sp, #16]
 801511e:	bfbc      	itt	lt
 8015120:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8015122:	2600      	movlt	r6, #0
 8015124:	2b00      	cmp	r3, #0
 8015126:	bfb7      	itett	lt
 8015128:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801512c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8015130:	1a9d      	sublt	r5, r3, r2
 8015132:	2300      	movlt	r3, #0
 8015134:	e741      	b.n	8014fba <_dtoa_r+0x742>
 8015136:	9e08      	ldr	r6, [sp, #32]
 8015138:	9d05      	ldr	r5, [sp, #20]
 801513a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801513c:	e748      	b.n	8014fd0 <_dtoa_r+0x758>
 801513e:	9a08      	ldr	r2, [sp, #32]
 8015140:	e770      	b.n	8015024 <_dtoa_r+0x7ac>
 8015142:	9b07      	ldr	r3, [sp, #28]
 8015144:	2b01      	cmp	r3, #1
 8015146:	dc19      	bgt.n	801517c <_dtoa_r+0x904>
 8015148:	9b02      	ldr	r3, [sp, #8]
 801514a:	b9bb      	cbnz	r3, 801517c <_dtoa_r+0x904>
 801514c:	9b03      	ldr	r3, [sp, #12]
 801514e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015152:	b99b      	cbnz	r3, 801517c <_dtoa_r+0x904>
 8015154:	9b03      	ldr	r3, [sp, #12]
 8015156:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801515a:	0d1b      	lsrs	r3, r3, #20
 801515c:	051b      	lsls	r3, r3, #20
 801515e:	b183      	cbz	r3, 8015182 <_dtoa_r+0x90a>
 8015160:	9b05      	ldr	r3, [sp, #20]
 8015162:	3301      	adds	r3, #1
 8015164:	9305      	str	r3, [sp, #20]
 8015166:	9b06      	ldr	r3, [sp, #24]
 8015168:	3301      	adds	r3, #1
 801516a:	9306      	str	r3, [sp, #24]
 801516c:	f04f 0801 	mov.w	r8, #1
 8015170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015172:	2b00      	cmp	r3, #0
 8015174:	f47f af6f 	bne.w	8015056 <_dtoa_r+0x7de>
 8015178:	2001      	movs	r0, #1
 801517a:	e774      	b.n	8015066 <_dtoa_r+0x7ee>
 801517c:	f04f 0800 	mov.w	r8, #0
 8015180:	e7f6      	b.n	8015170 <_dtoa_r+0x8f8>
 8015182:	4698      	mov	r8, r3
 8015184:	e7f4      	b.n	8015170 <_dtoa_r+0x8f8>
 8015186:	d082      	beq.n	801508e <_dtoa_r+0x816>
 8015188:	9a05      	ldr	r2, [sp, #20]
 801518a:	331c      	adds	r3, #28
 801518c:	441a      	add	r2, r3
 801518e:	9205      	str	r2, [sp, #20]
 8015190:	9a06      	ldr	r2, [sp, #24]
 8015192:	441a      	add	r2, r3
 8015194:	441d      	add	r5, r3
 8015196:	9206      	str	r2, [sp, #24]
 8015198:	e779      	b.n	801508e <_dtoa_r+0x816>
 801519a:	4603      	mov	r3, r0
 801519c:	e7f4      	b.n	8015188 <_dtoa_r+0x910>
 801519e:	9b04      	ldr	r3, [sp, #16]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	dc37      	bgt.n	8015214 <_dtoa_r+0x99c>
 80151a4:	9b07      	ldr	r3, [sp, #28]
 80151a6:	2b02      	cmp	r3, #2
 80151a8:	dd34      	ble.n	8015214 <_dtoa_r+0x99c>
 80151aa:	9b04      	ldr	r3, [sp, #16]
 80151ac:	9301      	str	r3, [sp, #4]
 80151ae:	9b01      	ldr	r3, [sp, #4]
 80151b0:	b963      	cbnz	r3, 80151cc <_dtoa_r+0x954>
 80151b2:	4631      	mov	r1, r6
 80151b4:	2205      	movs	r2, #5
 80151b6:	4620      	mov	r0, r4
 80151b8:	f000 fab2 	bl	8015720 <__multadd>
 80151bc:	4601      	mov	r1, r0
 80151be:	4606      	mov	r6, r0
 80151c0:	4650      	mov	r0, sl
 80151c2:	f000 fcc7 	bl	8015b54 <__mcmp>
 80151c6:	2800      	cmp	r0, #0
 80151c8:	f73f adbb 	bgt.w	8014d42 <_dtoa_r+0x4ca>
 80151cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151ce:	9d00      	ldr	r5, [sp, #0]
 80151d0:	ea6f 0b03 	mvn.w	fp, r3
 80151d4:	f04f 0800 	mov.w	r8, #0
 80151d8:	4631      	mov	r1, r6
 80151da:	4620      	mov	r0, r4
 80151dc:	f000 fa7e 	bl	80156dc <_Bfree>
 80151e0:	2f00      	cmp	r7, #0
 80151e2:	f43f aeab 	beq.w	8014f3c <_dtoa_r+0x6c4>
 80151e6:	f1b8 0f00 	cmp.w	r8, #0
 80151ea:	d005      	beq.n	80151f8 <_dtoa_r+0x980>
 80151ec:	45b8      	cmp	r8, r7
 80151ee:	d003      	beq.n	80151f8 <_dtoa_r+0x980>
 80151f0:	4641      	mov	r1, r8
 80151f2:	4620      	mov	r0, r4
 80151f4:	f000 fa72 	bl	80156dc <_Bfree>
 80151f8:	4639      	mov	r1, r7
 80151fa:	4620      	mov	r0, r4
 80151fc:	f000 fa6e 	bl	80156dc <_Bfree>
 8015200:	e69c      	b.n	8014f3c <_dtoa_r+0x6c4>
 8015202:	2600      	movs	r6, #0
 8015204:	4637      	mov	r7, r6
 8015206:	e7e1      	b.n	80151cc <_dtoa_r+0x954>
 8015208:	46bb      	mov	fp, r7
 801520a:	4637      	mov	r7, r6
 801520c:	e599      	b.n	8014d42 <_dtoa_r+0x4ca>
 801520e:	bf00      	nop
 8015210:	40240000 	.word	0x40240000
 8015214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015216:	2b00      	cmp	r3, #0
 8015218:	f000 80c8 	beq.w	80153ac <_dtoa_r+0xb34>
 801521c:	9b04      	ldr	r3, [sp, #16]
 801521e:	9301      	str	r3, [sp, #4]
 8015220:	2d00      	cmp	r5, #0
 8015222:	dd05      	ble.n	8015230 <_dtoa_r+0x9b8>
 8015224:	4639      	mov	r1, r7
 8015226:	462a      	mov	r2, r5
 8015228:	4620      	mov	r0, r4
 801522a:	f000 fc27 	bl	8015a7c <__lshift>
 801522e:	4607      	mov	r7, r0
 8015230:	f1b8 0f00 	cmp.w	r8, #0
 8015234:	d05b      	beq.n	80152ee <_dtoa_r+0xa76>
 8015236:	6879      	ldr	r1, [r7, #4]
 8015238:	4620      	mov	r0, r4
 801523a:	f000 fa0f 	bl	801565c <_Balloc>
 801523e:	4605      	mov	r5, r0
 8015240:	b928      	cbnz	r0, 801524e <_dtoa_r+0x9d6>
 8015242:	4b83      	ldr	r3, [pc, #524]	; (8015450 <_dtoa_r+0xbd8>)
 8015244:	4602      	mov	r2, r0
 8015246:	f240 21ef 	movw	r1, #751	; 0x2ef
 801524a:	f7ff bb2e 	b.w	80148aa <_dtoa_r+0x32>
 801524e:	693a      	ldr	r2, [r7, #16]
 8015250:	3202      	adds	r2, #2
 8015252:	0092      	lsls	r2, r2, #2
 8015254:	f107 010c 	add.w	r1, r7, #12
 8015258:	300c      	adds	r0, #12
 801525a:	f7ff fa76 	bl	801474a <memcpy>
 801525e:	2201      	movs	r2, #1
 8015260:	4629      	mov	r1, r5
 8015262:	4620      	mov	r0, r4
 8015264:	f000 fc0a 	bl	8015a7c <__lshift>
 8015268:	9b00      	ldr	r3, [sp, #0]
 801526a:	3301      	adds	r3, #1
 801526c:	9304      	str	r3, [sp, #16]
 801526e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015272:	4413      	add	r3, r2
 8015274:	9308      	str	r3, [sp, #32]
 8015276:	9b02      	ldr	r3, [sp, #8]
 8015278:	f003 0301 	and.w	r3, r3, #1
 801527c:	46b8      	mov	r8, r7
 801527e:	9306      	str	r3, [sp, #24]
 8015280:	4607      	mov	r7, r0
 8015282:	9b04      	ldr	r3, [sp, #16]
 8015284:	4631      	mov	r1, r6
 8015286:	3b01      	subs	r3, #1
 8015288:	4650      	mov	r0, sl
 801528a:	9301      	str	r3, [sp, #4]
 801528c:	f7ff fa6b 	bl	8014766 <quorem>
 8015290:	4641      	mov	r1, r8
 8015292:	9002      	str	r0, [sp, #8]
 8015294:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015298:	4650      	mov	r0, sl
 801529a:	f000 fc5b 	bl	8015b54 <__mcmp>
 801529e:	463a      	mov	r2, r7
 80152a0:	9005      	str	r0, [sp, #20]
 80152a2:	4631      	mov	r1, r6
 80152a4:	4620      	mov	r0, r4
 80152a6:	f000 fc71 	bl	8015b8c <__mdiff>
 80152aa:	68c2      	ldr	r2, [r0, #12]
 80152ac:	4605      	mov	r5, r0
 80152ae:	bb02      	cbnz	r2, 80152f2 <_dtoa_r+0xa7a>
 80152b0:	4601      	mov	r1, r0
 80152b2:	4650      	mov	r0, sl
 80152b4:	f000 fc4e 	bl	8015b54 <__mcmp>
 80152b8:	4602      	mov	r2, r0
 80152ba:	4629      	mov	r1, r5
 80152bc:	4620      	mov	r0, r4
 80152be:	9209      	str	r2, [sp, #36]	; 0x24
 80152c0:	f000 fa0c 	bl	80156dc <_Bfree>
 80152c4:	9b07      	ldr	r3, [sp, #28]
 80152c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80152c8:	9d04      	ldr	r5, [sp, #16]
 80152ca:	ea43 0102 	orr.w	r1, r3, r2
 80152ce:	9b06      	ldr	r3, [sp, #24]
 80152d0:	4319      	orrs	r1, r3
 80152d2:	d110      	bne.n	80152f6 <_dtoa_r+0xa7e>
 80152d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80152d8:	d029      	beq.n	801532e <_dtoa_r+0xab6>
 80152da:	9b05      	ldr	r3, [sp, #20]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	dd02      	ble.n	80152e6 <_dtoa_r+0xa6e>
 80152e0:	9b02      	ldr	r3, [sp, #8]
 80152e2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80152e6:	9b01      	ldr	r3, [sp, #4]
 80152e8:	f883 9000 	strb.w	r9, [r3]
 80152ec:	e774      	b.n	80151d8 <_dtoa_r+0x960>
 80152ee:	4638      	mov	r0, r7
 80152f0:	e7ba      	b.n	8015268 <_dtoa_r+0x9f0>
 80152f2:	2201      	movs	r2, #1
 80152f4:	e7e1      	b.n	80152ba <_dtoa_r+0xa42>
 80152f6:	9b05      	ldr	r3, [sp, #20]
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	db04      	blt.n	8015306 <_dtoa_r+0xa8e>
 80152fc:	9907      	ldr	r1, [sp, #28]
 80152fe:	430b      	orrs	r3, r1
 8015300:	9906      	ldr	r1, [sp, #24]
 8015302:	430b      	orrs	r3, r1
 8015304:	d120      	bne.n	8015348 <_dtoa_r+0xad0>
 8015306:	2a00      	cmp	r2, #0
 8015308:	dded      	ble.n	80152e6 <_dtoa_r+0xa6e>
 801530a:	4651      	mov	r1, sl
 801530c:	2201      	movs	r2, #1
 801530e:	4620      	mov	r0, r4
 8015310:	f000 fbb4 	bl	8015a7c <__lshift>
 8015314:	4631      	mov	r1, r6
 8015316:	4682      	mov	sl, r0
 8015318:	f000 fc1c 	bl	8015b54 <__mcmp>
 801531c:	2800      	cmp	r0, #0
 801531e:	dc03      	bgt.n	8015328 <_dtoa_r+0xab0>
 8015320:	d1e1      	bne.n	80152e6 <_dtoa_r+0xa6e>
 8015322:	f019 0f01 	tst.w	r9, #1
 8015326:	d0de      	beq.n	80152e6 <_dtoa_r+0xa6e>
 8015328:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801532c:	d1d8      	bne.n	80152e0 <_dtoa_r+0xa68>
 801532e:	9a01      	ldr	r2, [sp, #4]
 8015330:	2339      	movs	r3, #57	; 0x39
 8015332:	7013      	strb	r3, [r2, #0]
 8015334:	462b      	mov	r3, r5
 8015336:	461d      	mov	r5, r3
 8015338:	3b01      	subs	r3, #1
 801533a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801533e:	2a39      	cmp	r2, #57	; 0x39
 8015340:	d06c      	beq.n	801541c <_dtoa_r+0xba4>
 8015342:	3201      	adds	r2, #1
 8015344:	701a      	strb	r2, [r3, #0]
 8015346:	e747      	b.n	80151d8 <_dtoa_r+0x960>
 8015348:	2a00      	cmp	r2, #0
 801534a:	dd07      	ble.n	801535c <_dtoa_r+0xae4>
 801534c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015350:	d0ed      	beq.n	801532e <_dtoa_r+0xab6>
 8015352:	9a01      	ldr	r2, [sp, #4]
 8015354:	f109 0301 	add.w	r3, r9, #1
 8015358:	7013      	strb	r3, [r2, #0]
 801535a:	e73d      	b.n	80151d8 <_dtoa_r+0x960>
 801535c:	9b04      	ldr	r3, [sp, #16]
 801535e:	9a08      	ldr	r2, [sp, #32]
 8015360:	f803 9c01 	strb.w	r9, [r3, #-1]
 8015364:	4293      	cmp	r3, r2
 8015366:	d043      	beq.n	80153f0 <_dtoa_r+0xb78>
 8015368:	4651      	mov	r1, sl
 801536a:	2300      	movs	r3, #0
 801536c:	220a      	movs	r2, #10
 801536e:	4620      	mov	r0, r4
 8015370:	f000 f9d6 	bl	8015720 <__multadd>
 8015374:	45b8      	cmp	r8, r7
 8015376:	4682      	mov	sl, r0
 8015378:	f04f 0300 	mov.w	r3, #0
 801537c:	f04f 020a 	mov.w	r2, #10
 8015380:	4641      	mov	r1, r8
 8015382:	4620      	mov	r0, r4
 8015384:	d107      	bne.n	8015396 <_dtoa_r+0xb1e>
 8015386:	f000 f9cb 	bl	8015720 <__multadd>
 801538a:	4680      	mov	r8, r0
 801538c:	4607      	mov	r7, r0
 801538e:	9b04      	ldr	r3, [sp, #16]
 8015390:	3301      	adds	r3, #1
 8015392:	9304      	str	r3, [sp, #16]
 8015394:	e775      	b.n	8015282 <_dtoa_r+0xa0a>
 8015396:	f000 f9c3 	bl	8015720 <__multadd>
 801539a:	4639      	mov	r1, r7
 801539c:	4680      	mov	r8, r0
 801539e:	2300      	movs	r3, #0
 80153a0:	220a      	movs	r2, #10
 80153a2:	4620      	mov	r0, r4
 80153a4:	f000 f9bc 	bl	8015720 <__multadd>
 80153a8:	4607      	mov	r7, r0
 80153aa:	e7f0      	b.n	801538e <_dtoa_r+0xb16>
 80153ac:	9b04      	ldr	r3, [sp, #16]
 80153ae:	9301      	str	r3, [sp, #4]
 80153b0:	9d00      	ldr	r5, [sp, #0]
 80153b2:	4631      	mov	r1, r6
 80153b4:	4650      	mov	r0, sl
 80153b6:	f7ff f9d6 	bl	8014766 <quorem>
 80153ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80153be:	9b00      	ldr	r3, [sp, #0]
 80153c0:	f805 9b01 	strb.w	r9, [r5], #1
 80153c4:	1aea      	subs	r2, r5, r3
 80153c6:	9b01      	ldr	r3, [sp, #4]
 80153c8:	4293      	cmp	r3, r2
 80153ca:	dd07      	ble.n	80153dc <_dtoa_r+0xb64>
 80153cc:	4651      	mov	r1, sl
 80153ce:	2300      	movs	r3, #0
 80153d0:	220a      	movs	r2, #10
 80153d2:	4620      	mov	r0, r4
 80153d4:	f000 f9a4 	bl	8015720 <__multadd>
 80153d8:	4682      	mov	sl, r0
 80153da:	e7ea      	b.n	80153b2 <_dtoa_r+0xb3a>
 80153dc:	9b01      	ldr	r3, [sp, #4]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	bfc8      	it	gt
 80153e2:	461d      	movgt	r5, r3
 80153e4:	9b00      	ldr	r3, [sp, #0]
 80153e6:	bfd8      	it	le
 80153e8:	2501      	movle	r5, #1
 80153ea:	441d      	add	r5, r3
 80153ec:	f04f 0800 	mov.w	r8, #0
 80153f0:	4651      	mov	r1, sl
 80153f2:	2201      	movs	r2, #1
 80153f4:	4620      	mov	r0, r4
 80153f6:	f000 fb41 	bl	8015a7c <__lshift>
 80153fa:	4631      	mov	r1, r6
 80153fc:	4682      	mov	sl, r0
 80153fe:	f000 fba9 	bl	8015b54 <__mcmp>
 8015402:	2800      	cmp	r0, #0
 8015404:	dc96      	bgt.n	8015334 <_dtoa_r+0xabc>
 8015406:	d102      	bne.n	801540e <_dtoa_r+0xb96>
 8015408:	f019 0f01 	tst.w	r9, #1
 801540c:	d192      	bne.n	8015334 <_dtoa_r+0xabc>
 801540e:	462b      	mov	r3, r5
 8015410:	461d      	mov	r5, r3
 8015412:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015416:	2a30      	cmp	r2, #48	; 0x30
 8015418:	d0fa      	beq.n	8015410 <_dtoa_r+0xb98>
 801541a:	e6dd      	b.n	80151d8 <_dtoa_r+0x960>
 801541c:	9a00      	ldr	r2, [sp, #0]
 801541e:	429a      	cmp	r2, r3
 8015420:	d189      	bne.n	8015336 <_dtoa_r+0xabe>
 8015422:	f10b 0b01 	add.w	fp, fp, #1
 8015426:	2331      	movs	r3, #49	; 0x31
 8015428:	e796      	b.n	8015358 <_dtoa_r+0xae0>
 801542a:	4b0a      	ldr	r3, [pc, #40]	; (8015454 <_dtoa_r+0xbdc>)
 801542c:	f7ff ba99 	b.w	8014962 <_dtoa_r+0xea>
 8015430:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015432:	2b00      	cmp	r3, #0
 8015434:	f47f aa6d 	bne.w	8014912 <_dtoa_r+0x9a>
 8015438:	4b07      	ldr	r3, [pc, #28]	; (8015458 <_dtoa_r+0xbe0>)
 801543a:	f7ff ba92 	b.w	8014962 <_dtoa_r+0xea>
 801543e:	9b01      	ldr	r3, [sp, #4]
 8015440:	2b00      	cmp	r3, #0
 8015442:	dcb5      	bgt.n	80153b0 <_dtoa_r+0xb38>
 8015444:	9b07      	ldr	r3, [sp, #28]
 8015446:	2b02      	cmp	r3, #2
 8015448:	f73f aeb1 	bgt.w	80151ae <_dtoa_r+0x936>
 801544c:	e7b0      	b.n	80153b0 <_dtoa_r+0xb38>
 801544e:	bf00      	nop
 8015450:	08018638 	.word	0x08018638
 8015454:	08018598 	.word	0x08018598
 8015458:	080185bc 	.word	0x080185bc

0801545c <_free_r>:
 801545c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801545e:	2900      	cmp	r1, #0
 8015460:	d044      	beq.n	80154ec <_free_r+0x90>
 8015462:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015466:	9001      	str	r0, [sp, #4]
 8015468:	2b00      	cmp	r3, #0
 801546a:	f1a1 0404 	sub.w	r4, r1, #4
 801546e:	bfb8      	it	lt
 8015470:	18e4      	addlt	r4, r4, r3
 8015472:	f000 f8e7 	bl	8015644 <__malloc_lock>
 8015476:	4a1e      	ldr	r2, [pc, #120]	; (80154f0 <_free_r+0x94>)
 8015478:	9801      	ldr	r0, [sp, #4]
 801547a:	6813      	ldr	r3, [r2, #0]
 801547c:	b933      	cbnz	r3, 801548c <_free_r+0x30>
 801547e:	6063      	str	r3, [r4, #4]
 8015480:	6014      	str	r4, [r2, #0]
 8015482:	b003      	add	sp, #12
 8015484:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015488:	f000 b8e2 	b.w	8015650 <__malloc_unlock>
 801548c:	42a3      	cmp	r3, r4
 801548e:	d908      	bls.n	80154a2 <_free_r+0x46>
 8015490:	6825      	ldr	r5, [r4, #0]
 8015492:	1961      	adds	r1, r4, r5
 8015494:	428b      	cmp	r3, r1
 8015496:	bf01      	itttt	eq
 8015498:	6819      	ldreq	r1, [r3, #0]
 801549a:	685b      	ldreq	r3, [r3, #4]
 801549c:	1949      	addeq	r1, r1, r5
 801549e:	6021      	streq	r1, [r4, #0]
 80154a0:	e7ed      	b.n	801547e <_free_r+0x22>
 80154a2:	461a      	mov	r2, r3
 80154a4:	685b      	ldr	r3, [r3, #4]
 80154a6:	b10b      	cbz	r3, 80154ac <_free_r+0x50>
 80154a8:	42a3      	cmp	r3, r4
 80154aa:	d9fa      	bls.n	80154a2 <_free_r+0x46>
 80154ac:	6811      	ldr	r1, [r2, #0]
 80154ae:	1855      	adds	r5, r2, r1
 80154b0:	42a5      	cmp	r5, r4
 80154b2:	d10b      	bne.n	80154cc <_free_r+0x70>
 80154b4:	6824      	ldr	r4, [r4, #0]
 80154b6:	4421      	add	r1, r4
 80154b8:	1854      	adds	r4, r2, r1
 80154ba:	42a3      	cmp	r3, r4
 80154bc:	6011      	str	r1, [r2, #0]
 80154be:	d1e0      	bne.n	8015482 <_free_r+0x26>
 80154c0:	681c      	ldr	r4, [r3, #0]
 80154c2:	685b      	ldr	r3, [r3, #4]
 80154c4:	6053      	str	r3, [r2, #4]
 80154c6:	440c      	add	r4, r1
 80154c8:	6014      	str	r4, [r2, #0]
 80154ca:	e7da      	b.n	8015482 <_free_r+0x26>
 80154cc:	d902      	bls.n	80154d4 <_free_r+0x78>
 80154ce:	230c      	movs	r3, #12
 80154d0:	6003      	str	r3, [r0, #0]
 80154d2:	e7d6      	b.n	8015482 <_free_r+0x26>
 80154d4:	6825      	ldr	r5, [r4, #0]
 80154d6:	1961      	adds	r1, r4, r5
 80154d8:	428b      	cmp	r3, r1
 80154da:	bf04      	itt	eq
 80154dc:	6819      	ldreq	r1, [r3, #0]
 80154de:	685b      	ldreq	r3, [r3, #4]
 80154e0:	6063      	str	r3, [r4, #4]
 80154e2:	bf04      	itt	eq
 80154e4:	1949      	addeq	r1, r1, r5
 80154e6:	6021      	streq	r1, [r4, #0]
 80154e8:	6054      	str	r4, [r2, #4]
 80154ea:	e7ca      	b.n	8015482 <_free_r+0x26>
 80154ec:	b003      	add	sp, #12
 80154ee:	bd30      	pop	{r4, r5, pc}
 80154f0:	20003324 	.word	0x20003324

080154f4 <malloc>:
 80154f4:	4b02      	ldr	r3, [pc, #8]	; (8015500 <malloc+0xc>)
 80154f6:	4601      	mov	r1, r0
 80154f8:	6818      	ldr	r0, [r3, #0]
 80154fa:	f000 b823 	b.w	8015544 <_malloc_r>
 80154fe:	bf00      	nop
 8015500:	200001cc 	.word	0x200001cc

08015504 <sbrk_aligned>:
 8015504:	b570      	push	{r4, r5, r6, lr}
 8015506:	4e0e      	ldr	r6, [pc, #56]	; (8015540 <sbrk_aligned+0x3c>)
 8015508:	460c      	mov	r4, r1
 801550a:	6831      	ldr	r1, [r6, #0]
 801550c:	4605      	mov	r5, r0
 801550e:	b911      	cbnz	r1, 8015516 <sbrk_aligned+0x12>
 8015510:	f001 f81a 	bl	8016548 <_sbrk_r>
 8015514:	6030      	str	r0, [r6, #0]
 8015516:	4621      	mov	r1, r4
 8015518:	4628      	mov	r0, r5
 801551a:	f001 f815 	bl	8016548 <_sbrk_r>
 801551e:	1c43      	adds	r3, r0, #1
 8015520:	d00a      	beq.n	8015538 <sbrk_aligned+0x34>
 8015522:	1cc4      	adds	r4, r0, #3
 8015524:	f024 0403 	bic.w	r4, r4, #3
 8015528:	42a0      	cmp	r0, r4
 801552a:	d007      	beq.n	801553c <sbrk_aligned+0x38>
 801552c:	1a21      	subs	r1, r4, r0
 801552e:	4628      	mov	r0, r5
 8015530:	f001 f80a 	bl	8016548 <_sbrk_r>
 8015534:	3001      	adds	r0, #1
 8015536:	d101      	bne.n	801553c <sbrk_aligned+0x38>
 8015538:	f04f 34ff 	mov.w	r4, #4294967295
 801553c:	4620      	mov	r0, r4
 801553e:	bd70      	pop	{r4, r5, r6, pc}
 8015540:	20003328 	.word	0x20003328

08015544 <_malloc_r>:
 8015544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015548:	1ccd      	adds	r5, r1, #3
 801554a:	f025 0503 	bic.w	r5, r5, #3
 801554e:	3508      	adds	r5, #8
 8015550:	2d0c      	cmp	r5, #12
 8015552:	bf38      	it	cc
 8015554:	250c      	movcc	r5, #12
 8015556:	2d00      	cmp	r5, #0
 8015558:	4607      	mov	r7, r0
 801555a:	db01      	blt.n	8015560 <_malloc_r+0x1c>
 801555c:	42a9      	cmp	r1, r5
 801555e:	d905      	bls.n	801556c <_malloc_r+0x28>
 8015560:	230c      	movs	r3, #12
 8015562:	603b      	str	r3, [r7, #0]
 8015564:	2600      	movs	r6, #0
 8015566:	4630      	mov	r0, r6
 8015568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801556c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015640 <_malloc_r+0xfc>
 8015570:	f000 f868 	bl	8015644 <__malloc_lock>
 8015574:	f8d8 3000 	ldr.w	r3, [r8]
 8015578:	461c      	mov	r4, r3
 801557a:	bb5c      	cbnz	r4, 80155d4 <_malloc_r+0x90>
 801557c:	4629      	mov	r1, r5
 801557e:	4638      	mov	r0, r7
 8015580:	f7ff ffc0 	bl	8015504 <sbrk_aligned>
 8015584:	1c43      	adds	r3, r0, #1
 8015586:	4604      	mov	r4, r0
 8015588:	d155      	bne.n	8015636 <_malloc_r+0xf2>
 801558a:	f8d8 4000 	ldr.w	r4, [r8]
 801558e:	4626      	mov	r6, r4
 8015590:	2e00      	cmp	r6, #0
 8015592:	d145      	bne.n	8015620 <_malloc_r+0xdc>
 8015594:	2c00      	cmp	r4, #0
 8015596:	d048      	beq.n	801562a <_malloc_r+0xe6>
 8015598:	6823      	ldr	r3, [r4, #0]
 801559a:	4631      	mov	r1, r6
 801559c:	4638      	mov	r0, r7
 801559e:	eb04 0903 	add.w	r9, r4, r3
 80155a2:	f000 ffd1 	bl	8016548 <_sbrk_r>
 80155a6:	4581      	cmp	r9, r0
 80155a8:	d13f      	bne.n	801562a <_malloc_r+0xe6>
 80155aa:	6821      	ldr	r1, [r4, #0]
 80155ac:	1a6d      	subs	r5, r5, r1
 80155ae:	4629      	mov	r1, r5
 80155b0:	4638      	mov	r0, r7
 80155b2:	f7ff ffa7 	bl	8015504 <sbrk_aligned>
 80155b6:	3001      	adds	r0, #1
 80155b8:	d037      	beq.n	801562a <_malloc_r+0xe6>
 80155ba:	6823      	ldr	r3, [r4, #0]
 80155bc:	442b      	add	r3, r5
 80155be:	6023      	str	r3, [r4, #0]
 80155c0:	f8d8 3000 	ldr.w	r3, [r8]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d038      	beq.n	801563a <_malloc_r+0xf6>
 80155c8:	685a      	ldr	r2, [r3, #4]
 80155ca:	42a2      	cmp	r2, r4
 80155cc:	d12b      	bne.n	8015626 <_malloc_r+0xe2>
 80155ce:	2200      	movs	r2, #0
 80155d0:	605a      	str	r2, [r3, #4]
 80155d2:	e00f      	b.n	80155f4 <_malloc_r+0xb0>
 80155d4:	6822      	ldr	r2, [r4, #0]
 80155d6:	1b52      	subs	r2, r2, r5
 80155d8:	d41f      	bmi.n	801561a <_malloc_r+0xd6>
 80155da:	2a0b      	cmp	r2, #11
 80155dc:	d917      	bls.n	801560e <_malloc_r+0xca>
 80155de:	1961      	adds	r1, r4, r5
 80155e0:	42a3      	cmp	r3, r4
 80155e2:	6025      	str	r5, [r4, #0]
 80155e4:	bf18      	it	ne
 80155e6:	6059      	strne	r1, [r3, #4]
 80155e8:	6863      	ldr	r3, [r4, #4]
 80155ea:	bf08      	it	eq
 80155ec:	f8c8 1000 	streq.w	r1, [r8]
 80155f0:	5162      	str	r2, [r4, r5]
 80155f2:	604b      	str	r3, [r1, #4]
 80155f4:	4638      	mov	r0, r7
 80155f6:	f104 060b 	add.w	r6, r4, #11
 80155fa:	f000 f829 	bl	8015650 <__malloc_unlock>
 80155fe:	f026 0607 	bic.w	r6, r6, #7
 8015602:	1d23      	adds	r3, r4, #4
 8015604:	1af2      	subs	r2, r6, r3
 8015606:	d0ae      	beq.n	8015566 <_malloc_r+0x22>
 8015608:	1b9b      	subs	r3, r3, r6
 801560a:	50a3      	str	r3, [r4, r2]
 801560c:	e7ab      	b.n	8015566 <_malloc_r+0x22>
 801560e:	42a3      	cmp	r3, r4
 8015610:	6862      	ldr	r2, [r4, #4]
 8015612:	d1dd      	bne.n	80155d0 <_malloc_r+0x8c>
 8015614:	f8c8 2000 	str.w	r2, [r8]
 8015618:	e7ec      	b.n	80155f4 <_malloc_r+0xb0>
 801561a:	4623      	mov	r3, r4
 801561c:	6864      	ldr	r4, [r4, #4]
 801561e:	e7ac      	b.n	801557a <_malloc_r+0x36>
 8015620:	4634      	mov	r4, r6
 8015622:	6876      	ldr	r6, [r6, #4]
 8015624:	e7b4      	b.n	8015590 <_malloc_r+0x4c>
 8015626:	4613      	mov	r3, r2
 8015628:	e7cc      	b.n	80155c4 <_malloc_r+0x80>
 801562a:	230c      	movs	r3, #12
 801562c:	603b      	str	r3, [r7, #0]
 801562e:	4638      	mov	r0, r7
 8015630:	f000 f80e 	bl	8015650 <__malloc_unlock>
 8015634:	e797      	b.n	8015566 <_malloc_r+0x22>
 8015636:	6025      	str	r5, [r4, #0]
 8015638:	e7dc      	b.n	80155f4 <_malloc_r+0xb0>
 801563a:	605b      	str	r3, [r3, #4]
 801563c:	deff      	udf	#255	; 0xff
 801563e:	bf00      	nop
 8015640:	20003324 	.word	0x20003324

08015644 <__malloc_lock>:
 8015644:	4801      	ldr	r0, [pc, #4]	; (801564c <__malloc_lock+0x8>)
 8015646:	f7ff b87e 	b.w	8014746 <__retarget_lock_acquire_recursive>
 801564a:	bf00      	nop
 801564c:	20003320 	.word	0x20003320

08015650 <__malloc_unlock>:
 8015650:	4801      	ldr	r0, [pc, #4]	; (8015658 <__malloc_unlock+0x8>)
 8015652:	f7ff b879 	b.w	8014748 <__retarget_lock_release_recursive>
 8015656:	bf00      	nop
 8015658:	20003320 	.word	0x20003320

0801565c <_Balloc>:
 801565c:	b570      	push	{r4, r5, r6, lr}
 801565e:	69c6      	ldr	r6, [r0, #28]
 8015660:	4604      	mov	r4, r0
 8015662:	460d      	mov	r5, r1
 8015664:	b976      	cbnz	r6, 8015684 <_Balloc+0x28>
 8015666:	2010      	movs	r0, #16
 8015668:	f7ff ff44 	bl	80154f4 <malloc>
 801566c:	4602      	mov	r2, r0
 801566e:	61e0      	str	r0, [r4, #28]
 8015670:	b920      	cbnz	r0, 801567c <_Balloc+0x20>
 8015672:	4b18      	ldr	r3, [pc, #96]	; (80156d4 <_Balloc+0x78>)
 8015674:	4818      	ldr	r0, [pc, #96]	; (80156d8 <_Balloc+0x7c>)
 8015676:	216b      	movs	r1, #107	; 0x6b
 8015678:	f000 ff76 	bl	8016568 <__assert_func>
 801567c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015680:	6006      	str	r6, [r0, #0]
 8015682:	60c6      	str	r6, [r0, #12]
 8015684:	69e6      	ldr	r6, [r4, #28]
 8015686:	68f3      	ldr	r3, [r6, #12]
 8015688:	b183      	cbz	r3, 80156ac <_Balloc+0x50>
 801568a:	69e3      	ldr	r3, [r4, #28]
 801568c:	68db      	ldr	r3, [r3, #12]
 801568e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015692:	b9b8      	cbnz	r0, 80156c4 <_Balloc+0x68>
 8015694:	2101      	movs	r1, #1
 8015696:	fa01 f605 	lsl.w	r6, r1, r5
 801569a:	1d72      	adds	r2, r6, #5
 801569c:	0092      	lsls	r2, r2, #2
 801569e:	4620      	mov	r0, r4
 80156a0:	f000 ff80 	bl	80165a4 <_calloc_r>
 80156a4:	b160      	cbz	r0, 80156c0 <_Balloc+0x64>
 80156a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80156aa:	e00e      	b.n	80156ca <_Balloc+0x6e>
 80156ac:	2221      	movs	r2, #33	; 0x21
 80156ae:	2104      	movs	r1, #4
 80156b0:	4620      	mov	r0, r4
 80156b2:	f000 ff77 	bl	80165a4 <_calloc_r>
 80156b6:	69e3      	ldr	r3, [r4, #28]
 80156b8:	60f0      	str	r0, [r6, #12]
 80156ba:	68db      	ldr	r3, [r3, #12]
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d1e4      	bne.n	801568a <_Balloc+0x2e>
 80156c0:	2000      	movs	r0, #0
 80156c2:	bd70      	pop	{r4, r5, r6, pc}
 80156c4:	6802      	ldr	r2, [r0, #0]
 80156c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80156ca:	2300      	movs	r3, #0
 80156cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80156d0:	e7f7      	b.n	80156c2 <_Balloc+0x66>
 80156d2:	bf00      	nop
 80156d4:	080185c9 	.word	0x080185c9
 80156d8:	08018649 	.word	0x08018649

080156dc <_Bfree>:
 80156dc:	b570      	push	{r4, r5, r6, lr}
 80156de:	69c6      	ldr	r6, [r0, #28]
 80156e0:	4605      	mov	r5, r0
 80156e2:	460c      	mov	r4, r1
 80156e4:	b976      	cbnz	r6, 8015704 <_Bfree+0x28>
 80156e6:	2010      	movs	r0, #16
 80156e8:	f7ff ff04 	bl	80154f4 <malloc>
 80156ec:	4602      	mov	r2, r0
 80156ee:	61e8      	str	r0, [r5, #28]
 80156f0:	b920      	cbnz	r0, 80156fc <_Bfree+0x20>
 80156f2:	4b09      	ldr	r3, [pc, #36]	; (8015718 <_Bfree+0x3c>)
 80156f4:	4809      	ldr	r0, [pc, #36]	; (801571c <_Bfree+0x40>)
 80156f6:	218f      	movs	r1, #143	; 0x8f
 80156f8:	f000 ff36 	bl	8016568 <__assert_func>
 80156fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015700:	6006      	str	r6, [r0, #0]
 8015702:	60c6      	str	r6, [r0, #12]
 8015704:	b13c      	cbz	r4, 8015716 <_Bfree+0x3a>
 8015706:	69eb      	ldr	r3, [r5, #28]
 8015708:	6862      	ldr	r2, [r4, #4]
 801570a:	68db      	ldr	r3, [r3, #12]
 801570c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015710:	6021      	str	r1, [r4, #0]
 8015712:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015716:	bd70      	pop	{r4, r5, r6, pc}
 8015718:	080185c9 	.word	0x080185c9
 801571c:	08018649 	.word	0x08018649

08015720 <__multadd>:
 8015720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015724:	690d      	ldr	r5, [r1, #16]
 8015726:	4607      	mov	r7, r0
 8015728:	460c      	mov	r4, r1
 801572a:	461e      	mov	r6, r3
 801572c:	f101 0c14 	add.w	ip, r1, #20
 8015730:	2000      	movs	r0, #0
 8015732:	f8dc 3000 	ldr.w	r3, [ip]
 8015736:	b299      	uxth	r1, r3
 8015738:	fb02 6101 	mla	r1, r2, r1, r6
 801573c:	0c1e      	lsrs	r6, r3, #16
 801573e:	0c0b      	lsrs	r3, r1, #16
 8015740:	fb02 3306 	mla	r3, r2, r6, r3
 8015744:	b289      	uxth	r1, r1
 8015746:	3001      	adds	r0, #1
 8015748:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801574c:	4285      	cmp	r5, r0
 801574e:	f84c 1b04 	str.w	r1, [ip], #4
 8015752:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015756:	dcec      	bgt.n	8015732 <__multadd+0x12>
 8015758:	b30e      	cbz	r6, 801579e <__multadd+0x7e>
 801575a:	68a3      	ldr	r3, [r4, #8]
 801575c:	42ab      	cmp	r3, r5
 801575e:	dc19      	bgt.n	8015794 <__multadd+0x74>
 8015760:	6861      	ldr	r1, [r4, #4]
 8015762:	4638      	mov	r0, r7
 8015764:	3101      	adds	r1, #1
 8015766:	f7ff ff79 	bl	801565c <_Balloc>
 801576a:	4680      	mov	r8, r0
 801576c:	b928      	cbnz	r0, 801577a <__multadd+0x5a>
 801576e:	4602      	mov	r2, r0
 8015770:	4b0c      	ldr	r3, [pc, #48]	; (80157a4 <__multadd+0x84>)
 8015772:	480d      	ldr	r0, [pc, #52]	; (80157a8 <__multadd+0x88>)
 8015774:	21ba      	movs	r1, #186	; 0xba
 8015776:	f000 fef7 	bl	8016568 <__assert_func>
 801577a:	6922      	ldr	r2, [r4, #16]
 801577c:	3202      	adds	r2, #2
 801577e:	f104 010c 	add.w	r1, r4, #12
 8015782:	0092      	lsls	r2, r2, #2
 8015784:	300c      	adds	r0, #12
 8015786:	f7fe ffe0 	bl	801474a <memcpy>
 801578a:	4621      	mov	r1, r4
 801578c:	4638      	mov	r0, r7
 801578e:	f7ff ffa5 	bl	80156dc <_Bfree>
 8015792:	4644      	mov	r4, r8
 8015794:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015798:	3501      	adds	r5, #1
 801579a:	615e      	str	r6, [r3, #20]
 801579c:	6125      	str	r5, [r4, #16]
 801579e:	4620      	mov	r0, r4
 80157a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157a4:	08018638 	.word	0x08018638
 80157a8:	08018649 	.word	0x08018649

080157ac <__hi0bits>:
 80157ac:	0c03      	lsrs	r3, r0, #16
 80157ae:	041b      	lsls	r3, r3, #16
 80157b0:	b9d3      	cbnz	r3, 80157e8 <__hi0bits+0x3c>
 80157b2:	0400      	lsls	r0, r0, #16
 80157b4:	2310      	movs	r3, #16
 80157b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80157ba:	bf04      	itt	eq
 80157bc:	0200      	lsleq	r0, r0, #8
 80157be:	3308      	addeq	r3, #8
 80157c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80157c4:	bf04      	itt	eq
 80157c6:	0100      	lsleq	r0, r0, #4
 80157c8:	3304      	addeq	r3, #4
 80157ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80157ce:	bf04      	itt	eq
 80157d0:	0080      	lsleq	r0, r0, #2
 80157d2:	3302      	addeq	r3, #2
 80157d4:	2800      	cmp	r0, #0
 80157d6:	db05      	blt.n	80157e4 <__hi0bits+0x38>
 80157d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80157dc:	f103 0301 	add.w	r3, r3, #1
 80157e0:	bf08      	it	eq
 80157e2:	2320      	moveq	r3, #32
 80157e4:	4618      	mov	r0, r3
 80157e6:	4770      	bx	lr
 80157e8:	2300      	movs	r3, #0
 80157ea:	e7e4      	b.n	80157b6 <__hi0bits+0xa>

080157ec <__lo0bits>:
 80157ec:	6803      	ldr	r3, [r0, #0]
 80157ee:	f013 0207 	ands.w	r2, r3, #7
 80157f2:	d00c      	beq.n	801580e <__lo0bits+0x22>
 80157f4:	07d9      	lsls	r1, r3, #31
 80157f6:	d422      	bmi.n	801583e <__lo0bits+0x52>
 80157f8:	079a      	lsls	r2, r3, #30
 80157fa:	bf49      	itett	mi
 80157fc:	085b      	lsrmi	r3, r3, #1
 80157fe:	089b      	lsrpl	r3, r3, #2
 8015800:	6003      	strmi	r3, [r0, #0]
 8015802:	2201      	movmi	r2, #1
 8015804:	bf5c      	itt	pl
 8015806:	6003      	strpl	r3, [r0, #0]
 8015808:	2202      	movpl	r2, #2
 801580a:	4610      	mov	r0, r2
 801580c:	4770      	bx	lr
 801580e:	b299      	uxth	r1, r3
 8015810:	b909      	cbnz	r1, 8015816 <__lo0bits+0x2a>
 8015812:	0c1b      	lsrs	r3, r3, #16
 8015814:	2210      	movs	r2, #16
 8015816:	b2d9      	uxtb	r1, r3
 8015818:	b909      	cbnz	r1, 801581e <__lo0bits+0x32>
 801581a:	3208      	adds	r2, #8
 801581c:	0a1b      	lsrs	r3, r3, #8
 801581e:	0719      	lsls	r1, r3, #28
 8015820:	bf04      	itt	eq
 8015822:	091b      	lsreq	r3, r3, #4
 8015824:	3204      	addeq	r2, #4
 8015826:	0799      	lsls	r1, r3, #30
 8015828:	bf04      	itt	eq
 801582a:	089b      	lsreq	r3, r3, #2
 801582c:	3202      	addeq	r2, #2
 801582e:	07d9      	lsls	r1, r3, #31
 8015830:	d403      	bmi.n	801583a <__lo0bits+0x4e>
 8015832:	085b      	lsrs	r3, r3, #1
 8015834:	f102 0201 	add.w	r2, r2, #1
 8015838:	d003      	beq.n	8015842 <__lo0bits+0x56>
 801583a:	6003      	str	r3, [r0, #0]
 801583c:	e7e5      	b.n	801580a <__lo0bits+0x1e>
 801583e:	2200      	movs	r2, #0
 8015840:	e7e3      	b.n	801580a <__lo0bits+0x1e>
 8015842:	2220      	movs	r2, #32
 8015844:	e7e1      	b.n	801580a <__lo0bits+0x1e>
	...

08015848 <__i2b>:
 8015848:	b510      	push	{r4, lr}
 801584a:	460c      	mov	r4, r1
 801584c:	2101      	movs	r1, #1
 801584e:	f7ff ff05 	bl	801565c <_Balloc>
 8015852:	4602      	mov	r2, r0
 8015854:	b928      	cbnz	r0, 8015862 <__i2b+0x1a>
 8015856:	4b05      	ldr	r3, [pc, #20]	; (801586c <__i2b+0x24>)
 8015858:	4805      	ldr	r0, [pc, #20]	; (8015870 <__i2b+0x28>)
 801585a:	f240 1145 	movw	r1, #325	; 0x145
 801585e:	f000 fe83 	bl	8016568 <__assert_func>
 8015862:	2301      	movs	r3, #1
 8015864:	6144      	str	r4, [r0, #20]
 8015866:	6103      	str	r3, [r0, #16]
 8015868:	bd10      	pop	{r4, pc}
 801586a:	bf00      	nop
 801586c:	08018638 	.word	0x08018638
 8015870:	08018649 	.word	0x08018649

08015874 <__multiply>:
 8015874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015878:	4691      	mov	r9, r2
 801587a:	690a      	ldr	r2, [r1, #16]
 801587c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015880:	429a      	cmp	r2, r3
 8015882:	bfb8      	it	lt
 8015884:	460b      	movlt	r3, r1
 8015886:	460c      	mov	r4, r1
 8015888:	bfbc      	itt	lt
 801588a:	464c      	movlt	r4, r9
 801588c:	4699      	movlt	r9, r3
 801588e:	6927      	ldr	r7, [r4, #16]
 8015890:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015894:	68a3      	ldr	r3, [r4, #8]
 8015896:	6861      	ldr	r1, [r4, #4]
 8015898:	eb07 060a 	add.w	r6, r7, sl
 801589c:	42b3      	cmp	r3, r6
 801589e:	b085      	sub	sp, #20
 80158a0:	bfb8      	it	lt
 80158a2:	3101      	addlt	r1, #1
 80158a4:	f7ff feda 	bl	801565c <_Balloc>
 80158a8:	b930      	cbnz	r0, 80158b8 <__multiply+0x44>
 80158aa:	4602      	mov	r2, r0
 80158ac:	4b44      	ldr	r3, [pc, #272]	; (80159c0 <__multiply+0x14c>)
 80158ae:	4845      	ldr	r0, [pc, #276]	; (80159c4 <__multiply+0x150>)
 80158b0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80158b4:	f000 fe58 	bl	8016568 <__assert_func>
 80158b8:	f100 0514 	add.w	r5, r0, #20
 80158bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80158c0:	462b      	mov	r3, r5
 80158c2:	2200      	movs	r2, #0
 80158c4:	4543      	cmp	r3, r8
 80158c6:	d321      	bcc.n	801590c <__multiply+0x98>
 80158c8:	f104 0314 	add.w	r3, r4, #20
 80158cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80158d0:	f109 0314 	add.w	r3, r9, #20
 80158d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80158d8:	9202      	str	r2, [sp, #8]
 80158da:	1b3a      	subs	r2, r7, r4
 80158dc:	3a15      	subs	r2, #21
 80158de:	f022 0203 	bic.w	r2, r2, #3
 80158e2:	3204      	adds	r2, #4
 80158e4:	f104 0115 	add.w	r1, r4, #21
 80158e8:	428f      	cmp	r7, r1
 80158ea:	bf38      	it	cc
 80158ec:	2204      	movcc	r2, #4
 80158ee:	9201      	str	r2, [sp, #4]
 80158f0:	9a02      	ldr	r2, [sp, #8]
 80158f2:	9303      	str	r3, [sp, #12]
 80158f4:	429a      	cmp	r2, r3
 80158f6:	d80c      	bhi.n	8015912 <__multiply+0x9e>
 80158f8:	2e00      	cmp	r6, #0
 80158fa:	dd03      	ble.n	8015904 <__multiply+0x90>
 80158fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015900:	2b00      	cmp	r3, #0
 8015902:	d05b      	beq.n	80159bc <__multiply+0x148>
 8015904:	6106      	str	r6, [r0, #16]
 8015906:	b005      	add	sp, #20
 8015908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801590c:	f843 2b04 	str.w	r2, [r3], #4
 8015910:	e7d8      	b.n	80158c4 <__multiply+0x50>
 8015912:	f8b3 a000 	ldrh.w	sl, [r3]
 8015916:	f1ba 0f00 	cmp.w	sl, #0
 801591a:	d024      	beq.n	8015966 <__multiply+0xf2>
 801591c:	f104 0e14 	add.w	lr, r4, #20
 8015920:	46a9      	mov	r9, r5
 8015922:	f04f 0c00 	mov.w	ip, #0
 8015926:	f85e 2b04 	ldr.w	r2, [lr], #4
 801592a:	f8d9 1000 	ldr.w	r1, [r9]
 801592e:	fa1f fb82 	uxth.w	fp, r2
 8015932:	b289      	uxth	r1, r1
 8015934:	fb0a 110b 	mla	r1, sl, fp, r1
 8015938:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801593c:	f8d9 2000 	ldr.w	r2, [r9]
 8015940:	4461      	add	r1, ip
 8015942:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015946:	fb0a c20b 	mla	r2, sl, fp, ip
 801594a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801594e:	b289      	uxth	r1, r1
 8015950:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015954:	4577      	cmp	r7, lr
 8015956:	f849 1b04 	str.w	r1, [r9], #4
 801595a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801595e:	d8e2      	bhi.n	8015926 <__multiply+0xb2>
 8015960:	9a01      	ldr	r2, [sp, #4]
 8015962:	f845 c002 	str.w	ip, [r5, r2]
 8015966:	9a03      	ldr	r2, [sp, #12]
 8015968:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801596c:	3304      	adds	r3, #4
 801596e:	f1b9 0f00 	cmp.w	r9, #0
 8015972:	d021      	beq.n	80159b8 <__multiply+0x144>
 8015974:	6829      	ldr	r1, [r5, #0]
 8015976:	f104 0c14 	add.w	ip, r4, #20
 801597a:	46ae      	mov	lr, r5
 801597c:	f04f 0a00 	mov.w	sl, #0
 8015980:	f8bc b000 	ldrh.w	fp, [ip]
 8015984:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015988:	fb09 220b 	mla	r2, r9, fp, r2
 801598c:	4452      	add	r2, sl
 801598e:	b289      	uxth	r1, r1
 8015990:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015994:	f84e 1b04 	str.w	r1, [lr], #4
 8015998:	f85c 1b04 	ldr.w	r1, [ip], #4
 801599c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80159a0:	f8be 1000 	ldrh.w	r1, [lr]
 80159a4:	fb09 110a 	mla	r1, r9, sl, r1
 80159a8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80159ac:	4567      	cmp	r7, ip
 80159ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80159b2:	d8e5      	bhi.n	8015980 <__multiply+0x10c>
 80159b4:	9a01      	ldr	r2, [sp, #4]
 80159b6:	50a9      	str	r1, [r5, r2]
 80159b8:	3504      	adds	r5, #4
 80159ba:	e799      	b.n	80158f0 <__multiply+0x7c>
 80159bc:	3e01      	subs	r6, #1
 80159be:	e79b      	b.n	80158f8 <__multiply+0x84>
 80159c0:	08018638 	.word	0x08018638
 80159c4:	08018649 	.word	0x08018649

080159c8 <__pow5mult>:
 80159c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80159cc:	4615      	mov	r5, r2
 80159ce:	f012 0203 	ands.w	r2, r2, #3
 80159d2:	4606      	mov	r6, r0
 80159d4:	460f      	mov	r7, r1
 80159d6:	d007      	beq.n	80159e8 <__pow5mult+0x20>
 80159d8:	4c25      	ldr	r4, [pc, #148]	; (8015a70 <__pow5mult+0xa8>)
 80159da:	3a01      	subs	r2, #1
 80159dc:	2300      	movs	r3, #0
 80159de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80159e2:	f7ff fe9d 	bl	8015720 <__multadd>
 80159e6:	4607      	mov	r7, r0
 80159e8:	10ad      	asrs	r5, r5, #2
 80159ea:	d03d      	beq.n	8015a68 <__pow5mult+0xa0>
 80159ec:	69f4      	ldr	r4, [r6, #28]
 80159ee:	b97c      	cbnz	r4, 8015a10 <__pow5mult+0x48>
 80159f0:	2010      	movs	r0, #16
 80159f2:	f7ff fd7f 	bl	80154f4 <malloc>
 80159f6:	4602      	mov	r2, r0
 80159f8:	61f0      	str	r0, [r6, #28]
 80159fa:	b928      	cbnz	r0, 8015a08 <__pow5mult+0x40>
 80159fc:	4b1d      	ldr	r3, [pc, #116]	; (8015a74 <__pow5mult+0xac>)
 80159fe:	481e      	ldr	r0, [pc, #120]	; (8015a78 <__pow5mult+0xb0>)
 8015a00:	f240 11b3 	movw	r1, #435	; 0x1b3
 8015a04:	f000 fdb0 	bl	8016568 <__assert_func>
 8015a08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015a0c:	6004      	str	r4, [r0, #0]
 8015a0e:	60c4      	str	r4, [r0, #12]
 8015a10:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8015a14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015a18:	b94c      	cbnz	r4, 8015a2e <__pow5mult+0x66>
 8015a1a:	f240 2171 	movw	r1, #625	; 0x271
 8015a1e:	4630      	mov	r0, r6
 8015a20:	f7ff ff12 	bl	8015848 <__i2b>
 8015a24:	2300      	movs	r3, #0
 8015a26:	f8c8 0008 	str.w	r0, [r8, #8]
 8015a2a:	4604      	mov	r4, r0
 8015a2c:	6003      	str	r3, [r0, #0]
 8015a2e:	f04f 0900 	mov.w	r9, #0
 8015a32:	07eb      	lsls	r3, r5, #31
 8015a34:	d50a      	bpl.n	8015a4c <__pow5mult+0x84>
 8015a36:	4639      	mov	r1, r7
 8015a38:	4622      	mov	r2, r4
 8015a3a:	4630      	mov	r0, r6
 8015a3c:	f7ff ff1a 	bl	8015874 <__multiply>
 8015a40:	4639      	mov	r1, r7
 8015a42:	4680      	mov	r8, r0
 8015a44:	4630      	mov	r0, r6
 8015a46:	f7ff fe49 	bl	80156dc <_Bfree>
 8015a4a:	4647      	mov	r7, r8
 8015a4c:	106d      	asrs	r5, r5, #1
 8015a4e:	d00b      	beq.n	8015a68 <__pow5mult+0xa0>
 8015a50:	6820      	ldr	r0, [r4, #0]
 8015a52:	b938      	cbnz	r0, 8015a64 <__pow5mult+0x9c>
 8015a54:	4622      	mov	r2, r4
 8015a56:	4621      	mov	r1, r4
 8015a58:	4630      	mov	r0, r6
 8015a5a:	f7ff ff0b 	bl	8015874 <__multiply>
 8015a5e:	6020      	str	r0, [r4, #0]
 8015a60:	f8c0 9000 	str.w	r9, [r0]
 8015a64:	4604      	mov	r4, r0
 8015a66:	e7e4      	b.n	8015a32 <__pow5mult+0x6a>
 8015a68:	4638      	mov	r0, r7
 8015a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a6e:	bf00      	nop
 8015a70:	08018798 	.word	0x08018798
 8015a74:	080185c9 	.word	0x080185c9
 8015a78:	08018649 	.word	0x08018649

08015a7c <__lshift>:
 8015a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a80:	460c      	mov	r4, r1
 8015a82:	6849      	ldr	r1, [r1, #4]
 8015a84:	6923      	ldr	r3, [r4, #16]
 8015a86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015a8a:	68a3      	ldr	r3, [r4, #8]
 8015a8c:	4607      	mov	r7, r0
 8015a8e:	4691      	mov	r9, r2
 8015a90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015a94:	f108 0601 	add.w	r6, r8, #1
 8015a98:	42b3      	cmp	r3, r6
 8015a9a:	db0b      	blt.n	8015ab4 <__lshift+0x38>
 8015a9c:	4638      	mov	r0, r7
 8015a9e:	f7ff fddd 	bl	801565c <_Balloc>
 8015aa2:	4605      	mov	r5, r0
 8015aa4:	b948      	cbnz	r0, 8015aba <__lshift+0x3e>
 8015aa6:	4602      	mov	r2, r0
 8015aa8:	4b28      	ldr	r3, [pc, #160]	; (8015b4c <__lshift+0xd0>)
 8015aaa:	4829      	ldr	r0, [pc, #164]	; (8015b50 <__lshift+0xd4>)
 8015aac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8015ab0:	f000 fd5a 	bl	8016568 <__assert_func>
 8015ab4:	3101      	adds	r1, #1
 8015ab6:	005b      	lsls	r3, r3, #1
 8015ab8:	e7ee      	b.n	8015a98 <__lshift+0x1c>
 8015aba:	2300      	movs	r3, #0
 8015abc:	f100 0114 	add.w	r1, r0, #20
 8015ac0:	f100 0210 	add.w	r2, r0, #16
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	4553      	cmp	r3, sl
 8015ac8:	db33      	blt.n	8015b32 <__lshift+0xb6>
 8015aca:	6920      	ldr	r0, [r4, #16]
 8015acc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015ad0:	f104 0314 	add.w	r3, r4, #20
 8015ad4:	f019 091f 	ands.w	r9, r9, #31
 8015ad8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015adc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015ae0:	d02b      	beq.n	8015b3a <__lshift+0xbe>
 8015ae2:	f1c9 0e20 	rsb	lr, r9, #32
 8015ae6:	468a      	mov	sl, r1
 8015ae8:	2200      	movs	r2, #0
 8015aea:	6818      	ldr	r0, [r3, #0]
 8015aec:	fa00 f009 	lsl.w	r0, r0, r9
 8015af0:	4310      	orrs	r0, r2
 8015af2:	f84a 0b04 	str.w	r0, [sl], #4
 8015af6:	f853 2b04 	ldr.w	r2, [r3], #4
 8015afa:	459c      	cmp	ip, r3
 8015afc:	fa22 f20e 	lsr.w	r2, r2, lr
 8015b00:	d8f3      	bhi.n	8015aea <__lshift+0x6e>
 8015b02:	ebac 0304 	sub.w	r3, ip, r4
 8015b06:	3b15      	subs	r3, #21
 8015b08:	f023 0303 	bic.w	r3, r3, #3
 8015b0c:	3304      	adds	r3, #4
 8015b0e:	f104 0015 	add.w	r0, r4, #21
 8015b12:	4584      	cmp	ip, r0
 8015b14:	bf38      	it	cc
 8015b16:	2304      	movcc	r3, #4
 8015b18:	50ca      	str	r2, [r1, r3]
 8015b1a:	b10a      	cbz	r2, 8015b20 <__lshift+0xa4>
 8015b1c:	f108 0602 	add.w	r6, r8, #2
 8015b20:	3e01      	subs	r6, #1
 8015b22:	4638      	mov	r0, r7
 8015b24:	612e      	str	r6, [r5, #16]
 8015b26:	4621      	mov	r1, r4
 8015b28:	f7ff fdd8 	bl	80156dc <_Bfree>
 8015b2c:	4628      	mov	r0, r5
 8015b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b32:	f842 0f04 	str.w	r0, [r2, #4]!
 8015b36:	3301      	adds	r3, #1
 8015b38:	e7c5      	b.n	8015ac6 <__lshift+0x4a>
 8015b3a:	3904      	subs	r1, #4
 8015b3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b40:	f841 2f04 	str.w	r2, [r1, #4]!
 8015b44:	459c      	cmp	ip, r3
 8015b46:	d8f9      	bhi.n	8015b3c <__lshift+0xc0>
 8015b48:	e7ea      	b.n	8015b20 <__lshift+0xa4>
 8015b4a:	bf00      	nop
 8015b4c:	08018638 	.word	0x08018638
 8015b50:	08018649 	.word	0x08018649

08015b54 <__mcmp>:
 8015b54:	b530      	push	{r4, r5, lr}
 8015b56:	6902      	ldr	r2, [r0, #16]
 8015b58:	690c      	ldr	r4, [r1, #16]
 8015b5a:	1b12      	subs	r2, r2, r4
 8015b5c:	d10e      	bne.n	8015b7c <__mcmp+0x28>
 8015b5e:	f100 0314 	add.w	r3, r0, #20
 8015b62:	3114      	adds	r1, #20
 8015b64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015b68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015b6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015b70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015b74:	42a5      	cmp	r5, r4
 8015b76:	d003      	beq.n	8015b80 <__mcmp+0x2c>
 8015b78:	d305      	bcc.n	8015b86 <__mcmp+0x32>
 8015b7a:	2201      	movs	r2, #1
 8015b7c:	4610      	mov	r0, r2
 8015b7e:	bd30      	pop	{r4, r5, pc}
 8015b80:	4283      	cmp	r3, r0
 8015b82:	d3f3      	bcc.n	8015b6c <__mcmp+0x18>
 8015b84:	e7fa      	b.n	8015b7c <__mcmp+0x28>
 8015b86:	f04f 32ff 	mov.w	r2, #4294967295
 8015b8a:	e7f7      	b.n	8015b7c <__mcmp+0x28>

08015b8c <__mdiff>:
 8015b8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b90:	460c      	mov	r4, r1
 8015b92:	4606      	mov	r6, r0
 8015b94:	4611      	mov	r1, r2
 8015b96:	4620      	mov	r0, r4
 8015b98:	4690      	mov	r8, r2
 8015b9a:	f7ff ffdb 	bl	8015b54 <__mcmp>
 8015b9e:	1e05      	subs	r5, r0, #0
 8015ba0:	d110      	bne.n	8015bc4 <__mdiff+0x38>
 8015ba2:	4629      	mov	r1, r5
 8015ba4:	4630      	mov	r0, r6
 8015ba6:	f7ff fd59 	bl	801565c <_Balloc>
 8015baa:	b930      	cbnz	r0, 8015bba <__mdiff+0x2e>
 8015bac:	4b3a      	ldr	r3, [pc, #232]	; (8015c98 <__mdiff+0x10c>)
 8015bae:	4602      	mov	r2, r0
 8015bb0:	f240 2137 	movw	r1, #567	; 0x237
 8015bb4:	4839      	ldr	r0, [pc, #228]	; (8015c9c <__mdiff+0x110>)
 8015bb6:	f000 fcd7 	bl	8016568 <__assert_func>
 8015bba:	2301      	movs	r3, #1
 8015bbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015bc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bc4:	bfa4      	itt	ge
 8015bc6:	4643      	movge	r3, r8
 8015bc8:	46a0      	movge	r8, r4
 8015bca:	4630      	mov	r0, r6
 8015bcc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015bd0:	bfa6      	itte	ge
 8015bd2:	461c      	movge	r4, r3
 8015bd4:	2500      	movge	r5, #0
 8015bd6:	2501      	movlt	r5, #1
 8015bd8:	f7ff fd40 	bl	801565c <_Balloc>
 8015bdc:	b920      	cbnz	r0, 8015be8 <__mdiff+0x5c>
 8015bde:	4b2e      	ldr	r3, [pc, #184]	; (8015c98 <__mdiff+0x10c>)
 8015be0:	4602      	mov	r2, r0
 8015be2:	f240 2145 	movw	r1, #581	; 0x245
 8015be6:	e7e5      	b.n	8015bb4 <__mdiff+0x28>
 8015be8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015bec:	6926      	ldr	r6, [r4, #16]
 8015bee:	60c5      	str	r5, [r0, #12]
 8015bf0:	f104 0914 	add.w	r9, r4, #20
 8015bf4:	f108 0514 	add.w	r5, r8, #20
 8015bf8:	f100 0e14 	add.w	lr, r0, #20
 8015bfc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015c00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015c04:	f108 0210 	add.w	r2, r8, #16
 8015c08:	46f2      	mov	sl, lr
 8015c0a:	2100      	movs	r1, #0
 8015c0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8015c10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015c14:	fa11 f88b 	uxtah	r8, r1, fp
 8015c18:	b299      	uxth	r1, r3
 8015c1a:	0c1b      	lsrs	r3, r3, #16
 8015c1c:	eba8 0801 	sub.w	r8, r8, r1
 8015c20:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015c24:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015c28:	fa1f f888 	uxth.w	r8, r8
 8015c2c:	1419      	asrs	r1, r3, #16
 8015c2e:	454e      	cmp	r6, r9
 8015c30:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015c34:	f84a 3b04 	str.w	r3, [sl], #4
 8015c38:	d8e8      	bhi.n	8015c0c <__mdiff+0x80>
 8015c3a:	1b33      	subs	r3, r6, r4
 8015c3c:	3b15      	subs	r3, #21
 8015c3e:	f023 0303 	bic.w	r3, r3, #3
 8015c42:	3304      	adds	r3, #4
 8015c44:	3415      	adds	r4, #21
 8015c46:	42a6      	cmp	r6, r4
 8015c48:	bf38      	it	cc
 8015c4a:	2304      	movcc	r3, #4
 8015c4c:	441d      	add	r5, r3
 8015c4e:	4473      	add	r3, lr
 8015c50:	469e      	mov	lr, r3
 8015c52:	462e      	mov	r6, r5
 8015c54:	4566      	cmp	r6, ip
 8015c56:	d30e      	bcc.n	8015c76 <__mdiff+0xea>
 8015c58:	f10c 0203 	add.w	r2, ip, #3
 8015c5c:	1b52      	subs	r2, r2, r5
 8015c5e:	f022 0203 	bic.w	r2, r2, #3
 8015c62:	3d03      	subs	r5, #3
 8015c64:	45ac      	cmp	ip, r5
 8015c66:	bf38      	it	cc
 8015c68:	2200      	movcc	r2, #0
 8015c6a:	4413      	add	r3, r2
 8015c6c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015c70:	b17a      	cbz	r2, 8015c92 <__mdiff+0x106>
 8015c72:	6107      	str	r7, [r0, #16]
 8015c74:	e7a4      	b.n	8015bc0 <__mdiff+0x34>
 8015c76:	f856 8b04 	ldr.w	r8, [r6], #4
 8015c7a:	fa11 f288 	uxtah	r2, r1, r8
 8015c7e:	1414      	asrs	r4, r2, #16
 8015c80:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015c84:	b292      	uxth	r2, r2
 8015c86:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015c8a:	f84e 2b04 	str.w	r2, [lr], #4
 8015c8e:	1421      	asrs	r1, r4, #16
 8015c90:	e7e0      	b.n	8015c54 <__mdiff+0xc8>
 8015c92:	3f01      	subs	r7, #1
 8015c94:	e7ea      	b.n	8015c6c <__mdiff+0xe0>
 8015c96:	bf00      	nop
 8015c98:	08018638 	.word	0x08018638
 8015c9c:	08018649 	.word	0x08018649

08015ca0 <__d2b>:
 8015ca0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015ca4:	460f      	mov	r7, r1
 8015ca6:	2101      	movs	r1, #1
 8015ca8:	ec59 8b10 	vmov	r8, r9, d0
 8015cac:	4616      	mov	r6, r2
 8015cae:	f7ff fcd5 	bl	801565c <_Balloc>
 8015cb2:	4604      	mov	r4, r0
 8015cb4:	b930      	cbnz	r0, 8015cc4 <__d2b+0x24>
 8015cb6:	4602      	mov	r2, r0
 8015cb8:	4b24      	ldr	r3, [pc, #144]	; (8015d4c <__d2b+0xac>)
 8015cba:	4825      	ldr	r0, [pc, #148]	; (8015d50 <__d2b+0xb0>)
 8015cbc:	f240 310f 	movw	r1, #783	; 0x30f
 8015cc0:	f000 fc52 	bl	8016568 <__assert_func>
 8015cc4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015cc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015ccc:	bb2d      	cbnz	r5, 8015d1a <__d2b+0x7a>
 8015cce:	9301      	str	r3, [sp, #4]
 8015cd0:	f1b8 0300 	subs.w	r3, r8, #0
 8015cd4:	d026      	beq.n	8015d24 <__d2b+0x84>
 8015cd6:	4668      	mov	r0, sp
 8015cd8:	9300      	str	r3, [sp, #0]
 8015cda:	f7ff fd87 	bl	80157ec <__lo0bits>
 8015cde:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015ce2:	b1e8      	cbz	r0, 8015d20 <__d2b+0x80>
 8015ce4:	f1c0 0320 	rsb	r3, r0, #32
 8015ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8015cec:	430b      	orrs	r3, r1
 8015cee:	40c2      	lsrs	r2, r0
 8015cf0:	6163      	str	r3, [r4, #20]
 8015cf2:	9201      	str	r2, [sp, #4]
 8015cf4:	9b01      	ldr	r3, [sp, #4]
 8015cf6:	61a3      	str	r3, [r4, #24]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	bf14      	ite	ne
 8015cfc:	2202      	movne	r2, #2
 8015cfe:	2201      	moveq	r2, #1
 8015d00:	6122      	str	r2, [r4, #16]
 8015d02:	b1bd      	cbz	r5, 8015d34 <__d2b+0x94>
 8015d04:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015d08:	4405      	add	r5, r0
 8015d0a:	603d      	str	r5, [r7, #0]
 8015d0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015d10:	6030      	str	r0, [r6, #0]
 8015d12:	4620      	mov	r0, r4
 8015d14:	b003      	add	sp, #12
 8015d16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015d1e:	e7d6      	b.n	8015cce <__d2b+0x2e>
 8015d20:	6161      	str	r1, [r4, #20]
 8015d22:	e7e7      	b.n	8015cf4 <__d2b+0x54>
 8015d24:	a801      	add	r0, sp, #4
 8015d26:	f7ff fd61 	bl	80157ec <__lo0bits>
 8015d2a:	9b01      	ldr	r3, [sp, #4]
 8015d2c:	6163      	str	r3, [r4, #20]
 8015d2e:	3020      	adds	r0, #32
 8015d30:	2201      	movs	r2, #1
 8015d32:	e7e5      	b.n	8015d00 <__d2b+0x60>
 8015d34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015d38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015d3c:	6038      	str	r0, [r7, #0]
 8015d3e:	6918      	ldr	r0, [r3, #16]
 8015d40:	f7ff fd34 	bl	80157ac <__hi0bits>
 8015d44:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015d48:	e7e2      	b.n	8015d10 <__d2b+0x70>
 8015d4a:	bf00      	nop
 8015d4c:	08018638 	.word	0x08018638
 8015d50:	08018649 	.word	0x08018649

08015d54 <__ssputs_r>:
 8015d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d58:	688e      	ldr	r6, [r1, #8]
 8015d5a:	461f      	mov	r7, r3
 8015d5c:	42be      	cmp	r6, r7
 8015d5e:	680b      	ldr	r3, [r1, #0]
 8015d60:	4682      	mov	sl, r0
 8015d62:	460c      	mov	r4, r1
 8015d64:	4690      	mov	r8, r2
 8015d66:	d82c      	bhi.n	8015dc2 <__ssputs_r+0x6e>
 8015d68:	898a      	ldrh	r2, [r1, #12]
 8015d6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015d6e:	d026      	beq.n	8015dbe <__ssputs_r+0x6a>
 8015d70:	6965      	ldr	r5, [r4, #20]
 8015d72:	6909      	ldr	r1, [r1, #16]
 8015d74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015d78:	eba3 0901 	sub.w	r9, r3, r1
 8015d7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015d80:	1c7b      	adds	r3, r7, #1
 8015d82:	444b      	add	r3, r9
 8015d84:	106d      	asrs	r5, r5, #1
 8015d86:	429d      	cmp	r5, r3
 8015d88:	bf38      	it	cc
 8015d8a:	461d      	movcc	r5, r3
 8015d8c:	0553      	lsls	r3, r2, #21
 8015d8e:	d527      	bpl.n	8015de0 <__ssputs_r+0x8c>
 8015d90:	4629      	mov	r1, r5
 8015d92:	f7ff fbd7 	bl	8015544 <_malloc_r>
 8015d96:	4606      	mov	r6, r0
 8015d98:	b360      	cbz	r0, 8015df4 <__ssputs_r+0xa0>
 8015d9a:	6921      	ldr	r1, [r4, #16]
 8015d9c:	464a      	mov	r2, r9
 8015d9e:	f7fe fcd4 	bl	801474a <memcpy>
 8015da2:	89a3      	ldrh	r3, [r4, #12]
 8015da4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015dac:	81a3      	strh	r3, [r4, #12]
 8015dae:	6126      	str	r6, [r4, #16]
 8015db0:	6165      	str	r5, [r4, #20]
 8015db2:	444e      	add	r6, r9
 8015db4:	eba5 0509 	sub.w	r5, r5, r9
 8015db8:	6026      	str	r6, [r4, #0]
 8015dba:	60a5      	str	r5, [r4, #8]
 8015dbc:	463e      	mov	r6, r7
 8015dbe:	42be      	cmp	r6, r7
 8015dc0:	d900      	bls.n	8015dc4 <__ssputs_r+0x70>
 8015dc2:	463e      	mov	r6, r7
 8015dc4:	6820      	ldr	r0, [r4, #0]
 8015dc6:	4632      	mov	r2, r6
 8015dc8:	4641      	mov	r1, r8
 8015dca:	f000 fba3 	bl	8016514 <memmove>
 8015dce:	68a3      	ldr	r3, [r4, #8]
 8015dd0:	1b9b      	subs	r3, r3, r6
 8015dd2:	60a3      	str	r3, [r4, #8]
 8015dd4:	6823      	ldr	r3, [r4, #0]
 8015dd6:	4433      	add	r3, r6
 8015dd8:	6023      	str	r3, [r4, #0]
 8015dda:	2000      	movs	r0, #0
 8015ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015de0:	462a      	mov	r2, r5
 8015de2:	f000 fc07 	bl	80165f4 <_realloc_r>
 8015de6:	4606      	mov	r6, r0
 8015de8:	2800      	cmp	r0, #0
 8015dea:	d1e0      	bne.n	8015dae <__ssputs_r+0x5a>
 8015dec:	6921      	ldr	r1, [r4, #16]
 8015dee:	4650      	mov	r0, sl
 8015df0:	f7ff fb34 	bl	801545c <_free_r>
 8015df4:	230c      	movs	r3, #12
 8015df6:	f8ca 3000 	str.w	r3, [sl]
 8015dfa:	89a3      	ldrh	r3, [r4, #12]
 8015dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e00:	81a3      	strh	r3, [r4, #12]
 8015e02:	f04f 30ff 	mov.w	r0, #4294967295
 8015e06:	e7e9      	b.n	8015ddc <__ssputs_r+0x88>

08015e08 <_svfiprintf_r>:
 8015e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e0c:	4698      	mov	r8, r3
 8015e0e:	898b      	ldrh	r3, [r1, #12]
 8015e10:	061b      	lsls	r3, r3, #24
 8015e12:	b09d      	sub	sp, #116	; 0x74
 8015e14:	4607      	mov	r7, r0
 8015e16:	460d      	mov	r5, r1
 8015e18:	4614      	mov	r4, r2
 8015e1a:	d50e      	bpl.n	8015e3a <_svfiprintf_r+0x32>
 8015e1c:	690b      	ldr	r3, [r1, #16]
 8015e1e:	b963      	cbnz	r3, 8015e3a <_svfiprintf_r+0x32>
 8015e20:	2140      	movs	r1, #64	; 0x40
 8015e22:	f7ff fb8f 	bl	8015544 <_malloc_r>
 8015e26:	6028      	str	r0, [r5, #0]
 8015e28:	6128      	str	r0, [r5, #16]
 8015e2a:	b920      	cbnz	r0, 8015e36 <_svfiprintf_r+0x2e>
 8015e2c:	230c      	movs	r3, #12
 8015e2e:	603b      	str	r3, [r7, #0]
 8015e30:	f04f 30ff 	mov.w	r0, #4294967295
 8015e34:	e0d0      	b.n	8015fd8 <_svfiprintf_r+0x1d0>
 8015e36:	2340      	movs	r3, #64	; 0x40
 8015e38:	616b      	str	r3, [r5, #20]
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8015e3e:	2320      	movs	r3, #32
 8015e40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015e44:	f8cd 800c 	str.w	r8, [sp, #12]
 8015e48:	2330      	movs	r3, #48	; 0x30
 8015e4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015ff0 <_svfiprintf_r+0x1e8>
 8015e4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015e52:	f04f 0901 	mov.w	r9, #1
 8015e56:	4623      	mov	r3, r4
 8015e58:	469a      	mov	sl, r3
 8015e5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e5e:	b10a      	cbz	r2, 8015e64 <_svfiprintf_r+0x5c>
 8015e60:	2a25      	cmp	r2, #37	; 0x25
 8015e62:	d1f9      	bne.n	8015e58 <_svfiprintf_r+0x50>
 8015e64:	ebba 0b04 	subs.w	fp, sl, r4
 8015e68:	d00b      	beq.n	8015e82 <_svfiprintf_r+0x7a>
 8015e6a:	465b      	mov	r3, fp
 8015e6c:	4622      	mov	r2, r4
 8015e6e:	4629      	mov	r1, r5
 8015e70:	4638      	mov	r0, r7
 8015e72:	f7ff ff6f 	bl	8015d54 <__ssputs_r>
 8015e76:	3001      	adds	r0, #1
 8015e78:	f000 80a9 	beq.w	8015fce <_svfiprintf_r+0x1c6>
 8015e7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015e7e:	445a      	add	r2, fp
 8015e80:	9209      	str	r2, [sp, #36]	; 0x24
 8015e82:	f89a 3000 	ldrb.w	r3, [sl]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	f000 80a1 	beq.w	8015fce <_svfiprintf_r+0x1c6>
 8015e8c:	2300      	movs	r3, #0
 8015e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8015e92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015e96:	f10a 0a01 	add.w	sl, sl, #1
 8015e9a:	9304      	str	r3, [sp, #16]
 8015e9c:	9307      	str	r3, [sp, #28]
 8015e9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015ea2:	931a      	str	r3, [sp, #104]	; 0x68
 8015ea4:	4654      	mov	r4, sl
 8015ea6:	2205      	movs	r2, #5
 8015ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015eac:	4850      	ldr	r0, [pc, #320]	; (8015ff0 <_svfiprintf_r+0x1e8>)
 8015eae:	f7ea f967 	bl	8000180 <memchr>
 8015eb2:	9a04      	ldr	r2, [sp, #16]
 8015eb4:	b9d8      	cbnz	r0, 8015eee <_svfiprintf_r+0xe6>
 8015eb6:	06d0      	lsls	r0, r2, #27
 8015eb8:	bf44      	itt	mi
 8015eba:	2320      	movmi	r3, #32
 8015ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015ec0:	0711      	lsls	r1, r2, #28
 8015ec2:	bf44      	itt	mi
 8015ec4:	232b      	movmi	r3, #43	; 0x2b
 8015ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015eca:	f89a 3000 	ldrb.w	r3, [sl]
 8015ece:	2b2a      	cmp	r3, #42	; 0x2a
 8015ed0:	d015      	beq.n	8015efe <_svfiprintf_r+0xf6>
 8015ed2:	9a07      	ldr	r2, [sp, #28]
 8015ed4:	4654      	mov	r4, sl
 8015ed6:	2000      	movs	r0, #0
 8015ed8:	f04f 0c0a 	mov.w	ip, #10
 8015edc:	4621      	mov	r1, r4
 8015ede:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015ee2:	3b30      	subs	r3, #48	; 0x30
 8015ee4:	2b09      	cmp	r3, #9
 8015ee6:	d94d      	bls.n	8015f84 <_svfiprintf_r+0x17c>
 8015ee8:	b1b0      	cbz	r0, 8015f18 <_svfiprintf_r+0x110>
 8015eea:	9207      	str	r2, [sp, #28]
 8015eec:	e014      	b.n	8015f18 <_svfiprintf_r+0x110>
 8015eee:	eba0 0308 	sub.w	r3, r0, r8
 8015ef2:	fa09 f303 	lsl.w	r3, r9, r3
 8015ef6:	4313      	orrs	r3, r2
 8015ef8:	9304      	str	r3, [sp, #16]
 8015efa:	46a2      	mov	sl, r4
 8015efc:	e7d2      	b.n	8015ea4 <_svfiprintf_r+0x9c>
 8015efe:	9b03      	ldr	r3, [sp, #12]
 8015f00:	1d19      	adds	r1, r3, #4
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	9103      	str	r1, [sp, #12]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	bfbb      	ittet	lt
 8015f0a:	425b      	neglt	r3, r3
 8015f0c:	f042 0202 	orrlt.w	r2, r2, #2
 8015f10:	9307      	strge	r3, [sp, #28]
 8015f12:	9307      	strlt	r3, [sp, #28]
 8015f14:	bfb8      	it	lt
 8015f16:	9204      	strlt	r2, [sp, #16]
 8015f18:	7823      	ldrb	r3, [r4, #0]
 8015f1a:	2b2e      	cmp	r3, #46	; 0x2e
 8015f1c:	d10c      	bne.n	8015f38 <_svfiprintf_r+0x130>
 8015f1e:	7863      	ldrb	r3, [r4, #1]
 8015f20:	2b2a      	cmp	r3, #42	; 0x2a
 8015f22:	d134      	bne.n	8015f8e <_svfiprintf_r+0x186>
 8015f24:	9b03      	ldr	r3, [sp, #12]
 8015f26:	1d1a      	adds	r2, r3, #4
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	9203      	str	r2, [sp, #12]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	bfb8      	it	lt
 8015f30:	f04f 33ff 	movlt.w	r3, #4294967295
 8015f34:	3402      	adds	r4, #2
 8015f36:	9305      	str	r3, [sp, #20]
 8015f38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8016000 <_svfiprintf_r+0x1f8>
 8015f3c:	7821      	ldrb	r1, [r4, #0]
 8015f3e:	2203      	movs	r2, #3
 8015f40:	4650      	mov	r0, sl
 8015f42:	f7ea f91d 	bl	8000180 <memchr>
 8015f46:	b138      	cbz	r0, 8015f58 <_svfiprintf_r+0x150>
 8015f48:	9b04      	ldr	r3, [sp, #16]
 8015f4a:	eba0 000a 	sub.w	r0, r0, sl
 8015f4e:	2240      	movs	r2, #64	; 0x40
 8015f50:	4082      	lsls	r2, r0
 8015f52:	4313      	orrs	r3, r2
 8015f54:	3401      	adds	r4, #1
 8015f56:	9304      	str	r3, [sp, #16]
 8015f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f5c:	4825      	ldr	r0, [pc, #148]	; (8015ff4 <_svfiprintf_r+0x1ec>)
 8015f5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015f62:	2206      	movs	r2, #6
 8015f64:	f7ea f90c 	bl	8000180 <memchr>
 8015f68:	2800      	cmp	r0, #0
 8015f6a:	d038      	beq.n	8015fde <_svfiprintf_r+0x1d6>
 8015f6c:	4b22      	ldr	r3, [pc, #136]	; (8015ff8 <_svfiprintf_r+0x1f0>)
 8015f6e:	bb1b      	cbnz	r3, 8015fb8 <_svfiprintf_r+0x1b0>
 8015f70:	9b03      	ldr	r3, [sp, #12]
 8015f72:	3307      	adds	r3, #7
 8015f74:	f023 0307 	bic.w	r3, r3, #7
 8015f78:	3308      	adds	r3, #8
 8015f7a:	9303      	str	r3, [sp, #12]
 8015f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f7e:	4433      	add	r3, r6
 8015f80:	9309      	str	r3, [sp, #36]	; 0x24
 8015f82:	e768      	b.n	8015e56 <_svfiprintf_r+0x4e>
 8015f84:	fb0c 3202 	mla	r2, ip, r2, r3
 8015f88:	460c      	mov	r4, r1
 8015f8a:	2001      	movs	r0, #1
 8015f8c:	e7a6      	b.n	8015edc <_svfiprintf_r+0xd4>
 8015f8e:	2300      	movs	r3, #0
 8015f90:	3401      	adds	r4, #1
 8015f92:	9305      	str	r3, [sp, #20]
 8015f94:	4619      	mov	r1, r3
 8015f96:	f04f 0c0a 	mov.w	ip, #10
 8015f9a:	4620      	mov	r0, r4
 8015f9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015fa0:	3a30      	subs	r2, #48	; 0x30
 8015fa2:	2a09      	cmp	r2, #9
 8015fa4:	d903      	bls.n	8015fae <_svfiprintf_r+0x1a6>
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d0c6      	beq.n	8015f38 <_svfiprintf_r+0x130>
 8015faa:	9105      	str	r1, [sp, #20]
 8015fac:	e7c4      	b.n	8015f38 <_svfiprintf_r+0x130>
 8015fae:	fb0c 2101 	mla	r1, ip, r1, r2
 8015fb2:	4604      	mov	r4, r0
 8015fb4:	2301      	movs	r3, #1
 8015fb6:	e7f0      	b.n	8015f9a <_svfiprintf_r+0x192>
 8015fb8:	ab03      	add	r3, sp, #12
 8015fba:	9300      	str	r3, [sp, #0]
 8015fbc:	462a      	mov	r2, r5
 8015fbe:	4b0f      	ldr	r3, [pc, #60]	; (8015ffc <_svfiprintf_r+0x1f4>)
 8015fc0:	a904      	add	r1, sp, #16
 8015fc2:	4638      	mov	r0, r7
 8015fc4:	f7fd fde8 	bl	8013b98 <_printf_float>
 8015fc8:	1c42      	adds	r2, r0, #1
 8015fca:	4606      	mov	r6, r0
 8015fcc:	d1d6      	bne.n	8015f7c <_svfiprintf_r+0x174>
 8015fce:	89ab      	ldrh	r3, [r5, #12]
 8015fd0:	065b      	lsls	r3, r3, #25
 8015fd2:	f53f af2d 	bmi.w	8015e30 <_svfiprintf_r+0x28>
 8015fd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015fd8:	b01d      	add	sp, #116	; 0x74
 8015fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fde:	ab03      	add	r3, sp, #12
 8015fe0:	9300      	str	r3, [sp, #0]
 8015fe2:	462a      	mov	r2, r5
 8015fe4:	4b05      	ldr	r3, [pc, #20]	; (8015ffc <_svfiprintf_r+0x1f4>)
 8015fe6:	a904      	add	r1, sp, #16
 8015fe8:	4638      	mov	r0, r7
 8015fea:	f7fe f879 	bl	80140e0 <_printf_i>
 8015fee:	e7eb      	b.n	8015fc8 <_svfiprintf_r+0x1c0>
 8015ff0:	080187a4 	.word	0x080187a4
 8015ff4:	080187ae 	.word	0x080187ae
 8015ff8:	08013b99 	.word	0x08013b99
 8015ffc:	08015d55 	.word	0x08015d55
 8016000:	080187aa 	.word	0x080187aa

08016004 <__sfputc_r>:
 8016004:	6893      	ldr	r3, [r2, #8]
 8016006:	3b01      	subs	r3, #1
 8016008:	2b00      	cmp	r3, #0
 801600a:	b410      	push	{r4}
 801600c:	6093      	str	r3, [r2, #8]
 801600e:	da08      	bge.n	8016022 <__sfputc_r+0x1e>
 8016010:	6994      	ldr	r4, [r2, #24]
 8016012:	42a3      	cmp	r3, r4
 8016014:	db01      	blt.n	801601a <__sfputc_r+0x16>
 8016016:	290a      	cmp	r1, #10
 8016018:	d103      	bne.n	8016022 <__sfputc_r+0x1e>
 801601a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801601e:	f000 b9e3 	b.w	80163e8 <__swbuf_r>
 8016022:	6813      	ldr	r3, [r2, #0]
 8016024:	1c58      	adds	r0, r3, #1
 8016026:	6010      	str	r0, [r2, #0]
 8016028:	7019      	strb	r1, [r3, #0]
 801602a:	4608      	mov	r0, r1
 801602c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016030:	4770      	bx	lr

08016032 <__sfputs_r>:
 8016032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016034:	4606      	mov	r6, r0
 8016036:	460f      	mov	r7, r1
 8016038:	4614      	mov	r4, r2
 801603a:	18d5      	adds	r5, r2, r3
 801603c:	42ac      	cmp	r4, r5
 801603e:	d101      	bne.n	8016044 <__sfputs_r+0x12>
 8016040:	2000      	movs	r0, #0
 8016042:	e007      	b.n	8016054 <__sfputs_r+0x22>
 8016044:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016048:	463a      	mov	r2, r7
 801604a:	4630      	mov	r0, r6
 801604c:	f7ff ffda 	bl	8016004 <__sfputc_r>
 8016050:	1c43      	adds	r3, r0, #1
 8016052:	d1f3      	bne.n	801603c <__sfputs_r+0xa>
 8016054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016058 <_vfiprintf_r>:
 8016058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801605c:	460d      	mov	r5, r1
 801605e:	b09d      	sub	sp, #116	; 0x74
 8016060:	4614      	mov	r4, r2
 8016062:	4698      	mov	r8, r3
 8016064:	4606      	mov	r6, r0
 8016066:	b118      	cbz	r0, 8016070 <_vfiprintf_r+0x18>
 8016068:	6a03      	ldr	r3, [r0, #32]
 801606a:	b90b      	cbnz	r3, 8016070 <_vfiprintf_r+0x18>
 801606c:	f7fe f9e6 	bl	801443c <__sinit>
 8016070:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016072:	07d9      	lsls	r1, r3, #31
 8016074:	d405      	bmi.n	8016082 <_vfiprintf_r+0x2a>
 8016076:	89ab      	ldrh	r3, [r5, #12]
 8016078:	059a      	lsls	r2, r3, #22
 801607a:	d402      	bmi.n	8016082 <_vfiprintf_r+0x2a>
 801607c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801607e:	f7fe fb62 	bl	8014746 <__retarget_lock_acquire_recursive>
 8016082:	89ab      	ldrh	r3, [r5, #12]
 8016084:	071b      	lsls	r3, r3, #28
 8016086:	d501      	bpl.n	801608c <_vfiprintf_r+0x34>
 8016088:	692b      	ldr	r3, [r5, #16]
 801608a:	b99b      	cbnz	r3, 80160b4 <_vfiprintf_r+0x5c>
 801608c:	4629      	mov	r1, r5
 801608e:	4630      	mov	r0, r6
 8016090:	f000 f9e8 	bl	8016464 <__swsetup_r>
 8016094:	b170      	cbz	r0, 80160b4 <_vfiprintf_r+0x5c>
 8016096:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016098:	07dc      	lsls	r4, r3, #31
 801609a:	d504      	bpl.n	80160a6 <_vfiprintf_r+0x4e>
 801609c:	f04f 30ff 	mov.w	r0, #4294967295
 80160a0:	b01d      	add	sp, #116	; 0x74
 80160a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160a6:	89ab      	ldrh	r3, [r5, #12]
 80160a8:	0598      	lsls	r0, r3, #22
 80160aa:	d4f7      	bmi.n	801609c <_vfiprintf_r+0x44>
 80160ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80160ae:	f7fe fb4b 	bl	8014748 <__retarget_lock_release_recursive>
 80160b2:	e7f3      	b.n	801609c <_vfiprintf_r+0x44>
 80160b4:	2300      	movs	r3, #0
 80160b6:	9309      	str	r3, [sp, #36]	; 0x24
 80160b8:	2320      	movs	r3, #32
 80160ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80160be:	f8cd 800c 	str.w	r8, [sp, #12]
 80160c2:	2330      	movs	r3, #48	; 0x30
 80160c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016278 <_vfiprintf_r+0x220>
 80160c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80160cc:	f04f 0901 	mov.w	r9, #1
 80160d0:	4623      	mov	r3, r4
 80160d2:	469a      	mov	sl, r3
 80160d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80160d8:	b10a      	cbz	r2, 80160de <_vfiprintf_r+0x86>
 80160da:	2a25      	cmp	r2, #37	; 0x25
 80160dc:	d1f9      	bne.n	80160d2 <_vfiprintf_r+0x7a>
 80160de:	ebba 0b04 	subs.w	fp, sl, r4
 80160e2:	d00b      	beq.n	80160fc <_vfiprintf_r+0xa4>
 80160e4:	465b      	mov	r3, fp
 80160e6:	4622      	mov	r2, r4
 80160e8:	4629      	mov	r1, r5
 80160ea:	4630      	mov	r0, r6
 80160ec:	f7ff ffa1 	bl	8016032 <__sfputs_r>
 80160f0:	3001      	adds	r0, #1
 80160f2:	f000 80a9 	beq.w	8016248 <_vfiprintf_r+0x1f0>
 80160f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80160f8:	445a      	add	r2, fp
 80160fa:	9209      	str	r2, [sp, #36]	; 0x24
 80160fc:	f89a 3000 	ldrb.w	r3, [sl]
 8016100:	2b00      	cmp	r3, #0
 8016102:	f000 80a1 	beq.w	8016248 <_vfiprintf_r+0x1f0>
 8016106:	2300      	movs	r3, #0
 8016108:	f04f 32ff 	mov.w	r2, #4294967295
 801610c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016110:	f10a 0a01 	add.w	sl, sl, #1
 8016114:	9304      	str	r3, [sp, #16]
 8016116:	9307      	str	r3, [sp, #28]
 8016118:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801611c:	931a      	str	r3, [sp, #104]	; 0x68
 801611e:	4654      	mov	r4, sl
 8016120:	2205      	movs	r2, #5
 8016122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016126:	4854      	ldr	r0, [pc, #336]	; (8016278 <_vfiprintf_r+0x220>)
 8016128:	f7ea f82a 	bl	8000180 <memchr>
 801612c:	9a04      	ldr	r2, [sp, #16]
 801612e:	b9d8      	cbnz	r0, 8016168 <_vfiprintf_r+0x110>
 8016130:	06d1      	lsls	r1, r2, #27
 8016132:	bf44      	itt	mi
 8016134:	2320      	movmi	r3, #32
 8016136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801613a:	0713      	lsls	r3, r2, #28
 801613c:	bf44      	itt	mi
 801613e:	232b      	movmi	r3, #43	; 0x2b
 8016140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016144:	f89a 3000 	ldrb.w	r3, [sl]
 8016148:	2b2a      	cmp	r3, #42	; 0x2a
 801614a:	d015      	beq.n	8016178 <_vfiprintf_r+0x120>
 801614c:	9a07      	ldr	r2, [sp, #28]
 801614e:	4654      	mov	r4, sl
 8016150:	2000      	movs	r0, #0
 8016152:	f04f 0c0a 	mov.w	ip, #10
 8016156:	4621      	mov	r1, r4
 8016158:	f811 3b01 	ldrb.w	r3, [r1], #1
 801615c:	3b30      	subs	r3, #48	; 0x30
 801615e:	2b09      	cmp	r3, #9
 8016160:	d94d      	bls.n	80161fe <_vfiprintf_r+0x1a6>
 8016162:	b1b0      	cbz	r0, 8016192 <_vfiprintf_r+0x13a>
 8016164:	9207      	str	r2, [sp, #28]
 8016166:	e014      	b.n	8016192 <_vfiprintf_r+0x13a>
 8016168:	eba0 0308 	sub.w	r3, r0, r8
 801616c:	fa09 f303 	lsl.w	r3, r9, r3
 8016170:	4313      	orrs	r3, r2
 8016172:	9304      	str	r3, [sp, #16]
 8016174:	46a2      	mov	sl, r4
 8016176:	e7d2      	b.n	801611e <_vfiprintf_r+0xc6>
 8016178:	9b03      	ldr	r3, [sp, #12]
 801617a:	1d19      	adds	r1, r3, #4
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	9103      	str	r1, [sp, #12]
 8016180:	2b00      	cmp	r3, #0
 8016182:	bfbb      	ittet	lt
 8016184:	425b      	neglt	r3, r3
 8016186:	f042 0202 	orrlt.w	r2, r2, #2
 801618a:	9307      	strge	r3, [sp, #28]
 801618c:	9307      	strlt	r3, [sp, #28]
 801618e:	bfb8      	it	lt
 8016190:	9204      	strlt	r2, [sp, #16]
 8016192:	7823      	ldrb	r3, [r4, #0]
 8016194:	2b2e      	cmp	r3, #46	; 0x2e
 8016196:	d10c      	bne.n	80161b2 <_vfiprintf_r+0x15a>
 8016198:	7863      	ldrb	r3, [r4, #1]
 801619a:	2b2a      	cmp	r3, #42	; 0x2a
 801619c:	d134      	bne.n	8016208 <_vfiprintf_r+0x1b0>
 801619e:	9b03      	ldr	r3, [sp, #12]
 80161a0:	1d1a      	adds	r2, r3, #4
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	9203      	str	r2, [sp, #12]
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	bfb8      	it	lt
 80161aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80161ae:	3402      	adds	r4, #2
 80161b0:	9305      	str	r3, [sp, #20]
 80161b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016288 <_vfiprintf_r+0x230>
 80161b6:	7821      	ldrb	r1, [r4, #0]
 80161b8:	2203      	movs	r2, #3
 80161ba:	4650      	mov	r0, sl
 80161bc:	f7e9 ffe0 	bl	8000180 <memchr>
 80161c0:	b138      	cbz	r0, 80161d2 <_vfiprintf_r+0x17a>
 80161c2:	9b04      	ldr	r3, [sp, #16]
 80161c4:	eba0 000a 	sub.w	r0, r0, sl
 80161c8:	2240      	movs	r2, #64	; 0x40
 80161ca:	4082      	lsls	r2, r0
 80161cc:	4313      	orrs	r3, r2
 80161ce:	3401      	adds	r4, #1
 80161d0:	9304      	str	r3, [sp, #16]
 80161d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161d6:	4829      	ldr	r0, [pc, #164]	; (801627c <_vfiprintf_r+0x224>)
 80161d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80161dc:	2206      	movs	r2, #6
 80161de:	f7e9 ffcf 	bl	8000180 <memchr>
 80161e2:	2800      	cmp	r0, #0
 80161e4:	d03f      	beq.n	8016266 <_vfiprintf_r+0x20e>
 80161e6:	4b26      	ldr	r3, [pc, #152]	; (8016280 <_vfiprintf_r+0x228>)
 80161e8:	bb1b      	cbnz	r3, 8016232 <_vfiprintf_r+0x1da>
 80161ea:	9b03      	ldr	r3, [sp, #12]
 80161ec:	3307      	adds	r3, #7
 80161ee:	f023 0307 	bic.w	r3, r3, #7
 80161f2:	3308      	adds	r3, #8
 80161f4:	9303      	str	r3, [sp, #12]
 80161f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161f8:	443b      	add	r3, r7
 80161fa:	9309      	str	r3, [sp, #36]	; 0x24
 80161fc:	e768      	b.n	80160d0 <_vfiprintf_r+0x78>
 80161fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8016202:	460c      	mov	r4, r1
 8016204:	2001      	movs	r0, #1
 8016206:	e7a6      	b.n	8016156 <_vfiprintf_r+0xfe>
 8016208:	2300      	movs	r3, #0
 801620a:	3401      	adds	r4, #1
 801620c:	9305      	str	r3, [sp, #20]
 801620e:	4619      	mov	r1, r3
 8016210:	f04f 0c0a 	mov.w	ip, #10
 8016214:	4620      	mov	r0, r4
 8016216:	f810 2b01 	ldrb.w	r2, [r0], #1
 801621a:	3a30      	subs	r2, #48	; 0x30
 801621c:	2a09      	cmp	r2, #9
 801621e:	d903      	bls.n	8016228 <_vfiprintf_r+0x1d0>
 8016220:	2b00      	cmp	r3, #0
 8016222:	d0c6      	beq.n	80161b2 <_vfiprintf_r+0x15a>
 8016224:	9105      	str	r1, [sp, #20]
 8016226:	e7c4      	b.n	80161b2 <_vfiprintf_r+0x15a>
 8016228:	fb0c 2101 	mla	r1, ip, r1, r2
 801622c:	4604      	mov	r4, r0
 801622e:	2301      	movs	r3, #1
 8016230:	e7f0      	b.n	8016214 <_vfiprintf_r+0x1bc>
 8016232:	ab03      	add	r3, sp, #12
 8016234:	9300      	str	r3, [sp, #0]
 8016236:	462a      	mov	r2, r5
 8016238:	4b12      	ldr	r3, [pc, #72]	; (8016284 <_vfiprintf_r+0x22c>)
 801623a:	a904      	add	r1, sp, #16
 801623c:	4630      	mov	r0, r6
 801623e:	f7fd fcab 	bl	8013b98 <_printf_float>
 8016242:	4607      	mov	r7, r0
 8016244:	1c78      	adds	r0, r7, #1
 8016246:	d1d6      	bne.n	80161f6 <_vfiprintf_r+0x19e>
 8016248:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801624a:	07d9      	lsls	r1, r3, #31
 801624c:	d405      	bmi.n	801625a <_vfiprintf_r+0x202>
 801624e:	89ab      	ldrh	r3, [r5, #12]
 8016250:	059a      	lsls	r2, r3, #22
 8016252:	d402      	bmi.n	801625a <_vfiprintf_r+0x202>
 8016254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016256:	f7fe fa77 	bl	8014748 <__retarget_lock_release_recursive>
 801625a:	89ab      	ldrh	r3, [r5, #12]
 801625c:	065b      	lsls	r3, r3, #25
 801625e:	f53f af1d 	bmi.w	801609c <_vfiprintf_r+0x44>
 8016262:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016264:	e71c      	b.n	80160a0 <_vfiprintf_r+0x48>
 8016266:	ab03      	add	r3, sp, #12
 8016268:	9300      	str	r3, [sp, #0]
 801626a:	462a      	mov	r2, r5
 801626c:	4b05      	ldr	r3, [pc, #20]	; (8016284 <_vfiprintf_r+0x22c>)
 801626e:	a904      	add	r1, sp, #16
 8016270:	4630      	mov	r0, r6
 8016272:	f7fd ff35 	bl	80140e0 <_printf_i>
 8016276:	e7e4      	b.n	8016242 <_vfiprintf_r+0x1ea>
 8016278:	080187a4 	.word	0x080187a4
 801627c:	080187ae 	.word	0x080187ae
 8016280:	08013b99 	.word	0x08013b99
 8016284:	08016033 	.word	0x08016033
 8016288:	080187aa 	.word	0x080187aa

0801628c <__sflush_r>:
 801628c:	898a      	ldrh	r2, [r1, #12]
 801628e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016292:	4605      	mov	r5, r0
 8016294:	0710      	lsls	r0, r2, #28
 8016296:	460c      	mov	r4, r1
 8016298:	d458      	bmi.n	801634c <__sflush_r+0xc0>
 801629a:	684b      	ldr	r3, [r1, #4]
 801629c:	2b00      	cmp	r3, #0
 801629e:	dc05      	bgt.n	80162ac <__sflush_r+0x20>
 80162a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	dc02      	bgt.n	80162ac <__sflush_r+0x20>
 80162a6:	2000      	movs	r0, #0
 80162a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80162ae:	2e00      	cmp	r6, #0
 80162b0:	d0f9      	beq.n	80162a6 <__sflush_r+0x1a>
 80162b2:	2300      	movs	r3, #0
 80162b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80162b8:	682f      	ldr	r7, [r5, #0]
 80162ba:	6a21      	ldr	r1, [r4, #32]
 80162bc:	602b      	str	r3, [r5, #0]
 80162be:	d032      	beq.n	8016326 <__sflush_r+0x9a>
 80162c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80162c2:	89a3      	ldrh	r3, [r4, #12]
 80162c4:	075a      	lsls	r2, r3, #29
 80162c6:	d505      	bpl.n	80162d4 <__sflush_r+0x48>
 80162c8:	6863      	ldr	r3, [r4, #4]
 80162ca:	1ac0      	subs	r0, r0, r3
 80162cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80162ce:	b10b      	cbz	r3, 80162d4 <__sflush_r+0x48>
 80162d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80162d2:	1ac0      	subs	r0, r0, r3
 80162d4:	2300      	movs	r3, #0
 80162d6:	4602      	mov	r2, r0
 80162d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80162da:	6a21      	ldr	r1, [r4, #32]
 80162dc:	4628      	mov	r0, r5
 80162de:	47b0      	blx	r6
 80162e0:	1c43      	adds	r3, r0, #1
 80162e2:	89a3      	ldrh	r3, [r4, #12]
 80162e4:	d106      	bne.n	80162f4 <__sflush_r+0x68>
 80162e6:	6829      	ldr	r1, [r5, #0]
 80162e8:	291d      	cmp	r1, #29
 80162ea:	d82b      	bhi.n	8016344 <__sflush_r+0xb8>
 80162ec:	4a29      	ldr	r2, [pc, #164]	; (8016394 <__sflush_r+0x108>)
 80162ee:	410a      	asrs	r2, r1
 80162f0:	07d6      	lsls	r6, r2, #31
 80162f2:	d427      	bmi.n	8016344 <__sflush_r+0xb8>
 80162f4:	2200      	movs	r2, #0
 80162f6:	6062      	str	r2, [r4, #4]
 80162f8:	04d9      	lsls	r1, r3, #19
 80162fa:	6922      	ldr	r2, [r4, #16]
 80162fc:	6022      	str	r2, [r4, #0]
 80162fe:	d504      	bpl.n	801630a <__sflush_r+0x7e>
 8016300:	1c42      	adds	r2, r0, #1
 8016302:	d101      	bne.n	8016308 <__sflush_r+0x7c>
 8016304:	682b      	ldr	r3, [r5, #0]
 8016306:	b903      	cbnz	r3, 801630a <__sflush_r+0x7e>
 8016308:	6560      	str	r0, [r4, #84]	; 0x54
 801630a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801630c:	602f      	str	r7, [r5, #0]
 801630e:	2900      	cmp	r1, #0
 8016310:	d0c9      	beq.n	80162a6 <__sflush_r+0x1a>
 8016312:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016316:	4299      	cmp	r1, r3
 8016318:	d002      	beq.n	8016320 <__sflush_r+0x94>
 801631a:	4628      	mov	r0, r5
 801631c:	f7ff f89e 	bl	801545c <_free_r>
 8016320:	2000      	movs	r0, #0
 8016322:	6360      	str	r0, [r4, #52]	; 0x34
 8016324:	e7c0      	b.n	80162a8 <__sflush_r+0x1c>
 8016326:	2301      	movs	r3, #1
 8016328:	4628      	mov	r0, r5
 801632a:	47b0      	blx	r6
 801632c:	1c41      	adds	r1, r0, #1
 801632e:	d1c8      	bne.n	80162c2 <__sflush_r+0x36>
 8016330:	682b      	ldr	r3, [r5, #0]
 8016332:	2b00      	cmp	r3, #0
 8016334:	d0c5      	beq.n	80162c2 <__sflush_r+0x36>
 8016336:	2b1d      	cmp	r3, #29
 8016338:	d001      	beq.n	801633e <__sflush_r+0xb2>
 801633a:	2b16      	cmp	r3, #22
 801633c:	d101      	bne.n	8016342 <__sflush_r+0xb6>
 801633e:	602f      	str	r7, [r5, #0]
 8016340:	e7b1      	b.n	80162a6 <__sflush_r+0x1a>
 8016342:	89a3      	ldrh	r3, [r4, #12]
 8016344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016348:	81a3      	strh	r3, [r4, #12]
 801634a:	e7ad      	b.n	80162a8 <__sflush_r+0x1c>
 801634c:	690f      	ldr	r7, [r1, #16]
 801634e:	2f00      	cmp	r7, #0
 8016350:	d0a9      	beq.n	80162a6 <__sflush_r+0x1a>
 8016352:	0793      	lsls	r3, r2, #30
 8016354:	680e      	ldr	r6, [r1, #0]
 8016356:	bf08      	it	eq
 8016358:	694b      	ldreq	r3, [r1, #20]
 801635a:	600f      	str	r7, [r1, #0]
 801635c:	bf18      	it	ne
 801635e:	2300      	movne	r3, #0
 8016360:	eba6 0807 	sub.w	r8, r6, r7
 8016364:	608b      	str	r3, [r1, #8]
 8016366:	f1b8 0f00 	cmp.w	r8, #0
 801636a:	dd9c      	ble.n	80162a6 <__sflush_r+0x1a>
 801636c:	6a21      	ldr	r1, [r4, #32]
 801636e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016370:	4643      	mov	r3, r8
 8016372:	463a      	mov	r2, r7
 8016374:	4628      	mov	r0, r5
 8016376:	47b0      	blx	r6
 8016378:	2800      	cmp	r0, #0
 801637a:	dc06      	bgt.n	801638a <__sflush_r+0xfe>
 801637c:	89a3      	ldrh	r3, [r4, #12]
 801637e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016382:	81a3      	strh	r3, [r4, #12]
 8016384:	f04f 30ff 	mov.w	r0, #4294967295
 8016388:	e78e      	b.n	80162a8 <__sflush_r+0x1c>
 801638a:	4407      	add	r7, r0
 801638c:	eba8 0800 	sub.w	r8, r8, r0
 8016390:	e7e9      	b.n	8016366 <__sflush_r+0xda>
 8016392:	bf00      	nop
 8016394:	dfbffffe 	.word	0xdfbffffe

08016398 <_fflush_r>:
 8016398:	b538      	push	{r3, r4, r5, lr}
 801639a:	690b      	ldr	r3, [r1, #16]
 801639c:	4605      	mov	r5, r0
 801639e:	460c      	mov	r4, r1
 80163a0:	b913      	cbnz	r3, 80163a8 <_fflush_r+0x10>
 80163a2:	2500      	movs	r5, #0
 80163a4:	4628      	mov	r0, r5
 80163a6:	bd38      	pop	{r3, r4, r5, pc}
 80163a8:	b118      	cbz	r0, 80163b2 <_fflush_r+0x1a>
 80163aa:	6a03      	ldr	r3, [r0, #32]
 80163ac:	b90b      	cbnz	r3, 80163b2 <_fflush_r+0x1a>
 80163ae:	f7fe f845 	bl	801443c <__sinit>
 80163b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d0f3      	beq.n	80163a2 <_fflush_r+0xa>
 80163ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80163bc:	07d0      	lsls	r0, r2, #31
 80163be:	d404      	bmi.n	80163ca <_fflush_r+0x32>
 80163c0:	0599      	lsls	r1, r3, #22
 80163c2:	d402      	bmi.n	80163ca <_fflush_r+0x32>
 80163c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80163c6:	f7fe f9be 	bl	8014746 <__retarget_lock_acquire_recursive>
 80163ca:	4628      	mov	r0, r5
 80163cc:	4621      	mov	r1, r4
 80163ce:	f7ff ff5d 	bl	801628c <__sflush_r>
 80163d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80163d4:	07da      	lsls	r2, r3, #31
 80163d6:	4605      	mov	r5, r0
 80163d8:	d4e4      	bmi.n	80163a4 <_fflush_r+0xc>
 80163da:	89a3      	ldrh	r3, [r4, #12]
 80163dc:	059b      	lsls	r3, r3, #22
 80163de:	d4e1      	bmi.n	80163a4 <_fflush_r+0xc>
 80163e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80163e2:	f7fe f9b1 	bl	8014748 <__retarget_lock_release_recursive>
 80163e6:	e7dd      	b.n	80163a4 <_fflush_r+0xc>

080163e8 <__swbuf_r>:
 80163e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163ea:	460e      	mov	r6, r1
 80163ec:	4614      	mov	r4, r2
 80163ee:	4605      	mov	r5, r0
 80163f0:	b118      	cbz	r0, 80163fa <__swbuf_r+0x12>
 80163f2:	6a03      	ldr	r3, [r0, #32]
 80163f4:	b90b      	cbnz	r3, 80163fa <__swbuf_r+0x12>
 80163f6:	f7fe f821 	bl	801443c <__sinit>
 80163fa:	69a3      	ldr	r3, [r4, #24]
 80163fc:	60a3      	str	r3, [r4, #8]
 80163fe:	89a3      	ldrh	r3, [r4, #12]
 8016400:	071a      	lsls	r2, r3, #28
 8016402:	d525      	bpl.n	8016450 <__swbuf_r+0x68>
 8016404:	6923      	ldr	r3, [r4, #16]
 8016406:	b31b      	cbz	r3, 8016450 <__swbuf_r+0x68>
 8016408:	6823      	ldr	r3, [r4, #0]
 801640a:	6922      	ldr	r2, [r4, #16]
 801640c:	1a98      	subs	r0, r3, r2
 801640e:	6963      	ldr	r3, [r4, #20]
 8016410:	b2f6      	uxtb	r6, r6
 8016412:	4283      	cmp	r3, r0
 8016414:	4637      	mov	r7, r6
 8016416:	dc04      	bgt.n	8016422 <__swbuf_r+0x3a>
 8016418:	4621      	mov	r1, r4
 801641a:	4628      	mov	r0, r5
 801641c:	f7ff ffbc 	bl	8016398 <_fflush_r>
 8016420:	b9e0      	cbnz	r0, 801645c <__swbuf_r+0x74>
 8016422:	68a3      	ldr	r3, [r4, #8]
 8016424:	3b01      	subs	r3, #1
 8016426:	60a3      	str	r3, [r4, #8]
 8016428:	6823      	ldr	r3, [r4, #0]
 801642a:	1c5a      	adds	r2, r3, #1
 801642c:	6022      	str	r2, [r4, #0]
 801642e:	701e      	strb	r6, [r3, #0]
 8016430:	6962      	ldr	r2, [r4, #20]
 8016432:	1c43      	adds	r3, r0, #1
 8016434:	429a      	cmp	r2, r3
 8016436:	d004      	beq.n	8016442 <__swbuf_r+0x5a>
 8016438:	89a3      	ldrh	r3, [r4, #12]
 801643a:	07db      	lsls	r3, r3, #31
 801643c:	d506      	bpl.n	801644c <__swbuf_r+0x64>
 801643e:	2e0a      	cmp	r6, #10
 8016440:	d104      	bne.n	801644c <__swbuf_r+0x64>
 8016442:	4621      	mov	r1, r4
 8016444:	4628      	mov	r0, r5
 8016446:	f7ff ffa7 	bl	8016398 <_fflush_r>
 801644a:	b938      	cbnz	r0, 801645c <__swbuf_r+0x74>
 801644c:	4638      	mov	r0, r7
 801644e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016450:	4621      	mov	r1, r4
 8016452:	4628      	mov	r0, r5
 8016454:	f000 f806 	bl	8016464 <__swsetup_r>
 8016458:	2800      	cmp	r0, #0
 801645a:	d0d5      	beq.n	8016408 <__swbuf_r+0x20>
 801645c:	f04f 37ff 	mov.w	r7, #4294967295
 8016460:	e7f4      	b.n	801644c <__swbuf_r+0x64>
	...

08016464 <__swsetup_r>:
 8016464:	b538      	push	{r3, r4, r5, lr}
 8016466:	4b2a      	ldr	r3, [pc, #168]	; (8016510 <__swsetup_r+0xac>)
 8016468:	4605      	mov	r5, r0
 801646a:	6818      	ldr	r0, [r3, #0]
 801646c:	460c      	mov	r4, r1
 801646e:	b118      	cbz	r0, 8016478 <__swsetup_r+0x14>
 8016470:	6a03      	ldr	r3, [r0, #32]
 8016472:	b90b      	cbnz	r3, 8016478 <__swsetup_r+0x14>
 8016474:	f7fd ffe2 	bl	801443c <__sinit>
 8016478:	89a3      	ldrh	r3, [r4, #12]
 801647a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801647e:	0718      	lsls	r0, r3, #28
 8016480:	d422      	bmi.n	80164c8 <__swsetup_r+0x64>
 8016482:	06d9      	lsls	r1, r3, #27
 8016484:	d407      	bmi.n	8016496 <__swsetup_r+0x32>
 8016486:	2309      	movs	r3, #9
 8016488:	602b      	str	r3, [r5, #0]
 801648a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801648e:	81a3      	strh	r3, [r4, #12]
 8016490:	f04f 30ff 	mov.w	r0, #4294967295
 8016494:	e034      	b.n	8016500 <__swsetup_r+0x9c>
 8016496:	0758      	lsls	r0, r3, #29
 8016498:	d512      	bpl.n	80164c0 <__swsetup_r+0x5c>
 801649a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801649c:	b141      	cbz	r1, 80164b0 <__swsetup_r+0x4c>
 801649e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80164a2:	4299      	cmp	r1, r3
 80164a4:	d002      	beq.n	80164ac <__swsetup_r+0x48>
 80164a6:	4628      	mov	r0, r5
 80164a8:	f7fe ffd8 	bl	801545c <_free_r>
 80164ac:	2300      	movs	r3, #0
 80164ae:	6363      	str	r3, [r4, #52]	; 0x34
 80164b0:	89a3      	ldrh	r3, [r4, #12]
 80164b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80164b6:	81a3      	strh	r3, [r4, #12]
 80164b8:	2300      	movs	r3, #0
 80164ba:	6063      	str	r3, [r4, #4]
 80164bc:	6923      	ldr	r3, [r4, #16]
 80164be:	6023      	str	r3, [r4, #0]
 80164c0:	89a3      	ldrh	r3, [r4, #12]
 80164c2:	f043 0308 	orr.w	r3, r3, #8
 80164c6:	81a3      	strh	r3, [r4, #12]
 80164c8:	6923      	ldr	r3, [r4, #16]
 80164ca:	b94b      	cbnz	r3, 80164e0 <__swsetup_r+0x7c>
 80164cc:	89a3      	ldrh	r3, [r4, #12]
 80164ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80164d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80164d6:	d003      	beq.n	80164e0 <__swsetup_r+0x7c>
 80164d8:	4621      	mov	r1, r4
 80164da:	4628      	mov	r0, r5
 80164dc:	f000 f8fe 	bl	80166dc <__smakebuf_r>
 80164e0:	89a0      	ldrh	r0, [r4, #12]
 80164e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80164e6:	f010 0301 	ands.w	r3, r0, #1
 80164ea:	d00a      	beq.n	8016502 <__swsetup_r+0x9e>
 80164ec:	2300      	movs	r3, #0
 80164ee:	60a3      	str	r3, [r4, #8]
 80164f0:	6963      	ldr	r3, [r4, #20]
 80164f2:	425b      	negs	r3, r3
 80164f4:	61a3      	str	r3, [r4, #24]
 80164f6:	6923      	ldr	r3, [r4, #16]
 80164f8:	b943      	cbnz	r3, 801650c <__swsetup_r+0xa8>
 80164fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80164fe:	d1c4      	bne.n	801648a <__swsetup_r+0x26>
 8016500:	bd38      	pop	{r3, r4, r5, pc}
 8016502:	0781      	lsls	r1, r0, #30
 8016504:	bf58      	it	pl
 8016506:	6963      	ldrpl	r3, [r4, #20]
 8016508:	60a3      	str	r3, [r4, #8]
 801650a:	e7f4      	b.n	80164f6 <__swsetup_r+0x92>
 801650c:	2000      	movs	r0, #0
 801650e:	e7f7      	b.n	8016500 <__swsetup_r+0x9c>
 8016510:	200001cc 	.word	0x200001cc

08016514 <memmove>:
 8016514:	4288      	cmp	r0, r1
 8016516:	b510      	push	{r4, lr}
 8016518:	eb01 0402 	add.w	r4, r1, r2
 801651c:	d902      	bls.n	8016524 <memmove+0x10>
 801651e:	4284      	cmp	r4, r0
 8016520:	4623      	mov	r3, r4
 8016522:	d807      	bhi.n	8016534 <memmove+0x20>
 8016524:	1e43      	subs	r3, r0, #1
 8016526:	42a1      	cmp	r1, r4
 8016528:	d008      	beq.n	801653c <memmove+0x28>
 801652a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801652e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016532:	e7f8      	b.n	8016526 <memmove+0x12>
 8016534:	4402      	add	r2, r0
 8016536:	4601      	mov	r1, r0
 8016538:	428a      	cmp	r2, r1
 801653a:	d100      	bne.n	801653e <memmove+0x2a>
 801653c:	bd10      	pop	{r4, pc}
 801653e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016546:	e7f7      	b.n	8016538 <memmove+0x24>

08016548 <_sbrk_r>:
 8016548:	b538      	push	{r3, r4, r5, lr}
 801654a:	4d06      	ldr	r5, [pc, #24]	; (8016564 <_sbrk_r+0x1c>)
 801654c:	2300      	movs	r3, #0
 801654e:	4604      	mov	r4, r0
 8016550:	4608      	mov	r0, r1
 8016552:	602b      	str	r3, [r5, #0]
 8016554:	f7f1 f80a 	bl	800756c <_sbrk>
 8016558:	1c43      	adds	r3, r0, #1
 801655a:	d102      	bne.n	8016562 <_sbrk_r+0x1a>
 801655c:	682b      	ldr	r3, [r5, #0]
 801655e:	b103      	cbz	r3, 8016562 <_sbrk_r+0x1a>
 8016560:	6023      	str	r3, [r4, #0]
 8016562:	bd38      	pop	{r3, r4, r5, pc}
 8016564:	2000331c 	.word	0x2000331c

08016568 <__assert_func>:
 8016568:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801656a:	4614      	mov	r4, r2
 801656c:	461a      	mov	r2, r3
 801656e:	4b09      	ldr	r3, [pc, #36]	; (8016594 <__assert_func+0x2c>)
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	4605      	mov	r5, r0
 8016574:	68d8      	ldr	r0, [r3, #12]
 8016576:	b14c      	cbz	r4, 801658c <__assert_func+0x24>
 8016578:	4b07      	ldr	r3, [pc, #28]	; (8016598 <__assert_func+0x30>)
 801657a:	9100      	str	r1, [sp, #0]
 801657c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016580:	4906      	ldr	r1, [pc, #24]	; (801659c <__assert_func+0x34>)
 8016582:	462b      	mov	r3, r5
 8016584:	f000 f872 	bl	801666c <fiprintf>
 8016588:	f000 f906 	bl	8016798 <abort>
 801658c:	4b04      	ldr	r3, [pc, #16]	; (80165a0 <__assert_func+0x38>)
 801658e:	461c      	mov	r4, r3
 8016590:	e7f3      	b.n	801657a <__assert_func+0x12>
 8016592:	bf00      	nop
 8016594:	200001cc 	.word	0x200001cc
 8016598:	080187bf 	.word	0x080187bf
 801659c:	080187cc 	.word	0x080187cc
 80165a0:	080187fa 	.word	0x080187fa

080165a4 <_calloc_r>:
 80165a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80165a6:	fba1 2402 	umull	r2, r4, r1, r2
 80165aa:	b94c      	cbnz	r4, 80165c0 <_calloc_r+0x1c>
 80165ac:	4611      	mov	r1, r2
 80165ae:	9201      	str	r2, [sp, #4]
 80165b0:	f7fe ffc8 	bl	8015544 <_malloc_r>
 80165b4:	9a01      	ldr	r2, [sp, #4]
 80165b6:	4605      	mov	r5, r0
 80165b8:	b930      	cbnz	r0, 80165c8 <_calloc_r+0x24>
 80165ba:	4628      	mov	r0, r5
 80165bc:	b003      	add	sp, #12
 80165be:	bd30      	pop	{r4, r5, pc}
 80165c0:	220c      	movs	r2, #12
 80165c2:	6002      	str	r2, [r0, #0]
 80165c4:	2500      	movs	r5, #0
 80165c6:	e7f8      	b.n	80165ba <_calloc_r+0x16>
 80165c8:	4621      	mov	r1, r4
 80165ca:	f7fd ffe9 	bl	80145a0 <memset>
 80165ce:	e7f4      	b.n	80165ba <_calloc_r+0x16>

080165d0 <__ascii_mbtowc>:
 80165d0:	b082      	sub	sp, #8
 80165d2:	b901      	cbnz	r1, 80165d6 <__ascii_mbtowc+0x6>
 80165d4:	a901      	add	r1, sp, #4
 80165d6:	b142      	cbz	r2, 80165ea <__ascii_mbtowc+0x1a>
 80165d8:	b14b      	cbz	r3, 80165ee <__ascii_mbtowc+0x1e>
 80165da:	7813      	ldrb	r3, [r2, #0]
 80165dc:	600b      	str	r3, [r1, #0]
 80165de:	7812      	ldrb	r2, [r2, #0]
 80165e0:	1e10      	subs	r0, r2, #0
 80165e2:	bf18      	it	ne
 80165e4:	2001      	movne	r0, #1
 80165e6:	b002      	add	sp, #8
 80165e8:	4770      	bx	lr
 80165ea:	4610      	mov	r0, r2
 80165ec:	e7fb      	b.n	80165e6 <__ascii_mbtowc+0x16>
 80165ee:	f06f 0001 	mvn.w	r0, #1
 80165f2:	e7f8      	b.n	80165e6 <__ascii_mbtowc+0x16>

080165f4 <_realloc_r>:
 80165f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165f8:	4680      	mov	r8, r0
 80165fa:	4614      	mov	r4, r2
 80165fc:	460e      	mov	r6, r1
 80165fe:	b921      	cbnz	r1, 801660a <_realloc_r+0x16>
 8016600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016604:	4611      	mov	r1, r2
 8016606:	f7fe bf9d 	b.w	8015544 <_malloc_r>
 801660a:	b92a      	cbnz	r2, 8016618 <_realloc_r+0x24>
 801660c:	f7fe ff26 	bl	801545c <_free_r>
 8016610:	4625      	mov	r5, r4
 8016612:	4628      	mov	r0, r5
 8016614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016618:	f000 f8c5 	bl	80167a6 <_malloc_usable_size_r>
 801661c:	4284      	cmp	r4, r0
 801661e:	4607      	mov	r7, r0
 8016620:	d802      	bhi.n	8016628 <_realloc_r+0x34>
 8016622:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016626:	d812      	bhi.n	801664e <_realloc_r+0x5a>
 8016628:	4621      	mov	r1, r4
 801662a:	4640      	mov	r0, r8
 801662c:	f7fe ff8a 	bl	8015544 <_malloc_r>
 8016630:	4605      	mov	r5, r0
 8016632:	2800      	cmp	r0, #0
 8016634:	d0ed      	beq.n	8016612 <_realloc_r+0x1e>
 8016636:	42bc      	cmp	r4, r7
 8016638:	4622      	mov	r2, r4
 801663a:	4631      	mov	r1, r6
 801663c:	bf28      	it	cs
 801663e:	463a      	movcs	r2, r7
 8016640:	f7fe f883 	bl	801474a <memcpy>
 8016644:	4631      	mov	r1, r6
 8016646:	4640      	mov	r0, r8
 8016648:	f7fe ff08 	bl	801545c <_free_r>
 801664c:	e7e1      	b.n	8016612 <_realloc_r+0x1e>
 801664e:	4635      	mov	r5, r6
 8016650:	e7df      	b.n	8016612 <_realloc_r+0x1e>

08016652 <__ascii_wctomb>:
 8016652:	b149      	cbz	r1, 8016668 <__ascii_wctomb+0x16>
 8016654:	2aff      	cmp	r2, #255	; 0xff
 8016656:	bf85      	ittet	hi
 8016658:	238a      	movhi	r3, #138	; 0x8a
 801665a:	6003      	strhi	r3, [r0, #0]
 801665c:	700a      	strbls	r2, [r1, #0]
 801665e:	f04f 30ff 	movhi.w	r0, #4294967295
 8016662:	bf98      	it	ls
 8016664:	2001      	movls	r0, #1
 8016666:	4770      	bx	lr
 8016668:	4608      	mov	r0, r1
 801666a:	4770      	bx	lr

0801666c <fiprintf>:
 801666c:	b40e      	push	{r1, r2, r3}
 801666e:	b503      	push	{r0, r1, lr}
 8016670:	4601      	mov	r1, r0
 8016672:	ab03      	add	r3, sp, #12
 8016674:	4805      	ldr	r0, [pc, #20]	; (801668c <fiprintf+0x20>)
 8016676:	f853 2b04 	ldr.w	r2, [r3], #4
 801667a:	6800      	ldr	r0, [r0, #0]
 801667c:	9301      	str	r3, [sp, #4]
 801667e:	f7ff fceb 	bl	8016058 <_vfiprintf_r>
 8016682:	b002      	add	sp, #8
 8016684:	f85d eb04 	ldr.w	lr, [sp], #4
 8016688:	b003      	add	sp, #12
 801668a:	4770      	bx	lr
 801668c:	200001cc 	.word	0x200001cc

08016690 <__swhatbuf_r>:
 8016690:	b570      	push	{r4, r5, r6, lr}
 8016692:	460c      	mov	r4, r1
 8016694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016698:	2900      	cmp	r1, #0
 801669a:	b096      	sub	sp, #88	; 0x58
 801669c:	4615      	mov	r5, r2
 801669e:	461e      	mov	r6, r3
 80166a0:	da0d      	bge.n	80166be <__swhatbuf_r+0x2e>
 80166a2:	89a3      	ldrh	r3, [r4, #12]
 80166a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80166a8:	f04f 0100 	mov.w	r1, #0
 80166ac:	bf0c      	ite	eq
 80166ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80166b2:	2340      	movne	r3, #64	; 0x40
 80166b4:	2000      	movs	r0, #0
 80166b6:	6031      	str	r1, [r6, #0]
 80166b8:	602b      	str	r3, [r5, #0]
 80166ba:	b016      	add	sp, #88	; 0x58
 80166bc:	bd70      	pop	{r4, r5, r6, pc}
 80166be:	466a      	mov	r2, sp
 80166c0:	f000 f848 	bl	8016754 <_fstat_r>
 80166c4:	2800      	cmp	r0, #0
 80166c6:	dbec      	blt.n	80166a2 <__swhatbuf_r+0x12>
 80166c8:	9901      	ldr	r1, [sp, #4]
 80166ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80166ce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80166d2:	4259      	negs	r1, r3
 80166d4:	4159      	adcs	r1, r3
 80166d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80166da:	e7eb      	b.n	80166b4 <__swhatbuf_r+0x24>

080166dc <__smakebuf_r>:
 80166dc:	898b      	ldrh	r3, [r1, #12]
 80166de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80166e0:	079d      	lsls	r5, r3, #30
 80166e2:	4606      	mov	r6, r0
 80166e4:	460c      	mov	r4, r1
 80166e6:	d507      	bpl.n	80166f8 <__smakebuf_r+0x1c>
 80166e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80166ec:	6023      	str	r3, [r4, #0]
 80166ee:	6123      	str	r3, [r4, #16]
 80166f0:	2301      	movs	r3, #1
 80166f2:	6163      	str	r3, [r4, #20]
 80166f4:	b002      	add	sp, #8
 80166f6:	bd70      	pop	{r4, r5, r6, pc}
 80166f8:	ab01      	add	r3, sp, #4
 80166fa:	466a      	mov	r2, sp
 80166fc:	f7ff ffc8 	bl	8016690 <__swhatbuf_r>
 8016700:	9900      	ldr	r1, [sp, #0]
 8016702:	4605      	mov	r5, r0
 8016704:	4630      	mov	r0, r6
 8016706:	f7fe ff1d 	bl	8015544 <_malloc_r>
 801670a:	b948      	cbnz	r0, 8016720 <__smakebuf_r+0x44>
 801670c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016710:	059a      	lsls	r2, r3, #22
 8016712:	d4ef      	bmi.n	80166f4 <__smakebuf_r+0x18>
 8016714:	f023 0303 	bic.w	r3, r3, #3
 8016718:	f043 0302 	orr.w	r3, r3, #2
 801671c:	81a3      	strh	r3, [r4, #12]
 801671e:	e7e3      	b.n	80166e8 <__smakebuf_r+0xc>
 8016720:	89a3      	ldrh	r3, [r4, #12]
 8016722:	6020      	str	r0, [r4, #0]
 8016724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016728:	81a3      	strh	r3, [r4, #12]
 801672a:	9b00      	ldr	r3, [sp, #0]
 801672c:	6163      	str	r3, [r4, #20]
 801672e:	9b01      	ldr	r3, [sp, #4]
 8016730:	6120      	str	r0, [r4, #16]
 8016732:	b15b      	cbz	r3, 801674c <__smakebuf_r+0x70>
 8016734:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016738:	4630      	mov	r0, r6
 801673a:	f000 f81d 	bl	8016778 <_isatty_r>
 801673e:	b128      	cbz	r0, 801674c <__smakebuf_r+0x70>
 8016740:	89a3      	ldrh	r3, [r4, #12]
 8016742:	f023 0303 	bic.w	r3, r3, #3
 8016746:	f043 0301 	orr.w	r3, r3, #1
 801674a:	81a3      	strh	r3, [r4, #12]
 801674c:	89a3      	ldrh	r3, [r4, #12]
 801674e:	431d      	orrs	r5, r3
 8016750:	81a5      	strh	r5, [r4, #12]
 8016752:	e7cf      	b.n	80166f4 <__smakebuf_r+0x18>

08016754 <_fstat_r>:
 8016754:	b538      	push	{r3, r4, r5, lr}
 8016756:	4d07      	ldr	r5, [pc, #28]	; (8016774 <_fstat_r+0x20>)
 8016758:	2300      	movs	r3, #0
 801675a:	4604      	mov	r4, r0
 801675c:	4608      	mov	r0, r1
 801675e:	4611      	mov	r1, r2
 8016760:	602b      	str	r3, [r5, #0]
 8016762:	f7f0 feda 	bl	800751a <_fstat>
 8016766:	1c43      	adds	r3, r0, #1
 8016768:	d102      	bne.n	8016770 <_fstat_r+0x1c>
 801676a:	682b      	ldr	r3, [r5, #0]
 801676c:	b103      	cbz	r3, 8016770 <_fstat_r+0x1c>
 801676e:	6023      	str	r3, [r4, #0]
 8016770:	bd38      	pop	{r3, r4, r5, pc}
 8016772:	bf00      	nop
 8016774:	2000331c 	.word	0x2000331c

08016778 <_isatty_r>:
 8016778:	b538      	push	{r3, r4, r5, lr}
 801677a:	4d06      	ldr	r5, [pc, #24]	; (8016794 <_isatty_r+0x1c>)
 801677c:	2300      	movs	r3, #0
 801677e:	4604      	mov	r4, r0
 8016780:	4608      	mov	r0, r1
 8016782:	602b      	str	r3, [r5, #0]
 8016784:	f7f0 fed9 	bl	800753a <_isatty>
 8016788:	1c43      	adds	r3, r0, #1
 801678a:	d102      	bne.n	8016792 <_isatty_r+0x1a>
 801678c:	682b      	ldr	r3, [r5, #0]
 801678e:	b103      	cbz	r3, 8016792 <_isatty_r+0x1a>
 8016790:	6023      	str	r3, [r4, #0]
 8016792:	bd38      	pop	{r3, r4, r5, pc}
 8016794:	2000331c 	.word	0x2000331c

08016798 <abort>:
 8016798:	b508      	push	{r3, lr}
 801679a:	2006      	movs	r0, #6
 801679c:	f000 f834 	bl	8016808 <raise>
 80167a0:	2001      	movs	r0, #1
 80167a2:	f7f0 fe6b 	bl	800747c <_exit>

080167a6 <_malloc_usable_size_r>:
 80167a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80167aa:	1f18      	subs	r0, r3, #4
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	bfbc      	itt	lt
 80167b0:	580b      	ldrlt	r3, [r1, r0]
 80167b2:	18c0      	addlt	r0, r0, r3
 80167b4:	4770      	bx	lr

080167b6 <_raise_r>:
 80167b6:	291f      	cmp	r1, #31
 80167b8:	b538      	push	{r3, r4, r5, lr}
 80167ba:	4604      	mov	r4, r0
 80167bc:	460d      	mov	r5, r1
 80167be:	d904      	bls.n	80167ca <_raise_r+0x14>
 80167c0:	2316      	movs	r3, #22
 80167c2:	6003      	str	r3, [r0, #0]
 80167c4:	f04f 30ff 	mov.w	r0, #4294967295
 80167c8:	bd38      	pop	{r3, r4, r5, pc}
 80167ca:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80167cc:	b112      	cbz	r2, 80167d4 <_raise_r+0x1e>
 80167ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80167d2:	b94b      	cbnz	r3, 80167e8 <_raise_r+0x32>
 80167d4:	4620      	mov	r0, r4
 80167d6:	f000 f831 	bl	801683c <_getpid_r>
 80167da:	462a      	mov	r2, r5
 80167dc:	4601      	mov	r1, r0
 80167de:	4620      	mov	r0, r4
 80167e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80167e4:	f000 b818 	b.w	8016818 <_kill_r>
 80167e8:	2b01      	cmp	r3, #1
 80167ea:	d00a      	beq.n	8016802 <_raise_r+0x4c>
 80167ec:	1c59      	adds	r1, r3, #1
 80167ee:	d103      	bne.n	80167f8 <_raise_r+0x42>
 80167f0:	2316      	movs	r3, #22
 80167f2:	6003      	str	r3, [r0, #0]
 80167f4:	2001      	movs	r0, #1
 80167f6:	e7e7      	b.n	80167c8 <_raise_r+0x12>
 80167f8:	2400      	movs	r4, #0
 80167fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80167fe:	4628      	mov	r0, r5
 8016800:	4798      	blx	r3
 8016802:	2000      	movs	r0, #0
 8016804:	e7e0      	b.n	80167c8 <_raise_r+0x12>
	...

08016808 <raise>:
 8016808:	4b02      	ldr	r3, [pc, #8]	; (8016814 <raise+0xc>)
 801680a:	4601      	mov	r1, r0
 801680c:	6818      	ldr	r0, [r3, #0]
 801680e:	f7ff bfd2 	b.w	80167b6 <_raise_r>
 8016812:	bf00      	nop
 8016814:	200001cc 	.word	0x200001cc

08016818 <_kill_r>:
 8016818:	b538      	push	{r3, r4, r5, lr}
 801681a:	4d07      	ldr	r5, [pc, #28]	; (8016838 <_kill_r+0x20>)
 801681c:	2300      	movs	r3, #0
 801681e:	4604      	mov	r4, r0
 8016820:	4608      	mov	r0, r1
 8016822:	4611      	mov	r1, r2
 8016824:	602b      	str	r3, [r5, #0]
 8016826:	f7f0 fe19 	bl	800745c <_kill>
 801682a:	1c43      	adds	r3, r0, #1
 801682c:	d102      	bne.n	8016834 <_kill_r+0x1c>
 801682e:	682b      	ldr	r3, [r5, #0]
 8016830:	b103      	cbz	r3, 8016834 <_kill_r+0x1c>
 8016832:	6023      	str	r3, [r4, #0]
 8016834:	bd38      	pop	{r3, r4, r5, pc}
 8016836:	bf00      	nop
 8016838:	2000331c 	.word	0x2000331c

0801683c <_getpid_r>:
 801683c:	f7f0 be06 	b.w	800744c <_getpid>

08016840 <pow>:
 8016840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016842:	ed2d 8b02 	vpush	{d8}
 8016846:	eeb0 8a40 	vmov.f32	s16, s0
 801684a:	eef0 8a60 	vmov.f32	s17, s1
 801684e:	ec55 4b11 	vmov	r4, r5, d1
 8016852:	f000 f871 	bl	8016938 <__ieee754_pow>
 8016856:	4622      	mov	r2, r4
 8016858:	462b      	mov	r3, r5
 801685a:	4620      	mov	r0, r4
 801685c:	4629      	mov	r1, r5
 801685e:	ec57 6b10 	vmov	r6, r7, d0
 8016862:	f7ea f93b 	bl	8000adc <__aeabi_dcmpun>
 8016866:	2800      	cmp	r0, #0
 8016868:	d13b      	bne.n	80168e2 <pow+0xa2>
 801686a:	ec51 0b18 	vmov	r0, r1, d8
 801686e:	2200      	movs	r2, #0
 8016870:	2300      	movs	r3, #0
 8016872:	f7ea f901 	bl	8000a78 <__aeabi_dcmpeq>
 8016876:	b1b8      	cbz	r0, 80168a8 <pow+0x68>
 8016878:	2200      	movs	r2, #0
 801687a:	2300      	movs	r3, #0
 801687c:	4620      	mov	r0, r4
 801687e:	4629      	mov	r1, r5
 8016880:	f7ea f8fa 	bl	8000a78 <__aeabi_dcmpeq>
 8016884:	2800      	cmp	r0, #0
 8016886:	d146      	bne.n	8016916 <pow+0xd6>
 8016888:	ec45 4b10 	vmov	d0, r4, r5
 801688c:	f000 f848 	bl	8016920 <finite>
 8016890:	b338      	cbz	r0, 80168e2 <pow+0xa2>
 8016892:	2200      	movs	r2, #0
 8016894:	2300      	movs	r3, #0
 8016896:	4620      	mov	r0, r4
 8016898:	4629      	mov	r1, r5
 801689a:	f7ea f8f7 	bl	8000a8c <__aeabi_dcmplt>
 801689e:	b300      	cbz	r0, 80168e2 <pow+0xa2>
 80168a0:	f7fd ff26 	bl	80146f0 <__errno>
 80168a4:	2322      	movs	r3, #34	; 0x22
 80168a6:	e01b      	b.n	80168e0 <pow+0xa0>
 80168a8:	ec47 6b10 	vmov	d0, r6, r7
 80168ac:	f000 f838 	bl	8016920 <finite>
 80168b0:	b9e0      	cbnz	r0, 80168ec <pow+0xac>
 80168b2:	eeb0 0a48 	vmov.f32	s0, s16
 80168b6:	eef0 0a68 	vmov.f32	s1, s17
 80168ba:	f000 f831 	bl	8016920 <finite>
 80168be:	b1a8      	cbz	r0, 80168ec <pow+0xac>
 80168c0:	ec45 4b10 	vmov	d0, r4, r5
 80168c4:	f000 f82c 	bl	8016920 <finite>
 80168c8:	b180      	cbz	r0, 80168ec <pow+0xac>
 80168ca:	4632      	mov	r2, r6
 80168cc:	463b      	mov	r3, r7
 80168ce:	4630      	mov	r0, r6
 80168d0:	4639      	mov	r1, r7
 80168d2:	f7ea f903 	bl	8000adc <__aeabi_dcmpun>
 80168d6:	2800      	cmp	r0, #0
 80168d8:	d0e2      	beq.n	80168a0 <pow+0x60>
 80168da:	f7fd ff09 	bl	80146f0 <__errno>
 80168de:	2321      	movs	r3, #33	; 0x21
 80168e0:	6003      	str	r3, [r0, #0]
 80168e2:	ecbd 8b02 	vpop	{d8}
 80168e6:	ec47 6b10 	vmov	d0, r6, r7
 80168ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168ec:	2200      	movs	r2, #0
 80168ee:	2300      	movs	r3, #0
 80168f0:	4630      	mov	r0, r6
 80168f2:	4639      	mov	r1, r7
 80168f4:	f7ea f8c0 	bl	8000a78 <__aeabi_dcmpeq>
 80168f8:	2800      	cmp	r0, #0
 80168fa:	d0f2      	beq.n	80168e2 <pow+0xa2>
 80168fc:	eeb0 0a48 	vmov.f32	s0, s16
 8016900:	eef0 0a68 	vmov.f32	s1, s17
 8016904:	f000 f80c 	bl	8016920 <finite>
 8016908:	2800      	cmp	r0, #0
 801690a:	d0ea      	beq.n	80168e2 <pow+0xa2>
 801690c:	ec45 4b10 	vmov	d0, r4, r5
 8016910:	f000 f806 	bl	8016920 <finite>
 8016914:	e7c3      	b.n	801689e <pow+0x5e>
 8016916:	4f01      	ldr	r7, [pc, #4]	; (801691c <pow+0xdc>)
 8016918:	2600      	movs	r6, #0
 801691a:	e7e2      	b.n	80168e2 <pow+0xa2>
 801691c:	3ff00000 	.word	0x3ff00000

08016920 <finite>:
 8016920:	b082      	sub	sp, #8
 8016922:	ed8d 0b00 	vstr	d0, [sp]
 8016926:	9801      	ldr	r0, [sp, #4]
 8016928:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801692c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8016930:	0fc0      	lsrs	r0, r0, #31
 8016932:	b002      	add	sp, #8
 8016934:	4770      	bx	lr
	...

08016938 <__ieee754_pow>:
 8016938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801693c:	ed2d 8b06 	vpush	{d8-d10}
 8016940:	b089      	sub	sp, #36	; 0x24
 8016942:	ed8d 1b00 	vstr	d1, [sp]
 8016946:	e9dd 2900 	ldrd	r2, r9, [sp]
 801694a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801694e:	ea58 0102 	orrs.w	r1, r8, r2
 8016952:	ec57 6b10 	vmov	r6, r7, d0
 8016956:	d115      	bne.n	8016984 <__ieee754_pow+0x4c>
 8016958:	19b3      	adds	r3, r6, r6
 801695a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801695e:	4152      	adcs	r2, r2
 8016960:	4299      	cmp	r1, r3
 8016962:	4b89      	ldr	r3, [pc, #548]	; (8016b88 <__ieee754_pow+0x250>)
 8016964:	4193      	sbcs	r3, r2
 8016966:	f080 84d1 	bcs.w	801730c <__ieee754_pow+0x9d4>
 801696a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801696e:	4630      	mov	r0, r6
 8016970:	4639      	mov	r1, r7
 8016972:	f7e9 fc63 	bl	800023c <__adddf3>
 8016976:	ec41 0b10 	vmov	d0, r0, r1
 801697a:	b009      	add	sp, #36	; 0x24
 801697c:	ecbd 8b06 	vpop	{d8-d10}
 8016980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016984:	4b81      	ldr	r3, [pc, #516]	; (8016b8c <__ieee754_pow+0x254>)
 8016986:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801698a:	429c      	cmp	r4, r3
 801698c:	ee10 aa10 	vmov	sl, s0
 8016990:	463d      	mov	r5, r7
 8016992:	dc06      	bgt.n	80169a2 <__ieee754_pow+0x6a>
 8016994:	d101      	bne.n	801699a <__ieee754_pow+0x62>
 8016996:	2e00      	cmp	r6, #0
 8016998:	d1e7      	bne.n	801696a <__ieee754_pow+0x32>
 801699a:	4598      	cmp	r8, r3
 801699c:	dc01      	bgt.n	80169a2 <__ieee754_pow+0x6a>
 801699e:	d10f      	bne.n	80169c0 <__ieee754_pow+0x88>
 80169a0:	b172      	cbz	r2, 80169c0 <__ieee754_pow+0x88>
 80169a2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80169a6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80169aa:	ea55 050a 	orrs.w	r5, r5, sl
 80169ae:	d1dc      	bne.n	801696a <__ieee754_pow+0x32>
 80169b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80169b4:	18db      	adds	r3, r3, r3
 80169b6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80169ba:	4152      	adcs	r2, r2
 80169bc:	429d      	cmp	r5, r3
 80169be:	e7d0      	b.n	8016962 <__ieee754_pow+0x2a>
 80169c0:	2d00      	cmp	r5, #0
 80169c2:	da3b      	bge.n	8016a3c <__ieee754_pow+0x104>
 80169c4:	4b72      	ldr	r3, [pc, #456]	; (8016b90 <__ieee754_pow+0x258>)
 80169c6:	4598      	cmp	r8, r3
 80169c8:	dc51      	bgt.n	8016a6e <__ieee754_pow+0x136>
 80169ca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80169ce:	4598      	cmp	r8, r3
 80169d0:	f340 84ab 	ble.w	801732a <__ieee754_pow+0x9f2>
 80169d4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80169d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80169dc:	2b14      	cmp	r3, #20
 80169de:	dd0f      	ble.n	8016a00 <__ieee754_pow+0xc8>
 80169e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80169e4:	fa22 f103 	lsr.w	r1, r2, r3
 80169e8:	fa01 f303 	lsl.w	r3, r1, r3
 80169ec:	4293      	cmp	r3, r2
 80169ee:	f040 849c 	bne.w	801732a <__ieee754_pow+0x9f2>
 80169f2:	f001 0101 	and.w	r1, r1, #1
 80169f6:	f1c1 0302 	rsb	r3, r1, #2
 80169fa:	9304      	str	r3, [sp, #16]
 80169fc:	b182      	cbz	r2, 8016a20 <__ieee754_pow+0xe8>
 80169fe:	e05f      	b.n	8016ac0 <__ieee754_pow+0x188>
 8016a00:	2a00      	cmp	r2, #0
 8016a02:	d15b      	bne.n	8016abc <__ieee754_pow+0x184>
 8016a04:	f1c3 0314 	rsb	r3, r3, #20
 8016a08:	fa48 f103 	asr.w	r1, r8, r3
 8016a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8016a10:	4543      	cmp	r3, r8
 8016a12:	f040 8487 	bne.w	8017324 <__ieee754_pow+0x9ec>
 8016a16:	f001 0101 	and.w	r1, r1, #1
 8016a1a:	f1c1 0302 	rsb	r3, r1, #2
 8016a1e:	9304      	str	r3, [sp, #16]
 8016a20:	4b5c      	ldr	r3, [pc, #368]	; (8016b94 <__ieee754_pow+0x25c>)
 8016a22:	4598      	cmp	r8, r3
 8016a24:	d132      	bne.n	8016a8c <__ieee754_pow+0x154>
 8016a26:	f1b9 0f00 	cmp.w	r9, #0
 8016a2a:	f280 8477 	bge.w	801731c <__ieee754_pow+0x9e4>
 8016a2e:	4959      	ldr	r1, [pc, #356]	; (8016b94 <__ieee754_pow+0x25c>)
 8016a30:	4632      	mov	r2, r6
 8016a32:	463b      	mov	r3, r7
 8016a34:	2000      	movs	r0, #0
 8016a36:	f7e9 fee1 	bl	80007fc <__aeabi_ddiv>
 8016a3a:	e79c      	b.n	8016976 <__ieee754_pow+0x3e>
 8016a3c:	2300      	movs	r3, #0
 8016a3e:	9304      	str	r3, [sp, #16]
 8016a40:	2a00      	cmp	r2, #0
 8016a42:	d13d      	bne.n	8016ac0 <__ieee754_pow+0x188>
 8016a44:	4b51      	ldr	r3, [pc, #324]	; (8016b8c <__ieee754_pow+0x254>)
 8016a46:	4598      	cmp	r8, r3
 8016a48:	d1ea      	bne.n	8016a20 <__ieee754_pow+0xe8>
 8016a4a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8016a4e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8016a52:	ea53 030a 	orrs.w	r3, r3, sl
 8016a56:	f000 8459 	beq.w	801730c <__ieee754_pow+0x9d4>
 8016a5a:	4b4f      	ldr	r3, [pc, #316]	; (8016b98 <__ieee754_pow+0x260>)
 8016a5c:	429c      	cmp	r4, r3
 8016a5e:	dd08      	ble.n	8016a72 <__ieee754_pow+0x13a>
 8016a60:	f1b9 0f00 	cmp.w	r9, #0
 8016a64:	f2c0 8456 	blt.w	8017314 <__ieee754_pow+0x9dc>
 8016a68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a6c:	e783      	b.n	8016976 <__ieee754_pow+0x3e>
 8016a6e:	2302      	movs	r3, #2
 8016a70:	e7e5      	b.n	8016a3e <__ieee754_pow+0x106>
 8016a72:	f1b9 0f00 	cmp.w	r9, #0
 8016a76:	f04f 0000 	mov.w	r0, #0
 8016a7a:	f04f 0100 	mov.w	r1, #0
 8016a7e:	f6bf af7a 	bge.w	8016976 <__ieee754_pow+0x3e>
 8016a82:	e9dd 0300 	ldrd	r0, r3, [sp]
 8016a86:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016a8a:	e774      	b.n	8016976 <__ieee754_pow+0x3e>
 8016a8c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8016a90:	d106      	bne.n	8016aa0 <__ieee754_pow+0x168>
 8016a92:	4632      	mov	r2, r6
 8016a94:	463b      	mov	r3, r7
 8016a96:	4630      	mov	r0, r6
 8016a98:	4639      	mov	r1, r7
 8016a9a:	f7e9 fd85 	bl	80005a8 <__aeabi_dmul>
 8016a9e:	e76a      	b.n	8016976 <__ieee754_pow+0x3e>
 8016aa0:	4b3e      	ldr	r3, [pc, #248]	; (8016b9c <__ieee754_pow+0x264>)
 8016aa2:	4599      	cmp	r9, r3
 8016aa4:	d10c      	bne.n	8016ac0 <__ieee754_pow+0x188>
 8016aa6:	2d00      	cmp	r5, #0
 8016aa8:	db0a      	blt.n	8016ac0 <__ieee754_pow+0x188>
 8016aaa:	ec47 6b10 	vmov	d0, r6, r7
 8016aae:	b009      	add	sp, #36	; 0x24
 8016ab0:	ecbd 8b06 	vpop	{d8-d10}
 8016ab4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ab8:	f000 bd20 	b.w	80174fc <__ieee754_sqrt>
 8016abc:	2300      	movs	r3, #0
 8016abe:	9304      	str	r3, [sp, #16]
 8016ac0:	ec47 6b10 	vmov	d0, r6, r7
 8016ac4:	f000 fc62 	bl	801738c <fabs>
 8016ac8:	ec51 0b10 	vmov	r0, r1, d0
 8016acc:	f1ba 0f00 	cmp.w	sl, #0
 8016ad0:	d129      	bne.n	8016b26 <__ieee754_pow+0x1ee>
 8016ad2:	b124      	cbz	r4, 8016ade <__ieee754_pow+0x1a6>
 8016ad4:	4b2f      	ldr	r3, [pc, #188]	; (8016b94 <__ieee754_pow+0x25c>)
 8016ad6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8016ada:	429a      	cmp	r2, r3
 8016adc:	d123      	bne.n	8016b26 <__ieee754_pow+0x1ee>
 8016ade:	f1b9 0f00 	cmp.w	r9, #0
 8016ae2:	da05      	bge.n	8016af0 <__ieee754_pow+0x1b8>
 8016ae4:	4602      	mov	r2, r0
 8016ae6:	460b      	mov	r3, r1
 8016ae8:	2000      	movs	r0, #0
 8016aea:	492a      	ldr	r1, [pc, #168]	; (8016b94 <__ieee754_pow+0x25c>)
 8016aec:	f7e9 fe86 	bl	80007fc <__aeabi_ddiv>
 8016af0:	2d00      	cmp	r5, #0
 8016af2:	f6bf af40 	bge.w	8016976 <__ieee754_pow+0x3e>
 8016af6:	9b04      	ldr	r3, [sp, #16]
 8016af8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016afc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016b00:	431c      	orrs	r4, r3
 8016b02:	d108      	bne.n	8016b16 <__ieee754_pow+0x1de>
 8016b04:	4602      	mov	r2, r0
 8016b06:	460b      	mov	r3, r1
 8016b08:	4610      	mov	r0, r2
 8016b0a:	4619      	mov	r1, r3
 8016b0c:	f7e9 fb94 	bl	8000238 <__aeabi_dsub>
 8016b10:	4602      	mov	r2, r0
 8016b12:	460b      	mov	r3, r1
 8016b14:	e78f      	b.n	8016a36 <__ieee754_pow+0xfe>
 8016b16:	9b04      	ldr	r3, [sp, #16]
 8016b18:	2b01      	cmp	r3, #1
 8016b1a:	f47f af2c 	bne.w	8016976 <__ieee754_pow+0x3e>
 8016b1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016b22:	4619      	mov	r1, r3
 8016b24:	e727      	b.n	8016976 <__ieee754_pow+0x3e>
 8016b26:	0feb      	lsrs	r3, r5, #31
 8016b28:	3b01      	subs	r3, #1
 8016b2a:	9306      	str	r3, [sp, #24]
 8016b2c:	9a06      	ldr	r2, [sp, #24]
 8016b2e:	9b04      	ldr	r3, [sp, #16]
 8016b30:	4313      	orrs	r3, r2
 8016b32:	d102      	bne.n	8016b3a <__ieee754_pow+0x202>
 8016b34:	4632      	mov	r2, r6
 8016b36:	463b      	mov	r3, r7
 8016b38:	e7e6      	b.n	8016b08 <__ieee754_pow+0x1d0>
 8016b3a:	4b19      	ldr	r3, [pc, #100]	; (8016ba0 <__ieee754_pow+0x268>)
 8016b3c:	4598      	cmp	r8, r3
 8016b3e:	f340 80fb 	ble.w	8016d38 <__ieee754_pow+0x400>
 8016b42:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016b46:	4598      	cmp	r8, r3
 8016b48:	4b13      	ldr	r3, [pc, #76]	; (8016b98 <__ieee754_pow+0x260>)
 8016b4a:	dd0c      	ble.n	8016b66 <__ieee754_pow+0x22e>
 8016b4c:	429c      	cmp	r4, r3
 8016b4e:	dc0f      	bgt.n	8016b70 <__ieee754_pow+0x238>
 8016b50:	f1b9 0f00 	cmp.w	r9, #0
 8016b54:	da0f      	bge.n	8016b76 <__ieee754_pow+0x23e>
 8016b56:	2000      	movs	r0, #0
 8016b58:	b009      	add	sp, #36	; 0x24
 8016b5a:	ecbd 8b06 	vpop	{d8-d10}
 8016b5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b62:	f000 bcc2 	b.w	80174ea <__math_oflow>
 8016b66:	429c      	cmp	r4, r3
 8016b68:	dbf2      	blt.n	8016b50 <__ieee754_pow+0x218>
 8016b6a:	4b0a      	ldr	r3, [pc, #40]	; (8016b94 <__ieee754_pow+0x25c>)
 8016b6c:	429c      	cmp	r4, r3
 8016b6e:	dd19      	ble.n	8016ba4 <__ieee754_pow+0x26c>
 8016b70:	f1b9 0f00 	cmp.w	r9, #0
 8016b74:	dcef      	bgt.n	8016b56 <__ieee754_pow+0x21e>
 8016b76:	2000      	movs	r0, #0
 8016b78:	b009      	add	sp, #36	; 0x24
 8016b7a:	ecbd 8b06 	vpop	{d8-d10}
 8016b7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b82:	f000 bca9 	b.w	80174d8 <__math_uflow>
 8016b86:	bf00      	nop
 8016b88:	fff00000 	.word	0xfff00000
 8016b8c:	7ff00000 	.word	0x7ff00000
 8016b90:	433fffff 	.word	0x433fffff
 8016b94:	3ff00000 	.word	0x3ff00000
 8016b98:	3fefffff 	.word	0x3fefffff
 8016b9c:	3fe00000 	.word	0x3fe00000
 8016ba0:	41e00000 	.word	0x41e00000
 8016ba4:	4b60      	ldr	r3, [pc, #384]	; (8016d28 <__ieee754_pow+0x3f0>)
 8016ba6:	2200      	movs	r2, #0
 8016ba8:	f7e9 fb46 	bl	8000238 <__aeabi_dsub>
 8016bac:	a354      	add	r3, pc, #336	; (adr r3, 8016d00 <__ieee754_pow+0x3c8>)
 8016bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bb2:	4604      	mov	r4, r0
 8016bb4:	460d      	mov	r5, r1
 8016bb6:	f7e9 fcf7 	bl	80005a8 <__aeabi_dmul>
 8016bba:	a353      	add	r3, pc, #332	; (adr r3, 8016d08 <__ieee754_pow+0x3d0>)
 8016bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bc0:	4606      	mov	r6, r0
 8016bc2:	460f      	mov	r7, r1
 8016bc4:	4620      	mov	r0, r4
 8016bc6:	4629      	mov	r1, r5
 8016bc8:	f7e9 fcee 	bl	80005a8 <__aeabi_dmul>
 8016bcc:	4b57      	ldr	r3, [pc, #348]	; (8016d2c <__ieee754_pow+0x3f4>)
 8016bce:	4682      	mov	sl, r0
 8016bd0:	468b      	mov	fp, r1
 8016bd2:	2200      	movs	r2, #0
 8016bd4:	4620      	mov	r0, r4
 8016bd6:	4629      	mov	r1, r5
 8016bd8:	f7e9 fce6 	bl	80005a8 <__aeabi_dmul>
 8016bdc:	4602      	mov	r2, r0
 8016bde:	460b      	mov	r3, r1
 8016be0:	a14b      	add	r1, pc, #300	; (adr r1, 8016d10 <__ieee754_pow+0x3d8>)
 8016be2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016be6:	f7e9 fb27 	bl	8000238 <__aeabi_dsub>
 8016bea:	4622      	mov	r2, r4
 8016bec:	462b      	mov	r3, r5
 8016bee:	f7e9 fcdb 	bl	80005a8 <__aeabi_dmul>
 8016bf2:	4602      	mov	r2, r0
 8016bf4:	460b      	mov	r3, r1
 8016bf6:	2000      	movs	r0, #0
 8016bf8:	494d      	ldr	r1, [pc, #308]	; (8016d30 <__ieee754_pow+0x3f8>)
 8016bfa:	f7e9 fb1d 	bl	8000238 <__aeabi_dsub>
 8016bfe:	4622      	mov	r2, r4
 8016c00:	4680      	mov	r8, r0
 8016c02:	4689      	mov	r9, r1
 8016c04:	462b      	mov	r3, r5
 8016c06:	4620      	mov	r0, r4
 8016c08:	4629      	mov	r1, r5
 8016c0a:	f7e9 fccd 	bl	80005a8 <__aeabi_dmul>
 8016c0e:	4602      	mov	r2, r0
 8016c10:	460b      	mov	r3, r1
 8016c12:	4640      	mov	r0, r8
 8016c14:	4649      	mov	r1, r9
 8016c16:	f7e9 fcc7 	bl	80005a8 <__aeabi_dmul>
 8016c1a:	a33f      	add	r3, pc, #252	; (adr r3, 8016d18 <__ieee754_pow+0x3e0>)
 8016c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c20:	f7e9 fcc2 	bl	80005a8 <__aeabi_dmul>
 8016c24:	4602      	mov	r2, r0
 8016c26:	460b      	mov	r3, r1
 8016c28:	4650      	mov	r0, sl
 8016c2a:	4659      	mov	r1, fp
 8016c2c:	f7e9 fb04 	bl	8000238 <__aeabi_dsub>
 8016c30:	4602      	mov	r2, r0
 8016c32:	460b      	mov	r3, r1
 8016c34:	4680      	mov	r8, r0
 8016c36:	4689      	mov	r9, r1
 8016c38:	4630      	mov	r0, r6
 8016c3a:	4639      	mov	r1, r7
 8016c3c:	f7e9 fafe 	bl	800023c <__adddf3>
 8016c40:	2000      	movs	r0, #0
 8016c42:	4632      	mov	r2, r6
 8016c44:	463b      	mov	r3, r7
 8016c46:	4604      	mov	r4, r0
 8016c48:	460d      	mov	r5, r1
 8016c4a:	f7e9 faf5 	bl	8000238 <__aeabi_dsub>
 8016c4e:	4602      	mov	r2, r0
 8016c50:	460b      	mov	r3, r1
 8016c52:	4640      	mov	r0, r8
 8016c54:	4649      	mov	r1, r9
 8016c56:	f7e9 faef 	bl	8000238 <__aeabi_dsub>
 8016c5a:	9b04      	ldr	r3, [sp, #16]
 8016c5c:	9a06      	ldr	r2, [sp, #24]
 8016c5e:	3b01      	subs	r3, #1
 8016c60:	4313      	orrs	r3, r2
 8016c62:	4682      	mov	sl, r0
 8016c64:	468b      	mov	fp, r1
 8016c66:	f040 81e7 	bne.w	8017038 <__ieee754_pow+0x700>
 8016c6a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8016d20 <__ieee754_pow+0x3e8>
 8016c6e:	eeb0 8a47 	vmov.f32	s16, s14
 8016c72:	eef0 8a67 	vmov.f32	s17, s15
 8016c76:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016c7a:	2600      	movs	r6, #0
 8016c7c:	4632      	mov	r2, r6
 8016c7e:	463b      	mov	r3, r7
 8016c80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016c84:	f7e9 fad8 	bl	8000238 <__aeabi_dsub>
 8016c88:	4622      	mov	r2, r4
 8016c8a:	462b      	mov	r3, r5
 8016c8c:	f7e9 fc8c 	bl	80005a8 <__aeabi_dmul>
 8016c90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016c94:	4680      	mov	r8, r0
 8016c96:	4689      	mov	r9, r1
 8016c98:	4650      	mov	r0, sl
 8016c9a:	4659      	mov	r1, fp
 8016c9c:	f7e9 fc84 	bl	80005a8 <__aeabi_dmul>
 8016ca0:	4602      	mov	r2, r0
 8016ca2:	460b      	mov	r3, r1
 8016ca4:	4640      	mov	r0, r8
 8016ca6:	4649      	mov	r1, r9
 8016ca8:	f7e9 fac8 	bl	800023c <__adddf3>
 8016cac:	4632      	mov	r2, r6
 8016cae:	463b      	mov	r3, r7
 8016cb0:	4680      	mov	r8, r0
 8016cb2:	4689      	mov	r9, r1
 8016cb4:	4620      	mov	r0, r4
 8016cb6:	4629      	mov	r1, r5
 8016cb8:	f7e9 fc76 	bl	80005a8 <__aeabi_dmul>
 8016cbc:	460b      	mov	r3, r1
 8016cbe:	4604      	mov	r4, r0
 8016cc0:	460d      	mov	r5, r1
 8016cc2:	4602      	mov	r2, r0
 8016cc4:	4649      	mov	r1, r9
 8016cc6:	4640      	mov	r0, r8
 8016cc8:	f7e9 fab8 	bl	800023c <__adddf3>
 8016ccc:	4b19      	ldr	r3, [pc, #100]	; (8016d34 <__ieee754_pow+0x3fc>)
 8016cce:	4299      	cmp	r1, r3
 8016cd0:	ec45 4b19 	vmov	d9, r4, r5
 8016cd4:	4606      	mov	r6, r0
 8016cd6:	460f      	mov	r7, r1
 8016cd8:	468b      	mov	fp, r1
 8016cda:	f340 82f0 	ble.w	80172be <__ieee754_pow+0x986>
 8016cde:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8016ce2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8016ce6:	4303      	orrs	r3, r0
 8016ce8:	f000 81e4 	beq.w	80170b4 <__ieee754_pow+0x77c>
 8016cec:	ec51 0b18 	vmov	r0, r1, d8
 8016cf0:	2200      	movs	r2, #0
 8016cf2:	2300      	movs	r3, #0
 8016cf4:	f7e9 feca 	bl	8000a8c <__aeabi_dcmplt>
 8016cf8:	3800      	subs	r0, #0
 8016cfa:	bf18      	it	ne
 8016cfc:	2001      	movne	r0, #1
 8016cfe:	e72b      	b.n	8016b58 <__ieee754_pow+0x220>
 8016d00:	60000000 	.word	0x60000000
 8016d04:	3ff71547 	.word	0x3ff71547
 8016d08:	f85ddf44 	.word	0xf85ddf44
 8016d0c:	3e54ae0b 	.word	0x3e54ae0b
 8016d10:	55555555 	.word	0x55555555
 8016d14:	3fd55555 	.word	0x3fd55555
 8016d18:	652b82fe 	.word	0x652b82fe
 8016d1c:	3ff71547 	.word	0x3ff71547
 8016d20:	00000000 	.word	0x00000000
 8016d24:	bff00000 	.word	0xbff00000
 8016d28:	3ff00000 	.word	0x3ff00000
 8016d2c:	3fd00000 	.word	0x3fd00000
 8016d30:	3fe00000 	.word	0x3fe00000
 8016d34:	408fffff 	.word	0x408fffff
 8016d38:	4bd5      	ldr	r3, [pc, #852]	; (8017090 <__ieee754_pow+0x758>)
 8016d3a:	402b      	ands	r3, r5
 8016d3c:	2200      	movs	r2, #0
 8016d3e:	b92b      	cbnz	r3, 8016d4c <__ieee754_pow+0x414>
 8016d40:	4bd4      	ldr	r3, [pc, #848]	; (8017094 <__ieee754_pow+0x75c>)
 8016d42:	f7e9 fc31 	bl	80005a8 <__aeabi_dmul>
 8016d46:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8016d4a:	460c      	mov	r4, r1
 8016d4c:	1523      	asrs	r3, r4, #20
 8016d4e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016d52:	4413      	add	r3, r2
 8016d54:	9305      	str	r3, [sp, #20]
 8016d56:	4bd0      	ldr	r3, [pc, #832]	; (8017098 <__ieee754_pow+0x760>)
 8016d58:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016d5c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8016d60:	429c      	cmp	r4, r3
 8016d62:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016d66:	dd08      	ble.n	8016d7a <__ieee754_pow+0x442>
 8016d68:	4bcc      	ldr	r3, [pc, #816]	; (801709c <__ieee754_pow+0x764>)
 8016d6a:	429c      	cmp	r4, r3
 8016d6c:	f340 8162 	ble.w	8017034 <__ieee754_pow+0x6fc>
 8016d70:	9b05      	ldr	r3, [sp, #20]
 8016d72:	3301      	adds	r3, #1
 8016d74:	9305      	str	r3, [sp, #20]
 8016d76:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8016d7a:	2400      	movs	r4, #0
 8016d7c:	00e3      	lsls	r3, r4, #3
 8016d7e:	9307      	str	r3, [sp, #28]
 8016d80:	4bc7      	ldr	r3, [pc, #796]	; (80170a0 <__ieee754_pow+0x768>)
 8016d82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016d86:	ed93 7b00 	vldr	d7, [r3]
 8016d8a:	4629      	mov	r1, r5
 8016d8c:	ec53 2b17 	vmov	r2, r3, d7
 8016d90:	eeb0 9a47 	vmov.f32	s18, s14
 8016d94:	eef0 9a67 	vmov.f32	s19, s15
 8016d98:	4682      	mov	sl, r0
 8016d9a:	f7e9 fa4d 	bl	8000238 <__aeabi_dsub>
 8016d9e:	4652      	mov	r2, sl
 8016da0:	4606      	mov	r6, r0
 8016da2:	460f      	mov	r7, r1
 8016da4:	462b      	mov	r3, r5
 8016da6:	ec51 0b19 	vmov	r0, r1, d9
 8016daa:	f7e9 fa47 	bl	800023c <__adddf3>
 8016dae:	4602      	mov	r2, r0
 8016db0:	460b      	mov	r3, r1
 8016db2:	2000      	movs	r0, #0
 8016db4:	49bb      	ldr	r1, [pc, #748]	; (80170a4 <__ieee754_pow+0x76c>)
 8016db6:	f7e9 fd21 	bl	80007fc <__aeabi_ddiv>
 8016dba:	ec41 0b1a 	vmov	d10, r0, r1
 8016dbe:	4602      	mov	r2, r0
 8016dc0:	460b      	mov	r3, r1
 8016dc2:	4630      	mov	r0, r6
 8016dc4:	4639      	mov	r1, r7
 8016dc6:	f7e9 fbef 	bl	80005a8 <__aeabi_dmul>
 8016dca:	2300      	movs	r3, #0
 8016dcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016dd0:	9302      	str	r3, [sp, #8]
 8016dd2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016dd6:	46ab      	mov	fp, r5
 8016dd8:	106d      	asrs	r5, r5, #1
 8016dda:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8016dde:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8016de2:	ec41 0b18 	vmov	d8, r0, r1
 8016de6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8016dea:	2200      	movs	r2, #0
 8016dec:	4640      	mov	r0, r8
 8016dee:	4649      	mov	r1, r9
 8016df0:	4614      	mov	r4, r2
 8016df2:	461d      	mov	r5, r3
 8016df4:	f7e9 fbd8 	bl	80005a8 <__aeabi_dmul>
 8016df8:	4602      	mov	r2, r0
 8016dfa:	460b      	mov	r3, r1
 8016dfc:	4630      	mov	r0, r6
 8016dfe:	4639      	mov	r1, r7
 8016e00:	f7e9 fa1a 	bl	8000238 <__aeabi_dsub>
 8016e04:	ec53 2b19 	vmov	r2, r3, d9
 8016e08:	4606      	mov	r6, r0
 8016e0a:	460f      	mov	r7, r1
 8016e0c:	4620      	mov	r0, r4
 8016e0e:	4629      	mov	r1, r5
 8016e10:	f7e9 fa12 	bl	8000238 <__aeabi_dsub>
 8016e14:	4602      	mov	r2, r0
 8016e16:	460b      	mov	r3, r1
 8016e18:	4650      	mov	r0, sl
 8016e1a:	4659      	mov	r1, fp
 8016e1c:	f7e9 fa0c 	bl	8000238 <__aeabi_dsub>
 8016e20:	4642      	mov	r2, r8
 8016e22:	464b      	mov	r3, r9
 8016e24:	f7e9 fbc0 	bl	80005a8 <__aeabi_dmul>
 8016e28:	4602      	mov	r2, r0
 8016e2a:	460b      	mov	r3, r1
 8016e2c:	4630      	mov	r0, r6
 8016e2e:	4639      	mov	r1, r7
 8016e30:	f7e9 fa02 	bl	8000238 <__aeabi_dsub>
 8016e34:	ec53 2b1a 	vmov	r2, r3, d10
 8016e38:	f7e9 fbb6 	bl	80005a8 <__aeabi_dmul>
 8016e3c:	ec53 2b18 	vmov	r2, r3, d8
 8016e40:	ec41 0b19 	vmov	d9, r0, r1
 8016e44:	ec51 0b18 	vmov	r0, r1, d8
 8016e48:	f7e9 fbae 	bl	80005a8 <__aeabi_dmul>
 8016e4c:	a37c      	add	r3, pc, #496	; (adr r3, 8017040 <__ieee754_pow+0x708>)
 8016e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e52:	4604      	mov	r4, r0
 8016e54:	460d      	mov	r5, r1
 8016e56:	f7e9 fba7 	bl	80005a8 <__aeabi_dmul>
 8016e5a:	a37b      	add	r3, pc, #492	; (adr r3, 8017048 <__ieee754_pow+0x710>)
 8016e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e60:	f7e9 f9ec 	bl	800023c <__adddf3>
 8016e64:	4622      	mov	r2, r4
 8016e66:	462b      	mov	r3, r5
 8016e68:	f7e9 fb9e 	bl	80005a8 <__aeabi_dmul>
 8016e6c:	a378      	add	r3, pc, #480	; (adr r3, 8017050 <__ieee754_pow+0x718>)
 8016e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e72:	f7e9 f9e3 	bl	800023c <__adddf3>
 8016e76:	4622      	mov	r2, r4
 8016e78:	462b      	mov	r3, r5
 8016e7a:	f7e9 fb95 	bl	80005a8 <__aeabi_dmul>
 8016e7e:	a376      	add	r3, pc, #472	; (adr r3, 8017058 <__ieee754_pow+0x720>)
 8016e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e84:	f7e9 f9da 	bl	800023c <__adddf3>
 8016e88:	4622      	mov	r2, r4
 8016e8a:	462b      	mov	r3, r5
 8016e8c:	f7e9 fb8c 	bl	80005a8 <__aeabi_dmul>
 8016e90:	a373      	add	r3, pc, #460	; (adr r3, 8017060 <__ieee754_pow+0x728>)
 8016e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e96:	f7e9 f9d1 	bl	800023c <__adddf3>
 8016e9a:	4622      	mov	r2, r4
 8016e9c:	462b      	mov	r3, r5
 8016e9e:	f7e9 fb83 	bl	80005a8 <__aeabi_dmul>
 8016ea2:	a371      	add	r3, pc, #452	; (adr r3, 8017068 <__ieee754_pow+0x730>)
 8016ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ea8:	f7e9 f9c8 	bl	800023c <__adddf3>
 8016eac:	4622      	mov	r2, r4
 8016eae:	4606      	mov	r6, r0
 8016eb0:	460f      	mov	r7, r1
 8016eb2:	462b      	mov	r3, r5
 8016eb4:	4620      	mov	r0, r4
 8016eb6:	4629      	mov	r1, r5
 8016eb8:	f7e9 fb76 	bl	80005a8 <__aeabi_dmul>
 8016ebc:	4602      	mov	r2, r0
 8016ebe:	460b      	mov	r3, r1
 8016ec0:	4630      	mov	r0, r6
 8016ec2:	4639      	mov	r1, r7
 8016ec4:	f7e9 fb70 	bl	80005a8 <__aeabi_dmul>
 8016ec8:	4642      	mov	r2, r8
 8016eca:	4604      	mov	r4, r0
 8016ecc:	460d      	mov	r5, r1
 8016ece:	464b      	mov	r3, r9
 8016ed0:	ec51 0b18 	vmov	r0, r1, d8
 8016ed4:	f7e9 f9b2 	bl	800023c <__adddf3>
 8016ed8:	ec53 2b19 	vmov	r2, r3, d9
 8016edc:	f7e9 fb64 	bl	80005a8 <__aeabi_dmul>
 8016ee0:	4622      	mov	r2, r4
 8016ee2:	462b      	mov	r3, r5
 8016ee4:	f7e9 f9aa 	bl	800023c <__adddf3>
 8016ee8:	4642      	mov	r2, r8
 8016eea:	4682      	mov	sl, r0
 8016eec:	468b      	mov	fp, r1
 8016eee:	464b      	mov	r3, r9
 8016ef0:	4640      	mov	r0, r8
 8016ef2:	4649      	mov	r1, r9
 8016ef4:	f7e9 fb58 	bl	80005a8 <__aeabi_dmul>
 8016ef8:	4b6b      	ldr	r3, [pc, #428]	; (80170a8 <__ieee754_pow+0x770>)
 8016efa:	2200      	movs	r2, #0
 8016efc:	4606      	mov	r6, r0
 8016efe:	460f      	mov	r7, r1
 8016f00:	f7e9 f99c 	bl	800023c <__adddf3>
 8016f04:	4652      	mov	r2, sl
 8016f06:	465b      	mov	r3, fp
 8016f08:	f7e9 f998 	bl	800023c <__adddf3>
 8016f0c:	2000      	movs	r0, #0
 8016f0e:	4604      	mov	r4, r0
 8016f10:	460d      	mov	r5, r1
 8016f12:	4602      	mov	r2, r0
 8016f14:	460b      	mov	r3, r1
 8016f16:	4640      	mov	r0, r8
 8016f18:	4649      	mov	r1, r9
 8016f1a:	f7e9 fb45 	bl	80005a8 <__aeabi_dmul>
 8016f1e:	4b62      	ldr	r3, [pc, #392]	; (80170a8 <__ieee754_pow+0x770>)
 8016f20:	4680      	mov	r8, r0
 8016f22:	4689      	mov	r9, r1
 8016f24:	2200      	movs	r2, #0
 8016f26:	4620      	mov	r0, r4
 8016f28:	4629      	mov	r1, r5
 8016f2a:	f7e9 f985 	bl	8000238 <__aeabi_dsub>
 8016f2e:	4632      	mov	r2, r6
 8016f30:	463b      	mov	r3, r7
 8016f32:	f7e9 f981 	bl	8000238 <__aeabi_dsub>
 8016f36:	4602      	mov	r2, r0
 8016f38:	460b      	mov	r3, r1
 8016f3a:	4650      	mov	r0, sl
 8016f3c:	4659      	mov	r1, fp
 8016f3e:	f7e9 f97b 	bl	8000238 <__aeabi_dsub>
 8016f42:	ec53 2b18 	vmov	r2, r3, d8
 8016f46:	f7e9 fb2f 	bl	80005a8 <__aeabi_dmul>
 8016f4a:	4622      	mov	r2, r4
 8016f4c:	4606      	mov	r6, r0
 8016f4e:	460f      	mov	r7, r1
 8016f50:	462b      	mov	r3, r5
 8016f52:	ec51 0b19 	vmov	r0, r1, d9
 8016f56:	f7e9 fb27 	bl	80005a8 <__aeabi_dmul>
 8016f5a:	4602      	mov	r2, r0
 8016f5c:	460b      	mov	r3, r1
 8016f5e:	4630      	mov	r0, r6
 8016f60:	4639      	mov	r1, r7
 8016f62:	f7e9 f96b 	bl	800023c <__adddf3>
 8016f66:	4606      	mov	r6, r0
 8016f68:	460f      	mov	r7, r1
 8016f6a:	4602      	mov	r2, r0
 8016f6c:	460b      	mov	r3, r1
 8016f6e:	4640      	mov	r0, r8
 8016f70:	4649      	mov	r1, r9
 8016f72:	f7e9 f963 	bl	800023c <__adddf3>
 8016f76:	a33e      	add	r3, pc, #248	; (adr r3, 8017070 <__ieee754_pow+0x738>)
 8016f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f7c:	2000      	movs	r0, #0
 8016f7e:	4604      	mov	r4, r0
 8016f80:	460d      	mov	r5, r1
 8016f82:	f7e9 fb11 	bl	80005a8 <__aeabi_dmul>
 8016f86:	4642      	mov	r2, r8
 8016f88:	ec41 0b18 	vmov	d8, r0, r1
 8016f8c:	464b      	mov	r3, r9
 8016f8e:	4620      	mov	r0, r4
 8016f90:	4629      	mov	r1, r5
 8016f92:	f7e9 f951 	bl	8000238 <__aeabi_dsub>
 8016f96:	4602      	mov	r2, r0
 8016f98:	460b      	mov	r3, r1
 8016f9a:	4630      	mov	r0, r6
 8016f9c:	4639      	mov	r1, r7
 8016f9e:	f7e9 f94b 	bl	8000238 <__aeabi_dsub>
 8016fa2:	a335      	add	r3, pc, #212	; (adr r3, 8017078 <__ieee754_pow+0x740>)
 8016fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fa8:	f7e9 fafe 	bl	80005a8 <__aeabi_dmul>
 8016fac:	a334      	add	r3, pc, #208	; (adr r3, 8017080 <__ieee754_pow+0x748>)
 8016fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fb2:	4606      	mov	r6, r0
 8016fb4:	460f      	mov	r7, r1
 8016fb6:	4620      	mov	r0, r4
 8016fb8:	4629      	mov	r1, r5
 8016fba:	f7e9 faf5 	bl	80005a8 <__aeabi_dmul>
 8016fbe:	4602      	mov	r2, r0
 8016fc0:	460b      	mov	r3, r1
 8016fc2:	4630      	mov	r0, r6
 8016fc4:	4639      	mov	r1, r7
 8016fc6:	f7e9 f939 	bl	800023c <__adddf3>
 8016fca:	9a07      	ldr	r2, [sp, #28]
 8016fcc:	4b37      	ldr	r3, [pc, #220]	; (80170ac <__ieee754_pow+0x774>)
 8016fce:	4413      	add	r3, r2
 8016fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fd4:	f7e9 f932 	bl	800023c <__adddf3>
 8016fd8:	4682      	mov	sl, r0
 8016fda:	9805      	ldr	r0, [sp, #20]
 8016fdc:	468b      	mov	fp, r1
 8016fde:	f7e9 fa79 	bl	80004d4 <__aeabi_i2d>
 8016fe2:	9a07      	ldr	r2, [sp, #28]
 8016fe4:	4b32      	ldr	r3, [pc, #200]	; (80170b0 <__ieee754_pow+0x778>)
 8016fe6:	4413      	add	r3, r2
 8016fe8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016fec:	4606      	mov	r6, r0
 8016fee:	460f      	mov	r7, r1
 8016ff0:	4652      	mov	r2, sl
 8016ff2:	465b      	mov	r3, fp
 8016ff4:	ec51 0b18 	vmov	r0, r1, d8
 8016ff8:	f7e9 f920 	bl	800023c <__adddf3>
 8016ffc:	4642      	mov	r2, r8
 8016ffe:	464b      	mov	r3, r9
 8017000:	f7e9 f91c 	bl	800023c <__adddf3>
 8017004:	4632      	mov	r2, r6
 8017006:	463b      	mov	r3, r7
 8017008:	f7e9 f918 	bl	800023c <__adddf3>
 801700c:	2000      	movs	r0, #0
 801700e:	4632      	mov	r2, r6
 8017010:	463b      	mov	r3, r7
 8017012:	4604      	mov	r4, r0
 8017014:	460d      	mov	r5, r1
 8017016:	f7e9 f90f 	bl	8000238 <__aeabi_dsub>
 801701a:	4642      	mov	r2, r8
 801701c:	464b      	mov	r3, r9
 801701e:	f7e9 f90b 	bl	8000238 <__aeabi_dsub>
 8017022:	ec53 2b18 	vmov	r2, r3, d8
 8017026:	f7e9 f907 	bl	8000238 <__aeabi_dsub>
 801702a:	4602      	mov	r2, r0
 801702c:	460b      	mov	r3, r1
 801702e:	4650      	mov	r0, sl
 8017030:	4659      	mov	r1, fp
 8017032:	e610      	b.n	8016c56 <__ieee754_pow+0x31e>
 8017034:	2401      	movs	r4, #1
 8017036:	e6a1      	b.n	8016d7c <__ieee754_pow+0x444>
 8017038:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8017088 <__ieee754_pow+0x750>
 801703c:	e617      	b.n	8016c6e <__ieee754_pow+0x336>
 801703e:	bf00      	nop
 8017040:	4a454eef 	.word	0x4a454eef
 8017044:	3fca7e28 	.word	0x3fca7e28
 8017048:	93c9db65 	.word	0x93c9db65
 801704c:	3fcd864a 	.word	0x3fcd864a
 8017050:	a91d4101 	.word	0xa91d4101
 8017054:	3fd17460 	.word	0x3fd17460
 8017058:	518f264d 	.word	0x518f264d
 801705c:	3fd55555 	.word	0x3fd55555
 8017060:	db6fabff 	.word	0xdb6fabff
 8017064:	3fdb6db6 	.word	0x3fdb6db6
 8017068:	33333303 	.word	0x33333303
 801706c:	3fe33333 	.word	0x3fe33333
 8017070:	e0000000 	.word	0xe0000000
 8017074:	3feec709 	.word	0x3feec709
 8017078:	dc3a03fd 	.word	0xdc3a03fd
 801707c:	3feec709 	.word	0x3feec709
 8017080:	145b01f5 	.word	0x145b01f5
 8017084:	be3e2fe0 	.word	0xbe3e2fe0
 8017088:	00000000 	.word	0x00000000
 801708c:	3ff00000 	.word	0x3ff00000
 8017090:	7ff00000 	.word	0x7ff00000
 8017094:	43400000 	.word	0x43400000
 8017098:	0003988e 	.word	0x0003988e
 801709c:	000bb679 	.word	0x000bb679
 80170a0:	08018900 	.word	0x08018900
 80170a4:	3ff00000 	.word	0x3ff00000
 80170a8:	40080000 	.word	0x40080000
 80170ac:	08018920 	.word	0x08018920
 80170b0:	08018910 	.word	0x08018910
 80170b4:	a3b3      	add	r3, pc, #716	; (adr r3, 8017384 <__ieee754_pow+0xa4c>)
 80170b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170ba:	4640      	mov	r0, r8
 80170bc:	4649      	mov	r1, r9
 80170be:	f7e9 f8bd 	bl	800023c <__adddf3>
 80170c2:	4622      	mov	r2, r4
 80170c4:	ec41 0b1a 	vmov	d10, r0, r1
 80170c8:	462b      	mov	r3, r5
 80170ca:	4630      	mov	r0, r6
 80170cc:	4639      	mov	r1, r7
 80170ce:	f7e9 f8b3 	bl	8000238 <__aeabi_dsub>
 80170d2:	4602      	mov	r2, r0
 80170d4:	460b      	mov	r3, r1
 80170d6:	ec51 0b1a 	vmov	r0, r1, d10
 80170da:	f7e9 fcf5 	bl	8000ac8 <__aeabi_dcmpgt>
 80170de:	2800      	cmp	r0, #0
 80170e0:	f47f ae04 	bne.w	8016cec <__ieee754_pow+0x3b4>
 80170e4:	4aa2      	ldr	r2, [pc, #648]	; (8017370 <__ieee754_pow+0xa38>)
 80170e6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80170ea:	4293      	cmp	r3, r2
 80170ec:	f340 8107 	ble.w	80172fe <__ieee754_pow+0x9c6>
 80170f0:	151b      	asrs	r3, r3, #20
 80170f2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80170f6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80170fa:	fa4a fa03 	asr.w	sl, sl, r3
 80170fe:	44da      	add	sl, fp
 8017100:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8017104:	489b      	ldr	r0, [pc, #620]	; (8017374 <__ieee754_pow+0xa3c>)
 8017106:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801710a:	4108      	asrs	r0, r1
 801710c:	ea00 030a 	and.w	r3, r0, sl
 8017110:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8017114:	f1c1 0114 	rsb	r1, r1, #20
 8017118:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801711c:	fa4a fa01 	asr.w	sl, sl, r1
 8017120:	f1bb 0f00 	cmp.w	fp, #0
 8017124:	f04f 0200 	mov.w	r2, #0
 8017128:	4620      	mov	r0, r4
 801712a:	4629      	mov	r1, r5
 801712c:	bfb8      	it	lt
 801712e:	f1ca 0a00 	rsblt	sl, sl, #0
 8017132:	f7e9 f881 	bl	8000238 <__aeabi_dsub>
 8017136:	ec41 0b19 	vmov	d9, r0, r1
 801713a:	4642      	mov	r2, r8
 801713c:	464b      	mov	r3, r9
 801713e:	ec51 0b19 	vmov	r0, r1, d9
 8017142:	f7e9 f87b 	bl	800023c <__adddf3>
 8017146:	a37a      	add	r3, pc, #488	; (adr r3, 8017330 <__ieee754_pow+0x9f8>)
 8017148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801714c:	2000      	movs	r0, #0
 801714e:	4604      	mov	r4, r0
 8017150:	460d      	mov	r5, r1
 8017152:	f7e9 fa29 	bl	80005a8 <__aeabi_dmul>
 8017156:	ec53 2b19 	vmov	r2, r3, d9
 801715a:	4606      	mov	r6, r0
 801715c:	460f      	mov	r7, r1
 801715e:	4620      	mov	r0, r4
 8017160:	4629      	mov	r1, r5
 8017162:	f7e9 f869 	bl	8000238 <__aeabi_dsub>
 8017166:	4602      	mov	r2, r0
 8017168:	460b      	mov	r3, r1
 801716a:	4640      	mov	r0, r8
 801716c:	4649      	mov	r1, r9
 801716e:	f7e9 f863 	bl	8000238 <__aeabi_dsub>
 8017172:	a371      	add	r3, pc, #452	; (adr r3, 8017338 <__ieee754_pow+0xa00>)
 8017174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017178:	f7e9 fa16 	bl	80005a8 <__aeabi_dmul>
 801717c:	a370      	add	r3, pc, #448	; (adr r3, 8017340 <__ieee754_pow+0xa08>)
 801717e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017182:	4680      	mov	r8, r0
 8017184:	4689      	mov	r9, r1
 8017186:	4620      	mov	r0, r4
 8017188:	4629      	mov	r1, r5
 801718a:	f7e9 fa0d 	bl	80005a8 <__aeabi_dmul>
 801718e:	4602      	mov	r2, r0
 8017190:	460b      	mov	r3, r1
 8017192:	4640      	mov	r0, r8
 8017194:	4649      	mov	r1, r9
 8017196:	f7e9 f851 	bl	800023c <__adddf3>
 801719a:	4604      	mov	r4, r0
 801719c:	460d      	mov	r5, r1
 801719e:	4602      	mov	r2, r0
 80171a0:	460b      	mov	r3, r1
 80171a2:	4630      	mov	r0, r6
 80171a4:	4639      	mov	r1, r7
 80171a6:	f7e9 f849 	bl	800023c <__adddf3>
 80171aa:	4632      	mov	r2, r6
 80171ac:	463b      	mov	r3, r7
 80171ae:	4680      	mov	r8, r0
 80171b0:	4689      	mov	r9, r1
 80171b2:	f7e9 f841 	bl	8000238 <__aeabi_dsub>
 80171b6:	4602      	mov	r2, r0
 80171b8:	460b      	mov	r3, r1
 80171ba:	4620      	mov	r0, r4
 80171bc:	4629      	mov	r1, r5
 80171be:	f7e9 f83b 	bl	8000238 <__aeabi_dsub>
 80171c2:	4642      	mov	r2, r8
 80171c4:	4606      	mov	r6, r0
 80171c6:	460f      	mov	r7, r1
 80171c8:	464b      	mov	r3, r9
 80171ca:	4640      	mov	r0, r8
 80171cc:	4649      	mov	r1, r9
 80171ce:	f7e9 f9eb 	bl	80005a8 <__aeabi_dmul>
 80171d2:	a35d      	add	r3, pc, #372	; (adr r3, 8017348 <__ieee754_pow+0xa10>)
 80171d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171d8:	4604      	mov	r4, r0
 80171da:	460d      	mov	r5, r1
 80171dc:	f7e9 f9e4 	bl	80005a8 <__aeabi_dmul>
 80171e0:	a35b      	add	r3, pc, #364	; (adr r3, 8017350 <__ieee754_pow+0xa18>)
 80171e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171e6:	f7e9 f827 	bl	8000238 <__aeabi_dsub>
 80171ea:	4622      	mov	r2, r4
 80171ec:	462b      	mov	r3, r5
 80171ee:	f7e9 f9db 	bl	80005a8 <__aeabi_dmul>
 80171f2:	a359      	add	r3, pc, #356	; (adr r3, 8017358 <__ieee754_pow+0xa20>)
 80171f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171f8:	f7e9 f820 	bl	800023c <__adddf3>
 80171fc:	4622      	mov	r2, r4
 80171fe:	462b      	mov	r3, r5
 8017200:	f7e9 f9d2 	bl	80005a8 <__aeabi_dmul>
 8017204:	a356      	add	r3, pc, #344	; (adr r3, 8017360 <__ieee754_pow+0xa28>)
 8017206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801720a:	f7e9 f815 	bl	8000238 <__aeabi_dsub>
 801720e:	4622      	mov	r2, r4
 8017210:	462b      	mov	r3, r5
 8017212:	f7e9 f9c9 	bl	80005a8 <__aeabi_dmul>
 8017216:	a354      	add	r3, pc, #336	; (adr r3, 8017368 <__ieee754_pow+0xa30>)
 8017218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801721c:	f7e9 f80e 	bl	800023c <__adddf3>
 8017220:	4622      	mov	r2, r4
 8017222:	462b      	mov	r3, r5
 8017224:	f7e9 f9c0 	bl	80005a8 <__aeabi_dmul>
 8017228:	4602      	mov	r2, r0
 801722a:	460b      	mov	r3, r1
 801722c:	4640      	mov	r0, r8
 801722e:	4649      	mov	r1, r9
 8017230:	f7e9 f802 	bl	8000238 <__aeabi_dsub>
 8017234:	4604      	mov	r4, r0
 8017236:	460d      	mov	r5, r1
 8017238:	4602      	mov	r2, r0
 801723a:	460b      	mov	r3, r1
 801723c:	4640      	mov	r0, r8
 801723e:	4649      	mov	r1, r9
 8017240:	f7e9 f9b2 	bl	80005a8 <__aeabi_dmul>
 8017244:	2200      	movs	r2, #0
 8017246:	ec41 0b19 	vmov	d9, r0, r1
 801724a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801724e:	4620      	mov	r0, r4
 8017250:	4629      	mov	r1, r5
 8017252:	f7e8 fff1 	bl	8000238 <__aeabi_dsub>
 8017256:	4602      	mov	r2, r0
 8017258:	460b      	mov	r3, r1
 801725a:	ec51 0b19 	vmov	r0, r1, d9
 801725e:	f7e9 facd 	bl	80007fc <__aeabi_ddiv>
 8017262:	4632      	mov	r2, r6
 8017264:	4604      	mov	r4, r0
 8017266:	460d      	mov	r5, r1
 8017268:	463b      	mov	r3, r7
 801726a:	4640      	mov	r0, r8
 801726c:	4649      	mov	r1, r9
 801726e:	f7e9 f99b 	bl	80005a8 <__aeabi_dmul>
 8017272:	4632      	mov	r2, r6
 8017274:	463b      	mov	r3, r7
 8017276:	f7e8 ffe1 	bl	800023c <__adddf3>
 801727a:	4602      	mov	r2, r0
 801727c:	460b      	mov	r3, r1
 801727e:	4620      	mov	r0, r4
 8017280:	4629      	mov	r1, r5
 8017282:	f7e8 ffd9 	bl	8000238 <__aeabi_dsub>
 8017286:	4642      	mov	r2, r8
 8017288:	464b      	mov	r3, r9
 801728a:	f7e8 ffd5 	bl	8000238 <__aeabi_dsub>
 801728e:	460b      	mov	r3, r1
 8017290:	4602      	mov	r2, r0
 8017292:	4939      	ldr	r1, [pc, #228]	; (8017378 <__ieee754_pow+0xa40>)
 8017294:	2000      	movs	r0, #0
 8017296:	f7e8 ffcf 	bl	8000238 <__aeabi_dsub>
 801729a:	ec41 0b10 	vmov	d0, r0, r1
 801729e:	ee10 3a90 	vmov	r3, s1
 80172a2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80172a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80172aa:	da2b      	bge.n	8017304 <__ieee754_pow+0x9cc>
 80172ac:	4650      	mov	r0, sl
 80172ae:	f000 f877 	bl	80173a0 <scalbn>
 80172b2:	ec51 0b10 	vmov	r0, r1, d0
 80172b6:	ec53 2b18 	vmov	r2, r3, d8
 80172ba:	f7ff bbee 	b.w	8016a9a <__ieee754_pow+0x162>
 80172be:	4b2f      	ldr	r3, [pc, #188]	; (801737c <__ieee754_pow+0xa44>)
 80172c0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80172c4:	429e      	cmp	r6, r3
 80172c6:	f77f af0d 	ble.w	80170e4 <__ieee754_pow+0x7ac>
 80172ca:	4b2d      	ldr	r3, [pc, #180]	; (8017380 <__ieee754_pow+0xa48>)
 80172cc:	440b      	add	r3, r1
 80172ce:	4303      	orrs	r3, r0
 80172d0:	d009      	beq.n	80172e6 <__ieee754_pow+0x9ae>
 80172d2:	ec51 0b18 	vmov	r0, r1, d8
 80172d6:	2200      	movs	r2, #0
 80172d8:	2300      	movs	r3, #0
 80172da:	f7e9 fbd7 	bl	8000a8c <__aeabi_dcmplt>
 80172de:	3800      	subs	r0, #0
 80172e0:	bf18      	it	ne
 80172e2:	2001      	movne	r0, #1
 80172e4:	e448      	b.n	8016b78 <__ieee754_pow+0x240>
 80172e6:	4622      	mov	r2, r4
 80172e8:	462b      	mov	r3, r5
 80172ea:	f7e8 ffa5 	bl	8000238 <__aeabi_dsub>
 80172ee:	4642      	mov	r2, r8
 80172f0:	464b      	mov	r3, r9
 80172f2:	f7e9 fbdf 	bl	8000ab4 <__aeabi_dcmpge>
 80172f6:	2800      	cmp	r0, #0
 80172f8:	f43f aef4 	beq.w	80170e4 <__ieee754_pow+0x7ac>
 80172fc:	e7e9      	b.n	80172d2 <__ieee754_pow+0x99a>
 80172fe:	f04f 0a00 	mov.w	sl, #0
 8017302:	e71a      	b.n	801713a <__ieee754_pow+0x802>
 8017304:	ec51 0b10 	vmov	r0, r1, d0
 8017308:	4619      	mov	r1, r3
 801730a:	e7d4      	b.n	80172b6 <__ieee754_pow+0x97e>
 801730c:	491a      	ldr	r1, [pc, #104]	; (8017378 <__ieee754_pow+0xa40>)
 801730e:	2000      	movs	r0, #0
 8017310:	f7ff bb31 	b.w	8016976 <__ieee754_pow+0x3e>
 8017314:	2000      	movs	r0, #0
 8017316:	2100      	movs	r1, #0
 8017318:	f7ff bb2d 	b.w	8016976 <__ieee754_pow+0x3e>
 801731c:	4630      	mov	r0, r6
 801731e:	4639      	mov	r1, r7
 8017320:	f7ff bb29 	b.w	8016976 <__ieee754_pow+0x3e>
 8017324:	9204      	str	r2, [sp, #16]
 8017326:	f7ff bb7b 	b.w	8016a20 <__ieee754_pow+0xe8>
 801732a:	2300      	movs	r3, #0
 801732c:	f7ff bb65 	b.w	80169fa <__ieee754_pow+0xc2>
 8017330:	00000000 	.word	0x00000000
 8017334:	3fe62e43 	.word	0x3fe62e43
 8017338:	fefa39ef 	.word	0xfefa39ef
 801733c:	3fe62e42 	.word	0x3fe62e42
 8017340:	0ca86c39 	.word	0x0ca86c39
 8017344:	be205c61 	.word	0xbe205c61
 8017348:	72bea4d0 	.word	0x72bea4d0
 801734c:	3e663769 	.word	0x3e663769
 8017350:	c5d26bf1 	.word	0xc5d26bf1
 8017354:	3ebbbd41 	.word	0x3ebbbd41
 8017358:	af25de2c 	.word	0xaf25de2c
 801735c:	3f11566a 	.word	0x3f11566a
 8017360:	16bebd93 	.word	0x16bebd93
 8017364:	3f66c16c 	.word	0x3f66c16c
 8017368:	5555553e 	.word	0x5555553e
 801736c:	3fc55555 	.word	0x3fc55555
 8017370:	3fe00000 	.word	0x3fe00000
 8017374:	fff00000 	.word	0xfff00000
 8017378:	3ff00000 	.word	0x3ff00000
 801737c:	4090cbff 	.word	0x4090cbff
 8017380:	3f6f3400 	.word	0x3f6f3400
 8017384:	652b82fe 	.word	0x652b82fe
 8017388:	3c971547 	.word	0x3c971547

0801738c <fabs>:
 801738c:	ec51 0b10 	vmov	r0, r1, d0
 8017390:	ee10 2a10 	vmov	r2, s0
 8017394:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017398:	ec43 2b10 	vmov	d0, r2, r3
 801739c:	4770      	bx	lr
	...

080173a0 <scalbn>:
 80173a0:	b570      	push	{r4, r5, r6, lr}
 80173a2:	ec55 4b10 	vmov	r4, r5, d0
 80173a6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80173aa:	4606      	mov	r6, r0
 80173ac:	462b      	mov	r3, r5
 80173ae:	b999      	cbnz	r1, 80173d8 <scalbn+0x38>
 80173b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80173b4:	4323      	orrs	r3, r4
 80173b6:	d03f      	beq.n	8017438 <scalbn+0x98>
 80173b8:	4b35      	ldr	r3, [pc, #212]	; (8017490 <scalbn+0xf0>)
 80173ba:	4629      	mov	r1, r5
 80173bc:	ee10 0a10 	vmov	r0, s0
 80173c0:	2200      	movs	r2, #0
 80173c2:	f7e9 f8f1 	bl	80005a8 <__aeabi_dmul>
 80173c6:	4b33      	ldr	r3, [pc, #204]	; (8017494 <scalbn+0xf4>)
 80173c8:	429e      	cmp	r6, r3
 80173ca:	4604      	mov	r4, r0
 80173cc:	460d      	mov	r5, r1
 80173ce:	da10      	bge.n	80173f2 <scalbn+0x52>
 80173d0:	a327      	add	r3, pc, #156	; (adr r3, 8017470 <scalbn+0xd0>)
 80173d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173d6:	e01f      	b.n	8017418 <scalbn+0x78>
 80173d8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80173dc:	4291      	cmp	r1, r2
 80173de:	d10c      	bne.n	80173fa <scalbn+0x5a>
 80173e0:	ee10 2a10 	vmov	r2, s0
 80173e4:	4620      	mov	r0, r4
 80173e6:	4629      	mov	r1, r5
 80173e8:	f7e8 ff28 	bl	800023c <__adddf3>
 80173ec:	4604      	mov	r4, r0
 80173ee:	460d      	mov	r5, r1
 80173f0:	e022      	b.n	8017438 <scalbn+0x98>
 80173f2:	460b      	mov	r3, r1
 80173f4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80173f8:	3936      	subs	r1, #54	; 0x36
 80173fa:	f24c 3250 	movw	r2, #50000	; 0xc350
 80173fe:	4296      	cmp	r6, r2
 8017400:	dd0d      	ble.n	801741e <scalbn+0x7e>
 8017402:	2d00      	cmp	r5, #0
 8017404:	a11c      	add	r1, pc, #112	; (adr r1, 8017478 <scalbn+0xd8>)
 8017406:	e9d1 0100 	ldrd	r0, r1, [r1]
 801740a:	da02      	bge.n	8017412 <scalbn+0x72>
 801740c:	a11c      	add	r1, pc, #112	; (adr r1, 8017480 <scalbn+0xe0>)
 801740e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017412:	a319      	add	r3, pc, #100	; (adr r3, 8017478 <scalbn+0xd8>)
 8017414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017418:	f7e9 f8c6 	bl	80005a8 <__aeabi_dmul>
 801741c:	e7e6      	b.n	80173ec <scalbn+0x4c>
 801741e:	1872      	adds	r2, r6, r1
 8017420:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8017424:	428a      	cmp	r2, r1
 8017426:	dcec      	bgt.n	8017402 <scalbn+0x62>
 8017428:	2a00      	cmp	r2, #0
 801742a:	dd08      	ble.n	801743e <scalbn+0x9e>
 801742c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017430:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017434:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017438:	ec45 4b10 	vmov	d0, r4, r5
 801743c:	bd70      	pop	{r4, r5, r6, pc}
 801743e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017442:	da08      	bge.n	8017456 <scalbn+0xb6>
 8017444:	2d00      	cmp	r5, #0
 8017446:	a10a      	add	r1, pc, #40	; (adr r1, 8017470 <scalbn+0xd0>)
 8017448:	e9d1 0100 	ldrd	r0, r1, [r1]
 801744c:	dac0      	bge.n	80173d0 <scalbn+0x30>
 801744e:	a10e      	add	r1, pc, #56	; (adr r1, 8017488 <scalbn+0xe8>)
 8017450:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017454:	e7bc      	b.n	80173d0 <scalbn+0x30>
 8017456:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801745a:	3236      	adds	r2, #54	; 0x36
 801745c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017460:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8017464:	4620      	mov	r0, r4
 8017466:	4b0c      	ldr	r3, [pc, #48]	; (8017498 <scalbn+0xf8>)
 8017468:	2200      	movs	r2, #0
 801746a:	e7d5      	b.n	8017418 <scalbn+0x78>
 801746c:	f3af 8000 	nop.w
 8017470:	c2f8f359 	.word	0xc2f8f359
 8017474:	01a56e1f 	.word	0x01a56e1f
 8017478:	8800759c 	.word	0x8800759c
 801747c:	7e37e43c 	.word	0x7e37e43c
 8017480:	8800759c 	.word	0x8800759c
 8017484:	fe37e43c 	.word	0xfe37e43c
 8017488:	c2f8f359 	.word	0xc2f8f359
 801748c:	81a56e1f 	.word	0x81a56e1f
 8017490:	43500000 	.word	0x43500000
 8017494:	ffff3cb0 	.word	0xffff3cb0
 8017498:	3c900000 	.word	0x3c900000

0801749c <with_errno>:
 801749c:	b570      	push	{r4, r5, r6, lr}
 801749e:	4604      	mov	r4, r0
 80174a0:	460d      	mov	r5, r1
 80174a2:	4616      	mov	r6, r2
 80174a4:	f7fd f924 	bl	80146f0 <__errno>
 80174a8:	4629      	mov	r1, r5
 80174aa:	6006      	str	r6, [r0, #0]
 80174ac:	4620      	mov	r0, r4
 80174ae:	bd70      	pop	{r4, r5, r6, pc}

080174b0 <xflow>:
 80174b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80174b2:	4614      	mov	r4, r2
 80174b4:	461d      	mov	r5, r3
 80174b6:	b108      	cbz	r0, 80174bc <xflow+0xc>
 80174b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80174bc:	e9cd 2300 	strd	r2, r3, [sp]
 80174c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80174c4:	4620      	mov	r0, r4
 80174c6:	4629      	mov	r1, r5
 80174c8:	f7e9 f86e 	bl	80005a8 <__aeabi_dmul>
 80174cc:	2222      	movs	r2, #34	; 0x22
 80174ce:	b003      	add	sp, #12
 80174d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80174d4:	f7ff bfe2 	b.w	801749c <with_errno>

080174d8 <__math_uflow>:
 80174d8:	b508      	push	{r3, lr}
 80174da:	2200      	movs	r2, #0
 80174dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80174e0:	f7ff ffe6 	bl	80174b0 <xflow>
 80174e4:	ec41 0b10 	vmov	d0, r0, r1
 80174e8:	bd08      	pop	{r3, pc}

080174ea <__math_oflow>:
 80174ea:	b508      	push	{r3, lr}
 80174ec:	2200      	movs	r2, #0
 80174ee:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80174f2:	f7ff ffdd 	bl	80174b0 <xflow>
 80174f6:	ec41 0b10 	vmov	d0, r0, r1
 80174fa:	bd08      	pop	{r3, pc}

080174fc <__ieee754_sqrt>:
 80174fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017500:	ec55 4b10 	vmov	r4, r5, d0
 8017504:	4e67      	ldr	r6, [pc, #412]	; (80176a4 <__ieee754_sqrt+0x1a8>)
 8017506:	43ae      	bics	r6, r5
 8017508:	ee10 0a10 	vmov	r0, s0
 801750c:	ee10 2a10 	vmov	r2, s0
 8017510:	4629      	mov	r1, r5
 8017512:	462b      	mov	r3, r5
 8017514:	d10d      	bne.n	8017532 <__ieee754_sqrt+0x36>
 8017516:	f7e9 f847 	bl	80005a8 <__aeabi_dmul>
 801751a:	4602      	mov	r2, r0
 801751c:	460b      	mov	r3, r1
 801751e:	4620      	mov	r0, r4
 8017520:	4629      	mov	r1, r5
 8017522:	f7e8 fe8b 	bl	800023c <__adddf3>
 8017526:	4604      	mov	r4, r0
 8017528:	460d      	mov	r5, r1
 801752a:	ec45 4b10 	vmov	d0, r4, r5
 801752e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017532:	2d00      	cmp	r5, #0
 8017534:	dc0b      	bgt.n	801754e <__ieee754_sqrt+0x52>
 8017536:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801753a:	4326      	orrs	r6, r4
 801753c:	d0f5      	beq.n	801752a <__ieee754_sqrt+0x2e>
 801753e:	b135      	cbz	r5, 801754e <__ieee754_sqrt+0x52>
 8017540:	f7e8 fe7a 	bl	8000238 <__aeabi_dsub>
 8017544:	4602      	mov	r2, r0
 8017546:	460b      	mov	r3, r1
 8017548:	f7e9 f958 	bl	80007fc <__aeabi_ddiv>
 801754c:	e7eb      	b.n	8017526 <__ieee754_sqrt+0x2a>
 801754e:	1509      	asrs	r1, r1, #20
 8017550:	f000 808d 	beq.w	801766e <__ieee754_sqrt+0x172>
 8017554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017558:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801755c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017560:	07c9      	lsls	r1, r1, #31
 8017562:	bf5c      	itt	pl
 8017564:	005b      	lslpl	r3, r3, #1
 8017566:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801756a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801756e:	bf58      	it	pl
 8017570:	0052      	lslpl	r2, r2, #1
 8017572:	2500      	movs	r5, #0
 8017574:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8017578:	1076      	asrs	r6, r6, #1
 801757a:	0052      	lsls	r2, r2, #1
 801757c:	f04f 0e16 	mov.w	lr, #22
 8017580:	46ac      	mov	ip, r5
 8017582:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8017586:	eb0c 0001 	add.w	r0, ip, r1
 801758a:	4298      	cmp	r0, r3
 801758c:	bfde      	ittt	le
 801758e:	1a1b      	suble	r3, r3, r0
 8017590:	eb00 0c01 	addle.w	ip, r0, r1
 8017594:	186d      	addle	r5, r5, r1
 8017596:	005b      	lsls	r3, r3, #1
 8017598:	f1be 0e01 	subs.w	lr, lr, #1
 801759c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80175a0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80175a4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80175a8:	d1ed      	bne.n	8017586 <__ieee754_sqrt+0x8a>
 80175aa:	4674      	mov	r4, lr
 80175ac:	2720      	movs	r7, #32
 80175ae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80175b2:	4563      	cmp	r3, ip
 80175b4:	eb01 000e 	add.w	r0, r1, lr
 80175b8:	dc02      	bgt.n	80175c0 <__ieee754_sqrt+0xc4>
 80175ba:	d113      	bne.n	80175e4 <__ieee754_sqrt+0xe8>
 80175bc:	4290      	cmp	r0, r2
 80175be:	d811      	bhi.n	80175e4 <__ieee754_sqrt+0xe8>
 80175c0:	2800      	cmp	r0, #0
 80175c2:	eb00 0e01 	add.w	lr, r0, r1
 80175c6:	da57      	bge.n	8017678 <__ieee754_sqrt+0x17c>
 80175c8:	f1be 0f00 	cmp.w	lr, #0
 80175cc:	db54      	blt.n	8017678 <__ieee754_sqrt+0x17c>
 80175ce:	f10c 0801 	add.w	r8, ip, #1
 80175d2:	eba3 030c 	sub.w	r3, r3, ip
 80175d6:	4290      	cmp	r0, r2
 80175d8:	bf88      	it	hi
 80175da:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80175de:	1a12      	subs	r2, r2, r0
 80175e0:	440c      	add	r4, r1
 80175e2:	46c4      	mov	ip, r8
 80175e4:	005b      	lsls	r3, r3, #1
 80175e6:	3f01      	subs	r7, #1
 80175e8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80175ec:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80175f0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80175f4:	d1dd      	bne.n	80175b2 <__ieee754_sqrt+0xb6>
 80175f6:	4313      	orrs	r3, r2
 80175f8:	d01b      	beq.n	8017632 <__ieee754_sqrt+0x136>
 80175fa:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80176a8 <__ieee754_sqrt+0x1ac>
 80175fe:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80176ac <__ieee754_sqrt+0x1b0>
 8017602:	e9da 0100 	ldrd	r0, r1, [sl]
 8017606:	e9db 2300 	ldrd	r2, r3, [fp]
 801760a:	f7e8 fe15 	bl	8000238 <__aeabi_dsub>
 801760e:	e9da 8900 	ldrd	r8, r9, [sl]
 8017612:	4602      	mov	r2, r0
 8017614:	460b      	mov	r3, r1
 8017616:	4640      	mov	r0, r8
 8017618:	4649      	mov	r1, r9
 801761a:	f7e9 fa41 	bl	8000aa0 <__aeabi_dcmple>
 801761e:	b140      	cbz	r0, 8017632 <__ieee754_sqrt+0x136>
 8017620:	f1b4 3fff 	cmp.w	r4, #4294967295
 8017624:	e9da 0100 	ldrd	r0, r1, [sl]
 8017628:	e9db 2300 	ldrd	r2, r3, [fp]
 801762c:	d126      	bne.n	801767c <__ieee754_sqrt+0x180>
 801762e:	3501      	adds	r5, #1
 8017630:	463c      	mov	r4, r7
 8017632:	106a      	asrs	r2, r5, #1
 8017634:	0863      	lsrs	r3, r4, #1
 8017636:	07e9      	lsls	r1, r5, #31
 8017638:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801763c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8017640:	bf48      	it	mi
 8017642:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8017646:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801764a:	461c      	mov	r4, r3
 801764c:	e76d      	b.n	801752a <__ieee754_sqrt+0x2e>
 801764e:	0ad3      	lsrs	r3, r2, #11
 8017650:	3815      	subs	r0, #21
 8017652:	0552      	lsls	r2, r2, #21
 8017654:	2b00      	cmp	r3, #0
 8017656:	d0fa      	beq.n	801764e <__ieee754_sqrt+0x152>
 8017658:	02dc      	lsls	r4, r3, #11
 801765a:	d50a      	bpl.n	8017672 <__ieee754_sqrt+0x176>
 801765c:	f1c1 0420 	rsb	r4, r1, #32
 8017660:	fa22 f404 	lsr.w	r4, r2, r4
 8017664:	1e4d      	subs	r5, r1, #1
 8017666:	408a      	lsls	r2, r1
 8017668:	4323      	orrs	r3, r4
 801766a:	1b41      	subs	r1, r0, r5
 801766c:	e772      	b.n	8017554 <__ieee754_sqrt+0x58>
 801766e:	4608      	mov	r0, r1
 8017670:	e7f0      	b.n	8017654 <__ieee754_sqrt+0x158>
 8017672:	005b      	lsls	r3, r3, #1
 8017674:	3101      	adds	r1, #1
 8017676:	e7ef      	b.n	8017658 <__ieee754_sqrt+0x15c>
 8017678:	46e0      	mov	r8, ip
 801767a:	e7aa      	b.n	80175d2 <__ieee754_sqrt+0xd6>
 801767c:	f7e8 fdde 	bl	800023c <__adddf3>
 8017680:	e9da 8900 	ldrd	r8, r9, [sl]
 8017684:	4602      	mov	r2, r0
 8017686:	460b      	mov	r3, r1
 8017688:	4640      	mov	r0, r8
 801768a:	4649      	mov	r1, r9
 801768c:	f7e9 f9fe 	bl	8000a8c <__aeabi_dcmplt>
 8017690:	b120      	cbz	r0, 801769c <__ieee754_sqrt+0x1a0>
 8017692:	1ca0      	adds	r0, r4, #2
 8017694:	bf08      	it	eq
 8017696:	3501      	addeq	r5, #1
 8017698:	3402      	adds	r4, #2
 801769a:	e7ca      	b.n	8017632 <__ieee754_sqrt+0x136>
 801769c:	3401      	adds	r4, #1
 801769e:	f024 0401 	bic.w	r4, r4, #1
 80176a2:	e7c6      	b.n	8017632 <__ieee754_sqrt+0x136>
 80176a4:	7ff00000 	.word	0x7ff00000
 80176a8:	20000340 	.word	0x20000340
 80176ac:	20000348 	.word	0x20000348

080176b0 <_init>:
 80176b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176b2:	bf00      	nop
 80176b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176b6:	bc08      	pop	{r3}
 80176b8:	469e      	mov	lr, r3
 80176ba:	4770      	bx	lr

080176bc <_fini>:
 80176bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176be:	bf00      	nop
 80176c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176c2:	bc08      	pop	{r3}
 80176c4:	469e      	mov	lr, r3
 80176c6:	4770      	bx	lr
