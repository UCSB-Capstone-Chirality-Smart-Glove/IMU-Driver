
BT-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013420  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001028  08013560  08013560  00023560  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014588  08014588  00024588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014590  08014590  00024590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014594  08014594  00024594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000348  20000008  08014598  00030008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003d  20000350  080148e0  00030350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000390  0801491d  00030390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015cc  200003a4  0801492e  000303a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001970  0801492e  00031970  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00050000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00050000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0801492e  000401e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .comment      00000043  00000000  00000000  00040a97  2**0
                  CONTENTS, READONLY
 16 .debug_info   0003b5d6  00000000  00000000  00040ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000070a4  00000000  00000000  0007c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003280  00000000  00000000  00083158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000026d2  00000000  00000000  000863d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002fdb7  00000000  00000000  00088aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00039765  00000000  00000000  000b8861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00109b02  00000000  00000000  000f1fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000e928  00000000  00000000  001fbac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000052  00000000  00000000  0020a3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200003a4 	.word	0x200003a4
 800015c:	00000000 	.word	0x00000000
 8000160:	08013548 	.word	0x08013548

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200003a8 	.word	0x200003a8
 800017c:	08013548 	.word	0x08013548

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000ef4:	b5b0      	push	{r4, r5, r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <APPD_EnableCPU2+0x34>)
 8000efc:	1d3c      	adds	r4, r7, #4
 8000efe:	461d      	mov	r5, r3
 8000f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f08:	c403      	stmia	r4!, {r0, r1}
 8000f0a:	8022      	strh	r2, [r4, #0]
 8000f0c:	3402      	adds	r4, #2
 8000f0e:	0c13      	lsrs	r3, r2, #16
 8000f10:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000f12:	f00d fb6d 	bl	800e5f0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f00c fdfe 	bl	800db1a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000f1e:	bf00      	nop
}
 8000f20:	3720      	adds	r7, #32
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bdb0      	pop	{r4, r5, r7, pc}
 8000f26:	bf00      	nop
 8000f28:	08013560 	.word	0x08013560

08000f2c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <LL_C2_PWR_SetPowerMode+0x28>)
 8000f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f3a:	f023 0207 	bic.w	r2, r3, #7
 8000f3e:	4905      	ldr	r1, [pc, #20]	; (8000f54 <LL_C2_PWR_SetPowerMode+0x28>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	58000400 	.word	0x58000400

08000f58 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <LL_EXTI_EnableIT_32_63+0x24>)
 8000f62:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000f66:	4905      	ldr	r1, [pc, #20]	; (8000f7c <LL_EXTI_EnableIT_32_63+0x24>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	58000800 	.word	0x58000800

08000f80 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000f8e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f9a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	cafecafe 	.word	0xcafecafe

08000fbc <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000fce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	608b      	str	r3, [r1, #8]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <LL_DBGMCU_GetDeviceID+0x18>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e0042000 	.word	0xe0042000

08001000 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <LL_DBGMCU_GetRevisionID+0x18>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	0c1b      	lsrs	r3, r3, #16
 800100a:	b29b      	uxth	r3, r3
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e0042000 	.word	0xe0042000

0800101c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <LL_LPM_EnableSleep+0x1c>)
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	4a04      	ldr	r2, [pc, #16]	; (8001038 <LL_LPM_EnableSleep+0x1c>)
 8001026:	f023 0304 	bic.w	r3, r3, #4
 800102a:	6113      	str	r3, [r2, #16]
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	22ff      	movs	r2, #255	; 0xff
 8001048:	625a      	str	r2, [r3, #36]	; 0x24
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	22ca      	movs	r2, #202	; 0xca
 8001062:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2253      	movs	r2, #83	; 0x53
 8001068:	625a      	str	r2, [r3, #36]	; 0x24
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f023 0207 	bic.w	r2, r3, #7
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	431a      	orrs	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	609a      	str	r2, [r3, #8]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <MX_APPE_Config+0x18>)
 80010a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010a6:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80010a8:	f000 f824 	bl	80010f4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80010ac:	f000 f829 	bl	8001102 <Config_HSE>

  return;
 80010b0:	bf00      	nop
}
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	58004000 	.word	0x58004000

080010b8 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80010bc:	f000 f835 	bl	800112a <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80010c0:	f000 f84e 	bl	8001160 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80010c4:	4903      	ldr	r1, [pc, #12]	; (80010d4 <MX_APPE_Init+0x1c>)
 80010c6:	2000      	movs	r0, #0
 80010c8:	f004 fe54 	bl	8005d74 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80010cc:	f000 f856 	bl	800117c <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80010d0:	bf00      	nop
}
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200010b0 	.word	0x200010b0

080010d8 <Init_Smps>:

void Init_Smps(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80010dc:	bf00      	nop
}
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <Init_Exti>:

void Init_Exti(void)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80010ea:	2050      	movs	r0, #80	; 0x50
 80010ec:	f7ff ff34 	bl	8000f58 <LL_EXTI_EnableIT_32_63>

  return;
 80010f0:	bf00      	nop
}
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80010f8:	bf00      	nop
}
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001108:	2000      	movs	r0, #0
 800110a:	f00d fafd 	bl	800e708 <OTP_Read>
 800110e:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d005      	beq.n	8001122 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	799b      	ldrb	r3, [r3, #6]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ff30 	bl	8000f80 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001120:	bf00      	nop
 8001122:	bf00      	nop
}
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <System_Init>:

static void System_Init(void)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	af00      	add	r7, sp, #0
  Init_Smps();
 800112e:	f7ff ffd3 	bl	80010d8 <Init_Smps>

  Init_Exti();
 8001132:	f7ff ffd8 	bl	80010e6 <Init_Exti>

  Init_Rtc();
 8001136:	f000 f803 	bl	8001140 <Init_Rtc>

  return;
 800113a:	bf00      	nop
}
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <Init_Rtc+0x1c>)
 8001146:	f7ff ff86 	bl	8001056 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800114a:	2100      	movs	r1, #0
 800114c:	4803      	ldr	r0, [pc, #12]	; (800115c <Init_Rtc+0x1c>)
 800114e:	f7ff ff92 	bl	8001076 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001152:	4802      	ldr	r0, [pc, #8]	; (800115c <Init_Rtc+0x1c>)
 8001154:	f7ff ff72 	bl	800103c <LL_RTC_EnableWriteProtection>

  return;
 8001158:	bf00      	nop
}
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40002800 	.word	0x40002800

08001160 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001164:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001168:	f7ff ff28 	bl	8000fbc <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800116c:	f00e f994 	bl	800f498 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001170:	2004      	movs	r0, #4
 8001172:	f7ff fedb 	bl	8000f2c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001176:	bf00      	nop
}
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 8001182:	f00d f87f 	bl	800e284 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001186:	4a11      	ldr	r2, [pc, #68]	; (80011cc <appe_Tl_Init+0x50>)
 8001188:	2100      	movs	r1, #0
 800118a:	2004      	movs	r0, #4
 800118c:	f00e fac2 	bl	800f714 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <appe_Tl_Init+0x54>)
 8001192:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <appe_Tl_Init+0x58>)
 8001196:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001198:	463b      	mov	r3, r7
 800119a:	4619      	mov	r1, r3
 800119c:	480e      	ldr	r0, [pc, #56]	; (80011d8 <appe_Tl_Init+0x5c>)
 800119e:	f00c ff33 	bl	800e008 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <appe_Tl_Init+0x60>)
 80011a4:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <appe_Tl_Init+0x64>)
 80011a8:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <appe_Tl_Init+0x68>)
 80011ac:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80011ae:	f240 533c 	movw	r3, #1340	; 0x53c
 80011b2:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80011b4:	f107 0308 	add.w	r3, r7, #8
 80011b8:	4618      	mov	r0, r3
 80011ba:	f00d f9a5 	bl	800e508 <TL_MM_Init>

  TL_Enable();
 80011be:	f00d f85b 	bl	800e278 <TL_Enable>

  return;
 80011c2:	bf00      	nop
}
 80011c4:	3720      	adds	r7, #32
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	0800e041 	.word	0x0800e041
 80011d0:	20030734 	.word	0x20030734
 80011d4:	080011e9 	.word	0x080011e9
 80011d8:	08001201 	.word	0x08001201
 80011dc:	2003094c 	.word	0x2003094c
 80011e0:	20030840 	.word	0x20030840
 80011e4:	200301f8 	.word	0x200301f8

080011e8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80011f2:	bf00      	nop
}
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	330b      	adds	r3, #11
 800120e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	b29b      	uxth	r3, r3
 8001216:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800121a:	2b07      	cmp	r3, #7
 800121c:	d81f      	bhi.n	800125e <APPE_SysUserEvtRx+0x5e>
 800121e:	a201      	add	r2, pc, #4	; (adr r2, 8001224 <APPE_SysUserEvtRx+0x24>)
 8001220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001224:	08001245 	.word	0x08001245
 8001228:	08001257 	.word	0x08001257
 800122c:	0800125f 	.word	0x0800125f
 8001230:	0800125f 	.word	0x0800125f
 8001234:	0800125f 	.word	0x0800125f
 8001238:	0800125f 	.word	0x0800125f
 800123c:	0800125f 	.word	0x0800125f
 8001240:	0800125f 	.word	0x0800125f
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	4618      	mov	r0, r3
 800124a:	f00c fc93 	bl	800db74 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 f81b 	bl	800128a <APPE_SysEvtReadyProcessing>
    break;
 8001254:	e004      	b.n	8001260 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 f806 	bl	8001268 <APPE_SysEvtError>
    break;
 800125c:	e000      	b.n	8001260 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 800125e:	bf00      	nop
  }

  return;
 8001260:	bf00      	nop
}
 8001262:	3720      	adds	r7, #32
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	330b      	adds	r3, #11
 8001276:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	3302      	adds	r3, #2
 800127c:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800127e:	bf00      	nop
}
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b08a      	sub	sp, #40	; 0x28
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001292:	f107 0308 	add.w	r3, r7, #8
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	330b      	adds	r3, #11
 80012ae:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	3302      	adds	r3, #2
 80012b4:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d11d      	bne.n	80012fa <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80012be:	f7ff fe19 	bl	8000ef4 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80012c2:	230f      	movs	r3, #15
 80012c4:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80012c6:	237f      	movs	r3, #127	; 0x7f
 80012c8:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80012ca:	f7ff fe99 	bl	8001000 <LL_DBGMCU_GetRevisionID>
 80012ce:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80012d6:	f7ff fe85 	bl	8000fe4 <LL_DBGMCU_GetDeviceID>
 80012da:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80012dc:	6a3b      	ldr	r3, [r7, #32]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	4618      	mov	r0, r3
 80012e8:	f00c fc2e 	bl	800db48 <SHCI_C2_Config>

    APP_BLE_Init();
 80012ec:	f00d fb16 	bl	800e91c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80012f0:	2100      	movs	r1, #0
 80012f2:	2001      	movs	r0, #1
 80012f4:	f00e f8e2 	bl	800f4bc <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80012f8:	e007      	b.n	800130a <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d103      	bne.n	800130a <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
  return;
 8001308:	bf00      	nop
 800130a:	bf00      	nop
}
 800130c:	3728      	adds	r7, #40	; 0x28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800131a:	f006 f8e1 	bl	80074e0 <HAL_GetTick>
 800131e:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800132a:	d00a      	beq.n	8001342 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800132c:	f006 f8f0 	bl	8007510 <HAL_GetTickFreq>
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800133a:	e002      	b.n	8001342 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800133c:	f7ff fe6e 	bl	800101c <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8001340:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001342:	f006 f8cd 	bl	80074e0 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	429a      	cmp	r2, r3
 8001350:	d8f4      	bhi.n	800133c <HAL_Delay+0x2a>
  }
}
 8001352:	bf00      	nop
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f00e f8da 	bl	800f51c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}

0800136c <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001370:	bf00      	nop
}
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
 8001388:	f00e f8c8 	bl	800f51c <UTIL_SEQ_Run>
  return;
 800138c:	bf00      	nop
}
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800139c:	2100      	movs	r1, #0
 800139e:	2004      	movs	r0, #4
 80013a0:	f00e f9da 	bl	800f758 <UTIL_SEQ_SetTask>
  return;
 80013a4:	bf00      	nop
}
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80013b4:	2002      	movs	r0, #2
 80013b6:	f00e fa3b 	bl	800f830 <UTIL_SEQ_SetEvt>
  return;
 80013ba:	bf00      	nop
}
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80013ca:	2002      	movs	r0, #2
 80013cc:	f00e fa50 	bl	800f870 <UTIL_SEQ_WaitEvt>
  return;
 80013d0:	bf00      	nop
}
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <bmi3_init>:
/*!
 * @brief This API is the entry point for bmi3 sensor. It reads and validates the
 * chip-id of the sensor.
 */
int8_t bmi3_init(struct bmi3_dev *dev)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to assign chip id */
    uint8_t chip_id[2] = { 0 };
 80013e0:	2300      	movs	r3, #0
 80013e2:	81bb      	strh	r3, [r7, #12]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 feaf 	bl	8002148 <null_ptr_check>
 80013ea:	4603      	mov	r3, r0
 80013ec:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI3_OK)
 80013ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10d      	bne.n	8001412 <bmi3_init+0x3a>
    {
        dev->chip_id = 0;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]

        /* An extra dummy byte is read during SPI read */
        if (dev->intf == BMI3_SPI_INTF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7a5b      	ldrb	r3, [r3, #9]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d103      	bne.n	800140c <bmi3_init+0x34>
        {
            dev->dummy_byte = 1;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	72da      	strb	r2, [r3, #11]
 800140a:	e002      	b.n	8001412 <bmi3_init+0x3a>
        }
        else
        {
            dev->dummy_byte = 2;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2202      	movs	r2, #2
 8001410:	72da      	strb	r2, [r3, #11]
        }
    }

    if (rslt == BMI3_OK)
 8001412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d118      	bne.n	800144c <bmi3_init+0x74>
    {
        /* Perform soft-reset to bring all register values to their default values */
        rslt = bmi3_soft_reset(dev);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 f8d4 	bl	80015c8 <bmi3_soft_reset>
 8001420:	4603      	mov	r3, r0
 8001422:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8001424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d10f      	bne.n	800144c <bmi3_init+0x74>
        {
            /* Read chip-id of the BMI3 sensor */
            rslt = bmi3_get_regs(BMI3_REG_CHIP_ID, chip_id, 2, dev);
 800142c:	f107 010c 	add.w	r1, r7, #12
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2202      	movs	r2, #2
 8001434:	2000      	movs	r0, #0
 8001436:	f000 f821 	bl	800147c <bmi3_get_regs>
 800143a:	4603      	mov	r3, r0
 800143c:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI3_OK)
 800143e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d102      	bne.n	800144c <bmi3_init+0x74>
            {
                dev->chip_id = chip_id[0];
 8001446:	7b3a      	ldrb	r2, [r7, #12]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (rslt == BMI3_OK)
 800144c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d10d      	bne.n	8001470 <bmi3_init+0x98>
    {
        if (((chip_id[1] & BMI3_REV_ID_MASK) >> BMI3_REV_ID_POS) == BMI3_ENABLE)
 8001454:	7b7b      	ldrb	r3, [r7, #13]
 8001456:	091b      	lsrs	r3, r3, #4
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b01      	cmp	r3, #1
 800145c:	d104      	bne.n	8001468 <bmi3_init+0x90>
        {
            dev->accel_bit_width = BMI3_ACC_DP_OFF_XYZ_14_BIT_MASK;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001464:	839a      	strh	r2, [r3, #28]
 8001466:	e003      	b.n	8001470 <bmi3_init+0x98>
        }
        else
        {
            dev->accel_bit_width = BMI3_ACC_DP_OFF_XYZ_13_BIT_MASK;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800146e:	839a      	strh	r2, [r3, #28]
        }
    }

    return rslt;
 8001470:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <bmi3_get_regs>:
 * @note For most of the registers auto address increment applies, with the
 * exception of a few special registers, which trap the address. For e.g.,
 * Register address - 0x03.
 */
int8_t bmi3_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, struct bmi3_dev *dev)
{
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b0a7      	sub	sp, #156	; 0x9c
 8001480:	af00      	add	r7, sp, #0
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	4603      	mov	r3, r0
 8001488:	73fb      	strb	r3, [r7, #15]
 800148a:	4613      	mov	r3, r2
 800148c:	81bb      	strh	r3, [r7, #12]

    /* Variable to define temporary buffer */
    uint8_t temp_buf[BMI3_MAX_LEN];

    /* Variable to define loop */
    uint16_t index = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 fe57 	bl	8002148 <null_ptr_check>
 800149a:	4603      	mov	r3, r0
 800149c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    if ((rslt == BMI3_OK) && (data != NULL))
 80014a0:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d145      	bne.n	8001534 <bmi3_get_regs+0xb8>
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d042      	beq.n	8001534 <bmi3_get_regs+0xb8>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI3_SPI_INTF)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	7a5b      	ldrb	r3, [r3, #9]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d103      	bne.n	80014be <bmi3_get_regs+0x42>
        {
            reg_addr = (reg_addr | BMI3_SPI_RD_MASK);
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014bc:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, temp_buf, len + dev->dummy_byte, dev->intf_ptr);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691c      	ldr	r4, [r3, #16]
 80014c2:	89bb      	ldrh	r3, [r7, #12]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	7ad2      	ldrb	r2, [r2, #11]
 80014c8:	4413      	add	r3, r2
 80014ca:	461a      	mov	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f107 0114 	add.w	r1, r7, #20
 80014d4:	7bf8      	ldrb	r0, [r7, #15]
 80014d6:	47a0      	blx	r4
 80014d8:	4603      	mov	r3, r0
 80014da:	461a      	mov	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	729a      	strb	r2, [r3, #10]
        dev->delay_us(2, dev->intf_ptr);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6852      	ldr	r2, [r2, #4]
 80014e8:	4611      	mov	r1, r2
 80014ea:	2002      	movs	r0, #2
 80014ec:	4798      	blx	r3

        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d119      	bne.n	800152c <bmi3_get_regs+0xb0>
        {
            /* Read the data from the position next to dummy byte */
            while (index < len)
 80014f8:	e012      	b.n	8001520 <bmi3_get_regs+0xa4>
            {
                data[index] = temp_buf[index + dev->dummy_byte];
 80014fa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	7ad2      	ldrb	r2, [r2, #11]
 8001502:	441a      	add	r2, r3
 8001504:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001508:	68b9      	ldr	r1, [r7, #8]
 800150a:	440b      	add	r3, r1
 800150c:	3298      	adds	r2, #152	; 0x98
 800150e:	443a      	add	r2, r7
 8001510:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 8001514:	701a      	strb	r2, [r3, #0]
                index++;
 8001516:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800151a:	3301      	adds	r3, #1
 800151c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
            while (index < len)
 8001520:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8001524:	89bb      	ldrh	r3, [r7, #12]
 8001526:	429a      	cmp	r2, r3
 8001528:	d3e7      	bcc.n	80014fa <bmi3_get_regs+0x7e>
        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 800152a:	e006      	b.n	800153a <bmi3_get_regs+0xbe>
            }
        }
        else
        {
            rslt = BMI3_E_COM_FAIL;
 800152c:	23fe      	movs	r3, #254	; 0xfe
 800152e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 8001532:	e002      	b.n	800153a <bmi3_get_regs+0xbe>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001534:	23ff      	movs	r3, #255	; 0xff
 8001536:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    }

    return rslt;
 800153a:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 800153e:	4618      	mov	r0, r3
 8001540:	379c      	adds	r7, #156	; 0x9c
 8001542:	46bd      	mov	sp, r7
 8001544:	bd90      	pop	{r4, r7, pc}

08001546 <bmi3_set_regs>:

/*!
 * @brief This API writes data to the given register address of bmi3 sensor.
 */
int8_t bmi3_set_regs(uint8_t reg_addr, const uint8_t *data, uint16_t len, struct bmi3_dev *dev)
{
 8001546:	b590      	push	{r4, r7, lr}
 8001548:	b087      	sub	sp, #28
 800154a:	af00      	add	r7, sp, #0
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	4603      	mov	r3, r0
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	4613      	mov	r3, r2
 8001556:	81bb      	strh	r3, [r7, #12]
    /* Variable to store result of API */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 fdf5 	bl	8002148 <null_ptr_check>
 800155e:	4603      	mov	r3, r0
 8001560:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (data != NULL))
 8001562:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d125      	bne.n	80015b6 <bmi3_set_regs+0x70>
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d022      	beq.n	80015b6 <bmi3_set_regs+0x70>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI3_SPI_INTF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	7a5b      	ldrb	r3, [r3, #9]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d103      	bne.n	8001580 <bmi3_set_regs+0x3a>
        {
            reg_addr = (reg_addr & BMI3_SPI_WR_MASK);
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800157e:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->write(reg_addr, data, len, dev->intf_ptr);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	695c      	ldr	r4, [r3, #20]
 8001584:	89ba      	ldrh	r2, [r7, #12]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	7bf8      	ldrb	r0, [r7, #15]
 800158c:	68b9      	ldr	r1, [r7, #8]
 800158e:	47a0      	blx	r4
 8001590:	4603      	mov	r3, r0
 8001592:	461a      	mov	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	729a      	strb	r2, [r3, #10]
        dev->delay_us(2, dev->intf_ptr);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6852      	ldr	r2, [r2, #4]
 80015a0:	4611      	mov	r1, r2
 80015a2:	2002      	movs	r0, #2
 80015a4:	4798      	blx	r3

        if (dev->intf_rslt != BMI3_INTF_RET_SUCCESS)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d004      	beq.n	80015ba <bmi3_set_regs+0x74>
        {
            rslt = BMI3_E_COM_FAIL;
 80015b0:	23fe      	movs	r3, #254	; 0xfe
 80015b2:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMI3_INTF_RET_SUCCESS)
 80015b4:	e001      	b.n	80015ba <bmi3_set_regs+0x74>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80015b6:	23ff      	movs	r3, #255	; 0xff
 80015b8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80015ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	371c      	adds	r7, #28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd90      	pop	{r4, r7, pc}
	...

080015c8 <bmi3_soft_reset>:
/*!
 * @brief This API resets bmi3 sensor. All registers are overwritten with
 * their default values.
 */
int8_t bmi3_soft_reset(struct bmi3_dev *dev)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to read the dummy byte */
    uint8_t dummy_byte[2] = { 0 };
 80015d0:	2300      	movs	r3, #0
 80015d2:	83bb      	strh	r3, [r7, #28]

    /* Variable to store feature data array */
    uint8_t feature_data[2] = { 0x2c, 0x01 };
 80015d4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80015d8:	833b      	strh	r3, [r7, #24]

    /* Variable to enable feature engine bit */
    uint8_t feature_engine_en[2] = { BMI3_ENABLE, 0 };
 80015da:	2301      	movs	r3, #1
 80015dc:	82bb      	strh	r3, [r7, #20]

    /* Variable to store status value for feature engine enable */
    uint8_t reg_data[2] = { 0 };
 80015de:	2300      	movs	r3, #0
 80015e0:	823b      	strh	r3, [r7, #16]

    /* Array variable to store feature IO status */
    uint8_t feature_io_status[2] = { BMI3_ENABLE, 0 };
 80015e2:	2301      	movs	r3, #1
 80015e4:	81bb      	strh	r3, [r7, #12]

    uint8_t loop = 1;
 80015e6:	2301      	movs	r3, #1
 80015e8:	77bb      	strb	r3, [r7, #30]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 fdac 	bl	8002148 <null_ptr_check>
 80015f0:	4603      	mov	r3, r0
 80015f2:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMI3_OK)
 80015f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d16f      	bne.n	80016dc <bmi3_soft_reset+0x114>
    {
        /* Reset bmi3 device */
        rslt = bmi3_set_command_register(BMI3_CMD_SOFT_RESET, dev);
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	f64d 60af 	movw	r0, #57007	; 0xdeaf
 8001602:	f000 f873 	bl	80016ec <bmi3_set_command_register>
 8001606:	4603      	mov	r3, r0
 8001608:	77fb      	strb	r3, [r7, #31]
        dev->delay_us(BMI3_SOFT_RESET_DELAY, dev->intf_ptr);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6852      	ldr	r2, [r2, #4]
 8001612:	4611      	mov	r1, r2
 8001614:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001618:	4798      	blx	r3

        /* Performing a dummy read after a soft-reset */
        if ((rslt == BMI3_OK) && (dev->intf == BMI3_SPI_INTF))
 800161a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10c      	bne.n	800163c <bmi3_soft_reset+0x74>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	7a5b      	ldrb	r3, [r3, #9]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d108      	bne.n	800163c <bmi3_soft_reset+0x74>
        {
            rslt = bmi3_get_regs(BMI3_REG_CHIP_ID, dummy_byte, 2, dev);
 800162a:	f107 011c 	add.w	r1, r7, #28
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2202      	movs	r2, #2
 8001632:	2000      	movs	r0, #0
 8001634:	f7ff ff22 	bl	800147c <bmi3_get_regs>
 8001638:	4603      	mov	r3, r0
 800163a:	77fb      	strb	r3, [r7, #31]
        }

        /* Enabling Feature engine */
        if (rslt == BMI3_OK)
 800163c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d108      	bne.n	8001656 <bmi3_soft_reset+0x8e>
        {
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_IO2, feature_data, 2, dev);
 8001644:	f107 0118 	add.w	r1, r7, #24
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2202      	movs	r2, #2
 800164c:	2012      	movs	r0, #18
 800164e:	f7ff ff7a 	bl	8001546 <bmi3_set_regs>
 8001652:	4603      	mov	r3, r0
 8001654:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMI3_OK)
 8001656:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d108      	bne.n	8001670 <bmi3_soft_reset+0xa8>
        {
            /* Enabling feature status bit */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_IO_STATUS, feature_io_status, 2, dev);
 800165e:	f107 010c 	add.w	r1, r7, #12
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2202      	movs	r2, #2
 8001666:	2014      	movs	r0, #20
 8001668:	f7ff ff6d 	bl	8001546 <bmi3_set_regs>
 800166c:	4603      	mov	r3, r0
 800166e:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMI3_OK)
 8001670:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d108      	bne.n	800168a <bmi3_soft_reset+0xc2>
        {
            /* Enable feature engine bit */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_CTRL, feature_engine_en, 2, dev);
 8001678:	f107 0114 	add.w	r1, r7, #20
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2202      	movs	r2, #2
 8001680:	2040      	movs	r0, #64	; 0x40
 8001682:	f7ff ff60 	bl	8001546 <bmi3_set_regs>
 8001686:	4603      	mov	r3, r0
 8001688:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMI3_OK)
 800168a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d124      	bne.n	80016dc <bmi3_soft_reset+0x114>
        {
            /* Checking the status bit for feature engine enable */
            while (loop <= 10)
 8001692:	e020      	b.n	80016d6 <bmi3_soft_reset+0x10e>
            {
                dev->delay_us(100000, dev->intf_ptr);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	6852      	ldr	r2, [r2, #4]
 800169c:	4611      	mov	r1, r2
 800169e:	4812      	ldr	r0, [pc, #72]	; (80016e8 <bmi3_soft_reset+0x120>)
 80016a0:	4798      	blx	r3

                rslt = bmi3_get_regs(BMI3_REG_FEATURE_IO1, reg_data, 2, dev);
 80016a2:	f107 0110 	add.w	r1, r7, #16
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2202      	movs	r2, #2
 80016aa:	2011      	movs	r0, #17
 80016ac:	f7ff fee6 	bl	800147c <bmi3_get_regs>
 80016b0:	4603      	mov	r3, r0
 80016b2:	77fb      	strb	r3, [r7, #31]

                if (rslt == BMI3_OK)
 80016b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d109      	bne.n	80016d0 <bmi3_soft_reset+0x108>
                {
                    if (reg_data[0] & BMI3_FEATURE_ENGINE_ENABLE_MASK)
 80016bc:	7c3b      	ldrb	r3, [r7, #16]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d002      	beq.n	80016cc <bmi3_soft_reset+0x104>
                    {
                        rslt = BMI3_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	77fb      	strb	r3, [r7, #31]

                        break;
 80016ca:	e007      	b.n	80016dc <bmi3_soft_reset+0x114>
                    }
                    else
                    {
                        rslt = BMI3_E_FEATURE_ENGINE_STATUS;
 80016cc:	23f2      	movs	r3, #242	; 0xf2
 80016ce:	77fb      	strb	r3, [r7, #31]
                    }
                }

                loop++;
 80016d0:	7fbb      	ldrb	r3, [r7, #30]
 80016d2:	3301      	adds	r3, #1
 80016d4:	77bb      	strb	r3, [r7, #30]
            while (loop <= 10)
 80016d6:	7fbb      	ldrb	r3, [r7, #30]
 80016d8:	2b0a      	cmp	r3, #10
 80016da:	d9db      	bls.n	8001694 <bmi3_soft_reset+0xcc>
            }
        }
    }

    return rslt;
 80016dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3720      	adds	r7, #32
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	000186a0 	.word	0x000186a0

080016ec <bmi3_set_command_register>:

/*!
 * @brief This API writes the available sensor specific commands to the sensor.
 */
int8_t bmi3_set_command_register(uint16_t command, struct bmi3_dev *dev)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	6039      	str	r1, [r7, #0]
 80016f6:	80fb      	strh	r3, [r7, #6]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array variable to store command value */
    uint8_t reg_data[2] = { 0 };
 80016f8:	2300      	movs	r3, #0
 80016fa:	81bb      	strh	r3, [r7, #12]

    reg_data[0] = (uint8_t)(command & BMI3_SET_LOW_BYTE);
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	733b      	strb	r3, [r7, #12]
    reg_data[1] = (uint8_t)((command & BMI3_SET_HIGH_BYTE) >> 8);
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	b29b      	uxth	r3, r3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	737b      	strb	r3, [r7, #13]

    /* Set the command in the command register */
    rslt = bmi3_set_regs(BMI3_REG_CMD, reg_data, 2, dev);
 800170c:	f107 010c 	add.w	r1, r7, #12
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	2202      	movs	r2, #2
 8001714:	207e      	movs	r0, #126	; 0x7e
 8001716:	f7ff ff16 	bl	8001546 <bmi3_set_regs>
 800171a:	4603      	mov	r3, r0
 800171c:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800171e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <bmi3_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi3_set_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	460b      	mov	r3, r1
 8001736:	607a      	str	r2, [r7, #4]
 8001738:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 fd04 	bl	8002148 <null_ptr_check>
 8001740:	4603      	mov	r3, r0
 8001742:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 8001744:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001748:	2b00      	cmp	r3, #0
 800174a:	f040 80f1 	bne.w	8001930 <bmi3_set_sensor_config+0x204>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 80ed 	beq.w	8001930 <bmi3_set_sensor_config+0x204>
    {
        for (loop = 0; loop < n_sens; loop++)
 8001756:	2300      	movs	r3, #0
 8001758:	75bb      	strb	r3, [r7, #22]
 800175a:	e0e3      	b.n	8001924 <bmi3_set_sensor_config+0x1f8>
        {
            switch (sens_cfg[loop].type)
 800175c:	7dbb      	ldrb	r3, [r7, #22]
 800175e:	222e      	movs	r2, #46	; 0x2e
 8001760:	fb02 f303 	mul.w	r3, r2, r3
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	4413      	add	r3, r2
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b0c      	cmp	r3, #12
 800176c:	f200 80d4 	bhi.w	8001918 <bmi3_set_sensor_config+0x1ec>
 8001770:	a201      	add	r2, pc, #4	; (adr r2, 8001778 <bmi3_set_sensor_config+0x4c>)
 8001772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001776:	bf00      	nop
 8001778:	080017ad 	.word	0x080017ad
 800177c:	080017c9 	.word	0x080017c9
 8001780:	0800181d 	.word	0x0800181d
 8001784:	080017e5 	.word	0x080017e5
 8001788:	08001801 	.word	0x08001801
 800178c:	0800188d 	.word	0x0800188d
 8001790:	08001855 	.word	0x08001855
 8001794:	08001871 	.word	0x08001871
 8001798:	08001839 	.word	0x08001839
 800179c:	080018a9 	.word	0x080018a9
 80017a0:	080018c5 	.word	0x080018c5
 80017a4:	080018e1 	.word	0x080018e1
 80017a8:	080018fd 	.word	0x080018fd
            {
                case BMI3_ACCEL:
                    rslt = set_accel_config(&sens_cfg[loop].cfg.acc, dev);
 80017ac:	7dbb      	ldrb	r3, [r7, #22]
 80017ae:	222e      	movs	r2, #46	; 0x2e
 80017b0:	fb02 f303 	mul.w	r3, r2, r3
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	4413      	add	r3, r2
 80017b8:	3302      	adds	r3, #2
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 f9cb 	bl	8001b58 <set_accel_config>
 80017c2:	4603      	mov	r3, r0
 80017c4:	75fb      	strb	r3, [r7, #23]
                    break;
 80017c6:	e0aa      	b.n	800191e <bmi3_set_sensor_config+0x1f2>

                case BMI3_GYRO:
                    rslt = set_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 80017c8:	7dbb      	ldrb	r3, [r7, #22]
 80017ca:	222e      	movs	r2, #46	; 0x2e
 80017cc:	fb02 f303 	mul.w	r3, r2, r3
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	4413      	add	r3, r2
 80017d4:	3302      	adds	r3, #2
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 fb60 	bl	8001e9e <set_gyro_config>
 80017de:	4603      	mov	r3, r0
 80017e0:	75fb      	strb	r3, [r7, #23]
                    break;
 80017e2:	e09c      	b.n	800191e <bmi3_set_sensor_config+0x1f2>

                case BMI3_ANY_MOTION:
                    rslt = set_any_motion_config(&sens_cfg[loop].cfg.any_motion, dev);
 80017e4:	7dbb      	ldrb	r3, [r7, #22]
 80017e6:	222e      	movs	r2, #46	; 0x2e
 80017e8:	fb02 f303 	mul.w	r3, r2, r3
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	3302      	adds	r3, #2
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 fd5b 	bl	80022b0 <set_any_motion_config>
 80017fa:	4603      	mov	r3, r0
 80017fc:	75fb      	strb	r3, [r7, #23]
                    break;
 80017fe:	e08e      	b.n	800191e <bmi3_set_sensor_config+0x1f2>

                case BMI3_NO_MOTION:
                    rslt = set_no_motion_config(&sens_cfg[loop].cfg.no_motion, dev);
 8001800:	7dbb      	ldrb	r3, [r7, #22]
 8001802:	222e      	movs	r2, #46	; 0x2e
 8001804:	fb02 f303 	mul.w	r3, r2, r3
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	4413      	add	r3, r2
 800180c:	3302      	adds	r3, #2
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4618      	mov	r0, r3
 8001812:	f000 fec4 	bl	800259e <set_no_motion_config>
 8001816:	4603      	mov	r3, r0
 8001818:	75fb      	strb	r3, [r7, #23]
                    break;
 800181a:	e080      	b.n	800191e <bmi3_set_sensor_config+0x1f2>

                case BMI3_SIG_MOTION:
                    rslt = set_sig_motion_config(&sens_cfg[loop].cfg.sig_motion, dev);
 800181c:	7dbb      	ldrb	r3, [r7, #22]
 800181e:	222e      	movs	r2, #46	; 0x2e
 8001820:	fb02 f303 	mul.w	r3, r2, r3
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	4413      	add	r3, r2
 8001828:	3302      	adds	r3, #2
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4618      	mov	r0, r3
 800182e:	f001 f921 	bl	8002a74 <set_sig_motion_config>
 8001832:	4603      	mov	r3, r0
 8001834:	75fb      	strb	r3, [r7, #23]
                    break;
 8001836:	e072      	b.n	800191e <bmi3_set_sensor_config+0x1f2>

                case BMI3_FLAT:
                    rslt = set_flat_config(&sens_cfg[loop].cfg.flat, dev);
 8001838:	7dbb      	ldrb	r3, [r7, #22]
 800183a:	222e      	movs	r2, #46	; 0x2e
 800183c:	fb02 f303 	mul.w	r3, r2, r3
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	3302      	adds	r3, #2
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	4618      	mov	r0, r3
 800184a:	f001 f801 	bl	8002850 <set_flat_config>
 800184e:	4603      	mov	r3, r0
 8001850:	75fb      	strb	r3, [r7, #23]
                    break;
 8001852:	e064      	b.n	800191e <bmi3_set_sensor_config+0x1f2>

                case BMI3_TILT:
                    rslt = set_tilt_config(&sens_cfg[loop].cfg.tilt, dev);
 8001854:	7dbb      	ldrb	r3, [r7, #22]
 8001856:	222e      	movs	r2, #46	; 0x2e
 8001858:	fb02 f303 	mul.w	r3, r2, r3
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	4413      	add	r3, r2
 8001860:	3302      	adds	r3, #2
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4618      	mov	r0, r3
 8001866:	f001 fa39 	bl	8002cdc <set_tilt_config>
 800186a:	4603      	mov	r3, r0
 800186c:	75fb      	strb	r3, [r7, #23]
                    break;
 800186e:	e056      	b.n	800191e <bmi3_set_sensor_config+0x1f2>

                case BMI3_ORIENTATION:
                    rslt = set_orientation_config(&sens_cfg[loop].cfg.orientation, dev);
 8001870:	7dbb      	ldrb	r3, [r7, #22]
 8001872:	222e      	movs	r2, #46	; 0x2e
 8001874:	fb02 f303 	mul.w	r3, r2, r3
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	4413      	add	r3, r2
 800187c:	3302      	adds	r3, #2
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4618      	mov	r0, r3
 8001882:	f001 fb1a 	bl	8002eba <set_orientation_config>
 8001886:	4603      	mov	r3, r0
 8001888:	75fb      	strb	r3, [r7, #23]
                    break;
 800188a:	e048      	b.n	800191e <bmi3_set_sensor_config+0x1f2>

                case BMI3_STEP_COUNTER:
                    rslt = set_step_config(&sens_cfg[loop].cfg.step_counter, dev);
 800188c:	7dbb      	ldrb	r3, [r7, #22]
 800188e:	222e      	movs	r2, #46	; 0x2e
 8001890:	fb02 f303 	mul.w	r3, r2, r3
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	4413      	add	r3, r2
 8001898:	3302      	adds	r3, #2
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4618      	mov	r0, r3
 800189e:	f001 fdce 	bl	800343e <set_step_config>
 80018a2:	4603      	mov	r3, r0
 80018a4:	75fb      	strb	r3, [r7, #23]
                    break;
 80018a6:	e03a      	b.n	800191e <bmi3_set_sensor_config+0x1f2>

                case BMI3_TAP:
                    rslt = set_tap_config(&sens_cfg[loop].cfg.tap, dev);
 80018a8:	7dbb      	ldrb	r3, [r7, #22]
 80018aa:	222e      	movs	r2, #46	; 0x2e
 80018ac:	fb02 f303 	mul.w	r3, r2, r3
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	4413      	add	r3, r2
 80018b4:	3302      	adds	r3, #2
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f002 f910 	bl	8003ade <set_tap_config>
 80018be:	4603      	mov	r3, r0
 80018c0:	75fb      	strb	r3, [r7, #23]
                    break;
 80018c2:	e02c      	b.n	800191e <bmi3_set_sensor_config+0x1f2>

                case BMI3_ALT_ACCEL:
                    rslt = set_alternate_accel_config(&sens_cfg[loop].cfg.alt_acc, dev);
 80018c4:	7dbb      	ldrb	r3, [r7, #22]
 80018c6:	222e      	movs	r2, #46	; 0x2e
 80018c8:	fb02 f303 	mul.w	r3, r2, r3
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	3302      	adds	r3, #2
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f002 fa0a 	bl	8003cee <set_alternate_accel_config>
 80018da:	4603      	mov	r3, r0
 80018dc:	75fb      	strb	r3, [r7, #23]
                    break;
 80018de:	e01e      	b.n	800191e <bmi3_set_sensor_config+0x1f2>

                case BMI3_ALT_GYRO:
                    rslt = set_alternate_gyro_config(&sens_cfg[loop].cfg.alt_gyr, dev);
 80018e0:	7dbb      	ldrb	r3, [r7, #22]
 80018e2:	222e      	movs	r2, #46	; 0x2e
 80018e4:	fb02 f303 	mul.w	r3, r2, r3
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	4413      	add	r3, r2
 80018ec:	3302      	adds	r3, #2
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f002 fa86 	bl	8003e02 <set_alternate_gyro_config>
 80018f6:	4603      	mov	r3, r0
 80018f8:	75fb      	strb	r3, [r7, #23]
                    break;
 80018fa:	e010      	b.n	800191e <bmi3_set_sensor_config+0x1f2>

                case BMI3_ALT_AUTO_CONFIG:
                    rslt = set_alternate_auto_config(&sens_cfg[loop].cfg.alt_auto_cfg, dev);
 80018fc:	7dbb      	ldrb	r3, [r7, #22]
 80018fe:	222e      	movs	r2, #46	; 0x2e
 8001900:	fb02 f303 	mul.w	r3, r2, r3
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	3302      	adds	r3, #2
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4618      	mov	r0, r3
 800190e:	f002 fb02 	bl	8003f16 <set_alternate_auto_config>
 8001912:	4603      	mov	r3, r0
 8001914:	75fb      	strb	r3, [r7, #23]
                    break;
 8001916:	e002      	b.n	800191e <bmi3_set_sensor_config+0x1f2>

                default:
                    rslt = BMI3_E_INVALID_SENSOR;
 8001918:	23fa      	movs	r3, #250	; 0xfa
 800191a:	75fb      	strb	r3, [r7, #23]
                    break;
 800191c:	bf00      	nop
        for (loop = 0; loop < n_sens; loop++)
 800191e:	7dbb      	ldrb	r3, [r7, #22]
 8001920:	3301      	adds	r3, #1
 8001922:	75bb      	strb	r3, [r7, #22]
 8001924:	7dba      	ldrb	r2, [r7, #22]
 8001926:	7afb      	ldrb	r3, [r7, #11]
 8001928:	429a      	cmp	r2, r3
 800192a:	f4ff af17 	bcc.w	800175c <bmi3_set_sensor_config+0x30>
    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 800192e:	e001      	b.n	8001934 <bmi3_set_sensor_config+0x208>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001930:	23ff      	movs	r3, #255	; 0xff
 8001932:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001934:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <bmi3_get_sensor_config>:

/*!
 * @brief This API gets the sensor/feature configuration.
 */
int8_t bmi3_get_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	460b      	mov	r3, r1
 800194a:	607a      	str	r2, [r7, #4]
 800194c:	72fb      	strb	r3, [r7, #11]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to define loop */
    uint8_t loop = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 fbf8 	bl	8002148 <null_ptr_check>
 8001958:	4603      	mov	r3, r0
 800195a:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 800195c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001960:	2b00      	cmp	r3, #0
 8001962:	f040 80f1 	bne.w	8001b48 <bmi3_get_sensor_config+0x208>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 80ed 	beq.w	8001b48 <bmi3_get_sensor_config+0x208>
    {
        for (loop = 0; loop < n_sens; loop++)
 800196e:	2300      	movs	r3, #0
 8001970:	75bb      	strb	r3, [r7, #22]
 8001972:	e0e3      	b.n	8001b3c <bmi3_get_sensor_config+0x1fc>
        {
            switch (sens_cfg[loop].type)
 8001974:	7dbb      	ldrb	r3, [r7, #22]
 8001976:	222e      	movs	r2, #46	; 0x2e
 8001978:	fb02 f303 	mul.w	r3, r2, r3
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b0c      	cmp	r3, #12
 8001984:	f200 80d4 	bhi.w	8001b30 <bmi3_get_sensor_config+0x1f0>
 8001988:	a201      	add	r2, pc, #4	; (adr r2, 8001990 <bmi3_get_sensor_config+0x50>)
 800198a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198e:	bf00      	nop
 8001990:	080019c5 	.word	0x080019c5
 8001994:	080019e1 	.word	0x080019e1
 8001998:	08001a35 	.word	0x08001a35
 800199c:	080019fd 	.word	0x080019fd
 80019a0:	08001a19 	.word	0x08001a19
 80019a4:	08001aa5 	.word	0x08001aa5
 80019a8:	08001a6d 	.word	0x08001a6d
 80019ac:	08001a89 	.word	0x08001a89
 80019b0:	08001a51 	.word	0x08001a51
 80019b4:	08001ac1 	.word	0x08001ac1
 80019b8:	08001add 	.word	0x08001add
 80019bc:	08001af9 	.word	0x08001af9
 80019c0:	08001b15 	.word	0x08001b15
            {
                case BMI3_ACCEL:
                    rslt = get_accel_config(&sens_cfg[loop].cfg.acc, dev);
 80019c4:	7dbb      	ldrb	r3, [r7, #22]
 80019c6:	222e      	movs	r2, #46	; 0x2e
 80019c8:	fb02 f303 	mul.w	r3, r2, r3
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	4413      	add	r3, r2
 80019d0:	3302      	adds	r3, #2
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 f975 	bl	8001cc4 <get_accel_config>
 80019da:	4603      	mov	r3, r0
 80019dc:	75fb      	strb	r3, [r7, #23]
                    break;
 80019de:	e0aa      	b.n	8001b36 <bmi3_get_sensor_config+0x1f6>

                case BMI3_GYRO:
                    rslt = get_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 80019e0:	7dbb      	ldrb	r3, [r7, #22]
 80019e2:	222e      	movs	r2, #46	; 0x2e
 80019e4:	fb02 f303 	mul.w	r3, r2, r3
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	4413      	add	r3, r2
 80019ec:	3302      	adds	r3, #2
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 fb5c 	bl	80020ae <get_gyro_config>
 80019f6:	4603      	mov	r3, r0
 80019f8:	75fb      	strb	r3, [r7, #23]
                    break;
 80019fa:	e09c      	b.n	8001b36 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ANY_MOTION:
                    rslt = get_any_motion_config(&sens_cfg[loop].cfg.any_motion, dev);
 80019fc:	7dbb      	ldrb	r3, [r7, #22]
 80019fe:	222e      	movs	r2, #46	; 0x2e
 8001a00:	fb02 f303 	mul.w	r3, r2, r3
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	4413      	add	r3, r2
 8001a08:	3302      	adds	r3, #2
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f000 fbbb 	bl	8002188 <get_any_motion_config>
 8001a12:	4603      	mov	r3, r0
 8001a14:	75fb      	strb	r3, [r7, #23]
                    break;
 8001a16:	e08e      	b.n	8001b36 <bmi3_get_sensor_config+0x1f6>

                case BMI3_NO_MOTION:
                    rslt = get_no_motion_config(&sens_cfg[loop].cfg.no_motion, dev);
 8001a18:	7dbb      	ldrb	r3, [r7, #22]
 8001a1a:	222e      	movs	r2, #46	; 0x2e
 8001a1c:	fb02 f303 	mul.w	r3, r2, r3
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	4413      	add	r3, r2
 8001a24:	3302      	adds	r3, #2
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 fd24 	bl	8002476 <get_no_motion_config>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	75fb      	strb	r3, [r7, #23]
                    break;
 8001a32:	e080      	b.n	8001b36 <bmi3_get_sensor_config+0x1f6>

                case BMI3_SIG_MOTION:
                    rslt = get_sig_motion_config(&sens_cfg[loop].cfg.sig_motion, dev);
 8001a34:	7dbb      	ldrb	r3, [r7, #22]
 8001a36:	222e      	movs	r2, #46	; 0x2e
 8001a38:	fb02 f303 	mul.w	r3, r2, r3
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	4413      	add	r3, r2
 8001a40:	3302      	adds	r3, #2
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 ff89 	bl	800295c <get_sig_motion_config>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	75fb      	strb	r3, [r7, #23]
                    break;
 8001a4e:	e072      	b.n	8001b36 <bmi3_get_sensor_config+0x1f6>

                case BMI3_FLAT:
                    rslt = get_flat_config(&sens_cfg[loop].cfg.flat, dev);
 8001a50:	7dbb      	ldrb	r3, [r7, #22]
 8001a52:	222e      	movs	r2, #46	; 0x2e
 8001a54:	fb02 f303 	mul.w	r3, r2, r3
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3302      	adds	r3, #2
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f000 fe7b 	bl	800275c <get_flat_config>
 8001a66:	4603      	mov	r3, r0
 8001a68:	75fb      	strb	r3, [r7, #23]
                    break;
 8001a6a:	e064      	b.n	8001b36 <bmi3_get_sensor_config+0x1f6>

                case BMI3_TILT:
                    rslt = get_tilt_config(&sens_cfg[loop].cfg.tilt, dev);
 8001a6c:	7dbb      	ldrb	r3, [r7, #22]
 8001a6e:	222e      	movs	r2, #46	; 0x2e
 8001a70:	fb02 f303 	mul.w	r3, r2, r3
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	4413      	add	r3, r2
 8001a78:	3302      	adds	r3, #2
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f001 f8bf 	bl	8002c00 <get_tilt_config>
 8001a82:	4603      	mov	r3, r0
 8001a84:	75fb      	strb	r3, [r7, #23]
                    break;
 8001a86:	e056      	b.n	8001b36 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ORIENTATION:
                    rslt = get_orientation_config(&sens_cfg[loop].cfg.orientation, dev);
 8001a88:	7dbb      	ldrb	r3, [r7, #22]
 8001a8a:	222e      	movs	r2, #46	; 0x2e
 8001a8c:	fb02 f303 	mul.w	r3, r2, r3
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	4413      	add	r3, r2
 8001a94:	3302      	adds	r3, #2
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f001 f982 	bl	8002da2 <get_orientation_config>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	75fb      	strb	r3, [r7, #23]
                    break;
 8001aa2:	e048      	b.n	8001b36 <bmi3_get_sensor_config+0x1f6>

                case BMI3_STEP_COUNTER:
                    rslt = get_step_config(&sens_cfg[loop].cfg.step_counter, dev);
 8001aa4:	7dbb      	ldrb	r3, [r7, #22]
 8001aa6:	222e      	movs	r2, #46	; 0x2e
 8001aa8:	fb02 f303 	mul.w	r3, r2, r3
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	3302      	adds	r3, #2
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f001 faba 	bl	800302e <get_step_config>
 8001aba:	4603      	mov	r3, r0
 8001abc:	75fb      	strb	r3, [r7, #23]
                    break;
 8001abe:	e03a      	b.n	8001b36 <bmi3_get_sensor_config+0x1f6>

                case BMI3_TAP:
                    rslt = get_tap_config(&sens_cfg[loop].cfg.tap, dev);
 8001ac0:	7dbb      	ldrb	r3, [r7, #22]
 8001ac2:	222e      	movs	r2, #46	; 0x2e
 8001ac4:	fb02 f303 	mul.w	r3, r2, r3
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	4413      	add	r3, r2
 8001acc:	3302      	adds	r3, #2
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f001 ff44 	bl	800395e <get_tap_config>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	75fb      	strb	r3, [r7, #23]
                    break;
 8001ada:	e02c      	b.n	8001b36 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ALT_ACCEL:
                    rslt = get_alternate_accel_config(&sens_cfg[loop].cfg.alt_acc, dev);
 8001adc:	7dbb      	ldrb	r3, [r7, #22]
 8001ade:	222e      	movs	r2, #46	; 0x2e
 8001ae0:	fb02 f303 	mul.w	r3, r2, r3
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3302      	adds	r3, #2
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f002 f94b 	bl	8003d88 <get_alternate_accel_config>
 8001af2:	4603      	mov	r3, r0
 8001af4:	75fb      	strb	r3, [r7, #23]
                    break;
 8001af6:	e01e      	b.n	8001b36 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ALT_GYRO:
                    rslt = get_alternate_gyro_config(&sens_cfg[loop].cfg.alt_gyr, dev);
 8001af8:	7dbb      	ldrb	r3, [r7, #22]
 8001afa:	222e      	movs	r2, #46	; 0x2e
 8001afc:	fb02 f303 	mul.w	r3, r2, r3
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	3302      	adds	r3, #2
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f002 f9c7 	bl	8003e9c <get_alternate_gyro_config>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	75fb      	strb	r3, [r7, #23]
                    break;
 8001b12:	e010      	b.n	8001b36 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ALT_AUTO_CONFIG:
                    rslt = get_alternate_auto_config(&sens_cfg[loop].cfg.alt_auto_cfg, dev);
 8001b14:	7dbb      	ldrb	r3, [r7, #22]
 8001b16:	222e      	movs	r2, #46	; 0x2e
 8001b18:	fb02 f303 	mul.w	r3, r2, r3
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	4413      	add	r3, r2
 8001b20:	3302      	adds	r3, #2
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f002 fa40 	bl	8003faa <get_alternate_auto_config>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	75fb      	strb	r3, [r7, #23]
                    break;
 8001b2e:	e002      	b.n	8001b36 <bmi3_get_sensor_config+0x1f6>

                default:
                    rslt = BMI3_E_INVALID_SENSOR;
 8001b30:	23fa      	movs	r3, #250	; 0xfa
 8001b32:	75fb      	strb	r3, [r7, #23]
                    break;
 8001b34:	bf00      	nop
        for (loop = 0; loop < n_sens; loop++)
 8001b36:	7dbb      	ldrb	r3, [r7, #22]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	75bb      	strb	r3, [r7, #22]
 8001b3c:	7dba      	ldrb	r2, [r7, #22]
 8001b3e:	7afb      	ldrb	r3, [r7, #11]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	f4ff af17 	bcc.w	8001974 <bmi3_get_sensor_config+0x34>
    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 8001b46:	e001      	b.n	8001b4c <bmi3_get_sensor_config+0x20c>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001b48:	23ff      	movs	r3, #255	; 0xff
 8001b4a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001b4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <set_accel_config>:
/*!
 * @brief This internal API sets accelerometer configurations like ODR, accel mode,
 * bandwidth, average samples and range.
 */
static int8_t set_accel_config(struct bmi3_accel_config *config, struct bmi3_dev *dev)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8001b62:	2300      	movs	r3, #0
 8001b64:	813b      	strh	r3, [r7, #8]

    uint16_t odr, range, bwp, avg_num, acc_mode;

    if (config != NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 80a3 	beq.w	8001cb4 <set_accel_config+0x15c>
    {
        /* Validate bandwidth and averaging samples */
        rslt = validate_bw_avg_acc_mode(&config->bwp, &config->acc_mode, &config->avg_num, dev);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	1c58      	adds	r0, r3, #1
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	1c99      	adds	r1, r3, #2
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	1d1a      	adds	r2, r3, #4
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	f000 f8ef 	bl	8001d5e <validate_bw_avg_acc_mode>
 8001b80:	4603      	mov	r3, r0
 8001b82:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001b84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d108      	bne.n	8001b9e <set_accel_config+0x46>
        {
            /* Validate ODR and range */
            rslt = validate_acc_odr_range(&config->odr, &config->range, dev);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3303      	adds	r3, #3
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	f000 f91d 	bl	8001dd4 <validate_acc_odr_range>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMI3_OK)
 8001b9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d11f      	bne.n	8001be6 <set_accel_config+0x8e>
        {
            if (config->acc_mode == BMI3_ACC_MODE_LOW_PWR)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	789b      	ldrb	r3, [r3, #2]
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d109      	bne.n	8001bc2 <set_accel_config+0x6a>
            {
                rslt = validate_acc_odr_avg(config->odr, config->avg_num);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	781a      	ldrb	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	791b      	ldrb	r3, [r3, #4]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4610      	mov	r0, r2
 8001bba:	f002 fa31 	bl	8004020 <validate_acc_odr_avg>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	75fb      	strb	r3, [r7, #23]
            }

            if ((config->acc_mode == BMI3_ACC_MODE_NORMAL) || (config->acc_mode == BMI3_ACC_MODE_HIGH_PERF))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	789b      	ldrb	r3, [r3, #2]
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d003      	beq.n	8001bd2 <set_accel_config+0x7a>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	789b      	ldrb	r3, [r3, #2]
 8001bce:	2b07      	cmp	r3, #7
 8001bd0:	d109      	bne.n	8001be6 <set_accel_config+0x8e>
            {
                if ((config->odr >= BMI3_ACC_ODR_0_78HZ) && (config->odr <= BMI3_ACC_ODR_6_25HZ))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d005      	beq.n	8001be6 <set_accel_config+0x8e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d801      	bhi.n	8001be6 <set_accel_config+0x8e>
                {
                    rslt = BMI3_E_ACC_INVALID_CFG;
 8001be2:	23fc      	movs	r3, #252	; 0xfc
 8001be4:	75fb      	strb	r3, [r7, #23]
                }
            }
        }

        if (rslt == BMI3_OK)
 8001be6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d15f      	bne.n	8001cae <set_accel_config+0x156>
        {
            /* Set accelerometer ODR */
            odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_ACC_ODR, config->odr);
 8001bee:	7a3b      	ldrb	r3, [r7, #8]
 8001bf0:	b21b      	sxth	r3, r3
 8001bf2:	f023 030f 	bic.w	r3, r3, #15
 8001bf6:	b21a      	sxth	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	4313      	orrs	r3, r2
 8001c06:	b21b      	sxth	r3, r3
 8001c08:	82bb      	strh	r3, [r7, #20]

            /* Set accelerometer range */
            range = BMI3_SET_BITS(reg_data[0], BMI3_ACC_RANGE, config->range);
 8001c0a:	7a3b      	ldrb	r3, [r7, #8]
 8001c0c:	b21b      	sxth	r3, r3
 8001c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c12:	b21a      	sxth	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	78db      	ldrb	r3, [r3, #3]
 8001c18:	011b      	lsls	r3, r3, #4
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c20:	b21b      	sxth	r3, r3
 8001c22:	4313      	orrs	r3, r2
 8001c24:	b21b      	sxth	r3, r3
 8001c26:	827b      	strh	r3, [r7, #18]

            /* Set accelerometer bandwidth */
            bwp = BMI3_SET_BITS(reg_data[0], BMI3_ACC_BW, config->bwp);
 8001c28:	7a3b      	ldrb	r3, [r7, #8]
 8001c2a:	b21b      	sxth	r3, r3
 8001c2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c30:	b21a      	sxth	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	785b      	ldrb	r3, [r3, #1]
 8001c36:	01db      	lsls	r3, r3, #7
 8001c38:	b21b      	sxth	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	823b      	strh	r3, [r7, #16]

            /* Set accelerometer average number of samples */
            avg_num = BMI3_SET_BITS(reg_data[1], BMI3_ACC_AVG_NUM, config->avg_num);
 8001c44:	7a7b      	ldrb	r3, [r7, #9]
 8001c46:	b21a      	sxth	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	791b      	ldrb	r3, [r3, #4]
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	b21b      	sxth	r3, r3
 8001c50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c54:	b21b      	sxth	r3, r3
 8001c56:	4313      	orrs	r3, r2
 8001c58:	b21b      	sxth	r3, r3
 8001c5a:	81fb      	strh	r3, [r7, #14]

            /* Set accelerometer accel mode */
            acc_mode = BMI3_SET_BITS(reg_data[1], BMI3_ACC_MODE, config->acc_mode);
 8001c5c:	7a7b      	ldrb	r3, [r7, #9]
 8001c5e:	b21a      	sxth	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	789b      	ldrb	r3, [r3, #2]
 8001c64:	031b      	lsls	r3, r3, #12
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001c6c:	b21b      	sxth	r3, r3
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	b21b      	sxth	r3, r3
 8001c72:	81bb      	strh	r3, [r7, #12]

            reg_data[0] = (uint8_t)(odr | range | bwp);
 8001c74:	8abb      	ldrh	r3, [r7, #20]
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	8a7b      	ldrh	r3, [r7, #18]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	8a3b      	ldrh	r3, [r7, #16]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	4313      	orrs	r3, r2
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	723b      	strb	r3, [r7, #8]
            reg_data[1] = (uint8_t)((avg_num | acc_mode) >> 8);
 8001c8a:	89fa      	ldrh	r2, [r7, #14]
 8001c8c:	89bb      	ldrh	r3, [r7, #12]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	0a1b      	lsrs	r3, r3, #8
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	727b      	strb	r3, [r7, #9]

            /* Set configurations for accel */
            rslt = bmi3_set_regs(BMI3_REG_ACC_CONF, reg_data, 2, dev);
 8001c9a:	f107 0108 	add.w	r1, r7, #8
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	2020      	movs	r0, #32
 8001ca4:	f7ff fc4f 	bl	8001546 <bmi3_set_regs>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	75fb      	strb	r3, [r7, #23]
 8001cac:	e004      	b.n	8001cb8 <set_accel_config+0x160>
        }
        else
        {
            rslt = BMI3_E_ACC_INVALID_CFG;
 8001cae:	23fc      	movs	r3, #252	; 0xfc
 8001cb0:	75fb      	strb	r3, [r7, #23]
 8001cb2:	e001      	b.n	8001cb8 <set_accel_config+0x160>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001cb4:	23ff      	movs	r3, #255	; 0xff
 8001cb6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001cb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <get_accel_config>:
/*!
 * @brief This internal API gets accelerometer configurations like ODR,
 * bandwidth, accel mode, average samples and gravity range.
 */
static int8_t get_accel_config(struct bmi3_accel_config *config, struct bmi3_dev *dev)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 8001cce:	2300      	movs	r3, #0
 8001cd0:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d03a      	beq.n	8001d4e <get_accel_config+0x8a>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_ACC_CONF, data_array, 2, dev);
 8001cd8:	f107 0108 	add.w	r1, r7, #8
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	2020      	movs	r0, #32
 8001ce2:	f7ff fbcb 	bl	800147c <bmi3_get_regs>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8001cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d12f      	bne.n	8001d52 <get_accel_config+0x8e>
        {
            reg_data = data_array[0];
 8001cf2:	7a3b      	ldrb	r3, [r7, #8]
 8001cf4:	81bb      	strh	r3, [r7, #12]

            /* Get accelerometer ODR */
            config->odr = BMI3_GET_BIT_POS0(reg_data, BMI3_ACC_ODR);
 8001cf6:	89bb      	ldrh	r3, [r7, #12]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	701a      	strb	r2, [r3, #0]

            /* Get accelerometer range */
            config->range = BMI3_GET_BITS(reg_data, BMI3_ACC_RANGE);
 8001d04:	89bb      	ldrh	r3, [r7, #12]
 8001d06:	111b      	asrs	r3, r3, #4
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	70da      	strb	r2, [r3, #3]

            /* Get accelerometer bandwidth */
            config->bwp = BMI3_GET_BITS(reg_data, BMI3_ACC_BW);
 8001d14:	89bb      	ldrh	r3, [r7, #12]
 8001d16:	11db      	asrs	r3, r3, #7
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	705a      	strb	r2, [r3, #1]

            reg_data = (uint16_t)data_array[1] << 8;
 8001d24:	7a7b      	ldrb	r3, [r7, #9]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	021b      	lsls	r3, r3, #8
 8001d2a:	81bb      	strh	r3, [r7, #12]

            /* Get accelerometer average samples */
            config->avg_num = BMI3_GET_BITS(reg_data, BMI3_ACC_AVG_NUM);
 8001d2c:	89bb      	ldrh	r3, [r7, #12]
 8001d2e:	121b      	asrs	r3, r3, #8
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	711a      	strb	r2, [r3, #4]

            /* Get accel mode */
            config->acc_mode = BMI3_GET_BITS(reg_data, BMI3_ACC_MODE);
 8001d3c:	89bb      	ldrh	r3, [r7, #12]
 8001d3e:	131b      	asrs	r3, r3, #12
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	709a      	strb	r2, [r3, #2]
 8001d4c:	e001      	b.n	8001d52 <get_accel_config+0x8e>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001d4e:	23ff      	movs	r3, #255	; 0xff
 8001d50:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <validate_bw_avg_acc_mode>:
/*!
 * @brief This internal API validates bandwidth and accel mode of the
 * accelerometer set by the user.
 */
static int8_t validate_bw_avg_acc_mode(uint8_t *bandwidth, uint8_t *acc_mode, uint8_t *avg_num, struct bmi3_dev *dev)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	603b      	str	r3, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    if ((bandwidth != NULL) && (acc_mode != NULL) && (avg_num != NULL))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d026      	beq.n	8001dc0 <validate_bw_avg_acc_mode+0x62>
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d023      	beq.n	8001dc0 <validate_bw_avg_acc_mode+0x62>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d020      	beq.n	8001dc0 <validate_bw_avg_acc_mode+0x62>
    {
        /* Validate and auto-correct accel mode */
        rslt = check_boundary_val(acc_mode, BMI3_ACC_MODE_DISABLE, BMI3_ACC_MODE_HIGH_PERF, dev);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2207      	movs	r2, #7
 8001d82:	2100      	movs	r1, #0
 8001d84:	68b8      	ldr	r0, [r7, #8]
 8001d86:	f000 f84e 	bl	8001e26 <check_boundary_val>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001d8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d117      	bne.n	8001dc6 <validate_bw_avg_acc_mode+0x68>
        {
            /* Validate for averaging number of samples */
            rslt = check_boundary_val(avg_num, BMI3_ACC_AVG1, BMI3_ACC_AVG64, dev);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2206      	movs	r2, #6
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f842 	bl	8001e26 <check_boundary_val>
 8001da2:	4603      	mov	r3, r0
 8001da4:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8001da6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10b      	bne.n	8001dc6 <validate_bw_avg_acc_mode+0x68>
            {
                /* Validate bandwidth */
                rslt = check_boundary_val(bandwidth, BMI3_ACC_BW_ODR_HALF, BMI3_ACC_BW_ODR_QUARTER, dev);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	2201      	movs	r2, #1
 8001db2:	2100      	movs	r1, #0
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f000 f836 	bl	8001e26 <check_boundary_val>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 8001dbe:	e002      	b.n	8001dc6 <validate_bw_avg_acc_mode+0x68>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001dc0:	23ff      	movs	r3, #255	; 0xff
 8001dc2:	75fb      	strb	r3, [r7, #23]
 8001dc4:	e000      	b.n	8001dc8 <validate_bw_avg_acc_mode+0x6a>
        if (rslt == BMI3_OK)
 8001dc6:	bf00      	nop
    }

    return rslt;
 8001dc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <validate_acc_odr_range>:
/*!
 * @brief This internal API validates ODR and range of the accelerometer set by
 * the user.
 */
static int8_t validate_acc_odr_range(uint8_t *odr, uint8_t *range, struct bmi3_dev *dev)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    if ((odr != NULL) && (range != NULL))
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d017      	beq.n	8001e16 <validate_acc_odr_range+0x42>
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d014      	beq.n	8001e16 <validate_acc_odr_range+0x42>
    {
        /* Validate and auto correct ODR */
        rslt = check_boundary_val(odr, BMI3_ACC_ODR_0_78HZ, BMI3_ACC_ODR_6400HZ, dev);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	220e      	movs	r2, #14
 8001df0:	2101      	movs	r1, #1
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 f817 	bl	8001e26 <check_boundary_val>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001dfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10a      	bne.n	8001e1a <validate_acc_odr_range+0x46>
        {
            /* Validate and auto correct Range */
            rslt = check_boundary_val(range, BMI3_ACC_RANGE_2G, BMI3_ACC_RANGE_16G, dev);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2203      	movs	r2, #3
 8001e08:	2100      	movs	r1, #0
 8001e0a:	68b8      	ldr	r0, [r7, #8]
 8001e0c:	f000 f80b 	bl	8001e26 <check_boundary_val>
 8001e10:	4603      	mov	r3, r0
 8001e12:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 8001e14:	e001      	b.n	8001e1a <validate_acc_odr_range+0x46>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001e16:	23ff      	movs	r3, #255	; 0xff
 8001e18:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001e1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <check_boundary_val>:

/*!
 * @brief This internal API is used to validate the boundary conditions.
 */
static int8_t check_boundary_val(uint8_t *val, uint8_t min, uint8_t max, struct bmi3_dev *dev)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b086      	sub	sp, #24
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	72fb      	strb	r3, [r7, #11]
 8001e34:	4613      	mov	r3, r2
 8001e36:	72bb      	strb	r3, [r7, #10]
    /* Variable to store result of API */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f985 	bl	8002148 <null_ptr_check>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (val != NULL))
 8001e42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d121      	bne.n	8001e8e <check_boundary_val+0x68>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d01e      	beq.n	8001e8e <check_boundary_val+0x68>
    {
        /* Check if value is below minimum value */
        if (*val < min)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	7afa      	ldrb	r2, [r7, #11]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d909      	bls.n	8001e6e <check_boundary_val+0x48>
        {
            /* Auto correct the invalid value to minimum value */
            *val = min;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	7afa      	ldrb	r2, [r7, #11]
 8001e5e:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI3_I_MIN_VALUE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	7a1b      	ldrb	r3, [r3, #8]
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	721a      	strb	r2, [r3, #8]
        }

        /* Check if value is above maximum value */
        if (*val > max)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	7aba      	ldrb	r2, [r7, #10]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d20c      	bcs.n	8001e92 <check_boundary_val+0x6c>
        {
            /* Auto correct the invalid value to maximum value */
            *val = max;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	7aba      	ldrb	r2, [r7, #10]
 8001e7c:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI3_I_MAX_VALUE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	7a1b      	ldrb	r3, [r3, #8]
 8001e82:	f043 0302 	orr.w	r3, r3, #2
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	721a      	strb	r2, [r3, #8]
        if (*val > max)
 8001e8c:	e001      	b.n	8001e92 <check_boundary_val+0x6c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001e8e:	23ff      	movs	r3, #255	; 0xff
 8001e90:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001e92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <set_gyro_config>:
/*!
 * @brief This internal API sets gyroscope configurations like ODR,
 * bandwidth, gyro mode, average samples and dps range.
 */
static int8_t set_gyro_config(struct bmi3_gyro_config *config, struct bmi3_dev *dev)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b086      	sub	sp, #24
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	813b      	strh	r3, [r7, #8]

    uint16_t odr, range, bwp, avg_num, gyr_mode;

    if (config != NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 8091 	beq.w	8001fd6 <set_gyro_config+0x138>
    {
        /* Validate bandwidth, average samples and mode */
        rslt = validate_bw_avg_gyr_mode(&config->bwp, &config->gyr_mode, &config->avg_num, dev);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	1c58      	adds	r0, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	1c99      	adds	r1, r3, #2
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	1d1a      	adds	r2, r3, #4
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	f000 f890 	bl	8001fe6 <validate_bw_avg_gyr_mode>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001eca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d108      	bne.n	8001ee4 <set_gyro_config+0x46>
        {
            /* Validate ODR and range */
            rslt = validate_gyr_odr_range(&config->odr, &config->range, dev);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3303      	adds	r3, #3
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	4619      	mov	r1, r3
 8001edc:	f000 f8be 	bl	800205c <validate_gyr_odr_range>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMI3_OK)
 8001ee4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10d      	bne.n	8001f08 <set_gyro_config+0x6a>
        {
            if (config->gyr_mode == BMI3_GYR_MODE_LOW_PWR)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	789b      	ldrb	r3, [r3, #2]
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d109      	bne.n	8001f08 <set_gyro_config+0x6a>
            {
                rslt = validate_gyr_odr_avg(config->odr, config->avg_num);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	781a      	ldrb	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	791b      	ldrb	r3, [r3, #4]
 8001efc:	4619      	mov	r1, r3
 8001efe:	4610      	mov	r0, r2
 8001f00:	f002 f96c 	bl	80041dc <validate_gyr_odr_avg>
 8001f04:	4603      	mov	r3, r0
 8001f06:	75fb      	strb	r3, [r7, #23]
            }
        }

        if (rslt == BMI3_OK)
 8001f08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d15f      	bne.n	8001fd0 <set_gyro_config+0x132>
        {
            /* Set gyroscope ODR */
            odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_GYR_ODR, config->odr);
 8001f10:	7a3b      	ldrb	r3, [r7, #8]
 8001f12:	b21b      	sxth	r3, r3
 8001f14:	f023 030f 	bic.w	r3, r3, #15
 8001f18:	b21a      	sxth	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	b21b      	sxth	r3, r3
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	b21b      	sxth	r3, r3
 8001f26:	4313      	orrs	r3, r2
 8001f28:	b21b      	sxth	r3, r3
 8001f2a:	82bb      	strh	r3, [r7, #20]

            /* Set gyroscope range */
            range = BMI3_SET_BITS(reg_data[0], BMI3_GYR_RANGE, config->range);
 8001f2c:	7a3b      	ldrb	r3, [r7, #8]
 8001f2e:	b21b      	sxth	r3, r3
 8001f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f34:	b21a      	sxth	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	78db      	ldrb	r3, [r3, #3]
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f42:	b21b      	sxth	r3, r3
 8001f44:	4313      	orrs	r3, r2
 8001f46:	b21b      	sxth	r3, r3
 8001f48:	827b      	strh	r3, [r7, #18]

            /* Set gyroscope bandwidth */
            bwp = BMI3_SET_BITS(reg_data[0], BMI3_GYR_BW, config->bwp);
 8001f4a:	7a3b      	ldrb	r3, [r7, #8]
 8001f4c:	b21b      	sxth	r3, r3
 8001f4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f52:	b21a      	sxth	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	785b      	ldrb	r3, [r3, #1]
 8001f58:	01db      	lsls	r3, r3, #7
 8001f5a:	b21b      	sxth	r3, r3
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	b21b      	sxth	r3, r3
 8001f60:	4313      	orrs	r3, r2
 8001f62:	b21b      	sxth	r3, r3
 8001f64:	823b      	strh	r3, [r7, #16]

            /* Set gyroscope average sample */
            avg_num = BMI3_SET_BITS(reg_data[1], BMI3_GYR_AVG_NUM, config->avg_num);
 8001f66:	7a7b      	ldrb	r3, [r7, #9]
 8001f68:	b21a      	sxth	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	791b      	ldrb	r3, [r3, #4]
 8001f6e:	021b      	lsls	r3, r3, #8
 8001f70:	b21b      	sxth	r3, r3
 8001f72:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f76:	b21b      	sxth	r3, r3
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	b21b      	sxth	r3, r3
 8001f7c:	81fb      	strh	r3, [r7, #14]

            /* Set gyroscope mode */
            gyr_mode = BMI3_SET_BITS(reg_data[1], BMI3_GYR_MODE, config->gyr_mode);
 8001f7e:	7a7b      	ldrb	r3, [r7, #9]
 8001f80:	b21a      	sxth	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	789b      	ldrb	r3, [r3, #2]
 8001f86:	031b      	lsls	r3, r3, #12
 8001f88:	b21b      	sxth	r3, r3
 8001f8a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001f8e:	b21b      	sxth	r3, r3
 8001f90:	4313      	orrs	r3, r2
 8001f92:	b21b      	sxth	r3, r3
 8001f94:	81bb      	strh	r3, [r7, #12]

            reg_data[0] = (uint8_t)(odr | range | bwp);
 8001f96:	8abb      	ldrh	r3, [r7, #20]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	8a7b      	ldrh	r3, [r7, #18]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	8a3b      	ldrh	r3, [r7, #16]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	723b      	strb	r3, [r7, #8]
            reg_data[1] = (uint8_t)((avg_num | gyr_mode) >> 8);
 8001fac:	89fa      	ldrh	r2, [r7, #14]
 8001fae:	89bb      	ldrh	r3, [r7, #12]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	0a1b      	lsrs	r3, r3, #8
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	727b      	strb	r3, [r7, #9]

            /* Set gyro configurations */
            rslt = bmi3_set_regs(BMI3_REG_GYR_CONF, reg_data, 2, dev);
 8001fbc:	f107 0108 	add.w	r1, r7, #8
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	2021      	movs	r0, #33	; 0x21
 8001fc6:	f7ff fabe 	bl	8001546 <bmi3_set_regs>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	75fb      	strb	r3, [r7, #23]
 8001fce:	e004      	b.n	8001fda <set_gyro_config+0x13c>
        }
        else
        {
            rslt = BMI3_E_GYRO_INVALID_CFG;
 8001fd0:	23fb      	movs	r3, #251	; 0xfb
 8001fd2:	75fb      	strb	r3, [r7, #23]
 8001fd4:	e001      	b.n	8001fda <set_gyro_config+0x13c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001fd6:	23ff      	movs	r3, #255	; 0xff
 8001fd8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001fda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <validate_bw_avg_gyr_mode>:
 */
static int8_t validate_bw_avg_gyr_mode(uint8_t *bandwidth,
                                       uint8_t *gyr_mode,
                                       const uint8_t *avg_num,
                                       struct bmi3_dev *dev)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	60f8      	str	r0, [r7, #12]
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	603b      	str	r3, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    if ((bandwidth != NULL) && (gyr_mode != NULL) && (avg_num != NULL))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d026      	beq.n	8002048 <validate_bw_avg_gyr_mode+0x62>
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d023      	beq.n	8002048 <validate_bw_avg_gyr_mode+0x62>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d020      	beq.n	8002048 <validate_bw_avg_gyr_mode+0x62>
    {
        /* Validate and auto-correct gyro mode */
        rslt = check_boundary_val(gyr_mode, BMI3_GYR_MODE_DISABLE, BMI3_GYR_MODE_HIGH_PERF, dev);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2207      	movs	r2, #7
 800200a:	2100      	movs	r1, #0
 800200c:	68b8      	ldr	r0, [r7, #8]
 800200e:	f7ff ff0a 	bl	8001e26 <check_boundary_val>
 8002012:	4603      	mov	r3, r0
 8002014:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8002016:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d117      	bne.n	800204e <validate_bw_avg_gyr_mode+0x68>
        {
            /* Validate for averaging mode */
            rslt = check_boundary_val(bandwidth, BMI3_GYR_AVG1, BMI3_GYR_AVG64, dev);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	2206      	movs	r2, #6
 8002022:	2100      	movs	r1, #0
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f7ff fefe 	bl	8001e26 <check_boundary_val>
 800202a:	4603      	mov	r3, r0
 800202c:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 800202e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10b      	bne.n	800204e <validate_bw_avg_gyr_mode+0x68>
            {
                /* Validate for bandwidth */
                rslt = check_boundary_val(bandwidth, BMI3_GYR_BW_ODR_HALF, BMI3_GYR_BW_ODR_QUARTER, dev);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	2201      	movs	r2, #1
 800203a:	2100      	movs	r1, #0
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f7ff fef2 	bl	8001e26 <check_boundary_val>
 8002042:	4603      	mov	r3, r0
 8002044:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 8002046:	e002      	b.n	800204e <validate_bw_avg_gyr_mode+0x68>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002048:	23ff      	movs	r3, #255	; 0xff
 800204a:	75fb      	strb	r3, [r7, #23]
 800204c:	e000      	b.n	8002050 <validate_bw_avg_gyr_mode+0x6a>
        if (rslt == BMI3_OK)
 800204e:	bf00      	nop
    }

    return rslt;
 8002050:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <validate_gyr_odr_range>:
/*!
 * @brief This internal API validates ODR and range of the gyroscope set by
 * the user.
 */
static int8_t validate_gyr_odr_range(uint8_t *odr, uint8_t *range, struct bmi3_dev *dev)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    if ((odr != NULL) && (range != NULL))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d017      	beq.n	800209e <validate_gyr_odr_range+0x42>
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d014      	beq.n	800209e <validate_gyr_odr_range+0x42>
    {
        /* Validate and auto correct ODR */
        rslt = check_boundary_val(odr, BMI3_GYR_ODR_0_78HZ, BMI3_GYR_ODR_6400HZ, dev);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	220e      	movs	r2, #14
 8002078:	2101      	movs	r1, #1
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f7ff fed3 	bl	8001e26 <check_boundary_val>
 8002080:	4603      	mov	r3, r0
 8002082:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8002084:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10a      	bne.n	80020a2 <validate_gyr_odr_range+0x46>
        {
            /* Validate and auto correct Range */
            rslt = check_boundary_val(range, BMI3_GYR_RANGE_125DPS, BMI3_GYR_RANGE_2000DPS, dev);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2204      	movs	r2, #4
 8002090:	2100      	movs	r1, #0
 8002092:	68b8      	ldr	r0, [r7, #8]
 8002094:	f7ff fec7 	bl	8001e26 <check_boundary_val>
 8002098:	4603      	mov	r3, r0
 800209a:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 800209c:	e001      	b.n	80020a2 <validate_gyr_odr_range+0x46>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800209e:	23ff      	movs	r3, #255	; 0xff
 80020a0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80020a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <get_gyro_config>:
/*!
 * @brief This internal API gets gyroscope configurations like ODR, gyro mode,
 * bandwidth, averaging samples and range.
 */
static int8_t get_gyro_config(struct bmi3_gyro_config *config, struct bmi3_dev *dev)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 80020b8:	2300      	movs	r3, #0
 80020ba:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d03a      	beq.n	8002138 <get_gyro_config+0x8a>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_GYR_CONF, data_array, 2, dev);
 80020c2:	f107 0108 	add.w	r1, r7, #8
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2202      	movs	r2, #2
 80020ca:	2021      	movs	r0, #33	; 0x21
 80020cc:	f7ff f9d6 	bl	800147c <bmi3_get_regs>
 80020d0:	4603      	mov	r3, r0
 80020d2:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 80020d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d12f      	bne.n	800213c <get_gyro_config+0x8e>
        {
            reg_data = data_array[0];
 80020dc:	7a3b      	ldrb	r3, [r7, #8]
 80020de:	81bb      	strh	r3, [r7, #12]

            /* Get gyro ODR */
            config->odr = BMI3_GET_BIT_POS0(reg_data, BMI3_GYR_ODR);
 80020e0:	89bb      	ldrh	r3, [r7, #12]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	f003 030f 	and.w	r3, r3, #15
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	701a      	strb	r2, [r3, #0]

            /* Get gyro range */
            config->range = BMI3_GET_BITS(reg_data, BMI3_GYR_RANGE);
 80020ee:	89bb      	ldrh	r3, [r7, #12]
 80020f0:	111b      	asrs	r3, r3, #4
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	70da      	strb	r2, [r3, #3]

            /* Get gyro bandwidth */
            config->bwp = BMI3_GET_BITS(reg_data, BMI3_GYR_BW);
 80020fe:	89bb      	ldrh	r3, [r7, #12]
 8002100:	11db      	asrs	r3, r3, #7
 8002102:	b2db      	uxtb	r3, r3
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	b2da      	uxtb	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	705a      	strb	r2, [r3, #1]

            reg_data = (uint16_t)data_array[1] << 8;
 800210e:	7a7b      	ldrb	r3, [r7, #9]
 8002110:	b29b      	uxth	r3, r3
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	81bb      	strh	r3, [r7, #12]

            /* Get gyro average sample */
            config->avg_num = BMI3_GET_BITS(reg_data, BMI3_GYR_AVG_NUM);
 8002116:	89bb      	ldrh	r3, [r7, #12]
 8002118:	121b      	asrs	r3, r3, #8
 800211a:	b2db      	uxtb	r3, r3
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	b2da      	uxtb	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	711a      	strb	r2, [r3, #4]

            /* Get gyro mode */
            config->gyr_mode = BMI3_GET_BITS(reg_data, BMI3_GYR_MODE);
 8002126:	89bb      	ldrh	r3, [r7, #12]
 8002128:	131b      	asrs	r3, r3, #12
 800212a:	b2db      	uxtb	r3, r3
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	b2da      	uxtb	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	709a      	strb	r2, [r3, #2]
 8002136:	e001      	b.n	800213c <get_gyro_config+0x8e>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002138:	23ff      	movs	r3, #255	; 0xff
 800213a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800213c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi3_dev *dev)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00b      	beq.n	800216e <null_ptr_check+0x26>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d007      	beq.n	800216e <null_ptr_check+0x26>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <null_ptr_check+0x26>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d102      	bne.n	8002174 <null_ptr_check+0x2c>
    {
        rslt = BMI3_E_NULL_PTR;
 800216e:	23ff      	movs	r3, #255	; 0xff
 8002170:	73fb      	strb	r3, [r7, #15]
 8002172:	e001      	b.n	8002178 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI3_OK;
 8002174:	2300      	movs	r3, #0
 8002176:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002178:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <get_any_motion_config>:
/*!
 * @brief This internal API gets any-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t get_any_motion_config(struct bmi3_any_motion_config *config, struct bmi3_dev *dev)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t any_mot_config[6] = { 0 };
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	2300      	movs	r3, #0
 8002198:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of any-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ANY_MOTION, 0 };
 800219a:	2305      	movs	r3, #5
 800219c:	81bb      	strh	r3, [r7, #12]

    uint8_t idx = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	77bb      	strb	r3, [r7, #30]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d07b      	beq.n	80022a0 <get_any_motion_config+0x118>
    {
        /* Set the any-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80021a8:	f107 010c 	add.w	r1, r7, #12
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	2202      	movs	r2, #2
 80021b0:	2041      	movs	r0, #65	; 0x41
 80021b2:	f7ff f9c8 	bl	8001546 <bmi3_set_regs>
 80021b6:	4603      	mov	r3, r0
 80021b8:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 80021ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d170      	bne.n	80022a4 <get_any_motion_config+0x11c>
        {
            /* Get the configuration from the feature engine register where any-motion feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, any_mot_config, 6, dev);
 80021c2:	f107 0110 	add.w	r1, r7, #16
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	2206      	movs	r2, #6
 80021ca:	2042      	movs	r0, #66	; 0x42
 80021cc:	f7ff f956 	bl	800147c <bmi3_get_regs>
 80021d0:	4603      	mov	r3, r0
 80021d2:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 80021d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d163      	bne.n	80022a4 <get_any_motion_config+0x11c>
            {
                /* Get word to calculate threshold and accel reference up from same word */
                lsb = (uint16_t) any_mot_config[idx++];
 80021dc:	7fbb      	ldrb	r3, [r7, #30]
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	77ba      	strb	r2, [r7, #30]
 80021e2:	3320      	adds	r3, #32
 80021e4:	443b      	add	r3, r7
 80021e6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80021ea:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) any_mot_config[idx++] << 8);
 80021ec:	7fbb      	ldrb	r3, [r7, #30]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	77ba      	strb	r2, [r7, #30]
 80021f2:	3320      	adds	r3, #32
 80021f4:	443b      	add	r3, r7
 80021f6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	021b      	lsls	r3, r3, #8
 80021fe:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8002200:	8bba      	ldrh	r2, [r7, #28]
 8002202:	8b7b      	ldrh	r3, [r7, #26]
 8002204:	4313      	orrs	r3, r2
 8002206:	833b      	strh	r3, [r7, #24]

                /* Get threshold */
                config->slope_thres = (lsb_msb & BMI3_ANY_NO_SLOPE_THRESHOLD_MASK);
 8002208:	8b3b      	ldrh	r3, [r7, #24]
 800220a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800220e:	b29a      	uxth	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	805a      	strh	r2, [r3, #2]

                /* Get accel reference up */
                config->acc_ref_up = (lsb_msb & BMI3_ANY_NO_ACC_REF_UP_MASK) >> BMI3_ANY_NO_ACC_REF_UP_POS;
 8002214:	8b3b      	ldrh	r3, [r7, #24]
 8002216:	131b      	asrs	r3, r3, #12
 8002218:	b2db      	uxtb	r3, r3
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	b2da      	uxtb	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate hysteresis from the word */
                lsb = (uint16_t) any_mot_config[idx++];
 8002224:	7fbb      	ldrb	r3, [r7, #30]
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	77ba      	strb	r2, [r7, #30]
 800222a:	3320      	adds	r3, #32
 800222c:	443b      	add	r3, r7
 800222e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002232:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) any_mot_config[idx++] << 8);
 8002234:	7fbb      	ldrb	r3, [r7, #30]
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	77ba      	strb	r2, [r7, #30]
 800223a:	3320      	adds	r3, #32
 800223c:	443b      	add	r3, r7
 800223e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002242:	b29b      	uxth	r3, r3
 8002244:	021b      	lsls	r3, r3, #8
 8002246:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8002248:	8bba      	ldrh	r2, [r7, #28]
 800224a:	8b7b      	ldrh	r3, [r7, #26]
 800224c:	4313      	orrs	r3, r2
 800224e:	833b      	strh	r3, [r7, #24]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_ANY_NO_HYSTERESIS_MASK);
 8002250:	8b3b      	ldrh	r3, [r7, #24]
 8002252:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002256:	b29a      	uxth	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate duration and wait time from the same word */
                lsb = (uint16_t) any_mot_config[idx++];
 800225c:	7fbb      	ldrb	r3, [r7, #30]
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	77ba      	strb	r2, [r7, #30]
 8002262:	3320      	adds	r3, #32
 8002264:	443b      	add	r3, r7
 8002266:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800226a:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) any_mot_config[idx++] << 8);
 800226c:	7fbb      	ldrb	r3, [r7, #30]
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	77ba      	strb	r2, [r7, #30]
 8002272:	3320      	adds	r3, #32
 8002274:	443b      	add	r3, r7
 8002276:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800227a:	b29b      	uxth	r3, r3
 800227c:	021b      	lsls	r3, r3, #8
 800227e:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8002280:	8bba      	ldrh	r2, [r7, #28]
 8002282:	8b7b      	ldrh	r3, [r7, #26]
 8002284:	4313      	orrs	r3, r2
 8002286:	833b      	strh	r3, [r7, #24]

                /* Get duration */
                config->duration = (lsb_msb & BMI3_ANY_NO_DURATION_MASK);
 8002288:	8b3b      	ldrh	r3, [r7, #24]
 800228a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800228e:	b29a      	uxth	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	801a      	strh	r2, [r3, #0]

                /* Get wait time */
                config->wait_time = (lsb_msb & BMI3_ANY_NO_WAIT_TIME_MASK) >> BMI3_ANY_NO_WAIT_TIME_POS;
 8002294:	8b3b      	ldrh	r3, [r7, #24]
 8002296:	0b5b      	lsrs	r3, r3, #13
 8002298:	b29a      	uxth	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	811a      	strh	r2, [r3, #8]
 800229e:	e001      	b.n	80022a4 <get_any_motion_config+0x11c>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80022a0:	23ff      	movs	r3, #255	; 0xff
 80022a2:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80022a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3720      	adds	r7, #32
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <set_any_motion_config>:
/*!
 * @brief This internal API sets any-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t set_any_motion_config(const struct bmi3_any_motion_config *config, struct bmi3_dev *dev)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08e      	sub	sp, #56	; 0x38
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of any-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ANY_MOTION, 0 };
 80022ba:	2305      	movs	r3, #5
 80022bc:	83bb      	strh	r3, [r7, #28]

    /* Array to define the feature configuration */
    uint8_t any_mot_config[6] = { 0 };
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	2300      	movs	r3, #0
 80022c4:	833b      	strh	r3, [r7, #24]

    uint8_t data_array[6] = { 0 };
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	2300      	movs	r3, #0
 80022cc:	823b      	strh	r3, [r7, #16]
    uint16_t acc_ref_up;

    /* Wait time for clearing the event after slope is below threshold */
    uint16_t wait_time;

    if (config != NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 80c7 	beq.w	8002464 <set_any_motion_config+0x1b4>
    {
        /* Set the any-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80022d6:	f107 011c 	add.w	r1, r7, #28
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2202      	movs	r2, #2
 80022de:	2041      	movs	r0, #65	; 0x41
 80022e0:	f7ff f931 	bl	8001546 <bmi3_set_regs>
 80022e4:	4603      	mov	r3, r0
 80022e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        if (rslt == BMI3_OK)
 80022ea:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f040 80bb 	bne.w	800246a <set_any_motion_config+0x1ba>
        {
            /* Set threshold for lsb 8 bits */
            threshold1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 80022f4:	7b3b      	ldrb	r3, [r7, #12]
 80022f6:	b21b      	sxth	r3, r3
 80022f8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80022fc:	f023 030f 	bic.w	r3, r3, #15
 8002300:	b21a      	sxth	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	885b      	ldrh	r3, [r3, #2]
 8002306:	b21b      	sxth	r3, r3
 8002308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230c:	b21b      	sxth	r3, r3
 800230e:	4313      	orrs	r3, r2
 8002310:	b21b      	sxth	r3, r3
 8002312:	86bb      	strh	r3, [r7, #52]	; 0x34

            threshold = ((uint16_t)data_array[1] << 8);
 8002314:	7b7b      	ldrb	r3, [r7, #13]
 8002316:	b29b      	uxth	r3, r3
 8002318:	021b      	lsls	r3, r3, #8
 800231a:	867b      	strh	r3, [r7, #50]	; 0x32

            /* Set threshold for msb 8 bits */
            threshold2 = BMI3_SET_BIT_POS0(threshold, BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 800231c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002320:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002324:	f023 030f 	bic.w	r3, r3, #15
 8002328:	b21a      	sxth	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	885b      	ldrh	r3, [r3, #2]
 800232e:	b21b      	sxth	r3, r3
 8002330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002334:	b21b      	sxth	r3, r3
 8002336:	4313      	orrs	r3, r2
 8002338:	b21b      	sxth	r3, r3
 800233a:	863b      	strh	r3, [r7, #48]	; 0x30

            /* Set accel reference */
            acc_ref_up = ((uint16_t)data_array[1] << 8);
 800233c:	7b7b      	ldrb	r3, [r7, #13]
 800233e:	b29b      	uxth	r3, r3
 8002340:	021b      	lsls	r3, r3, #8
 8002342:	85fb      	strh	r3, [r7, #46]	; 0x2e

            acc_ref_up = BMI3_SET_BITS(acc_ref_up, BMI3_ANY_NO_ACC_REF_UP, config->acc_ref_up);
 8002344:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002348:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800234c:	b21a      	sxth	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	791b      	ldrb	r3, [r3, #4]
 8002352:	031b      	lsls	r3, r3, #12
 8002354:	b21b      	sxth	r3, r3
 8002356:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800235a:	b21b      	sxth	r3, r3
 800235c:	4313      	orrs	r3, r2
 800235e:	b21b      	sxth	r3, r3
 8002360:	85fb      	strh	r3, [r7, #46]	; 0x2e

            /* Set hysteresis for lsb 8 bits */
            hysteresis1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 8002362:	7bbb      	ldrb	r3, [r7, #14]
 8002364:	b21b      	sxth	r3, r3
 8002366:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800236a:	f023 0303 	bic.w	r3, r3, #3
 800236e:	b21a      	sxth	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	88db      	ldrh	r3, [r3, #6]
 8002374:	b21b      	sxth	r3, r3
 8002376:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800237a:	b21b      	sxth	r3, r3
 800237c:	4313      	orrs	r3, r2
 800237e:	b21b      	sxth	r3, r3
 8002380:	85bb      	strh	r3, [r7, #44]	; 0x2c

            hysteresis = ((uint16_t)data_array[2] << 8);
 8002382:	7bbb      	ldrb	r3, [r7, #14]
 8002384:	b29b      	uxth	r3, r3
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	857b      	strh	r3, [r7, #42]	; 0x2a

            /* Set hysteresis for msb 8 bits */
            hysteresis2 = BMI3_SET_BIT_POS0(hysteresis, BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 800238a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800238e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002392:	f023 0303 	bic.w	r3, r3, #3
 8002396:	b21a      	sxth	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	88db      	ldrh	r3, [r3, #6]
 800239c:	b21b      	sxth	r3, r3
 800239e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023a2:	b21b      	sxth	r3, r3
 80023a4:	4313      	orrs	r3, r2
 80023a6:	b21b      	sxth	r3, r3
 80023a8:	853b      	strh	r3, [r7, #40]	; 0x28

            /* Set duration for lsb 8 bits */
            duration1 = BMI3_SET_BIT_POS0(data_array[3], BMI3_ANY_NO_DURATION, config->duration);
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	b21b      	sxth	r3, r3
 80023ae:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80023b2:	f023 031f 	bic.w	r3, r3, #31
 80023b6:	b21a      	sxth	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	b21b      	sxth	r3, r3
 80023be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023c2:	b21b      	sxth	r3, r3
 80023c4:	4313      	orrs	r3, r2
 80023c6:	b21b      	sxth	r3, r3
 80023c8:	84fb      	strh	r3, [r7, #38]	; 0x26

            duration = ((uint16_t)data_array[4] << 8);
 80023ca:	7c3b      	ldrb	r3, [r7, #16]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	84bb      	strh	r3, [r7, #36]	; 0x24

            /* Set duration for msb 8 bits */
            duration2 = BMI3_SET_BIT_POS0(duration, BMI3_ANY_NO_DURATION, config->duration);
 80023d2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80023d6:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80023da:	f023 031f 	bic.w	r3, r3, #31
 80023de:	b21a      	sxth	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	b21b      	sxth	r3, r3
 80023e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023ea:	b21b      	sxth	r3, r3
 80023ec:	4313      	orrs	r3, r2
 80023ee:	b21b      	sxth	r3, r3
 80023f0:	847b      	strh	r3, [r7, #34]	; 0x22

            wait_time1 = ((uint16_t)data_array[5] << 8);
 80023f2:	7c7b      	ldrb	r3, [r7, #17]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	021b      	lsls	r3, r3, #8
 80023f8:	843b      	strh	r3, [r7, #32]

            /* Set wait time */
            wait_time = BMI3_SET_BITS(wait_time1, BMI3_ANY_NO_WAIT_TIME, config->wait_time);
 80023fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80023fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002402:	b21a      	sxth	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	891b      	ldrh	r3, [r3, #8]
 8002408:	035b      	lsls	r3, r3, #13
 800240a:	b21b      	sxth	r3, r3
 800240c:	4313      	orrs	r3, r2
 800240e:	b21b      	sxth	r3, r3
 8002410:	83fb      	strh	r3, [r7, #30]

            any_mot_config[0] = (uint8_t)threshold1;
 8002412:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002414:	b2db      	uxtb	r3, r3
 8002416:	753b      	strb	r3, [r7, #20]
            any_mot_config[1] = (uint8_t)((threshold2 | acc_ref_up) >> 8);
 8002418:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800241a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800241c:	4313      	orrs	r3, r2
 800241e:	b29b      	uxth	r3, r3
 8002420:	0a1b      	lsrs	r3, r3, #8
 8002422:	b29b      	uxth	r3, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	757b      	strb	r3, [r7, #21]
            any_mot_config[2] = (uint8_t)(hysteresis1);
 8002428:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800242a:	b2db      	uxtb	r3, r3
 800242c:	75bb      	strb	r3, [r7, #22]
            any_mot_config[3] = (uint8_t)((hysteresis2) >> 8);
 800242e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002430:	0a1b      	lsrs	r3, r3, #8
 8002432:	b29b      	uxth	r3, r3
 8002434:	b2db      	uxtb	r3, r3
 8002436:	75fb      	strb	r3, [r7, #23]
            any_mot_config[4] = (uint8_t)(duration1);
 8002438:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800243a:	b2db      	uxtb	r3, r3
 800243c:	763b      	strb	r3, [r7, #24]
            any_mot_config[5] = (uint8_t)((duration2 | wait_time) >> 8);
 800243e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002440:	8bfb      	ldrh	r3, [r7, #30]
 8002442:	4313      	orrs	r3, r2
 8002444:	b29b      	uxth	r3, r3
 8002446:	0a1b      	lsrs	r3, r3, #8
 8002448:	b29b      	uxth	r3, r3
 800244a:	b2db      	uxtb	r3, r3
 800244c:	767b      	strb	r3, [r7, #25]

            /* Set the configurations back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, any_mot_config, 6, dev);
 800244e:	f107 0114 	add.w	r1, r7, #20
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2206      	movs	r2, #6
 8002456:	2042      	movs	r0, #66	; 0x42
 8002458:	f7ff f875 	bl	8001546 <bmi3_set_regs>
 800245c:	4603      	mov	r3, r0
 800245e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002462:	e002      	b.n	800246a <set_any_motion_config+0x1ba>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002464:	23ff      	movs	r3, #255	; 0xff
 8002466:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 800246a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800246e:	4618      	mov	r0, r3
 8002470:	3738      	adds	r7, #56	; 0x38
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <get_no_motion_config>:
/*!
 * @brief This internal API gets no-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t get_no_motion_config(struct bmi3_no_motion_config *config, struct bmi3_dev *dev)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b088      	sub	sp, #32
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t no_mot_config[6] = { 0 };
 8002480:	2300      	movs	r3, #0
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	2300      	movs	r3, #0
 8002486:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of no-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_NO_MOTION, 0 };
 8002488:	2308      	movs	r3, #8
 800248a:	81bb      	strh	r3, [r7, #12]

    /* Variable to define array offset */
    uint8_t idx = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	77bb      	strb	r3, [r7, #30]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d07b      	beq.n	800258e <get_no_motion_config+0x118>
    {
        /* Set the no-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002496:	f107 010c 	add.w	r1, r7, #12
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2202      	movs	r2, #2
 800249e:	2041      	movs	r0, #65	; 0x41
 80024a0:	f7ff f851 	bl	8001546 <bmi3_set_regs>
 80024a4:	4603      	mov	r3, r0
 80024a6:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 80024a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d170      	bne.n	8002592 <get_no_motion_config+0x11c>
        {
            /* Get the configuration from the feature engine register where no-motion feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, no_mot_config, 6, dev);
 80024b0:	f107 0110 	add.w	r1, r7, #16
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	2206      	movs	r2, #6
 80024b8:	2042      	movs	r0, #66	; 0x42
 80024ba:	f7fe ffdf 	bl	800147c <bmi3_get_regs>
 80024be:	4603      	mov	r3, r0
 80024c0:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 80024c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d163      	bne.n	8002592 <get_no_motion_config+0x11c>
            {
                /* Get word to calculate threshold and accel reference up from same word */
                lsb = (uint16_t) no_mot_config[idx++];
 80024ca:	7fbb      	ldrb	r3, [r7, #30]
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	77ba      	strb	r2, [r7, #30]
 80024d0:	3320      	adds	r3, #32
 80024d2:	443b      	add	r3, r7
 80024d4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80024d8:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) no_mot_config[idx++] << 8);
 80024da:	7fbb      	ldrb	r3, [r7, #30]
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	77ba      	strb	r2, [r7, #30]
 80024e0:	3320      	adds	r3, #32
 80024e2:	443b      	add	r3, r7
 80024e4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	021b      	lsls	r3, r3, #8
 80024ec:	837b      	strh	r3, [r7, #26]
                lsb_msb = (uint16_t)(lsb | msb);
 80024ee:	8bba      	ldrh	r2, [r7, #28]
 80024f0:	8b7b      	ldrh	r3, [r7, #26]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	833b      	strh	r3, [r7, #24]

                /* Get threshold */
                config->slope_thres = (lsb_msb & BMI3_ANY_NO_SLOPE_THRESHOLD_MASK);
 80024f6:	8b3b      	ldrh	r3, [r7, #24]
 80024f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	805a      	strh	r2, [r3, #2]

                /* Get accel reference up */
                config->acc_ref_up = (lsb_msb & BMI3_ANY_NO_ACC_REF_UP_MASK) >> BMI3_ANY_NO_ACC_REF_UP_POS;
 8002502:	8b3b      	ldrh	r3, [r7, #24]
 8002504:	131b      	asrs	r3, r3, #12
 8002506:	b2db      	uxtb	r3, r3
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	b2da      	uxtb	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate hysteresis */
                lsb = (uint16_t) no_mot_config[idx++];
 8002512:	7fbb      	ldrb	r3, [r7, #30]
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	77ba      	strb	r2, [r7, #30]
 8002518:	3320      	adds	r3, #32
 800251a:	443b      	add	r3, r7
 800251c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002520:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) no_mot_config[idx++] << 8);
 8002522:	7fbb      	ldrb	r3, [r7, #30]
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	77ba      	strb	r2, [r7, #30]
 8002528:	3320      	adds	r3, #32
 800252a:	443b      	add	r3, r7
 800252c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002530:	b29b      	uxth	r3, r3
 8002532:	021b      	lsls	r3, r3, #8
 8002534:	837b      	strh	r3, [r7, #26]
                lsb_msb = (uint16_t)(lsb | msb);
 8002536:	8bba      	ldrh	r2, [r7, #28]
 8002538:	8b7b      	ldrh	r3, [r7, #26]
 800253a:	4313      	orrs	r3, r2
 800253c:	833b      	strh	r3, [r7, #24]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_ANY_NO_HYSTERESIS_MASK);
 800253e:	8b3b      	ldrh	r3, [r7, #24]
 8002540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002544:	b29a      	uxth	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate duration and wait time from same word */
                lsb = (uint16_t) no_mot_config[idx++];
 800254a:	7fbb      	ldrb	r3, [r7, #30]
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	77ba      	strb	r2, [r7, #30]
 8002550:	3320      	adds	r3, #32
 8002552:	443b      	add	r3, r7
 8002554:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002558:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) no_mot_config[idx++] << 8);
 800255a:	7fbb      	ldrb	r3, [r7, #30]
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	77ba      	strb	r2, [r7, #30]
 8002560:	3320      	adds	r3, #32
 8002562:	443b      	add	r3, r7
 8002564:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002568:	b29b      	uxth	r3, r3
 800256a:	021b      	lsls	r3, r3, #8
 800256c:	837b      	strh	r3, [r7, #26]
                lsb_msb = (uint16_t)(lsb | msb);
 800256e:	8bba      	ldrh	r2, [r7, #28]
 8002570:	8b7b      	ldrh	r3, [r7, #26]
 8002572:	4313      	orrs	r3, r2
 8002574:	833b      	strh	r3, [r7, #24]

                /* Get duration */
                config->duration = (lsb_msb & BMI3_ANY_NO_DURATION_MASK);
 8002576:	8b3b      	ldrh	r3, [r7, #24]
 8002578:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800257c:	b29a      	uxth	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	801a      	strh	r2, [r3, #0]

                /* Get wait time */
                config->wait_time = (lsb_msb & BMI3_ANY_NO_WAIT_TIME_MASK) >> BMI3_ANY_NO_WAIT_TIME_POS;
 8002582:	8b3b      	ldrh	r3, [r7, #24]
 8002584:	0b5b      	lsrs	r3, r3, #13
 8002586:	b29a      	uxth	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	811a      	strh	r2, [r3, #8]
 800258c:	e001      	b.n	8002592 <get_no_motion_config+0x11c>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800258e:	23ff      	movs	r3, #255	; 0xff
 8002590:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002592:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3720      	adds	r7, #32
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <set_no_motion_config>:
/*!
 * @brief This internal API sets no-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t set_no_motion_config(const struct bmi3_no_motion_config *config, struct bmi3_dev *dev)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b08e      	sub	sp, #56	; 0x38
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of no-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_NO_MOTION, 0 };
 80025a8:	2308      	movs	r3, #8
 80025aa:	83bb      	strh	r3, [r7, #28]

    /* Array to define the feature configuration */
    uint8_t no_mot_config[6] = { 0 };
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	2300      	movs	r3, #0
 80025b2:	833b      	strh	r3, [r7, #24]

    uint8_t data_array[6] = { 0 };
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	2300      	movs	r3, #0
 80025ba:	823b      	strh	r3, [r7, #16]

    uint16_t acc_ref_up;

    uint16_t wait_time;

    if (config != NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 80c3 	beq.w	800274a <set_no_motion_config+0x1ac>
    {
        /* Set the no-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80025c4:	f107 011c 	add.w	r1, r7, #28
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	2202      	movs	r2, #2
 80025cc:	2041      	movs	r0, #65	; 0x41
 80025ce:	f7fe ffba 	bl	8001546 <bmi3_set_regs>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        if (rslt == BMI3_OK)
 80025d8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f040 80b7 	bne.w	8002750 <set_no_motion_config+0x1b2>
        {
            /* Set threshold for lsb 8 bits */
            threshold1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 80025e2:	7b3b      	ldrb	r3, [r7, #12]
 80025e4:	b21b      	sxth	r3, r3
 80025e6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80025ea:	f023 030f 	bic.w	r3, r3, #15
 80025ee:	b21a      	sxth	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	885b      	ldrh	r3, [r3, #2]
 80025f4:	b21b      	sxth	r3, r3
 80025f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fa:	b21b      	sxth	r3, r3
 80025fc:	4313      	orrs	r3, r2
 80025fe:	b21b      	sxth	r3, r3
 8002600:	86bb      	strh	r3, [r7, #52]	; 0x34

            threshold = ((uint16_t)data_array[1] << 8);
 8002602:	7b7b      	ldrb	r3, [r7, #13]
 8002604:	b29b      	uxth	r3, r3
 8002606:	021b      	lsls	r3, r3, #8
 8002608:	867b      	strh	r3, [r7, #50]	; 0x32

            /* Set threshold for msb 8 bits */
            threshold2 = BMI3_SET_BIT_POS0(threshold, BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 800260a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800260e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002612:	f023 030f 	bic.w	r3, r3, #15
 8002616:	b21a      	sxth	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	885b      	ldrh	r3, [r3, #2]
 800261c:	b21b      	sxth	r3, r3
 800261e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002622:	b21b      	sxth	r3, r3
 8002624:	4313      	orrs	r3, r2
 8002626:	b21b      	sxth	r3, r3
 8002628:	863b      	strh	r3, [r7, #48]	; 0x30

            /* Set accel reference */
            acc_ref_up = BMI3_SET_BITS(threshold, BMI3_ANY_NO_ACC_REF_UP, config->acc_ref_up);
 800262a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800262e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002632:	b21a      	sxth	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	791b      	ldrb	r3, [r3, #4]
 8002638:	031b      	lsls	r3, r3, #12
 800263a:	b21b      	sxth	r3, r3
 800263c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002640:	b21b      	sxth	r3, r3
 8002642:	4313      	orrs	r3, r2
 8002644:	b21b      	sxth	r3, r3
 8002646:	85fb      	strh	r3, [r7, #46]	; 0x2e

            /* Set hysteresis for lsb 8 bits */
            hysteresis1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 8002648:	7bbb      	ldrb	r3, [r7, #14]
 800264a:	b21b      	sxth	r3, r3
 800264c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002650:	f023 0303 	bic.w	r3, r3, #3
 8002654:	b21a      	sxth	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	88db      	ldrh	r3, [r3, #6]
 800265a:	b21b      	sxth	r3, r3
 800265c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002660:	b21b      	sxth	r3, r3
 8002662:	4313      	orrs	r3, r2
 8002664:	b21b      	sxth	r3, r3
 8002666:	85bb      	strh	r3, [r7, #44]	; 0x2c

            hysteresis = ((uint16_t)data_array[2] << 8);
 8002668:	7bbb      	ldrb	r3, [r7, #14]
 800266a:	b29b      	uxth	r3, r3
 800266c:	021b      	lsls	r3, r3, #8
 800266e:	857b      	strh	r3, [r7, #42]	; 0x2a

            /* Set hysteresis for msb 8 bits */
            hysteresis2 = BMI3_SET_BIT_POS0(hysteresis, BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 8002670:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002674:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002678:	f023 0303 	bic.w	r3, r3, #3
 800267c:	b21a      	sxth	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	88db      	ldrh	r3, [r3, #6]
 8002682:	b21b      	sxth	r3, r3
 8002684:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002688:	b21b      	sxth	r3, r3
 800268a:	4313      	orrs	r3, r2
 800268c:	b21b      	sxth	r3, r3
 800268e:	853b      	strh	r3, [r7, #40]	; 0x28

            /* Set duration for lsb 8 bits */
            duration1 = BMI3_SET_BIT_POS0(data_array[3], BMI3_ANY_NO_DURATION, config->duration);
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	b21b      	sxth	r3, r3
 8002694:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002698:	f023 031f 	bic.w	r3, r3, #31
 800269c:	b21a      	sxth	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	b21b      	sxth	r3, r3
 80026a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026a8:	b21b      	sxth	r3, r3
 80026aa:	4313      	orrs	r3, r2
 80026ac:	b21b      	sxth	r3, r3
 80026ae:	84fb      	strh	r3, [r7, #38]	; 0x26

            duration = ((uint16_t)data_array[4] << 8);
 80026b0:	7c3b      	ldrb	r3, [r7, #16]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	021b      	lsls	r3, r3, #8
 80026b6:	84bb      	strh	r3, [r7, #36]	; 0x24

            /* Set duration for msb 8 bits */
            duration2 = BMI3_SET_BIT_POS0(duration, BMI3_ANY_NO_DURATION, config->duration);
 80026b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80026bc:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80026c0:	f023 031f 	bic.w	r3, r3, #31
 80026c4:	b21a      	sxth	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	b21b      	sxth	r3, r3
 80026cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026d0:	b21b      	sxth	r3, r3
 80026d2:	4313      	orrs	r3, r2
 80026d4:	b21b      	sxth	r3, r3
 80026d6:	847b      	strh	r3, [r7, #34]	; 0x22

            wait_time1 = ((uint16_t)data_array[5] << 8);
 80026d8:	7c7b      	ldrb	r3, [r7, #17]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	021b      	lsls	r3, r3, #8
 80026de:	843b      	strh	r3, [r7, #32]

            /* Set wait time */
            wait_time = BMI3_SET_BITS(wait_time1, BMI3_ANY_NO_WAIT_TIME, config->wait_time);
 80026e0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80026e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026e8:	b21a      	sxth	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	891b      	ldrh	r3, [r3, #8]
 80026ee:	035b      	lsls	r3, r3, #13
 80026f0:	b21b      	sxth	r3, r3
 80026f2:	4313      	orrs	r3, r2
 80026f4:	b21b      	sxth	r3, r3
 80026f6:	83fb      	strh	r3, [r7, #30]

            no_mot_config[0] = (uint8_t)threshold1;
 80026f8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	753b      	strb	r3, [r7, #20]
            no_mot_config[1] = (uint8_t)((threshold2 | acc_ref_up) >> 8);
 80026fe:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002700:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002702:	4313      	orrs	r3, r2
 8002704:	b29b      	uxth	r3, r3
 8002706:	0a1b      	lsrs	r3, r3, #8
 8002708:	b29b      	uxth	r3, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	757b      	strb	r3, [r7, #21]
            no_mot_config[2] = (uint8_t)(hysteresis1);
 800270e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002710:	b2db      	uxtb	r3, r3
 8002712:	75bb      	strb	r3, [r7, #22]
            no_mot_config[3] = (uint8_t)((hysteresis2) >> 8);
 8002714:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002716:	0a1b      	lsrs	r3, r3, #8
 8002718:	b29b      	uxth	r3, r3
 800271a:	b2db      	uxtb	r3, r3
 800271c:	75fb      	strb	r3, [r7, #23]
            no_mot_config[4] = (uint8_t)(duration1);
 800271e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002720:	b2db      	uxtb	r3, r3
 8002722:	763b      	strb	r3, [r7, #24]
            no_mot_config[5] = (uint8_t)((duration2 | wait_time) >> 8);
 8002724:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002726:	8bfb      	ldrh	r3, [r7, #30]
 8002728:	4313      	orrs	r3, r2
 800272a:	b29b      	uxth	r3, r3
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	b29b      	uxth	r3, r3
 8002730:	b2db      	uxtb	r3, r3
 8002732:	767b      	strb	r3, [r7, #25]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, no_mot_config, 6, dev);
 8002734:	f107 0114 	add.w	r1, r7, #20
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	2206      	movs	r2, #6
 800273c:	2042      	movs	r0, #66	; 0x42
 800273e:	f7fe ff02 	bl	8001546 <bmi3_set_regs>
 8002742:	4603      	mov	r3, r0
 8002744:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002748:	e002      	b.n	8002750 <set_no_motion_config+0x1b2>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800274a:	23ff      	movs	r3, #255	; 0xff
 800274c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 8002750:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8002754:	4618      	mov	r0, r3
 8002756:	3738      	adds	r7, #56	; 0x38
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <get_flat_config>:
/*!
 * @brief This internal API gets flat configurations like theta, blocking,
 * hold-time, hysteresis, and slope threshold.
 */
static int8_t get_flat_config(struct bmi3_flat_config *config, struct bmi3_dev *dev)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t flat_config[4] = { 0 };
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]

    /* Array to set the base address of flat feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_FLAT, 0 };
 800276a:	230b      	movs	r3, #11
 800276c:	813b      	strh	r3, [r7, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	75bb      	strb	r3, [r7, #22]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d063      	beq.n	8002840 <get_flat_config+0xe4>
    {
        /* Set the flat base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002778:	f107 0108 	add.w	r1, r7, #8
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	2202      	movs	r2, #2
 8002780:	2041      	movs	r0, #65	; 0x41
 8002782:	f7fe fee0 	bl	8001546 <bmi3_set_regs>
 8002786:	4603      	mov	r3, r0
 8002788:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 800278a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d158      	bne.n	8002844 <get_flat_config+0xe8>
        {
            /* Get the configuration from the feature engine register where flat feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, flat_config, 4, dev);
 8002792:	f107 010c 	add.w	r1, r7, #12
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2204      	movs	r2, #4
 800279a:	2042      	movs	r0, #66	; 0x42
 800279c:	f7fe fe6e 	bl	800147c <bmi3_get_regs>
 80027a0:	4603      	mov	r3, r0
 80027a2:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 80027a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d14b      	bne.n	8002844 <get_flat_config+0xe8>
            {
                /* Get word to calculate theta, blocking and hold time from the same word */
                lsb = (uint16_t) flat_config[idx++];
 80027ac:	7dbb      	ldrb	r3, [r7, #22]
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	75ba      	strb	r2, [r7, #22]
 80027b2:	3318      	adds	r3, #24
 80027b4:	443b      	add	r3, r7
 80027b6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80027ba:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) flat_config[idx++] << 8);
 80027bc:	7dbb      	ldrb	r3, [r7, #22]
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	75ba      	strb	r2, [r7, #22]
 80027c2:	3318      	adds	r3, #24
 80027c4:	443b      	add	r3, r7
 80027c6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	021b      	lsls	r3, r3, #8
 80027ce:	827b      	strh	r3, [r7, #18]
                lsb_msb = (lsb | msb);
 80027d0:	8aba      	ldrh	r2, [r7, #20]
 80027d2:	8a7b      	ldrh	r3, [r7, #18]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	823b      	strh	r3, [r7, #16]

                /* Get theta */
                config->theta = lsb_msb & BMI3_FLAT_THETA_MASK;
 80027d8:	8a3b      	ldrh	r3, [r7, #16]
 80027da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027de:	b29a      	uxth	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	801a      	strh	r2, [r3, #0]

                /* Get blocking */
                config->blocking = (lsb_msb & BMI3_FLAT_BLOCKING_MASK) >> BMI3_FLAT_BLOCKING_POS;
 80027e4:	8a3b      	ldrh	r3, [r7, #16]
 80027e6:	119b      	asrs	r3, r3, #6
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	805a      	strh	r2, [r3, #2]

                /* Get hold time */
                config->hold_time = (lsb_msb & BMI3_FLAT_HOLD_TIME_MASK) >> BMI3_FLAT_HOLD_TIME_POS;
 80027f4:	8a3b      	ldrh	r3, [r7, #16]
 80027f6:	0a1b      	lsrs	r3, r3, #8
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate slope threshold and hysteresis from the same word */
                lsb = (uint16_t) flat_config[idx++];
 80027fe:	7dbb      	ldrb	r3, [r7, #22]
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	75ba      	strb	r2, [r7, #22]
 8002804:	3318      	adds	r3, #24
 8002806:	443b      	add	r3, r7
 8002808:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800280c:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) flat_config[idx++] << 8);
 800280e:	7dbb      	ldrb	r3, [r7, #22]
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	75ba      	strb	r2, [r7, #22]
 8002814:	3318      	adds	r3, #24
 8002816:	443b      	add	r3, r7
 8002818:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800281c:	b29b      	uxth	r3, r3
 800281e:	021b      	lsls	r3, r3, #8
 8002820:	827b      	strh	r3, [r7, #18]
                lsb_msb = lsb | msb;
 8002822:	8aba      	ldrh	r2, [r7, #20]
 8002824:	8a7b      	ldrh	r3, [r7, #18]
 8002826:	4313      	orrs	r3, r2
 8002828:	823b      	strh	r3, [r7, #16]

                /* Get slope threshold */
                config->slope_thres = lsb_msb & BMI3_FLAT_SLOPE_THRES_MASK;
 800282a:	8a3b      	ldrh	r3, [r7, #16]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	b29a      	uxth	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	811a      	strh	r2, [r3, #8]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_FLAT_HYST_MASK) >> BMI3_FLAT_HYST_POS;
 8002834:	8a3b      	ldrh	r3, [r7, #16]
 8002836:	0a1b      	lsrs	r3, r3, #8
 8002838:	b29a      	uxth	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	809a      	strh	r2, [r3, #4]
 800283e:	e001      	b.n	8002844 <get_flat_config+0xe8>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002840:	23ff      	movs	r3, #255	; 0xff
 8002842:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002844:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <set_flat_config>:
/*!
 * @brief This internal API sets flat configurations like theta, blocking,
 * hold-time, hysteresis, and slope threshold.
 */
static int8_t set_flat_config(const struct bmi3_flat_config *config, struct bmi3_dev *dev)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t flat_config[4] = { 0 };
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]

    /* Array to set the base address of flat feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_FLAT, 0 };
 800285e:	230b      	movs	r3, #11
 8002860:	81bb      	strh	r3, [r7, #12]

    uint16_t theta, blocking, holdtime, slope_thres, hyst;

    if (config != NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d071      	beq.n	800294c <set_flat_config+0xfc>
    {
        /* Set the flat base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002868:	f107 010c 	add.w	r1, r7, #12
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	2202      	movs	r2, #2
 8002870:	2041      	movs	r0, #65	; 0x41
 8002872:	f7fe fe68 	bl	8001546 <bmi3_set_regs>
 8002876:	4603      	mov	r3, r0
 8002878:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 800287a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d166      	bne.n	8002950 <set_flat_config+0x100>
        {
            /* Set theta */
            theta = BMI3_SET_BIT_POS0(flat_config[0], BMI3_FLAT_THETA, config->theta);
 8002882:	7c3b      	ldrb	r3, [r7, #16]
 8002884:	b21b      	sxth	r3, r3
 8002886:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800288a:	b21a      	sxth	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	b21b      	sxth	r3, r3
 8002892:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002896:	b21b      	sxth	r3, r3
 8002898:	4313      	orrs	r3, r2
 800289a:	b21b      	sxth	r3, r3
 800289c:	83bb      	strh	r3, [r7, #28]

            /* Set blocking */
            blocking = BMI3_SET_BITS(flat_config[0], BMI3_FLAT_BLOCKING, config->blocking);
 800289e:	7c3b      	ldrb	r3, [r7, #16]
 80028a0:	b21b      	sxth	r3, r3
 80028a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80028a6:	b21a      	sxth	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	885b      	ldrh	r3, [r3, #2]
 80028ac:	019b      	lsls	r3, r3, #6
 80028ae:	b21b      	sxth	r3, r3
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	b21b      	sxth	r3, r3
 80028b4:	4313      	orrs	r3, r2
 80028b6:	b21b      	sxth	r3, r3
 80028b8:	837b      	strh	r3, [r7, #26]

            /* Set hold time */
            holdtime = ((uint16_t)flat_config[1] << 8);
 80028ba:	7c7b      	ldrb	r3, [r7, #17]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	021b      	lsls	r3, r3, #8
 80028c0:	833b      	strh	r3, [r7, #24]
            holdtime = BMI3_SET_BITS(holdtime, BMI3_FLAT_HOLD_TIME, config->hold_time);
 80028c2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	b21a      	sxth	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	88db      	ldrh	r3, [r3, #6]
 80028ce:	021b      	lsls	r3, r3, #8
 80028d0:	b21b      	sxth	r3, r3
 80028d2:	4313      	orrs	r3, r2
 80028d4:	b21b      	sxth	r3, r3
 80028d6:	833b      	strh	r3, [r7, #24]

            /* Set slope threshold */
            slope_thres = BMI3_SET_BIT_POS0(flat_config[2], BMI3_FLAT_SLOPE_THRES, config->slope_thres);
 80028d8:	7cbb      	ldrb	r3, [r7, #18]
 80028da:	b21b      	sxth	r3, r3
 80028dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028e0:	b21a      	sxth	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	891b      	ldrh	r3, [r3, #8]
 80028e6:	b21b      	sxth	r3, r3
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	b21b      	sxth	r3, r3
 80028ec:	4313      	orrs	r3, r2
 80028ee:	b21b      	sxth	r3, r3
 80028f0:	82fb      	strh	r3, [r7, #22]

            /* Set hysteresis */
            hyst = ((uint16_t)flat_config[3] << 8);
 80028f2:	7cfb      	ldrb	r3, [r7, #19]
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	021b      	lsls	r3, r3, #8
 80028f8:	82bb      	strh	r3, [r7, #20]
            hyst = BMI3_SET_BITS(hyst, BMI3_FLAT_HYST, config->hysteresis);
 80028fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	b21a      	sxth	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	889b      	ldrh	r3, [r3, #4]
 8002906:	021b      	lsls	r3, r3, #8
 8002908:	b21b      	sxth	r3, r3
 800290a:	4313      	orrs	r3, r2
 800290c:	b21b      	sxth	r3, r3
 800290e:	82bb      	strh	r3, [r7, #20]

            flat_config[0] = (uint8_t)(theta | blocking);
 8002910:	8bbb      	ldrh	r3, [r7, #28]
 8002912:	b2da      	uxtb	r2, r3
 8002914:	8b7b      	ldrh	r3, [r7, #26]
 8002916:	b2db      	uxtb	r3, r3
 8002918:	4313      	orrs	r3, r2
 800291a:	b2db      	uxtb	r3, r3
 800291c:	743b      	strb	r3, [r7, #16]
            flat_config[1] = (uint8_t)(holdtime >> 8);
 800291e:	8b3b      	ldrh	r3, [r7, #24]
 8002920:	0a1b      	lsrs	r3, r3, #8
 8002922:	b29b      	uxth	r3, r3
 8002924:	b2db      	uxtb	r3, r3
 8002926:	747b      	strb	r3, [r7, #17]
            flat_config[2] = (uint8_t)(slope_thres);
 8002928:	8afb      	ldrh	r3, [r7, #22]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	74bb      	strb	r3, [r7, #18]
            flat_config[3] = (uint8_t)(hyst >> 8);
 800292e:	8abb      	ldrh	r3, [r7, #20]
 8002930:	0a1b      	lsrs	r3, r3, #8
 8002932:	b29b      	uxth	r3, r3
 8002934:	b2db      	uxtb	r3, r3
 8002936:	74fb      	strb	r3, [r7, #19]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, flat_config, 4, dev);
 8002938:	f107 0110 	add.w	r1, r7, #16
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	2204      	movs	r2, #4
 8002940:	2042      	movs	r0, #66	; 0x42
 8002942:	f7fe fe00 	bl	8001546 <bmi3_set_regs>
 8002946:	4603      	mov	r3, r0
 8002948:	77fb      	strb	r3, [r7, #31]
 800294a:	e001      	b.n	8002950 <set_flat_config+0x100>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800294c:	23ff      	movs	r3, #255	; 0xff
 800294e:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002950:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3720      	adds	r7, #32
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <get_sig_motion_config>:
/*!
 * @brief This internal API gets sig-motion configurations like block size,
 * peak 2 peak min, mcr min, peak 2 peak max and mcr max.
 */
static int8_t get_sig_motion_config(struct bmi3_sig_motion_config *config, struct bmi3_dev *dev)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]

    /* Variable to define a word */
    uint16_t lsb_msb;

    /* Array to set the base address of sig-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_SIG_MOTION, 0 };
 8002966:	230d      	movs	r3, #13
 8002968:	81bb      	strh	r3, [r7, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	77bb      	strb	r3, [r7, #30]

    if (config != NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d077      	beq.n	8002a64 <get_sig_motion_config+0x108>
    {
        /* Set the sig-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002974:	f107 010c 	add.w	r1, r7, #12
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	2202      	movs	r2, #2
 800297c:	2041      	movs	r0, #65	; 0x41
 800297e:	f7fe fde2 	bl	8001546 <bmi3_set_regs>
 8002982:	4603      	mov	r3, r0
 8002984:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8002986:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d16c      	bne.n	8002a68 <get_sig_motion_config+0x10c>
        {
            /* Get the configuration from the feature engine register where sig motion feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, sig_mot_config, 6, dev);
 800298e:	f107 0110 	add.w	r1, r7, #16
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2206      	movs	r2, #6
 8002996:	2042      	movs	r0, #66	; 0x42
 8002998:	f7fe fd70 	bl	800147c <bmi3_get_regs>
 800299c:	4603      	mov	r3, r0
 800299e:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 80029a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d15f      	bne.n	8002a68 <get_sig_motion_config+0x10c>
            {
                /* Get word to calculate block size */
                lsb = (uint16_t) sig_mot_config[idx++];
 80029a8:	7fbb      	ldrb	r3, [r7, #30]
 80029aa:	1c5a      	adds	r2, r3, #1
 80029ac:	77ba      	strb	r2, [r7, #30]
 80029ae:	3320      	adds	r3, #32
 80029b0:	443b      	add	r3, r7
 80029b2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80029b6:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) sig_mot_config[idx++] << 8);
 80029b8:	7fbb      	ldrb	r3, [r7, #30]
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	77ba      	strb	r2, [r7, #30]
 80029be:	3320      	adds	r3, #32
 80029c0:	443b      	add	r3, r7
 80029c2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	021b      	lsls	r3, r3, #8
 80029ca:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 80029cc:	8bba      	ldrh	r2, [r7, #28]
 80029ce:	8b7b      	ldrh	r3, [r7, #26]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	833b      	strh	r3, [r7, #24]

                /* Get block size */
                config->block_size = lsb_msb & BMI3_SIG_BLOCK_SIZE_MASK;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	8b3a      	ldrh	r2, [r7, #24]
 80029d8:	801a      	strh	r2, [r3, #0]

                /* Get word to calculate peak 2 peak minimum from the same word */
                lsb = (uint16_t) sig_mot_config[idx++];
 80029da:	7fbb      	ldrb	r3, [r7, #30]
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	77ba      	strb	r2, [r7, #30]
 80029e0:	3320      	adds	r3, #32
 80029e2:	443b      	add	r3, r7
 80029e4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80029e8:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) sig_mot_config[idx++] << 8);
 80029ea:	7fbb      	ldrb	r3, [r7, #30]
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	77ba      	strb	r2, [r7, #30]
 80029f0:	3320      	adds	r3, #32
 80029f2:	443b      	add	r3, r7
 80029f4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	021b      	lsls	r3, r3, #8
 80029fc:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 80029fe:	8bba      	ldrh	r2, [r7, #28]
 8002a00:	8b7b      	ldrh	r3, [r7, #26]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	833b      	strh	r3, [r7, #24]

                /* Get peak 2 peak minimum */
                config->peak_2_peak_min = (lsb_msb & BMI3_SIG_P2P_MIN_MASK);
 8002a06:	8b3b      	ldrh	r3, [r7, #24]
 8002a08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	805a      	strh	r2, [r3, #2]

                /* Get mcr minimum */
                config->mcr_min = (lsb_msb & BMI3_SIG_MCR_MIN_MASK) >> BMI3_SIG_MCR_MIN_POS;
 8002a12:	8b3b      	ldrh	r3, [r7, #24]
 8002a14:	0a9b      	lsrs	r3, r3, #10
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate peak 2 peak maximum and mcr maximum from the same word */
                lsb = (uint16_t) sig_mot_config[idx++];
 8002a1e:	7fbb      	ldrb	r3, [r7, #30]
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	77ba      	strb	r2, [r7, #30]
 8002a24:	3320      	adds	r3, #32
 8002a26:	443b      	add	r3, r7
 8002a28:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002a2c:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) sig_mot_config[idx++] << 8);
 8002a2e:	7fbb      	ldrb	r3, [r7, #30]
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	77ba      	strb	r2, [r7, #30]
 8002a34:	3320      	adds	r3, #32
 8002a36:	443b      	add	r3, r7
 8002a38:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8002a42:	8bba      	ldrh	r2, [r7, #28]
 8002a44:	8b7b      	ldrh	r3, [r7, #26]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	833b      	strh	r3, [r7, #24]

                /* Get peak 2 peak maximum */
                config->peak_2_peak_max = (lsb_msb & BMI3_SIG_P2P_MAX_MASK);
 8002a4a:	8b3b      	ldrh	r3, [r7, #24]
 8002a4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	80da      	strh	r2, [r3, #6]

                /* Get mcr maximum */
                config->mcr_max = (lsb_msb & BMI3_MCR_MAX_MASK) >> BMI3_MCR_MAX_POS;
 8002a56:	8b3b      	ldrh	r3, [r7, #24]
 8002a58:	0a9b      	lsrs	r3, r3, #10
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	721a      	strb	r2, [r3, #8]
 8002a62:	e001      	b.n	8002a68 <get_sig_motion_config+0x10c>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002a64:	23ff      	movs	r3, #255	; 0xff
 8002a66:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002a68:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3720      	adds	r7, #32
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <set_sig_motion_config>:
/*!
 * @brief This internal API sets sig-motion configurations like block size,
 * peak 2 peak min, mcr min, peak 2 peak max and mcr max.
 */
static int8_t set_sig_motion_config(const struct bmi3_sig_motion_config *config, struct bmi3_dev *dev)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08e      	sub	sp, #56	; 0x38
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of sig-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_SIG_MOTION, 0 };
 8002a7e:	230d      	movs	r3, #13
 8002a80:	83bb      	strh	r3, [r7, #28]

    /* Array to define the feature configuration */
    uint8_t sig_mot_config[6] = { 0 };
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	2300      	movs	r3, #0
 8002a88:	833b      	strh	r3, [r7, #24]

    uint8_t data_array[6] = { 0 };
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	823b      	strh	r3, [r7, #16]

    uint16_t mcr_min;

    uint16_t mcr_max;

    if (config != NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 80aa 	beq.w	8002bee <set_sig_motion_config+0x17a>
    {
        /* Set the sig-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002a9a:	f107 011c 	add.w	r1, r7, #28
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	2041      	movs	r0, #65	; 0x41
 8002aa4:	f7fe fd4f 	bl	8001546 <bmi3_set_regs>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        if (rslt == BMI3_OK)
 8002aae:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f040 809e 	bne.w	8002bf4 <set_sig_motion_config+0x180>
        {
            /* Set block size for lsb 8 bits */
            block_size1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_SIG_BLOCK_SIZE, config->block_size);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	86bb      	strh	r3, [r7, #52]	; 0x34

            block_size = ((uint16_t)data_array[1] << 8);
 8002abe:	7b7b      	ldrb	r3, [r7, #13]
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	021b      	lsls	r3, r3, #8
 8002ac4:	867b      	strh	r3, [r7, #50]	; 0x32

            /* Set block size for msb 8 bits */
            block_size2 = BMI3_SET_BIT_POS0(block_size, BMI3_SIG_BLOCK_SIZE, config->block_size);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	863b      	strh	r3, [r7, #48]	; 0x30

            /* Set peak to peak minimum for lsb 8 bits */
            p2p_min1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_SIG_P2P_MIN, config->peak_2_peak_min);
 8002acc:	7bbb      	ldrb	r3, [r7, #14]
 8002ace:	b21b      	sxth	r3, r3
 8002ad0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ad4:	f023 0303 	bic.w	r3, r3, #3
 8002ad8:	b21a      	sxth	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	885b      	ldrh	r3, [r3, #2]
 8002ade:	b21b      	sxth	r3, r3
 8002ae0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ae4:	b21b      	sxth	r3, r3
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	b21b      	sxth	r3, r3
 8002aea:	85fb      	strh	r3, [r7, #46]	; 0x2e

            p2p_min = ((uint16_t)data_array[3] << 8);
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	021b      	lsls	r3, r3, #8
 8002af2:	85bb      	strh	r3, [r7, #44]	; 0x2c

            /* Set peak to peak minimum for msb 8 bits */
            p2p_min2 = BMI3_SET_BIT_POS0(p2p_min, BMI3_SIG_P2P_MIN, config->peak_2_peak_min);
 8002af4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002af8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002afc:	f023 0303 	bic.w	r3, r3, #3
 8002b00:	b21a      	sxth	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	885b      	ldrh	r3, [r3, #2]
 8002b06:	b21b      	sxth	r3, r3
 8002b08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b0c:	b21b      	sxth	r3, r3
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	b21b      	sxth	r3, r3
 8002b12:	857b      	strh	r3, [r7, #42]	; 0x2a

            mcr_min = ((uint16_t)data_array[3] << 8);
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	021b      	lsls	r3, r3, #8
 8002b1a:	853b      	strh	r3, [r7, #40]	; 0x28

            /* Set mcr minimum */
            mcr_min = BMI3_SET_BITS(mcr_min, BMI3_SIG_MCR_MIN, config->mcr_min);
 8002b1c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8002b20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b24:	b21a      	sxth	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	791b      	ldrb	r3, [r3, #4]
 8002b2a:	029b      	lsls	r3, r3, #10
 8002b2c:	b21b      	sxth	r3, r3
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	b21b      	sxth	r3, r3
 8002b32:	853b      	strh	r3, [r7, #40]	; 0x28

            /* Set peak to peak maximum for lsb 8 bits */
            p2p_max1 = BMI3_SET_BIT_POS0(data_array[4], BMI3_SIG_P2P_MAX, config->peak_2_peak_max);
 8002b34:	7c3b      	ldrb	r3, [r7, #16]
 8002b36:	b21b      	sxth	r3, r3
 8002b38:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b3c:	f023 0303 	bic.w	r3, r3, #3
 8002b40:	b21a      	sxth	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	88db      	ldrh	r3, [r3, #6]
 8002b46:	b21b      	sxth	r3, r3
 8002b48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b4c:	b21b      	sxth	r3, r3
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	b21b      	sxth	r3, r3
 8002b52:	84fb      	strh	r3, [r7, #38]	; 0x26

            p2p_max = ((uint16_t)data_array[5] << 8);
 8002b54:	7c7b      	ldrb	r3, [r7, #17]
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	021b      	lsls	r3, r3, #8
 8002b5a:	84bb      	strh	r3, [r7, #36]	; 0x24

            /* Set peak to peak maximum for msb 8 bits */
            p2p_max2 = BMI3_SET_BIT_POS0(p2p_max, BMI3_SIG_P2P_MAX, config->peak_2_peak_max);
 8002b5c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002b60:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b64:	f023 0303 	bic.w	r3, r3, #3
 8002b68:	b21a      	sxth	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	88db      	ldrh	r3, [r3, #6]
 8002b6e:	b21b      	sxth	r3, r3
 8002b70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b74:	b21b      	sxth	r3, r3
 8002b76:	4313      	orrs	r3, r2
 8002b78:	b21b      	sxth	r3, r3
 8002b7a:	847b      	strh	r3, [r7, #34]	; 0x22

            mcr_max = ((uint16_t)data_array[5] << 8);
 8002b7c:	7c7b      	ldrb	r3, [r7, #17]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	843b      	strh	r3, [r7, #32]

            /* Set mcr maximum */
            mcr_max = BMI3_SET_BITS(mcr_max, BMI3_MCR_MAX, config->mcr_max);
 8002b84:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002b88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b8c:	b21a      	sxth	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	7a1b      	ldrb	r3, [r3, #8]
 8002b92:	029b      	lsls	r3, r3, #10
 8002b94:	b21b      	sxth	r3, r3
 8002b96:	4313      	orrs	r3, r2
 8002b98:	b21b      	sxth	r3, r3
 8002b9a:	843b      	strh	r3, [r7, #32]

            sig_mot_config[0] = (uint8_t)(block_size1);
 8002b9c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	753b      	strb	r3, [r7, #20]
            sig_mot_config[1] = (uint8_t)(block_size2 >> 8);
 8002ba2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002ba4:	0a1b      	lsrs	r3, r3, #8
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	757b      	strb	r3, [r7, #21]
            sig_mot_config[2] = (uint8_t)(p2p_min1);
 8002bac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	75bb      	strb	r3, [r7, #22]
            sig_mot_config[3] = (uint8_t)((p2p_min2 | mcr_min) >> 8);
 8002bb2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002bb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	0a1b      	lsrs	r3, r3, #8
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	75fb      	strb	r3, [r7, #23]
            sig_mot_config[4] = (uint8_t)(p2p_max1);
 8002bc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	763b      	strb	r3, [r7, #24]
            sig_mot_config[5] = (uint8_t)((p2p_max2 | mcr_max) >> 8);
 8002bc8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002bca:	8c3b      	ldrh	r3, [r7, #32]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	0a1b      	lsrs	r3, r3, #8
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	767b      	strb	r3, [r7, #25]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, sig_mot_config, 6, dev);
 8002bd8:	f107 0114 	add.w	r1, r7, #20
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	2206      	movs	r2, #6
 8002be0:	2042      	movs	r0, #66	; 0x42
 8002be2:	f7fe fcb0 	bl	8001546 <bmi3_set_regs>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002bec:	e002      	b.n	8002bf4 <set_sig_motion_config+0x180>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002bee:	23ff      	movs	r3, #255	; 0xff
 8002bf0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 8002bf4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3738      	adds	r7, #56	; 0x38
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <get_tilt_config>:
/*!
 * @brief This internal API gets tilt configurations like segment size,
 * tilt angle, beta accel mean.
 */
static int8_t get_tilt_config(struct bmi3_tilt_config *config, struct bmi3_dev *dev)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t tilt_config[4] = { 0 };
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]

    /* Array to set the base address of tilt feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_TILT, 0 };
 8002c0e:	2321      	movs	r3, #33	; 0x21
 8002c10:	813b      	strh	r3, [r7, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8002c12:	2300      	movs	r3, #0
 8002c14:	75bb      	strb	r3, [r7, #22]
    uint16_t msb;

    /* Variable to define word */
    uint16_t lsb_msb;

    if (config != NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d057      	beq.n	8002ccc <get_tilt_config+0xcc>
    {
        /* Set the tilt base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002c1c:	f107 0108 	add.w	r1, r7, #8
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2202      	movs	r2, #2
 8002c24:	2041      	movs	r0, #65	; 0x41
 8002c26:	f7fe fc8e 	bl	8001546 <bmi3_set_regs>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8002c2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d14c      	bne.n	8002cd0 <get_tilt_config+0xd0>
        {
            /* Get the configuration from the feature engine register where tilt feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, tilt_config, 4, dev);
 8002c36:	f107 010c 	add.w	r1, r7, #12
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2204      	movs	r2, #4
 8002c3e:	2042      	movs	r0, #66	; 0x42
 8002c40:	f7fe fc1c 	bl	800147c <bmi3_get_regs>
 8002c44:	4603      	mov	r3, r0
 8002c46:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8002c48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d13f      	bne.n	8002cd0 <get_tilt_config+0xd0>
            {
                /* Get word to calculate segment size and minimum tilt angle from the same word */
                lsb = ((uint16_t)tilt_config[idx++]);
 8002c50:	7dbb      	ldrb	r3, [r7, #22]
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	75ba      	strb	r2, [r7, #22]
 8002c56:	3318      	adds	r3, #24
 8002c58:	443b      	add	r3, r7
 8002c5a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002c5e:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t)tilt_config[idx++]);
 8002c60:	7dbb      	ldrb	r3, [r7, #22]
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	75ba      	strb	r2, [r7, #22]
 8002c66:	3318      	adds	r3, #24
 8002c68:	443b      	add	r3, r7
 8002c6a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002c6e:	827b      	strh	r3, [r7, #18]
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8002c70:	8a7b      	ldrh	r3, [r7, #18]
 8002c72:	021b      	lsls	r3, r3, #8
 8002c74:	b21a      	sxth	r2, r3
 8002c76:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	b21b      	sxth	r3, r3
 8002c7e:	823b      	strh	r3, [r7, #16]

                /* Get segment size */
                config->segment_size = lsb_msb & BMI3_TILT_SEGMENT_SIZE_MASK;
 8002c80:	8a3b      	ldrh	r3, [r7, #16]
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	801a      	strh	r2, [r3, #0]

                /* Get minimum tilt angle */
                config->min_tilt_angle = (lsb_msb & BMI3_TILT_MIN_TILT_ANGLE_MASK) >> BMI3_TILT_MIN_TILT_ANGLE_POS;
 8002c8a:	8a3b      	ldrh	r3, [r7, #16]
 8002c8c:	0a1b      	lsrs	r3, r3, #8
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	805a      	strh	r2, [r3, #2]

                /* Get word to calculate beta accel mean */
                lsb = ((uint16_t)tilt_config[idx++]);
 8002c94:	7dbb      	ldrb	r3, [r7, #22]
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	75ba      	strb	r2, [r7, #22]
 8002c9a:	3318      	adds	r3, #24
 8002c9c:	443b      	add	r3, r7
 8002c9e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002ca2:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t)tilt_config[idx++]);
 8002ca4:	7dbb      	ldrb	r3, [r7, #22]
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	75ba      	strb	r2, [r7, #22]
 8002caa:	3318      	adds	r3, #24
 8002cac:	443b      	add	r3, r7
 8002cae:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002cb2:	827b      	strh	r3, [r7, #18]
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8002cb4:	8a7b      	ldrh	r3, [r7, #18]
 8002cb6:	021b      	lsls	r3, r3, #8
 8002cb8:	b21a      	sxth	r2, r3
 8002cba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	b21b      	sxth	r3, r3
 8002cc2:	823b      	strh	r3, [r7, #16]

                /* Get beta accel mean */
                config->beta_acc_mean = lsb_msb & BMI3_TILT_BETA_ACC_MEAN_MASK;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	8a3a      	ldrh	r2, [r7, #16]
 8002cc8:	809a      	strh	r2, [r3, #4]
 8002cca:	e001      	b.n	8002cd0 <get_tilt_config+0xd0>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002ccc:	23ff      	movs	r3, #255	; 0xff
 8002cce:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002cd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <set_tilt_config>:
/*!
 * @brief This internal API sets tilt configurations like segment size,
 * tilt angle, beta accel mean.
 */
static int8_t set_tilt_config(const struct bmi3_tilt_config *config, struct bmi3_dev *dev)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of tilt feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_TILT, 0 };
 8002ce6:	2321      	movs	r3, #33	; 0x21
 8002ce8:	823b      	strh	r3, [r7, #16]

    /* Array to define the feature configuration */
    uint8_t tilt_config[4] = { 0 };
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]

    uint8_t data_array[4] = { 0 };
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60bb      	str	r3, [r7, #8]

    uint16_t min_tilt_angle, beta_acc_mean;

    uint16_t segment_size;

    if (config != NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d04c      	beq.n	8002d92 <set_tilt_config+0xb6>
    {
        /* Set the tilt base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002cf8:	f107 0110 	add.w	r1, r7, #16
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	2041      	movs	r0, #65	; 0x41
 8002d02:	f7fe fc20 	bl	8001546 <bmi3_set_regs>
 8002d06:	4603      	mov	r3, r0
 8002d08:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8002d0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d141      	bne.n	8002d96 <set_tilt_config+0xba>
        {
            /* Set segment size */
            segment_size = BMI3_SET_BIT_POS0(data_array[0], BMI3_TILT_SEGMENT_SIZE, config->segment_size);
 8002d12:	7a3b      	ldrb	r3, [r7, #8]
 8002d14:	b21b      	sxth	r3, r3
 8002d16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d1a:	b21a      	sxth	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	b21b      	sxth	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	b21b      	sxth	r3, r3
 8002d26:	4313      	orrs	r3, r2
 8002d28:	b21b      	sxth	r3, r3
 8002d2a:	83bb      	strh	r3, [r7, #28]

            min_tilt_angle1 = ((uint16_t)data_array[1] << 8);
 8002d2c:	7a7b      	ldrb	r3, [r7, #9]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	021b      	lsls	r3, r3, #8
 8002d32:	837b      	strh	r3, [r7, #26]

            /* Set minimum tilt angle */
            min_tilt_angle = BMI3_SET_BITS(min_tilt_angle1, BMI3_TILT_MIN_TILT_ANGLE, config->min_tilt_angle);
 8002d34:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	b21a      	sxth	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	885b      	ldrh	r3, [r3, #2]
 8002d40:	021b      	lsls	r3, r3, #8
 8002d42:	b21b      	sxth	r3, r3
 8002d44:	4313      	orrs	r3, r2
 8002d46:	b21b      	sxth	r3, r3
 8002d48:	833b      	strh	r3, [r7, #24]

            /* Set beta accel mean for lsb 8 bits */
            beta_acc_mean1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_TILT_BETA_ACC_MEAN, config->beta_acc_mean);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	889b      	ldrh	r3, [r3, #4]
 8002d4e:	82fb      	strh	r3, [r7, #22]

            beta_acc_mean = ((uint16_t)data_array[3] << 8);
 8002d50:	7afb      	ldrb	r3, [r7, #11]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	021b      	lsls	r3, r3, #8
 8002d56:	82bb      	strh	r3, [r7, #20]

            /* Set beta accel mean for msb 8 bits */
            beta_acc_mean2 = BMI3_SET_BIT_POS0(beta_acc_mean, BMI3_TILT_BETA_ACC_MEAN, config->beta_acc_mean);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	889b      	ldrh	r3, [r3, #4]
 8002d5c:	827b      	strh	r3, [r7, #18]

            tilt_config[0] = (uint8_t)segment_size;
 8002d5e:	8bbb      	ldrh	r3, [r7, #28]
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	733b      	strb	r3, [r7, #12]
            tilt_config[1] = (uint8_t)(min_tilt_angle >> 8);
 8002d64:	8b3b      	ldrh	r3, [r7, #24]
 8002d66:	0a1b      	lsrs	r3, r3, #8
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	737b      	strb	r3, [r7, #13]
            tilt_config[2] = (uint8_t)(beta_acc_mean1);
 8002d6e:	8afb      	ldrh	r3, [r7, #22]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	73bb      	strb	r3, [r7, #14]
            tilt_config[3] = (uint8_t)(beta_acc_mean2 >> 8);
 8002d74:	8a7b      	ldrh	r3, [r7, #18]
 8002d76:	0a1b      	lsrs	r3, r3, #8
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	73fb      	strb	r3, [r7, #15]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, tilt_config, 4, dev);
 8002d7e:	f107 010c 	add.w	r1, r7, #12
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2204      	movs	r2, #4
 8002d86:	2042      	movs	r0, #66	; 0x42
 8002d88:	f7fe fbdd 	bl	8001546 <bmi3_set_regs>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	77fb      	strb	r3, [r7, #31]
 8002d90:	e001      	b.n	8002d96 <set_tilt_config+0xba>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002d92:	23ff      	movs	r3, #255	; 0xff
 8002d94:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002d96:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3720      	adds	r7, #32
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <get_orientation_config>:
/*!
 * @brief This internal API gets orientation configurations like upside enable,
 * mode, blocking, theta, hold time, slope threshold and hysteresis.
 */
static int8_t get_orientation_config(struct bmi3_orientation_config *config, struct bmi3_dev *dev)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b086      	sub	sp, #24
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t orient_config[4] = { 0 };
 8002dac:	2300      	movs	r3, #0
 8002dae:	60fb      	str	r3, [r7, #12]

    /* Array to set the base address of orient feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ORIENT, 0 };
 8002db0:	231c      	movs	r3, #28
 8002db2:	813b      	strh	r3, [r7, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8002db4:	2300      	movs	r3, #0
 8002db6:	75bb      	strb	r3, [r7, #22]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d075      	beq.n	8002eaa <get_orientation_config+0x108>
    {
        /* Set the orient base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002dbe:	f107 0108 	add.w	r1, r7, #8
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	2041      	movs	r0, #65	; 0x41
 8002dc8:	f7fe fbbd 	bl	8001546 <bmi3_set_regs>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8002dd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d16a      	bne.n	8002eae <get_orientation_config+0x10c>
        {
            /* Get the configuration from the feature engine register where orientation feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, orient_config, 4, dev);
 8002dd8:	f107 010c 	add.w	r1, r7, #12
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2204      	movs	r2, #4
 8002de0:	2042      	movs	r0, #66	; 0x42
 8002de2:	f7fe fb4b 	bl	800147c <bmi3_get_regs>
 8002de6:	4603      	mov	r3, r0
 8002de8:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8002dea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d15d      	bne.n	8002eae <get_orientation_config+0x10c>
            {
                /* Get word to calculate upside down enable, mode, blocking, theta and hold time
                 * from the same word */
                lsb = (uint16_t) orient_config[idx++];
 8002df2:	7dbb      	ldrb	r3, [r7, #22]
 8002df4:	1c5a      	adds	r2, r3, #1
 8002df6:	75ba      	strb	r2, [r7, #22]
 8002df8:	3318      	adds	r3, #24
 8002dfa:	443b      	add	r3, r7
 8002dfc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002e00:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) orient_config[idx++] << 8);
 8002e02:	7dbb      	ldrb	r3, [r7, #22]
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	75ba      	strb	r2, [r7, #22]
 8002e08:	3318      	adds	r3, #24
 8002e0a:	443b      	add	r3, r7
 8002e0c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	021b      	lsls	r3, r3, #8
 8002e14:	827b      	strh	r3, [r7, #18]
                lsb_msb = lsb | msb;
 8002e16:	8aba      	ldrh	r2, [r7, #20]
 8002e18:	8a7b      	ldrh	r3, [r7, #18]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	823b      	strh	r3, [r7, #16]

                /* Get upside enable */
                config->ud_en = lsb_msb & BMI3_ORIENT_UD_EN_MASK;
 8002e1e:	8a3b      	ldrh	r3, [r7, #16]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	701a      	strb	r2, [r3, #0]

                /* Get mode */
                config->mode = (lsb_msb & BMI3_ORIENT_MODE_MASK) >> BMI3_ORIENT_MODE_POS;
 8002e2c:	8a3b      	ldrh	r3, [r7, #16]
 8002e2e:	105b      	asrs	r3, r3, #1
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	705a      	strb	r2, [r3, #1]

                /* Get blocking */
                config->blocking = (lsb_msb & BMI3_ORIENT_BLOCKING_MASK) >> BMI3_ORIENT_BLOCKING_POS;
 8002e3c:	8a3b      	ldrh	r3, [r7, #16]
 8002e3e:	10db      	asrs	r3, r3, #3
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	709a      	strb	r2, [r3, #2]

                /* Get theta */
                config->theta = (lsb_msb & BMI3_ORIENT_THETA_MASK) >> BMI3_ORIENT_THETA_POS;
 8002e4c:	8a3b      	ldrh	r3, [r7, #16]
 8002e4e:	115b      	asrs	r3, r3, #5
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	70da      	strb	r2, [r3, #3]

                /* Get hold time */
                config->hold_time = (lsb_msb & BMI3_ORIENT_HOLD_TIME_MASK) >> BMI3_ORIENT_HOLD_TIME_POS;
 8002e5c:	8a3b      	ldrh	r3, [r7, #16]
 8002e5e:	0adb      	lsrs	r3, r3, #11
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate slope threshold and hysteresis from the same word */
                lsb = (uint16_t) orient_config[idx++];
 8002e68:	7dbb      	ldrb	r3, [r7, #22]
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	75ba      	strb	r2, [r7, #22]
 8002e6e:	3318      	adds	r3, #24
 8002e70:	443b      	add	r3, r7
 8002e72:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002e76:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) orient_config[idx++] << 8);
 8002e78:	7dbb      	ldrb	r3, [r7, #22]
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	75ba      	strb	r2, [r7, #22]
 8002e7e:	3318      	adds	r3, #24
 8002e80:	443b      	add	r3, r7
 8002e82:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	021b      	lsls	r3, r3, #8
 8002e8a:	827b      	strh	r3, [r7, #18]
                lsb_msb = lsb | msb;
 8002e8c:	8aba      	ldrh	r2, [r7, #20]
 8002e8e:	8a7b      	ldrh	r3, [r7, #18]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	823b      	strh	r3, [r7, #16]

                /* Get slope threshold */
                config->slope_thres = lsb_msb & BMI3_ORIENT_SLOPE_THRES_MASK;
 8002e94:	8a3b      	ldrh	r3, [r7, #16]
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	719a      	strb	r2, [r3, #6]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_ORIENT_HYST_MASK) >> BMI3_ORIENT_HYST_POS;
 8002e9c:	8a3b      	ldrh	r3, [r7, #16]
 8002e9e:	0a1b      	lsrs	r3, r3, #8
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	715a      	strb	r2, [r3, #5]
 8002ea8:	e001      	b.n	8002eae <get_orientation_config+0x10c>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002eaa:	23ff      	movs	r3, #255	; 0xff
 8002eac:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002eae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <set_orientation_config>:
/*!
 * @brief This internal API sets orientation configurations like upside enable,
 * mode, blocking, theta, hold time, slope threshold and hysteresis.
 */
static int8_t set_orientation_config(const struct bmi3_orientation_config *config, struct bmi3_dev *dev)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b08a      	sub	sp, #40	; 0x28
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t orient_config[4] = { 0 };
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	613b      	str	r3, [r7, #16]

    /* Array to set the base address of orient feature */
    uint8_t base_aadr[2] = { BMI3_BASE_ADDR_ORIENT, 0 };
 8002ec8:	231c      	movs	r3, #28
 8002eca:	81bb      	strh	r3, [r7, #12]

    uint16_t ud_en, mode, blocking, theta, theta1, holdtime, slope_thres, hyst;

    if (config != NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 80a4 	beq.w	800301c <set_orientation_config+0x162>
    {
        /* Set the orient base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_aadr, 2, dev);
 8002ed4:	f107 010c 	add.w	r1, r7, #12
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2202      	movs	r2, #2
 8002edc:	2041      	movs	r0, #65	; 0x41
 8002ede:	f7fe fb32 	bl	8001546 <bmi3_set_regs>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BMI3_OK)
 8002ee8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f040 8098 	bne.w	8003022 <set_orientation_config+0x168>
        {
            /* Set upside down bit */
            ud_en = BMI3_SET_BIT_POS0(orient_config[0], BMI3_ORIENT_UD_EN, config->ud_en);
 8002ef2:	7c3b      	ldrb	r3, [r7, #16]
 8002ef4:	b21b      	sxth	r3, r3
 8002ef6:	f023 0301 	bic.w	r3, r3, #1
 8002efa:	b21a      	sxth	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	b21b      	sxth	r3, r3
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	b21b      	sxth	r3, r3
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	b21b      	sxth	r3, r3
 8002f0c:	84bb      	strh	r3, [r7, #36]	; 0x24

            /* Set mode */
            mode = BMI3_SET_BITS(orient_config[0], BMI3_ORIENT_MODE, config->mode);
 8002f0e:	7c3b      	ldrb	r3, [r7, #16]
 8002f10:	b21b      	sxth	r3, r3
 8002f12:	f023 0306 	bic.w	r3, r3, #6
 8002f16:	b21a      	sxth	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	785b      	ldrb	r3, [r3, #1]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	b21b      	sxth	r3, r3
 8002f20:	f003 0306 	and.w	r3, r3, #6
 8002f24:	b21b      	sxth	r3, r3
 8002f26:	4313      	orrs	r3, r2
 8002f28:	b21b      	sxth	r3, r3
 8002f2a:	847b      	strh	r3, [r7, #34]	; 0x22

            /* Set blocking */
            blocking = BMI3_SET_BITS(orient_config[0], BMI3_ORIENT_BLOCKING, config->blocking);
 8002f2c:	7c3b      	ldrb	r3, [r7, #16]
 8002f2e:	b21b      	sxth	r3, r3
 8002f30:	f023 0318 	bic.w	r3, r3, #24
 8002f34:	b21a      	sxth	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	789b      	ldrb	r3, [r3, #2]
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	b21b      	sxth	r3, r3
 8002f3e:	f003 0318 	and.w	r3, r3, #24
 8002f42:	b21b      	sxth	r3, r3
 8002f44:	4313      	orrs	r3, r2
 8002f46:	b21b      	sxth	r3, r3
 8002f48:	843b      	strh	r3, [r7, #32]

            /* Set theta for lsb 8 bits */
            theta1 = BMI3_SET_BITS(orient_config[0], BMI3_ORIENT_THETA, config->theta);
 8002f4a:	7c3b      	ldrb	r3, [r7, #16]
 8002f4c:	b21b      	sxth	r3, r3
 8002f4e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8002f52:	b21a      	sxth	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	78db      	ldrb	r3, [r3, #3]
 8002f58:	015b      	lsls	r3, r3, #5
 8002f5a:	b21b      	sxth	r3, r3
 8002f5c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8002f60:	b21b      	sxth	r3, r3
 8002f62:	4313      	orrs	r3, r2
 8002f64:	b21b      	sxth	r3, r3
 8002f66:	83fb      	strh	r3, [r7, #30]

            theta = ((uint16_t)orient_config[1] << 8);
 8002f68:	7c7b      	ldrb	r3, [r7, #17]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	021b      	lsls	r3, r3, #8
 8002f6e:	83bb      	strh	r3, [r7, #28]

            /* Set theta for msb 8 bits */
            theta = BMI3_SET_BITS(theta, BMI3_ORIENT_THETA, config->theta);
 8002f70:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002f74:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8002f78:	b21a      	sxth	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	78db      	ldrb	r3, [r3, #3]
 8002f7e:	015b      	lsls	r3, r3, #5
 8002f80:	b21b      	sxth	r3, r3
 8002f82:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8002f86:	b21b      	sxth	r3, r3
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	b21b      	sxth	r3, r3
 8002f8c:	83bb      	strh	r3, [r7, #28]

            /* Set hold time */
            holdtime = BMI3_SET_BITS(orient_config[1], BMI3_ORIENT_HOLD_TIME, config->hold_time);
 8002f8e:	7c7b      	ldrb	r3, [r7, #17]
 8002f90:	b21a      	sxth	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	791b      	ldrb	r3, [r3, #4]
 8002f96:	02db      	lsls	r3, r3, #11
 8002f98:	b21b      	sxth	r3, r3
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	b21b      	sxth	r3, r3
 8002f9e:	837b      	strh	r3, [r7, #26]

            /* Set slope threshold */
            slope_thres = BMI3_SET_BIT_POS0(orient_config[2], BMI3_ORIENT_SLOPE_THRES, config->slope_thres);
 8002fa0:	7cbb      	ldrb	r3, [r7, #18]
 8002fa2:	b21b      	sxth	r3, r3
 8002fa4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fa8:	b21a      	sxth	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	799b      	ldrb	r3, [r3, #6]
 8002fae:	b21b      	sxth	r3, r3
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	b21b      	sxth	r3, r3
 8002fb4:	833b      	strh	r3, [r7, #24]

            /* Set hysteresis */
            hyst = BMI3_SET_BITS(orient_config[3], BMI3_ORIENT_HYST, config->hysteresis);
 8002fb6:	7cfb      	ldrb	r3, [r7, #19]
 8002fb8:	b21a      	sxth	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	795b      	ldrb	r3, [r3, #5]
 8002fbe:	021b      	lsls	r3, r3, #8
 8002fc0:	b21b      	sxth	r3, r3
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	b21b      	sxth	r3, r3
 8002fc6:	82fb      	strh	r3, [r7, #22]

            orient_config[0] = (uint8_t)(ud_en | mode | blocking | theta1);
 8002fc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	8c3b      	ldrh	r3, [r7, #32]
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	8bfb      	ldrh	r3, [r7, #30]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	743b      	strb	r3, [r7, #16]
            orient_config[1] = (uint8_t)((theta | holdtime) >> 8);
 8002fe6:	8bba      	ldrh	r2, [r7, #28]
 8002fe8:	8b7b      	ldrh	r3, [r7, #26]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	0a1b      	lsrs	r3, r3, #8
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	747b      	strb	r3, [r7, #17]
            orient_config[2] = (uint8_t)(slope_thres);
 8002ff6:	8b3b      	ldrh	r3, [r7, #24]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	74bb      	strb	r3, [r7, #18]
            orient_config[3] = (uint8_t)(hyst >> 8);
 8002ffc:	8afb      	ldrh	r3, [r7, #22]
 8002ffe:	0a1b      	lsrs	r3, r3, #8
 8003000:	b29b      	uxth	r3, r3
 8003002:	b2db      	uxtb	r3, r3
 8003004:	74fb      	strb	r3, [r7, #19]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, orient_config, 4, dev);
 8003006:	f107 0110 	add.w	r1, r7, #16
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2204      	movs	r2, #4
 800300e:	2042      	movs	r0, #66	; 0x42
 8003010:	f7fe fa99 	bl	8001546 <bmi3_set_regs>
 8003014:	4603      	mov	r3, r0
 8003016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800301a:	e002      	b.n	8003022 <set_orientation_config+0x168>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800301c:	23ff      	movs	r3, #255	; 0xff
 800301e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8003022:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003026:	4618      	mov	r0, r3
 8003028:	3728      	adds	r7, #40	; 0x28
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <get_step_config>:
/*!
 * @brief This internal API gets step counter configurations like water-mark level,
 * reset counter, step counter parameters and sc_12_res.
 */
static int8_t get_step_config(struct bmi3_step_counter_config *config, struct bmi3_dev *dev)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b08c      	sub	sp, #48	; 0x30
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t step_config[24] = { 0 };
 8003038:	2300      	movs	r3, #0
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	f107 0314 	add.w	r3, r7, #20
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	611a      	str	r2, [r3, #16]

    /* Array to set the base address of step counter feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_STEP_CNT, 0 };
 800304c:	2310      	movs	r3, #16
 800304e:	81bb      	strh	r3, [r7, #12]

    /* Variable to define array offset */
    uint8_t idx = 0;
 8003050:	2300      	movs	r3, #0
 8003052:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint16_t msb;

    /* Variable to define word */
    uint16_t lsb_msb;

    if (config != NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 81e7 	beq.w	800342c <get_step_config+0x3fe>
    {
        /* Set the step counter base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 800305e:	f107 010c 	add.w	r1, r7, #12
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2202      	movs	r2, #2
 8003066:	2041      	movs	r0, #65	; 0x41
 8003068:	f7fe fa6d 	bl	8001546 <bmi3_set_regs>
 800306c:	4603      	mov	r3, r0
 800306e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if (rslt == BMI3_OK)
 8003072:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003076:	2b00      	cmp	r3, #0
 8003078:	f040 81db 	bne.w	8003432 <get_step_config+0x404>
        {
            /* Get the configuration from the feature engine register where step counter feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, step_config, 24, dev);
 800307c:	f107 0110 	add.w	r1, r7, #16
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	2218      	movs	r2, #24
 8003084:	2042      	movs	r0, #66	; 0x42
 8003086:	f7fe f9f9 	bl	800147c <bmi3_get_regs>
 800308a:	4603      	mov	r3, r0
 800308c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            if (rslt == BMI3_OK)
 8003090:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003094:	2b00      	cmp	r3, #0
 8003096:	f040 81cc 	bne.w	8003432 <get_step_config+0x404>
            {
                /* Get word to calculate water-mark level, reset counter from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 800309a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80030a4:	3330      	adds	r3, #48	; 0x30
 80030a6:	443b      	add	r3, r7
 80030a8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80030ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80030ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80030b8:	3330      	adds	r3, #48	; 0x30
 80030ba:	443b      	add	r3, r7
 80030bc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80030c0:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80030c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030c4:	021b      	lsls	r3, r3, #8
 80030c6:	b21a      	sxth	r2, r3
 80030c8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80030cc:	4313      	orrs	r3, r2
 80030ce:	b21b      	sxth	r3, r3
 80030d0:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get water-mark level */
                config->watermark_level = lsb_msb & BMI3_STEP_WATERMARK_MASK;
 80030d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80030d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030d8:	b29a      	uxth	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	801a      	strh	r2, [r3, #0]

                /* Get reset counter */
                config->reset_counter = (lsb_msb & BMI3_STEP_RESET_COUNTER_MASK) >> BMI3_STEP_RESET_COUNTER_POS;
 80030de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80030e0:	129b      	asrs	r3, r3, #10
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	805a      	strh	r2, [r3, #2]

                /* Get word to calculate minimum distance up */
                lsb = ((uint16_t)step_config[idx++]);
 80030ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80030f8:	3330      	adds	r3, #48	; 0x30
 80030fa:	443b      	add	r3, r7
 80030fc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003100:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003102:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800310c:	3330      	adds	r3, #48	; 0x30
 800310e:	443b      	add	r3, r7
 8003110:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003114:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003116:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003118:	021b      	lsls	r3, r3, #8
 800311a:	b21a      	sxth	r2, r3
 800311c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003120:	4313      	orrs	r3, r2
 8003122:	b21b      	sxth	r3, r3
 8003124:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get minimum distance up */
                config->env_min_dist_up = (lsb_msb & BMI3_STEP_ENV_MIN_DIST_UP_MASK);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800312a:	809a      	strh	r2, [r3, #4]

                /* Get word to calculate env coefficient up */
                lsb = ((uint16_t)step_config[idx++]);
 800312c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003136:	3330      	adds	r3, #48	; 0x30
 8003138:	443b      	add	r3, r7
 800313a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800313e:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003140:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800314a:	3330      	adds	r3, #48	; 0x30
 800314c:	443b      	add	r3, r7
 800314e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003152:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003154:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003156:	021b      	lsls	r3, r3, #8
 8003158:	b21a      	sxth	r2, r3
 800315a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800315e:	4313      	orrs	r3, r2
 8003160:	b21b      	sxth	r3, r3
 8003162:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get env coefficient up */
                config->env_coef_up = (lsb_msb & BMI3_STEP_ENV_COEF_UP_MASK);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003168:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate env minimum distance down */
                lsb = ((uint16_t)step_config[idx++]);
 800316a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003174:	3330      	adds	r3, #48	; 0x30
 8003176:	443b      	add	r3, r7
 8003178:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800317c:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 800317e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003188:	3330      	adds	r3, #48	; 0x30
 800318a:	443b      	add	r3, r7
 800318c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003190:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003192:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003194:	021b      	lsls	r3, r3, #8
 8003196:	b21a      	sxth	r2, r3
 8003198:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800319c:	4313      	orrs	r3, r2
 800319e:	b21b      	sxth	r3, r3
 80031a0:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get env minimum distance down */
                config->env_min_dist_down = (lsb_msb & BMI3_STEP_ENV_MIN_DIST_DOWN_MASK);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80031a6:	811a      	strh	r2, [r3, #8]

                /* Get word to calculate env coefficient down */
                lsb = ((uint16_t)step_config[idx++]);
 80031a8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80031b2:	3330      	adds	r3, #48	; 0x30
 80031b4:	443b      	add	r3, r7
 80031b6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80031ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80031bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80031c6:	3330      	adds	r3, #48	; 0x30
 80031c8:	443b      	add	r3, r7
 80031ca:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80031ce:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80031d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80031d2:	021b      	lsls	r3, r3, #8
 80031d4:	b21a      	sxth	r2, r3
 80031d6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80031da:	4313      	orrs	r3, r2
 80031dc:	b21b      	sxth	r3, r3
 80031de:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get env coefficient down */
                config->env_coef_down = (lsb_msb & BMI3_STEP_ENV_COEF_DOWN_MASK);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80031e4:	815a      	strh	r2, [r3, #10]

                /* Get word to calculate mean val decay */
                lsb = ((uint16_t)step_config[idx++]);
 80031e6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80031ea:	1c5a      	adds	r2, r3, #1
 80031ec:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80031f0:	3330      	adds	r3, #48	; 0x30
 80031f2:	443b      	add	r3, r7
 80031f4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80031f8:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80031fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003204:	3330      	adds	r3, #48	; 0x30
 8003206:	443b      	add	r3, r7
 8003208:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800320c:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 800320e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	b21a      	sxth	r2, r3
 8003214:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003218:	4313      	orrs	r3, r2
 800321a:	b21b      	sxth	r3, r3
 800321c:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get mean val decay */
                config->mean_val_decay = (lsb_msb & BMI3_STEP_MEAN_VAL_DECAY_MASK);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003222:	819a      	strh	r2, [r3, #12]

                /* Get word to calculate mean step duration */
                lsb = ((uint16_t)step_config[idx++]);
 8003224:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800322e:	3330      	adds	r3, #48	; 0x30
 8003230:	443b      	add	r3, r7
 8003232:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003236:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003238:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003242:	3330      	adds	r3, #48	; 0x30
 8003244:	443b      	add	r3, r7
 8003246:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800324a:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 800324c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	b21a      	sxth	r2, r3
 8003252:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003256:	4313      	orrs	r3, r2
 8003258:	b21b      	sxth	r3, r3
 800325a:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get mean step duration */
                config->mean_step_dur = (lsb_msb & BMI3_STEP_MEAN_STEP_DUR_MASK);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003260:	81da      	strh	r2, [r3, #14]

                /* Get word to calculate step buffer size, filter cascade enabled and step counter increment
                 * from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 8003262:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800326c:	3330      	adds	r3, #48	; 0x30
 800326e:	443b      	add	r3, r7
 8003270:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003274:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003276:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003280:	3330      	adds	r3, #48	; 0x30
 8003282:	443b      	add	r3, r7
 8003284:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003288:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 800328a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800328c:	021b      	lsls	r3, r3, #8
 800328e:	b21a      	sxth	r2, r3
 8003290:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003294:	4313      	orrs	r3, r2
 8003296:	b21b      	sxth	r3, r3
 8003298:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get step buffer size */
                config->step_buffer_size = lsb_msb & BMI3_STEP_BUFFER_SIZE_MASK;
 800329a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800329c:	f003 030f 	and.w	r3, r3, #15
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	821a      	strh	r2, [r3, #16]

                /* Get filter cascade enable */
                config->filter_cascade_enabled = (lsb_msb & BMI3_STEP_FILTER_CASCADE_ENABLED_MASK) >>
 80032a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032a8:	111b      	asrs	r3, r3, #4
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	825a      	strh	r2, [r3, #18]
                                                 BMI3_STEP_FILTER_CASCADE_ENABLED_POS;

                /* Get step counter increment */
                config->step_counter_increment = (lsb_msb & BMI3_STEP_COUNTER_INCREMENT_MASK) >>
 80032b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032b8:	095b      	lsrs	r3, r3, #5
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	829a      	strh	r2, [r3, #20]
                                                 BMI3_STEP_COUNTER_INCREMENT_POS;

                /* Get word to calculate peak duration minimum walking and peak duration minimum running */
                lsb = ((uint16_t)step_config[idx++]);
 80032c0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80032ca:	3330      	adds	r3, #48	; 0x30
 80032cc:	443b      	add	r3, r7
 80032ce:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80032d2:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80032d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80032de:	3330      	adds	r3, #48	; 0x30
 80032e0:	443b      	add	r3, r7
 80032e2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80032e6:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80032e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80032ea:	021b      	lsls	r3, r3, #8
 80032ec:	b21a      	sxth	r2, r3
 80032ee:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80032f2:	4313      	orrs	r3, r2
 80032f4:	b21b      	sxth	r3, r3
 80032f6:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get peak duration minimum walking */
                config->peak_duration_min_walking = lsb_msb & BMI3_STEP_PEAK_DURATION_MIN_WALKING_MASK;
 80032f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	82da      	strh	r2, [r3, #22]

                /* Get peak duration minimum running */
                config->peak_duration_min_running = (lsb_msb & BMI3_STEP_PEAK_DURATION_MIN_RUNNING_MASK) >>
 8003302:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003304:	0a1b      	lsrs	r3, r3, #8
 8003306:	b29a      	uxth	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	831a      	strh	r2, [r3, #24]
                                                    BMI3_STEP_PEAK_DURATION_MIN_RUNNING_POS;

                /* Get word to calculate activity detection factor and activity detection threshold
                 * from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 800330c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003316:	3330      	adds	r3, #48	; 0x30
 8003318:	443b      	add	r3, r7
 800331a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800331e:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003320:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800332a:	3330      	adds	r3, #48	; 0x30
 800332c:	443b      	add	r3, r7
 800332e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003332:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003334:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	b21a      	sxth	r2, r3
 800333a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800333e:	4313      	orrs	r3, r2
 8003340:	b21b      	sxth	r3, r3
 8003342:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get activity detection factor */
                config->activity_detection_factor = lsb_msb & BMI3_STEP_ACTIVITY_DETECTION_FACTOR_MASK;
 8003344:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	b29a      	uxth	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	835a      	strh	r2, [r3, #26]

                /* Get activity detection threshold */
                config->activity_detection_thres = (lsb_msb & BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD_MASK) >>
 8003350:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003352:	091b      	lsrs	r3, r3, #4
 8003354:	b29a      	uxth	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	839a      	strh	r2, [r3, #28]
                                                   BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD_POS;

                /* Get word to calculate step duration max and step duration window from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 800335a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800335e:	1c5a      	adds	r2, r3, #1
 8003360:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003364:	3330      	adds	r3, #48	; 0x30
 8003366:	443b      	add	r3, r7
 8003368:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800336c:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 800336e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003378:	3330      	adds	r3, #48	; 0x30
 800337a:	443b      	add	r3, r7
 800337c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003380:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003382:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003384:	021b      	lsls	r3, r3, #8
 8003386:	b21a      	sxth	r2, r3
 8003388:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800338c:	4313      	orrs	r3, r2
 800338e:	b21b      	sxth	r3, r3
 8003390:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get step duration max */
                config->step_duration_max = lsb_msb & BMI3_STEP_DURATION_MAX_MASK;
 8003392:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003394:	b2db      	uxtb	r3, r3
 8003396:	b29a      	uxth	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	83da      	strh	r2, [r3, #30]

                /* Get step duration window */
                config->step_duration_window = (lsb_msb & BMI3_STEP_DURATION_WINDOW_MASK) >>
 800339c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800339e:	0a1b      	lsrs	r3, r3, #8
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	841a      	strh	r2, [r3, #32]
                                               BMI3_STEP_DURATION_WINDOW_POS;

                /* Get word to calculate step duration pp enabled, duration threshold,
                 * mean crossing pp enabled, mcr threshold, sc_12_res from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 80033a6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80033b0:	3330      	adds	r3, #48	; 0x30
 80033b2:	443b      	add	r3, r7
 80033b4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80033b8:	85bb      	strh	r3, [r7, #44]	; 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80033ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80033c4:	3330      	adds	r3, #48	; 0x30
 80033c6:	443b      	add	r3, r7
 80033c8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80033cc:	857b      	strh	r3, [r7, #42]	; 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80033ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033d0:	021b      	lsls	r3, r3, #8
 80033d2:	b21a      	sxth	r2, r3
 80033d4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80033d8:	4313      	orrs	r3, r2
 80033da:	b21b      	sxth	r3, r3
 80033dc:	853b      	strh	r3, [r7, #40]	; 0x28

                /* Get step duration pp enable */
                config->step_duration_pp_enabled = lsb_msb & BMI3_STEP_DURATION_PP_ENABLED_MASK;
 80033de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	845a      	strh	r2, [r3, #34]	; 0x22

                /* Get step duration threshold */
                config->step_duration_thres = (lsb_msb & BMI3_STEP_DURATION_THRESHOLD_MASK) >>
 80033ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80033ec:	105b      	asrs	r3, r3, #1
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	849a      	strh	r2, [r3, #36]	; 0x24
                                              BMI3_STEP_DURATION_THRESHOLD_POS;

                /* Get mean crossing pp enabled */
                config->mean_crossing_pp_enabled = (lsb_msb & BMI3_STEP_MEAN_CROSSING_PP_ENABLED_MASK) >>
 80033fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80033fc:	111b      	asrs	r3, r3, #4
 80033fe:	b29b      	uxth	r3, r3
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	84da      	strh	r2, [r3, #38]	; 0x26
                                                   BMI3_STEP_MEAN_CROSSING_PP_ENABLED_POS;

                /* Get mcr threshold */
                config->mcr_threshold = (lsb_msb & BMI3_STEP_MCR_THRESHOLD_MASK) >> BMI3_STEP_MCR_THRESHOLD_POS;
 800340a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800340c:	115b      	asrs	r3, r3, #5
 800340e:	b29b      	uxth	r3, r3
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	b29a      	uxth	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	851a      	strh	r2, [r3, #40]	; 0x28

                /* Get sc_12_res selection */
                config->sc_12_res = (lsb_msb & BMI3_STEP_SC_12_RES_MASK) >> BMI3_STEP_SC_12_RES_POS;
 800341a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800341c:	129b      	asrs	r3, r3, #10
 800341e:	b29b      	uxth	r3, r3
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	b29a      	uxth	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	855a      	strh	r2, [r3, #42]	; 0x2a
 800342a:	e002      	b.n	8003432 <get_step_config+0x404>
            }
        }
    }
    else
    {
        rslt = BMI3_E_INVALID_SENSOR;
 800342c:	23fa      	movs	r3, #250	; 0xfa
 800342e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return rslt;
 8003432:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003436:	4618      	mov	r0, r3
 8003438:	3730      	adds	r7, #48	; 0x30
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <set_step_config>:
/*!
 * @brief This internal API sets step counter configurations like water-mark level,
 * reset counter, step counter parameters and sc_12_res.
 */
static int8_t set_step_config(const struct bmi3_step_counter_config *config, struct bmi3_dev *dev)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b0a4      	sub	sp, #144	; 0x90
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
 8003446:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of step counter feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_STEP_CNT, 0 };
 8003448:	2310      	movs	r3, #16
 800344a:	873b      	strh	r3, [r7, #56]	; 0x38

    /* Array to define the feature configuration */
    uint8_t step_config[24] = { 0 };
 800344c:	2300      	movs	r3, #0
 800344e:	623b      	str	r3, [r7, #32]
 8003450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	611a      	str	r2, [r3, #16]

    uint8_t data_array[24] = { 0 };
 8003460:	2300      	movs	r3, #0
 8003462:	60bb      	str	r3, [r7, #8]
 8003464:	f107 030c 	add.w	r3, r7, #12
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	605a      	str	r2, [r3, #4]
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	60da      	str	r2, [r3, #12]
 8003472:	611a      	str	r2, [r3, #16]
    uint16_t reset_counter, activity_detection_factor, step_duration_max, step_duration_window,
             step_duration_pp_enabled;

    uint16_t step_duration_threshold, mean_crossing_pp_enabled, mcr_threshold1, mcr_threshold2, sc_12_res;

    if (config != NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 8268 	beq.w	800394c <set_step_config+0x50e>
    {
        /* Set the step counter base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 800347c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	2202      	movs	r2, #2
 8003484:	2041      	movs	r0, #65	; 0x41
 8003486:	f7fe f85e 	bl	8001546 <bmi3_set_regs>
 800348a:	4603      	mov	r3, r0
 800348c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

        if (rslt == BMI3_OK)
 8003490:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8003494:	2b00      	cmp	r3, #0
 8003496:	f040 825c 	bne.w	8003952 <set_step_config+0x514>
        {
            /* Set water-mark for lsb 8 bits */
            watermark1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_STEP_WATERMARK, config->watermark_level);
 800349a:	7a3b      	ldrb	r3, [r7, #8]
 800349c:	b21b      	sxth	r3, r3
 800349e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034a2:	f023 0303 	bic.w	r3, r3, #3
 80034a6:	b21a      	sxth	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	b21b      	sxth	r3, r3
 80034ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034b2:	b21b      	sxth	r3, r3
 80034b4:	4313      	orrs	r3, r2
 80034b6:	b21b      	sxth	r3, r3
 80034b8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

            watermark = ((uint16_t)data_array[1] << 8);
 80034bc:	7a7b      	ldrb	r3, [r7, #9]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	021b      	lsls	r3, r3, #8
 80034c2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

            /* Set water-mark for msb 8 bits */
            watermark2 = BMI3_SET_BIT_POS0(watermark, BMI3_STEP_WATERMARK, config->watermark_level);
 80034c6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80034ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034ce:	f023 0303 	bic.w	r3, r3, #3
 80034d2:	b21a      	sxth	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	b21b      	sxth	r3, r3
 80034da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034de:	b21b      	sxth	r3, r3
 80034e0:	4313      	orrs	r3, r2
 80034e2:	b21b      	sxth	r3, r3
 80034e4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

            reset_counter = ((uint16_t)data_array[1] << 8);
 80034e8:	7a7b      	ldrb	r3, [r7, #9]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

            /* Set reset counter */
            reset_counter = BMI3_SET_BITS(reset_counter, BMI3_STEP_RESET_COUNTER, config->reset_counter);
 80034f2:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 80034f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034fa:	b21a      	sxth	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	885b      	ldrh	r3, [r3, #2]
 8003500:	029b      	lsls	r3, r3, #10
 8003502:	b21b      	sxth	r3, r3
 8003504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003508:	b21b      	sxth	r3, r3
 800350a:	4313      	orrs	r3, r2
 800350c:	b21b      	sxth	r3, r3
 800350e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

            /* Set env_min_dist_up for lsb 8 bits */
            env_min_dist_up1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_STEP_ENV_MIN_DIST_UP, config->env_min_dist_up);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	889b      	ldrh	r3, [r3, #4]
 8003516:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

            env_min_dist_up = ((uint16_t)data_array[3] << 8);
 800351a:	7afb      	ldrb	r3, [r7, #11]
 800351c:	b29b      	uxth	r3, r3
 800351e:	021b      	lsls	r3, r3, #8
 8003520:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

            /* Set env_min_dist_up for msb 8 bits */
            env_min_dist_up2 = BMI3_SET_BIT_POS0(env_min_dist_up, BMI3_STEP_ENV_MIN_DIST_UP, config->env_min_dist_up);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	889b      	ldrh	r3, [r3, #4]
 8003528:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

            /* Set env_coef_up for lsb 8 bits */
            env_coef_up1 = BMI3_SET_BIT_POS0(data_array[4], BMI3_STEP_ENV_COEF_UP, config->env_coef_up);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	88db      	ldrh	r3, [r3, #6]
 8003530:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

            env_coef_up = ((uint16_t)data_array[5] << 8);
 8003534:	7b7b      	ldrb	r3, [r7, #13]
 8003536:	b29b      	uxth	r3, r3
 8003538:	021b      	lsls	r3, r3, #8
 800353a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

            /* Set env_coef_up for msb 8 bits */
            env_coef_up2 = BMI3_SET_BIT_POS0(env_coef_up, BMI3_STEP_ENV_COEF_UP, config->env_coef_up);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	88db      	ldrh	r3, [r3, #6]
 8003542:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

            /* Set env_min_dist_down for lsb 8 bits */
            env_min_dist_down1 =
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	891b      	ldrh	r3, [r3, #8]
 800354a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
                BMI3_SET_BIT_POS0(data_array[6], BMI3_STEP_ENV_MIN_DIST_DOWN, config->env_min_dist_down);

            env_min_dist_down = ((uint16_t)data_array[7] << 8);
 800354e:	7bfb      	ldrb	r3, [r7, #15]
 8003550:	b29b      	uxth	r3, r3
 8003552:	021b      	lsls	r3, r3, #8
 8003554:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Set env_min_dist_down for msb 8 bits */
            env_min_dist_down2 = BMI3_SET_BIT_POS0(env_min_dist_down,
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	891b      	ldrh	r3, [r3, #8]
 800355c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
                                                   BMI3_STEP_ENV_MIN_DIST_DOWN,
                                                   config->env_min_dist_down);

            /* Set env_coef_down for lsb 8 bits */
            env_coef_down1 = BMI3_SET_BIT_POS0(data_array[8], BMI3_STEP_ENV_COEF_DOWN, config->env_coef_down);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	895b      	ldrh	r3, [r3, #10]
 8003564:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

            env_coef_down = ((uint16_t)data_array[9] << 8);
 8003568:	7c7b      	ldrb	r3, [r7, #17]
 800356a:	b29b      	uxth	r3, r3
 800356c:	021b      	lsls	r3, r3, #8
 800356e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

            /* Set env_coef_down for msb 8 bits */
            env_coef_down2 = BMI3_SET_BIT_POS0(env_coef_down, BMI3_STEP_ENV_COEF_DOWN, config->env_coef_down);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	895b      	ldrh	r3, [r3, #10]
 8003576:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

            /* Set mean_val_decay for lsb 8 bits */
            mean_val_decay1 = BMI3_SET_BIT_POS0(data_array[10], BMI3_STEP_MEAN_VAL_DECAY, config->mean_val_decay);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	899b      	ldrh	r3, [r3, #12]
 800357e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

            mean_val_decay = ((uint16_t)data_array[11] << 8);
 8003582:	7cfb      	ldrb	r3, [r7, #19]
 8003584:	b29b      	uxth	r3, r3
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

            /* Set mean_val_decay for msb 8 bits */
            mean_val_decay2 = BMI3_SET_BIT_POS0(mean_val_decay, BMI3_STEP_MEAN_VAL_DECAY, config->mean_val_decay);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	899b      	ldrh	r3, [r3, #12]
 8003590:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

            /* Set mean_step_dur for lsb 8 bits */
            mean_step_dur1 = BMI3_SET_BIT_POS0(data_array[12], BMI3_STEP_MEAN_STEP_DUR, config->mean_step_dur);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	89db      	ldrh	r3, [r3, #14]
 8003598:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

            mean_step_dur = ((uint16_t)data_array[13] << 8);
 800359c:	7d7b      	ldrb	r3, [r7, #21]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	021b      	lsls	r3, r3, #8
 80035a2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

            /* Set mean_step_dur for msb 8 bits */
            mean_step_dur2 = BMI3_SET_BIT_POS0(mean_step_dur, BMI3_STEP_MEAN_STEP_DUR, config->mean_step_dur);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	89db      	ldrh	r3, [r3, #14]
 80035aa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

            /* Set step buffer size */
            step_buffer_size = BMI3_SET_BIT_POS0(data_array[14], BMI3_STEP_BUFFER_SIZE, config->step_buffer_size);
 80035ae:	7dbb      	ldrb	r3, [r7, #22]
 80035b0:	b21b      	sxth	r3, r3
 80035b2:	f023 030f 	bic.w	r3, r3, #15
 80035b6:	b21a      	sxth	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	8a1b      	ldrh	r3, [r3, #16]
 80035bc:	b21b      	sxth	r3, r3
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	b21b      	sxth	r3, r3
 80035c4:	4313      	orrs	r3, r2
 80035c6:	b21b      	sxth	r3, r3
 80035c8:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

            /* Set filter cascade */
            filter_cascade_enabled = BMI3_SET_BITS(data_array[14],
 80035cc:	7dbb      	ldrb	r3, [r7, #22]
 80035ce:	b21b      	sxth	r3, r3
 80035d0:	f023 0310 	bic.w	r3, r3, #16
 80035d4:	b21a      	sxth	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	8a5b      	ldrh	r3, [r3, #18]
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	b21b      	sxth	r3, r3
 80035de:	f003 0310 	and.w	r3, r3, #16
 80035e2:	b21b      	sxth	r3, r3
 80035e4:	4313      	orrs	r3, r2
 80035e6:	b21b      	sxth	r3, r3
 80035e8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                                                   BMI3_STEP_FILTER_CASCADE_ENABLED,
                                                   config->filter_cascade_enabled);

            /* Set step_counter_increment for lsb 8 bits */
            step_counter_increment1 = BMI3_SET_BITS(data_array[14],
 80035ec:	7dbb      	ldrb	r3, [r7, #22]
 80035ee:	b21b      	sxth	r3, r3
 80035f0:	f003 031f 	and.w	r3, r3, #31
 80035f4:	b21a      	sxth	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	8a9b      	ldrh	r3, [r3, #20]
 80035fa:	015b      	lsls	r3, r3, #5
 80035fc:	b21b      	sxth	r3, r3
 80035fe:	4313      	orrs	r3, r2
 8003600:	b21b      	sxth	r3, r3
 8003602:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
                                                    BMI3_STEP_COUNTER_INCREMENT,
                                                    config->step_counter_increment);

            step_counter_increment2 = ((uint16_t)data_array[15] << 8);
 8003606:	7dfb      	ldrb	r3, [r7, #23]
 8003608:	b29b      	uxth	r3, r3
 800360a:	021b      	lsls	r3, r3, #8
 800360c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            /* Set step_counter_increment for msb 8 bits */
            step_counter_increment2 = BMI3_SET_BITS(step_counter_increment2,
 8003610:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8003614:	f003 031f 	and.w	r3, r3, #31
 8003618:	b21a      	sxth	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	8a9b      	ldrh	r3, [r3, #20]
 800361e:	015b      	lsls	r3, r3, #5
 8003620:	b21b      	sxth	r3, r3
 8003622:	4313      	orrs	r3, r2
 8003624:	b21b      	sxth	r3, r3
 8003626:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
                                                    BMI3_STEP_COUNTER_INCREMENT,
                                                    config->step_counter_increment);

            /* Set peak_duration_min_walking for lsb 8 bits */
            peak_duration_min_walking = BMI3_SET_BIT_POS0(data_array[16],
 800362a:	7e3b      	ldrb	r3, [r7, #24]
 800362c:	b21b      	sxth	r3, r3
 800362e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003632:	b21a      	sxth	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	8adb      	ldrh	r3, [r3, #22]
 8003638:	b21b      	sxth	r3, r3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	b21b      	sxth	r3, r3
 800363e:	4313      	orrs	r3, r2
 8003640:	b21b      	sxth	r3, r3
 8003642:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                                                          BMI3_STEP_PEAK_DURATION_MIN_WALKING,
                                                          config->peak_duration_min_walking);

            peak_duration_min_running = ((uint16_t)data_array[17] << 8);
 8003646:	7e7b      	ldrb	r3, [r7, #25]
 8003648:	b29b      	uxth	r3, r3
 800364a:	021b      	lsls	r3, r3, #8
 800364c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            /* Set peak_duration_min_walking for msb 8 bits */
            peak_duration_min_running = BMI3_SET_BITS(peak_duration_min_running,
 8003650:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8003654:	b2db      	uxtb	r3, r3
 8003656:	b21a      	sxth	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	8b1b      	ldrh	r3, [r3, #24]
 800365c:	021b      	lsls	r3, r3, #8
 800365e:	b21b      	sxth	r3, r3
 8003660:	4313      	orrs	r3, r2
 8003662:	b21b      	sxth	r3, r3
 8003664:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                                                      BMI3_STEP_PEAK_DURATION_MIN_RUNNING,
                                                      config->peak_duration_min_running);

            /* Set activity detection fsctor */
            activity_detection_factor = BMI3_SET_BIT_POS0(data_array[18],
 8003668:	7ebb      	ldrb	r3, [r7, #26]
 800366a:	b21b      	sxth	r3, r3
 800366c:	f023 030f 	bic.w	r3, r3, #15
 8003670:	b21a      	sxth	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	8b5b      	ldrh	r3, [r3, #26]
 8003676:	b21b      	sxth	r3, r3
 8003678:	f003 030f 	and.w	r3, r3, #15
 800367c:	b21b      	sxth	r3, r3
 800367e:	4313      	orrs	r3, r2
 8003680:	b21b      	sxth	r3, r3
 8003682:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                                                          BMI3_STEP_ACTIVITY_DETECTION_FACTOR,
                                                          config->activity_detection_factor);

            /* Set activity_detection_threshold for lsb 8 bits */
            activity_detection_threshold1 = BMI3_SET_BITS(data_array[18],
 8003686:	7ebb      	ldrb	r3, [r7, #26]
 8003688:	b21b      	sxth	r3, r3
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	b21a      	sxth	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	8b9b      	ldrh	r3, [r3, #28]
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	b21b      	sxth	r3, r3
 8003698:	4313      	orrs	r3, r2
 800369a:	b21b      	sxth	r3, r3
 800369c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                                                          BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD,
                                                          config->activity_detection_thres);

            activity_detection_threshold = ((uint16_t)data_array[19] << 8);
 80036a0:	7efb      	ldrb	r3, [r7, #27]
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	021b      	lsls	r3, r3, #8
 80036a6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

            /* Set activity_detection_threshold for msb 8 bits */
            activity_detection_threshold2 = BMI3_SET_BITS(activity_detection_threshold,
 80036aa:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	b21a      	sxth	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	8b9b      	ldrh	r3, [r3, #28]
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	b21b      	sxth	r3, r3
 80036bc:	4313      	orrs	r3, r2
 80036be:	b21b      	sxth	r3, r3
 80036c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                                                          BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD,
                                                          config->activity_detection_thres);

            /* Set maximum step duration */
            step_duration_max = BMI3_SET_BIT_POS0(data_array[20], BMI3_STEP_DURATION_MAX, config->step_duration_max);
 80036c4:	7f3b      	ldrb	r3, [r7, #28]
 80036c6:	b21b      	sxth	r3, r3
 80036c8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036cc:	b21a      	sxth	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	8bdb      	ldrh	r3, [r3, #30]
 80036d2:	b21b      	sxth	r3, r3
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	b21b      	sxth	r3, r3
 80036d8:	4313      	orrs	r3, r2
 80036da:	b21b      	sxth	r3, r3
 80036dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

            step_duration_window = ((uint16_t)data_array[21] << 8);
 80036e0:	7f7b      	ldrb	r3, [r7, #29]
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	021b      	lsls	r3, r3, #8
 80036e6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

            /* Set step duration window */
            step_duration_window = BMI3_SET_BITS(step_duration_window,
 80036ea:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	b21a      	sxth	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	8c1b      	ldrh	r3, [r3, #32]
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	b21b      	sxth	r3, r3
 80036fa:	4313      	orrs	r3, r2
 80036fc:	b21b      	sxth	r3, r3
 80036fe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                                                 BMI3_STEP_DURATION_WINDOW,
                                                 config->step_duration_window);

            step_duration_pp_enabled = BMI3_SET_BIT_POS0(data_array[22],
 8003702:	7fbb      	ldrb	r3, [r7, #30]
 8003704:	b21b      	sxth	r3, r3
 8003706:	f023 0301 	bic.w	r3, r3, #1
 800370a:	b21a      	sxth	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003710:	b21b      	sxth	r3, r3
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	b21b      	sxth	r3, r3
 8003718:	4313      	orrs	r3, r2
 800371a:	b21b      	sxth	r3, r3
 800371c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                                                         BMI3_STEP_DURATION_PP_ENABLED,
                                                         config->step_duration_pp_enabled);

            step_duration_threshold = BMI3_SET_BITS(data_array[22],
 8003720:	7fbb      	ldrb	r3, [r7, #30]
 8003722:	b21b      	sxth	r3, r3
 8003724:	f023 030e 	bic.w	r3, r3, #14
 8003728:	b21a      	sxth	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	b21b      	sxth	r3, r3
 8003732:	f003 030e 	and.w	r3, r3, #14
 8003736:	b21b      	sxth	r3, r3
 8003738:	4313      	orrs	r3, r2
 800373a:	b21b      	sxth	r3, r3
 800373c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
                                                    BMI3_STEP_DURATION_THRESHOLD,
                                                    config->step_duration_thres);

            mean_crossing_pp_enabled = BMI3_SET_BITS(data_array[22],
 8003740:	7fbb      	ldrb	r3, [r7, #30]
 8003742:	b21b      	sxth	r3, r3
 8003744:	f023 0310 	bic.w	r3, r3, #16
 8003748:	b21a      	sxth	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	b21b      	sxth	r3, r3
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	b21b      	sxth	r3, r3
 8003758:	4313      	orrs	r3, r2
 800375a:	b21b      	sxth	r3, r3
 800375c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
                                                     BMI3_STEP_MEAN_CROSSING_PP_ENABLED,
                                                     config->mean_crossing_pp_enabled);

            /* Set mcr_threshold for lsb 8 bits */
            mcr_threshold1 = BMI3_SET_BITS(data_array[22], BMI3_STEP_MCR_THRESHOLD, config->mcr_threshold);
 8003760:	7fbb      	ldrb	r3, [r7, #30]
 8003762:	b21b      	sxth	r3, r3
 8003764:	f423 7378 	bic.w	r3, r3, #992	; 0x3e0
 8003768:	b21a      	sxth	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376e:	015b      	lsls	r3, r3, #5
 8003770:	b21b      	sxth	r3, r3
 8003772:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
 8003776:	b21b      	sxth	r3, r3
 8003778:	4313      	orrs	r3, r2
 800377a:	b21b      	sxth	r3, r3
 800377c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

            mcr_threshold = ((uint16_t)data_array[23] << 8);
 8003780:	7ffb      	ldrb	r3, [r7, #31]
 8003782:	b29b      	uxth	r3, r3
 8003784:	021b      	lsls	r3, r3, #8
 8003786:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            /* Set mcr_threshold for msb 8 bits */
            mcr_threshold2 = BMI3_SET_BITS(mcr_threshold, BMI3_STEP_MCR_THRESHOLD, config->mcr_threshold);
 800378a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800378e:	f423 7378 	bic.w	r3, r3, #992	; 0x3e0
 8003792:	b21a      	sxth	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003798:	015b      	lsls	r3, r3, #5
 800379a:	b21b      	sxth	r3, r3
 800379c:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
 80037a0:	b21b      	sxth	r3, r3
 80037a2:	4313      	orrs	r3, r2
 80037a4:	b21b      	sxth	r3, r3
 80037a6:	87fb      	strh	r3, [r7, #62]	; 0x3e

            sc_12_res = ((uint16_t)data_array[23] << 8);
 80037a8:	7ffb      	ldrb	r3, [r7, #31]
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	021b      	lsls	r3, r3, #8
 80037ae:	87bb      	strh	r3, [r7, #60]	; 0x3c

            sc_12_res = BMI3_SET_BITS(sc_12_res, BMI3_STEP_SC_12_RES, config->sc_12_res);
 80037b0:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80037b4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80037b8:	b21a      	sxth	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037be:	029b      	lsls	r3, r3, #10
 80037c0:	b21b      	sxth	r3, r3
 80037c2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037c6:	b21b      	sxth	r3, r3
 80037c8:	4313      	orrs	r3, r2
 80037ca:	b21b      	sxth	r3, r3
 80037cc:	87bb      	strh	r3, [r7, #60]	; 0x3c

            step_config[0] = (uint8_t)watermark1;
 80037ce:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	f887 3020 	strb.w	r3, [r7, #32]
            step_config[1] = (uint8_t)((watermark2 | reset_counter) >> 8);
 80037d8:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 80037dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80037e0:	4313      	orrs	r3, r2
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	0a1b      	lsrs	r3, r3, #8
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            step_config[2] = (uint8_t)env_min_dist_up1;
 80037ee:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            step_config[3] = (uint8_t)(env_min_dist_up2 >> 8);
 80037f8:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80037fc:	0a1b      	lsrs	r3, r3, #8
 80037fe:	b29b      	uxth	r3, r3
 8003800:	b2db      	uxtb	r3, r3
 8003802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            step_config[4] = (uint8_t)env_coef_up1;
 8003806:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800380a:	b2db      	uxtb	r3, r3
 800380c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            step_config[5] = (uint8_t)(env_coef_up2 >> 8);
 8003810:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003814:	0a1b      	lsrs	r3, r3, #8
 8003816:	b29b      	uxth	r3, r3
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            step_config[6] = (uint8_t)env_min_dist_down1;
 800381e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8003822:	b2db      	uxtb	r3, r3
 8003824:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            step_config[7] = (uint8_t)(env_min_dist_down2 >> 8);
 8003828:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800382c:	0a1b      	lsrs	r3, r3, #8
 800382e:	b29b      	uxth	r3, r3
 8003830:	b2db      	uxtb	r3, r3
 8003832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            step_config[8] = (uint8_t)env_coef_down1;
 8003836:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800383a:	b2db      	uxtb	r3, r3
 800383c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            step_config[9] = (uint8_t)(env_coef_down2 >> 8);
 8003840:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003844:	0a1b      	lsrs	r3, r3, #8
 8003846:	b29b      	uxth	r3, r3
 8003848:	b2db      	uxtb	r3, r3
 800384a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            step_config[10] = (uint8_t)mean_val_decay1;
 800384e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003852:	b2db      	uxtb	r3, r3
 8003854:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            step_config[11] = (uint8_t)(mean_val_decay2 >> 8);
 8003858:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800385c:	0a1b      	lsrs	r3, r3, #8
 800385e:	b29b      	uxth	r3, r3
 8003860:	b2db      	uxtb	r3, r3
 8003862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            step_config[12] = (uint8_t)mean_step_dur1;
 8003866:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800386a:	b2db      	uxtb	r3, r3
 800386c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
            step_config[13] = (uint8_t)(mean_step_dur2 >> 8);
 8003870:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003874:	0a1b      	lsrs	r3, r3, #8
 8003876:	b29b      	uxth	r3, r3
 8003878:	b2db      	uxtb	r3, r3
 800387a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            step_config[14] = (uint8_t)(step_buffer_size | filter_cascade_enabled | step_counter_increment1);
 800387e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8003882:	b2da      	uxtb	r2, r3
 8003884:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003888:	b2db      	uxtb	r3, r3
 800388a:	4313      	orrs	r3, r2
 800388c:	b2da      	uxtb	r2, r3
 800388e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003892:	b2db      	uxtb	r3, r3
 8003894:	4313      	orrs	r3, r2
 8003896:	b2db      	uxtb	r3, r3
 8003898:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            step_config[15] = (uint8_t)(step_counter_increment2 >> 8);
 800389c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80038a0:	0a1b      	lsrs	r3, r3, #8
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            step_config[16] = (uint8_t)peak_duration_min_walking;
 80038aa:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            step_config[17] = (uint8_t)(peak_duration_min_running >> 8);
 80038b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80038b8:	0a1b      	lsrs	r3, r3, #8
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            step_config[18] = (uint8_t)(activity_detection_factor | activity_detection_threshold1);
 80038c2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	4313      	orrs	r3, r2
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
            step_config[19] = (uint8_t)(activity_detection_threshold2 >> 8);
 80038d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80038da:	0a1b      	lsrs	r3, r3, #8
 80038dc:	b29b      	uxth	r3, r3
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            step_config[20] = (uint8_t)step_duration_max;
 80038e4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            step_config[21] = (uint8_t)(step_duration_window >> 8);
 80038ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80038f2:	0a1b      	lsrs	r3, r3, #8
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            step_config[22] =
                (uint8_t)(step_duration_pp_enabled | step_duration_threshold | mean_crossing_pp_enabled |
 80038fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003900:	b2da      	uxtb	r2, r3
 8003902:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003906:	b2db      	uxtb	r3, r3
 8003908:	4313      	orrs	r3, r2
 800390a:	b2da      	uxtb	r2, r3
 800390c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003910:	b2db      	uxtb	r3, r3
 8003912:	4313      	orrs	r3, r2
 8003914:	b2da      	uxtb	r2, r3
 8003916:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800391a:	b2db      	uxtb	r3, r3
 800391c:	4313      	orrs	r3, r2
 800391e:	b2db      	uxtb	r3, r3
            step_config[22] =
 8003920:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                          mcr_threshold1);
            step_config[23] = (uint8_t)((mcr_threshold2 | sc_12_res) >> 8);
 8003924:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003926:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003928:	4313      	orrs	r3, r2
 800392a:	b29b      	uxth	r3, r3
 800392c:	0a1b      	lsrs	r3, r3, #8
 800392e:	b29b      	uxth	r3, r3
 8003930:	b2db      	uxtb	r3, r3
 8003932:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

            /* Set the configuration back to feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, step_config, 24, dev);
 8003936:	f107 0120 	add.w	r1, r7, #32
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2218      	movs	r2, #24
 800393e:	2042      	movs	r0, #66	; 0x42
 8003940:	f7fd fe01 	bl	8001546 <bmi3_set_regs>
 8003944:	4603      	mov	r3, r0
 8003946:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800394a:	e002      	b.n	8003952 <set_step_config+0x514>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800394c:	23ff      	movs	r3, #255	; 0xff
 800394e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }

    return rslt;
 8003952:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
}
 8003956:	4618      	mov	r0, r3
 8003958:	3790      	adds	r7, #144	; 0x90
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <get_tap_config>:
 * @brief This internal API gets tap configurations like axes select, wait for time out, mode,
 * max peaks for tap, duration, tap peak threshold, max gest duration, max dur bw peaks,
 * shock settling duration.
 */
static int8_t get_tap_config(struct bmi3_tap_detector_config *config, struct bmi3_dev *dev)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b088      	sub	sp, #32
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t tap_config[6] = { 0 };
 8003968:	2300      	movs	r3, #0
 800396a:	613b      	str	r3, [r7, #16]
 800396c:	2300      	movs	r3, #0
 800396e:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of tap feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_TAP, 0 };
 8003970:	231e      	movs	r3, #30
 8003972:	81bb      	strh	r3, [r7, #12]

    /* Variable to define array offset */
    uint8_t idx = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	77bb      	strb	r3, [r7, #30]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 80a7 	beq.w	8003ace <get_tap_config+0x170>
    {
        /* Set the tap base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003980:	f107 010c 	add.w	r1, r7, #12
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	2202      	movs	r2, #2
 8003988:	2041      	movs	r0, #65	; 0x41
 800398a:	f7fd fddc 	bl	8001546 <bmi3_set_regs>
 800398e:	4603      	mov	r3, r0
 8003990:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8003992:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003996:	2b00      	cmp	r3, #0
 8003998:	f040 809b 	bne.w	8003ad2 <get_tap_config+0x174>
        {
            /* Get the configuration from the feature engine register where tap feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, tap_config, 6, dev);
 800399c:	f107 0110 	add.w	r1, r7, #16
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	2206      	movs	r2, #6
 80039a4:	2042      	movs	r0, #66	; 0x42
 80039a6:	f7fd fd69 	bl	800147c <bmi3_get_regs>
 80039aa:	4603      	mov	r3, r0
 80039ac:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 80039ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f040 808d 	bne.w	8003ad2 <get_tap_config+0x174>
            {
                /* Get word to calculate axis select, wait for time out, max peaks for tap and mode
                 * from the same word */
                lsb = (uint16_t) tap_config[idx++];
 80039b8:	7fbb      	ldrb	r3, [r7, #30]
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	77ba      	strb	r2, [r7, #30]
 80039be:	3320      	adds	r3, #32
 80039c0:	443b      	add	r3, r7
 80039c2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80039c6:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) tap_config[idx++] << 8);
 80039c8:	7fbb      	ldrb	r3, [r7, #30]
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	77ba      	strb	r2, [r7, #30]
 80039ce:	3320      	adds	r3, #32
 80039d0:	443b      	add	r3, r7
 80039d2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	837b      	strh	r3, [r7, #26]
                lsb_msb = lsb | msb;
 80039dc:	8bba      	ldrh	r2, [r7, #28]
 80039de:	8b7b      	ldrh	r3, [r7, #26]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	833b      	strh	r3, [r7, #24]

                /* Get axis selection */
                config->axis_sel = lsb_msb & BMI3_TAP_AXIS_SEL_MASK;
 80039e4:	8b3b      	ldrh	r3, [r7, #24]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	701a      	strb	r2, [r3, #0]

                /* Get wait for time out */
                config->wait_for_timeout = (lsb_msb & BMI3_TAP_WAIT_FR_TIME_OUT_MASK) >> BMI3_TAP_WAIT_FR_TIME_OUT_POS;
 80039f2:	8b3b      	ldrh	r3, [r7, #24]
 80039f4:	109b      	asrs	r3, r3, #2
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	705a      	strb	r2, [r3, #1]

                /* Get max peaks for tap */
                config->max_peaks_for_tap = (lsb_msb & BMI3_TAP_MAX_PEAKS_MASK) >> BMI3_TAP_MAX_PEAKS_POS;
 8003a02:	8b3b      	ldrh	r3, [r7, #24]
 8003a04:	10db      	asrs	r3, r3, #3
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	709a      	strb	r2, [r3, #2]

                /* Get mode */
                config->mode = (lsb_msb & BMI3_TAP_MODE_MASK) >> BMI3_TAP_MODE_POS;
 8003a12:	8b3b      	ldrh	r3, [r7, #24]
 8003a14:	119b      	asrs	r3, r3, #6
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	f003 0303 	and.w	r3, r3, #3
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	70da      	strb	r2, [r3, #3]

                /* Get word to calculate threshold, output configuration from the same word */
                lsb = (uint16_t) tap_config[idx++];
 8003a22:	7fbb      	ldrb	r3, [r7, #30]
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	77ba      	strb	r2, [r7, #30]
 8003a28:	3320      	adds	r3, #32
 8003a2a:	443b      	add	r3, r7
 8003a2c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003a30:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) tap_config[idx++] << 8);
 8003a32:	7fbb      	ldrb	r3, [r7, #30]
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	77ba      	strb	r2, [r7, #30]
 8003a38:	3320      	adds	r3, #32
 8003a3a:	443b      	add	r3, r7
 8003a3c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	021b      	lsls	r3, r3, #8
 8003a44:	837b      	strh	r3, [r7, #26]
                lsb_msb = lsb | msb;
 8003a46:	8bba      	ldrh	r2, [r7, #28]
 8003a48:	8b7b      	ldrh	r3, [r7, #26]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	833b      	strh	r3, [r7, #24]

                /* Get tap peak threshold */
                config->tap_peak_thres = lsb_msb & BMI3_TAP_PEAK_THRES_MASK;
 8003a4e:	8b3b      	ldrh	r3, [r7, #24]
 8003a50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	809a      	strh	r2, [r3, #4]

                /* Get max gesture duration */
                config->max_gest_dur = (lsb_msb & BMI3_TAP_MAX_GEST_DUR_MASK) >> BMI3_TAP_MAX_GEST_DUR_POS;
 8003a5a:	8b3b      	ldrh	r3, [r7, #24]
 8003a5c:	0a9b      	lsrs	r3, r3, #10
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	719a      	strb	r2, [r3, #6]

                /* Get word to calculate max_dur_between_peaks, tap_shock_settling_dur, min_quite_dur_between_taps
                 *  and quite_time_after_gest from the same word */
                lsb = (uint16_t) tap_config[idx++];
 8003a66:	7fbb      	ldrb	r3, [r7, #30]
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	77ba      	strb	r2, [r7, #30]
 8003a6c:	3320      	adds	r3, #32
 8003a6e:	443b      	add	r3, r7
 8003a70:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003a74:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) tap_config[idx++] << 8);
 8003a76:	7fbb      	ldrb	r3, [r7, #30]
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	77ba      	strb	r2, [r7, #30]
 8003a7c:	3320      	adds	r3, #32
 8003a7e:	443b      	add	r3, r7
 8003a80:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	021b      	lsls	r3, r3, #8
 8003a88:	837b      	strh	r3, [r7, #26]
                lsb_msb = lsb | msb;
 8003a8a:	8bba      	ldrh	r2, [r7, #28]
 8003a8c:	8b7b      	ldrh	r3, [r7, #26]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	833b      	strh	r3, [r7, #24]

                /* Get maximum duration between peaks */
                config->max_dur_between_peaks = lsb_msb & BMI3_TAP_MAX_DUR_BW_PEAKS_MASK;
 8003a92:	8b3b      	ldrh	r3, [r7, #24]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	71da      	strb	r2, [r3, #7]

                /* Get tap shock settling duration */
                config->tap_shock_settling_dur = (lsb_msb & BMI3_TAP_SHOCK_SETT_DUR_MASK) >>
 8003aa0:	8b3b      	ldrh	r3, [r7, #24]
 8003aa2:	111b      	asrs	r3, r3, #4
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	721a      	strb	r2, [r3, #8]
                                                 BMI3_TAP_SHOCK_SETT_DUR_POS;

                /* Get minimum quite duration between taps */
                config->min_quite_dur_between_taps = (lsb_msb & BMI3_TAP_MIN_QUITE_DUR_BW_TAPS_MASK) >>
 8003ab0:	8b3b      	ldrh	r3, [r7, #24]
 8003ab2:	121b      	asrs	r3, r3, #8
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	725a      	strb	r2, [r3, #9]
                                                     BMI3_TAP_MIN_QUITE_DUR_BW_TAPS_POS;

                /* Get quite time after gesture */
                config->quite_time_after_gest = (lsb_msb & BMI3_TAP_QUITE_TIME_AFTR_GEST_MASK) >>
 8003ac0:	8b3b      	ldrh	r3, [r7, #24]
 8003ac2:	0b1b      	lsrs	r3, r3, #12
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	729a      	strb	r2, [r3, #10]
 8003acc:	e001      	b.n	8003ad2 <get_tap_config+0x174>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003ace:	23ff      	movs	r3, #255	; 0xff
 8003ad0:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8003ad2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3720      	adds	r7, #32
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <set_tap_config>:
 * @brief This internal API sets tap configurations like axes select, wait for time out, mode,
 * max peaks for tap, duration, tap peak threshold, max gest duration, max dur bw peaks,
 * shock settling duration.
 */
static int8_t set_tap_config(const struct bmi3_tap_detector_config *config, struct bmi3_dev *dev)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b08c      	sub	sp, #48	; 0x30
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t tap_config[6] = { 0 };
 8003ae8:	2300      	movs	r3, #0
 8003aea:	613b      	str	r3, [r7, #16]
 8003aec:	2300      	movs	r3, #0
 8003aee:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of tap feature */
    uint8_t base_aadr[2] = { BMI3_BASE_ADDR_TAP, 0 };
 8003af0:	231e      	movs	r3, #30
 8003af2:	81bb      	strh	r3, [r7, #12]

    uint16_t axis_sel, wait_fr_time_out, max_peaks_for_tap, mode;
    uint16_t tap_peak_thres, tap_peak_thres1, tap_peak_thres2, max_gest_dur;
    uint16_t max_dur_between_peaks, tap_shock_setting_dur, min_quite_dur_between_taps, quite_time_after_gest;

    if (config != NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 80f0 	beq.w	8003cdc <set_tap_config+0x1fe>
    {
        /* Set the tap base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_aadr, 2, dev);
 8003afc:	f107 010c 	add.w	r1, r7, #12
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2202      	movs	r2, #2
 8003b04:	2041      	movs	r0, #65	; 0x41
 8003b06:	f7fd fd1e 	bl	8001546 <bmi3_set_regs>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if (rslt == BMI3_OK)
 8003b10:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f040 80e4 	bne.w	8003ce2 <set_tap_config+0x204>
        {
            /* Set axis_sel */
            axis_sel = BMI3_SET_BIT_POS0(tap_config[0], BMI3_TAP_AXIS_SEL, config->axis_sel);
 8003b1a:	7c3b      	ldrb	r3, [r7, #16]
 8003b1c:	b21b      	sxth	r3, r3
 8003b1e:	f023 0303 	bic.w	r3, r3, #3
 8003b22:	b21a      	sxth	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	b21b      	sxth	r3, r3
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	b21b      	sxth	r3, r3
 8003b30:	4313      	orrs	r3, r2
 8003b32:	b21b      	sxth	r3, r3
 8003b34:	85bb      	strh	r3, [r7, #44]	; 0x2c

            /* Set wait for time out */
            wait_fr_time_out = BMI3_SET_BITS(tap_config[0], BMI3_TAP_WAIT_FR_TIME_OUT, config->wait_for_timeout);
 8003b36:	7c3b      	ldrb	r3, [r7, #16]
 8003b38:	b21b      	sxth	r3, r3
 8003b3a:	f023 0304 	bic.w	r3, r3, #4
 8003b3e:	b21a      	sxth	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	785b      	ldrb	r3, [r3, #1]
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	b21b      	sxth	r3, r3
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	b21b      	sxth	r3, r3
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	b21b      	sxth	r3, r3
 8003b52:	857b      	strh	r3, [r7, #42]	; 0x2a

            /* Set maximum peaks for tap */
            max_peaks_for_tap = BMI3_SET_BITS(tap_config[0], BMI3_TAP_MAX_PEAKS, config->max_peaks_for_tap);
 8003b54:	7c3b      	ldrb	r3, [r7, #16]
 8003b56:	b21b      	sxth	r3, r3
 8003b58:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003b5c:	b21a      	sxth	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	789b      	ldrb	r3, [r3, #2]
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	b21b      	sxth	r3, r3
 8003b66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b6a:	b21b      	sxth	r3, r3
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	b21b      	sxth	r3, r3
 8003b70:	853b      	strh	r3, [r7, #40]	; 0x28

            /* Set mode */
            mode = BMI3_SET_BITS(tap_config[0], BMI3_TAP_MODE, config->mode);
 8003b72:	7c3b      	ldrb	r3, [r7, #16]
 8003b74:	b21b      	sxth	r3, r3
 8003b76:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003b7a:	b21a      	sxth	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	78db      	ldrb	r3, [r3, #3]
 8003b80:	019b      	lsls	r3, r3, #6
 8003b82:	b21b      	sxth	r3, r3
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	b21b      	sxth	r3, r3
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	b21b      	sxth	r3, r3
 8003b8c:	84fb      	strh	r3, [r7, #38]	; 0x26

            /* Set peak threshold first byte in word */
            tap_peak_thres = BMI3_SET_BIT_POS0(tap_config[2], BMI3_TAP_PEAK_THRES, config->tap_peak_thres);
 8003b8e:	7cbb      	ldrb	r3, [r7, #18]
 8003b90:	b21b      	sxth	r3, r3
 8003b92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b96:	f023 0303 	bic.w	r3, r3, #3
 8003b9a:	b21a      	sxth	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	889b      	ldrh	r3, [r3, #4]
 8003ba0:	b21b      	sxth	r3, r3
 8003ba2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ba6:	b21b      	sxth	r3, r3
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	b21b      	sxth	r3, r3
 8003bac:	84bb      	strh	r3, [r7, #36]	; 0x24

            /* Left shift by 8 times so that we can set rest of the values of tap peak threshold conf in word */
            tap_peak_thres1 = ((uint16_t)tap_config[3] << 8);
 8003bae:	7cfb      	ldrb	r3, [r7, #19]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	021b      	lsls	r3, r3, #8
 8003bb4:	847b      	strh	r3, [r7, #34]	; 0x22

            /* Set peak threshold second byte in word */
            tap_peak_thres2 = BMI3_SET_BIT_POS0(tap_peak_thres1, BMI3_TAP_PEAK_THRES, config->tap_peak_thres);
 8003bb6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003bba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bbe:	f023 0303 	bic.w	r3, r3, #3
 8003bc2:	b21a      	sxth	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	889b      	ldrh	r3, [r3, #4]
 8003bc8:	b21b      	sxth	r3, r3
 8003bca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bce:	b21b      	sxth	r3, r3
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	b21b      	sxth	r3, r3
 8003bd4:	843b      	strh	r3, [r7, #32]

            max_gest_dur = ((uint16_t)tap_config[3] << 8);
 8003bd6:	7cfb      	ldrb	r3, [r7, #19]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	021b      	lsls	r3, r3, #8
 8003bdc:	83fb      	strh	r3, [r7, #30]

            /* Set max gesture duration */
            max_gest_dur = BMI3_SET_BITS(max_gest_dur, BMI3_TAP_MAX_GEST_DUR, config->max_gest_dur);
 8003bde:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003be2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003be6:	b21a      	sxth	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	799b      	ldrb	r3, [r3, #6]
 8003bec:	029b      	lsls	r3, r3, #10
 8003bee:	b21b      	sxth	r3, r3
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	b21b      	sxth	r3, r3
 8003bf4:	83fb      	strh	r3, [r7, #30]

            /* Set max duration between peaks */
            max_dur_between_peaks = BMI3_SET_BIT_POS0(tap_config[4],
 8003bf6:	7d3b      	ldrb	r3, [r7, #20]
 8003bf8:	b21b      	sxth	r3, r3
 8003bfa:	f023 030f 	bic.w	r3, r3, #15
 8003bfe:	b21a      	sxth	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	79db      	ldrb	r3, [r3, #7]
 8003c04:	b21b      	sxth	r3, r3
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	b21b      	sxth	r3, r3
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	b21b      	sxth	r3, r3
 8003c10:	83bb      	strh	r3, [r7, #28]
                                                      BMI3_TAP_MAX_DUR_BW_PEAKS,
                                                      config->max_dur_between_peaks);

            /* Set shock settling duration */
            tap_shock_setting_dur =
                BMI3_SET_BITS(tap_config[4], BMI3_TAP_SHOCK_SETT_DUR, config->tap_shock_settling_dur);
 8003c12:	7d3b      	ldrb	r3, [r7, #20]
 8003c14:	b21b      	sxth	r3, r3
 8003c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c1a:	b21a      	sxth	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	7a1b      	ldrb	r3, [r3, #8]
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	b21b      	sxth	r3, r3
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	b21b      	sxth	r3, r3
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	b21b      	sxth	r3, r3
            tap_shock_setting_dur =
 8003c2c:	837b      	strh	r3, [r7, #26]

            min_quite_dur_between_taps = ((uint16_t)tap_config[5] << 8);
 8003c2e:	7d7b      	ldrb	r3, [r7, #21]
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	021b      	lsls	r3, r3, #8
 8003c34:	833b      	strh	r3, [r7, #24]

            /* Set quite duration between taps */
            min_quite_dur_between_taps = BMI3_SET_BITS(min_quite_dur_between_taps,
 8003c36:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003c3a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c3e:	b21a      	sxth	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	7a5b      	ldrb	r3, [r3, #9]
 8003c44:	021b      	lsls	r3, r3, #8
 8003c46:	b21b      	sxth	r3, r3
 8003c48:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c4c:	b21b      	sxth	r3, r3
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	b21b      	sxth	r3, r3
 8003c52:	833b      	strh	r3, [r7, #24]
                                                       BMI3_TAP_MIN_QUITE_DUR_BW_TAPS,
                                                       config->min_quite_dur_between_taps);

            quite_time_after_gest = ((uint16_t)tap_config[5] << 8);
 8003c54:	7d7b      	ldrb	r3, [r7, #21]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	021b      	lsls	r3, r3, #8
 8003c5a:	82fb      	strh	r3, [r7, #22]

            /* Set quite time after gesture */
            quite_time_after_gest = BMI3_SET_BITS(quite_time_after_gest,
 8003c5c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c64:	b21a      	sxth	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	7a9b      	ldrb	r3, [r3, #10]
 8003c6a:	031b      	lsls	r3, r3, #12
 8003c6c:	b21b      	sxth	r3, r3
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	b21b      	sxth	r3, r3
 8003c72:	82fb      	strh	r3, [r7, #22]
                                                  BMI3_TAP_QUITE_TIME_AFTR_GEST,
                                                  config->quite_time_after_gest);

            /* Copy all the configurations back to the tap configuration array */
            tap_config[0] = (uint8_t)(axis_sel | wait_fr_time_out | max_peaks_for_tap | mode);
 8003c74:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	4313      	orrs	r3, r2
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	743b      	strb	r3, [r7, #16]
            tap_config[2] = (uint8_t)(tap_peak_thres);
 8003c92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	74bb      	strb	r3, [r7, #18]
            tap_config[3] = (uint8_t)((tap_peak_thres2 | max_gest_dur) >> 8);
 8003c98:	8c3a      	ldrh	r2, [r7, #32]
 8003c9a:	8bfb      	ldrh	r3, [r7, #30]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	0a1b      	lsrs	r3, r3, #8
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	74fb      	strb	r3, [r7, #19]
            tap_config[4] = (uint8_t)(max_dur_between_peaks | tap_shock_setting_dur);
 8003ca8:	8bbb      	ldrh	r3, [r7, #28]
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	8b7b      	ldrh	r3, [r7, #26]
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	753b      	strb	r3, [r7, #20]
            tap_config[5] = (uint8_t)((min_quite_dur_between_taps | quite_time_after_gest) >> 8);
 8003cb6:	8b3a      	ldrh	r2, [r7, #24]
 8003cb8:	8afb      	ldrh	r3, [r7, #22]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	0a1b      	lsrs	r3, r3, #8
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	757b      	strb	r3, [r7, #21]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, tap_config, 6, dev);
 8003cc6:	f107 0110 	add.w	r1, r7, #16
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2206      	movs	r2, #6
 8003cce:	2042      	movs	r0, #66	; 0x42
 8003cd0:	f7fd fc39 	bl	8001546 <bmi3_set_regs>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003cda:	e002      	b.n	8003ce2 <set_tap_config+0x204>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003cdc:	23ff      	movs	r3, #255	; 0xff
 8003cde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return rslt;
 8003ce2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3730      	adds	r7, #48	; 0x30
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <set_alternate_accel_config>:
/*!
 * @brief This internal API sets alternate accelerometer configurations like ODR,
 * accel mode and average number of samples.
 */
static int8_t set_alternate_accel_config(const struct bmi3_alt_accel_config *config, struct bmi3_dev *dev)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b086      	sub	sp, #24
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	81bb      	strh	r3, [r7, #12]

    uint16_t alt_acc_odr, alt_acc_avg_num, alt_acc_mode;

    if (config != NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d03a      	beq.n	8003d78 <set_alternate_accel_config+0x8a>
    {
        /* Set alternate accelerometer ODR */
        alt_acc_odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_ALT_ACC_ODR, config->alt_acc_odr);
 8003d02:	7b3b      	ldrb	r3, [r7, #12]
 8003d04:	b21b      	sxth	r3, r3
 8003d06:	f023 030f 	bic.w	r3, r3, #15
 8003d0a:	b21a      	sxth	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	b21b      	sxth	r3, r3
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	b21b      	sxth	r3, r3
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	b21b      	sxth	r3, r3
 8003d1c:	82bb      	strh	r3, [r7, #20]

        /* Set alternate accelerometer average number of samples */
        alt_acc_avg_num = BMI3_SET_BITS(reg_data[1], BMI3_ALT_ACC_AVG_NUM, config->alt_acc_avg_num);
 8003d1e:	7b7b      	ldrb	r3, [r7, #13]
 8003d20:	b21a      	sxth	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	789b      	ldrb	r3, [r3, #2]
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	b21b      	sxth	r3, r3
 8003d2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d2e:	b21b      	sxth	r3, r3
 8003d30:	4313      	orrs	r3, r2
 8003d32:	b21b      	sxth	r3, r3
 8003d34:	827b      	strh	r3, [r7, #18]

        /* Set alternate accelerometer mode */
        alt_acc_mode = BMI3_SET_BITS(reg_data[1], BMI3_ALT_ACC_MODE, config->alt_acc_mode);
 8003d36:	7b7b      	ldrb	r3, [r7, #13]
 8003d38:	b21a      	sxth	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	785b      	ldrb	r3, [r3, #1]
 8003d3e:	031b      	lsls	r3, r3, #12
 8003d40:	b21b      	sxth	r3, r3
 8003d42:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003d46:	b21b      	sxth	r3, r3
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	b21b      	sxth	r3, r3
 8003d4c:	823b      	strh	r3, [r7, #16]

        reg_data[0] = (uint8_t)(alt_acc_odr);
 8003d4e:	8abb      	ldrh	r3, [r7, #20]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	733b      	strb	r3, [r7, #12]
        reg_data[1] = (uint8_t)((alt_acc_avg_num | alt_acc_mode) >> 8);
 8003d54:	8a7a      	ldrh	r2, [r7, #18]
 8003d56:	8a3b      	ldrh	r3, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	0a1b      	lsrs	r3, r3, #8
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	737b      	strb	r3, [r7, #13]

        /* Set configurations of alternate accel */
        rslt = bmi3_set_regs(BMI3_REG_ALT_ACC_CONF, reg_data, 2, dev);
 8003d64:	f107 010c 	add.w	r1, r7, #12
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	2028      	movs	r0, #40	; 0x28
 8003d6e:	f7fd fbea 	bl	8001546 <bmi3_set_regs>
 8003d72:	4603      	mov	r3, r0
 8003d74:	75fb      	strb	r3, [r7, #23]
 8003d76:	e001      	b.n	8003d7c <set_alternate_accel_config+0x8e>
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003d78:	23ff      	movs	r3, #255	; 0xff
 8003d7a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003d7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <get_alternate_accel_config>:
/*!
 * @brief This internal API gets alternate accelerometer configurations like ODR,
 * accel mode and average number of samples.
 */
static int8_t get_alternate_accel_config(struct bmi3_alt_accel_config *config, struct bmi3_dev *dev)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 8003d92:	2300      	movs	r3, #0
 8003d94:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d02a      	beq.n	8003df2 <get_alternate_accel_config+0x6a>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_ALT_ACC_CONF, data_array, 2, dev);
 8003d9c:	f107 0108 	add.w	r1, r7, #8
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	2202      	movs	r2, #2
 8003da4:	2028      	movs	r0, #40	; 0x28
 8003da6:	f7fd fb69 	bl	800147c <bmi3_get_regs>
 8003daa:	4603      	mov	r3, r0
 8003dac:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8003dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d11f      	bne.n	8003df6 <get_alternate_accel_config+0x6e>
        {
            reg_data = data_array[0];
 8003db6:	7a3b      	ldrb	r3, [r7, #8]
 8003db8:	81bb      	strh	r3, [r7, #12]

            /* Get alternate accelerometer ODR */
            config->alt_acc_odr = BMI3_GET_BIT_POS0(reg_data, BMI3_ALT_ACC_ODR);
 8003dba:	89bb      	ldrh	r3, [r7, #12]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	701a      	strb	r2, [r3, #0]

            reg_data = ((uint16_t)data_array[1] << 8);
 8003dc8:	7a7b      	ldrb	r3, [r7, #9]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	021b      	lsls	r3, r3, #8
 8003dce:	81bb      	strh	r3, [r7, #12]

            /* Get alternate accelerometer average samples */
            config->alt_acc_avg_num = BMI3_GET_BITS(reg_data, BMI3_ALT_ACC_AVG_NUM);
 8003dd0:	89bb      	ldrh	r3, [r7, #12]
 8003dd2:	121b      	asrs	r3, r3, #8
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	709a      	strb	r2, [r3, #2]

            /* Get alternate accel mode */
            config->alt_acc_mode = BMI3_GET_BITS(reg_data, BMI3_ALT_ACC_MODE);
 8003de0:	89bb      	ldrh	r3, [r7, #12]
 8003de2:	131b      	asrs	r3, r3, #12
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	705a      	strb	r2, [r3, #1]
 8003df0:	e001      	b.n	8003df6 <get_alternate_accel_config+0x6e>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003df2:	23ff      	movs	r3, #255	; 0xff
 8003df4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <set_alternate_gyro_config>:
/*!
 * @brief This internal API sets alternate gyro configurations like ODR,
 * gyro mode and average number of samples.
 */
static int8_t set_alternate_gyro_config(const struct bmi3_alt_gyro_config *config, struct bmi3_dev *dev)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b086      	sub	sp, #24
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	81bb      	strh	r3, [r7, #12]

    uint16_t alt_gyro_odr, alt_gyro_avg_num, alt_gyro_mode;

    if (config != NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d03a      	beq.n	8003e8c <set_alternate_gyro_config+0x8a>
    {
        /* Set alternate gyro ODR */
        alt_gyro_odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_ALT_GYR_ODR, config->alt_gyro_odr);
 8003e16:	7b3b      	ldrb	r3, [r7, #12]
 8003e18:	b21b      	sxth	r3, r3
 8003e1a:	f023 030f 	bic.w	r3, r3, #15
 8003e1e:	b21a      	sxth	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	b21b      	sxth	r3, r3
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	b21b      	sxth	r3, r3
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	b21b      	sxth	r3, r3
 8003e30:	82bb      	strh	r3, [r7, #20]

        /* Set alternate gyro average number of samples */
        alt_gyro_avg_num = BMI3_SET_BITS(reg_data[1], BMI3_ALT_GYR_AVG_NUM, config->alt_gyro_avg_num);
 8003e32:	7b7b      	ldrb	r3, [r7, #13]
 8003e34:	b21a      	sxth	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	789b      	ldrb	r3, [r3, #2]
 8003e3a:	021b      	lsls	r3, r3, #8
 8003e3c:	b21b      	sxth	r3, r3
 8003e3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e42:	b21b      	sxth	r3, r3
 8003e44:	4313      	orrs	r3, r2
 8003e46:	b21b      	sxth	r3, r3
 8003e48:	827b      	strh	r3, [r7, #18]

        /* Set alternate gyro mode */
        alt_gyro_mode = BMI3_SET_BITS(reg_data[1], BMI3_ALT_GYR_MODE, config->alt_gyro_mode);
 8003e4a:	7b7b      	ldrb	r3, [r7, #13]
 8003e4c:	b21a      	sxth	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	785b      	ldrb	r3, [r3, #1]
 8003e52:	031b      	lsls	r3, r3, #12
 8003e54:	b21b      	sxth	r3, r3
 8003e56:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003e5a:	b21b      	sxth	r3, r3
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	b21b      	sxth	r3, r3
 8003e60:	823b      	strh	r3, [r7, #16]

        reg_data[0] = (uint8_t)(alt_gyro_odr);
 8003e62:	8abb      	ldrh	r3, [r7, #20]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	733b      	strb	r3, [r7, #12]
        reg_data[1] = (uint8_t)((alt_gyro_avg_num | alt_gyro_mode) >> 8);
 8003e68:	8a7a      	ldrh	r2, [r7, #18]
 8003e6a:	8a3b      	ldrh	r3, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	0a1b      	lsrs	r3, r3, #8
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	737b      	strb	r3, [r7, #13]

        /* Set configurations of alternate gyro */
        rslt = bmi3_set_regs(BMI3_REG_ALT_GYR_CONF, reg_data, 2, dev);
 8003e78:	f107 010c 	add.w	r1, r7, #12
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	2029      	movs	r0, #41	; 0x29
 8003e82:	f7fd fb60 	bl	8001546 <bmi3_set_regs>
 8003e86:	4603      	mov	r3, r0
 8003e88:	75fb      	strb	r3, [r7, #23]
 8003e8a:	e001      	b.n	8003e90 <set_alternate_gyro_config+0x8e>
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003e8c:	23ff      	movs	r3, #255	; 0xff
 8003e8e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003e90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <get_alternate_gyro_config>:
/*!
 * @brief This internal API gets alternate gyro configurations like ODR,
 * gyro mode and average number of samples.
 */
static int8_t get_alternate_gyro_config(struct bmi3_alt_gyro_config *config, struct bmi3_dev *dev)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d02a      	beq.n	8003f06 <get_alternate_gyro_config+0x6a>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_ALT_GYR_CONF, data_array, 2, dev);
 8003eb0:	f107 0108 	add.w	r1, r7, #8
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	2029      	movs	r0, #41	; 0x29
 8003eba:	f7fd fadf 	bl	800147c <bmi3_get_regs>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8003ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d11f      	bne.n	8003f0a <get_alternate_gyro_config+0x6e>
        {
            reg_data = data_array[0];
 8003eca:	7a3b      	ldrb	r3, [r7, #8]
 8003ecc:	81bb      	strh	r3, [r7, #12]

            /* Get alternate gyro ODR */
            config->alt_gyro_odr = BMI3_GET_BIT_POS0(reg_data, BMI3_ALT_GYR_ODR);
 8003ece:	89bb      	ldrh	r3, [r7, #12]
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	701a      	strb	r2, [r3, #0]

            reg_data = ((uint16_t)data_array[1] << 8);
 8003edc:	7a7b      	ldrb	r3, [r7, #9]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	021b      	lsls	r3, r3, #8
 8003ee2:	81bb      	strh	r3, [r7, #12]

            /* Get alternate gyro average samples */
            config->alt_gyro_avg_num = BMI3_GET_BITS(reg_data, BMI3_ALT_GYR_AVG_NUM);
 8003ee4:	89bb      	ldrh	r3, [r7, #12]
 8003ee6:	121b      	asrs	r3, r3, #8
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	709a      	strb	r2, [r3, #2]

            /* Get alternate gyro mode */
            config->alt_gyro_mode = BMI3_GET_BITS(reg_data, BMI3_ALT_GYR_MODE);
 8003ef4:	89bb      	ldrh	r3, [r7, #12]
 8003ef6:	131b      	asrs	r3, r3, #12
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	705a      	strb	r2, [r3, #1]
 8003f04:	e001      	b.n	8003f0a <get_alternate_gyro_config+0x6e>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003f06:	23ff      	movs	r3, #255	; 0xff
 8003f08:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <set_alternate_auto_config>:

/*!
 * @brief This internal API sets alternate auto configurations for feature interrupts.
 */
static int8_t set_alternate_auto_config(const struct bmi3_auto_config_change *config, struct bmi3_dev *dev)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b086      	sub	sp, #24
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the alternate auto configuration */
    uint8_t alt_auto_config[2] = { 0 };
 8003f20:	2300      	movs	r3, #0
 8003f22:	823b      	strh	r3, [r7, #16]

    /* Array to set the base address of alternate auto config */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ALT_AUTO_CONFIG, 0 };
 8003f24:	2323      	movs	r3, #35	; 0x23
 8003f26:	81bb      	strh	r3, [r7, #12]

    uint8_t alt_switch, user_switch;

    if (config != NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d035      	beq.n	8003f9a <set_alternate_auto_config+0x84>
    {
        /* Set the alternate auto config base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003f2e:	f107 010c 	add.w	r1, r7, #12
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2202      	movs	r2, #2
 8003f36:	2041      	movs	r0, #65	; 0x41
 8003f38:	f7fd fb05 	bl	8001546 <bmi3_set_regs>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8003f40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d12a      	bne.n	8003f9e <set_alternate_auto_config+0x88>
        {
            /* Set alternate switch config */
            alt_switch = BMI3_SET_BIT_POS0(alt_auto_config[0],
 8003f48:	7c3b      	ldrb	r3, [r7, #16]
 8003f4a:	b25b      	sxtb	r3, r3
 8003f4c:	f023 030f 	bic.w	r3, r3, #15
 8003f50:	b25a      	sxtb	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	b25b      	sxtb	r3, r3
 8003f58:	f003 030f 	and.w	r3, r3, #15
 8003f5c:	b25b      	sxtb	r3, r3
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	b25b      	sxtb	r3, r3
 8003f62:	75bb      	strb	r3, [r7, #22]
                                           BMI3_ALT_CONF_ALT_SWITCH,
                                           config->alt_conf_alt_switch_src_select);

            /* Set alternate user config */
            user_switch = BMI3_SET_BITS(alt_auto_config[0],
 8003f64:	7c3b      	ldrb	r3, [r7, #16]
 8003f66:	b25b      	sxtb	r3, r3
 8003f68:	f003 030f 	and.w	r3, r3, #15
 8003f6c:	b25a      	sxtb	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	785b      	ldrb	r3, [r3, #1]
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	b25b      	sxtb	r3, r3
 8003f76:	4313      	orrs	r3, r2
 8003f78:	b25b      	sxtb	r3, r3
 8003f7a:	757b      	strb	r3, [r7, #21]
                                        BMI3_ALT_CONF_USER_SWITCH,
                                        config->alt_conf_user_switch_src_select);

            alt_auto_config[0] = alt_switch | user_switch;
 8003f7c:	7dba      	ldrb	r2, [r7, #22]
 8003f7e:	7d7b      	ldrb	r3, [r7, #21]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	743b      	strb	r3, [r7, #16]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, alt_auto_config, 2, dev);
 8003f86:	f107 0110 	add.w	r1, r7, #16
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	2042      	movs	r0, #66	; 0x42
 8003f90:	f7fd fad9 	bl	8001546 <bmi3_set_regs>
 8003f94:	4603      	mov	r3, r0
 8003f96:	75fb      	strb	r3, [r7, #23]
 8003f98:	e001      	b.n	8003f9e <set_alternate_auto_config+0x88>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003f9a:	23ff      	movs	r3, #255	; 0xff
 8003f9c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003f9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <get_alternate_auto_config>:

/*!
 * @brief This internal API gets alternate auto configurations for feature interrupts.
 */
static int8_t get_alternate_auto_config(struct bmi3_auto_config_change *config, struct bmi3_dev *dev)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b084      	sub	sp, #16
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the alternate auto configuration */
    uint8_t alt_auto_config[2] = { 0 };
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	81bb      	strh	r3, [r7, #12]

    /* Array to set the base address of alternate auto config */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ALT_AUTO_CONFIG, 0 };
 8003fb8:	2323      	movs	r3, #35	; 0x23
 8003fba:	813b      	strh	r3, [r7, #8]

    if (config != NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d025      	beq.n	800400e <get_alternate_auto_config+0x64>
    {
        /* Set the alternate auto config base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003fc2:	f107 0108 	add.w	r1, r7, #8
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2202      	movs	r2, #2
 8003fca:	2041      	movs	r0, #65	; 0x41
 8003fcc:	f7fd fabb 	bl	8001546 <bmi3_set_regs>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8003fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d11a      	bne.n	8004012 <get_alternate_auto_config+0x68>
        {
            /* Get the configuration from the feature engine register where alternate config feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, alt_auto_config, 2, dev);
 8003fdc:	f107 010c 	add.w	r1, r7, #12
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	2042      	movs	r0, #66	; 0x42
 8003fe6:	f7fd fa49 	bl	800147c <bmi3_get_regs>
 8003fea:	4603      	mov	r3, r0
 8003fec:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI3_OK)
 8003fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10d      	bne.n	8004012 <get_alternate_auto_config+0x68>
            {
                /* Get alternate switch config */
                config->alt_conf_alt_switch_src_select = alt_auto_config[0] & BMI3_ALT_CONF_ALT_SWITCH_MASK;
 8003ff6:	7b3b      	ldrb	r3, [r7, #12]
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	701a      	strb	r2, [r3, #0]

                /* Get alternate user config */
                config->alt_conf_user_switch_src_select = (alt_auto_config[0] & BMI3_ALT_CONF_USER_SWITCH_MASK) >>
 8004002:	7b3b      	ldrb	r3, [r7, #12]
 8004004:	091b      	lsrs	r3, r3, #4
 8004006:	b2da      	uxtb	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	705a      	strb	r2, [r3, #1]
 800400c:	e001      	b.n	8004012 <get_alternate_auto_config+0x68>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800400e:	23ff      	movs	r3, #255	; 0xff
 8004010:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004012:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <validate_acc_odr_avg>:

/*!
 * @brief This internal API is used to validate ODR and AVG combinations for accel
 */
static int8_t validate_acc_odr_avg(uint8_t acc_odr, uint8_t acc_avg)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	4603      	mov	r3, r0
 8004028:	460a      	mov	r2, r1
 800402a:	71fb      	strb	r3, [r7, #7]
 800402c:	4613      	mov	r3, r2
 800402e:	71bb      	strb	r3, [r7, #6]
    int8_t rslt;

    float odr = 0.0, avg = 0.0;
 8004030:	f04f 0300 	mov.w	r3, #0
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	f04f 0300 	mov.w	r3, #0
 800403a:	613b      	str	r3, [r7, #16]

    switch (acc_odr)
 800403c:	79fb      	ldrb	r3, [r7, #7]
 800403e:	3b01      	subs	r3, #1
 8004040:	2b09      	cmp	r3, #9
 8004042:	d835      	bhi.n	80040b0 <validate_acc_odr_avg+0x90>
 8004044:	a201      	add	r2, pc, #4	; (adr r2, 800404c <validate_acc_odr_avg+0x2c>)
 8004046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404a:	bf00      	nop
 800404c:	08004075 	.word	0x08004075
 8004050:	0800407b 	.word	0x0800407b
 8004054:	08004081 	.word	0x08004081
 8004058:	08004087 	.word	0x08004087
 800405c:	0800408d 	.word	0x0800408d
 8004060:	08004093 	.word	0x08004093
 8004064:	08004099 	.word	0x08004099
 8004068:	0800409f 	.word	0x0800409f
 800406c:	080040a5 	.word	0x080040a5
 8004070:	080040ab 	.word	0x080040ab
    {
        case BMI3_ACC_ODR_0_78HZ:
            odr = 0.78125;
 8004074:	4b2f      	ldr	r3, [pc, #188]	; (8004134 <validate_acc_odr_avg+0x114>)
 8004076:	617b      	str	r3, [r7, #20]
            break;
 8004078:	e01b      	b.n	80040b2 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_1_56HZ:
            odr = 1.5625;
 800407a:	4b2f      	ldr	r3, [pc, #188]	; (8004138 <validate_acc_odr_avg+0x118>)
 800407c:	617b      	str	r3, [r7, #20]
            break;
 800407e:	e018      	b.n	80040b2 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_3_125HZ:
            odr = 3.125;
 8004080:	4b2e      	ldr	r3, [pc, #184]	; (800413c <validate_acc_odr_avg+0x11c>)
 8004082:	617b      	str	r3, [r7, #20]
            break;
 8004084:	e015      	b.n	80040b2 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_6_25HZ:
            odr = 6.25;
 8004086:	4b2e      	ldr	r3, [pc, #184]	; (8004140 <validate_acc_odr_avg+0x120>)
 8004088:	617b      	str	r3, [r7, #20]
            break;
 800408a:	e012      	b.n	80040b2 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_12_5HZ:
            odr = 12.5;
 800408c:	4b2d      	ldr	r3, [pc, #180]	; (8004144 <validate_acc_odr_avg+0x124>)
 800408e:	617b      	str	r3, [r7, #20]
            break;
 8004090:	e00f      	b.n	80040b2 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_25HZ:
            odr = 25.0;
 8004092:	4b2d      	ldr	r3, [pc, #180]	; (8004148 <validate_acc_odr_avg+0x128>)
 8004094:	617b      	str	r3, [r7, #20]
            break;
 8004096:	e00c      	b.n	80040b2 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_50HZ:
            odr = 50.0;
 8004098:	4b2c      	ldr	r3, [pc, #176]	; (800414c <validate_acc_odr_avg+0x12c>)
 800409a:	617b      	str	r3, [r7, #20]
            break;
 800409c:	e009      	b.n	80040b2 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_100HZ:
            odr = 100.0;
 800409e:	4b2c      	ldr	r3, [pc, #176]	; (8004150 <validate_acc_odr_avg+0x130>)
 80040a0:	617b      	str	r3, [r7, #20]
            break;
 80040a2:	e006      	b.n	80040b2 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_200HZ:
            odr = 200.0;
 80040a4:	4b2b      	ldr	r3, [pc, #172]	; (8004154 <validate_acc_odr_avg+0x134>)
 80040a6:	617b      	str	r3, [r7, #20]
            break;
 80040a8:	e003      	b.n	80040b2 <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_400HZ:
            odr = 400.0;
 80040aa:	4b2b      	ldr	r3, [pc, #172]	; (8004158 <validate_acc_odr_avg+0x138>)
 80040ac:	617b      	str	r3, [r7, #20]
            break;
 80040ae:	e000      	b.n	80040b2 <validate_acc_odr_avg+0x92>
        default:
            break;
 80040b0:	bf00      	nop
    }

    switch (acc_avg)
 80040b2:	79bb      	ldrb	r3, [r7, #6]
 80040b4:	2b06      	cmp	r3, #6
 80040b6:	d82d      	bhi.n	8004114 <validate_acc_odr_avg+0xf4>
 80040b8:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <validate_acc_odr_avg+0xa0>)
 80040ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040be:	bf00      	nop
 80040c0:	080040dd 	.word	0x080040dd
 80040c4:	080040e5 	.word	0x080040e5
 80040c8:	080040ed 	.word	0x080040ed
 80040cc:	080040f5 	.word	0x080040f5
 80040d0:	080040fd 	.word	0x080040fd
 80040d4:	08004105 	.word	0x08004105
 80040d8:	0800410d 	.word	0x0800410d
    {
        case BMI3_ACC_AVG1:
            avg = 1.0;
 80040dc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80040e0:	613b      	str	r3, [r7, #16]
            break;
 80040e2:	e018      	b.n	8004116 <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG2:
            avg = 2.0;
 80040e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80040e8:	613b      	str	r3, [r7, #16]
            break;
 80040ea:	e014      	b.n	8004116 <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG4:
            avg = 4.0;
 80040ec:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80040f0:	613b      	str	r3, [r7, #16]
            break;
 80040f2:	e010      	b.n	8004116 <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG8:
            avg = 8.0;
 80040f4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80040f8:	613b      	str	r3, [r7, #16]
            break;
 80040fa:	e00c      	b.n	8004116 <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG16:
            avg = 16.0;
 80040fc:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8004100:	613b      	str	r3, [r7, #16]
            break;
 8004102:	e008      	b.n	8004116 <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG32:
            avg = 32.0;
 8004104:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
 8004108:	613b      	str	r3, [r7, #16]
            break;
 800410a:	e004      	b.n	8004116 <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG64:
            avg = 64.0;
 800410c:	f04f 4385 	mov.w	r3, #1115684864	; 0x42800000
 8004110:	613b      	str	r3, [r7, #16]
            break;
 8004112:	e000      	b.n	8004116 <validate_acc_odr_avg+0xf6>
        default:
            break;
 8004114:	bf00      	nop
    }

    rslt = accel_skipped_samples_check(odr, avg);
 8004116:	edd7 0a04 	vldr	s1, [r7, #16]
 800411a:	ed97 0a05 	vldr	s0, [r7, #20]
 800411e:	f000 f81d 	bl	800415c <accel_skipped_samples_check>
 8004122:	4603      	mov	r3, r0
 8004124:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8004126:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	3f480000 	.word	0x3f480000
 8004138:	3fc80000 	.word	0x3fc80000
 800413c:	40480000 	.word	0x40480000
 8004140:	40c80000 	.word	0x40c80000
 8004144:	41480000 	.word	0x41480000
 8004148:	41c80000 	.word	0x41c80000
 800414c:	42480000 	.word	0x42480000
 8004150:	42c80000 	.word	0x42c80000
 8004154:	43480000 	.word	0x43480000
 8004158:	43c80000 	.word	0x43c80000

0800415c <accel_skipped_samples_check>:

/*!
 * @brief This internal API is used to check skipped samples for accel
 */
static int8_t accel_skipped_samples_check(float odr, float avg)
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	ed87 0a01 	vstr	s0, [r7, #4]
 8004166:	edc7 0a00 	vstr	s1, [r7]
    int8_t rslt;

    float max_odr = 6400.0;
 800416a:	4b1b      	ldr	r3, [pc, #108]	; (80041d8 <accel_skipped_samples_check+0x7c>)
 800416c:	613b      	str	r3, [r7, #16]

    float skipped_samples = 0.0;
 800416e:	f04f 0300 	mov.w	r3, #0
 8004172:	60fb      	str	r3, [r7, #12]

    if ((odr > 0.0) && (avg > 0.0))
 8004174:	edd7 7a01 	vldr	s15, [r7, #4]
 8004178:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800417c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004180:	dd1f      	ble.n	80041c2 <accel_skipped_samples_check+0x66>
 8004182:	edd7 7a00 	vldr	s15, [r7]
 8004186:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800418a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800418e:	dd18      	ble.n	80041c2 <accel_skipped_samples_check+0x66>
    {
        skipped_samples = (float)(max_odr / odr) - avg;
 8004190:	edd7 6a04 	vldr	s13, [r7, #16]
 8004194:	edd7 7a01 	vldr	s15, [r7, #4]
 8004198:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800419c:	edd7 7a00 	vldr	s15, [r7]
 80041a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041a4:	edc7 7a03 	vstr	s15, [r7, #12]

        if (skipped_samples > 0.0)
 80041a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80041ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b4:	dd02      	ble.n	80041bc <accel_skipped_samples_check+0x60>
        {
            rslt = BMI3_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 80041ba:	e004      	b.n	80041c6 <accel_skipped_samples_check+0x6a>
        }
        else
        {
            rslt = BMI3_E_ACC_INVALID_CFG;
 80041bc:	23fc      	movs	r3, #252	; 0xfc
 80041be:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 80041c0:	e001      	b.n	80041c6 <accel_skipped_samples_check+0x6a>
        }
    }
    else
    {
        rslt = BMI3_E_ACC_INVALID_CFG;
 80041c2:	23fc      	movs	r3, #252	; 0xfc
 80041c4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80041c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	45c80000 	.word	0x45c80000

080041dc <validate_gyr_odr_avg>:

/*!
 * @brief This internal API is used to validate ODR and AVG combinations for gyro
 */
static int8_t validate_gyr_odr_avg(uint8_t gyr_odr, uint8_t gyr_avg)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	460a      	mov	r2, r1
 80041e6:	71fb      	strb	r3, [r7, #7]
 80041e8:	4613      	mov	r3, r2
 80041ea:	71bb      	strb	r3, [r7, #6]
    int8_t rslt;

    float odr = 0.0, avg = 0.0;
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]
 80041f2:	f04f 0300 	mov.w	r3, #0
 80041f6:	613b      	str	r3, [r7, #16]

    switch (gyr_odr)
 80041f8:	79fb      	ldrb	r3, [r7, #7]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	2b09      	cmp	r3, #9
 80041fe:	d835      	bhi.n	800426c <validate_gyr_odr_avg+0x90>
 8004200:	a201      	add	r2, pc, #4	; (adr r2, 8004208 <validate_gyr_odr_avg+0x2c>)
 8004202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004206:	bf00      	nop
 8004208:	08004231 	.word	0x08004231
 800420c:	08004237 	.word	0x08004237
 8004210:	0800423d 	.word	0x0800423d
 8004214:	08004243 	.word	0x08004243
 8004218:	08004249 	.word	0x08004249
 800421c:	0800424f 	.word	0x0800424f
 8004220:	08004255 	.word	0x08004255
 8004224:	0800425b 	.word	0x0800425b
 8004228:	08004261 	.word	0x08004261
 800422c:	08004267 	.word	0x08004267
    {
        case BMI3_GYR_ODR_0_78HZ:
            odr = 0.78125;
 8004230:	4b2f      	ldr	r3, [pc, #188]	; (80042f0 <validate_gyr_odr_avg+0x114>)
 8004232:	617b      	str	r3, [r7, #20]
            break;
 8004234:	e01b      	b.n	800426e <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_1_56HZ:
            odr = 1.5625;
 8004236:	4b2f      	ldr	r3, [pc, #188]	; (80042f4 <validate_gyr_odr_avg+0x118>)
 8004238:	617b      	str	r3, [r7, #20]
            break;
 800423a:	e018      	b.n	800426e <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_3_125HZ:
            odr = 3.125;
 800423c:	4b2e      	ldr	r3, [pc, #184]	; (80042f8 <validate_gyr_odr_avg+0x11c>)
 800423e:	617b      	str	r3, [r7, #20]
            break;
 8004240:	e015      	b.n	800426e <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_6_25HZ:
            odr = 6.25;
 8004242:	4b2e      	ldr	r3, [pc, #184]	; (80042fc <validate_gyr_odr_avg+0x120>)
 8004244:	617b      	str	r3, [r7, #20]
            break;
 8004246:	e012      	b.n	800426e <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_12_5HZ:
            odr = 12.5;
 8004248:	4b2d      	ldr	r3, [pc, #180]	; (8004300 <validate_gyr_odr_avg+0x124>)
 800424a:	617b      	str	r3, [r7, #20]
            break;
 800424c:	e00f      	b.n	800426e <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_25HZ:
            odr = 25.0;
 800424e:	4b2d      	ldr	r3, [pc, #180]	; (8004304 <validate_gyr_odr_avg+0x128>)
 8004250:	617b      	str	r3, [r7, #20]
            break;
 8004252:	e00c      	b.n	800426e <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_50HZ:
            odr = 50.0;
 8004254:	4b2c      	ldr	r3, [pc, #176]	; (8004308 <validate_gyr_odr_avg+0x12c>)
 8004256:	617b      	str	r3, [r7, #20]
            break;
 8004258:	e009      	b.n	800426e <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_100HZ:
            odr = 100.0;
 800425a:	4b2c      	ldr	r3, [pc, #176]	; (800430c <validate_gyr_odr_avg+0x130>)
 800425c:	617b      	str	r3, [r7, #20]
            break;
 800425e:	e006      	b.n	800426e <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_200HZ:
            odr = 200.0;
 8004260:	4b2b      	ldr	r3, [pc, #172]	; (8004310 <validate_gyr_odr_avg+0x134>)
 8004262:	617b      	str	r3, [r7, #20]
            break;
 8004264:	e003      	b.n	800426e <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_400HZ:
            odr = 400.0;
 8004266:	4b2b      	ldr	r3, [pc, #172]	; (8004314 <validate_gyr_odr_avg+0x138>)
 8004268:	617b      	str	r3, [r7, #20]
            break;
 800426a:	e000      	b.n	800426e <validate_gyr_odr_avg+0x92>
        default:
            break;
 800426c:	bf00      	nop
    }

    switch (gyr_avg)
 800426e:	79bb      	ldrb	r3, [r7, #6]
 8004270:	2b06      	cmp	r3, #6
 8004272:	d82d      	bhi.n	80042d0 <validate_gyr_odr_avg+0xf4>
 8004274:	a201      	add	r2, pc, #4	; (adr r2, 800427c <validate_gyr_odr_avg+0xa0>)
 8004276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427a:	bf00      	nop
 800427c:	08004299 	.word	0x08004299
 8004280:	080042a1 	.word	0x080042a1
 8004284:	080042a9 	.word	0x080042a9
 8004288:	080042b1 	.word	0x080042b1
 800428c:	080042b9 	.word	0x080042b9
 8004290:	080042c1 	.word	0x080042c1
 8004294:	080042c9 	.word	0x080042c9
    {
        case BMI3_GYR_AVG1:
            avg = 1.0;
 8004298:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800429c:	613b      	str	r3, [r7, #16]
            break;
 800429e:	e018      	b.n	80042d2 <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG2:
            avg = 2.0;
 80042a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80042a4:	613b      	str	r3, [r7, #16]
            break;
 80042a6:	e014      	b.n	80042d2 <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG4:
            avg = 4.0;
 80042a8:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80042ac:	613b      	str	r3, [r7, #16]
            break;
 80042ae:	e010      	b.n	80042d2 <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG8:
            avg = 8.0;
 80042b0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80042b4:	613b      	str	r3, [r7, #16]
            break;
 80042b6:	e00c      	b.n	80042d2 <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG16:
            avg = 16.0;
 80042b8:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80042bc:	613b      	str	r3, [r7, #16]
            break;
 80042be:	e008      	b.n	80042d2 <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG32:
            avg = 32.0;
 80042c0:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
 80042c4:	613b      	str	r3, [r7, #16]
            break;
 80042c6:	e004      	b.n	80042d2 <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG64:
            avg = 64.0;
 80042c8:	f04f 4385 	mov.w	r3, #1115684864	; 0x42800000
 80042cc:	613b      	str	r3, [r7, #16]
            break;
 80042ce:	e000      	b.n	80042d2 <validate_gyr_odr_avg+0xf6>
        default:
            break;
 80042d0:	bf00      	nop
    }

    rslt = gyro_skipped_samples_check(odr, avg);
 80042d2:	edd7 0a04 	vldr	s1, [r7, #16]
 80042d6:	ed97 0a05 	vldr	s0, [r7, #20]
 80042da:	f000 f81d 	bl	8004318 <gyro_skipped_samples_check>
 80042de:	4603      	mov	r3, r0
 80042e0:	73fb      	strb	r3, [r7, #15]

    return rslt;
 80042e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	3f480000 	.word	0x3f480000
 80042f4:	3fc80000 	.word	0x3fc80000
 80042f8:	40480000 	.word	0x40480000
 80042fc:	40c80000 	.word	0x40c80000
 8004300:	41480000 	.word	0x41480000
 8004304:	41c80000 	.word	0x41c80000
 8004308:	42480000 	.word	0x42480000
 800430c:	42c80000 	.word	0x42c80000
 8004310:	43480000 	.word	0x43480000
 8004314:	43c80000 	.word	0x43c80000

08004318 <gyro_skipped_samples_check>:

/*!
 * @brief This internal API is used to check skipped samples for gyro
 */
static int8_t gyro_skipped_samples_check(float odr, float avg)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004322:	edc7 0a00 	vstr	s1, [r7]
    int8_t rslt;

    float max_odr = 6400.0;
 8004326:	4b1b      	ldr	r3, [pc, #108]	; (8004394 <gyro_skipped_samples_check+0x7c>)
 8004328:	613b      	str	r3, [r7, #16]

    float skipped_samples = 0.0;
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]

    if ((odr > 0.0) && (avg > 0.0))
 8004330:	edd7 7a01 	vldr	s15, [r7, #4]
 8004334:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800433c:	dd1f      	ble.n	800437e <gyro_skipped_samples_check+0x66>
 800433e:	edd7 7a00 	vldr	s15, [r7]
 8004342:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800434a:	dd18      	ble.n	800437e <gyro_skipped_samples_check+0x66>
    {
        skipped_samples = (float)(max_odr / odr) - avg;
 800434c:	edd7 6a04 	vldr	s13, [r7, #16]
 8004350:	edd7 7a01 	vldr	s15, [r7, #4]
 8004354:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004358:	edd7 7a00 	vldr	s15, [r7]
 800435c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004360:	edc7 7a03 	vstr	s15, [r7, #12]

        if (skipped_samples > 0.0)
 8004364:	edd7 7a03 	vldr	s15, [r7, #12]
 8004368:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800436c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004370:	dd02      	ble.n	8004378 <gyro_skipped_samples_check+0x60>
        {
            rslt = BMI3_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 8004376:	e004      	b.n	8004382 <gyro_skipped_samples_check+0x6a>
        }
        else
        {
            rslt = BMI3_E_GYRO_INVALID_CFG;
 8004378:	23fb      	movs	r3, #251	; 0xfb
 800437a:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 800437c:	e001      	b.n	8004382 <gyro_skipped_samples_check+0x6a>
        }
    }
    else
    {
        rslt = BMI3_E_GYRO_INVALID_CFG;
 800437e:	23fb      	movs	r3, #251	; 0xfb
 8004380:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004382:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004386:	4618      	mov	r0, r3
 8004388:	371c      	adds	r7, #28
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	45c80000 	.word	0x45c80000

08004398 <bmi323_init>:
/*!
 * @brief This API is the entry point for bmi323 sensor. It reads and validates the
 * chip-id of the sensor.
 */
int8_t bmi323_init(struct bmi3_dev *dev)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 fdf5 	bl	8004f90 <null_ptr_check>
 80043a6:	4603      	mov	r3, r0
 80043a8:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI323_OK)
 80043aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d104      	bne.n	80043bc <bmi323_init+0x24>
    {
        rslt = bmi3_init(dev);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7fd f810 	bl	80013d8 <bmi3_init>
 80043b8:	4603      	mov	r3, r0
 80043ba:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI323_OK)
 80043bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d109      	bne.n	80043d8 <bmi323_init+0x40>
    {
        /* Validate chip-id */
        if (dev->chip_id == BMI323_CHIP_ID)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b43      	cmp	r3, #67	; 0x43
 80043ca:	d103      	bne.n	80043d4 <bmi323_init+0x3c>
        {
            /* Assign resolution to the structure */
            dev->resolution = BMI323_16_BIT_RESOLUTION;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2210      	movs	r2, #16
 80043d0:	731a      	strb	r2, [r3, #12]
 80043d2:	e001      	b.n	80043d8 <bmi323_init+0x40>
        }
        else
        {
            rslt = BMI323_E_DEV_NOT_FOUND;
 80043d4:	23fd      	movs	r3, #253	; 0xfd
 80043d6:	73fb      	strb	r3, [r7, #15]
        }
    }

    if (rslt == BMI323_OK)
 80043d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d105      	bne.n	80043ec <bmi323_init+0x54>
    {
        rslt = bmi323_context_switch_selection(BMI323_WEARABLE_SEL, dev);
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	2001      	movs	r0, #1
 80043e4:	f000 f832 	bl	800444c <bmi323_context_switch_selection>
 80043e8:	4603      	mov	r3, r0
 80043ea:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80043ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <bmi323_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi323_set_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	460b      	mov	r3, r1
 8004402:	607a      	str	r2, [r7, #4]
 8004404:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    rslt = bmi3_set_sensor_config(sens_cfg, n_sens, dev);
 8004406:	7afb      	ldrb	r3, [r7, #11]
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	4619      	mov	r1, r3
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f7fd f98d 	bl	800172c <bmi3_set_sensor_config>
 8004412:	4603      	mov	r3, r0
 8004414:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8004416:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <bmi323_get_sensor_config>:

/*!
 * @brief This API gets the sensor/feature configuration.
 */
int8_t bmi323_get_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b086      	sub	sp, #24
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	460b      	mov	r3, r1
 800442c:	607a      	str	r2, [r7, #4]
 800442e:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    rslt = bmi3_get_sensor_config(sens_cfg, n_sens, dev);
 8004430:	7afb      	ldrb	r3, [r7, #11]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	4619      	mov	r1, r3
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f7fd fa82 	bl	8001940 <bmi3_get_sensor_config>
 800443c:	4603      	mov	r3, r0
 800443e:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8004440:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <bmi323_context_switch_selection>:

/*!
 * @brief This API writes the configurations of context feature for smart phone, wearables and hearables.
 */
int8_t bmi323_context_switch_selection(uint8_t context_sel, struct bmi3_dev *dev)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b0c8      	sub	sp, #288	; 0x120
 8004450:	af00      	add	r7, sp, #0
 8004452:	4602      	mov	r2, r0
 8004454:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004458:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800445c:	6019      	str	r1, [r3, #0]
 800445e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004462:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004466:	701a      	strb	r2, [r3, #0]
    /* Variable to define error */
    int8_t rslt;

    struct bmi3_sens_config sens_cfg[BMI323_MAX_FEATURE];

    uint8_t index = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    if (context_sel < BMI323_SEL_MAX)
 800446e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004472:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b02      	cmp	r3, #2
 800447a:	f200 8578 	bhi.w	8004f6e <bmi323_context_switch_selection+0xb22>
    {
        /* Set any-motion configuration */
        sens_cfg[0].type = BMI323_ANY_MOTION;
 800447e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004482:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004486:	2203      	movs	r2, #3
 8004488:	701a      	strb	r2, [r3, #0]
        sens_cfg[0].cfg.any_motion.slope_thres = any_motion_param_set[context_sel][index++];
 800448a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800448e:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004492:	781a      	ldrb	r2, [r3, #0]
 8004494:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004498:	1c59      	adds	r1, r3, #1
 800449a:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 800449e:	4618      	mov	r0, r3
 80044a0:	49e3      	ldr	r1, [pc, #908]	; (8004830 <bmi323_context_switch_selection+0x3e4>)
 80044a2:	4613      	mov	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	4403      	add	r3, r0
 80044aa:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80044ae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80044b2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80044b6:	809a      	strh	r2, [r3, #4]
        sens_cfg[0].cfg.any_motion.acc_ref_up = (uint8_t)(any_motion_param_set[context_sel][index++]);
 80044b8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80044bc:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80044c0:	781a      	ldrb	r2, [r3, #0]
 80044c2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80044c6:	1c59      	adds	r1, r3, #1
 80044c8:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80044cc:	4618      	mov	r0, r3
 80044ce:	49d8      	ldr	r1, [pc, #864]	; (8004830 <bmi323_context_switch_selection+0x3e4>)
 80044d0:	4613      	mov	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	4403      	add	r3, r0
 80044d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80044e2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80044e6:	719a      	strb	r2, [r3, #6]
        sens_cfg[0].cfg.any_motion.hysteresis = any_motion_param_set[context_sel][index++];
 80044e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80044ec:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80044f0:	781a      	ldrb	r2, [r3, #0]
 80044f2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80044f6:	1c59      	adds	r1, r3, #1
 80044f8:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80044fc:	4618      	mov	r0, r3
 80044fe:	49cc      	ldr	r1, [pc, #816]	; (8004830 <bmi323_context_switch_selection+0x3e4>)
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	4403      	add	r3, r0
 8004508:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800450c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004510:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004514:	811a      	strh	r2, [r3, #8]
        sens_cfg[0].cfg.any_motion.duration = any_motion_param_set[context_sel][index++];
 8004516:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800451a:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800451e:	781a      	ldrb	r2, [r3, #0]
 8004520:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004524:	1c59      	adds	r1, r3, #1
 8004526:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 800452a:	4618      	mov	r0, r3
 800452c:	49c0      	ldr	r1, [pc, #768]	; (8004830 <bmi323_context_switch_selection+0x3e4>)
 800452e:	4613      	mov	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	4403      	add	r3, r0
 8004536:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800453a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800453e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004542:	805a      	strh	r2, [r3, #2]
        sens_cfg[0].cfg.any_motion.wait_time = any_motion_param_set[context_sel][index++];
 8004544:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004548:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800454c:	781a      	ldrb	r2, [r3, #0]
 800454e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004552:	1c59      	adds	r1, r3, #1
 8004554:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004558:	4618      	mov	r0, r3
 800455a:	49b5      	ldr	r1, [pc, #724]	; (8004830 <bmi323_context_switch_selection+0x3e4>)
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	4403      	add	r3, r0
 8004564:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004568:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800456c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004570:	815a      	strh	r2, [r3, #10]

        /* Set no-motion configuration */
        index = 0;
 8004572:	2300      	movs	r3, #0
 8004574:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        sens_cfg[1].type = BMI323_NO_MOTION;
 8004578:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800457c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004580:	2204      	movs	r2, #4
 8004582:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        sens_cfg[1].cfg.no_motion.slope_thres = no_motion_param_set[context_sel][index++];
 8004586:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800458a:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800458e:	781a      	ldrb	r2, [r3, #0]
 8004590:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004594:	1c59      	adds	r1, r3, #1
 8004596:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 800459a:	4618      	mov	r0, r3
 800459c:	49a5      	ldr	r1, [pc, #660]	; (8004834 <bmi323_context_switch_selection+0x3e8>)
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	4403      	add	r3, r0
 80045a6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80045aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80045ae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80045b2:	865a      	strh	r2, [r3, #50]	; 0x32
        sens_cfg[1].cfg.no_motion.acc_ref_up = (uint8_t)(no_motion_param_set[context_sel][index++]);
 80045b4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80045b8:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80045bc:	781a      	ldrb	r2, [r3, #0]
 80045be:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80045c2:	1c59      	adds	r1, r3, #1
 80045c4:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80045c8:	4618      	mov	r0, r3
 80045ca:	499a      	ldr	r1, [pc, #616]	; (8004834 <bmi323_context_switch_selection+0x3e8>)
 80045cc:	4613      	mov	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	4403      	add	r3, r0
 80045d4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80045de:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80045e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        sens_cfg[1].cfg.no_motion.hysteresis = no_motion_param_set[context_sel][index++];
 80045e6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80045ea:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80045ee:	781a      	ldrb	r2, [r3, #0]
 80045f0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80045f4:	1c59      	adds	r1, r3, #1
 80045f6:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80045fa:	4618      	mov	r0, r3
 80045fc:	498d      	ldr	r1, [pc, #564]	; (8004834 <bmi323_context_switch_selection+0x3e8>)
 80045fe:	4613      	mov	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	4403      	add	r3, r0
 8004606:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800460a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800460e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004612:	86da      	strh	r2, [r3, #54]	; 0x36
        sens_cfg[1].cfg.no_motion.duration = no_motion_param_set[context_sel][index++];
 8004614:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004618:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800461c:	781a      	ldrb	r2, [r3, #0]
 800461e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004622:	1c59      	adds	r1, r3, #1
 8004624:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004628:	4618      	mov	r0, r3
 800462a:	4982      	ldr	r1, [pc, #520]	; (8004834 <bmi323_context_switch_selection+0x3e8>)
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	4403      	add	r3, r0
 8004634:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004638:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800463c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004640:	861a      	strh	r2, [r3, #48]	; 0x30
        sens_cfg[1].cfg.no_motion.wait_time = no_motion_param_set[context_sel][index++];
 8004642:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004646:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800464a:	781a      	ldrb	r2, [r3, #0]
 800464c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004650:	1c59      	adds	r1, r3, #1
 8004652:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004656:	4618      	mov	r0, r3
 8004658:	4976      	ldr	r1, [pc, #472]	; (8004834 <bmi323_context_switch_selection+0x3e8>)
 800465a:	4613      	mov	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	4403      	add	r3, r0
 8004662:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004666:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800466a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800466e:	871a      	strh	r2, [r3, #56]	; 0x38

        /* Set tap configuration */
        index = 0;
 8004670:	2300      	movs	r3, #0
 8004672:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        sens_cfg[2].type = BMI323_TAP;
 8004676:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800467a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800467e:	2209      	movs	r2, #9
 8004680:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        sens_cfg[2].cfg.tap.axis_sel = (uint8_t)tap_param_set[context_sel][index++];
 8004684:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004688:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800468c:	781a      	ldrb	r2, [r3, #0]
 800468e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004692:	1c59      	adds	r1, r3, #1
 8004694:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004698:	4618      	mov	r0, r3
 800469a:	4967      	ldr	r1, [pc, #412]	; (8004838 <bmi323_context_switch_selection+0x3ec>)
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	4403      	add	r3, r0
 80046a6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80046b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80046b4:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        sens_cfg[2].cfg.tap.wait_for_timeout = (uint8_t)tap_param_set[context_sel][index++];
 80046b8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80046bc:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80046c0:	781a      	ldrb	r2, [r3, #0]
 80046c2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80046c6:	1c59      	adds	r1, r3, #1
 80046c8:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80046cc:	4618      	mov	r0, r3
 80046ce:	495a      	ldr	r1, [pc, #360]	; (8004838 <bmi323_context_switch_selection+0x3ec>)
 80046d0:	4613      	mov	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	4403      	add	r3, r0
 80046da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80046e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80046e8:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
        sens_cfg[2].cfg.tap.max_peaks_for_tap = (uint8_t)tap_param_set[context_sel][index++];
 80046ec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80046f0:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80046f4:	781a      	ldrb	r2, [r3, #0]
 80046f6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80046fa:	1c59      	adds	r1, r3, #1
 80046fc:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004700:	4618      	mov	r0, r3
 8004702:	494d      	ldr	r1, [pc, #308]	; (8004838 <bmi323_context_switch_selection+0x3ec>)
 8004704:	4613      	mov	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	4403      	add	r3, r0
 800470e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004712:	b2da      	uxtb	r2, r3
 8004714:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004718:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800471c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        sens_cfg[2].cfg.tap.mode = (uint8_t)tap_param_set[context_sel][index++];
 8004720:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004724:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004728:	781a      	ldrb	r2, [r3, #0]
 800472a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800472e:	1c59      	adds	r1, r3, #1
 8004730:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004734:	4618      	mov	r0, r3
 8004736:	4940      	ldr	r1, [pc, #256]	; (8004838 <bmi323_context_switch_selection+0x3ec>)
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	4403      	add	r3, r0
 8004742:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004746:	b2da      	uxtb	r2, r3
 8004748:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800474c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004750:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        sens_cfg[2].cfg.tap.tap_peak_thres = tap_param_set[context_sel][index++];
 8004754:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004758:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800475c:	781a      	ldrb	r2, [r3, #0]
 800475e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004762:	1c59      	adds	r1, r3, #1
 8004764:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004768:	4618      	mov	r0, r3
 800476a:	4933      	ldr	r1, [pc, #204]	; (8004838 <bmi323_context_switch_selection+0x3ec>)
 800476c:	4613      	mov	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	4403      	add	r3, r0
 8004776:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800477a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800477e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004782:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        sens_cfg[2].cfg.tap.max_gest_dur = (uint8_t)tap_param_set[context_sel][index++];
 8004786:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800478a:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800478e:	781a      	ldrb	r2, [r3, #0]
 8004790:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004794:	1c59      	adds	r1, r3, #1
 8004796:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 800479a:	4618      	mov	r0, r3
 800479c:	4926      	ldr	r1, [pc, #152]	; (8004838 <bmi323_context_switch_selection+0x3ec>)
 800479e:	4613      	mov	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	4403      	add	r3, r0
 80047a8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80047b2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80047b6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        sens_cfg[2].cfg.tap.max_dur_between_peaks = (uint8_t)tap_param_set[context_sel][index++];
 80047ba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80047be:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80047c2:	781a      	ldrb	r2, [r3, #0]
 80047c4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80047c8:	1c59      	adds	r1, r3, #1
 80047ca:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80047ce:	4618      	mov	r0, r3
 80047d0:	4919      	ldr	r1, [pc, #100]	; (8004838 <bmi323_context_switch_selection+0x3ec>)
 80047d2:	4613      	mov	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	4403      	add	r3, r0
 80047dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80047e6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80047ea:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sens_cfg[2].cfg.tap.tap_shock_settling_dur = (uint8_t)tap_param_set[context_sel][index++];
 80047ee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80047f2:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80047f6:	781a      	ldrb	r2, [r3, #0]
 80047f8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80047fc:	1c59      	adds	r1, r3, #1
 80047fe:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004802:	4618      	mov	r0, r3
 8004804:	490c      	ldr	r1, [pc, #48]	; (8004838 <bmi323_context_switch_selection+0x3ec>)
 8004806:	4613      	mov	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	4403      	add	r3, r0
 8004810:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004814:	b2da      	uxtb	r2, r3
 8004816:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800481a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800481e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
        sens_cfg[2].cfg.tap.min_quite_dur_between_taps = (uint8_t)tap_param_set[context_sel][index++];
 8004822:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004826:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800482a:	781a      	ldrb	r2, [r3, #0]
 800482c:	e006      	b.n	800483c <bmi323_context_switch_selection+0x3f0>
 800482e:	bf00      	nop
 8004830:	20000008 	.word	0x20000008
 8004834:	20000028 	.word	0x20000028
 8004838:	20000048 	.word	0x20000048
 800483c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004840:	1c59      	adds	r1, r3, #1
 8004842:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004846:	4618      	mov	r0, r3
 8004848:	49e9      	ldr	r1, [pc, #932]	; (8004bf0 <bmi323_context_switch_selection+0x7a4>)
 800484a:	4613      	mov	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	4403      	add	r3, r0
 8004854:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004858:	b2da      	uxtb	r2, r3
 800485a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800485e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004862:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
        sens_cfg[2].cfg.tap.quite_time_after_gest = (uint8_t)tap_param_set[context_sel][index++];
 8004866:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800486a:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800486e:	781a      	ldrb	r2, [r3, #0]
 8004870:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004874:	1c59      	adds	r1, r3, #1
 8004876:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 800487a:	4618      	mov	r0, r3
 800487c:	49dc      	ldr	r1, [pc, #880]	; (8004bf0 <bmi323_context_switch_selection+0x7a4>)
 800487e:	4613      	mov	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	4403      	add	r3, r0
 8004888:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800488c:	b2da      	uxtb	r2, r3
 800488e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004892:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004896:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

        /* Set step counter configuration */
        index = 0;
 800489a:	2300      	movs	r3, #0
 800489c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        sens_cfg[3].type = BMI323_STEP_COUNTER;
 80048a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80048a8:	2205      	movs	r2, #5
 80048aa:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        sens_cfg[3].cfg.step_counter.watermark_level = step_counter_param_set[context_sel][index++];
 80048ae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048b2:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80048b6:	781a      	ldrb	r2, [r3, #0]
 80048b8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80048bc:	1c59      	adds	r1, r3, #1
 80048be:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80048c2:	4618      	mov	r0, r3
 80048c4:	49cb      	ldr	r1, [pc, #812]	; (8004bf4 <bmi323_context_switch_selection+0x7a8>)
 80048c6:	2316      	movs	r3, #22
 80048c8:	fb02 f303 	mul.w	r3, r2, r3
 80048cc:	4403      	add	r3, r0
 80048ce:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80048d2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048d6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80048da:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
        sens_cfg[3].cfg.step_counter.reset_counter = step_counter_param_set[context_sel][index++];
 80048de:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048e2:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80048e6:	781a      	ldrb	r2, [r3, #0]
 80048e8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80048ec:	1c59      	adds	r1, r3, #1
 80048ee:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80048f2:	4618      	mov	r0, r3
 80048f4:	49bf      	ldr	r1, [pc, #764]	; (8004bf4 <bmi323_context_switch_selection+0x7a8>)
 80048f6:	2316      	movs	r3, #22
 80048f8:	fb02 f303 	mul.w	r3, r2, r3
 80048fc:	4403      	add	r3, r0
 80048fe:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004902:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004906:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800490a:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
        sens_cfg[3].cfg.step_counter.env_min_dist_up = step_counter_param_set[context_sel][index++];
 800490e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004912:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004916:	781a      	ldrb	r2, [r3, #0]
 8004918:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800491c:	1c59      	adds	r1, r3, #1
 800491e:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004922:	4618      	mov	r0, r3
 8004924:	49b3      	ldr	r1, [pc, #716]	; (8004bf4 <bmi323_context_switch_selection+0x7a8>)
 8004926:	2316      	movs	r3, #22
 8004928:	fb02 f303 	mul.w	r3, r2, r3
 800492c:	4403      	add	r3, r0
 800492e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004932:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004936:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800493a:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
        sens_cfg[3].cfg.step_counter.env_coef_up = step_counter_param_set[context_sel][index++];
 800493e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004942:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004946:	781a      	ldrb	r2, [r3, #0]
 8004948:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800494c:	1c59      	adds	r1, r3, #1
 800494e:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004952:	4618      	mov	r0, r3
 8004954:	49a7      	ldr	r1, [pc, #668]	; (8004bf4 <bmi323_context_switch_selection+0x7a8>)
 8004956:	2316      	movs	r3, #22
 8004958:	fb02 f303 	mul.w	r3, r2, r3
 800495c:	4403      	add	r3, r0
 800495e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004962:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004966:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800496a:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
        sens_cfg[3].cfg.step_counter.env_min_dist_down = step_counter_param_set[context_sel][index++];
 800496e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004972:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004976:	781a      	ldrb	r2, [r3, #0]
 8004978:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800497c:	1c59      	adds	r1, r3, #1
 800497e:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004982:	4618      	mov	r0, r3
 8004984:	499b      	ldr	r1, [pc, #620]	; (8004bf4 <bmi323_context_switch_selection+0x7a8>)
 8004986:	2316      	movs	r3, #22
 8004988:	fb02 f303 	mul.w	r3, r2, r3
 800498c:	4403      	add	r3, r0
 800498e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004992:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004996:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800499a:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
        sens_cfg[3].cfg.step_counter.env_coef_down = step_counter_param_set[context_sel][index++];
 800499e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80049a2:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80049a6:	781a      	ldrb	r2, [r3, #0]
 80049a8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80049ac:	1c59      	adds	r1, r3, #1
 80049ae:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80049b2:	4618      	mov	r0, r3
 80049b4:	498f      	ldr	r1, [pc, #572]	; (8004bf4 <bmi323_context_switch_selection+0x7a8>)
 80049b6:	2316      	movs	r3, #22
 80049b8:	fb02 f303 	mul.w	r3, r2, r3
 80049bc:	4403      	add	r3, r0
 80049be:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80049c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80049c6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80049ca:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        sens_cfg[3].cfg.step_counter.mean_val_decay = step_counter_param_set[context_sel][index++];
 80049ce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80049d2:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80049d6:	781a      	ldrb	r2, [r3, #0]
 80049d8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80049dc:	1c59      	adds	r1, r3, #1
 80049de:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 80049e2:	4618      	mov	r0, r3
 80049e4:	4983      	ldr	r1, [pc, #524]	; (8004bf4 <bmi323_context_switch_selection+0x7a8>)
 80049e6:	2316      	movs	r3, #22
 80049e8:	fb02 f303 	mul.w	r3, r2, r3
 80049ec:	4403      	add	r3, r0
 80049ee:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80049f2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80049f6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80049fa:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        sens_cfg[3].cfg.step_counter.mean_step_dur = step_counter_param_set[context_sel][index++];
 80049fe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a02:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004a06:	781a      	ldrb	r2, [r3, #0]
 8004a08:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004a0c:	1c59      	adds	r1, r3, #1
 8004a0e:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004a12:	4618      	mov	r0, r3
 8004a14:	4977      	ldr	r1, [pc, #476]	; (8004bf4 <bmi323_context_switch_selection+0x7a8>)
 8004a16:	2316      	movs	r3, #22
 8004a18:	fb02 f303 	mul.w	r3, r2, r3
 8004a1c:	4403      	add	r3, r0
 8004a1e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004a22:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a26:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a2a:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
        sens_cfg[3].cfg.step_counter.step_buffer_size = step_counter_param_set[context_sel][index++];
 8004a2e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a32:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004a36:	781a      	ldrb	r2, [r3, #0]
 8004a38:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004a3c:	1c59      	adds	r1, r3, #1
 8004a3e:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004a42:	4618      	mov	r0, r3
 8004a44:	496b      	ldr	r1, [pc, #428]	; (8004bf4 <bmi323_context_switch_selection+0x7a8>)
 8004a46:	2316      	movs	r3, #22
 8004a48:	fb02 f303 	mul.w	r3, r2, r3
 8004a4c:	4403      	add	r3, r0
 8004a4e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004a52:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a56:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a5a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
        sens_cfg[3].cfg.step_counter.filter_cascade_enabled = step_counter_param_set[context_sel][index++];
 8004a5e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a62:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004a66:	781a      	ldrb	r2, [r3, #0]
 8004a68:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004a6c:	1c59      	adds	r1, r3, #1
 8004a6e:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004a72:	4618      	mov	r0, r3
 8004a74:	495f      	ldr	r1, [pc, #380]	; (8004bf4 <bmi323_context_switch_selection+0x7a8>)
 8004a76:	2316      	movs	r3, #22
 8004a78:	fb02 f303 	mul.w	r3, r2, r3
 8004a7c:	4403      	add	r3, r0
 8004a7e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004a82:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a86:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a8a:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        sens_cfg[3].cfg.step_counter.step_counter_increment = step_counter_param_set[context_sel][index++];
 8004a8e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a92:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004a96:	781a      	ldrb	r2, [r3, #0]
 8004a98:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004a9c:	1c59      	adds	r1, r3, #1
 8004a9e:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	4953      	ldr	r1, [pc, #332]	; (8004bf4 <bmi323_context_switch_selection+0x7a8>)
 8004aa6:	2316      	movs	r3, #22
 8004aa8:	fb02 f303 	mul.w	r3, r2, r3
 8004aac:	4403      	add	r3, r0
 8004aae:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004ab2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ab6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004aba:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        sens_cfg[3].cfg.step_counter.peak_duration_min_walking = step_counter_param_set[context_sel][index++];
 8004abe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ac2:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004ac6:	781a      	ldrb	r2, [r3, #0]
 8004ac8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004acc:	1c59      	adds	r1, r3, #1
 8004ace:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	4947      	ldr	r1, [pc, #284]	; (8004bf4 <bmi323_context_switch_selection+0x7a8>)
 8004ad6:	2316      	movs	r3, #22
 8004ad8:	fb02 f303 	mul.w	r3, r2, r3
 8004adc:	4403      	add	r3, r0
 8004ade:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004ae2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ae6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004aea:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
        sens_cfg[3].cfg.step_counter.peak_duration_min_running = step_counter_param_set[context_sel][index++];
 8004aee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004af2:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004af6:	781a      	ldrb	r2, [r3, #0]
 8004af8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004afc:	1c59      	adds	r1, r3, #1
 8004afe:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004b02:	4618      	mov	r0, r3
 8004b04:	493b      	ldr	r1, [pc, #236]	; (8004bf4 <bmi323_context_switch_selection+0x7a8>)
 8004b06:	2316      	movs	r3, #22
 8004b08:	fb02 f303 	mul.w	r3, r2, r3
 8004b0c:	4403      	add	r3, r0
 8004b0e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004b12:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b16:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b1a:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
        sens_cfg[3].cfg.step_counter.activity_detection_factor = step_counter_param_set[context_sel][index++];
 8004b1e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b22:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004b26:	781a      	ldrb	r2, [r3, #0]
 8004b28:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004b2c:	1c59      	adds	r1, r3, #1
 8004b2e:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004b32:	4618      	mov	r0, r3
 8004b34:	492f      	ldr	r1, [pc, #188]	; (8004bf4 <bmi323_context_switch_selection+0x7a8>)
 8004b36:	2316      	movs	r3, #22
 8004b38:	fb02 f303 	mul.w	r3, r2, r3
 8004b3c:	4403      	add	r3, r0
 8004b3e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004b42:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b46:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b4a:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
        sens_cfg[3].cfg.step_counter.activity_detection_thres = step_counter_param_set[context_sel][index++];
 8004b4e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b52:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004b56:	781a      	ldrb	r2, [r3, #0]
 8004b58:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004b5c:	1c59      	adds	r1, r3, #1
 8004b5e:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004b62:	4618      	mov	r0, r3
 8004b64:	4923      	ldr	r1, [pc, #140]	; (8004bf4 <bmi323_context_switch_selection+0x7a8>)
 8004b66:	2316      	movs	r3, #22
 8004b68:	fb02 f303 	mul.w	r3, r2, r3
 8004b6c:	4403      	add	r3, r0
 8004b6e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004b72:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b76:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b7a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
        sens_cfg[3].cfg.step_counter.step_duration_max = step_counter_param_set[context_sel][index++];
 8004b7e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b82:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004b86:	781a      	ldrb	r2, [r3, #0]
 8004b88:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004b8c:	1c59      	adds	r1, r3, #1
 8004b8e:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004b92:	4618      	mov	r0, r3
 8004b94:	4917      	ldr	r1, [pc, #92]	; (8004bf4 <bmi323_context_switch_selection+0x7a8>)
 8004b96:	2316      	movs	r3, #22
 8004b98:	fb02 f303 	mul.w	r3, r2, r3
 8004b9c:	4403      	add	r3, r0
 8004b9e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004ba2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ba6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004baa:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
        sens_cfg[3].cfg.step_counter.step_duration_window = step_counter_param_set[context_sel][index++];
 8004bae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004bb2:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004bb6:	781a      	ldrb	r2, [r3, #0]
 8004bb8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004bbc:	1c59      	adds	r1, r3, #1
 8004bbe:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	490b      	ldr	r1, [pc, #44]	; (8004bf4 <bmi323_context_switch_selection+0x7a8>)
 8004bc6:	2316      	movs	r3, #22
 8004bc8:	fb02 f303 	mul.w	r3, r2, r3
 8004bcc:	4403      	add	r3, r0
 8004bce:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004bd2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004bd6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004bda:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        sens_cfg[3].cfg.step_counter.step_duration_pp_enabled = step_counter_param_set[context_sel][index++];
 8004bde:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004be2:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004be6:	781a      	ldrb	r2, [r3, #0]
 8004be8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004bec:	1c59      	adds	r1, r3, #1
 8004bee:	e003      	b.n	8004bf8 <bmi323_context_switch_selection+0x7ac>
 8004bf0:	20000048 	.word	0x20000048
 8004bf4:	20000084 	.word	0x20000084
 8004bf8:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	49e1      	ldr	r1, [pc, #900]	; (8004f84 <bmi323_context_switch_selection+0xb38>)
 8004c00:	2316      	movs	r3, #22
 8004c02:	fb02 f303 	mul.w	r3, r2, r3
 8004c06:	4403      	add	r3, r0
 8004c08:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004c0c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c10:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c14:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
        sens_cfg[3].cfg.step_counter.step_duration_thres = step_counter_param_set[context_sel][index++];
 8004c18:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c1c:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004c20:	781a      	ldrb	r2, [r3, #0]
 8004c22:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004c26:	1c59      	adds	r1, r3, #1
 8004c28:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	49d5      	ldr	r1, [pc, #852]	; (8004f84 <bmi323_context_switch_selection+0xb38>)
 8004c30:	2316      	movs	r3, #22
 8004c32:	fb02 f303 	mul.w	r3, r2, r3
 8004c36:	4403      	add	r3, r0
 8004c38:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004c3c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c40:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c44:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
        sens_cfg[3].cfg.step_counter.mean_crossing_pp_enabled = step_counter_param_set[context_sel][index++];
 8004c48:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c4c:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004c50:	781a      	ldrb	r2, [r3, #0]
 8004c52:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004c56:	1c59      	adds	r1, r3, #1
 8004c58:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	49c9      	ldr	r1, [pc, #804]	; (8004f84 <bmi323_context_switch_selection+0xb38>)
 8004c60:	2316      	movs	r3, #22
 8004c62:	fb02 f303 	mul.w	r3, r2, r3
 8004c66:	4403      	add	r3, r0
 8004c68:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004c6c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c70:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c74:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
        sens_cfg[3].cfg.step_counter.mcr_threshold = step_counter_param_set[context_sel][index++];
 8004c78:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c7c:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004c80:	781a      	ldrb	r2, [r3, #0]
 8004c82:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004c86:	1c59      	adds	r1, r3, #1
 8004c88:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	49bd      	ldr	r1, [pc, #756]	; (8004f84 <bmi323_context_switch_selection+0xb38>)
 8004c90:	2316      	movs	r3, #22
 8004c92:	fb02 f303 	mul.w	r3, r2, r3
 8004c96:	4403      	add	r3, r0
 8004c98:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004c9c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ca0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004ca4:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
        sens_cfg[3].cfg.step_counter.sc_12_res = step_counter_param_set[context_sel][index++];
 8004ca8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004cac:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004cb0:	781a      	ldrb	r2, [r3, #0]
 8004cb2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004cb6:	1c59      	adds	r1, r3, #1
 8004cb8:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	49b1      	ldr	r1, [pc, #708]	; (8004f84 <bmi323_context_switch_selection+0xb38>)
 8004cc0:	2316      	movs	r3, #22
 8004cc2:	fb02 f303 	mul.w	r3, r2, r3
 8004cc6:	4403      	add	r3, r0
 8004cc8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004ccc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004cd0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004cd4:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6

        /* Set significant motion configuration */
        index = 0;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        sens_cfg[4].type = BMI323_SIG_MOTION;
 8004cde:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ce2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        sens_cfg[4].cfg.sig_motion.block_size = sig_motion_param_set[context_sel][index++];
 8004cec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004cf0:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004cf4:	781a      	ldrb	r2, [r3, #0]
 8004cf6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004cfa:	1c59      	adds	r1, r3, #1
 8004cfc:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004d00:	4618      	mov	r0, r3
 8004d02:	49a1      	ldr	r1, [pc, #644]	; (8004f88 <bmi323_context_switch_selection+0xb3c>)
 8004d04:	4613      	mov	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	4403      	add	r3, r0
 8004d0c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004d10:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d14:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d18:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
        sens_cfg[4].cfg.sig_motion.peak_2_peak_min = sig_motion_param_set[context_sel][index++];
 8004d1c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d20:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004d24:	781a      	ldrb	r2, [r3, #0]
 8004d26:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004d2a:	1c59      	adds	r1, r3, #1
 8004d2c:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004d30:	4618      	mov	r0, r3
 8004d32:	4995      	ldr	r1, [pc, #596]	; (8004f88 <bmi323_context_switch_selection+0xb3c>)
 8004d34:	4613      	mov	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	4403      	add	r3, r0
 8004d3c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004d40:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d44:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d48:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
        sens_cfg[4].cfg.sig_motion.mcr_min = (uint8_t)sig_motion_param_set[context_sel][index++];
 8004d4c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d50:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004d54:	781a      	ldrb	r2, [r3, #0]
 8004d56:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004d5a:	1c59      	adds	r1, r3, #1
 8004d5c:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004d60:	4618      	mov	r0, r3
 8004d62:	4989      	ldr	r1, [pc, #548]	; (8004f88 <bmi323_context_switch_selection+0xb3c>)
 8004d64:	4613      	mov	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	4403      	add	r3, r0
 8004d6c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d76:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d7a:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
        sens_cfg[4].cfg.sig_motion.peak_2_peak_max = sig_motion_param_set[context_sel][index++];
 8004d7e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d82:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004d86:	781a      	ldrb	r2, [r3, #0]
 8004d88:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004d8c:	1c59      	adds	r1, r3, #1
 8004d8e:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004d92:	4618      	mov	r0, r3
 8004d94:	497c      	ldr	r1, [pc, #496]	; (8004f88 <bmi323_context_switch_selection+0xb3c>)
 8004d96:	4613      	mov	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	4403      	add	r3, r0
 8004d9e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004da2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004da6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004daa:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
        sens_cfg[4].cfg.sig_motion.mcr_max = (uint8_t)sig_motion_param_set[context_sel][index++];
 8004dae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004db2:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004db6:	781a      	ldrb	r2, [r3, #0]
 8004db8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004dbc:	1c59      	adds	r1, r3, #1
 8004dbe:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	4970      	ldr	r1, [pc, #448]	; (8004f88 <bmi323_context_switch_selection+0xb3c>)
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	4403      	add	r3, r0
 8004dce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004dd8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004ddc:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2

        /* Set orientation configuration */
        index = 0;
 8004de0:	2300      	movs	r3, #0
 8004de2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        sens_cfg[5].type = BMI323_ORIENTATION;
 8004de6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004dea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004dee:	2207      	movs	r2, #7
 8004df0:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
        sens_cfg[5].cfg.orientation.ud_en = (uint8_t)orientation_param_set[context_sel][index++];
 8004df4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004df8:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004dfc:	781a      	ldrb	r2, [r3, #0]
 8004dfe:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004e02:	1c59      	adds	r1, r3, #1
 8004e04:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004e08:	4618      	mov	r0, r3
 8004e0a:	4960      	ldr	r1, [pc, #384]	; (8004f8c <bmi323_context_switch_selection+0xb40>)
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	1a9b      	subs	r3, r3, r2
 8004e12:	4403      	add	r3, r0
 8004e14:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004e18:	b2da      	uxtb	r2, r3
 8004e1a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004e1e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e22:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
        sens_cfg[5].cfg.orientation.mode = (uint8_t)orientation_param_set[context_sel][index++];
 8004e26:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004e2a:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004e2e:	781a      	ldrb	r2, [r3, #0]
 8004e30:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004e34:	1c59      	adds	r1, r3, #1
 8004e36:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	4953      	ldr	r1, [pc, #332]	; (8004f8c <bmi323_context_switch_selection+0xb40>)
 8004e3e:	4613      	mov	r3, r2
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	1a9b      	subs	r3, r3, r2
 8004e44:	4403      	add	r3, r0
 8004e46:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004e50:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e54:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
        sens_cfg[5].cfg.orientation.blocking = (uint8_t)orientation_param_set[context_sel][index++];
 8004e58:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004e5c:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004e60:	781a      	ldrb	r2, [r3, #0]
 8004e62:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004e66:	1c59      	adds	r1, r3, #1
 8004e68:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	4947      	ldr	r1, [pc, #284]	; (8004f8c <bmi323_context_switch_selection+0xb40>)
 8004e70:	4613      	mov	r3, r2
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	1a9b      	subs	r3, r3, r2
 8004e76:	4403      	add	r3, r0
 8004e78:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004e82:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e86:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
        sens_cfg[5].cfg.orientation.theta = (uint8_t)orientation_param_set[context_sel][index++];
 8004e8a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004e8e:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004e92:	781a      	ldrb	r2, [r3, #0]
 8004e94:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004e98:	1c59      	adds	r1, r3, #1
 8004e9a:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	493a      	ldr	r1, [pc, #232]	; (8004f8c <bmi323_context_switch_selection+0xb40>)
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	4403      	add	r3, r0
 8004eaa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004eb4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004eb8:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
        sens_cfg[5].cfg.orientation.hold_time = (uint8_t)orientation_param_set[context_sel][index++];
 8004ebc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ec0:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004ec4:	781a      	ldrb	r2, [r3, #0]
 8004ec6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004eca:	1c59      	adds	r1, r3, #1
 8004ecc:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	492e      	ldr	r1, [pc, #184]	; (8004f8c <bmi323_context_switch_selection+0xb40>)
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	1a9b      	subs	r3, r3, r2
 8004eda:	4403      	add	r3, r0
 8004edc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ee6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004eea:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
        sens_cfg[5].cfg.orientation.slope_thres = (uint8_t)orientation_param_set[context_sel][index++];
 8004eee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ef2:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004ef6:	781a      	ldrb	r2, [r3, #0]
 8004ef8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004efc:	1c59      	adds	r1, r3, #1
 8004efe:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004f02:	4618      	mov	r0, r3
 8004f04:	4921      	ldr	r1, [pc, #132]	; (8004f8c <bmi323_context_switch_selection+0xb40>)
 8004f06:	4613      	mov	r3, r2
 8004f08:	00db      	lsls	r3, r3, #3
 8004f0a:	1a9b      	subs	r3, r3, r2
 8004f0c:	4403      	add	r3, r0
 8004f0e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004f18:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004f1c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
        sens_cfg[5].cfg.orientation.hysteresis = (uint8_t)orientation_param_set[context_sel][index++];
 8004f20:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004f24:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004f28:	781a      	ldrb	r2, [r3, #0]
 8004f2a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004f2e:	1c59      	adds	r1, r3, #1
 8004f30:	f887 111e 	strb.w	r1, [r7, #286]	; 0x11e
 8004f34:	4618      	mov	r0, r3
 8004f36:	4915      	ldr	r1, [pc, #84]	; (8004f8c <bmi323_context_switch_selection+0xb40>)
 8004f38:	4613      	mov	r3, r2
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	1a9b      	subs	r3, r3, r2
 8004f3e:	4403      	add	r3, r0
 8004f40:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004f4a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004f4e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed

        /* Set the context configurations */
        rslt = bmi323_set_sensor_config(sens_cfg, BMI323_MAX_FEATURE, dev);
 8004f52:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004f56:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004f5a:	f107 0008 	add.w	r0, r7, #8
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	2106      	movs	r1, #6
 8004f62:	f7ff fa49 	bl	80043f8 <bmi323_set_sensor_config>
 8004f66:	4603      	mov	r3, r0
 8004f68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8004f6c:	e002      	b.n	8004f74 <bmi323_context_switch_selection+0xb28>
    }
    else
    {
        rslt = BMI323_E_INVALID_CONTEXT_SEL;
 8004f6e:	23f3      	movs	r3, #243	; 0xf3
 8004f70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    }

    return rslt;
 8004f74:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	20000084 	.word	0x20000084
 8004f88:	20000108 	.word	0x20000108
 8004f8c:	20000128 	.word	0x20000128

08004f90 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi3_dev *dev)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00b      	beq.n	8004fb6 <null_ptr_check+0x26>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d007      	beq.n	8004fb6 <null_ptr_check+0x26>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <null_ptr_check+0x26>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d102      	bne.n	8004fbc <null_ptr_check+0x2c>
    {
        rslt = BMI323_E_NULL_PTR;
 8004fb6:	23ff      	movs	r3, #255	; 0xff
 8004fb8:	73fb      	strb	r3, [r7, #15]
 8004fba:	e001      	b.n	8004fc0 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI323_OK;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <bst_delay_us>:

/******************************************************************************/
/*!               User interface functions                                    */

void bst_delay_us(uint32_t period, void *intf_ptr)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
	uint32_t i;

	while(period--)
 8004fda:	e008      	b.n	8004fee <bst_delay_us+0x1e>
	{
		for(i = 0; i < 84; i++){;}
 8004fdc:	2300      	movs	r3, #0
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	e002      	b.n	8004fe8 <bst_delay_us+0x18>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b53      	cmp	r3, #83	; 0x53
 8004fec:	d9f9      	bls.n	8004fe2 <bst_delay_us+0x12>
	while(period--)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	1e5a      	subs	r2, r3, #1
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1f1      	bne.n	8004fdc <bst_delay_us+0xc>
	}
}
 8004ff8:	bf00      	nop
 8004ffa:	bf00      	nop
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
	...

08005008 <UART_Printf>:

void UART_Printf(uint8_t* buff, uint16_t size)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	460b      	mov	r3, r1
 8005012:	807b      	strh	r3, [r7, #2]
    HAL_UART_Transmit(&UART_HANDLE, buff, size, BUS_TIMEOUT);
 8005014:	887a      	ldrh	r2, [r7, #2]
 8005016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	4803      	ldr	r0, [pc, #12]	; (800502c <UART_Printf+0x24>)
 800501e:	f006 f8e9 	bl	800b1f4 <HAL_UART_Transmit>
}
 8005022:	bf00      	nop
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	200011f8 	.word	0x200011f8

08005030 <PDEBUG>:

char chBuffer[512];
void PDEBUG(char *format, ...)
{
 8005030:	b40f      	push	{r0, r1, r2, r3}
 8005032:	b580      	push	{r7, lr}
 8005034:	b082      	sub	sp, #8
 8005036:	af00      	add	r7, sp, #0
    va_list ap;
    va_start(ap, format);
 8005038:	f107 0314 	add.w	r3, r7, #20
 800503c:	607b      	str	r3, [r7, #4]
    vsnprintf(chBuffer, sizeof(chBuffer), format, ap);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005046:	4809      	ldr	r0, [pc, #36]	; (800506c <PDEBUG+0x3c>)
 8005048:	f00b fa3c 	bl	80104c4 <vsniprintf>
    UART_Printf((uint8_t *)chBuffer,strlen(chBuffer));
 800504c:	4807      	ldr	r0, [pc, #28]	; (800506c <PDEBUG+0x3c>)
 800504e:	f7fb f8e7 	bl	8000220 <strlen>
 8005052:	4603      	mov	r3, r0
 8005054:	b29b      	uxth	r3, r3
 8005056:	4619      	mov	r1, r3
 8005058:	4804      	ldr	r0, [pc, #16]	; (800506c <PDEBUG+0x3c>)
 800505a:	f7ff ffd5 	bl	8005008 <UART_Printf>
    va_end(ap);
}
 800505e:	bf00      	nop
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005068:	b004      	add	sp, #16
 800506a:	4770      	bx	lr
 800506c:	200003c4 	.word	0x200003c4

08005070 <bmi3_interface_init>:
/*!
 *  @brief Function to select the interface between SPI and I2C.
 *  Also to initialize coines platform
 */
int8_t bmi3_interface_init(struct bmi3_dev *bmi, uint8_t intf)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	460b      	mov	r3, r1
 800507a:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BMI3_OK;
 800507c:	2300      	movs	r3, #0
 800507e:	73fb      	strb	r3, [r7, #15]

	/* Bus configuration : SPI */
	if (intf == BMI3_SPI_INTF)
 8005080:	78fb      	ldrb	r3, [r7, #3]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d105      	bne.n	8005092 <bmi3_interface_init+0x22>
	{
		PDEBUG("SPI Interface \n");
 8005086:	480c      	ldr	r0, [pc, #48]	; (80050b8 <bmi3_interface_init+0x48>)
 8005088:	f7ff ffd2 	bl	8005030 <PDEBUG>
		bmi->intf = BMI3_SPI_INTF;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	725a      	strb	r2, [r3, #9]
//		bmi->write = (bmi3_write_fptr_t)SensorAPI_SPIx_Write1;
	}


	/* Assign device address to interface pointer */
	bmi->intf_ptr = &bmi323_dev_addr;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a09      	ldr	r2, [pc, #36]	; (80050bc <bmi3_interface_init+0x4c>)
 8005096:	605a      	str	r2, [r3, #4]
	bmi323_dev_addr = 0;
 8005098:	4b08      	ldr	r3, [pc, #32]	; (80050bc <bmi3_interface_init+0x4c>)
 800509a:	2200      	movs	r2, #0
 800509c:	701a      	strb	r2, [r3, #0]

	/* Configure delay in microseconds */
	bmi->delay_us = bst_delay_us;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a07      	ldr	r2, [pc, #28]	; (80050c0 <bmi3_interface_init+0x50>)
 80050a2:	619a      	str	r2, [r3, #24]

	/* Configure max read/write length (in bytes) ( Supported length depends on target machine) */
	bmi->read_write_len = READ_WRITE_LEN;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2220      	movs	r2, #32
 80050a8:	81da      	strh	r2, [r3, #14]

	return rslt;
 80050aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	08013cf4 	.word	0x08013cf4
 80050bc:	200003c0 	.word	0x200003c0
 80050c0:	08004fd1 	.word	0x08004fd1

080050c4 <lsb_to_mps2>:
/*!
 * @brief This function converts lsb to meter per second squared for 16 bit accelerometer at
 * range 2G, 4G, 8G or 16G.
 */
static float lsb_to_mps2(int16_t val, float g_range, uint8_t bit_width)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	4603      	mov	r3, r0
 80050cc:	ed87 0a00 	vstr	s0, [r7]
 80050d0:	460a      	mov	r2, r1
 80050d2:	80fb      	strh	r3, [r7, #6]
 80050d4:	4613      	mov	r3, r2
 80050d6:	717b      	strb	r3, [r7, #5]
    float half_scale = ((float)(1 << bit_width) / 2.0f);
 80050d8:	797b      	ldrb	r3, [r7, #5]
 80050da:	2201      	movs	r2, #1
 80050dc:	fa02 f303 	lsl.w	r3, r2, r3
 80050e0:	ee07 3a90 	vmov	s15, r3
 80050e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050e8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80050ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050f0:	edc7 7a03 	vstr	s15, [r7, #12]

    return (GRAVITY_EARTH * val * g_range) / half_scale;
 80050f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050f8:	ee07 3a90 	vmov	s15, r3
 80050fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005100:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800512c <lsb_to_mps2+0x68>
 8005104:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005108:	edd7 7a00 	vldr	s15, [r7]
 800510c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005110:	edd7 7a03 	vldr	s15, [r7, #12]
 8005114:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005118:	eef0 7a66 	vmov.f32	s15, s13
}
 800511c:	eeb0 0a67 	vmov.f32	s0, s15
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	411ce80a 	.word	0x411ce80a

08005130 <lsb_to_dps>:
/*!
 * @brief This function converts lsb to degree per second for 16 bit gyro at
 * range 125, 250, 500, 1000 or 2000dps.
 */
static float lsb_to_dps(int16_t val, float dps, uint8_t bit_width)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	ed87 0a00 	vstr	s0, [r7]
 800513c:	460a      	mov	r2, r1
 800513e:	80fb      	strh	r3, [r7, #6]
 8005140:	4613      	mov	r3, r2
 8005142:	717b      	strb	r3, [r7, #5]
    double power = 2;
 8005144:	f04f 0200 	mov.w	r2, #0
 8005148:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800514c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 8005150:	797b      	ldrb	r3, [r7, #5]
 8005152:	4618      	mov	r0, r3
 8005154:	f7fb f9ae 	bl	80004b4 <__aeabi_ui2d>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	ec43 2b11 	vmov	d1, r2, r3
 8005160:	ed97 0b04 	vldr	d0, [r7, #16]
 8005164:	f00d fab8 	bl	80126d8 <pow>
 8005168:	ec51 0b10 	vmov	r0, r1, d0
 800516c:	f04f 0200 	mov.w	r2, #0
 8005170:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005174:	f7fb fb42 	bl	80007fc <__aeabi_ddiv>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4610      	mov	r0, r2
 800517e:	4619      	mov	r1, r3
 8005180:	f7fb fcea 	bl	8000b58 <__aeabi_d2f>
 8005184:	4603      	mov	r3, r0
 8005186:	60fb      	str	r3, [r7, #12]

    return (dps / (half_scale)) * (val);
 8005188:	edd7 6a00 	vldr	s13, [r7]
 800518c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005194:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005198:	ee07 3a90 	vmov	s15, r3
 800519c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051a0:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80051a4:	eeb0 0a67 	vmov.f32	s0, s15
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <Open_BMI323_ACC>:

int8_t Open_BMI323_ACC(struct bmi3_dev *dev)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b08e      	sub	sp, #56	; 0x38
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
	int8_t rslt = BMI3_OK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	/* Sensor configuration structure */
	struct bmi3_sens_config config = { 0 };
 80051be:	f107 0308 	add.w	r3, r7, #8
 80051c2:	222e      	movs	r2, #46	; 0x2e
 80051c4:	2100      	movs	r1, #0
 80051c6:	4618      	mov	r0, r3
 80051c8:	f00b f98a 	bl	80104e0 <memset>

	config.type = BMI3_ACCEL;
 80051cc:	2300      	movs	r3, #0
 80051ce:	723b      	strb	r3, [r7, #8]

	/* Get the previous or default configuration settings */
	rslt = bmi323_get_sensor_config(&config, 1, dev);
 80051d0:	f107 0308 	add.w	r3, r7, #8
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	2101      	movs	r1, #1
 80051d8:	4618      	mov	r0, r3
 80051da:	f7ff f922 	bl	8004422 <bmi323_get_sensor_config>
 80051de:	4603      	mov	r3, r0
 80051e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (rslt == BMI3_OK)
 80051e4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d12b      	bne.n	8005244 <Open_BMI323_ACC+0x94>
	{
		/* Update all or any of the accelerometer configurations */

		/* The Accel bandwidth coefficient defines the 3 dB cutoff frequency in relation to the ODR. */
		config.cfg.acc.bwp = BMI3_ACC_BW_ODR_HALF;
 80051ec:	2300      	movs	r3, #0
 80051ee:	72fb      	strb	r3, [r7, #11]

		/* Set number of average samples for accel. */
		config.cfg.acc.avg_num = BMI3_ACC_AVG8;
 80051f0:	2303      	movs	r3, #3
 80051f2:	73bb      	strb	r3, [r7, #14]

		/* Enable the accel mode where averaging of samples
		* will be done based on above set bandwidth and ODR.
		* Note : By default accel is disabled. The accel will get enable by selecting the mode.
		*/
		config.cfg.acc.acc_mode = BMI3_ACC_MODE_NORMAL;
 80051f4:	2304      	movs	r3, #4
 80051f6:	733b      	strb	r3, [r7, #12]

		config.cfg.acc.odr = BMI3_ACC_ODR_1600HZ; //BMI3_ACC_ODR_400HZ;
 80051f8:	230c      	movs	r3, #12
 80051fa:	72bb      	strb	r3, [r7, #10]

		/* Gravity range of the sensor (+/- 2G, 4G, 8G, 16G). */
		config.cfg.acc.range     = BMI3_ACC_RANGE_4G;
 80051fc:	2301      	movs	r3, #1
 80051fe:	737b      	strb	r3, [r7, #13]

		/* Set the configurations */
		rslt = bmi323_set_sensor_config(&config, 1, dev);
 8005200:	f107 0308 	add.w	r3, r7, #8
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	2101      	movs	r1, #1
 8005208:	4618      	mov	r0, r3
 800520a:	f7ff f8f5 	bl	80043f8 <bmi323_set_sensor_config>
 800520e:	4603      	mov	r3, r0
 8005210:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (rslt != BMI3_OK)
 8005214:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8005218:	2b00      	cmp	r3, #0
 800521a:	d006      	beq.n	800522a <Open_BMI323_ACC+0x7a>
		{
			PDEBUG("Open ACC failed, rslt=%d\r\n", rslt);
 800521c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8005220:	4619      	mov	r1, r3
 8005222:	480b      	ldr	r0, [pc, #44]	; (8005250 <Open_BMI323_ACC+0xa0>)
 8005224:	f7ff ff04 	bl	8005030 <PDEBUG>
 8005228:	e00c      	b.n	8005244 <Open_BMI323_ACC+0x94>
		}
		else
		{
			PDEBUG("Open ACC set successfully\r\n");
 800522a:	480a      	ldr	r0, [pc, #40]	; (8005254 <Open_BMI323_ACC+0xa4>)
 800522c:	f7ff ff00 	bl	8005030 <PDEBUG>

			/* Get the configuration settings for validation */
			rslt = bmi323_get_sensor_config(&config, 1, dev);
 8005230:	f107 0308 	add.w	r3, r7, #8
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	2101      	movs	r1, #1
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff f8f2 	bl	8004422 <bmi323_get_sensor_config>
 800523e:	4603      	mov	r3, r0
 8005240:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
//				PDEBUG("avg_num = %d\r\n", config.cfg.acc.avg_num);
//			}
		}
	}

	return rslt;
 8005244:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8005248:	4618      	mov	r0, r3
 800524a:	3738      	adds	r7, #56	; 0x38
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	08013d04 	.word	0x08013d04
 8005254:	08013d20 	.word	0x08013d20

08005258 <Open_BMI323_GYRO>:

	return rslt;
}

int8_t Open_BMI323_GYRO(struct bmi3_dev *dev)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b08e      	sub	sp, #56	; 0x38
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
	int8_t rslt = BMI3_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	/* Sensor configuration structure */
	struct bmi3_sens_config config = { 0 };
 8005266:	f107 0308 	add.w	r3, r7, #8
 800526a:	222e      	movs	r2, #46	; 0x2e
 800526c:	2100      	movs	r1, #0
 800526e:	4618      	mov	r0, r3
 8005270:	f00b f936 	bl	80104e0 <memset>

	config.type = BMI3_GYRO;
 8005274:	2301      	movs	r3, #1
 8005276:	723b      	strb	r3, [r7, #8]
	
	/* Get the previous or default configuration settings */
	rslt = bmi323_get_sensor_config(&config, 1, dev);
 8005278:	f107 0308 	add.w	r3, r7, #8
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	2101      	movs	r1, #1
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff f8ce 	bl	8004422 <bmi323_get_sensor_config>
 8005286:	4603      	mov	r3, r0
 8005288:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (rslt == BMI3_OK) 
 800528c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8005290:	2b00      	cmp	r3, #0
 8005292:	d128      	bne.n	80052e6 <Open_BMI323_GYRO+0x8e>
	{
		config.cfg.gyr.odr = BMI3_GYR_ODR_400HZ;
 8005294:	230a      	movs	r3, #10
 8005296:	72bb      	strb	r3, [r7, #10]
		/* Gyroscope Angular Rate Measurement Range. By default the range is 2000dps. */
		config.cfg.gyr.range = BMI3_GYR_RANGE_2000DPS;
 8005298:	2304      	movs	r3, #4
 800529a:	737b      	strb	r3, [r7, #13]
		/*	The Gyroscope bandwidth coefficient defines the 3 dB cutoff frequency in relation to the ODR
		*	Value	Name	  Description
		*	  0   odr_half	 BW = gyr_odr/2
		*	  1  odr_quarter BW = gyr_odr/4
		*/
		config.cfg.gyr.bwp = BMI3_GYR_BW_ODR_QUARTER;
 800529c:	2301      	movs	r3, #1
 800529e:	72fb      	strb	r3, [r7, #11]
		/* By default the gyro is disabled. Gyro is enabled by selecting the mode. */
		config.cfg.gyr.gyr_mode = BMI3_GYR_MODE_NORMAL;
 80052a0:	2304      	movs	r3, #4
 80052a2:	733b      	strb	r3, [r7, #12]
		*  011     avg_8   Averaging of 8 samples
		*  100     avg_16  Averaging of 16 samples
		*  101     avg_32  Averaging of 32 samples
		*  110     avg_64  Averaging of 64 samples
		*/
		config.cfg.gyr.avg_num = BMI3_GYR_AVG64;
 80052a4:	2306      	movs	r3, #6
 80052a6:	73bb      	strb	r3, [r7, #14]
	
		/* Set the configurations */
		rslt = bmi323_set_sensor_config(&config, 1, dev);
 80052a8:	f107 0308 	add.w	r3, r7, #8
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	2101      	movs	r1, #1
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff f8a1 	bl	80043f8 <bmi323_set_sensor_config>
 80052b6:	4603      	mov	r3, r0
 80052b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (rslt != BMI3_OK) 
 80052bc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <Open_BMI323_GYRO+0x74>
		{
			PDEBUG("Open GYRO failed\r\n");
 80052c4:	480b      	ldr	r0, [pc, #44]	; (80052f4 <Open_BMI323_GYRO+0x9c>)
 80052c6:	f7ff feb3 	bl	8005030 <PDEBUG>
 80052ca:	e00c      	b.n	80052e6 <Open_BMI323_GYRO+0x8e>
		} 
		else
		{
			PDEBUG("Open GYRO successfully\r\n");
 80052cc:	480a      	ldr	r0, [pc, #40]	; (80052f8 <Open_BMI323_GYRO+0xa0>)
 80052ce:	f7ff feaf 	bl	8005030 <PDEBUG>

			/* Get the configuration settings for validation */
			rslt = bmi323_get_sensor_config(&config, 1, dev);
 80052d2:	f107 0308 	add.w	r3, r7, #8
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	2101      	movs	r1, #1
 80052da:	4618      	mov	r0, r3
 80052dc:	f7ff f8a1 	bl	8004422 <bmi323_get_sensor_config>
 80052e0:	4603      	mov	r3, r0
 80052e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
//				PDEBUG("avg_num = %d\r\n", config.cfg.gyr.avg_num);
//			}
		}
	}

	return rslt;
 80052e6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3738      	adds	r7, #56	; 0x38
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	08013d84 	.word	0x08013d84
 80052f8:	08013d98 	.word	0x08013d98

080052fc <Init_BMI323>:
		PDEBUG("0x%02X, value=0x%02X\r\n", reg_addr, value);
	}
}

int8_t Init_BMI323(struct bmi3_dev *dev)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
	int8_t rslt = BMI3_OK;
 8005304:	2300      	movs	r3, #0
 8005306:	73fb      	strb	r3, [r7, #15]
	uint8_t chipid;

	rslt = bmi3_interface_init(dev, BMI3_SPI_INTF);
 8005308:	2100      	movs	r1, #0
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff feb0 	bl	8005070 <bmi3_interface_init>
 8005310:	4603      	mov	r3, r0
 8005312:	73fb      	strb	r3, [r7, #15]
	//bmi3_error_codes_print_result("bmi3_interface_init",rslt);
	HAL_Delay(100);
 8005314:	2064      	movs	r0, #100	; 0x64
 8005316:	f7fb fffc 	bl	8001312 <HAL_Delay>

	/* Initialize bmi323. */
	rslt = bmi323_init(dev);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7ff f83c 	bl	8004398 <bmi323_init>
 8005320:	4603      	mov	r3, r0
 8005322:	73fb      	strb	r3, [r7, #15]
	//bmi3_error_codes_print_result("bmi323_init",rslt);

	if (rslt != BMI3_OK)
 8005324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d008      	beq.n	800533e <Init_BMI323+0x42>
	{
		PDEBUG("bmi323_init() failed, error code: %d\r\n", rslt);
 800532c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005330:	4619      	mov	r1, r3
 8005332:	4815      	ldr	r0, [pc, #84]	; (8005388 <Init_BMI323+0x8c>)
 8005334:	f7ff fe7c 	bl	8005030 <PDEBUG>
		return rslt;
 8005338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800533c:	e020      	b.n	8005380 <Init_BMI323+0x84>
	}
	else
	{
		PDEBUG("BMI323 initialized successfully\r\n");
 800533e:	4813      	ldr	r0, [pc, #76]	; (800538c <Init_BMI323+0x90>)
 8005340:	f7ff fe76 	bl	8005030 <PDEBUG>
	}

	rslt = bmi3_get_regs(BMI3_REG_CHIP_ID, &chipid, 1, dev);
 8005344:	f107 010e 	add.w	r1, r7, #14
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	2000      	movs	r0, #0
 800534e:	f7fc f895 	bl	800147c <bmi3_get_regs>
 8005352:	4603      	mov	r3, r0
 8005354:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMI3_OK) 
 8005356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d008      	beq.n	8005370 <Init_BMI323+0x74>
	{
		PDEBUG("read chip ID failed, error code: %d\r\n", rslt);
 800535e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005362:	4619      	mov	r1, r3
 8005364:	480a      	ldr	r0, [pc, #40]	; (8005390 <Init_BMI323+0x94>)
 8005366:	f7ff fe63 	bl	8005030 <PDEBUG>
		return rslt;
 800536a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800536e:	e007      	b.n	8005380 <Init_BMI323+0x84>
	}

	Open_BMI323_ACC(dev);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7ff ff1d 	bl	80051b0 <Open_BMI323_ACC>
	Open_BMI323_GYRO(dev);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7ff ff6e 	bl	8005258 <Open_BMI323_GYRO>

	return rslt;
 800537c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	08013e00 	.word	0x08013e00
 800538c:	08013e28 	.word	0x08013e28
 8005390:	08013e4c 	.word	0x08013e4c

08005394 <read_sensor>:

int16_t gyro_data[3];
int16_t acc_data[3];

uint8_t read_sensor(struct bmi3_dev dev, float data[])
{
 8005394:	b084      	sub	sp, #16
 8005396:	b590      	push	{r4, r7, lr}
 8005398:	b085      	sub	sp, #20
 800539a:	af00      	add	r7, sp, #0
 800539c:	f107 0420 	add.w	r4, r7, #32
 80053a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t acc_regs[6];
	uint8_t gyr_regs[6];
	uint8_t rslt;

	rslt = bmi3_get_regs(BMI3_REG_GYR_DATA_X, &gyr_regs, 6, &dev);
 80053a4:	4639      	mov	r1, r7
 80053a6:	f107 0320 	add.w	r3, r7, #32
 80053aa:	2206      	movs	r2, #6
 80053ac:	2006      	movs	r0, #6
 80053ae:	f7fc f865 	bl	800147c <bmi3_get_regs>
 80053b2:	4603      	mov	r3, r0
 80053b4:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMI3_OK)
 80053b6:	7bfb      	ldrb	r3, [r7, #15]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d006      	beq.n	80053ca <read_sensor+0x36>
	{
		PDEBUG("read gyro register failed, error code: %d\r\n", rslt);
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	4619      	mov	r1, r3
 80053c0:	485d      	ldr	r0, [pc, #372]	; (8005538 <read_sensor+0x1a4>)
 80053c2:	f7ff fe35 	bl	8005030 <PDEBUG>
		return rslt;
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
 80053c8:	e0ae      	b.n	8005528 <read_sensor+0x194>
	}
	gyro_data[0] = (gyr_regs[0] | (uint16_t)gyr_regs[1] << 8);
 80053ca:	783b      	ldrb	r3, [r7, #0]
 80053cc:	b21a      	sxth	r2, r3
 80053ce:	787b      	ldrb	r3, [r7, #1]
 80053d0:	021b      	lsls	r3, r3, #8
 80053d2:	b21b      	sxth	r3, r3
 80053d4:	4313      	orrs	r3, r2
 80053d6:	b21a      	sxth	r2, r3
 80053d8:	4b58      	ldr	r3, [pc, #352]	; (800553c <read_sensor+0x1a8>)
 80053da:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = (gyr_regs[2] | (uint16_t)gyr_regs[3] << 8);
 80053dc:	78bb      	ldrb	r3, [r7, #2]
 80053de:	b21a      	sxth	r2, r3
 80053e0:	78fb      	ldrb	r3, [r7, #3]
 80053e2:	021b      	lsls	r3, r3, #8
 80053e4:	b21b      	sxth	r3, r3
 80053e6:	4313      	orrs	r3, r2
 80053e8:	b21a      	sxth	r2, r3
 80053ea:	4b54      	ldr	r3, [pc, #336]	; (800553c <read_sensor+0x1a8>)
 80053ec:	805a      	strh	r2, [r3, #2]
	gyro_data[2] = (gyr_regs[4] | (uint16_t)gyr_regs[5] << 8);
 80053ee:	793b      	ldrb	r3, [r7, #4]
 80053f0:	b21a      	sxth	r2, r3
 80053f2:	797b      	ldrb	r3, [r7, #5]
 80053f4:	021b      	lsls	r3, r3, #8
 80053f6:	b21b      	sxth	r3, r3
 80053f8:	4313      	orrs	r3, r2
 80053fa:	b21a      	sxth	r2, r3
 80053fc:	4b4f      	ldr	r3, [pc, #316]	; (800553c <read_sensor+0x1a8>)
 80053fe:	809a      	strh	r2, [r3, #4]

	rslt = bmi3_get_regs(BMI3_REG_ACC_DATA_X, &acc_regs, 6, &dev);
 8005400:	f107 0108 	add.w	r1, r7, #8
 8005404:	f107 0320 	add.w	r3, r7, #32
 8005408:	2206      	movs	r2, #6
 800540a:	2003      	movs	r0, #3
 800540c:	f7fc f836 	bl	800147c <bmi3_get_regs>
 8005410:	4603      	mov	r3, r0
 8005412:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMI3_OK)
 8005414:	7bfb      	ldrb	r3, [r7, #15]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d006      	beq.n	8005428 <read_sensor+0x94>
	{
		PDEBUG("read acc register failed, error code: %d\r\n", rslt);
 800541a:	7bfb      	ldrb	r3, [r7, #15]
 800541c:	4619      	mov	r1, r3
 800541e:	4848      	ldr	r0, [pc, #288]	; (8005540 <read_sensor+0x1ac>)
 8005420:	f7ff fe06 	bl	8005030 <PDEBUG>
		return rslt;
 8005424:	7bfb      	ldrb	r3, [r7, #15]
 8005426:	e07f      	b.n	8005528 <read_sensor+0x194>
	}
	acc_data[0] = (acc_regs[0] | (uint16_t)acc_regs[1] << 8);
 8005428:	7a3b      	ldrb	r3, [r7, #8]
 800542a:	b21a      	sxth	r2, r3
 800542c:	7a7b      	ldrb	r3, [r7, #9]
 800542e:	021b      	lsls	r3, r3, #8
 8005430:	b21b      	sxth	r3, r3
 8005432:	4313      	orrs	r3, r2
 8005434:	b21a      	sxth	r2, r3
 8005436:	4b43      	ldr	r3, [pc, #268]	; (8005544 <read_sensor+0x1b0>)
 8005438:	801a      	strh	r2, [r3, #0]
	acc_data[1] = (acc_regs[2] | (uint16_t)acc_regs[3] << 8);
 800543a:	7abb      	ldrb	r3, [r7, #10]
 800543c:	b21a      	sxth	r2, r3
 800543e:	7afb      	ldrb	r3, [r7, #11]
 8005440:	021b      	lsls	r3, r3, #8
 8005442:	b21b      	sxth	r3, r3
 8005444:	4313      	orrs	r3, r2
 8005446:	b21a      	sxth	r2, r3
 8005448:	4b3e      	ldr	r3, [pc, #248]	; (8005544 <read_sensor+0x1b0>)
 800544a:	805a      	strh	r2, [r3, #2]
	acc_data[2] = (acc_regs[4] | (uint16_t)acc_regs[5] << 8);
 800544c:	7b3b      	ldrb	r3, [r7, #12]
 800544e:	b21a      	sxth	r2, r3
 8005450:	7b7b      	ldrb	r3, [r7, #13]
 8005452:	021b      	lsls	r3, r3, #8
 8005454:	b21b      	sxth	r3, r3
 8005456:	4313      	orrs	r3, r2
 8005458:	b21a      	sxth	r2, r3
 800545a:	4b3a      	ldr	r3, [pc, #232]	; (8005544 <read_sensor+0x1b0>)
 800545c:	809a      	strh	r2, [r3, #4]

	data[0] = lsb_to_dps(gyro_data[0], (float)2000, dev.resolution);
 800545e:	4b37      	ldr	r3, [pc, #220]	; (800553c <read_sensor+0x1a8>)
 8005460:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005464:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8005468:	4611      	mov	r1, r2
 800546a:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8005548 <read_sensor+0x1b4>
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff fe5e 	bl	8005130 <lsb_to_dps>
 8005474:	eef0 7a40 	vmov.f32	s15, s0
 8005478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800547a:	edc3 7a00 	vstr	s15, [r3]
	data[1] = lsb_to_dps(gyro_data[1], (float)2000, dev.resolution);
 800547e:	4b2f      	ldr	r3, [pc, #188]	; (800553c <read_sensor+0x1a8>)
 8005480:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8005484:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8005488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800548a:	1d1c      	adds	r4, r3, #4
 800548c:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8005548 <read_sensor+0x1b4>
 8005490:	4610      	mov	r0, r2
 8005492:	f7ff fe4d 	bl	8005130 <lsb_to_dps>
 8005496:	eef0 7a40 	vmov.f32	s15, s0
 800549a:	edc4 7a00 	vstr	s15, [r4]
	data[2] = lsb_to_dps(gyro_data[2], (float)2000, dev.resolution);
 800549e:	4b27      	ldr	r3, [pc, #156]	; (800553c <read_sensor+0x1a8>)
 80054a0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80054a4:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80054a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054aa:	f103 0408 	add.w	r4, r3, #8
 80054ae:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8005548 <read_sensor+0x1b4>
 80054b2:	4610      	mov	r0, r2
 80054b4:	f7ff fe3c 	bl	8005130 <lsb_to_dps>
 80054b8:	eef0 7a40 	vmov.f32	s15, s0
 80054bc:	edc4 7a00 	vstr	s15, [r4]

	data[3] = lsb_to_mps2(acc_data[0], 2, dev.resolution);
 80054c0:	4b20      	ldr	r3, [pc, #128]	; (8005544 <read_sensor+0x1b0>)
 80054c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80054c6:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80054ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054cc:	f103 040c 	add.w	r4, r3, #12
 80054d0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80054d4:	4610      	mov	r0, r2
 80054d6:	f7ff fdf5 	bl	80050c4 <lsb_to_mps2>
 80054da:	eef0 7a40 	vmov.f32	s15, s0
 80054de:	edc4 7a00 	vstr	s15, [r4]
	data[4] = lsb_to_mps2(acc_data[1], 2, dev.resolution);
 80054e2:	4b18      	ldr	r3, [pc, #96]	; (8005544 <read_sensor+0x1b0>)
 80054e4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80054e8:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80054ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ee:	f103 0410 	add.w	r4, r3, #16
 80054f2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80054f6:	4610      	mov	r0, r2
 80054f8:	f7ff fde4 	bl	80050c4 <lsb_to_mps2>
 80054fc:	eef0 7a40 	vmov.f32	s15, s0
 8005500:	edc4 7a00 	vstr	s15, [r4]
	data[5] = lsb_to_mps2(acc_data[2], 2, dev.resolution);
 8005504:	4b0f      	ldr	r3, [pc, #60]	; (8005544 <read_sensor+0x1b0>)
 8005506:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800550a:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 800550e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005510:	f103 0414 	add.w	r4, r3, #20
 8005514:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8005518:	4610      	mov	r0, r2
 800551a:	f7ff fdd3 	bl	80050c4 <lsb_to_mps2>
 800551e:	eef0 7a40 	vmov.f32	s15, s0
 8005522:	edc4 7a00 	vstr	s15, [r4]

	return 0;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005532:	b004      	add	sp, #16
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	08013e74 	.word	0x08013e74
 800553c:	200005c4 	.word	0x200005c4
 8005540:	08013ea0 	.word	0x08013ea0
 8005544:	200005cc 	.word	0x200005cc
 8005548:	44fa0000 	.word	0x44fa0000

0800554c <LL_EXTI_EnableIT_0_31>:
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005554:	4b06      	ldr	r3, [pc, #24]	; (8005570 <LL_EXTI_EnableIT_0_31+0x24>)
 8005556:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800555a:	4905      	ldr	r1, [pc, #20]	; (8005570 <LL_EXTI_EnableIT_0_31+0x24>)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4313      	orrs	r3, r2
 8005560:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	58000800 	.word	0x58000800

08005574 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800557c:	4b05      	ldr	r3, [pc, #20]	; (8005594 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	4904      	ldr	r1, [pc, #16]	; (8005594 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4313      	orrs	r3, r2
 8005586:	600b      	str	r3, [r1, #0]

}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	58000800 	.word	0x58000800

08005598 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800559e:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <ReadRtcSsrValue+0x3c>)
 80055a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80055a6:	4b0b      	ldr	r3, [pc, #44]	; (80055d4 <ReadRtcSsrValue+0x3c>)
 80055a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80055ae:	e005      	b.n	80055bc <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80055b4:	4b07      	ldr	r3, [pc, #28]	; (80055d4 <ReadRtcSsrValue+0x3c>)
 80055b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d1f5      	bne.n	80055b0 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80055c4:	683b      	ldr	r3, [r7, #0]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	40002800 	.word	0x40002800

080055d8 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	4603      	mov	r3, r0
 80055e0:	460a      	mov	r2, r1
 80055e2:	71fb      	strb	r3, [r7, #7]
 80055e4:	4613      	mov	r3, r2
 80055e6:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80055e8:	79ba      	ldrb	r2, [r7, #6]
 80055ea:	491d      	ldr	r1, [pc, #116]	; (8005660 <LinkTimerAfter+0x88>)
 80055ec:	4613      	mov	r3, r2
 80055ee:	005b      	lsls	r3, r3, #1
 80055f0:	4413      	add	r3, r2
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	440b      	add	r3, r1
 80055f6:	3315      	adds	r3, #21
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
 80055fe:	2b06      	cmp	r3, #6
 8005600:	d009      	beq.n	8005616 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8005602:	7bfa      	ldrb	r2, [r7, #15]
 8005604:	4916      	ldr	r1, [pc, #88]	; (8005660 <LinkTimerAfter+0x88>)
 8005606:	4613      	mov	r3, r2
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	4413      	add	r3, r2
 800560c:	00db      	lsls	r3, r3, #3
 800560e:	440b      	add	r3, r1
 8005610:	3314      	adds	r3, #20
 8005612:	79fa      	ldrb	r2, [r7, #7]
 8005614:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8005616:	79fa      	ldrb	r2, [r7, #7]
 8005618:	4911      	ldr	r1, [pc, #68]	; (8005660 <LinkTimerAfter+0x88>)
 800561a:	4613      	mov	r3, r2
 800561c:	005b      	lsls	r3, r3, #1
 800561e:	4413      	add	r3, r2
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	440b      	add	r3, r1
 8005624:	3315      	adds	r3, #21
 8005626:	7bfa      	ldrb	r2, [r7, #15]
 8005628:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800562a:	79fa      	ldrb	r2, [r7, #7]
 800562c:	490c      	ldr	r1, [pc, #48]	; (8005660 <LinkTimerAfter+0x88>)
 800562e:	4613      	mov	r3, r2
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	4413      	add	r3, r2
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	440b      	add	r3, r1
 8005638:	3314      	adds	r3, #20
 800563a:	79ba      	ldrb	r2, [r7, #6]
 800563c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800563e:	79ba      	ldrb	r2, [r7, #6]
 8005640:	4907      	ldr	r1, [pc, #28]	; (8005660 <LinkTimerAfter+0x88>)
 8005642:	4613      	mov	r3, r2
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	4413      	add	r3, r2
 8005648:	00db      	lsls	r3, r3, #3
 800564a:	440b      	add	r3, r1
 800564c:	3315      	adds	r3, #21
 800564e:	79fa      	ldrb	r2, [r7, #7]
 8005650:	701a      	strb	r2, [r3, #0]

  return;
 8005652:	bf00      	nop
}
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	200005d4 	.word	0x200005d4

08005664 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	4603      	mov	r3, r0
 800566c:	460a      	mov	r2, r1
 800566e:	71fb      	strb	r3, [r7, #7]
 8005670:	4613      	mov	r3, r2
 8005672:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8005674:	4b29      	ldr	r3, [pc, #164]	; (800571c <LinkTimerBefore+0xb8>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	b2db      	uxtb	r3, r3
 800567a:	79ba      	ldrb	r2, [r7, #6]
 800567c:	429a      	cmp	r2, r3
 800567e:	d032      	beq.n	80056e6 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8005680:	79ba      	ldrb	r2, [r7, #6]
 8005682:	4927      	ldr	r1, [pc, #156]	; (8005720 <LinkTimerBefore+0xbc>)
 8005684:	4613      	mov	r3, r2
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	4413      	add	r3, r2
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	440b      	add	r3, r1
 800568e:	3314      	adds	r3, #20
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8005694:	7bfa      	ldrb	r2, [r7, #15]
 8005696:	4922      	ldr	r1, [pc, #136]	; (8005720 <LinkTimerBefore+0xbc>)
 8005698:	4613      	mov	r3, r2
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	4413      	add	r3, r2
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	440b      	add	r3, r1
 80056a2:	3315      	adds	r3, #21
 80056a4:	79fa      	ldrb	r2, [r7, #7]
 80056a6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80056a8:	79fa      	ldrb	r2, [r7, #7]
 80056aa:	491d      	ldr	r1, [pc, #116]	; (8005720 <LinkTimerBefore+0xbc>)
 80056ac:	4613      	mov	r3, r2
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	4413      	add	r3, r2
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	440b      	add	r3, r1
 80056b6:	3315      	adds	r3, #21
 80056b8:	79ba      	ldrb	r2, [r7, #6]
 80056ba:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80056bc:	79fa      	ldrb	r2, [r7, #7]
 80056be:	4918      	ldr	r1, [pc, #96]	; (8005720 <LinkTimerBefore+0xbc>)
 80056c0:	4613      	mov	r3, r2
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	4413      	add	r3, r2
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	440b      	add	r3, r1
 80056ca:	3314      	adds	r3, #20
 80056cc:	7bfa      	ldrb	r2, [r7, #15]
 80056ce:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80056d0:	79ba      	ldrb	r2, [r7, #6]
 80056d2:	4913      	ldr	r1, [pc, #76]	; (8005720 <LinkTimerBefore+0xbc>)
 80056d4:	4613      	mov	r3, r2
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	4413      	add	r3, r2
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	440b      	add	r3, r1
 80056de:	3314      	adds	r3, #20
 80056e0:	79fa      	ldrb	r2, [r7, #7]
 80056e2:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80056e4:	e014      	b.n	8005710 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80056e6:	79fa      	ldrb	r2, [r7, #7]
 80056e8:	490d      	ldr	r1, [pc, #52]	; (8005720 <LinkTimerBefore+0xbc>)
 80056ea:	4613      	mov	r3, r2
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	4413      	add	r3, r2
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	440b      	add	r3, r1
 80056f4:	3315      	adds	r3, #21
 80056f6:	79ba      	ldrb	r2, [r7, #6]
 80056f8:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80056fa:	79ba      	ldrb	r2, [r7, #6]
 80056fc:	4908      	ldr	r1, [pc, #32]	; (8005720 <LinkTimerBefore+0xbc>)
 80056fe:	4613      	mov	r3, r2
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	4413      	add	r3, r2
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	440b      	add	r3, r1
 8005708:	3314      	adds	r3, #20
 800570a:	79fa      	ldrb	r2, [r7, #7]
 800570c:	701a      	strb	r2, [r3, #0]
  return;
 800570e:	bf00      	nop
}
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	20000664 	.word	0x20000664
 8005720:	200005d4 	.word	0x200005d4

08005724 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	4603      	mov	r3, r0
 800572c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800572e:	4b4e      	ldr	r3, [pc, #312]	; (8005868 <linkTimer+0x144>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b06      	cmp	r3, #6
 8005736:	d118      	bne.n	800576a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8005738:	4b4b      	ldr	r3, [pc, #300]	; (8005868 <linkTimer+0x144>)
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	b2da      	uxtb	r2, r3
 800573e:	4b4b      	ldr	r3, [pc, #300]	; (800586c <linkTimer+0x148>)
 8005740:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8005742:	4a49      	ldr	r2, [pc, #292]	; (8005868 <linkTimer+0x144>)
 8005744:	79fb      	ldrb	r3, [r7, #7]
 8005746:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8005748:	79fa      	ldrb	r2, [r7, #7]
 800574a:	4949      	ldr	r1, [pc, #292]	; (8005870 <linkTimer+0x14c>)
 800574c:	4613      	mov	r3, r2
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	4413      	add	r3, r2
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	440b      	add	r3, r1
 8005756:	3315      	adds	r3, #21
 8005758:	2206      	movs	r2, #6
 800575a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800575c:	4b45      	ldr	r3, [pc, #276]	; (8005874 <linkTimer+0x150>)
 800575e:	f04f 32ff 	mov.w	r2, #4294967295
 8005762:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8005764:	2300      	movs	r3, #0
 8005766:	81fb      	strh	r3, [r7, #14]
 8005768:	e078      	b.n	800585c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800576a:	f000 f909 	bl	8005980 <ReturnTimeElapsed>
 800576e:	4603      	mov	r3, r0
 8005770:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8005772:	79fa      	ldrb	r2, [r7, #7]
 8005774:	493e      	ldr	r1, [pc, #248]	; (8005870 <linkTimer+0x14c>)
 8005776:	4613      	mov	r3, r2
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	4413      	add	r3, r2
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	440b      	add	r3, r1
 8005780:	3308      	adds	r3, #8
 8005782:	6819      	ldr	r1, [r3, #0]
 8005784:	89fb      	ldrh	r3, [r7, #14]
 8005786:	79fa      	ldrb	r2, [r7, #7]
 8005788:	4419      	add	r1, r3
 800578a:	4839      	ldr	r0, [pc, #228]	; (8005870 <linkTimer+0x14c>)
 800578c:	4613      	mov	r3, r2
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	4413      	add	r3, r2
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	4403      	add	r3, r0
 8005796:	3308      	adds	r3, #8
 8005798:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800579a:	79fa      	ldrb	r2, [r7, #7]
 800579c:	4934      	ldr	r1, [pc, #208]	; (8005870 <linkTimer+0x14c>)
 800579e:	4613      	mov	r3, r2
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	4413      	add	r3, r2
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	440b      	add	r3, r1
 80057a8:	3308      	adds	r3, #8
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80057ae:	4b2e      	ldr	r3, [pc, #184]	; (8005868 <linkTimer+0x144>)
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	4619      	mov	r1, r3
 80057b6:	4a2e      	ldr	r2, [pc, #184]	; (8005870 <linkTimer+0x14c>)
 80057b8:	460b      	mov	r3, r1
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	440b      	add	r3, r1
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	4413      	add	r3, r2
 80057c2:	3308      	adds	r3, #8
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d337      	bcc.n	800583c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80057cc:	4b26      	ldr	r3, [pc, #152]	; (8005868 <linkTimer+0x144>)
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80057d2:	7b7a      	ldrb	r2, [r7, #13]
 80057d4:	4926      	ldr	r1, [pc, #152]	; (8005870 <linkTimer+0x14c>)
 80057d6:	4613      	mov	r3, r2
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	4413      	add	r3, r2
 80057dc:	00db      	lsls	r3, r3, #3
 80057de:	440b      	add	r3, r1
 80057e0:	3315      	adds	r3, #21
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80057e6:	e013      	b.n	8005810 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80057e8:	7b7a      	ldrb	r2, [r7, #13]
 80057ea:	4921      	ldr	r1, [pc, #132]	; (8005870 <linkTimer+0x14c>)
 80057ec:	4613      	mov	r3, r2
 80057ee:	005b      	lsls	r3, r3, #1
 80057f0:	4413      	add	r3, r2
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	440b      	add	r3, r1
 80057f6:	3315      	adds	r3, #21
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80057fc:	7b7a      	ldrb	r2, [r7, #13]
 80057fe:	491c      	ldr	r1, [pc, #112]	; (8005870 <linkTimer+0x14c>)
 8005800:	4613      	mov	r3, r2
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	4413      	add	r3, r2
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	440b      	add	r3, r1
 800580a:	3315      	adds	r3, #21
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8005810:	7b3b      	ldrb	r3, [r7, #12]
 8005812:	2b06      	cmp	r3, #6
 8005814:	d00b      	beq.n	800582e <linkTimer+0x10a>
 8005816:	7b3a      	ldrb	r2, [r7, #12]
 8005818:	4915      	ldr	r1, [pc, #84]	; (8005870 <linkTimer+0x14c>)
 800581a:	4613      	mov	r3, r2
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	4413      	add	r3, r2
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	440b      	add	r3, r1
 8005824:	3308      	adds	r3, #8
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	429a      	cmp	r2, r3
 800582c:	d2dc      	bcs.n	80057e8 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800582e:	7b7a      	ldrb	r2, [r7, #13]
 8005830:	79fb      	ldrb	r3, [r7, #7]
 8005832:	4611      	mov	r1, r2
 8005834:	4618      	mov	r0, r3
 8005836:	f7ff fecf 	bl	80055d8 <LinkTimerAfter>
 800583a:	e00f      	b.n	800585c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800583c:	4b0a      	ldr	r3, [pc, #40]	; (8005868 <linkTimer+0x144>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	b2da      	uxtb	r2, r3
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	4611      	mov	r1, r2
 8005846:	4618      	mov	r0, r3
 8005848:	f7ff ff0c 	bl	8005664 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800584c:	4b06      	ldr	r3, [pc, #24]	; (8005868 <linkTimer+0x144>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	b2da      	uxtb	r2, r3
 8005852:	4b06      	ldr	r3, [pc, #24]	; (800586c <linkTimer+0x148>)
 8005854:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8005856:	4a04      	ldr	r2, [pc, #16]	; (8005868 <linkTimer+0x144>)
 8005858:	79fb      	ldrb	r3, [r7, #7]
 800585a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800585c:	89fb      	ldrh	r3, [r7, #14]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	20000664 	.word	0x20000664
 800586c:	20000665 	.word	0x20000665
 8005870:	200005d4 	.word	0x200005d4
 8005874:	20000668 	.word	0x20000668

08005878 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	4603      	mov	r3, r0
 8005880:	460a      	mov	r2, r1
 8005882:	71fb      	strb	r3, [r7, #7]
 8005884:	4613      	mov	r3, r2
 8005886:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8005888:	4b39      	ldr	r3, [pc, #228]	; (8005970 <UnlinkTimer+0xf8>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	b2db      	uxtb	r3, r3
 800588e:	79fa      	ldrb	r2, [r7, #7]
 8005890:	429a      	cmp	r2, r3
 8005892:	d111      	bne.n	80058b8 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8005894:	4b36      	ldr	r3, [pc, #216]	; (8005970 <UnlinkTimer+0xf8>)
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	b2da      	uxtb	r2, r3
 800589a:	4b36      	ldr	r3, [pc, #216]	; (8005974 <UnlinkTimer+0xfc>)
 800589c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800589e:	79fa      	ldrb	r2, [r7, #7]
 80058a0:	4935      	ldr	r1, [pc, #212]	; (8005978 <UnlinkTimer+0x100>)
 80058a2:	4613      	mov	r3, r2
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	4413      	add	r3, r2
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	440b      	add	r3, r1
 80058ac:	3315      	adds	r3, #21
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	4b2f      	ldr	r3, [pc, #188]	; (8005970 <UnlinkTimer+0xf8>)
 80058b4:	701a      	strb	r2, [r3, #0]
 80058b6:	e03e      	b.n	8005936 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80058b8:	79fa      	ldrb	r2, [r7, #7]
 80058ba:	492f      	ldr	r1, [pc, #188]	; (8005978 <UnlinkTimer+0x100>)
 80058bc:	4613      	mov	r3, r2
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	4413      	add	r3, r2
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	440b      	add	r3, r1
 80058c6:	3314      	adds	r3, #20
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80058cc:	79fa      	ldrb	r2, [r7, #7]
 80058ce:	492a      	ldr	r1, [pc, #168]	; (8005978 <UnlinkTimer+0x100>)
 80058d0:	4613      	mov	r3, r2
 80058d2:	005b      	lsls	r3, r3, #1
 80058d4:	4413      	add	r3, r2
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	440b      	add	r3, r1
 80058da:	3315      	adds	r3, #21
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80058e0:	79f9      	ldrb	r1, [r7, #7]
 80058e2:	7bfa      	ldrb	r2, [r7, #15]
 80058e4:	4824      	ldr	r0, [pc, #144]	; (8005978 <UnlinkTimer+0x100>)
 80058e6:	460b      	mov	r3, r1
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	440b      	add	r3, r1
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	4403      	add	r3, r0
 80058f0:	3315      	adds	r3, #21
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	b2d8      	uxtb	r0, r3
 80058f6:	4920      	ldr	r1, [pc, #128]	; (8005978 <UnlinkTimer+0x100>)
 80058f8:	4613      	mov	r3, r2
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	4413      	add	r3, r2
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	440b      	add	r3, r1
 8005902:	3315      	adds	r3, #21
 8005904:	4602      	mov	r2, r0
 8005906:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8005908:	7bbb      	ldrb	r3, [r7, #14]
 800590a:	2b06      	cmp	r3, #6
 800590c:	d013      	beq.n	8005936 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800590e:	79f9      	ldrb	r1, [r7, #7]
 8005910:	7bba      	ldrb	r2, [r7, #14]
 8005912:	4819      	ldr	r0, [pc, #100]	; (8005978 <UnlinkTimer+0x100>)
 8005914:	460b      	mov	r3, r1
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	440b      	add	r3, r1
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	4403      	add	r3, r0
 800591e:	3314      	adds	r3, #20
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	b2d8      	uxtb	r0, r3
 8005924:	4914      	ldr	r1, [pc, #80]	; (8005978 <UnlinkTimer+0x100>)
 8005926:	4613      	mov	r3, r2
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	4413      	add	r3, r2
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	440b      	add	r3, r1
 8005930:	3314      	adds	r3, #20
 8005932:	4602      	mov	r2, r0
 8005934:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8005936:	79fa      	ldrb	r2, [r7, #7]
 8005938:	490f      	ldr	r1, [pc, #60]	; (8005978 <UnlinkTimer+0x100>)
 800593a:	4613      	mov	r3, r2
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	4413      	add	r3, r2
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	440b      	add	r3, r1
 8005944:	330c      	adds	r3, #12
 8005946:	2201      	movs	r2, #1
 8005948:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800594a:	4b09      	ldr	r3, [pc, #36]	; (8005970 <UnlinkTimer+0xf8>)
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b06      	cmp	r3, #6
 8005952:	d107      	bne.n	8005964 <UnlinkTimer+0xec>
 8005954:	79bb      	ldrb	r3, [r7, #6]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d104      	bne.n	8005964 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800595a:	4b08      	ldr	r3, [pc, #32]	; (800597c <UnlinkTimer+0x104>)
 800595c:	f04f 32ff 	mov.w	r2, #4294967295
 8005960:	601a      	str	r2, [r3, #0]
  }

  return;
 8005962:	bf00      	nop
 8005964:	bf00      	nop
}
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	20000664 	.word	0x20000664
 8005974:	20000665 	.word	0x20000665
 8005978:	200005d4 	.word	0x200005d4
 800597c:	20000668 	.word	0x20000668

08005980 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8005986:	4b1a      	ldr	r3, [pc, #104]	; (80059f0 <ReturnTimeElapsed+0x70>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598e:	d026      	beq.n	80059de <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8005990:	f7ff fe02 	bl	8005598 <ReadRtcSsrValue>
 8005994:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8005996:	4b16      	ldr	r3, [pc, #88]	; (80059f0 <ReturnTimeElapsed+0x70>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	429a      	cmp	r2, r3
 800599e:	d805      	bhi.n	80059ac <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80059a0:	4b13      	ldr	r3, [pc, #76]	; (80059f0 <ReturnTimeElapsed+0x70>)
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	607b      	str	r3, [r7, #4]
 80059aa:	e00a      	b.n	80059c2 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80059ac:	4b11      	ldr	r3, [pc, #68]	; (80059f4 <ReturnTimeElapsed+0x74>)
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	461a      	mov	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80059b8:	4b0d      	ldr	r3, [pc, #52]	; (80059f0 <ReturnTimeElapsed+0x70>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	4413      	add	r3, r2
 80059c0:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80059c2:	4b0d      	ldr	r3, [pc, #52]	; (80059f8 <ReturnTimeElapsed+0x78>)
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	461a      	mov	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	fb02 f303 	mul.w	r3, r2, r3
 80059ce:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80059d0:	4b0a      	ldr	r3, [pc, #40]	; (80059fc <ReturnTimeElapsed+0x7c>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	461a      	mov	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	40d3      	lsrs	r3, r2
 80059da:	607b      	str	r3, [r7, #4]
 80059dc:	e001      	b.n	80059e2 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80059de:	2300      	movs	r3, #0
 80059e0:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	b29b      	uxth	r3, r3
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	20000668 	.word	0x20000668
 80059f4:	20000670 	.word	0x20000670
 80059f8:	2000066e 	.word	0x2000066e
 80059fc:	2000066d 	.word	0x2000066d

08005a00 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	4603      	mov	r3, r0
 8005a08:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8005a0a:	88fb      	ldrh	r3, [r7, #6]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d108      	bne.n	8005a22 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8005a10:	f7ff fdc2 	bl	8005598 <ReadRtcSsrValue>
 8005a14:	4603      	mov	r3, r0
 8005a16:	4a21      	ldr	r2, [pc, #132]	; (8005a9c <RestartWakeupCounter+0x9c>)
 8005a18:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8005a1a:	2003      	movs	r0, #3
 8005a1c:	f001 ff01 	bl	8007822 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8005a20:	e039      	b.n	8005a96 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8005a22:	88fb      	ldrh	r3, [r7, #6]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d803      	bhi.n	8005a30 <RestartWakeupCounter+0x30>
 8005a28:	4b1d      	ldr	r3, [pc, #116]	; (8005aa0 <RestartWakeupCounter+0xa0>)
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d002      	beq.n	8005a36 <RestartWakeupCounter+0x36>
      Value -= 1;
 8005a30:	88fb      	ldrh	r3, [r7, #6]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8005a36:	bf00      	nop
 8005a38:	4b1a      	ldr	r3, [pc, #104]	; (8005aa4 <RestartWakeupCounter+0xa4>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f003 0304 	and.w	r3, r3, #4
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d0f8      	beq.n	8005a38 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8005a46:	4b17      	ldr	r3, [pc, #92]	; (8005aa4 <RestartWakeupCounter+0xa4>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	4b15      	ldr	r3, [pc, #84]	; (8005aa4 <RestartWakeupCounter+0xa4>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005a56:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8005a58:	4b13      	ldr	r3, [pc, #76]	; (8005aa8 <RestartWakeupCounter+0xa8>)
 8005a5a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005a5e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8005a60:	2003      	movs	r0, #3
 8005a62:	f001 feec 	bl	800783e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8005a66:	4b11      	ldr	r3, [pc, #68]	; (8005aac <RestartWakeupCounter+0xac>)
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	0c1b      	lsrs	r3, r3, #16
 8005a6c:	041b      	lsls	r3, r3, #16
 8005a6e:	88fa      	ldrh	r2, [r7, #6]
 8005a70:	490e      	ldr	r1, [pc, #56]	; (8005aac <RestartWakeupCounter+0xac>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8005a76:	f7ff fd8f 	bl	8005598 <ReadRtcSsrValue>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	4a07      	ldr	r2, [pc, #28]	; (8005a9c <RestartWakeupCounter+0x9c>)
 8005a7e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8005a80:	4b08      	ldr	r3, [pc, #32]	; (8005aa4 <RestartWakeupCounter+0xa4>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	4b07      	ldr	r3, [pc, #28]	; (8005aa4 <RestartWakeupCounter+0xa4>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a8e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8005a90:	f3af 8000 	nop.w
  return ;
 8005a94:	bf00      	nop
}
 8005a96:	3708      	adds	r7, #8
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	20000668 	.word	0x20000668
 8005aa0:	2000066d 	.word	0x2000066d
 8005aa4:	200010b0 	.word	0x200010b0
 8005aa8:	58000800 	.word	0x58000800
 8005aac:	40002800 	.word	0x40002800

08005ab0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8005ab6:	4b45      	ldr	r3, [pc, #276]	; (8005bcc <RescheduleTimerList+0x11c>)
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac2:	d107      	bne.n	8005ad4 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8005ac4:	bf00      	nop
 8005ac6:	4b42      	ldr	r3, [pc, #264]	; (8005bd0 <RescheduleTimerList+0x120>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f003 0304 	and.w	r3, r3, #4
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1f8      	bne.n	8005ac6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8005ad4:	4b3e      	ldr	r3, [pc, #248]	; (8005bd0 <RescheduleTimerList+0x120>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689a      	ldr	r2, [r3, #8]
 8005ada:	4b3d      	ldr	r3, [pc, #244]	; (8005bd0 <RescheduleTimerList+0x120>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ae2:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8005ae4:	4b3b      	ldr	r3, [pc, #236]	; (8005bd4 <RescheduleTimerList+0x124>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8005aea:	7bfa      	ldrb	r2, [r7, #15]
 8005aec:	493a      	ldr	r1, [pc, #232]	; (8005bd8 <RescheduleTimerList+0x128>)
 8005aee:	4613      	mov	r3, r2
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	4413      	add	r3, r2
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	440b      	add	r3, r1
 8005af8:	3308      	adds	r3, #8
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8005afe:	f7ff ff3f 	bl	8005980 <ReturnTimeElapsed>
 8005b02:	4603      	mov	r3, r0
 8005b04:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8005b06:	88fb      	ldrh	r3, [r7, #6]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d205      	bcs.n	8005b1a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8005b12:	4b32      	ldr	r3, [pc, #200]	; (8005bdc <RescheduleTimerList+0x12c>)
 8005b14:	2201      	movs	r2, #1
 8005b16:	701a      	strb	r2, [r3, #0]
 8005b18:	e04d      	b.n	8005bb6 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8005b1a:	88fb      	ldrh	r3, [r7, #6]
 8005b1c:	4a30      	ldr	r2, [pc, #192]	; (8005be0 <RescheduleTimerList+0x130>)
 8005b1e:	8812      	ldrh	r2, [r2, #0]
 8005b20:	b292      	uxth	r2, r2
 8005b22:	4413      	add	r3, r2
 8005b24:	461a      	mov	r2, r3
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d906      	bls.n	8005b3a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8005b2c:	4b2c      	ldr	r3, [pc, #176]	; (8005be0 <RescheduleTimerList+0x130>)
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8005b32:	4b2a      	ldr	r3, [pc, #168]	; (8005bdc <RescheduleTimerList+0x12c>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	701a      	strb	r2, [r3, #0]
 8005b38:	e03d      	b.n	8005bb6 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	88fb      	ldrh	r3, [r7, #6]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8005b44:	4b25      	ldr	r3, [pc, #148]	; (8005bdc <RescheduleTimerList+0x12c>)
 8005b46:	2201      	movs	r2, #1
 8005b48:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8005b4a:	e034      	b.n	8005bb6 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8005b4c:	7bfa      	ldrb	r2, [r7, #15]
 8005b4e:	4922      	ldr	r1, [pc, #136]	; (8005bd8 <RescheduleTimerList+0x128>)
 8005b50:	4613      	mov	r3, r2
 8005b52:	005b      	lsls	r3, r3, #1
 8005b54:	4413      	add	r3, r2
 8005b56:	00db      	lsls	r3, r3, #3
 8005b58:	440b      	add	r3, r1
 8005b5a:	3308      	adds	r3, #8
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	88fb      	ldrh	r3, [r7, #6]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d20a      	bcs.n	8005b7a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8005b64:	7bfa      	ldrb	r2, [r7, #15]
 8005b66:	491c      	ldr	r1, [pc, #112]	; (8005bd8 <RescheduleTimerList+0x128>)
 8005b68:	4613      	mov	r3, r2
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	4413      	add	r3, r2
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	440b      	add	r3, r1
 8005b72:	3308      	adds	r3, #8
 8005b74:	2200      	movs	r2, #0
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	e013      	b.n	8005ba2 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8005b7a:	7bfa      	ldrb	r2, [r7, #15]
 8005b7c:	4916      	ldr	r1, [pc, #88]	; (8005bd8 <RescheduleTimerList+0x128>)
 8005b7e:	4613      	mov	r3, r2
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	4413      	add	r3, r2
 8005b84:	00db      	lsls	r3, r3, #3
 8005b86:	440b      	add	r3, r1
 8005b88:	3308      	adds	r3, #8
 8005b8a:	6819      	ldr	r1, [r3, #0]
 8005b8c:	88fb      	ldrh	r3, [r7, #6]
 8005b8e:	7bfa      	ldrb	r2, [r7, #15]
 8005b90:	1ac9      	subs	r1, r1, r3
 8005b92:	4811      	ldr	r0, [pc, #68]	; (8005bd8 <RescheduleTimerList+0x128>)
 8005b94:	4613      	mov	r3, r2
 8005b96:	005b      	lsls	r3, r3, #1
 8005b98:	4413      	add	r3, r2
 8005b9a:	00db      	lsls	r3, r3, #3
 8005b9c:	4403      	add	r3, r0
 8005b9e:	3308      	adds	r3, #8
 8005ba0:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8005ba2:	7bfa      	ldrb	r2, [r7, #15]
 8005ba4:	490c      	ldr	r1, [pc, #48]	; (8005bd8 <RescheduleTimerList+0x128>)
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	4413      	add	r3, r2
 8005bac:	00db      	lsls	r3, r3, #3
 8005bae:	440b      	add	r3, r1
 8005bb0:	3315      	adds	r3, #21
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8005bb6:	7bfb      	ldrb	r3, [r7, #15]
 8005bb8:	2b06      	cmp	r3, #6
 8005bba:	d1c7      	bne.n	8005b4c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8005bbc:	89bb      	ldrh	r3, [r7, #12]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7ff ff1e 	bl	8005a00 <RestartWakeupCounter>

  return ;
 8005bc4:	bf00      	nop
}
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	40002800 	.word	0x40002800
 8005bd0:	200010b0 	.word	0x200010b0
 8005bd4:	20000664 	.word	0x20000664
 8005bd8:	200005d4 	.word	0x200005d4
 8005bdc:	2000066c 	.word	0x2000066c
 8005be0:	20000672 	.word	0x20000672

08005be4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08a      	sub	sp, #40	; 0x28
 8005be8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bea:	f3ef 8310 	mrs	r3, PRIMASK
 8005bee:	617b      	str	r3, [r7, #20]
  return(result);
 8005bf0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005bf2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8005bf4:	b672      	cpsid	i
}
 8005bf6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8005bf8:	4b59      	ldr	r3, [pc, #356]	; (8005d60 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	22ca      	movs	r2, #202	; 0xca
 8005bfe:	625a      	str	r2, [r3, #36]	; 0x24
 8005c00:	4b57      	ldr	r3, [pc, #348]	; (8005d60 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2253      	movs	r2, #83	; 0x53
 8005c06:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8005c08:	4b55      	ldr	r3, [pc, #340]	; (8005d60 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689a      	ldr	r2, [r3, #8]
 8005c0e:	4b54      	ldr	r3, [pc, #336]	; (8005d60 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c16:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8005c18:	4b52      	ldr	r3, [pc, #328]	; (8005d64 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8005c20:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005c24:	4950      	ldr	r1, [pc, #320]	; (8005d68 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8005c26:	4613      	mov	r3, r2
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	4413      	add	r3, r2
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	440b      	add	r3, r1
 8005c30:	330c      	adds	r3, #12
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d16e      	bne.n	8005d18 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8005c3a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005c3e:	494a      	ldr	r1, [pc, #296]	; (8005d68 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8005c40:	4613      	mov	r3, r2
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	4413      	add	r3, r2
 8005c46:	00db      	lsls	r3, r3, #3
 8005c48:	440b      	add	r3, r1
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8005c4e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005c52:	4945      	ldr	r1, [pc, #276]	; (8005d68 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8005c54:	4613      	mov	r3, r2
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	4413      	add	r3, r2
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	440b      	add	r3, r1
 8005c5e:	3310      	adds	r3, #16
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8005c64:	4b41      	ldr	r3, [pc, #260]	; (8005d6c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d04c      	beq.n	8005d08 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8005c6e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005c72:	493d      	ldr	r1, [pc, #244]	; (8005d68 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8005c74:	4613      	mov	r3, r2
 8005c76:	005b      	lsls	r3, r3, #1
 8005c78:	4413      	add	r3, r2
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	440b      	add	r3, r1
 8005c7e:	330d      	adds	r3, #13
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d124      	bne.n	8005cd2 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8005c88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7ff fdf2 	bl	8005878 <UnlinkTimer>
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f383 8810 	msr	PRIMASK, r3
}
 8005c9e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8005ca0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005ca4:	4930      	ldr	r1, [pc, #192]	; (8005d68 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	4413      	add	r3, r2
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	440b      	add	r3, r1
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005cb8:	4611      	mov	r1, r2
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 fa32 	bl	8006124 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8005cc0:	4b27      	ldr	r3, [pc, #156]	; (8005d60 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	22ca      	movs	r2, #202	; 0xca
 8005cc6:	625a      	str	r2, [r3, #36]	; 0x24
 8005cc8:	4b25      	ldr	r3, [pc, #148]	; (8005d60 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2253      	movs	r2, #83	; 0x53
 8005cce:	625a      	str	r2, [r3, #36]	; 0x24
 8005cd0:	e012      	b.n	8005cf8 <HW_TS_RTC_Wakeup_Handler+0x114>
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f383 8810 	msr	PRIMASK, r3
}
 8005cdc:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8005cde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 f99a 	bl	800601c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8005ce8:	4b1d      	ldr	r3, [pc, #116]	; (8005d60 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	22ca      	movs	r2, #202	; 0xca
 8005cee:	625a      	str	r2, [r3, #36]	; 0x24
 8005cf0:	4b1b      	ldr	r3, [pc, #108]	; (8005d60 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2253      	movs	r2, #83	; 0x53
 8005cf6:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8005cf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005cfc:	69fa      	ldr	r2, [r7, #28]
 8005cfe:	4619      	mov	r1, r3
 8005d00:	69b8      	ldr	r0, [r7, #24]
 8005d02:	f000 fa95 	bl	8006230 <HW_TS_RTC_Int_AppNot>
 8005d06:	e022      	b.n	8005d4e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8005d08:	f7ff fed2 	bl	8005ab0 <RescheduleTimerList>
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f383 8810 	msr	PRIMASK, r3
}
 8005d16:	e01a      	b.n	8005d4e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8005d18:	bf00      	nop
 8005d1a:	4b11      	ldr	r3, [pc, #68]	; (8005d60 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	f003 0304 	and.w	r3, r3, #4
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0f8      	beq.n	8005d1a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8005d28:	4b0d      	ldr	r3, [pc, #52]	; (8005d60 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	4b0b      	ldr	r3, [pc, #44]	; (8005d60 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005d38:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8005d3a:	4b0d      	ldr	r3, [pc, #52]	; (8005d70 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8005d3c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005d40:	60da      	str	r2, [r3, #12]
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f383 8810 	msr	PRIMASK, r3
}
 8005d4c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8005d4e:	4b04      	ldr	r3, [pc, #16]	; (8005d60 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	22ff      	movs	r2, #255	; 0xff
 8005d54:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8005d56:	bf00      	nop
}
 8005d58:	3728      	adds	r7, #40	; 0x28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	200010b0 	.word	0x200010b0
 8005d64:	20000664 	.word	0x20000664
 8005d68:	200005d4 	.word	0x200005d4
 8005d6c:	2000066c 	.word	0x2000066c
 8005d70:	58000800 	.word	0x58000800

08005d74 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b088      	sub	sp, #32
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	6039      	str	r1, [r7, #0]
 8005d7e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8005d80:	4b5e      	ldr	r3, [pc, #376]	; (8005efc <HW_TS_Init+0x188>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	22ca      	movs	r2, #202	; 0xca
 8005d86:	625a      	str	r2, [r3, #36]	; 0x24
 8005d88:	4b5c      	ldr	r3, [pc, #368]	; (8005efc <HW_TS_Init+0x188>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2253      	movs	r2, #83	; 0x53
 8005d8e:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005d90:	4b5b      	ldr	r3, [pc, #364]	; (8005f00 <HW_TS_Init+0x18c>)
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	4a5a      	ldr	r2, [pc, #360]	; (8005f00 <HW_TS_Init+0x18c>)
 8005d96:	f043 0320 	orr.w	r3, r3, #32
 8005d9a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8005d9c:	4b58      	ldr	r3, [pc, #352]	; (8005f00 <HW_TS_Init+0x18c>)
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	f003 0307 	and.w	r3, r3, #7
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	f1c3 0304 	rsb	r3, r3, #4
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	4b55      	ldr	r3, [pc, #340]	; (8005f04 <HW_TS_Init+0x190>)
 8005db0:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8005db2:	4b53      	ldr	r3, [pc, #332]	; (8005f00 <HW_TS_Init+0x18c>)
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005dba:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8005dbe:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	fa92 f2a2 	rbit	r2, r2
 8005dc6:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	2a00      	cmp	r2, #0
 8005dd0:	d101      	bne.n	8005dd6 <HW_TS_Init+0x62>
  {
    return 32U;
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	e003      	b.n	8005dde <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	fab2 f282 	clz	r2, r2
 8005ddc:	b2d2      	uxtb	r2, r2
 8005dde:	40d3      	lsrs	r3, r2
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	3301      	adds	r3, #1
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	4b48      	ldr	r3, [pc, #288]	; (8005f08 <HW_TS_Init+0x194>)
 8005de8:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8005dea:	4b45      	ldr	r3, [pc, #276]	; (8005f00 <HW_TS_Init+0x18c>)
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	3301      	adds	r3, #1
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	4b44      	ldr	r3, [pc, #272]	; (8005f0c <HW_TS_Init+0x198>)
 8005dfc:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8005dfe:	4b43      	ldr	r3, [pc, #268]	; (8005f0c <HW_TS_Init+0x198>)
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	3b01      	subs	r3, #1
 8005e04:	4a40      	ldr	r2, [pc, #256]	; (8005f08 <HW_TS_Init+0x194>)
 8005e06:	7812      	ldrb	r2, [r2, #0]
 8005e08:	fb02 f303 	mul.w	r3, r2, r3
 8005e0c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005e10:	4a3c      	ldr	r2, [pc, #240]	; (8005f04 <HW_TS_Init+0x190>)
 8005e12:	7812      	ldrb	r2, [r2, #0]
 8005e14:	40d3      	lsrs	r3, r2
 8005e16:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d904      	bls.n	8005e2c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8005e22:	4b3b      	ldr	r3, [pc, #236]	; (8005f10 <HW_TS_Init+0x19c>)
 8005e24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e28:	801a      	strh	r2, [r3, #0]
 8005e2a:	e003      	b.n	8005e34 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	4b37      	ldr	r3, [pc, #220]	; (8005f10 <HW_TS_Init+0x19c>)
 8005e32:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8005e34:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005e38:	f7ff fb9c 	bl	8005574 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8005e3c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005e40:	f7ff fb84 	bl	800554c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8005e44:	79fb      	ldrb	r3, [r7, #7]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d13d      	bne.n	8005ec6 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8005e4a:	4b32      	ldr	r3, [pc, #200]	; (8005f14 <HW_TS_Init+0x1a0>)
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8005e50:	4b31      	ldr	r3, [pc, #196]	; (8005f18 <HW_TS_Init+0x1a4>)
 8005e52:	f04f 32ff 	mov.w	r2, #4294967295
 8005e56:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8005e58:	2300      	movs	r3, #0
 8005e5a:	77fb      	strb	r3, [r7, #31]
 8005e5c:	e00c      	b.n	8005e78 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8005e5e:	7ffa      	ldrb	r2, [r7, #31]
 8005e60:	492e      	ldr	r1, [pc, #184]	; (8005f1c <HW_TS_Init+0x1a8>)
 8005e62:	4613      	mov	r3, r2
 8005e64:	005b      	lsls	r3, r3, #1
 8005e66:	4413      	add	r3, r2
 8005e68:	00db      	lsls	r3, r3, #3
 8005e6a:	440b      	add	r3, r1
 8005e6c:	330c      	adds	r3, #12
 8005e6e:	2200      	movs	r2, #0
 8005e70:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8005e72:	7ffb      	ldrb	r3, [r7, #31]
 8005e74:	3301      	adds	r3, #1
 8005e76:	77fb      	strb	r3, [r7, #31]
 8005e78:	7ffb      	ldrb	r3, [r7, #31]
 8005e7a:	2b05      	cmp	r3, #5
 8005e7c:	d9ef      	bls.n	8005e5e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8005e7e:	4b28      	ldr	r3, [pc, #160]	; (8005f20 <HW_TS_Init+0x1ac>)
 8005e80:	2206      	movs	r2, #6
 8005e82:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8005e84:	4b1d      	ldr	r3, [pc, #116]	; (8005efc <HW_TS_Init+0x188>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689a      	ldr	r2, [r3, #8]
 8005e8a:	4b1c      	ldr	r3, [pc, #112]	; (8005efc <HW_TS_Init+0x188>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e92:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8005e94:	4b19      	ldr	r3, [pc, #100]	; (8005efc <HW_TS_Init+0x188>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	4b17      	ldr	r3, [pc, #92]	; (8005efc <HW_TS_Init+0x188>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005ea4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8005ea6:	4b1f      	ldr	r3, [pc, #124]	; (8005f24 <HW_TS_Init+0x1b0>)
 8005ea8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005eac:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8005eae:	2003      	movs	r0, #3
 8005eb0:	f001 fcc5 	bl	800783e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8005eb4:	4b11      	ldr	r3, [pc, #68]	; (8005efc <HW_TS_Init+0x188>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	4b10      	ldr	r3, [pc, #64]	; (8005efc <HW_TS_Init+0x188>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ec2:	609a      	str	r2, [r3, #8]
 8005ec4:	e009      	b.n	8005eda <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8005ec6:	4b0d      	ldr	r3, [pc, #52]	; (8005efc <HW_TS_Init+0x188>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8005ed4:	2003      	movs	r0, #3
 8005ed6:	f001 fca4 	bl	8007822 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8005eda:	4b08      	ldr	r3, [pc, #32]	; (8005efc <HW_TS_Init+0x188>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	22ff      	movs	r2, #255	; 0xff
 8005ee0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	2103      	movs	r1, #3
 8005ee6:	2003      	movs	r0, #3
 8005ee8:	f001 fc59 	bl	800779e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8005eec:	2003      	movs	r0, #3
 8005eee:	f001 fc70 	bl	80077d2 <HAL_NVIC_EnableIRQ>

  return;
 8005ef2:	bf00      	nop
}
 8005ef4:	3720      	adds	r7, #32
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	200010b0 	.word	0x200010b0
 8005f00:	40002800 	.word	0x40002800
 8005f04:	2000066d 	.word	0x2000066d
 8005f08:	2000066e 	.word	0x2000066e
 8005f0c:	20000670 	.word	0x20000670
 8005f10:	20000672 	.word	0x20000672
 8005f14:	2000066c 	.word	0x2000066c
 8005f18:	20000668 	.word	0x20000668
 8005f1c:	200005d4 	.word	0x200005d4
 8005f20:	20000664 	.word	0x20000664
 8005f24:	58000800 	.word	0x58000800

08005f28 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b08b      	sub	sp, #44	; 0x2c
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	603b      	str	r3, [r7, #0]
 8005f34:	4613      	mov	r3, r2
 8005f36:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f3e:	f3ef 8310 	mrs	r3, PRIMASK
 8005f42:	61fb      	str	r3, [r7, #28]
  return(result);
 8005f44:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005f46:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f48:	b672      	cpsid	i
}
 8005f4a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8005f4c:	e004      	b.n	8005f58 <HW_TS_Create+0x30>
  {
    loop++;
 8005f4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f52:	3301      	adds	r3, #1
 8005f54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8005f58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f5c:	2b05      	cmp	r3, #5
 8005f5e:	d80c      	bhi.n	8005f7a <HW_TS_Create+0x52>
 8005f60:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005f64:	492c      	ldr	r1, [pc, #176]	; (8006018 <HW_TS_Create+0xf0>)
 8005f66:	4613      	mov	r3, r2
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	4413      	add	r3, r2
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	440b      	add	r3, r1
 8005f70:	330c      	adds	r3, #12
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1e9      	bne.n	8005f4e <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8005f7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f7e:	2b06      	cmp	r3, #6
 8005f80:	d038      	beq.n	8005ff4 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8005f82:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005f86:	4924      	ldr	r1, [pc, #144]	; (8006018 <HW_TS_Create+0xf0>)
 8005f88:	4613      	mov	r3, r2
 8005f8a:	005b      	lsls	r3, r3, #1
 8005f8c:	4413      	add	r3, r2
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	440b      	add	r3, r1
 8005f92:	330c      	adds	r3, #12
 8005f94:	2201      	movs	r2, #1
 8005f96:	701a      	strb	r2, [r3, #0]
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	f383 8810 	msr	PRIMASK, r3
}
 8005fa2:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8005fa4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005fa8:	491b      	ldr	r1, [pc, #108]	; (8006018 <HW_TS_Create+0xf0>)
 8005faa:	4613      	mov	r3, r2
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	4413      	add	r3, r2
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	440b      	add	r3, r1
 8005fb4:	3310      	adds	r3, #16
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8005fba:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005fbe:	4916      	ldr	r1, [pc, #88]	; (8006018 <HW_TS_Create+0xf0>)
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	4413      	add	r3, r2
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	440b      	add	r3, r1
 8005fca:	330d      	adds	r3, #13
 8005fcc:	79fa      	ldrb	r2, [r7, #7]
 8005fce:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8005fd0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005fd4:	4910      	ldr	r1, [pc, #64]	; (8006018 <HW_TS_Create+0xf0>)
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	4413      	add	r3, r2
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	440b      	add	r3, r1
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005fea:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8005fec:	2300      	movs	r3, #0
 8005fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005ff2:	e008      	b.n	8006006 <HW_TS_Create+0xde>
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f383 8810 	msr	PRIMASK, r3
}
 8005ffe:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8006000:	2301      	movs	r3, #1
 8006002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8006006:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800600a:	4618      	mov	r0, r3
 800600c:	372c      	adds	r7, #44	; 0x2c
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	200005d4 	.word	0x200005d4

0800601c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b086      	sub	sp, #24
 8006020:	af00      	add	r7, sp, #0
 8006022:	4603      	mov	r3, r0
 8006024:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006026:	f3ef 8310 	mrs	r3, PRIMASK
 800602a:	60fb      	str	r3, [r7, #12]
  return(result);
 800602c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800602e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006030:	b672      	cpsid	i
}
 8006032:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8006034:	2003      	movs	r0, #3
 8006036:	f001 fbda 	bl	80077ee <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800603a:	4b34      	ldr	r3, [pc, #208]	; (800610c <HW_TS_Stop+0xf0>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	22ca      	movs	r2, #202	; 0xca
 8006040:	625a      	str	r2, [r3, #36]	; 0x24
 8006042:	4b32      	ldr	r3, [pc, #200]	; (800610c <HW_TS_Stop+0xf0>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2253      	movs	r2, #83	; 0x53
 8006048:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800604a:	79fa      	ldrb	r2, [r7, #7]
 800604c:	4930      	ldr	r1, [pc, #192]	; (8006110 <HW_TS_Stop+0xf4>)
 800604e:	4613      	mov	r3, r2
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	4413      	add	r3, r2
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	440b      	add	r3, r1
 8006058:	330c      	adds	r3, #12
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b02      	cmp	r3, #2
 8006060:	d142      	bne.n	80060e8 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8006062:	79fb      	ldrb	r3, [r7, #7]
 8006064:	2100      	movs	r1, #0
 8006066:	4618      	mov	r0, r3
 8006068:	f7ff fc06 	bl	8005878 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800606c:	4b29      	ldr	r3, [pc, #164]	; (8006114 <HW_TS_Stop+0xf8>)
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8006072:	7cfb      	ldrb	r3, [r7, #19]
 8006074:	2b06      	cmp	r3, #6
 8006076:	d12f      	bne.n	80060d8 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8006078:	4b27      	ldr	r3, [pc, #156]	; (8006118 <HW_TS_Stop+0xfc>)
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006084:	d107      	bne.n	8006096 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8006086:	bf00      	nop
 8006088:	4b20      	ldr	r3, [pc, #128]	; (800610c <HW_TS_Stop+0xf0>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f003 0304 	and.w	r3, r3, #4
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1f8      	bne.n	8006088 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8006096:	4b1d      	ldr	r3, [pc, #116]	; (800610c <HW_TS_Stop+0xf0>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	689a      	ldr	r2, [r3, #8]
 800609c:	4b1b      	ldr	r3, [pc, #108]	; (800610c <HW_TS_Stop+0xf0>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a4:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80060a6:	bf00      	nop
 80060a8:	4b18      	ldr	r3, [pc, #96]	; (800610c <HW_TS_Stop+0xf0>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f003 0304 	and.w	r3, r3, #4
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d0f8      	beq.n	80060a8 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80060b6:	4b15      	ldr	r3, [pc, #84]	; (800610c <HW_TS_Stop+0xf0>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	b2da      	uxtb	r2, r3
 80060be:	4b13      	ldr	r3, [pc, #76]	; (800610c <HW_TS_Stop+0xf0>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80060c6:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80060c8:	4b14      	ldr	r3, [pc, #80]	; (800611c <HW_TS_Stop+0x100>)
 80060ca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80060ce:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80060d0:	2003      	movs	r0, #3
 80060d2:	f001 fbb4 	bl	800783e <HAL_NVIC_ClearPendingIRQ>
 80060d6:	e007      	b.n	80060e8 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80060d8:	4b11      	ldr	r3, [pc, #68]	; (8006120 <HW_TS_Stop+0x104>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	7cfa      	ldrb	r2, [r7, #19]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d001      	beq.n	80060e8 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80060e4:	f7ff fce4 	bl	8005ab0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80060e8:	4b08      	ldr	r3, [pc, #32]	; (800610c <HW_TS_Stop+0xf0>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	22ff      	movs	r2, #255	; 0xff
 80060ee:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80060f0:	2003      	movs	r0, #3
 80060f2:	f001 fb6e 	bl	80077d2 <HAL_NVIC_EnableIRQ>
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f383 8810 	msr	PRIMASK, r3
}
 8006100:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8006102:	bf00      	nop
}
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	200010b0 	.word	0x200010b0
 8006110:	200005d4 	.word	0x200005d4
 8006114:	20000664 	.word	0x20000664
 8006118:	40002800 	.word	0x40002800
 800611c:	58000800 	.word	0x58000800
 8006120:	20000665 	.word	0x20000665

08006124 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	4603      	mov	r3, r0
 800612c:	6039      	str	r1, [r7, #0]
 800612e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8006130:	79fa      	ldrb	r2, [r7, #7]
 8006132:	493b      	ldr	r1, [pc, #236]	; (8006220 <HW_TS_Start+0xfc>)
 8006134:	4613      	mov	r3, r2
 8006136:	005b      	lsls	r3, r3, #1
 8006138:	4413      	add	r3, r2
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	440b      	add	r3, r1
 800613e:	330c      	adds	r3, #12
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b02      	cmp	r3, #2
 8006146:	d103      	bne.n	8006150 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8006148:	79fb      	ldrb	r3, [r7, #7]
 800614a:	4618      	mov	r0, r3
 800614c:	f7ff ff66 	bl	800601c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006150:	f3ef 8310 	mrs	r3, PRIMASK
 8006154:	60fb      	str	r3, [r7, #12]
  return(result);
 8006156:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006158:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800615a:	b672      	cpsid	i
}
 800615c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800615e:	2003      	movs	r0, #3
 8006160:	f001 fb45 	bl	80077ee <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8006164:	4b2f      	ldr	r3, [pc, #188]	; (8006224 <HW_TS_Start+0x100>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	22ca      	movs	r2, #202	; 0xca
 800616a:	625a      	str	r2, [r3, #36]	; 0x24
 800616c:	4b2d      	ldr	r3, [pc, #180]	; (8006224 <HW_TS_Start+0x100>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2253      	movs	r2, #83	; 0x53
 8006172:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8006174:	79fa      	ldrb	r2, [r7, #7]
 8006176:	492a      	ldr	r1, [pc, #168]	; (8006220 <HW_TS_Start+0xfc>)
 8006178:	4613      	mov	r3, r2
 800617a:	005b      	lsls	r3, r3, #1
 800617c:	4413      	add	r3, r2
 800617e:	00db      	lsls	r3, r3, #3
 8006180:	440b      	add	r3, r1
 8006182:	330c      	adds	r3, #12
 8006184:	2202      	movs	r2, #2
 8006186:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8006188:	79fa      	ldrb	r2, [r7, #7]
 800618a:	4925      	ldr	r1, [pc, #148]	; (8006220 <HW_TS_Start+0xfc>)
 800618c:	4613      	mov	r3, r2
 800618e:	005b      	lsls	r3, r3, #1
 8006190:	4413      	add	r3, r2
 8006192:	00db      	lsls	r3, r3, #3
 8006194:	440b      	add	r3, r1
 8006196:	3308      	adds	r3, #8
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800619c:	79fa      	ldrb	r2, [r7, #7]
 800619e:	4920      	ldr	r1, [pc, #128]	; (8006220 <HW_TS_Start+0xfc>)
 80061a0:	4613      	mov	r3, r2
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	4413      	add	r3, r2
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	440b      	add	r3, r1
 80061aa:	3304      	adds	r3, #4
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80061b0:	79fb      	ldrb	r3, [r7, #7]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7ff fab6 	bl	8005724 <linkTimer>
 80061b8:	4603      	mov	r3, r0
 80061ba:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80061bc:	4b1a      	ldr	r3, [pc, #104]	; (8006228 <HW_TS_Start+0x104>)
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80061c2:	4b1a      	ldr	r3, [pc, #104]	; (800622c <HW_TS_Start+0x108>)
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	7c7a      	ldrb	r2, [r7, #17]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d002      	beq.n	80061d4 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80061ce:	f7ff fc6f 	bl	8005ab0 <RescheduleTimerList>
 80061d2:	e013      	b.n	80061fc <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80061d4:	79fa      	ldrb	r2, [r7, #7]
 80061d6:	4912      	ldr	r1, [pc, #72]	; (8006220 <HW_TS_Start+0xfc>)
 80061d8:	4613      	mov	r3, r2
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	4413      	add	r3, r2
 80061de:	00db      	lsls	r3, r3, #3
 80061e0:	440b      	add	r3, r1
 80061e2:	3308      	adds	r3, #8
 80061e4:	6819      	ldr	r1, [r3, #0]
 80061e6:	8a7b      	ldrh	r3, [r7, #18]
 80061e8:	79fa      	ldrb	r2, [r7, #7]
 80061ea:	1ac9      	subs	r1, r1, r3
 80061ec:	480c      	ldr	r0, [pc, #48]	; (8006220 <HW_TS_Start+0xfc>)
 80061ee:	4613      	mov	r3, r2
 80061f0:	005b      	lsls	r3, r3, #1
 80061f2:	4413      	add	r3, r2
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	4403      	add	r3, r0
 80061f8:	3308      	adds	r3, #8
 80061fa:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80061fc:	4b09      	ldr	r3, [pc, #36]	; (8006224 <HW_TS_Start+0x100>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	22ff      	movs	r2, #255	; 0xff
 8006202:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8006204:	2003      	movs	r0, #3
 8006206:	f001 fae4 	bl	80077d2 <HAL_NVIC_EnableIRQ>
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	f383 8810 	msr	PRIMASK, r3
}
 8006214:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8006216:	bf00      	nop
}
 8006218:	3718      	adds	r7, #24
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	200005d4 	.word	0x200005d4
 8006224:	200010b0 	.word	0x200010b0
 8006228:	20000664 	.word	0x20000664
 800622c:	20000665 	.word	0x20000665

08006230 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	460b      	mov	r3, r1
 800623a:	607a      	str	r2, [r7, #4]
 800623c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4798      	blx	r3

  return;
 8006242:	bf00      	nop
}
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <SensorAPI_SPIx_Read1>:
#define pin1 GPIO_PIN_4
#define port2 GPIOA
#define pin2 GPIO_PIN_5

int8_t SensorAPI_SPIx_Read1(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af02      	add	r7, sp, #8
 8006252:	60b9      	str	r1, [r7, #8]
 8006254:	607a      	str	r2, [r7, #4]
 8006256:	603b      	str	r3, [r7, #0]
 8006258:	4603      	mov	r3, r0
 800625a:	73fb      	strb	r3, [r7, #15]
    GTXBuffer[0] = reg_addr | 0x80;
 800625c:	7bfb      	ldrb	r3, [r7, #15]
 800625e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006262:	b2da      	uxtb	r2, r3
 8006264:	4b15      	ldr	r3, [pc, #84]	; (80062bc <SensorAPI_SPIx_Read1+0x70>)
 8006266:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(port1, pin1, GPIO_PIN_RESET); // NSS low
 8006268:	2200      	movs	r2, #0
 800626a:	2110      	movs	r1, #16
 800626c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006270:	f001 fede 	bl	8008030 <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(&SPI_HANDLE, GTXBuffer, GRXBuffer, length+1, BUS_TIMEOUT); // timeout 1000msec;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	b29b      	uxth	r3, r3
 8006278:	3301      	adds	r3, #1
 800627a:	b29b      	uxth	r3, r3
 800627c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006280:	9200      	str	r2, [sp, #0]
 8006282:	4a0f      	ldr	r2, [pc, #60]	; (80062c0 <SensorAPI_SPIx_Read1+0x74>)
 8006284:	490d      	ldr	r1, [pc, #52]	; (80062bc <SensorAPI_SPIx_Read1+0x70>)
 8006286:	480f      	ldr	r0, [pc, #60]	; (80062c4 <SensorAPI_SPIx_Read1+0x78>)
 8006288:	f004 faaa 	bl	800a7e0 <HAL_SPI_TransmitReceive>
    while(SPI_HANDLE.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 800628c:	bf00      	nop
 800628e:	4b0d      	ldr	r3, [pc, #52]	; (80062c4 <SensorAPI_SPIx_Read1+0x78>)
 8006290:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b02      	cmp	r3, #2
 8006298:	d0f9      	beq.n	800628e <SensorAPI_SPIx_Read1+0x42>

    HAL_GPIO_WritePin(port1, pin1, GPIO_PIN_SET); // NSS high
 800629a:	2201      	movs	r2, #1
 800629c:	2110      	movs	r1, #16
 800629e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80062a2:	f001 fec5 	bl	8008030 <HAL_GPIO_WritePin>
    memcpy(reg_data, GRXBuffer+1, length);
 80062a6:	4b08      	ldr	r3, [pc, #32]	; (80062c8 <SensorAPI_SPIx_Read1+0x7c>)
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	4619      	mov	r1, r3
 80062ac:	68b8      	ldr	r0, [r7, #8]
 80062ae:	f00a f996 	bl	80105de <memcpy>

    return 0;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	20000674 	.word	0x20000674
 80062c0:	20000874 	.word	0x20000874
 80062c4:	200010d4 	.word	0x200010d4
 80062c8:	20000875 	.word	0x20000875

080062cc <SensorAPI_SPIx_Read2>:

int8_t SensorAPI_SPIx_Read2(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af02      	add	r7, sp, #8
 80062d2:	60b9      	str	r1, [r7, #8]
 80062d4:	607a      	str	r2, [r7, #4]
 80062d6:	603b      	str	r3, [r7, #0]
 80062d8:	4603      	mov	r3, r0
 80062da:	73fb      	strb	r3, [r7, #15]
    GTXBuffer[0] = reg_addr | 0x80;
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
 80062de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	4b15      	ldr	r3, [pc, #84]	; (800633c <SensorAPI_SPIx_Read2+0x70>)
 80062e6:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(port2, pin2, GPIO_PIN_RESET); // NSS low
 80062e8:	2200      	movs	r2, #0
 80062ea:	2120      	movs	r1, #32
 80062ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80062f0:	f001 fe9e 	bl	8008030 <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(&SPI_HANDLE, GTXBuffer, GRXBuffer, length+1, BUS_TIMEOUT); // timeout 1000msec;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	3301      	adds	r3, #1
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006300:	9200      	str	r2, [sp, #0]
 8006302:	4a0f      	ldr	r2, [pc, #60]	; (8006340 <SensorAPI_SPIx_Read2+0x74>)
 8006304:	490d      	ldr	r1, [pc, #52]	; (800633c <SensorAPI_SPIx_Read2+0x70>)
 8006306:	480f      	ldr	r0, [pc, #60]	; (8006344 <SensorAPI_SPIx_Read2+0x78>)
 8006308:	f004 fa6a 	bl	800a7e0 <HAL_SPI_TransmitReceive>
    while(SPI_HANDLE.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 800630c:	bf00      	nop
 800630e:	4b0d      	ldr	r3, [pc, #52]	; (8006344 <SensorAPI_SPIx_Read2+0x78>)
 8006310:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b02      	cmp	r3, #2
 8006318:	d0f9      	beq.n	800630e <SensorAPI_SPIx_Read2+0x42>

    HAL_GPIO_WritePin(port2, pin2, GPIO_PIN_SET); // NSS high
 800631a:	2201      	movs	r2, #1
 800631c:	2120      	movs	r1, #32
 800631e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006322:	f001 fe85 	bl	8008030 <HAL_GPIO_WritePin>
    memcpy(reg_data, GRXBuffer+1, length);
 8006326:	4b08      	ldr	r3, [pc, #32]	; (8006348 <SensorAPI_SPIx_Read2+0x7c>)
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	4619      	mov	r1, r3
 800632c:	68b8      	ldr	r0, [r7, #8]
 800632e:	f00a f956 	bl	80105de <memcpy>

    return 0;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	20000674 	.word	0x20000674
 8006340:	20000874 	.word	0x20000874
 8006344:	200010d4 	.word	0x200010d4
 8006348:	20000875 	.word	0x20000875

0800634c <SensorAPI_SPIx_Write1>:
//    return 0;
//}


int8_t SensorAPI_SPIx_Write1(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	60b9      	str	r1, [r7, #8]
 8006354:	607a      	str	r2, [r7, #4]
 8006356:	603b      	str	r3, [r7, #0]
 8006358:	4603      	mov	r3, r0
 800635a:	73fb      	strb	r3, [r7, #15]
    GTXBuffer[0] = reg_addr & 0x7F;
 800635c:	7bfb      	ldrb	r3, [r7, #15]
 800635e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006362:	b2da      	uxtb	r2, r3
 8006364:	4b14      	ldr	r3, [pc, #80]	; (80063b8 <SensorAPI_SPIx_Write1+0x6c>)
 8006366:	701a      	strb	r2, [r3, #0]
    memcpy(&GTXBuffer[1], reg_data, length);
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	68b9      	ldr	r1, [r7, #8]
 800636c:	4813      	ldr	r0, [pc, #76]	; (80063bc <SensorAPI_SPIx_Write1+0x70>)
 800636e:	f00a f936 	bl	80105de <memcpy>

    HAL_GPIO_WritePin(port1, pin1, GPIO_PIN_RESET); // NSS low
 8006372:	2200      	movs	r2, #0
 8006374:	2110      	movs	r1, #16
 8006376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800637a:	f001 fe59 	bl	8008030 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&SPI_HANDLE, GTXBuffer, length+1, BUS_TIMEOUT); // send register address + write data
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	b29b      	uxth	r3, r3
 8006382:	3301      	adds	r3, #1
 8006384:	b29a      	uxth	r2, r3
 8006386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800638a:	490b      	ldr	r1, [pc, #44]	; (80063b8 <SensorAPI_SPIx_Write1+0x6c>)
 800638c:	480c      	ldr	r0, [pc, #48]	; (80063c0 <SensorAPI_SPIx_Write1+0x74>)
 800638e:	f004 f8b2 	bl	800a4f6 <HAL_SPI_Transmit>
    while(SPI_HANDLE.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8006392:	bf00      	nop
 8006394:	4b0a      	ldr	r3, [pc, #40]	; (80063c0 <SensorAPI_SPIx_Write1+0x74>)
 8006396:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d0f9      	beq.n	8006394 <SensorAPI_SPIx_Write1+0x48>

    HAL_GPIO_WritePin(port1, pin1, GPIO_PIN_SET); // NSS high
 80063a0:	2201      	movs	r2, #1
 80063a2:	2110      	movs	r1, #16
 80063a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063a8:	f001 fe42 	bl	8008030 <HAL_GPIO_WritePin>

    return 0;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	20000674 	.word	0x20000674
 80063bc:	20000675 	.word	0x20000675
 80063c0:	200010d4 	.word	0x200010d4

080063c4 <SensorAPI_SPIx_Write2>:

int8_t SensorAPI_SPIx_Write2(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60b9      	str	r1, [r7, #8]
 80063cc:	607a      	str	r2, [r7, #4]
 80063ce:	603b      	str	r3, [r7, #0]
 80063d0:	4603      	mov	r3, r0
 80063d2:	73fb      	strb	r3, [r7, #15]
    GTXBuffer[0] = reg_addr & 0x7F;
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
 80063d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	4b14      	ldr	r3, [pc, #80]	; (8006430 <SensorAPI_SPIx_Write2+0x6c>)
 80063de:	701a      	strb	r2, [r3, #0]
    memcpy(&GTXBuffer[1], reg_data, length);
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	68b9      	ldr	r1, [r7, #8]
 80063e4:	4813      	ldr	r0, [pc, #76]	; (8006434 <SensorAPI_SPIx_Write2+0x70>)
 80063e6:	f00a f8fa 	bl	80105de <memcpy>

    HAL_GPIO_WritePin(port2, pin2, GPIO_PIN_RESET); // NSS low
 80063ea:	2200      	movs	r2, #0
 80063ec:	2120      	movs	r1, #32
 80063ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063f2:	f001 fe1d 	bl	8008030 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&SPI_HANDLE, GTXBuffer, length+1, BUS_TIMEOUT); // send register address + write data
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	3301      	adds	r3, #1
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006402:	490b      	ldr	r1, [pc, #44]	; (8006430 <SensorAPI_SPIx_Write2+0x6c>)
 8006404:	480c      	ldr	r0, [pc, #48]	; (8006438 <SensorAPI_SPIx_Write2+0x74>)
 8006406:	f004 f876 	bl	800a4f6 <HAL_SPI_Transmit>
    while(SPI_HANDLE.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 800640a:	bf00      	nop
 800640c:	4b0a      	ldr	r3, [pc, #40]	; (8006438 <SensorAPI_SPIx_Write2+0x74>)
 800640e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d0f9      	beq.n	800640c <SensorAPI_SPIx_Write2+0x48>

    HAL_GPIO_WritePin(port2, pin2, GPIO_PIN_SET); // NSS high
 8006418:	2201      	movs	r2, #1
 800641a:	2120      	movs	r1, #32
 800641c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006420:	f001 fe06 	bl	8008030 <HAL_GPIO_WritePin>

    return 0;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	20000674 	.word	0x20000674
 8006434:	20000675 	.word	0x20000675
 8006438:	200010d4 	.word	0x200010d4

0800643c <LL_RCC_LSE_SetDriveCapability>:
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8006444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800644c:	f023 0218 	bic.w	r2, r3, #24
 8006450:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4313      	orrs	r3, r2
 8006458:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8006470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006474:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006476:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4313      	orrs	r3, r2
 800647e:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8006480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006484:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4013      	ands	r3, r2
 800648a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800648c:	68fb      	ldr	r3, [r7, #12]
}
 800648e:	bf00      	nop
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800649a:	b480      	push	{r7}
 800649c:	b085      	sub	sp, #20
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80064a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80064b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4013      	ands	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80064be:	68fb      	ldr	r3, [r7, #12]
}
 80064c0:	bf00      	nop
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80064cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80064d0:	b08e      	sub	sp, #56	; 0x38
 80064d2:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80064d4:	f000 ff96 	bl	8007404 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80064d8:	f7fa fde0 	bl	800109c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80064dc:	f000 f914 	bl	8006708 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80064e0:	f000 f992 	bl	8006808 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80064e4:	f000 f9b0 	bl	8006848 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80064e8:	f000 fada 	bl	8006aa0 <MX_GPIO_Init>
  MX_DMA_Init();
 80064ec:	f000 faae 	bl	8006a4c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80064f0:	f000 fa38 	bl	8006964 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80064f4:	f000 fa82 	bl	80069fc <MX_USB_PCD_Init>
  MX_SPI1_Init();
 80064f8:	f000 f9f6 	bl	80068e8 <MX_SPI1_Init>
  MX_RTC_Init();
 80064fc:	f000 f9c0 	bl	8006880 <MX_RTC_Init>
  MX_RF_Init();
 8006500:	f000 f9b6 	bl	8006870 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8006504:	f7fa fdd8 	bl	80010b8 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	int8_t rslt = BMI3_OK;
 8006508:	2300      	movs	r3, #0
 800650a:	77fb      	strb	r3, [r7, #31]
	uint8_t flag;

/* Implementation of the sensor read/write function cannot really be changed so here we go*/
	dev.read = (bmi3_read_fptr_t)SensorAPI_SPIx_Read1;
 800650c:	4b74      	ldr	r3, [pc, #464]	; (80066e0 <main+0x214>)
 800650e:	4a75      	ldr	r2, [pc, #468]	; (80066e4 <main+0x218>)
 8006510:	611a      	str	r2, [r3, #16]
	dev.write = (bmi3_write_fptr_t)SensorAPI_SPIx_Write1;
 8006512:	4b73      	ldr	r3, [pc, #460]	; (80066e0 <main+0x214>)
 8006514:	4a74      	ldr	r2, [pc, #464]	; (80066e8 <main+0x21c>)
 8006516:	615a      	str	r2, [r3, #20]
	Init_BMI323(&dev);
 8006518:	4871      	ldr	r0, [pc, #452]	; (80066e0 <main+0x214>)
 800651a:	f7fe feef 	bl	80052fc <Init_BMI323>
	HAL_Delay(10);
 800651e:	200a      	movs	r0, #10
 8006520:	f7fa fef7 	bl	8001312 <HAL_Delay>

	dev2.read = (bmi3_read_fptr_t)SensorAPI_SPIx_Read2;
 8006524:	4b71      	ldr	r3, [pc, #452]	; (80066ec <main+0x220>)
 8006526:	4a72      	ldr	r2, [pc, #456]	; (80066f0 <main+0x224>)
 8006528:	611a      	str	r2, [r3, #16]
	dev2.write = (bmi3_write_fptr_t)SensorAPI_SPIx_Write2;
 800652a:	4b70      	ldr	r3, [pc, #448]	; (80066ec <main+0x220>)
 800652c:	4a71      	ldr	r2, [pc, #452]	; (80066f4 <main+0x228>)
 800652e:	615a      	str	r2, [r3, #20]
	Init_BMI323(&dev2);
 8006530:	486e      	ldr	r0, [pc, #440]	; (80066ec <main+0x220>)
 8006532:	f7fe fee3 	bl	80052fc <Init_BMI323>
//	HAL_Delay(10);

  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8006536:	f7fa ff11 	bl	800135c <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    float data[] = {0,0,0,0,0,0};
 800653a:	1d3b      	adds	r3, r7, #4
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	605a      	str	r2, [r3, #4]
 8006542:	609a      	str	r2, [r3, #8]
 8006544:	60da      	str	r2, [r3, #12]
 8006546:	611a      	str	r2, [r3, #16]
 8006548:	615a      	str	r2, [r3, #20]

//    start = clock();

    bmi3_get_regs(BMI3_REG_STATUS, &flag, 1, &dev);
 800654a:	f107 011e 	add.w	r1, r7, #30
 800654e:	4b64      	ldr	r3, [pc, #400]	; (80066e0 <main+0x214>)
 8006550:	2201      	movs	r2, #1
 8006552:	2002      	movs	r0, #2
 8006554:	f7fa ff92 	bl	800147c <bmi3_get_regs>
	if((flag & 0x40) == 0) continue;
 8006558:	7fbb      	ldrb	r3, [r7, #30]
 800655a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 80b7 	beq.w	80066d2 <main+0x206>
	read_sensor(dev, data);
 8006564:	4c5e      	ldr	r4, [pc, #376]	; (80066e0 <main+0x214>)
 8006566:	1d3b      	adds	r3, r7, #4
 8006568:	9304      	str	r3, [sp, #16]
 800656a:	466d      	mov	r5, sp
 800656c:	f104 0310 	add.w	r3, r4, #16
 8006570:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006572:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006576:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800657a:	f7fe ff0b 	bl	8005394 <read_sensor>
	bmi3_get_regs(BMI3_REG_STATUS, &flag, 1, &dev2);
 800657e:	f107 011e 	add.w	r1, r7, #30
 8006582:	4b5a      	ldr	r3, [pc, #360]	; (80066ec <main+0x220>)
 8006584:	2201      	movs	r2, #1
 8006586:	2002      	movs	r0, #2
 8006588:	f7fa ff78 	bl	800147c <bmi3_get_regs>
	if((flag & 0x40) == 0) continue;
 800658c:	7fbb      	ldrb	r3, [r7, #30]
 800658e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 809f 	beq.w	80066d6 <main+0x20a>
	read_sensor(dev2, data);
 8006598:	4c54      	ldr	r4, [pc, #336]	; (80066ec <main+0x220>)
 800659a:	1d3b      	adds	r3, r7, #4
 800659c:	9304      	str	r3, [sp, #16]
 800659e:	466d      	mov	r5, sp
 80065a0:	f104 0310 	add.w	r3, r4, #16
 80065a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065a6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80065aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80065ae:	f7fe fef1 	bl	8005394 <read_sensor>
//
//	end = clock();
//	cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
//	PDEBUG("Execution time: %f seconds\n", cpu_time_used);

	PDEBUG("1:\n");
 80065b2:	4851      	ldr	r0, [pc, #324]	; (80066f8 <main+0x22c>)
 80065b4:	f7fe fd3c 	bl	8005030 <PDEBUG>
	PDEBUG("GYRO: X axis: %4.2f, Y axis: %4.2f, Z axis: %4.2f\r\n", data[0], data[1], data[2]);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7f9 ff9c 	bl	80004f8 <__aeabi_f2d>
 80065c0:	4680      	mov	r8, r0
 80065c2:	4689      	mov	r9, r1
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7f9 ff96 	bl	80004f8 <__aeabi_f2d>
 80065cc:	4604      	mov	r4, r0
 80065ce:	460d      	mov	r5, r1
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7f9 ff90 	bl	80004f8 <__aeabi_f2d>
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065e0:	e9cd 4500 	strd	r4, r5, [sp]
 80065e4:	4642      	mov	r2, r8
 80065e6:	464b      	mov	r3, r9
 80065e8:	4844      	ldr	r0, [pc, #272]	; (80066fc <main+0x230>)
 80065ea:	f7fe fd21 	bl	8005030 <PDEBUG>
	PDEBUG("ACC: X axis: %4.2f, Y axis: %4.2f, Z axis: %4.2f\r\n", data[3], data[4], data[5]);
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7f9 ff81 	bl	80004f8 <__aeabi_f2d>
 80065f6:	4680      	mov	r8, r0
 80065f8:	4689      	mov	r9, r1
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7f9 ff7b 	bl	80004f8 <__aeabi_f2d>
 8006602:	4604      	mov	r4, r0
 8006604:	460d      	mov	r5, r1
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	4618      	mov	r0, r3
 800660a:	f7f9 ff75 	bl	80004f8 <__aeabi_f2d>
 800660e:	4602      	mov	r2, r0
 8006610:	460b      	mov	r3, r1
 8006612:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006616:	e9cd 4500 	strd	r4, r5, [sp]
 800661a:	4642      	mov	r2, r8
 800661c:	464b      	mov	r3, r9
 800661e:	4838      	ldr	r0, [pc, #224]	; (8006700 <main+0x234>)
 8006620:	f7fe fd06 	bl	8005030 <PDEBUG>

	bmi3_get_regs(BMI3_REG_STATUS, &flag, 1, &dev2);
 8006624:	f107 011e 	add.w	r1, r7, #30
 8006628:	4b30      	ldr	r3, [pc, #192]	; (80066ec <main+0x220>)
 800662a:	2201      	movs	r2, #1
 800662c:	2002      	movs	r0, #2
 800662e:	f7fa ff25 	bl	800147c <bmi3_get_regs>
	if((flag & 0x40) == 0) continue;
 8006632:	7fbb      	ldrb	r3, [r7, #30]
 8006634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006638:	2b00      	cmp	r3, #0
 800663a:	d04e      	beq.n	80066da <main+0x20e>
	read_sensor(dev2, data);
 800663c:	4c2b      	ldr	r4, [pc, #172]	; (80066ec <main+0x220>)
 800663e:	1d3b      	adds	r3, r7, #4
 8006640:	9304      	str	r3, [sp, #16]
 8006642:	466d      	mov	r5, sp
 8006644:	f104 0310 	add.w	r3, r4, #16
 8006648:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800664a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800664e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006652:	f7fe fe9f 	bl	8005394 <read_sensor>

	PDEBUG("2:\n");
 8006656:	482b      	ldr	r0, [pc, #172]	; (8006704 <main+0x238>)
 8006658:	f7fe fcea 	bl	8005030 <PDEBUG>
	PDEBUG("GYRO: X axis: %4.2f, Y axis: %4.2f, Z axis: %4.2f\r\n", data[0], data[1], data[2]);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4618      	mov	r0, r3
 8006660:	f7f9 ff4a 	bl	80004f8 <__aeabi_f2d>
 8006664:	4680      	mov	r8, r0
 8006666:	4689      	mov	r9, r1
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	4618      	mov	r0, r3
 800666c:	f7f9 ff44 	bl	80004f8 <__aeabi_f2d>
 8006670:	4604      	mov	r4, r0
 8006672:	460d      	mov	r5, r1
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4618      	mov	r0, r3
 8006678:	f7f9 ff3e 	bl	80004f8 <__aeabi_f2d>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006684:	e9cd 4500 	strd	r4, r5, [sp]
 8006688:	4642      	mov	r2, r8
 800668a:	464b      	mov	r3, r9
 800668c:	481b      	ldr	r0, [pc, #108]	; (80066fc <main+0x230>)
 800668e:	f7fe fccf 	bl	8005030 <PDEBUG>
	PDEBUG("ACC: X axis: %4.2f, Y axis: %4.2f, Z axis: %4.2f\r\n", data[3], data[4], data[5]);
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	4618      	mov	r0, r3
 8006696:	f7f9 ff2f 	bl	80004f8 <__aeabi_f2d>
 800669a:	4680      	mov	r8, r0
 800669c:	4689      	mov	r9, r1
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7f9 ff29 	bl	80004f8 <__aeabi_f2d>
 80066a6:	4604      	mov	r4, r0
 80066a8:	460d      	mov	r5, r1
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7f9 ff23 	bl	80004f8 <__aeabi_f2d>
 80066b2:	4602      	mov	r2, r0
 80066b4:	460b      	mov	r3, r1
 80066b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066ba:	e9cd 4500 	strd	r4, r5, [sp]
 80066be:	4642      	mov	r2, r8
 80066c0:	464b      	mov	r3, r9
 80066c2:	480f      	ldr	r0, [pc, #60]	; (8006700 <main+0x234>)
 80066c4:	f7fe fcb4 	bl	8005030 <PDEBUG>
	HAL_Delay(500);
 80066c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80066cc:	f7fa fe21 	bl	8001312 <HAL_Delay>
 80066d0:	e731      	b.n	8006536 <main+0x6a>
	if((flag & 0x40) == 0) continue;
 80066d2:	bf00      	nop
 80066d4:	e72f      	b.n	8006536 <main+0x6a>
	if((flag & 0x40) == 0) continue;
 80066d6:	bf00      	nop
 80066d8:	e72d      	b.n	8006536 <main+0x6a>
	if((flag & 0x40) == 0) continue;
 80066da:	bf00      	nop
  {
 80066dc:	e72b      	b.n	8006536 <main+0x6a>
 80066de:	bf00      	nop
 80066e0:	20001628 	.word	0x20001628
 80066e4:	0800624d 	.word	0x0800624d
 80066e8:	0800634d 	.word	0x0800634d
 80066ec:	20001648 	.word	0x20001648
 80066f0:	080062cd 	.word	0x080062cd
 80066f4:	080063c5 	.word	0x080063c5
 80066f8:	08013ecc 	.word	0x08013ecc
 80066fc:	08013ed0 	.word	0x08013ed0
 8006700:	08013f04 	.word	0x08013f04
 8006704:	08013f38 	.word	0x08013f38

08006708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b09a      	sub	sp, #104	; 0x68
 800670c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800670e:	f107 0320 	add.w	r3, r7, #32
 8006712:	2248      	movs	r2, #72	; 0x48
 8006714:	2100      	movs	r1, #0
 8006716:	4618      	mov	r0, r3
 8006718:	f009 fee2 	bl	80104e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800671c:	1d3b      	adds	r3, r7, #4
 800671e:	2200      	movs	r2, #0
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	605a      	str	r2, [r3, #4]
 8006724:	609a      	str	r2, [r3, #8]
 8006726:	60da      	str	r2, [r3, #12]
 8006728:	611a      	str	r2, [r3, #16]
 800672a:	615a      	str	r2, [r3, #20]
 800672c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800672e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800673e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f023 0303 	bic.w	r3, r3, #3
 8006748:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800674c:	f043 0301 	orr.w	r3, r3, #1
 8006750:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8006752:	f001 fe27 	bl	80083a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8006756:	2010      	movs	r0, #16
 8006758:	f7ff fe70 	bl	800643c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800675c:	4b29      	ldr	r3, [pc, #164]	; (8006804 <SystemClock_Config+0xfc>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006764:	4a27      	ldr	r2, [pc, #156]	; (8006804 <SystemClock_Config+0xfc>)
 8006766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800676a:	6013      	str	r3, [r2, #0]
 800676c:	4b25      	ldr	r3, [pc, #148]	; (8006804 <SystemClock_Config+0xfc>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006774:	603b      	str	r3, [r7, #0]
 8006776:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8006778:	232f      	movs	r3, #47	; 0x2f
 800677a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800677c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006780:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006782:	2301      	movs	r3, #1
 8006784:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006786:	f44f 7380 	mov.w	r3, #256	; 0x100
 800678a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800678c:	2301      	movs	r3, #1
 800678e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006790:	2340      	movs	r3, #64	; 0x40
 8006792:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8006794:	2300      	movs	r3, #0
 8006796:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8006798:	2360      	movs	r3, #96	; 0x60
 800679a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800679c:	2305      	movs	r3, #5
 800679e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80067a0:	2300      	movs	r3, #0
 80067a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80067a4:	f107 0320 	add.w	r3, r7, #32
 80067a8:	4618      	mov	r0, r3
 80067aa:	f002 f9a5 	bl	8008af8 <HAL_RCC_OscConfig>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d001      	beq.n	80067b8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80067b4:	f000 f9e2 	bl	8006b7c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80067b8:	236f      	movs	r3, #111	; 0x6f
 80067ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80067bc:	2302      	movs	r3, #2
 80067be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80067c0:	2300      	movs	r3, #0
 80067c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80067c4:	2300      	movs	r3, #0
 80067c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80067c8:	2300      	movs	r3, #0
 80067ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80067cc:	2300      	movs	r3, #0
 80067ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80067d0:	2300      	movs	r3, #0
 80067d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80067d4:	1d3b      	adds	r3, r7, #4
 80067d6:	2101      	movs	r1, #1
 80067d8:	4618      	mov	r0, r3
 80067da:	f002 fd01 	bl	80091e0 <HAL_RCC_ClockConfig>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80067e4:	f000 f9ca 	bl	8006b7c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80067e8:	2200      	movs	r2, #0
 80067ea:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80067ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 80067f2:	f002 fe35 	bl	8009460 <HAL_RCC_MCOConfig>

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80067f6:	f003 fb07 	bl	8009e08 <HAL_RCCEx_EnableMSIPLLMode>
}
 80067fa:	bf00      	nop
 80067fc:	3768      	adds	r7, #104	; 0x68
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	58000400 	.word	0x58000400

08006808 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b094      	sub	sp, #80	; 0x50
 800680c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800680e:	463b      	mov	r3, r7
 8006810:	2250      	movs	r2, #80	; 0x50
 8006812:	2100      	movs	r1, #0
 8006814:	4618      	mov	r0, r3
 8006816:	f009 fe63 	bl	80104e0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800681a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800681e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8006820:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006824:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8006826:	2300      	movs	r3, #0
 8006828:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800682a:	2300      	movs	r3, #0
 800682c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800682e:	463b      	mov	r3, r7
 8006830:	4618      	mov	r0, r3
 8006832:	f003 f973 	bl	8009b1c <HAL_RCCEx_PeriphCLKConfig>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800683c:	f000 f99e 	bl	8006b7c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8006840:	bf00      	nop
 8006842:	3750      	adds	r7, #80	; 0x50
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 800684c:	4b06      	ldr	r3, [pc, #24]	; (8006868 <MX_IPCC_Init+0x20>)
 800684e:	4a07      	ldr	r2, [pc, #28]	; (800686c <MX_IPCC_Init+0x24>)
 8006850:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8006852:	4805      	ldr	r0, [pc, #20]	; (8006868 <MX_IPCC_Init+0x20>)
 8006854:	f001 fc28 	bl	80080a8 <HAL_IPCC_Init>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d001      	beq.n	8006862 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800685e:	f000 f98d 	bl	8006b7c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8006862:	bf00      	nop
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	20001074 	.word	0x20001074
 800686c:	58000c00 	.word	0x58000c00

08006870 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8006870:	b480      	push	{r7}
 8006872:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8006874:	bf00      	nop
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
	...

08006880 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006884:	4b16      	ldr	r3, [pc, #88]	; (80068e0 <MX_RTC_Init+0x60>)
 8006886:	4a17      	ldr	r2, [pc, #92]	; (80068e4 <MX_RTC_Init+0x64>)
 8006888:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800688a:	4b15      	ldr	r3, [pc, #84]	; (80068e0 <MX_RTC_Init+0x60>)
 800688c:	2200      	movs	r2, #0
 800688e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8006890:	4b13      	ldr	r3, [pc, #76]	; (80068e0 <MX_RTC_Init+0x60>)
 8006892:	220f      	movs	r2, #15
 8006894:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8006896:	4b12      	ldr	r3, [pc, #72]	; (80068e0 <MX_RTC_Init+0x60>)
 8006898:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800689c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800689e:	4b10      	ldr	r3, [pc, #64]	; (80068e0 <MX_RTC_Init+0x60>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80068a4:	4b0e      	ldr	r3, [pc, #56]	; (80068e0 <MX_RTC_Init+0x60>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80068aa:	4b0d      	ldr	r3, [pc, #52]	; (80068e0 <MX_RTC_Init+0x60>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80068b0:	4b0b      	ldr	r3, [pc, #44]	; (80068e0 <MX_RTC_Init+0x60>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80068b6:	480a      	ldr	r0, [pc, #40]	; (80068e0 <MX_RTC_Init+0x60>)
 80068b8:	f003 fbbe 	bl	800a038 <HAL_RTC_Init>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80068c2:	f000 f95b 	bl	8006b7c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80068c6:	2200      	movs	r2, #0
 80068c8:	2100      	movs	r1, #0
 80068ca:	4805      	ldr	r0, [pc, #20]	; (80068e0 <MX_RTC_Init+0x60>)
 80068cc:	f003 fcb4 	bl	800a238 <HAL_RTCEx_SetWakeUpTimer_IT>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80068d6:	f000 f951 	bl	8006b7c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80068da:	bf00      	nop
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	200010b0 	.word	0x200010b0
 80068e4:	40002800 	.word	0x40002800

080068e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80068ec:	4b1b      	ldr	r3, [pc, #108]	; (800695c <MX_SPI1_Init+0x74>)
 80068ee:	4a1c      	ldr	r2, [pc, #112]	; (8006960 <MX_SPI1_Init+0x78>)
 80068f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80068f2:	4b1a      	ldr	r3, [pc, #104]	; (800695c <MX_SPI1_Init+0x74>)
 80068f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80068f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80068fa:	4b18      	ldr	r3, [pc, #96]	; (800695c <MX_SPI1_Init+0x74>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006900:	4b16      	ldr	r3, [pc, #88]	; (800695c <MX_SPI1_Init+0x74>)
 8006902:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006906:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006908:	4b14      	ldr	r3, [pc, #80]	; (800695c <MX_SPI1_Init+0x74>)
 800690a:	2200      	movs	r2, #0
 800690c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800690e:	4b13      	ldr	r3, [pc, #76]	; (800695c <MX_SPI1_Init+0x74>)
 8006910:	2200      	movs	r2, #0
 8006912:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006914:	4b11      	ldr	r3, [pc, #68]	; (800695c <MX_SPI1_Init+0x74>)
 8006916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800691a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800691c:	4b0f      	ldr	r3, [pc, #60]	; (800695c <MX_SPI1_Init+0x74>)
 800691e:	2210      	movs	r2, #16
 8006920:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006922:	4b0e      	ldr	r3, [pc, #56]	; (800695c <MX_SPI1_Init+0x74>)
 8006924:	2200      	movs	r2, #0
 8006926:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006928:	4b0c      	ldr	r3, [pc, #48]	; (800695c <MX_SPI1_Init+0x74>)
 800692a:	2200      	movs	r2, #0
 800692c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800692e:	4b0b      	ldr	r3, [pc, #44]	; (800695c <MX_SPI1_Init+0x74>)
 8006930:	2200      	movs	r2, #0
 8006932:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006934:	4b09      	ldr	r3, [pc, #36]	; (800695c <MX_SPI1_Init+0x74>)
 8006936:	2207      	movs	r2, #7
 8006938:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800693a:	4b08      	ldr	r3, [pc, #32]	; (800695c <MX_SPI1_Init+0x74>)
 800693c:	2200      	movs	r2, #0
 800693e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8006940:	4b06      	ldr	r3, [pc, #24]	; (800695c <MX_SPI1_Init+0x74>)
 8006942:	2200      	movs	r2, #0
 8006944:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006946:	4805      	ldr	r0, [pc, #20]	; (800695c <MX_SPI1_Init+0x74>)
 8006948:	f003 fd32 	bl	800a3b0 <HAL_SPI_Init>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8006952:	f000 f913 	bl	8006b7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006956:	bf00      	nop
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	200010d4 	.word	0x200010d4
 8006960:	40013000 	.word	0x40013000

08006964 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006968:	4b22      	ldr	r3, [pc, #136]	; (80069f4 <MX_USART1_UART_Init+0x90>)
 800696a:	4a23      	ldr	r2, [pc, #140]	; (80069f8 <MX_USART1_UART_Init+0x94>)
 800696c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800696e:	4b21      	ldr	r3, [pc, #132]	; (80069f4 <MX_USART1_UART_Init+0x90>)
 8006970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006974:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006976:	4b1f      	ldr	r3, [pc, #124]	; (80069f4 <MX_USART1_UART_Init+0x90>)
 8006978:	2200      	movs	r2, #0
 800697a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800697c:	4b1d      	ldr	r3, [pc, #116]	; (80069f4 <MX_USART1_UART_Init+0x90>)
 800697e:	2200      	movs	r2, #0
 8006980:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006982:	4b1c      	ldr	r3, [pc, #112]	; (80069f4 <MX_USART1_UART_Init+0x90>)
 8006984:	2200      	movs	r2, #0
 8006986:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006988:	4b1a      	ldr	r3, [pc, #104]	; (80069f4 <MX_USART1_UART_Init+0x90>)
 800698a:	220c      	movs	r2, #12
 800698c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800698e:	4b19      	ldr	r3, [pc, #100]	; (80069f4 <MX_USART1_UART_Init+0x90>)
 8006990:	2200      	movs	r2, #0
 8006992:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006994:	4b17      	ldr	r3, [pc, #92]	; (80069f4 <MX_USART1_UART_Init+0x90>)
 8006996:	2200      	movs	r2, #0
 8006998:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800699a:	4b16      	ldr	r3, [pc, #88]	; (80069f4 <MX_USART1_UART_Init+0x90>)
 800699c:	2200      	movs	r2, #0
 800699e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80069a0:	4b14      	ldr	r3, [pc, #80]	; (80069f4 <MX_USART1_UART_Init+0x90>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80069a6:	4b13      	ldr	r3, [pc, #76]	; (80069f4 <MX_USART1_UART_Init+0x90>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80069ac:	4811      	ldr	r0, [pc, #68]	; (80069f4 <MX_USART1_UART_Init+0x90>)
 80069ae:	f004 fbd1 	bl	800b154 <HAL_UART_Init>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d001      	beq.n	80069bc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80069b8:	f000 f8e0 	bl	8006b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80069bc:	2100      	movs	r1, #0
 80069be:	480d      	ldr	r0, [pc, #52]	; (80069f4 <MX_USART1_UART_Init+0x90>)
 80069c0:	f005 fcc9 	bl	800c356 <HAL_UARTEx_SetTxFifoThreshold>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80069ca:	f000 f8d7 	bl	8006b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80069ce:	2100      	movs	r1, #0
 80069d0:	4808      	ldr	r0, [pc, #32]	; (80069f4 <MX_USART1_UART_Init+0x90>)
 80069d2:	f005 fcfe 	bl	800c3d2 <HAL_UARTEx_SetRxFifoThreshold>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d001      	beq.n	80069e0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80069dc:	f000 f8ce 	bl	8006b7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80069e0:	4804      	ldr	r0, [pc, #16]	; (80069f4 <MX_USART1_UART_Init+0x90>)
 80069e2:	f005 fc7f 	bl	800c2e4 <HAL_UARTEx_DisableFifoMode>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80069ec:	f000 f8c6 	bl	8006b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80069f0:	bf00      	nop
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	200011f8 	.word	0x200011f8
 80069f8:	40013800 	.word	0x40013800

080069fc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8006a00:	4b10      	ldr	r3, [pc, #64]	; (8006a44 <MX_USB_PCD_Init+0x48>)
 8006a02:	4a11      	ldr	r2, [pc, #68]	; (8006a48 <MX_USB_PCD_Init+0x4c>)
 8006a04:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006a06:	4b0f      	ldr	r3, [pc, #60]	; (8006a44 <MX_USB_PCD_Init+0x48>)
 8006a08:	2208      	movs	r2, #8
 8006a0a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006a0c:	4b0d      	ldr	r3, [pc, #52]	; (8006a44 <MX_USB_PCD_Init+0x48>)
 8006a0e:	2202      	movs	r2, #2
 8006a10:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006a12:	4b0c      	ldr	r3, [pc, #48]	; (8006a44 <MX_USB_PCD_Init+0x48>)
 8006a14:	2202      	movs	r2, #2
 8006a16:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8006a18:	4b0a      	ldr	r3, [pc, #40]	; (8006a44 <MX_USB_PCD_Init+0x48>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006a1e:	4b09      	ldr	r3, [pc, #36]	; (8006a44 <MX_USB_PCD_Init+0x48>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006a24:	4b07      	ldr	r3, [pc, #28]	; (8006a44 <MX_USB_PCD_Init+0x48>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006a2a:	4b06      	ldr	r3, [pc, #24]	; (8006a44 <MX_USB_PCD_Init+0x48>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006a30:	4804      	ldr	r0, [pc, #16]	; (8006a44 <MX_USB_PCD_Init+0x48>)
 8006a32:	f001 fbbf 	bl	80081b4 <HAL_PCD_Init>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d001      	beq.n	8006a40 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8006a3c:	f000 f89e 	bl	8006b7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8006a40:	bf00      	nop
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	2000134c 	.word	0x2000134c
 8006a48:	40006800 	.word	0x40006800

08006a4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006a50:	2004      	movs	r0, #4
 8006a52:	f7ff fd09 	bl	8006468 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006a56:	2001      	movs	r0, #1
 8006a58:	f7ff fd06 	bl	8006468 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	2100      	movs	r1, #0
 8006a60:	200b      	movs	r0, #11
 8006a62:	f000 fe9c 	bl	800779e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006a66:	200b      	movs	r0, #11
 8006a68:	f000 feb3 	bl	80077d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	2100      	movs	r1, #0
 8006a70:	200c      	movs	r0, #12
 8006a72:	f000 fe94 	bl	800779e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8006a76:	200c      	movs	r0, #12
 8006a78:	f000 feab 	bl	80077d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	2100      	movs	r1, #0
 8006a80:	200d      	movs	r0, #13
 8006a82:	f000 fe8c 	bl	800779e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8006a86:	200d      	movs	r0, #13
 8006a88:	f000 fea3 	bl	80077d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	2100      	movs	r1, #0
 8006a90:	200e      	movs	r0, #14
 8006a92:	f000 fe84 	bl	800779e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8006a96:	200e      	movs	r0, #14
 8006a98:	f000 fe9b 	bl	80077d2 <HAL_NVIC_EnableIRQ>

}
 8006a9c:	bf00      	nop
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006aa6:	1d3b      	adds	r3, r7, #4
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	601a      	str	r2, [r3, #0]
 8006aac:	605a      	str	r2, [r3, #4]
 8006aae:	609a      	str	r2, [r3, #8]
 8006ab0:	60da      	str	r2, [r3, #12]
 8006ab2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ab4:	2004      	movs	r0, #4
 8006ab6:	f7ff fcf0 	bl	800649a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006aba:	2001      	movs	r0, #1
 8006abc:	f7ff fced 	bl	800649a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ac0:	2002      	movs	r0, #2
 8006ac2:	f7ff fcea 	bl	800649a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ac6:	2008      	movs	r0, #8
 8006ac8:	f7ff fce7 	bl	800649a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8006acc:	2200      	movs	r2, #0
 8006ace:	2130      	movs	r1, #48	; 0x30
 8006ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ad4:	f001 faac 	bl	8008030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8006ad8:	2200      	movs	r2, #0
 8006ada:	2123      	movs	r1, #35	; 0x23
 8006adc:	4824      	ldr	r0, [pc, #144]	; (8006b70 <MX_GPIO_Init+0xd0>)
 8006ade:	f001 faa7 	bl	8008030 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006ae2:	2330      	movs	r3, #48	; 0x30
 8006ae4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006aee:	2300      	movs	r3, #0
 8006af0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006af2:	1d3b      	adds	r3, r7, #4
 8006af4:	4619      	mov	r1, r3
 8006af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006afa:	f001 f929 	bl	8007d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b04:	2302      	movs	r3, #2
 8006b06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006b10:	2300      	movs	r3, #0
 8006b12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b14:	1d3b      	adds	r3, r7, #4
 8006b16:	4619      	mov	r1, r3
 8006b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b1c:	f001 f918 	bl	8007d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8006b20:	2310      	movs	r3, #16
 8006b22:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b24:	2300      	movs	r3, #0
 8006b26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006b2c:	1d3b      	adds	r3, r7, #4
 8006b2e:	4619      	mov	r1, r3
 8006b30:	4810      	ldr	r0, [pc, #64]	; (8006b74 <MX_GPIO_Init+0xd4>)
 8006b32:	f001 f90d 	bl	8007d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8006b36:	2323      	movs	r3, #35	; 0x23
 8006b38:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b42:	2300      	movs	r3, #0
 8006b44:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b46:	1d3b      	adds	r3, r7, #4
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4809      	ldr	r0, [pc, #36]	; (8006b70 <MX_GPIO_Init+0xd0>)
 8006b4c:	f001 f900 	bl	8007d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8006b50:	2303      	movs	r3, #3
 8006b52:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b54:	2300      	movs	r3, #0
 8006b56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b5c:	1d3b      	adds	r3, r7, #4
 8006b5e:	4619      	mov	r1, r3
 8006b60:	4805      	ldr	r0, [pc, #20]	; (8006b78 <MX_GPIO_Init+0xd8>)
 8006b62:	f001 f8f5 	bl	8007d50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006b66:	bf00      	nop
 8006b68:	3718      	adds	r7, #24
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	48000400 	.word	0x48000400
 8006b74:	48000800 	.word	0x48000800
 8006b78:	48000c00 	.word	0x48000c00

08006b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006b80:	b672      	cpsid	i
}
 8006b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006b84:	e7fe      	b.n	8006b84 <Error_Handler+0x8>

08006b86 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8006b86:	b480      	push	{r7}
 8006b88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8006b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006b9e:	bf00      	nop
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <LL_AHB2_GRP1_EnableClock>:
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4013      	ands	r3, r2
 8006bca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
}
 8006bce:	bf00      	nop
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b085      	sub	sp, #20
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006be6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006be8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bf6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
}
 8006c00:	bf00      	nop
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006c30:	68fb      	ldr	r3, [r7, #12]
}
 8006c32:	bf00      	nop
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b085      	sub	sp, #20
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8006c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006c4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c5a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4013      	ands	r3, r2
 8006c60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006c62:	68fb      	ldr	r3, [r7, #12]
}
 8006c64:	bf00      	nop
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8006c74:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006c78:	f7ff ffaf 	bl	8006bda <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	2100      	movs	r1, #0
 8006c80:	202e      	movs	r0, #46	; 0x2e
 8006c82:	f000 fd8c 	bl	800779e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8006c86:	202e      	movs	r0, #46	; 0x2e
 8006c88:	f000 fda3 	bl	80077d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006c8c:	bf00      	nop
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a0d      	ldr	r2, [pc, #52]	; (8006cd4 <HAL_IPCC_MspInit+0x44>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d113      	bne.n	8006cca <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8006ca2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006ca6:	f7ff ff98 	bl	8006bda <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8006caa:	2200      	movs	r2, #0
 8006cac:	2100      	movs	r1, #0
 8006cae:	202c      	movs	r0, #44	; 0x2c
 8006cb0:	f000 fd75 	bl	800779e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8006cb4:	202c      	movs	r0, #44	; 0x2c
 8006cb6:	f000 fd8c 	bl	80077d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8006cba:	2200      	movs	r2, #0
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	202d      	movs	r0, #45	; 0x2d
 8006cc0:	f000 fd6d 	bl	800779e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8006cc4:	202d      	movs	r0, #45	; 0x2d
 8006cc6:	f000 fd84 	bl	80077d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8006cca:	bf00      	nop
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	58000c00 	.word	0x58000c00

08006cd8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b096      	sub	sp, #88	; 0x58
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006ce0:	f107 0308 	add.w	r3, r7, #8
 8006ce4:	2250      	movs	r2, #80	; 0x50
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f009 fbf9 	bl	80104e0 <memset>
  if(hrtc->Instance==RTC)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a13      	ldr	r2, [pc, #76]	; (8006d40 <HAL_RTC_MspInit+0x68>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d11f      	bne.n	8006d38 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8006cf8:	f001 fb54 	bl	80083a4 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006cfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d00:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006d02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d06:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006d08:	f107 0308 	add.w	r3, r7, #8
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f002 ff05 	bl	8009b1c <HAL_RCCEx_PeriphCLKConfig>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d001      	beq.n	8006d1c <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8006d18:	f7ff ff30 	bl	8006b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006d1c:	f7ff ff33 	bl	8006b86 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8006d20:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006d24:	f7ff ff72 	bl	8006c0c <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8006d28:	2200      	movs	r2, #0
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	2003      	movs	r0, #3
 8006d2e:	f000 fd36 	bl	800779e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8006d32:	2003      	movs	r0, #3
 8006d34:	f000 fd4d 	bl	80077d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006d38:	bf00      	nop
 8006d3a:	3758      	adds	r7, #88	; 0x58
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	40002800 	.word	0x40002800

08006d44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b088      	sub	sp, #32
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d4c:	f107 030c 	add.w	r3, r7, #12
 8006d50:	2200      	movs	r2, #0
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	605a      	str	r2, [r3, #4]
 8006d56:	609a      	str	r2, [r3, #8]
 8006d58:	60da      	str	r2, [r3, #12]
 8006d5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a3c      	ldr	r2, [pc, #240]	; (8006e54 <HAL_SPI_MspInit+0x110>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d171      	bne.n	8006e4a <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006d66:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006d6a:	f7ff ff68 	bl	8006c3e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d6e:	2001      	movs	r0, #1
 8006d70:	f7ff ff1a 	bl	8006ba8 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8006d74:	23c2      	movs	r3, #194	; 0xc2
 8006d76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d78:	2302      	movs	r3, #2
 8006d7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d80:	2300      	movs	r3, #0
 8006d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006d84:	2305      	movs	r3, #5
 8006d86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d88:	f107 030c 	add.w	r3, r7, #12
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d92:	f000 ffdd 	bl	8007d50 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8006d96:	4b30      	ldr	r3, [pc, #192]	; (8006e58 <HAL_SPI_MspInit+0x114>)
 8006d98:	4a30      	ldr	r2, [pc, #192]	; (8006e5c <HAL_SPI_MspInit+0x118>)
 8006d9a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8006d9c:	4b2e      	ldr	r3, [pc, #184]	; (8006e58 <HAL_SPI_MspInit+0x114>)
 8006d9e:	2206      	movs	r2, #6
 8006da0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006da2:	4b2d      	ldr	r3, [pc, #180]	; (8006e58 <HAL_SPI_MspInit+0x114>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006da8:	4b2b      	ldr	r3, [pc, #172]	; (8006e58 <HAL_SPI_MspInit+0x114>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006dae:	4b2a      	ldr	r3, [pc, #168]	; (8006e58 <HAL_SPI_MspInit+0x114>)
 8006db0:	2280      	movs	r2, #128	; 0x80
 8006db2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006db4:	4b28      	ldr	r3, [pc, #160]	; (8006e58 <HAL_SPI_MspInit+0x114>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006dba:	4b27      	ldr	r3, [pc, #156]	; (8006e58 <HAL_SPI_MspInit+0x114>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8006dc0:	4b25      	ldr	r3, [pc, #148]	; (8006e58 <HAL_SPI_MspInit+0x114>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006dc6:	4b24      	ldr	r3, [pc, #144]	; (8006e58 <HAL_SPI_MspInit+0x114>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8006dcc:	4822      	ldr	r0, [pc, #136]	; (8006e58 <HAL_SPI_MspInit+0x114>)
 8006dce:	f000 fd45 	bl	800785c <HAL_DMA_Init>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d001      	beq.n	8006ddc <HAL_SPI_MspInit+0x98>
    {
      Error_Handler();
 8006dd8:	f7ff fed0 	bl	8006b7c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a1e      	ldr	r2, [pc, #120]	; (8006e58 <HAL_SPI_MspInit+0x114>)
 8006de0:	659a      	str	r2, [r3, #88]	; 0x58
 8006de2:	4a1d      	ldr	r2, [pc, #116]	; (8006e58 <HAL_SPI_MspInit+0x114>)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel4;
 8006de8:	4b1d      	ldr	r3, [pc, #116]	; (8006e60 <HAL_SPI_MspInit+0x11c>)
 8006dea:	4a1e      	ldr	r2, [pc, #120]	; (8006e64 <HAL_SPI_MspInit+0x120>)
 8006dec:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8006dee:	4b1c      	ldr	r3, [pc, #112]	; (8006e60 <HAL_SPI_MspInit+0x11c>)
 8006df0:	2207      	movs	r2, #7
 8006df2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006df4:	4b1a      	ldr	r3, [pc, #104]	; (8006e60 <HAL_SPI_MspInit+0x11c>)
 8006df6:	2210      	movs	r2, #16
 8006df8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006dfa:	4b19      	ldr	r3, [pc, #100]	; (8006e60 <HAL_SPI_MspInit+0x11c>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006e00:	4b17      	ldr	r3, [pc, #92]	; (8006e60 <HAL_SPI_MspInit+0x11c>)
 8006e02:	2280      	movs	r2, #128	; 0x80
 8006e04:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006e06:	4b16      	ldr	r3, [pc, #88]	; (8006e60 <HAL_SPI_MspInit+0x11c>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006e0c:	4b14      	ldr	r3, [pc, #80]	; (8006e60 <HAL_SPI_MspInit+0x11c>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8006e12:	4b13      	ldr	r3, [pc, #76]	; (8006e60 <HAL_SPI_MspInit+0x11c>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006e18:	4b11      	ldr	r3, [pc, #68]	; (8006e60 <HAL_SPI_MspInit+0x11c>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8006e1e:	4810      	ldr	r0, [pc, #64]	; (8006e60 <HAL_SPI_MspInit+0x11c>)
 8006e20:	f000 fd1c 	bl	800785c <HAL_DMA_Init>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d001      	beq.n	8006e2e <HAL_SPI_MspInit+0xea>
    {
      Error_Handler();
 8006e2a:	f7ff fea7 	bl	8006b7c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a0b      	ldr	r2, [pc, #44]	; (8006e60 <HAL_SPI_MspInit+0x11c>)
 8006e32:	655a      	str	r2, [r3, #84]	; 0x54
 8006e34:	4a0a      	ldr	r2, [pc, #40]	; (8006e60 <HAL_SPI_MspInit+0x11c>)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	2022      	movs	r0, #34	; 0x22
 8006e40:	f000 fcad 	bl	800779e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8006e44:	2022      	movs	r0, #34	; 0x22
 8006e46:	f000 fcc4 	bl	80077d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006e4a:	bf00      	nop
 8006e4c:	3720      	adds	r7, #32
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	40013000 	.word	0x40013000
 8006e58:	20001138 	.word	0x20001138
 8006e5c:	40020030 	.word	0x40020030
 8006e60:	20001198 	.word	0x20001198
 8006e64:	40020044 	.word	0x40020044

08006e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b09c      	sub	sp, #112	; 0x70
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e70:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006e74:	2200      	movs	r2, #0
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	605a      	str	r2, [r3, #4]
 8006e7a:	609a      	str	r2, [r3, #8]
 8006e7c:	60da      	str	r2, [r3, #12]
 8006e7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006e80:	f107 030c 	add.w	r3, r7, #12
 8006e84:	2250      	movs	r2, #80	; 0x50
 8006e86:	2100      	movs	r1, #0
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f009 fb29 	bl	80104e0 <memset>
  if(huart->Instance==USART1)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a43      	ldr	r2, [pc, #268]	; (8006fa0 <HAL_UART_MspInit+0x138>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d17f      	bne.n	8006f98 <HAL_UART_MspInit+0x130>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006ea0:	f107 030c 	add.w	r3, r7, #12
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f002 fe39 	bl	8009b1c <HAL_RCCEx_PeriphCLKConfig>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d001      	beq.n	8006eb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006eb0:	f7ff fe64 	bl	8006b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006eb4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006eb8:	f7ff fec1 	bl	8006c3e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ebc:	2002      	movs	r0, #2
 8006ebe:	f7ff fe73 	bl	8006ba8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8006ec2:	23c0      	movs	r3, #192	; 0xc0
 8006ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006ed2:	2307      	movs	r3, #7
 8006ed4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ed6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006eda:	4619      	mov	r1, r3
 8006edc:	4831      	ldr	r0, [pc, #196]	; (8006fa4 <HAL_UART_MspInit+0x13c>)
 8006ede:	f000 ff37 	bl	8007d50 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8006ee2:	4b31      	ldr	r3, [pc, #196]	; (8006fa8 <HAL_UART_MspInit+0x140>)
 8006ee4:	4a31      	ldr	r2, [pc, #196]	; (8006fac <HAL_UART_MspInit+0x144>)
 8006ee6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8006ee8:	4b2f      	ldr	r3, [pc, #188]	; (8006fa8 <HAL_UART_MspInit+0x140>)
 8006eea:	220e      	movs	r2, #14
 8006eec:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006eee:	4b2e      	ldr	r3, [pc, #184]	; (8006fa8 <HAL_UART_MspInit+0x140>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ef4:	4b2c      	ldr	r3, [pc, #176]	; (8006fa8 <HAL_UART_MspInit+0x140>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006efa:	4b2b      	ldr	r3, [pc, #172]	; (8006fa8 <HAL_UART_MspInit+0x140>)
 8006efc:	2280      	movs	r2, #128	; 0x80
 8006efe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f00:	4b29      	ldr	r3, [pc, #164]	; (8006fa8 <HAL_UART_MspInit+0x140>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f06:	4b28      	ldr	r3, [pc, #160]	; (8006fa8 <HAL_UART_MspInit+0x140>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006f0c:	4b26      	ldr	r3, [pc, #152]	; (8006fa8 <HAL_UART_MspInit+0x140>)
 8006f0e:	2200      	movs	r2, #0
 8006f10:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006f12:	4b25      	ldr	r3, [pc, #148]	; (8006fa8 <HAL_UART_MspInit+0x140>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006f18:	4823      	ldr	r0, [pc, #140]	; (8006fa8 <HAL_UART_MspInit+0x140>)
 8006f1a:	f000 fc9f 	bl	800785c <HAL_DMA_Init>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8006f24:	f7ff fe2a 	bl	8006b7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a1f      	ldr	r2, [pc, #124]	; (8006fa8 <HAL_UART_MspInit+0x140>)
 8006f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006f30:	4a1d      	ldr	r2, [pc, #116]	; (8006fa8 <HAL_UART_MspInit+0x140>)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8006f36:	4b1e      	ldr	r3, [pc, #120]	; (8006fb0 <HAL_UART_MspInit+0x148>)
 8006f38:	4a1e      	ldr	r2, [pc, #120]	; (8006fb4 <HAL_UART_MspInit+0x14c>)
 8006f3a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8006f3c:	4b1c      	ldr	r3, [pc, #112]	; (8006fb0 <HAL_UART_MspInit+0x148>)
 8006f3e:	220f      	movs	r2, #15
 8006f40:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006f42:	4b1b      	ldr	r3, [pc, #108]	; (8006fb0 <HAL_UART_MspInit+0x148>)
 8006f44:	2210      	movs	r2, #16
 8006f46:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f48:	4b19      	ldr	r3, [pc, #100]	; (8006fb0 <HAL_UART_MspInit+0x148>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006f4e:	4b18      	ldr	r3, [pc, #96]	; (8006fb0 <HAL_UART_MspInit+0x148>)
 8006f50:	2280      	movs	r2, #128	; 0x80
 8006f52:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f54:	4b16      	ldr	r3, [pc, #88]	; (8006fb0 <HAL_UART_MspInit+0x148>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f5a:	4b15      	ldr	r3, [pc, #84]	; (8006fb0 <HAL_UART_MspInit+0x148>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006f60:	4b13      	ldr	r3, [pc, #76]	; (8006fb0 <HAL_UART_MspInit+0x148>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006f66:	4b12      	ldr	r3, [pc, #72]	; (8006fb0 <HAL_UART_MspInit+0x148>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006f6c:	4810      	ldr	r0, [pc, #64]	; (8006fb0 <HAL_UART_MspInit+0x148>)
 8006f6e:	f000 fc75 	bl	800785c <HAL_DMA_Init>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8006f78:	f7ff fe00 	bl	8006b7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a0c      	ldr	r2, [pc, #48]	; (8006fb0 <HAL_UART_MspInit+0x148>)
 8006f80:	67da      	str	r2, [r3, #124]	; 0x7c
 8006f82:	4a0b      	ldr	r2, [pc, #44]	; (8006fb0 <HAL_UART_MspInit+0x148>)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006f88:	2200      	movs	r2, #0
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	2024      	movs	r0, #36	; 0x24
 8006f8e:	f000 fc06 	bl	800779e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006f92:	2024      	movs	r0, #36	; 0x24
 8006f94:	f000 fc1d 	bl	80077d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006f98:	bf00      	nop
 8006f9a:	3770      	adds	r7, #112	; 0x70
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	40013800 	.word	0x40013800
 8006fa4:	48000400 	.word	0x48000400
 8006fa8:	2000128c 	.word	0x2000128c
 8006fac:	40020008 	.word	0x40020008
 8006fb0:	200012ec 	.word	0x200012ec
 8006fb4:	4002001c 	.word	0x4002001c

08006fb8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b09c      	sub	sp, #112	; 0x70
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fc0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	601a      	str	r2, [r3, #0]
 8006fc8:	605a      	str	r2, [r3, #4]
 8006fca:	609a      	str	r2, [r3, #8]
 8006fcc:	60da      	str	r2, [r3, #12]
 8006fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006fd0:	f107 030c 	add.w	r3, r7, #12
 8006fd4:	2250      	movs	r2, #80	; 0x50
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f009 fa81 	bl	80104e0 <memset>
  if(hpcd->Instance==USB)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a1f      	ldr	r2, [pc, #124]	; (8007060 <HAL_PCD_MspInit+0xa8>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d136      	bne.n	8007056 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8006fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fec:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8006fee:	2318      	movs	r3, #24
 8006ff0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8006ff2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ff6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8006ff8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ffc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8006ffe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007002:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8007004:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007008:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800700a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800700e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007010:	f107 030c 	add.w	r3, r7, #12
 8007014:	4618      	mov	r0, r3
 8007016:	f002 fd81 	bl	8009b1c <HAL_RCCEx_PeriphCLKConfig>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d001      	beq.n	8007024 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8007020:	f7ff fdac 	bl	8006b7c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007024:	2001      	movs	r0, #1
 8007026:	f7ff fdbf 	bl	8006ba8 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800702a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800702e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007030:	2302      	movs	r3, #2
 8007032:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007034:	2300      	movs	r3, #0
 8007036:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007038:	2300      	movs	r3, #0
 800703a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800703c:	230a      	movs	r3, #10
 800703e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007040:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007044:	4619      	mov	r1, r3
 8007046:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800704a:	f000 fe81 	bl	8007d50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800704e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007052:	f7ff fddb 	bl	8006c0c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8007056:	bf00      	nop
 8007058:	3770      	adds	r7, #112	; 0x70
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	40006800 	.word	0x40006800

08007064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007064:	b480      	push	{r7}
 8007066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007068:	e7fe      	b.n	8007068 <NMI_Handler+0x4>

0800706a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800706a:	b480      	push	{r7}
 800706c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800706e:	e7fe      	b.n	800706e <HardFault_Handler+0x4>

08007070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007070:	b480      	push	{r7}
 8007072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007074:	e7fe      	b.n	8007074 <MemManage_Handler+0x4>

08007076 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007076:	b480      	push	{r7}
 8007078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800707a:	e7fe      	b.n	800707a <BusFault_Handler+0x4>

0800707c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800707c:	b480      	push	{r7}
 800707e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007080:	e7fe      	b.n	8007080 <UsageFault_Handler+0x4>

08007082 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007082:	b480      	push	{r7}
 8007084:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007086:	bf00      	nop
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007090:	b480      	push	{r7}
 8007092:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007094:	bf00      	nop
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800709e:	b480      	push	{r7}
 80070a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80070a2:	bf00      	nop
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80070b0:	f000 fa02 	bl	80074b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80070b4:	bf00      	nop
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80070bc:	f7fe fd92 	bl	8005be4 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80070c0:	bf00      	nop
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80070c8:	4802      	ldr	r0, [pc, #8]	; (80070d4 <DMA1_Channel1_IRQHandler+0x10>)
 80070ca:	f000 fd2d 	bl	8007b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80070ce:	bf00      	nop
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	2000128c 	.word	0x2000128c

080070d8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80070dc:	4802      	ldr	r0, [pc, #8]	; (80070e8 <DMA1_Channel2_IRQHandler+0x10>)
 80070de:	f000 fd23 	bl	8007b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80070e2:	bf00      	nop
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	200012ec 	.word	0x200012ec

080070ec <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80070f0:	4802      	ldr	r0, [pc, #8]	; (80070fc <DMA1_Channel3_IRQHandler+0x10>)
 80070f2:	f000 fd19 	bl	8007b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80070f6:	bf00      	nop
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	20001138 	.word	0x20001138

08007100 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8007104:	4802      	ldr	r0, [pc, #8]	; (8007110 <DMA1_Channel4_IRQHandler+0x10>)
 8007106:	f000 fd0f 	bl	8007b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800710a:	bf00      	nop
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	20001198 	.word	0x20001198

08007114 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8007118:	4802      	ldr	r0, [pc, #8]	; (8007124 <SPI1_IRQHandler+0x10>)
 800711a:	f003 fd83 	bl	800ac24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800711e:	bf00      	nop
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	200010d4 	.word	0x200010d4

08007128 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800712c:	4802      	ldr	r0, [pc, #8]	; (8007138 <USART1_IRQHandler+0x10>)
 800712e:	f004 f8ef 	bl	800b310 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007132:	bf00      	nop
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	200011f8 	.word	0x200011f8

0800713c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8007140:	f008 f86c 	bl	800f21c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8007144:	bf00      	nop
 8007146:	bd80      	pop	{r7, pc}

08007148 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800714c:	f008 f89c 	bl	800f288 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8007150:	bf00      	nop
 8007152:	bd80      	pop	{r7, pc}

08007154 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8007158:	f000 ff82 	bl	8008060 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800715c:	bf00      	nop
 800715e:	bd80      	pop	{r7, pc}

08007160 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
  return 1;
 8007164:	2301      	movs	r3, #1
}
 8007166:	4618      	mov	r0, r3
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <_kill>:

int _kill(int pid, int sig)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800717a:	f009 fa03 	bl	8010584 <__errno>
 800717e:	4603      	mov	r3, r0
 8007180:	2216      	movs	r2, #22
 8007182:	601a      	str	r2, [r3, #0]
  return -1;
 8007184:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007188:	4618      	mov	r0, r3
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <_exit>:

void _exit (int status)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007198:	f04f 31ff 	mov.w	r1, #4294967295
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7ff ffe7 	bl	8007170 <_kill>
  while (1) {}    /* Make sure we hang here */
 80071a2:	e7fe      	b.n	80071a2 <_exit+0x12>

080071a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071b0:	2300      	movs	r3, #0
 80071b2:	617b      	str	r3, [r7, #20]
 80071b4:	e00a      	b.n	80071cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80071b6:	f3af 8000 	nop.w
 80071ba:	4601      	mov	r1, r0
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	1c5a      	adds	r2, r3, #1
 80071c0:	60ba      	str	r2, [r7, #8]
 80071c2:	b2ca      	uxtb	r2, r1
 80071c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	3301      	adds	r3, #1
 80071ca:	617b      	str	r3, [r7, #20]
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	dbf0      	blt.n	80071b6 <_read+0x12>
  }

  return len;
 80071d4:	687b      	ldr	r3, [r7, #4]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3718      	adds	r7, #24
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b086      	sub	sp, #24
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	60f8      	str	r0, [r7, #12]
 80071e6:	60b9      	str	r1, [r7, #8]
 80071e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071ea:	2300      	movs	r3, #0
 80071ec:	617b      	str	r3, [r7, #20]
 80071ee:	e009      	b.n	8007204 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	1c5a      	adds	r2, r3, #1
 80071f4:	60ba      	str	r2, [r7, #8]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	3301      	adds	r3, #1
 8007202:	617b      	str	r3, [r7, #20]
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	429a      	cmp	r2, r3
 800720a:	dbf1      	blt.n	80071f0 <_write+0x12>
  }
  return len;
 800720c:	687b      	ldr	r3, [r7, #4]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <_close>:

int _close(int file)
{
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800721e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007222:	4618      	mov	r0, r3
 8007224:	370c      	adds	r7, #12
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800723e:	605a      	str	r2, [r3, #4]
  return 0;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	370c      	adds	r7, #12
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <_isatty>:

int _isatty(int file)
{
 800724e:	b480      	push	{r7}
 8007250:	b083      	sub	sp, #12
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007256:	2301      	movs	r3, #1
}
 8007258:	4618      	mov	r0, r3
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3714      	adds	r7, #20
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
	...

08007280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007288:	4a14      	ldr	r2, [pc, #80]	; (80072dc <_sbrk+0x5c>)
 800728a:	4b15      	ldr	r3, [pc, #84]	; (80072e0 <_sbrk+0x60>)
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007294:	4b13      	ldr	r3, [pc, #76]	; (80072e4 <_sbrk+0x64>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d102      	bne.n	80072a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800729c:	4b11      	ldr	r3, [pc, #68]	; (80072e4 <_sbrk+0x64>)
 800729e:	4a12      	ldr	r2, [pc, #72]	; (80072e8 <_sbrk+0x68>)
 80072a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80072a2:	4b10      	ldr	r3, [pc, #64]	; (80072e4 <_sbrk+0x64>)
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4413      	add	r3, r2
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d207      	bcs.n	80072c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80072b0:	f009 f968 	bl	8010584 <__errno>
 80072b4:	4603      	mov	r3, r0
 80072b6:	220c      	movs	r2, #12
 80072b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80072ba:	f04f 33ff 	mov.w	r3, #4294967295
 80072be:	e009      	b.n	80072d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80072c0:	4b08      	ldr	r3, [pc, #32]	; (80072e4 <_sbrk+0x64>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80072c6:	4b07      	ldr	r3, [pc, #28]	; (80072e4 <_sbrk+0x64>)
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4413      	add	r3, r2
 80072ce:	4a05      	ldr	r2, [pc, #20]	; (80072e4 <_sbrk+0x64>)
 80072d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80072d2:	68fb      	ldr	r3, [r7, #12]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3718      	adds	r7, #24
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	20030000 	.word	0x20030000
 80072e0:	00000400 	.word	0x00000400
 80072e4:	20001668 	.word	0x20001668
 80072e8:	20001970 	.word	0x20001970

080072ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80072ec:	b480      	push	{r7}
 80072ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80072f0:	4b24      	ldr	r3, [pc, #144]	; (8007384 <SystemInit+0x98>)
 80072f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f6:	4a23      	ldr	r2, [pc, #140]	; (8007384 <SystemInit+0x98>)
 80072f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800730a:	f043 0301 	orr.w	r3, r3, #1
 800730e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8007310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007314:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8007318:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800731a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007324:	4b18      	ldr	r3, [pc, #96]	; (8007388 <SystemInit+0x9c>)
 8007326:	4013      	ands	r3, r2
 8007328:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800732a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800732e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007332:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007336:	f023 0305 	bic.w	r3, r3, #5
 800733a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800733e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007342:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007346:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800734a:	f023 0301 	bic.w	r3, r3, #1
 800734e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8007352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007356:	4a0d      	ldr	r2, [pc, #52]	; (800738c <SystemInit+0xa0>)
 8007358:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800735a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800735e:	4a0b      	ldr	r2, [pc, #44]	; (800738c <SystemInit+0xa0>)
 8007360:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800736c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007370:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007376:	2200      	movs	r2, #0
 8007378:	619a      	str	r2, [r3, #24]
}
 800737a:	bf00      	nop
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr
 8007384:	e000ed00 	.word	0xe000ed00
 8007388:	faf6fefb 	.word	0xfaf6fefb
 800738c:	22041000 	.word	0x22041000

08007390 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8007390:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007392:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007394:	3304      	adds	r3, #4

08007396 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007396:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007398:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800739a:	d3f9      	bcc.n	8007390 <CopyDataInit>
  bx lr
 800739c:	4770      	bx	lr

0800739e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800739e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80073a0:	3004      	adds	r0, #4

080073a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80073a2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80073a4:	d3fb      	bcc.n	800739e <FillZerobss>
  bx lr
 80073a6:	4770      	bx	lr

080073a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80073a8:	480c      	ldr	r0, [pc, #48]	; (80073dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80073aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80073ac:	f7ff ff9e 	bl	80072ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80073b0:	480b      	ldr	r0, [pc, #44]	; (80073e0 <LoopForever+0x6>)
 80073b2:	490c      	ldr	r1, [pc, #48]	; (80073e4 <LoopForever+0xa>)
 80073b4:	4a0c      	ldr	r2, [pc, #48]	; (80073e8 <LoopForever+0xe>)
 80073b6:	2300      	movs	r3, #0
 80073b8:	f7ff ffed 	bl	8007396 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80073bc:	480b      	ldr	r0, [pc, #44]	; (80073ec <LoopForever+0x12>)
 80073be:	490c      	ldr	r1, [pc, #48]	; (80073f0 <LoopForever+0x16>)
 80073c0:	4a0c      	ldr	r2, [pc, #48]	; (80073f4 <LoopForever+0x1a>)
 80073c2:	2300      	movs	r3, #0
 80073c4:	f7ff ffe7 	bl	8007396 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80073c8:	480b      	ldr	r0, [pc, #44]	; (80073f8 <LoopForever+0x1e>)
 80073ca:	490c      	ldr	r1, [pc, #48]	; (80073fc <LoopForever+0x22>)
 80073cc:	2300      	movs	r3, #0
 80073ce:	f7ff ffe8 	bl	80073a2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80073d2:	f009 f8dd 	bl	8010590 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80073d6:	f7ff f879 	bl	80064cc <main>

080073da <LoopForever>:

LoopForever:
  b LoopForever
 80073da:	e7fe      	b.n	80073da <LoopForever>
  ldr   r0, =_estack
 80073dc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80073e0:	20000008 	.word	0x20000008
 80073e4:	20000350 	.word	0x20000350
 80073e8:	08014598 	.word	0x08014598
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80073ec:	200301e4 	.word	0x200301e4
 80073f0:	20030a67 	.word	0x20030a67
 80073f4:	0801492e 	.word	0x0801492e
  INIT_BSS _sbss, _ebss
 80073f8:	200003a4 	.word	0x200003a4
 80073fc:	20001970 	.word	0x20001970

08007400 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007400:	e7fe      	b.n	8007400 <ADC1_IRQHandler>
	...

08007404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800740e:	4b0c      	ldr	r3, [pc, #48]	; (8007440 <HAL_Init+0x3c>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a0b      	ldr	r2, [pc, #44]	; (8007440 <HAL_Init+0x3c>)
 8007414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007418:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800741a:	2003      	movs	r0, #3
 800741c:	f000 f9b4 	bl	8007788 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007420:	2000      	movs	r0, #0
 8007422:	f000 f80f 	bl	8007444 <HAL_InitTick>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	71fb      	strb	r3, [r7, #7]
 8007430:	e001      	b.n	8007436 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007432:	f7ff fc1d 	bl	8006c70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007436:	79fb      	ldrb	r3, [r7, #7]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	58004000 	.word	0x58004000

08007444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800744c:	2300      	movs	r3, #0
 800744e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8007450:	4b17      	ldr	r3, [pc, #92]	; (80074b0 <HAL_InitTick+0x6c>)
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d024      	beq.n	80074a2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8007458:	f002 f8c0 	bl	80095dc <HAL_RCC_GetHCLKFreq>
 800745c:	4602      	mov	r2, r0
 800745e:	4b14      	ldr	r3, [pc, #80]	; (80074b0 <HAL_InitTick+0x6c>)
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	4619      	mov	r1, r3
 8007464:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007468:	fbb3 f3f1 	udiv	r3, r3, r1
 800746c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007470:	4618      	mov	r0, r3
 8007472:	f000 f9ca 	bl	800780a <HAL_SYSTICK_Config>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10f      	bne.n	800749c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b0f      	cmp	r3, #15
 8007480:	d809      	bhi.n	8007496 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007482:	2200      	movs	r2, #0
 8007484:	6879      	ldr	r1, [r7, #4]
 8007486:	f04f 30ff 	mov.w	r0, #4294967295
 800748a:	f000 f988 	bl	800779e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800748e:	4a09      	ldr	r2, [pc, #36]	; (80074b4 <HAL_InitTick+0x70>)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6013      	str	r3, [r2, #0]
 8007494:	e007      	b.n	80074a6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	73fb      	strb	r3, [r7, #15]
 800749a:	e004      	b.n	80074a6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	73fb      	strb	r3, [r7, #15]
 80074a0:	e001      	b.n	80074a6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80074a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	2000015c 	.word	0x2000015c
 80074b4:	20000158 	.word	0x20000158

080074b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80074b8:	b480      	push	{r7}
 80074ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80074bc:	4b06      	ldr	r3, [pc, #24]	; (80074d8 <HAL_IncTick+0x20>)
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	461a      	mov	r2, r3
 80074c2:	4b06      	ldr	r3, [pc, #24]	; (80074dc <HAL_IncTick+0x24>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4413      	add	r3, r2
 80074c8:	4a04      	ldr	r2, [pc, #16]	; (80074dc <HAL_IncTick+0x24>)
 80074ca:	6013      	str	r3, [r2, #0]
}
 80074cc:	bf00      	nop
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	2000015c 	.word	0x2000015c
 80074dc:	2000166c 	.word	0x2000166c

080074e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80074e0:	b480      	push	{r7}
 80074e2:	af00      	add	r7, sp, #0
  return uwTick;
 80074e4:	4b03      	ldr	r3, [pc, #12]	; (80074f4 <HAL_GetTick+0x14>)
 80074e6:	681b      	ldr	r3, [r3, #0]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	2000166c 	.word	0x2000166c

080074f8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80074f8:	b480      	push	{r7}
 80074fa:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80074fc:	4b03      	ldr	r3, [pc, #12]	; (800750c <HAL_GetTickPrio+0x14>)
 80074fe:	681b      	ldr	r3, [r3, #0]
}
 8007500:	4618      	mov	r0, r3
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	20000158 	.word	0x20000158

08007510 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8007510:	b480      	push	{r7}
 8007512:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8007514:	4b03      	ldr	r3, [pc, #12]	; (8007524 <HAL_GetTickFreq+0x14>)
 8007516:	781b      	ldrb	r3, [r3, #0]
}
 8007518:	4618      	mov	r0, r3
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	2000015c 	.word	0x2000015c

08007528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f003 0307 	and.w	r3, r3, #7
 8007536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007538:	4b0c      	ldr	r3, [pc, #48]	; (800756c <__NVIC_SetPriorityGrouping+0x44>)
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007544:	4013      	ands	r3, r2
 8007546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800755a:	4a04      	ldr	r2, [pc, #16]	; (800756c <__NVIC_SetPriorityGrouping+0x44>)
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	60d3      	str	r3, [r2, #12]
}
 8007560:	bf00      	nop
 8007562:	3714      	adds	r7, #20
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	e000ed00 	.word	0xe000ed00

08007570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007570:	b480      	push	{r7}
 8007572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007574:	4b04      	ldr	r3, [pc, #16]	; (8007588 <__NVIC_GetPriorityGrouping+0x18>)
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	0a1b      	lsrs	r3, r3, #8
 800757a:	f003 0307 	and.w	r3, r3, #7
}
 800757e:	4618      	mov	r0, r3
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr
 8007588:	e000ed00 	.word	0xe000ed00

0800758c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	4603      	mov	r3, r0
 8007594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800759a:	2b00      	cmp	r3, #0
 800759c:	db0b      	blt.n	80075b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800759e:	79fb      	ldrb	r3, [r7, #7]
 80075a0:	f003 021f 	and.w	r2, r3, #31
 80075a4:	4907      	ldr	r1, [pc, #28]	; (80075c4 <__NVIC_EnableIRQ+0x38>)
 80075a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075aa:	095b      	lsrs	r3, r3, #5
 80075ac:	2001      	movs	r0, #1
 80075ae:	fa00 f202 	lsl.w	r2, r0, r2
 80075b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80075b6:	bf00      	nop
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	e000e100 	.word	0xe000e100

080075c8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	4603      	mov	r3, r0
 80075d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	db12      	blt.n	8007600 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80075da:	79fb      	ldrb	r3, [r7, #7]
 80075dc:	f003 021f 	and.w	r2, r3, #31
 80075e0:	490a      	ldr	r1, [pc, #40]	; (800760c <__NVIC_DisableIRQ+0x44>)
 80075e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075e6:	095b      	lsrs	r3, r3, #5
 80075e8:	2001      	movs	r0, #1
 80075ea:	fa00 f202 	lsl.w	r2, r0, r2
 80075ee:	3320      	adds	r3, #32
 80075f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80075f4:	f3bf 8f4f 	dsb	sy
}
 80075f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80075fa:	f3bf 8f6f 	isb	sy
}
 80075fe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	e000e100 	.word	0xe000e100

08007610 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	4603      	mov	r3, r0
 8007618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800761a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800761e:	2b00      	cmp	r3, #0
 8007620:	db0c      	blt.n	800763c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007622:	79fb      	ldrb	r3, [r7, #7]
 8007624:	f003 021f 	and.w	r2, r3, #31
 8007628:	4907      	ldr	r1, [pc, #28]	; (8007648 <__NVIC_SetPendingIRQ+0x38>)
 800762a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800762e:	095b      	lsrs	r3, r3, #5
 8007630:	2001      	movs	r0, #1
 8007632:	fa00 f202 	lsl.w	r2, r0, r2
 8007636:	3340      	adds	r3, #64	; 0x40
 8007638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	e000e100 	.word	0xe000e100

0800764c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	4603      	mov	r3, r0
 8007654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800765a:	2b00      	cmp	r3, #0
 800765c:	db0c      	blt.n	8007678 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800765e:	79fb      	ldrb	r3, [r7, #7]
 8007660:	f003 021f 	and.w	r2, r3, #31
 8007664:	4907      	ldr	r1, [pc, #28]	; (8007684 <__NVIC_ClearPendingIRQ+0x38>)
 8007666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800766a:	095b      	lsrs	r3, r3, #5
 800766c:	2001      	movs	r0, #1
 800766e:	fa00 f202 	lsl.w	r2, r0, r2
 8007672:	3360      	adds	r3, #96	; 0x60
 8007674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	e000e100 	.word	0xe000e100

08007688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	4603      	mov	r3, r0
 8007690:	6039      	str	r1, [r7, #0]
 8007692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007698:	2b00      	cmp	r3, #0
 800769a:	db0a      	blt.n	80076b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	490c      	ldr	r1, [pc, #48]	; (80076d4 <__NVIC_SetPriority+0x4c>)
 80076a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076a6:	0112      	lsls	r2, r2, #4
 80076a8:	b2d2      	uxtb	r2, r2
 80076aa:	440b      	add	r3, r1
 80076ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80076b0:	e00a      	b.n	80076c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	b2da      	uxtb	r2, r3
 80076b6:	4908      	ldr	r1, [pc, #32]	; (80076d8 <__NVIC_SetPriority+0x50>)
 80076b8:	79fb      	ldrb	r3, [r7, #7]
 80076ba:	f003 030f 	and.w	r3, r3, #15
 80076be:	3b04      	subs	r3, #4
 80076c0:	0112      	lsls	r2, r2, #4
 80076c2:	b2d2      	uxtb	r2, r2
 80076c4:	440b      	add	r3, r1
 80076c6:	761a      	strb	r2, [r3, #24]
}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr
 80076d4:	e000e100 	.word	0xe000e100
 80076d8:	e000ed00 	.word	0xe000ed00

080076dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80076dc:	b480      	push	{r7}
 80076de:	b089      	sub	sp, #36	; 0x24
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f003 0307 	and.w	r3, r3, #7
 80076ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	f1c3 0307 	rsb	r3, r3, #7
 80076f6:	2b04      	cmp	r3, #4
 80076f8:	bf28      	it	cs
 80076fa:	2304      	movcs	r3, #4
 80076fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	3304      	adds	r3, #4
 8007702:	2b06      	cmp	r3, #6
 8007704:	d902      	bls.n	800770c <NVIC_EncodePriority+0x30>
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	3b03      	subs	r3, #3
 800770a:	e000      	b.n	800770e <NVIC_EncodePriority+0x32>
 800770c:	2300      	movs	r3, #0
 800770e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007710:	f04f 32ff 	mov.w	r2, #4294967295
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	fa02 f303 	lsl.w	r3, r2, r3
 800771a:	43da      	mvns	r2, r3
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	401a      	ands	r2, r3
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007724:	f04f 31ff 	mov.w	r1, #4294967295
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	fa01 f303 	lsl.w	r3, r1, r3
 800772e:	43d9      	mvns	r1, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007734:	4313      	orrs	r3, r2
         );
}
 8007736:	4618      	mov	r0, r3
 8007738:	3724      	adds	r7, #36	; 0x24
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
	...

08007744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	3b01      	subs	r3, #1
 8007750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007754:	d301      	bcc.n	800775a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007756:	2301      	movs	r3, #1
 8007758:	e00f      	b.n	800777a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800775a:	4a0a      	ldr	r2, [pc, #40]	; (8007784 <SysTick_Config+0x40>)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	3b01      	subs	r3, #1
 8007760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007762:	210f      	movs	r1, #15
 8007764:	f04f 30ff 	mov.w	r0, #4294967295
 8007768:	f7ff ff8e 	bl	8007688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800776c:	4b05      	ldr	r3, [pc, #20]	; (8007784 <SysTick_Config+0x40>)
 800776e:	2200      	movs	r2, #0
 8007770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007772:	4b04      	ldr	r3, [pc, #16]	; (8007784 <SysTick_Config+0x40>)
 8007774:	2207      	movs	r2, #7
 8007776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	e000e010 	.word	0xe000e010

08007788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f7ff fec9 	bl	8007528 <__NVIC_SetPriorityGrouping>
}
 8007796:	bf00      	nop
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b086      	sub	sp, #24
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	4603      	mov	r3, r0
 80077a6:	60b9      	str	r1, [r7, #8]
 80077a8:	607a      	str	r2, [r7, #4]
 80077aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80077ac:	f7ff fee0 	bl	8007570 <__NVIC_GetPriorityGrouping>
 80077b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	68b9      	ldr	r1, [r7, #8]
 80077b6:	6978      	ldr	r0, [r7, #20]
 80077b8:	f7ff ff90 	bl	80076dc <NVIC_EncodePriority>
 80077bc:	4602      	mov	r2, r0
 80077be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077c2:	4611      	mov	r1, r2
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7ff ff5f 	bl	8007688 <__NVIC_SetPriority>
}
 80077ca:	bf00      	nop
 80077cc:	3718      	adds	r7, #24
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b082      	sub	sp, #8
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	4603      	mov	r3, r0
 80077da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80077dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7ff fed3 	bl	800758c <__NVIC_EnableIRQ>
}
 80077e6:	bf00      	nop
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b082      	sub	sp, #8
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	4603      	mov	r3, r0
 80077f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80077f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7ff fee3 	bl	80075c8 <__NVIC_DisableIRQ>
}
 8007802:	bf00      	nop
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b082      	sub	sp, #8
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7ff ff96 	bl	8007744 <SysTick_Config>
 8007818:	4603      	mov	r3, r0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b082      	sub	sp, #8
 8007826:	af00      	add	r7, sp, #0
 8007828:	4603      	mov	r3, r0
 800782a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800782c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007830:	4618      	mov	r0, r3
 8007832:	f7ff feed 	bl	8007610 <__NVIC_SetPendingIRQ>
}
 8007836:	bf00      	nop
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b082      	sub	sp, #8
 8007842:	af00      	add	r7, sp, #0
 8007844:	4603      	mov	r3, r0
 8007846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800784c:	4618      	mov	r0, r3
 800784e:	f7ff fefd 	bl	800764c <__NVIC_ClearPendingIRQ>
}
 8007852:	bf00      	nop
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
	...

0800785c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e08e      	b.n	800798c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	461a      	mov	r2, r3
 8007874:	4b47      	ldr	r3, [pc, #284]	; (8007994 <HAL_DMA_Init+0x138>)
 8007876:	429a      	cmp	r2, r3
 8007878:	d80f      	bhi.n	800789a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	461a      	mov	r2, r3
 8007880:	4b45      	ldr	r3, [pc, #276]	; (8007998 <HAL_DMA_Init+0x13c>)
 8007882:	4413      	add	r3, r2
 8007884:	4a45      	ldr	r2, [pc, #276]	; (800799c <HAL_DMA_Init+0x140>)
 8007886:	fba2 2303 	umull	r2, r3, r2, r3
 800788a:	091b      	lsrs	r3, r3, #4
 800788c:	009a      	lsls	r2, r3, #2
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a42      	ldr	r2, [pc, #264]	; (80079a0 <HAL_DMA_Init+0x144>)
 8007896:	641a      	str	r2, [r3, #64]	; 0x40
 8007898:	e00e      	b.n	80078b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	461a      	mov	r2, r3
 80078a0:	4b40      	ldr	r3, [pc, #256]	; (80079a4 <HAL_DMA_Init+0x148>)
 80078a2:	4413      	add	r3, r2
 80078a4:	4a3d      	ldr	r2, [pc, #244]	; (800799c <HAL_DMA_Init+0x140>)
 80078a6:	fba2 2303 	umull	r2, r3, r2, r3
 80078aa:	091b      	lsrs	r3, r3, #4
 80078ac:	009a      	lsls	r2, r3, #2
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a3c      	ldr	r2, [pc, #240]	; (80079a8 <HAL_DMA_Init+0x14c>)
 80078b6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2202      	movs	r2, #2
 80078bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80078ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80078dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80078e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80078f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a1b      	ldr	r3, [r3, #32]
 80078fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	4313      	orrs	r3, r2
 8007900:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f9bc 	bl	8007c88 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007918:	d102      	bne.n	8007920 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685a      	ldr	r2, [r3, #4]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007928:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800792c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007936:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d010      	beq.n	8007962 <HAL_DMA_Init+0x106>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	2b04      	cmp	r3, #4
 8007946:	d80c      	bhi.n	8007962 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f9db 	bl	8007d04 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800795e:	605a      	str	r2, [r3, #4]
 8007960:	e008      	b.n	8007974 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	40020407 	.word	0x40020407
 8007998:	bffdfff8 	.word	0xbffdfff8
 800799c:	cccccccd 	.word	0xcccccccd
 80079a0:	40020000 	.word	0x40020000
 80079a4:	bffdfbf8 	.word	0xbffdfbf8
 80079a8:	40020400 	.word	0x40020400

080079ac <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d101      	bne.n	80079be <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e04f      	b.n	8007a5e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d008      	beq.n	80079dc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2204      	movs	r2, #4
 80079ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e040      	b.n	8007a5e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f022 020e 	bic.w	r2, r2, #14
 80079ea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f022 0201 	bic.w	r2, r2, #1
 8007a0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a10:	f003 021c 	and.w	r2, r3, #28
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a18:	2101      	movs	r1, #1
 8007a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8007a1e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007a28:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00c      	beq.n	8007a4c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a40:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007a4a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	370c      	adds	r7, #12
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr

08007a6a <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b084      	sub	sp, #16
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d005      	beq.n	8007a8e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2204      	movs	r2, #4
 8007a86:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	73fb      	strb	r3, [r7, #15]
 8007a8c:	e047      	b.n	8007b1e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f022 020e 	bic.w	r2, r2, #14
 8007a9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f022 0201 	bic.w	r2, r2, #1
 8007aac:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ab8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007abc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ac2:	f003 021c 	and.w	r2, r3, #28
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aca:	2101      	movs	r1, #1
 8007acc:	fa01 f202 	lsl.w	r2, r1, r2
 8007ad0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007ada:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00c      	beq.n	8007afe <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007af2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007afc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d003      	beq.n	8007b1e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	4798      	blx	r3
    }
  }
  return status;
 8007b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b44:	f003 031c 	and.w	r3, r3, #28
 8007b48:	2204      	movs	r2, #4
 8007b4a:	409a      	lsls	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	4013      	ands	r3, r2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d026      	beq.n	8007ba2 <HAL_DMA_IRQHandler+0x7a>
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	f003 0304 	and.w	r3, r3, #4
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d021      	beq.n	8007ba2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0320 	and.w	r3, r3, #32
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d107      	bne.n	8007b7c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f022 0204 	bic.w	r2, r2, #4
 8007b7a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b80:	f003 021c 	and.w	r2, r3, #28
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b88:	2104      	movs	r1, #4
 8007b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8007b8e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d071      	beq.n	8007c7c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007ba0:	e06c      	b.n	8007c7c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba6:	f003 031c 	and.w	r3, r3, #28
 8007baa:	2202      	movs	r2, #2
 8007bac:	409a      	lsls	r2, r3
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d02e      	beq.n	8007c14 <HAL_DMA_IRQHandler+0xec>
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	f003 0302 	and.w	r3, r3, #2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d029      	beq.n	8007c14 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0320 	and.w	r3, r3, #32
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d10b      	bne.n	8007be6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f022 020a 	bic.w	r2, r2, #10
 8007bdc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bea:	f003 021c 	and.w	r2, r3, #28
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf2:	2102      	movs	r1, #2
 8007bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8007bf8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d038      	beq.n	8007c7c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007c12:	e033      	b.n	8007c7c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c18:	f003 031c 	and.w	r3, r3, #28
 8007c1c:	2208      	movs	r2, #8
 8007c1e:	409a      	lsls	r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	4013      	ands	r3, r2
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d02a      	beq.n	8007c7e <HAL_DMA_IRQHandler+0x156>
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	f003 0308 	and.w	r3, r3, #8
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d025      	beq.n	8007c7e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f022 020e 	bic.w	r2, r2, #14
 8007c40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c46:	f003 021c 	and.w	r2, r3, #28
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4e:	2101      	movs	r1, #1
 8007c50:	fa01 f202 	lsl.w	r2, r1, r2
 8007c54:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d004      	beq.n	8007c7e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007c7c:	bf00      	nop
 8007c7e:	bf00      	nop
}
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
	...

08007c88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	461a      	mov	r2, r3
 8007c96:	4b17      	ldr	r3, [pc, #92]	; (8007cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d80a      	bhi.n	8007cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ca0:	089b      	lsrs	r3, r3, #2
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007ca8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	6493      	str	r3, [r2, #72]	; 0x48
 8007cb0:	e007      	b.n	8007cc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb6:	089b      	lsrs	r3, r3, #2
 8007cb8:	009a      	lsls	r2, r3, #2
 8007cba:	4b0f      	ldr	r3, [pc, #60]	; (8007cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007cbc:	4413      	add	r3, r2
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	3b08      	subs	r3, #8
 8007cca:	4a0c      	ldr	r2, [pc, #48]	; (8007cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd0:	091b      	lsrs	r3, r3, #4
 8007cd2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a0a      	ldr	r2, [pc, #40]	; (8007d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007cd8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f003 031f 	and.w	r3, r3, #31
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	409a      	lsls	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007ce8:	bf00      	nop
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr
 8007cf4:	40020407 	.word	0x40020407
 8007cf8:	4002081c 	.word	0x4002081c
 8007cfc:	cccccccd 	.word	0xcccccccd
 8007d00:	40020880 	.word	0x40020880

08007d04 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d14:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	4b0b      	ldr	r3, [pc, #44]	; (8007d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007d1a:	4413      	add	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	461a      	mov	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a09      	ldr	r2, [pc, #36]	; (8007d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8007d28:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	f003 0303 	and.w	r3, r3, #3
 8007d32:	2201      	movs	r2, #1
 8007d34:	409a      	lsls	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007d3a:	bf00      	nop
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	1000823f 	.word	0x1000823f
 8007d4c:	40020940 	.word	0x40020940

08007d50 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b087      	sub	sp, #28
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007d5e:	e14c      	b.n	8007ffa <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	2101      	movs	r1, #1
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	fa01 f303 	lsl.w	r3, r1, r3
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f000 813e 	beq.w	8007ff4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f003 0303 	and.w	r3, r3, #3
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d005      	beq.n	8007d90 <HAL_GPIO_Init+0x40>
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f003 0303 	and.w	r3, r3, #3
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d130      	bne.n	8007df2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	2203      	movs	r2, #3
 8007d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007da0:	43db      	mvns	r3, r3
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	4013      	ands	r3, r2
 8007da6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	68da      	ldr	r2, [r3, #12]
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	005b      	lsls	r3, r3, #1
 8007db0:	fa02 f303 	lsl.w	r3, r2, r3
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	693a      	ldr	r2, [r7, #16]
 8007dbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	fa02 f303 	lsl.w	r3, r2, r3
 8007dce:	43db      	mvns	r3, r3
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	091b      	lsrs	r3, r3, #4
 8007ddc:	f003 0201 	and.w	r2, r3, #1
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	fa02 f303 	lsl.w	r3, r2, r3
 8007de6:	693a      	ldr	r2, [r7, #16]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	f003 0303 	and.w	r3, r3, #3
 8007dfa:	2b03      	cmp	r3, #3
 8007dfc:	d017      	beq.n	8007e2e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	005b      	lsls	r3, r3, #1
 8007e08:	2203      	movs	r2, #3
 8007e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0e:	43db      	mvns	r3, r3
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	4013      	ands	r3, r2
 8007e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	689a      	ldr	r2, [r3, #8]
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	005b      	lsls	r3, r3, #1
 8007e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e22:	693a      	ldr	r2, [r7, #16]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	693a      	ldr	r2, [r7, #16]
 8007e2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	f003 0303 	and.w	r3, r3, #3
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d123      	bne.n	8007e82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	08da      	lsrs	r2, r3, #3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3208      	adds	r2, #8
 8007e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	f003 0307 	and.w	r3, r3, #7
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	220f      	movs	r2, #15
 8007e52:	fa02 f303 	lsl.w	r3, r2, r3
 8007e56:	43db      	mvns	r3, r3
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	4013      	ands	r3, r2
 8007e5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	691a      	ldr	r2, [r3, #16]
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f003 0307 	and.w	r3, r3, #7
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	08da      	lsrs	r2, r3, #3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	3208      	adds	r2, #8
 8007e7c:	6939      	ldr	r1, [r7, #16]
 8007e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	005b      	lsls	r3, r3, #1
 8007e8c:	2203      	movs	r2, #3
 8007e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e92:	43db      	mvns	r3, r3
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	4013      	ands	r3, r2
 8007e98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	f003 0203 	and.w	r2, r3, #3
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	005b      	lsls	r3, r3, #1
 8007ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f000 8098 	beq.w	8007ff4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8007ec4:	4a54      	ldr	r2, [pc, #336]	; (8008018 <HAL_GPIO_Init+0x2c8>)
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	089b      	lsrs	r3, r3, #2
 8007eca:	3302      	adds	r3, #2
 8007ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f003 0303 	and.w	r3, r3, #3
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	220f      	movs	r2, #15
 8007edc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee0:	43db      	mvns	r3, r3
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007eee:	d019      	beq.n	8007f24 <HAL_GPIO_Init+0x1d4>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a4a      	ldr	r2, [pc, #296]	; (800801c <HAL_GPIO_Init+0x2cc>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d013      	beq.n	8007f20 <HAL_GPIO_Init+0x1d0>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a49      	ldr	r2, [pc, #292]	; (8008020 <HAL_GPIO_Init+0x2d0>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d00d      	beq.n	8007f1c <HAL_GPIO_Init+0x1cc>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a48      	ldr	r2, [pc, #288]	; (8008024 <HAL_GPIO_Init+0x2d4>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d007      	beq.n	8007f18 <HAL_GPIO_Init+0x1c8>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a47      	ldr	r2, [pc, #284]	; (8008028 <HAL_GPIO_Init+0x2d8>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d101      	bne.n	8007f14 <HAL_GPIO_Init+0x1c4>
 8007f10:	2304      	movs	r3, #4
 8007f12:	e008      	b.n	8007f26 <HAL_GPIO_Init+0x1d6>
 8007f14:	2307      	movs	r3, #7
 8007f16:	e006      	b.n	8007f26 <HAL_GPIO_Init+0x1d6>
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e004      	b.n	8007f26 <HAL_GPIO_Init+0x1d6>
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	e002      	b.n	8007f26 <HAL_GPIO_Init+0x1d6>
 8007f20:	2301      	movs	r3, #1
 8007f22:	e000      	b.n	8007f26 <HAL_GPIO_Init+0x1d6>
 8007f24:	2300      	movs	r3, #0
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	f002 0203 	and.w	r2, r2, #3
 8007f2c:	0092      	lsls	r2, r2, #2
 8007f2e:	4093      	lsls	r3, r2
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007f36:	4938      	ldr	r1, [pc, #224]	; (8008018 <HAL_GPIO_Init+0x2c8>)
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	089b      	lsrs	r3, r3, #2
 8007f3c:	3302      	adds	r3, #2
 8007f3e:	693a      	ldr	r2, [r7, #16]
 8007f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f44:	4b39      	ldr	r3, [pc, #228]	; (800802c <HAL_GPIO_Init+0x2dc>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	43db      	mvns	r3, r3
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	4013      	ands	r3, r2
 8007f52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d003      	beq.n	8007f68 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8007f60:	693a      	ldr	r2, [r7, #16]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007f68:	4a30      	ldr	r2, [pc, #192]	; (800802c <HAL_GPIO_Init+0x2dc>)
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007f6e:	4b2f      	ldr	r3, [pc, #188]	; (800802c <HAL_GPIO_Init+0x2dc>)
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	43db      	mvns	r3, r3
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d003      	beq.n	8007f92 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8007f8a:	693a      	ldr	r2, [r7, #16]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007f92:	4a26      	ldr	r2, [pc, #152]	; (800802c <HAL_GPIO_Init+0x2dc>)
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007f98:	4b24      	ldr	r3, [pc, #144]	; (800802c <HAL_GPIO_Init+0x2dc>)
 8007f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	43db      	mvns	r3, r3
 8007fa4:	693a      	ldr	r2, [r7, #16]
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8007fb6:	693a      	ldr	r2, [r7, #16]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007fbe:	4a1b      	ldr	r2, [pc, #108]	; (800802c <HAL_GPIO_Init+0x2dc>)
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8007fc6:	4b19      	ldr	r3, [pc, #100]	; (800802c <HAL_GPIO_Init+0x2dc>)
 8007fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	43db      	mvns	r3, r3
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d003      	beq.n	8007fec <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007fec:	4a0f      	ldr	r2, [pc, #60]	; (800802c <HAL_GPIO_Init+0x2dc>)
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	fa22 f303 	lsr.w	r3, r2, r3
 8008004:	2b00      	cmp	r3, #0
 8008006:	f47f aeab 	bne.w	8007d60 <HAL_GPIO_Init+0x10>
  }
}
 800800a:	bf00      	nop
 800800c:	bf00      	nop
 800800e:	371c      	adds	r7, #28
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	40010000 	.word	0x40010000
 800801c:	48000400 	.word	0x48000400
 8008020:	48000800 	.word	0x48000800
 8008024:	48000c00 	.word	0x48000c00
 8008028:	48001000 	.word	0x48001000
 800802c:	58000800 	.word	0x58000800

08008030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	460b      	mov	r3, r1
 800803a:	807b      	strh	r3, [r7, #2]
 800803c:	4613      	mov	r3, r2
 800803e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008040:	787b      	ldrb	r3, [r7, #1]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008046:	887a      	ldrh	r2, [r7, #2]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800804c:	e002      	b.n	8008054 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800804e:	887a      	ldrh	r2, [r7, #2]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008054:	bf00      	nop
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8008066:	4b0a      	ldr	r3, [pc, #40]	; (8008090 <HAL_HSEM_IRQHandler+0x30>)
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800806c:	4b08      	ldr	r3, [pc, #32]	; (8008090 <HAL_HSEM_IRQHandler+0x30>)
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	43db      	mvns	r3, r3
 8008074:	4906      	ldr	r1, [pc, #24]	; (8008090 <HAL_HSEM_IRQHandler+0x30>)
 8008076:	4013      	ands	r3, r2
 8008078:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800807a:	4a05      	ldr	r2, [pc, #20]	; (8008090 <HAL_HSEM_IRQHandler+0x30>)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 f807 	bl	8008094 <HAL_HSEM_FreeCallback>
}
 8008086:	bf00      	nop
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	58001500 	.word	0x58001500

08008094 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80080b0:	2300      	movs	r3, #0
 80080b2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d01e      	beq.n	80080f8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80080ba:	4b13      	ldr	r3, [pc, #76]	; (8008108 <HAL_IPCC_Init+0x60>)
 80080bc:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d102      	bne.n	80080d0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f7fe fde0 	bl	8006c90 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80080d0:	68b8      	ldr	r0, [r7, #8]
 80080d2:	f000 f85b 	bl	800818c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f82c 	bl	8008140 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80080f6:	e001      	b.n	80080fc <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	58000c00 	.word	0x58000c00

0800810c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	4613      	mov	r3, r2
 8008118:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800811a:	bf00      	nop
 800811c:	3714      	adds	r7, #20
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8008126:	b480      	push	{r7}
 8008128:	b085      	sub	sp, #20
 800812a:	af00      	add	r7, sp, #0
 800812c:	60f8      	str	r0, [r7, #12]
 800812e:	60b9      	str	r1, [r7, #8]
 8008130:	4613      	mov	r3, r2
 8008132:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8008134:	bf00      	nop
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8008148:	2300      	movs	r3, #0
 800814a:	60fb      	str	r3, [r7, #12]
 800814c:	e00f      	b.n	800816e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4413      	add	r3, r2
 8008156:	4a0b      	ldr	r2, [pc, #44]	; (8008184 <IPCC_SetDefaultCallbacks+0x44>)
 8008158:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	3306      	adds	r3, #6
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	4a08      	ldr	r2, [pc, #32]	; (8008188 <IPCC_SetDefaultCallbacks+0x48>)
 8008166:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	3301      	adds	r3, #1
 800816c:	60fb      	str	r3, [r7, #12]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2b05      	cmp	r3, #5
 8008172:	d9ec      	bls.n	800814e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8008174:	bf00      	nop
 8008176:	bf00      	nop
 8008178:	3714      	adds	r7, #20
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	0800810d 	.word	0x0800810d
 8008188:	08008127 	.word	0x08008127

0800818c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80081a0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	223f      	movs	r2, #63	; 0x3f
 80081a6:	609a      	str	r2, [r3, #8]
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d101      	bne.n	80081c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e0c0      	b.n	8008348 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d106      	bne.n	80081e0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7fe feec 	bl	8006fb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2203      	movs	r2, #3
 80081e4:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f004 f97d 	bl	800c4ec <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80081f2:	2300      	movs	r3, #0
 80081f4:	73fb      	strb	r3, [r7, #15]
 80081f6:	e03e      	b.n	8008276 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80081f8:	7bfa      	ldrb	r2, [r7, #15]
 80081fa:	6879      	ldr	r1, [r7, #4]
 80081fc:	4613      	mov	r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	4413      	add	r3, r2
 8008202:	00db      	lsls	r3, r3, #3
 8008204:	440b      	add	r3, r1
 8008206:	3311      	adds	r3, #17
 8008208:	2201      	movs	r2, #1
 800820a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800820c:	7bfa      	ldrb	r2, [r7, #15]
 800820e:	6879      	ldr	r1, [r7, #4]
 8008210:	4613      	mov	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4413      	add	r3, r2
 8008216:	00db      	lsls	r3, r3, #3
 8008218:	440b      	add	r3, r1
 800821a:	3310      	adds	r3, #16
 800821c:	7bfa      	ldrb	r2, [r7, #15]
 800821e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008220:	7bfa      	ldrb	r2, [r7, #15]
 8008222:	6879      	ldr	r1, [r7, #4]
 8008224:	4613      	mov	r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4413      	add	r3, r2
 800822a:	00db      	lsls	r3, r3, #3
 800822c:	440b      	add	r3, r1
 800822e:	3313      	adds	r3, #19
 8008230:	2200      	movs	r2, #0
 8008232:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008234:	7bfa      	ldrb	r2, [r7, #15]
 8008236:	6879      	ldr	r1, [r7, #4]
 8008238:	4613      	mov	r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4413      	add	r3, r2
 800823e:	00db      	lsls	r3, r3, #3
 8008240:	440b      	add	r3, r1
 8008242:	3320      	adds	r3, #32
 8008244:	2200      	movs	r2, #0
 8008246:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008248:	7bfa      	ldrb	r2, [r7, #15]
 800824a:	6879      	ldr	r1, [r7, #4]
 800824c:	4613      	mov	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	00db      	lsls	r3, r3, #3
 8008254:	440b      	add	r3, r1
 8008256:	3324      	adds	r3, #36	; 0x24
 8008258:	2200      	movs	r2, #0
 800825a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800825c:	7bfb      	ldrb	r3, [r7, #15]
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	1c5a      	adds	r2, r3, #1
 8008262:	4613      	mov	r3, r2
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4413      	add	r3, r2
 8008268:	00db      	lsls	r3, r3, #3
 800826a:	440b      	add	r3, r1
 800826c:	2200      	movs	r2, #0
 800826e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008270:	7bfb      	ldrb	r3, [r7, #15]
 8008272:	3301      	adds	r3, #1
 8008274:	73fb      	strb	r3, [r7, #15]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	791b      	ldrb	r3, [r3, #4]
 800827a:	7bfa      	ldrb	r2, [r7, #15]
 800827c:	429a      	cmp	r2, r3
 800827e:	d3bb      	bcc.n	80081f8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008280:	2300      	movs	r3, #0
 8008282:	73fb      	strb	r3, [r7, #15]
 8008284:	e044      	b.n	8008310 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008286:	7bfa      	ldrb	r2, [r7, #15]
 8008288:	6879      	ldr	r1, [r7, #4]
 800828a:	4613      	mov	r3, r2
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	4413      	add	r3, r2
 8008290:	00db      	lsls	r3, r3, #3
 8008292:	440b      	add	r3, r1
 8008294:	f203 1351 	addw	r3, r3, #337	; 0x151
 8008298:	2200      	movs	r2, #0
 800829a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800829c:	7bfa      	ldrb	r2, [r7, #15]
 800829e:	6879      	ldr	r1, [r7, #4]
 80082a0:	4613      	mov	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	00db      	lsls	r3, r3, #3
 80082a8:	440b      	add	r3, r1
 80082aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082ae:	7bfa      	ldrb	r2, [r7, #15]
 80082b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80082b2:	7bfa      	ldrb	r2, [r7, #15]
 80082b4:	6879      	ldr	r1, [r7, #4]
 80082b6:	4613      	mov	r3, r2
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	4413      	add	r3, r2
 80082bc:	00db      	lsls	r3, r3, #3
 80082be:	440b      	add	r3, r1
 80082c0:	f203 1353 	addw	r3, r3, #339	; 0x153
 80082c4:	2200      	movs	r2, #0
 80082c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80082c8:	7bfa      	ldrb	r2, [r7, #15]
 80082ca:	6879      	ldr	r1, [r7, #4]
 80082cc:	4613      	mov	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	00db      	lsls	r3, r3, #3
 80082d4:	440b      	add	r3, r1
 80082d6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80082da:	2200      	movs	r2, #0
 80082dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80082de:	7bfa      	ldrb	r2, [r7, #15]
 80082e0:	6879      	ldr	r1, [r7, #4]
 80082e2:	4613      	mov	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	4413      	add	r3, r2
 80082e8:	00db      	lsls	r3, r3, #3
 80082ea:	440b      	add	r3, r1
 80082ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80082f0:	2200      	movs	r2, #0
 80082f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80082f4:	7bfa      	ldrb	r2, [r7, #15]
 80082f6:	6879      	ldr	r1, [r7, #4]
 80082f8:	4613      	mov	r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4413      	add	r3, r2
 80082fe:	00db      	lsls	r3, r3, #3
 8008300:	440b      	add	r3, r1
 8008302:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008306:	2200      	movs	r2, #0
 8008308:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800830a:	7bfb      	ldrb	r3, [r7, #15]
 800830c:	3301      	adds	r3, #1
 800830e:	73fb      	strb	r3, [r7, #15]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	791b      	ldrb	r3, [r3, #4]
 8008314:	7bfa      	ldrb	r2, [r7, #15]
 8008316:	429a      	cmp	r2, r3
 8008318:	d3b5      	bcc.n	8008286 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6818      	ldr	r0, [r3, #0]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	3304      	adds	r3, #4
 8008322:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008326:	f004 f8fc 	bl	800c522 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	7a9b      	ldrb	r3, [r3, #10]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d102      	bne.n	8008346 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 f805 	bl	8008350 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2201      	movs	r2, #1
 8008362:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008374:	b29b      	uxth	r3, r3
 8008376:	f043 0301 	orr.w	r3, r3, #1
 800837a:	b29a      	uxth	r2, r3
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008388:	b29b      	uxth	r3, r3
 800838a:	f043 0302 	orr.w	r3, r3, #2
 800838e:	b29a      	uxth	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3714      	adds	r7, #20
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80083a4:	b480      	push	{r7}
 80083a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083a8:	4b05      	ldr	r3, [pc, #20]	; (80083c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a04      	ldr	r2, [pc, #16]	; (80083c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80083ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083b2:	6013      	str	r3, [r2, #0]
}
 80083b4:	bf00      	nop
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	58000400 	.word	0x58000400

080083c4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80083c4:	b480      	push	{r7}
 80083c6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80083c8:	4b04      	ldr	r3, [pc, #16]	; (80083dc <HAL_PWREx_GetVoltageRange+0x18>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	58000400 	.word	0x58000400

080083e0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80083e0:	b480      	push	{r7}
 80083e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80083e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083f2:	d101      	bne.n	80083f8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80083f4:	2301      	movs	r3, #1
 80083f6:	e000      	b.n	80083fa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <LL_RCC_HSE_Enable>:
{
 8008404:	b480      	push	{r7}
 8008406:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8008408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008416:	6013      	str	r3, [r2, #0]
}
 8008418:	bf00      	nop
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <LL_RCC_HSE_Disable>:
{
 8008422:	b480      	push	{r7}
 8008424:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8008426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008434:	6013      	str	r3, [r2, #0]
}
 8008436:	bf00      	nop
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <LL_RCC_HSE_IsReady>:
{
 8008440:	b480      	push	{r7}
 8008442:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8008444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800844e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008452:	d101      	bne.n	8008458 <LL_RCC_HSE_IsReady+0x18>
 8008454:	2301      	movs	r3, #1
 8008456:	e000      	b.n	800845a <LL_RCC_HSE_IsReady+0x1a>
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <LL_RCC_HSI_Enable>:
{
 8008464:	b480      	push	{r7}
 8008466:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008476:	6013      	str	r3, [r2, #0]
}
 8008478:	bf00      	nop
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <LL_RCC_HSI_Disable>:
{
 8008482:	b480      	push	{r7}
 8008484:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8008486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008494:	6013      	str	r3, [r2, #0]
}
 8008496:	bf00      	nop
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <LL_RCC_HSI_IsReady>:
{
 80084a0:	b480      	push	{r7}
 80084a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80084a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084b2:	d101      	bne.n	80084b8 <LL_RCC_HSI_IsReady+0x18>
 80084b4:	2301      	movs	r3, #1
 80084b6:	e000      	b.n	80084ba <LL_RCC_HSI_IsReady+0x1a>
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <LL_RCC_HSI_SetCalibTrimming>:
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80084cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	061b      	lsls	r3, r3, #24
 80084da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80084de:	4313      	orrs	r3, r2
 80084e0:	604b      	str	r3, [r1, #4]
}
 80084e2:	bf00      	nop
 80084e4:	370c      	adds	r7, #12
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr

080084ee <LL_RCC_HSI48_Enable>:
{
 80084ee:	b480      	push	{r7}
 80084f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80084f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80084fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80084fe:	f043 0301 	orr.w	r3, r3, #1
 8008502:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8008506:	bf00      	nop
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <LL_RCC_HSI48_Disable>:
{
 8008510:	b480      	push	{r7}
 8008512:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8008514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008518:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800851c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008520:	f023 0301 	bic.w	r3, r3, #1
 8008524:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8008528:	bf00      	nop
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr

08008532 <LL_RCC_HSI48_IsReady>:
{
 8008532:	b480      	push	{r7}
 8008534:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8008536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800853a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800853e:	f003 0302 	and.w	r3, r3, #2
 8008542:	2b02      	cmp	r3, #2
 8008544:	d101      	bne.n	800854a <LL_RCC_HSI48_IsReady+0x18>
 8008546:	2301      	movs	r3, #1
 8008548:	e000      	b.n	800854c <LL_RCC_HSI48_IsReady+0x1a>
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <LL_RCC_LSE_Enable>:
{
 8008556:	b480      	push	{r7}
 8008558:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800855a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800855e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008562:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008566:	f043 0301 	orr.w	r3, r3, #1
 800856a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800856e:	bf00      	nop
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <LL_RCC_LSE_Disable>:
{
 8008578:	b480      	push	{r7}
 800857a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800857c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008584:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008588:	f023 0301 	bic.w	r3, r3, #1
 800858c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008590:	bf00      	nop
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr

0800859a <LL_RCC_LSE_EnableBypass>:
{
 800859a:	b480      	push	{r7}
 800859c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800859e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085aa:	f043 0304 	orr.w	r3, r3, #4
 80085ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80085b2:	bf00      	nop
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <LL_RCC_LSE_DisableBypass>:
{
 80085bc:	b480      	push	{r7}
 80085be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80085c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085cc:	f023 0304 	bic.w	r3, r3, #4
 80085d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80085d4:	bf00      	nop
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr

080085de <LL_RCC_LSE_IsReady>:
{
 80085de:	b480      	push	{r7}
 80085e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80085e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ea:	f003 0302 	and.w	r3, r3, #2
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d101      	bne.n	80085f6 <LL_RCC_LSE_IsReady+0x18>
 80085f2:	2301      	movs	r3, #1
 80085f4:	e000      	b.n	80085f8 <LL_RCC_LSE_IsReady+0x1a>
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <LL_RCC_LSI1_Enable>:
{
 8008602:	b480      	push	{r7}
 8008604:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8008606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800860a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800860e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008612:	f043 0301 	orr.w	r3, r3, #1
 8008616:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800861a:	bf00      	nop
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <LL_RCC_LSI1_Disable>:
{
 8008624:	b480      	push	{r7}
 8008626:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8008628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800862c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008630:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008634:	f023 0301 	bic.w	r3, r3, #1
 8008638:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800863c:	bf00      	nop
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr

08008646 <LL_RCC_LSI1_IsReady>:
{
 8008646:	b480      	push	{r7}
 8008648:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800864a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800864e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008652:	f003 0302 	and.w	r3, r3, #2
 8008656:	2b02      	cmp	r3, #2
 8008658:	d101      	bne.n	800865e <LL_RCC_LSI1_IsReady+0x18>
 800865a:	2301      	movs	r3, #1
 800865c:	e000      	b.n	8008660 <LL_RCC_LSI1_IsReady+0x1a>
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr

0800866a <LL_RCC_LSI2_Enable>:
{
 800866a:	b480      	push	{r7}
 800866c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800866e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008676:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800867a:	f043 0304 	orr.w	r3, r3, #4
 800867e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008682:	bf00      	nop
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <LL_RCC_LSI2_Disable>:
{
 800868c:	b480      	push	{r7}
 800868e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8008690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008698:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800869c:	f023 0304 	bic.w	r3, r3, #4
 80086a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80086a4:	bf00      	nop
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <LL_RCC_LSI2_IsReady>:
{
 80086ae:	b480      	push	{r7}
 80086b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80086b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086ba:	f003 0308 	and.w	r3, r3, #8
 80086be:	2b08      	cmp	r3, #8
 80086c0:	d101      	bne.n	80086c6 <LL_RCC_LSI2_IsReady+0x18>
 80086c2:	2301      	movs	r3, #1
 80086c4:	e000      	b.n	80086c8 <LL_RCC_LSI2_IsReady+0x1a>
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr

080086d2 <LL_RCC_LSI2_SetTrimming>:
{
 80086d2:	b480      	push	{r7}
 80086d4:	b083      	sub	sp, #12
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80086da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	021b      	lsls	r3, r3, #8
 80086ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80086ee:	4313      	orrs	r3, r2
 80086f0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80086f4:	bf00      	nop
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <LL_RCC_MSI_Enable>:
{
 8008700:	b480      	push	{r7}
 8008702:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8008704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800870e:	f043 0301 	orr.w	r3, r3, #1
 8008712:	6013      	str	r3, [r2, #0]
}
 8008714:	bf00      	nop
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <LL_RCC_MSI_Disable>:
{
 800871e:	b480      	push	{r7}
 8008720:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8008722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800872c:	f023 0301 	bic.w	r3, r3, #1
 8008730:	6013      	str	r3, [r2, #0]
}
 8008732:	bf00      	nop
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <LL_RCC_MSI_IsReady>:
{
 800873c:	b480      	push	{r7}
 800873e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8008740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f003 0302 	and.w	r3, r3, #2
 800874a:	2b02      	cmp	r3, #2
 800874c:	d101      	bne.n	8008752 <LL_RCC_MSI_IsReady+0x16>
 800874e:	2301      	movs	r3, #1
 8008750:	e000      	b.n	8008754 <LL_RCC_MSI_IsReady+0x18>
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <LL_RCC_MSI_SetRange>:
{
 800875e:	b480      	push	{r7}
 8008760:	b083      	sub	sp, #12
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8008766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008770:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4313      	orrs	r3, r2
 8008778:	600b      	str	r3, [r1, #0]
}
 800877a:	bf00      	nop
 800877c:	370c      	adds	r7, #12
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr

08008786 <LL_RCC_MSI_GetRange>:
{
 8008786:	b480      	push	{r7}
 8008788:	b083      	sub	sp, #12
 800878a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800878c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008796:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2bb0      	cmp	r3, #176	; 0xb0
 800879c:	d901      	bls.n	80087a2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800879e:	23b0      	movs	r3, #176	; 0xb0
 80087a0:	607b      	str	r3, [r7, #4]
  return msiRange;
 80087a2:	687b      	ldr	r3, [r7, #4]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80087b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	021b      	lsls	r3, r3, #8
 80087c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80087ca:	4313      	orrs	r3, r2
 80087cc:	604b      	str	r3, [r1, #4]
}
 80087ce:	bf00      	nop
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <LL_RCC_SetSysClkSource>:
{
 80087da:	b480      	push	{r7}
 80087dc:	b083      	sub	sp, #12
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80087e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	f023 0203 	bic.w	r2, r3, #3
 80087ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	608b      	str	r3, [r1, #8]
}
 80087f6:	bf00      	nop
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr

08008802 <LL_RCC_GetSysClkSource>:
{
 8008802:	b480      	push	{r7}
 8008804:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	f003 030c 	and.w	r3, r3, #12
}
 8008810:	4618      	mov	r0, r3
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr

0800881a <LL_RCC_SetAHBPrescaler>:
{
 800881a:	b480      	push	{r7}
 800881c:	b083      	sub	sp, #12
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8008822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800882c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4313      	orrs	r3, r2
 8008834:	608b      	str	r3, [r1, #8]
}
 8008836:	bf00      	nop
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <LL_C2_RCC_SetAHBPrescaler>:
{
 8008842:	b480      	push	{r7}
 8008844:	b083      	sub	sp, #12
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800884a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800884e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008852:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008856:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4313      	orrs	r3, r2
 800885e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8008862:	bf00      	nop
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr

0800886e <LL_RCC_SetAHB4Prescaler>:
{
 800886e:	b480      	push	{r7}
 8008870:	b083      	sub	sp, #12
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8008876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800887a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800887e:	f023 020f 	bic.w	r2, r3, #15
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	091b      	lsrs	r3, r3, #4
 8008886:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800888a:	4313      	orrs	r3, r2
 800888c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <LL_RCC_SetAPB1Prescaler>:
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80088a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80088ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	608b      	str	r3, [r1, #8]
}
 80088b8:	bf00      	nop
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <LL_RCC_SetAPB2Prescaler>:
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80088cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80088d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4313      	orrs	r3, r2
 80088de:	608b      	str	r3, [r1, #8]
}
 80088e0:	bf00      	nop
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <LL_RCC_GetAHBPrescaler>:
{
 80088ec:	b480      	push	{r7}
 80088ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80088f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <LL_RCC_GetAHB4Prescaler>:
{
 8008904:	b480      	push	{r7}
 8008906:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8008908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800890c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008910:	011b      	lsls	r3, r3, #4
 8008912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008916:	4618      	mov	r0, r3
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <LL_RCC_GetAPB1Prescaler>:
{
 8008920:	b480      	push	{r7}
 8008922:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800892e:	4618      	mov	r0, r3
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <LL_RCC_GetAPB2Prescaler>:
{
 8008938:	b480      	push	{r7}
 800893a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800893c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8008946:	4618      	mov	r0, r3
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <LL_RCC_ConfigMCO>:
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE, MCOxSource | MCOxPrescaler);
 800895a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008964:	6879      	ldr	r1, [r7, #4]
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	430b      	orrs	r3, r1
 800896a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800896e:	4313      	orrs	r3, r2
 8008970:	608b      	str	r3, [r1, #8]
}
 8008972:	bf00      	nop
 8008974:	370c      	adds	r7, #12
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800897e:	b480      	push	{r7}
 8008980:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800898c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008990:	6013      	str	r3, [r2, #0]
}
 8008992:	bf00      	nop
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800899c:	b480      	push	{r7}
 800899e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80089a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80089aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089ae:	6013      	str	r3, [r2, #0]
}
 80089b0:	bf00      	nop
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80089ba:	b480      	push	{r7}
 80089bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80089be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089cc:	d101      	bne.n	80089d2 <LL_RCC_PLL_IsReady+0x18>
 80089ce:	2301      	movs	r3, #1
 80089d0:	e000      	b.n	80089d4 <LL_RCC_PLL_IsReady+0x1a>
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr

080089de <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80089de:	b480      	push	{r7}
 80089e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80089e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	0a1b      	lsrs	r3, r3, #8
 80089ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80089f8:	b480      	push	{r7}
 80089fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80089fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8008a10:	b480      	push	{r7}
 8008a12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	f003 0303 	and.w	r3, r3, #3
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8008a40:	b480      	push	{r7}
 8008a42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8008a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a52:	d101      	bne.n	8008a58 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8008a54:	2301      	movs	r3, #1
 8008a56:	e000      	b.n	8008a5a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8008a64:	b480      	push	{r7}
 8008a66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8008a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a6c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a78:	d101      	bne.n	8008a7e <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e000      	b.n	8008a80 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr

08008a8a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8008a8a:	b480      	push	{r7}
 8008a8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8008a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a92:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a9e:	d101      	bne.n	8008aa4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e000      	b.n	8008aa6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8008ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008abe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ac2:	d101      	bne.n	8008ac8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e000      	b.n	8008aca <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8008ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ae2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ae6:	d101      	bne.n	8008aec <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e000      	b.n	8008aee <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008af8:	b590      	push	{r4, r7, lr}
 8008afa:	b08d      	sub	sp, #52	; 0x34
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d101      	bne.n	8008b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	e363      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0320 	and.w	r3, r3, #32
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f000 808d 	beq.w	8008c32 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b18:	f7ff fe73 	bl	8008802 <LL_RCC_GetSysClkSource>
 8008b1c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008b1e:	f7ff ff83 	bl	8008a28 <LL_RCC_PLL_GetMainSource>
 8008b22:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d005      	beq.n	8008b36 <HAL_RCC_OscConfig+0x3e>
 8008b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2c:	2b0c      	cmp	r3, #12
 8008b2e:	d147      	bne.n	8008bc0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8008b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d144      	bne.n	8008bc0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	69db      	ldr	r3, [r3, #28]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e347      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008b46:	f7ff fe1e 	bl	8008786 <LL_RCC_MSI_GetRange>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	429c      	cmp	r4, r3
 8008b4e:	d914      	bls.n	8008b7a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b54:	4618      	mov	r0, r3
 8008b56:	f000 fd81 	bl	800965c <RCC_SetFlashLatencyFromMSIRange>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d001      	beq.n	8008b64 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e336      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7ff fdf8 	bl	800875e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a1b      	ldr	r3, [r3, #32]
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7ff fe1c 	bl	80087b0 <LL_RCC_MSI_SetCalibTrimming>
 8008b78:	e013      	b.n	8008ba2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7ff fded 	bl	800875e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a1b      	ldr	r3, [r3, #32]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7ff fe11 	bl	80087b0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 fd62 	bl	800965c <RCC_SetFlashLatencyFromMSIRange>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d001      	beq.n	8008ba2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e317      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008ba2:	f000 fd1b 	bl	80095dc <HAL_RCC_GetHCLKFreq>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	4aa4      	ldr	r2, [pc, #656]	; (8008e3c <HAL_RCC_OscConfig+0x344>)
 8008baa:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008bac:	4ba4      	ldr	r3, [pc, #656]	; (8008e40 <HAL_RCC_OscConfig+0x348>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7fe fc47 	bl	8007444 <HAL_InitTick>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d039      	beq.n	8008c30 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e308      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	69db      	ldr	r3, [r3, #28]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d01e      	beq.n	8008c06 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008bc8:	f7ff fd9a 	bl	8008700 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008bcc:	f7fe fc88 	bl	80074e0 <HAL_GetTick>
 8008bd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8008bd2:	e008      	b.n	8008be6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008bd4:	f7fe fc84 	bl	80074e0 <HAL_GetTick>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	d901      	bls.n	8008be6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008be2:	2303      	movs	r3, #3
 8008be4:	e2f5      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8008be6:	f7ff fda9 	bl	800873c <LL_RCC_MSI_IsReady>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d0f1      	beq.n	8008bd4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f7ff fdb2 	bl	800875e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7ff fdd6 	bl	80087b0 <LL_RCC_MSI_SetCalibTrimming>
 8008c04:	e015      	b.n	8008c32 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008c06:	f7ff fd8a 	bl	800871e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008c0a:	f7fe fc69 	bl	80074e0 <HAL_GetTick>
 8008c0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8008c10:	e008      	b.n	8008c24 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008c12:	f7fe fc65 	bl	80074e0 <HAL_GetTick>
 8008c16:	4602      	mov	r2, r0
 8008c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d901      	bls.n	8008c24 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008c20:	2303      	movs	r3, #3
 8008c22:	e2d6      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8008c24:	f7ff fd8a 	bl	800873c <LL_RCC_MSI_IsReady>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1f1      	bne.n	8008c12 <HAL_RCC_OscConfig+0x11a>
 8008c2e:	e000      	b.n	8008c32 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008c30:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d047      	beq.n	8008cce <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c3e:	f7ff fde0 	bl	8008802 <LL_RCC_GetSysClkSource>
 8008c42:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008c44:	f7ff fef0 	bl	8008a28 <LL_RCC_PLL_GetMainSource>
 8008c48:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008c4a:	6a3b      	ldr	r3, [r7, #32]
 8008c4c:	2b08      	cmp	r3, #8
 8008c4e:	d005      	beq.n	8008c5c <HAL_RCC_OscConfig+0x164>
 8008c50:	6a3b      	ldr	r3, [r7, #32]
 8008c52:	2b0c      	cmp	r3, #12
 8008c54:	d108      	bne.n	8008c68 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	2b03      	cmp	r3, #3
 8008c5a:	d105      	bne.n	8008c68 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d134      	bne.n	8008cce <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e2b4      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c70:	d102      	bne.n	8008c78 <HAL_RCC_OscConfig+0x180>
 8008c72:	f7ff fbc7 	bl	8008404 <LL_RCC_HSE_Enable>
 8008c76:	e001      	b.n	8008c7c <HAL_RCC_OscConfig+0x184>
 8008c78:	f7ff fbd3 	bl	8008422 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d012      	beq.n	8008caa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c84:	f7fe fc2c 	bl	80074e0 <HAL_GetTick>
 8008c88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8008c8a:	e008      	b.n	8008c9e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c8c:	f7fe fc28 	bl	80074e0 <HAL_GetTick>
 8008c90:	4602      	mov	r2, r0
 8008c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c94:	1ad3      	subs	r3, r2, r3
 8008c96:	2b64      	cmp	r3, #100	; 0x64
 8008c98:	d901      	bls.n	8008c9e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	e299      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8008c9e:	f7ff fbcf 	bl	8008440 <LL_RCC_HSE_IsReady>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d0f1      	beq.n	8008c8c <HAL_RCC_OscConfig+0x194>
 8008ca8:	e011      	b.n	8008cce <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008caa:	f7fe fc19 	bl	80074e0 <HAL_GetTick>
 8008cae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008cb0:	e008      	b.n	8008cc4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008cb2:	f7fe fc15 	bl	80074e0 <HAL_GetTick>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	2b64      	cmp	r3, #100	; 0x64
 8008cbe:	d901      	bls.n	8008cc4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	e286      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8008cc4:	f7ff fbbc 	bl	8008440 <LL_RCC_HSE_IsReady>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1f1      	bne.n	8008cb2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 0302 	and.w	r3, r3, #2
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d04c      	beq.n	8008d74 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cda:	f7ff fd92 	bl	8008802 <LL_RCC_GetSysClkSource>
 8008cde:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008ce0:	f7ff fea2 	bl	8008a28 <LL_RCC_PLL_GetMainSource>
 8008ce4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	2b04      	cmp	r3, #4
 8008cea:	d005      	beq.n	8008cf8 <HAL_RCC_OscConfig+0x200>
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	2b0c      	cmp	r3, #12
 8008cf0:	d10e      	bne.n	8008d10 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d10b      	bne.n	8008d10 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d101      	bne.n	8008d04 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	e266      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7ff fbdb 	bl	80084c4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008d0e:	e031      	b.n	8008d74 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d019      	beq.n	8008d4c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d18:	f7ff fba4 	bl	8008464 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d1c:	f7fe fbe0 	bl	80074e0 <HAL_GetTick>
 8008d20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8008d22:	e008      	b.n	8008d36 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d24:	f7fe fbdc 	bl	80074e0 <HAL_GetTick>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2c:	1ad3      	subs	r3, r2, r3
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d901      	bls.n	8008d36 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008d32:	2303      	movs	r3, #3
 8008d34:	e24d      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8008d36:	f7ff fbb3 	bl	80084a0 <LL_RCC_HSI_IsReady>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d0f1      	beq.n	8008d24 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7ff fbbd 	bl	80084c4 <LL_RCC_HSI_SetCalibTrimming>
 8008d4a:	e013      	b.n	8008d74 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d4c:	f7ff fb99 	bl	8008482 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d50:	f7fe fbc6 	bl	80074e0 <HAL_GetTick>
 8008d54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8008d56:	e008      	b.n	8008d6a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d58:	f7fe fbc2 	bl	80074e0 <HAL_GetTick>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d901      	bls.n	8008d6a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8008d66:	2303      	movs	r3, #3
 8008d68:	e233      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8008d6a:	f7ff fb99 	bl	80084a0 <LL_RCC_HSI_IsReady>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1f1      	bne.n	8008d58 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 0308 	and.w	r3, r3, #8
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d106      	bne.n	8008d8e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f000 80a3 	beq.w	8008ed4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d076      	beq.n	8008e84 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 0310 	and.w	r3, r3, #16
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d046      	beq.n	8008e30 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8008da2:	f7ff fc50 	bl	8008646 <LL_RCC_LSI1_IsReady>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d113      	bne.n	8008dd4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8008dac:	f7ff fc29 	bl	8008602 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008db0:	f7fe fb96 	bl	80074e0 <HAL_GetTick>
 8008db4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008db6:	e008      	b.n	8008dca <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008db8:	f7fe fb92 	bl	80074e0 <HAL_GetTick>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d901      	bls.n	8008dca <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	e203      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008dca:	f7ff fc3c 	bl	8008646 <LL_RCC_LSI1_IsReady>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d0f1      	beq.n	8008db8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8008dd4:	f7ff fc49 	bl	800866a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dd8:	f7fe fb82 	bl	80074e0 <HAL_GetTick>
 8008ddc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008dde:	e008      	b.n	8008df2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008de0:	f7fe fb7e 	bl	80074e0 <HAL_GetTick>
 8008de4:	4602      	mov	r2, r0
 8008de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	d901      	bls.n	8008df2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e1ef      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008df2:	f7ff fc5c 	bl	80086ae <LL_RCC_LSI2_IsReady>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d0f1      	beq.n	8008de0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	699b      	ldr	r3, [r3, #24]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7ff fc66 	bl	80086d2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8008e06:	f7ff fc0d 	bl	8008624 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e0a:	f7fe fb69 	bl	80074e0 <HAL_GetTick>
 8008e0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008e10:	e008      	b.n	8008e24 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008e12:	f7fe fb65 	bl	80074e0 <HAL_GetTick>
 8008e16:	4602      	mov	r2, r0
 8008e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d901      	bls.n	8008e24 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8008e20:	2303      	movs	r3, #3
 8008e22:	e1d6      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008e24:	f7ff fc0f 	bl	8008646 <LL_RCC_LSI1_IsReady>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d1f1      	bne.n	8008e12 <HAL_RCC_OscConfig+0x31a>
 8008e2e:	e051      	b.n	8008ed4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8008e30:	f7ff fbe7 	bl	8008602 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e34:	f7fe fb54 	bl	80074e0 <HAL_GetTick>
 8008e38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8008e3a:	e00c      	b.n	8008e56 <HAL_RCC_OscConfig+0x35e>
 8008e3c:	20000154 	.word	0x20000154
 8008e40:	20000158 	.word	0x20000158
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008e44:	f7fe fb4c 	bl	80074e0 <HAL_GetTick>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d901      	bls.n	8008e56 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8008e52:	2303      	movs	r3, #3
 8008e54:	e1bd      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8008e56:	f7ff fbf6 	bl	8008646 <LL_RCC_LSI1_IsReady>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d0f1      	beq.n	8008e44 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8008e60:	f7ff fc14 	bl	800868c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8008e64:	e008      	b.n	8008e78 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008e66:	f7fe fb3b 	bl	80074e0 <HAL_GetTick>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6e:	1ad3      	subs	r3, r2, r3
 8008e70:	2b03      	cmp	r3, #3
 8008e72:	d901      	bls.n	8008e78 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8008e74:	2303      	movs	r3, #3
 8008e76:	e1ac      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8008e78:	f7ff fc19 	bl	80086ae <LL_RCC_LSI2_IsReady>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1f1      	bne.n	8008e66 <HAL_RCC_OscConfig+0x36e>
 8008e82:	e027      	b.n	8008ed4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8008e84:	f7ff fc02 	bl	800868c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e88:	f7fe fb2a 	bl	80074e0 <HAL_GetTick>
 8008e8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008e8e:	e008      	b.n	8008ea2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008e90:	f7fe fb26 	bl	80074e0 <HAL_GetTick>
 8008e94:	4602      	mov	r2, r0
 8008e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	2b03      	cmp	r3, #3
 8008e9c:	d901      	bls.n	8008ea2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e197      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008ea2:	f7ff fc04 	bl	80086ae <LL_RCC_LSI2_IsReady>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1f1      	bne.n	8008e90 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8008eac:	f7ff fbba 	bl	8008624 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008eb0:	f7fe fb16 	bl	80074e0 <HAL_GetTick>
 8008eb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008eb6:	e008      	b.n	8008eca <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008eb8:	f7fe fb12 	bl	80074e0 <HAL_GetTick>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d901      	bls.n	8008eca <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	e183      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008eca:	f7ff fbbc 	bl	8008646 <LL_RCC_LSI1_IsReady>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1f1      	bne.n	8008eb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f003 0304 	and.w	r3, r3, #4
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d05b      	beq.n	8008f98 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ee0:	4ba7      	ldr	r3, [pc, #668]	; (8009180 <HAL_RCC_OscConfig+0x688>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d114      	bne.n	8008f16 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008eec:	f7ff fa5a 	bl	80083a4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ef0:	f7fe faf6 	bl	80074e0 <HAL_GetTick>
 8008ef4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ef6:	e008      	b.n	8008f0a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ef8:	f7fe faf2 	bl	80074e0 <HAL_GetTick>
 8008efc:	4602      	mov	r2, r0
 8008efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d901      	bls.n	8008f0a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8008f06:	2303      	movs	r3, #3
 8008f08:	e163      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f0a:	4b9d      	ldr	r3, [pc, #628]	; (8009180 <HAL_RCC_OscConfig+0x688>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d0f0      	beq.n	8008ef8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d102      	bne.n	8008f24 <HAL_RCC_OscConfig+0x42c>
 8008f1e:	f7ff fb1a 	bl	8008556 <LL_RCC_LSE_Enable>
 8008f22:	e00c      	b.n	8008f3e <HAL_RCC_OscConfig+0x446>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	2b05      	cmp	r3, #5
 8008f2a:	d104      	bne.n	8008f36 <HAL_RCC_OscConfig+0x43e>
 8008f2c:	f7ff fb35 	bl	800859a <LL_RCC_LSE_EnableBypass>
 8008f30:	f7ff fb11 	bl	8008556 <LL_RCC_LSE_Enable>
 8008f34:	e003      	b.n	8008f3e <HAL_RCC_OscConfig+0x446>
 8008f36:	f7ff fb1f 	bl	8008578 <LL_RCC_LSE_Disable>
 8008f3a:	f7ff fb3f 	bl	80085bc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d014      	beq.n	8008f70 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f46:	f7fe facb 	bl	80074e0 <HAL_GetTick>
 8008f4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8008f4c:	e00a      	b.n	8008f64 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f4e:	f7fe fac7 	bl	80074e0 <HAL_GetTick>
 8008f52:	4602      	mov	r2, r0
 8008f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f56:	1ad3      	subs	r3, r2, r3
 8008f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d901      	bls.n	8008f64 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8008f60:	2303      	movs	r3, #3
 8008f62:	e136      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8008f64:	f7ff fb3b 	bl	80085de <LL_RCC_LSE_IsReady>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d0ef      	beq.n	8008f4e <HAL_RCC_OscConfig+0x456>
 8008f6e:	e013      	b.n	8008f98 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f70:	f7fe fab6 	bl	80074e0 <HAL_GetTick>
 8008f74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8008f76:	e00a      	b.n	8008f8e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f78:	f7fe fab2 	bl	80074e0 <HAL_GetTick>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d901      	bls.n	8008f8e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	e121      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8008f8e:	f7ff fb26 	bl	80085de <LL_RCC_LSE_IsReady>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1ef      	bne.n	8008f78 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d02c      	beq.n	8008ffe <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d014      	beq.n	8008fd6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008fac:	f7ff fa9f 	bl	80084ee <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fb0:	f7fe fa96 	bl	80074e0 <HAL_GetTick>
 8008fb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008fb6:	e008      	b.n	8008fca <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008fb8:	f7fe fa92 	bl	80074e0 <HAL_GetTick>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d901      	bls.n	8008fca <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e103      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008fca:	f7ff fab2 	bl	8008532 <LL_RCC_HSI48_IsReady>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d0f1      	beq.n	8008fb8 <HAL_RCC_OscConfig+0x4c0>
 8008fd4:	e013      	b.n	8008ffe <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008fd6:	f7ff fa9b 	bl	8008510 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fda:	f7fe fa81 	bl	80074e0 <HAL_GetTick>
 8008fde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008fe0:	e008      	b.n	8008ff4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008fe2:	f7fe fa7d 	bl	80074e0 <HAL_GetTick>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	2b02      	cmp	r3, #2
 8008fee:	d901      	bls.n	8008ff4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e0ee      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008ff4:	f7ff fa9d 	bl	8008532 <LL_RCC_HSI48_IsReady>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1f1      	bne.n	8008fe2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009002:	2b00      	cmp	r3, #0
 8009004:	f000 80e4 	beq.w	80091d0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009008:	f7ff fbfb 	bl	8008802 <LL_RCC_GetSysClkSource>
 800900c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800900e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800901a:	2b02      	cmp	r3, #2
 800901c:	f040 80b4 	bne.w	8009188 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f003 0203 	and.w	r2, r3, #3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800902a:	429a      	cmp	r2, r3
 800902c:	d123      	bne.n	8009076 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009038:	429a      	cmp	r2, r3
 800903a:	d11c      	bne.n	8009076 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	0a1b      	lsrs	r3, r3, #8
 8009040:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009048:	429a      	cmp	r2, r3
 800904a:	d114      	bne.n	8009076 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009056:	429a      	cmp	r2, r3
 8009058:	d10d      	bne.n	8009076 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009064:	429a      	cmp	r2, r3
 8009066:	d106      	bne.n	8009076 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009072:	429a      	cmp	r2, r3
 8009074:	d05d      	beq.n	8009132 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	2b0c      	cmp	r3, #12
 800907a:	d058      	beq.n	800912e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800907c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009086:	2b00      	cmp	r3, #0
 8009088:	d001      	beq.n	800908e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	e0a1      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800908e:	f7ff fc85 	bl	800899c <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009092:	f7fe fa25 	bl	80074e0 <HAL_GetTick>
 8009096:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009098:	e008      	b.n	80090ac <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800909a:	f7fe fa21 	bl	80074e0 <HAL_GetTick>
 800909e:	4602      	mov	r2, r0
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	1ad3      	subs	r3, r2, r3
 80090a4:	2b02      	cmp	r3, #2
 80090a6:	d901      	bls.n	80090ac <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80090a8:	2303      	movs	r3, #3
 80090aa:	e092      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80090ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1ef      	bne.n	800909a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80090ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090be:	68da      	ldr	r2, [r3, #12]
 80090c0:	4b30      	ldr	r3, [pc, #192]	; (8009184 <HAL_RCC_OscConfig+0x68c>)
 80090c2:	4013      	ands	r3, r2
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80090cc:	4311      	orrs	r1, r2
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80090d2:	0212      	lsls	r2, r2, #8
 80090d4:	4311      	orrs	r1, r2
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80090da:	4311      	orrs	r1, r2
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80090e0:	4311      	orrs	r1, r2
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80090e6:	430a      	orrs	r2, r1
 80090e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80090ec:	4313      	orrs	r3, r2
 80090ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80090f0:	f7ff fc45 	bl	800897e <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80090f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80090fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009102:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009104:	f7fe f9ec 	bl	80074e0 <HAL_GetTick>
 8009108:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800910a:	e008      	b.n	800911e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800910c:	f7fe f9e8 	bl	80074e0 <HAL_GetTick>
 8009110:	4602      	mov	r2, r0
 8009112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009114:	1ad3      	subs	r3, r2, r3
 8009116:	2b02      	cmp	r3, #2
 8009118:	d901      	bls.n	800911e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800911a:	2303      	movs	r3, #3
 800911c:	e059      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800911e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009128:	2b00      	cmp	r3, #0
 800912a:	d0ef      	beq.n	800910c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800912c:	e050      	b.n	80091d0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	e04f      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800913c:	2b00      	cmp	r3, #0
 800913e:	d147      	bne.n	80091d0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009140:	f7ff fc1d 	bl	800897e <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800914e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009152:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009154:	f7fe f9c4 	bl	80074e0 <HAL_GetTick>
 8009158:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800915a:	e008      	b.n	800916e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800915c:	f7fe f9c0 	bl	80074e0 <HAL_GetTick>
 8009160:	4602      	mov	r2, r0
 8009162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009164:	1ad3      	subs	r3, r2, r3
 8009166:	2b02      	cmp	r3, #2
 8009168:	d901      	bls.n	800916e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800916a:	2303      	movs	r3, #3
 800916c:	e031      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800916e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009178:	2b00      	cmp	r3, #0
 800917a:	d0ef      	beq.n	800915c <HAL_RCC_OscConfig+0x664>
 800917c:	e028      	b.n	80091d0 <HAL_RCC_OscConfig+0x6d8>
 800917e:	bf00      	nop
 8009180:	58000400 	.word	0x58000400
 8009184:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	2b0c      	cmp	r3, #12
 800918c:	d01e      	beq.n	80091cc <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800918e:	f7ff fc05 	bl	800899c <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009192:	f7fe f9a5 	bl	80074e0 <HAL_GetTick>
 8009196:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009198:	e008      	b.n	80091ac <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800919a:	f7fe f9a1 	bl	80074e0 <HAL_GetTick>
 800919e:	4602      	mov	r2, r0
 80091a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a2:	1ad3      	subs	r3, r2, r3
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d901      	bls.n	80091ac <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80091a8:	2303      	movs	r3, #3
 80091aa:	e012      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80091ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1ef      	bne.n	800919a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80091ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091be:	68da      	ldr	r2, [r3, #12]
 80091c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80091c4:	4b05      	ldr	r3, [pc, #20]	; (80091dc <HAL_RCC_OscConfig+0x6e4>)
 80091c6:	4013      	ands	r3, r2
 80091c8:	60cb      	str	r3, [r1, #12]
 80091ca:	e001      	b.n	80091d0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e000      	b.n	80091d2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3734      	adds	r7, #52	; 0x34
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd90      	pop	{r4, r7, pc}
 80091da:	bf00      	nop
 80091dc:	eefefffc 	.word	0xeefefffc

080091e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d101      	bne.n	80091f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80091f0:	2301      	movs	r3, #1
 80091f2:	e12d      	b.n	8009450 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80091f4:	4b98      	ldr	r3, [pc, #608]	; (8009458 <HAL_RCC_ClockConfig+0x278>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f003 0307 	and.w	r3, r3, #7
 80091fc:	683a      	ldr	r2, [r7, #0]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d91b      	bls.n	800923a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009202:	4b95      	ldr	r3, [pc, #596]	; (8009458 <HAL_RCC_ClockConfig+0x278>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f023 0207 	bic.w	r2, r3, #7
 800920a:	4993      	ldr	r1, [pc, #588]	; (8009458 <HAL_RCC_ClockConfig+0x278>)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	4313      	orrs	r3, r2
 8009210:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009212:	f7fe f965 	bl	80074e0 <HAL_GetTick>
 8009216:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009218:	e008      	b.n	800922c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800921a:	f7fe f961 	bl	80074e0 <HAL_GetTick>
 800921e:	4602      	mov	r2, r0
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	1ad3      	subs	r3, r2, r3
 8009224:	2b02      	cmp	r3, #2
 8009226:	d901      	bls.n	800922c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8009228:	2303      	movs	r3, #3
 800922a:	e111      	b.n	8009450 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800922c:	4b8a      	ldr	r3, [pc, #552]	; (8009458 <HAL_RCC_ClockConfig+0x278>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 0307 	and.w	r3, r3, #7
 8009234:	683a      	ldr	r2, [r7, #0]
 8009236:	429a      	cmp	r2, r3
 8009238:	d1ef      	bne.n	800921a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 0302 	and.w	r3, r3, #2
 8009242:	2b00      	cmp	r3, #0
 8009244:	d016      	beq.n	8009274 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	4618      	mov	r0, r3
 800924c:	f7ff fae5 	bl	800881a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009250:	f7fe f946 	bl	80074e0 <HAL_GetTick>
 8009254:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8009256:	e008      	b.n	800926a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009258:	f7fe f942 	bl	80074e0 <HAL_GetTick>
 800925c:	4602      	mov	r2, r0
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	2b02      	cmp	r3, #2
 8009264:	d901      	bls.n	800926a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8009266:	2303      	movs	r3, #3
 8009268:	e0f2      	b.n	8009450 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800926a:	f7ff fbe9 	bl	8008a40 <LL_RCC_IsActiveFlag_HPRE>
 800926e:	4603      	mov	r3, r0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d0f1      	beq.n	8009258 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f003 0320 	and.w	r3, r3, #32
 800927c:	2b00      	cmp	r3, #0
 800927e:	d016      	beq.n	80092ae <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	695b      	ldr	r3, [r3, #20]
 8009284:	4618      	mov	r0, r3
 8009286:	f7ff fadc 	bl	8008842 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800928a:	f7fe f929 	bl	80074e0 <HAL_GetTick>
 800928e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8009290:	e008      	b.n	80092a4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009292:	f7fe f925 	bl	80074e0 <HAL_GetTick>
 8009296:	4602      	mov	r2, r0
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	1ad3      	subs	r3, r2, r3
 800929c:	2b02      	cmp	r3, #2
 800929e:	d901      	bls.n	80092a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80092a0:	2303      	movs	r3, #3
 80092a2:	e0d5      	b.n	8009450 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80092a4:	f7ff fbde 	bl	8008a64 <LL_RCC_IsActiveFlag_C2HPRE>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d0f1      	beq.n	8009292 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d016      	beq.n	80092e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	699b      	ldr	r3, [r3, #24]
 80092be:	4618      	mov	r0, r3
 80092c0:	f7ff fad5 	bl	800886e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80092c4:	f7fe f90c 	bl	80074e0 <HAL_GetTick>
 80092c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80092ca:	e008      	b.n	80092de <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80092cc:	f7fe f908 	bl	80074e0 <HAL_GetTick>
 80092d0:	4602      	mov	r2, r0
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d901      	bls.n	80092de <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80092da:	2303      	movs	r3, #3
 80092dc:	e0b8      	b.n	8009450 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80092de:	f7ff fbd4 	bl	8008a8a <LL_RCC_IsActiveFlag_SHDHPRE>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d0f1      	beq.n	80092cc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f003 0304 	and.w	r3, r3, #4
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d016      	beq.n	8009322 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7ff facf 	bl	800889c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80092fe:	f7fe f8ef 	bl	80074e0 <HAL_GetTick>
 8009302:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8009304:	e008      	b.n	8009318 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009306:	f7fe f8eb 	bl	80074e0 <HAL_GetTick>
 800930a:	4602      	mov	r2, r0
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	2b02      	cmp	r3, #2
 8009312:	d901      	bls.n	8009318 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8009314:	2303      	movs	r3, #3
 8009316:	e09b      	b.n	8009450 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8009318:	f7ff fbca 	bl	8008ab0 <LL_RCC_IsActiveFlag_PPRE1>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d0f1      	beq.n	8009306 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f003 0308 	and.w	r3, r3, #8
 800932a:	2b00      	cmp	r3, #0
 800932c:	d017      	beq.n	800935e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	00db      	lsls	r3, r3, #3
 8009334:	4618      	mov	r0, r3
 8009336:	f7ff fac5 	bl	80088c4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800933a:	f7fe f8d1 	bl	80074e0 <HAL_GetTick>
 800933e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8009340:	e008      	b.n	8009354 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009342:	f7fe f8cd 	bl	80074e0 <HAL_GetTick>
 8009346:	4602      	mov	r2, r0
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	1ad3      	subs	r3, r2, r3
 800934c:	2b02      	cmp	r3, #2
 800934e:	d901      	bls.n	8009354 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8009350:	2303      	movs	r3, #3
 8009352:	e07d      	b.n	8009450 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8009354:	f7ff fbbe 	bl	8008ad4 <LL_RCC_IsActiveFlag_PPRE2>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d0f1      	beq.n	8009342 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	2b00      	cmp	r3, #0
 8009368:	d043      	beq.n	80093f2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	2b02      	cmp	r3, #2
 8009370:	d106      	bne.n	8009380 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8009372:	f7ff f865 	bl	8008440 <LL_RCC_HSE_IsReady>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d11e      	bne.n	80093ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	e067      	b.n	8009450 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	2b03      	cmp	r3, #3
 8009386:	d106      	bne.n	8009396 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8009388:	f7ff fb17 	bl	80089ba <LL_RCC_PLL_IsReady>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d113      	bne.n	80093ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	e05c      	b.n	8009450 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d106      	bne.n	80093ac <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800939e:	f7ff f9cd 	bl	800873c <LL_RCC_MSI_IsReady>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d108      	bne.n	80093ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	e051      	b.n	8009450 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80093ac:	f7ff f878 	bl	80084a0 <LL_RCC_HSI_IsReady>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d101      	bne.n	80093ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80093b6:	2301      	movs	r3, #1
 80093b8:	e04a      	b.n	8009450 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	4618      	mov	r0, r3
 80093c0:	f7ff fa0b 	bl	80087da <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093c4:	f7fe f88c 	bl	80074e0 <HAL_GetTick>
 80093c8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093ca:	e00a      	b.n	80093e2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093cc:	f7fe f888 	bl	80074e0 <HAL_GetTick>
 80093d0:	4602      	mov	r2, r0
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	1ad3      	subs	r3, r2, r3
 80093d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80093da:	4293      	cmp	r3, r2
 80093dc:	d901      	bls.n	80093e2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80093de:	2303      	movs	r3, #3
 80093e0:	e036      	b.n	8009450 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093e2:	f7ff fa0e 	bl	8008802 <LL_RCC_GetSysClkSource>
 80093e6:	4602      	mov	r2, r0
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d1ec      	bne.n	80093cc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80093f2:	4b19      	ldr	r3, [pc, #100]	; (8009458 <HAL_RCC_ClockConfig+0x278>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f003 0307 	and.w	r3, r3, #7
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d21b      	bcs.n	8009438 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009400:	4b15      	ldr	r3, [pc, #84]	; (8009458 <HAL_RCC_ClockConfig+0x278>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f023 0207 	bic.w	r2, r3, #7
 8009408:	4913      	ldr	r1, [pc, #76]	; (8009458 <HAL_RCC_ClockConfig+0x278>)
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	4313      	orrs	r3, r2
 800940e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009410:	f7fe f866 	bl	80074e0 <HAL_GetTick>
 8009414:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009416:	e008      	b.n	800942a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009418:	f7fe f862 	bl	80074e0 <HAL_GetTick>
 800941c:	4602      	mov	r2, r0
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	1ad3      	subs	r3, r2, r3
 8009422:	2b02      	cmp	r3, #2
 8009424:	d901      	bls.n	800942a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8009426:	2303      	movs	r3, #3
 8009428:	e012      	b.n	8009450 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800942a:	4b0b      	ldr	r3, [pc, #44]	; (8009458 <HAL_RCC_ClockConfig+0x278>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f003 0307 	and.w	r3, r3, #7
 8009432:	683a      	ldr	r2, [r7, #0]
 8009434:	429a      	cmp	r2, r3
 8009436:	d1ef      	bne.n	8009418 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8009438:	f000 f8d0 	bl	80095dc <HAL_RCC_GetHCLKFreq>
 800943c:	4603      	mov	r3, r0
 800943e:	4a07      	ldr	r2, [pc, #28]	; (800945c <HAL_RCC_ClockConfig+0x27c>)
 8009440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8009442:	f7fe f859 	bl	80074f8 <HAL_GetTickPrio>
 8009446:	4603      	mov	r3, r0
 8009448:	4618      	mov	r0, r3
 800944a:	f7fd fffb 	bl	8007444 <HAL_InitTick>
 800944e:	4603      	mov	r3, r0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	58004000 	.word	0x58004000
 800945c:	20000154 	.word	0x20000154

08009460 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b08c      	sub	sp, #48	; 0x30
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 800946c:	2302      	movs	r3, #2
 800946e:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8009470:	2303      	movs	r3, #3
 8009472:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8009474:	2300      	movs	r3, #0
 8009476:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800947e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	0c1b      	lsrs	r3, r3, #16
 8009484:	f003 030f 	and.w	r3, r3, #15
 8009488:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 800948c:	029b      	lsls	r3, r3, #10
 800948e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	0c1b      	lsrs	r3, r3, #16
 8009494:	f003 030f 	and.w	r3, r3, #15
 8009498:	627b      	str	r3, [r7, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index));
 800949a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800949e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094a0:	2101      	movs	r1, #1
 80094a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a4:	fa01 f303 	lsl.w	r3, r1, r3
 80094a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094ac:	4313      	orrs	r3, r2
 80094ae:	64cb      	str	r3, [r1, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	0d1b      	lsrs	r3, r3, #20
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 80094be:	f107 0310 	add.w	r3, r7, #16
 80094c2:	4619      	mov	r1, r3
 80094c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094c6:	f7fe fc43 	bl	8007d50 <HAL_GPIO_Init>

  if (mcoindex == RCC_MCO1_INDEX)
 80094ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d104      	bne.n	80094da <HAL_RCC_MCOConfig+0x7a>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
 80094d0:	6879      	ldr	r1, [r7, #4]
 80094d2:	68b8      	ldr	r0, [r7, #8]
 80094d4:	f7ff fa3c 	bl	8008950 <LL_RCC_ConfigMCO>
    LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
  }
#endif /* RCC_MCO3_SUPPORT */
  else
  {}
}
 80094d8:	e010      	b.n	80094fc <HAL_RCC_MCOConfig+0x9c>
  else if (mcoindex == RCC_MCO2_INDEX)
 80094da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094e0:	d104      	bne.n	80094ec <HAL_RCC_MCOConfig+0x8c>
    LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
 80094e2:	6879      	ldr	r1, [r7, #4]
 80094e4:	68b8      	ldr	r0, [r7, #8]
 80094e6:	f7ff fa33 	bl	8008950 <LL_RCC_ConfigMCO>
}
 80094ea:	e007      	b.n	80094fc <HAL_RCC_MCOConfig+0x9c>
  else if (mcoindex == RCC_MCO3_INDEX)
 80094ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094f2:	d103      	bne.n	80094fc <HAL_RCC_MCOConfig+0x9c>
    LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
 80094f4:	6879      	ldr	r1, [r7, #4]
 80094f6:	68b8      	ldr	r0, [r7, #8]
 80094f8:	f7ff fa2a 	bl	8008950 <LL_RCC_ConfigMCO>
}
 80094fc:	bf00      	nop
 80094fe:	3730      	adds	r7, #48	; 0x30
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009504:	b590      	push	{r4, r7, lr}
 8009506:	b085      	sub	sp, #20
 8009508:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800950a:	f7ff f97a 	bl	8008802 <LL_RCC_GetSysClkSource>
 800950e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d10a      	bne.n	800952c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8009516:	f7ff f936 	bl	8008786 <LL_RCC_MSI_GetRange>
 800951a:	4603      	mov	r3, r0
 800951c:	091b      	lsrs	r3, r3, #4
 800951e:	f003 030f 	and.w	r3, r3, #15
 8009522:	4a2b      	ldr	r2, [pc, #172]	; (80095d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009528:	60fb      	str	r3, [r7, #12]
 800952a:	e04b      	b.n	80095c4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b04      	cmp	r3, #4
 8009530:	d102      	bne.n	8009538 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009532:	4b28      	ldr	r3, [pc, #160]	; (80095d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009534:	60fb      	str	r3, [r7, #12]
 8009536:	e045      	b.n	80095c4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b08      	cmp	r3, #8
 800953c:	d10a      	bne.n	8009554 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800953e:	f7fe ff4f 	bl	80083e0 <LL_RCC_HSE_IsEnabledDiv2>
 8009542:	4603      	mov	r3, r0
 8009544:	2b01      	cmp	r3, #1
 8009546:	d102      	bne.n	800954e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8009548:	4b22      	ldr	r3, [pc, #136]	; (80095d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800954a:	60fb      	str	r3, [r7, #12]
 800954c:	e03a      	b.n	80095c4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800954e:	4b22      	ldr	r3, [pc, #136]	; (80095d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8009550:	60fb      	str	r3, [r7, #12]
 8009552:	e037      	b.n	80095c4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8009554:	f7ff fa68 	bl	8008a28 <LL_RCC_PLL_GetMainSource>
 8009558:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	2b02      	cmp	r3, #2
 800955e:	d003      	beq.n	8009568 <HAL_RCC_GetSysClockFreq+0x64>
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	2b03      	cmp	r3, #3
 8009564:	d003      	beq.n	800956e <HAL_RCC_GetSysClockFreq+0x6a>
 8009566:	e00d      	b.n	8009584 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8009568:	4b1a      	ldr	r3, [pc, #104]	; (80095d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800956a:	60bb      	str	r3, [r7, #8]
        break;
 800956c:	e015      	b.n	800959a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800956e:	f7fe ff37 	bl	80083e0 <LL_RCC_HSE_IsEnabledDiv2>
 8009572:	4603      	mov	r3, r0
 8009574:	2b01      	cmp	r3, #1
 8009576:	d102      	bne.n	800957e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8009578:	4b16      	ldr	r3, [pc, #88]	; (80095d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800957a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800957c:	e00d      	b.n	800959a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800957e:	4b16      	ldr	r3, [pc, #88]	; (80095d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8009580:	60bb      	str	r3, [r7, #8]
        break;
 8009582:	e00a      	b.n	800959a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8009584:	f7ff f8ff 	bl	8008786 <LL_RCC_MSI_GetRange>
 8009588:	4603      	mov	r3, r0
 800958a:	091b      	lsrs	r3, r3, #4
 800958c:	f003 030f 	and.w	r3, r3, #15
 8009590:	4a0f      	ldr	r2, [pc, #60]	; (80095d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009596:	60bb      	str	r3, [r7, #8]
        break;
 8009598:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800959a:	f7ff fa20 	bl	80089de <LL_RCC_PLL_GetN>
 800959e:	4602      	mov	r2, r0
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	fb03 f402 	mul.w	r4, r3, r2
 80095a6:	f7ff fa33 	bl	8008a10 <LL_RCC_PLL_GetDivider>
 80095aa:	4603      	mov	r3, r0
 80095ac:	091b      	lsrs	r3, r3, #4
 80095ae:	3301      	adds	r3, #1
 80095b0:	fbb4 f4f3 	udiv	r4, r4, r3
 80095b4:	f7ff fa20 	bl	80089f8 <LL_RCC_PLL_GetR>
 80095b8:	4603      	mov	r3, r0
 80095ba:	0f5b      	lsrs	r3, r3, #29
 80095bc:	3301      	adds	r3, #1
 80095be:	fbb4 f3f3 	udiv	r3, r4, r3
 80095c2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80095c4:	68fb      	ldr	r3, [r7, #12]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3714      	adds	r7, #20
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd90      	pop	{r4, r7, pc}
 80095ce:	bf00      	nop
 80095d0:	0801413c 	.word	0x0801413c
 80095d4:	00f42400 	.word	0x00f42400
 80095d8:	01e84800 	.word	0x01e84800

080095dc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095dc:	b598      	push	{r3, r4, r7, lr}
 80095de:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80095e0:	f7ff ff90 	bl	8009504 <HAL_RCC_GetSysClockFreq>
 80095e4:	4604      	mov	r4, r0
 80095e6:	f7ff f981 	bl	80088ec <LL_RCC_GetAHBPrescaler>
 80095ea:	4603      	mov	r3, r0
 80095ec:	091b      	lsrs	r3, r3, #4
 80095ee:	f003 030f 	and.w	r3, r3, #15
 80095f2:	4a03      	ldr	r2, [pc, #12]	; (8009600 <HAL_RCC_GetHCLKFreq+0x24>)
 80095f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095f8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	bd98      	pop	{r3, r4, r7, pc}
 8009600:	080140dc 	.word	0x080140dc

08009604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009604:	b598      	push	{r3, r4, r7, lr}
 8009606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009608:	f7ff ffe8 	bl	80095dc <HAL_RCC_GetHCLKFreq>
 800960c:	4604      	mov	r4, r0
 800960e:	f7ff f987 	bl	8008920 <LL_RCC_GetAPB1Prescaler>
 8009612:	4603      	mov	r3, r0
 8009614:	0a1b      	lsrs	r3, r3, #8
 8009616:	f003 0307 	and.w	r3, r3, #7
 800961a:	4a04      	ldr	r2, [pc, #16]	; (800962c <HAL_RCC_GetPCLK1Freq+0x28>)
 800961c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009620:	f003 031f 	and.w	r3, r3, #31
 8009624:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009628:	4618      	mov	r0, r3
 800962a:	bd98      	pop	{r3, r4, r7, pc}
 800962c:	0801411c 	.word	0x0801411c

08009630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009630:	b598      	push	{r3, r4, r7, lr}
 8009632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8009634:	f7ff ffd2 	bl	80095dc <HAL_RCC_GetHCLKFreq>
 8009638:	4604      	mov	r4, r0
 800963a:	f7ff f97d 	bl	8008938 <LL_RCC_GetAPB2Prescaler>
 800963e:	4603      	mov	r3, r0
 8009640:	0adb      	lsrs	r3, r3, #11
 8009642:	f003 0307 	and.w	r3, r3, #7
 8009646:	4a04      	ldr	r2, [pc, #16]	; (8009658 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800964c:	f003 031f 	and.w	r3, r3, #31
 8009650:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009654:	4618      	mov	r0, r3
 8009656:	bd98      	pop	{r3, r4, r7, pc}
 8009658:	0801411c 	.word	0x0801411c

0800965c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800965c:	b590      	push	{r4, r7, lr}
 800965e:	b085      	sub	sp, #20
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2bb0      	cmp	r3, #176	; 0xb0
 8009668:	d903      	bls.n	8009672 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800966a:	4b15      	ldr	r3, [pc, #84]	; (80096c0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800966c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800966e:	60fb      	str	r3, [r7, #12]
 8009670:	e007      	b.n	8009682 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	091b      	lsrs	r3, r3, #4
 8009676:	f003 030f 	and.w	r3, r3, #15
 800967a:	4a11      	ldr	r2, [pc, #68]	; (80096c0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800967c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009680:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8009682:	f7ff f93f 	bl	8008904 <LL_RCC_GetAHB4Prescaler>
 8009686:	4603      	mov	r3, r0
 8009688:	091b      	lsrs	r3, r3, #4
 800968a:	f003 030f 	and.w	r3, r3, #15
 800968e:	4a0d      	ldr	r2, [pc, #52]	; (80096c4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8009690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009694:	68fa      	ldr	r2, [r7, #12]
 8009696:	fbb2 f3f3 	udiv	r3, r2, r3
 800969a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	4a0a      	ldr	r2, [pc, #40]	; (80096c8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80096a0:	fba2 2303 	umull	r2, r3, r2, r3
 80096a4:	0c9c      	lsrs	r4, r3, #18
 80096a6:	f7fe fe8d 	bl	80083c4 <HAL_PWREx_GetVoltageRange>
 80096aa:	4603      	mov	r3, r0
 80096ac:	4619      	mov	r1, r3
 80096ae:	4620      	mov	r0, r4
 80096b0:	f000 f80c 	bl	80096cc <RCC_SetFlashLatency>
 80096b4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3714      	adds	r7, #20
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd90      	pop	{r4, r7, pc}
 80096be:	bf00      	nop
 80096c0:	0801413c 	.word	0x0801413c
 80096c4:	080140dc 	.word	0x080140dc
 80096c8:	431bde83 	.word	0x431bde83

080096cc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80096cc:	b590      	push	{r4, r7, lr}
 80096ce:	b093      	sub	sp, #76	; 0x4c
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80096d6:	4b37      	ldr	r3, [pc, #220]	; (80097b4 <RCC_SetFlashLatency+0xe8>)
 80096d8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80096dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80096de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80096e2:	4a35      	ldr	r2, [pc, #212]	; (80097b8 <RCC_SetFlashLatency+0xec>)
 80096e4:	f107 031c 	add.w	r3, r7, #28
 80096e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80096ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80096ee:	4b33      	ldr	r3, [pc, #204]	; (80097bc <RCC_SetFlashLatency+0xf0>)
 80096f0:	f107 040c 	add.w	r4, r7, #12
 80096f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80096f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80096fa:	2300      	movs	r3, #0
 80096fc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009704:	d11a      	bne.n	800973c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009706:	2300      	movs	r3, #0
 8009708:	643b      	str	r3, [r7, #64]	; 0x40
 800970a:	e013      	b.n	8009734 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800970c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	3348      	adds	r3, #72	; 0x48
 8009712:	443b      	add	r3, r7
 8009714:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	429a      	cmp	r2, r3
 800971c:	d807      	bhi.n	800972e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800971e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	3348      	adds	r3, #72	; 0x48
 8009724:	443b      	add	r3, r7
 8009726:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800972a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800972c:	e020      	b.n	8009770 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800972e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009730:	3301      	adds	r3, #1
 8009732:	643b      	str	r3, [r7, #64]	; 0x40
 8009734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009736:	2b03      	cmp	r3, #3
 8009738:	d9e8      	bls.n	800970c <RCC_SetFlashLatency+0x40>
 800973a:	e019      	b.n	8009770 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800973c:	2300      	movs	r3, #0
 800973e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009740:	e013      	b.n	800976a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8009742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	3348      	adds	r3, #72	; 0x48
 8009748:	443b      	add	r3, r7
 800974a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	429a      	cmp	r2, r3
 8009752:	d807      	bhi.n	8009764 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	3348      	adds	r3, #72	; 0x48
 800975a:	443b      	add	r3, r7
 800975c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8009760:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8009762:	e005      	b.n	8009770 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009766:	3301      	adds	r3, #1
 8009768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800976a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800976c:	2b02      	cmp	r3, #2
 800976e:	d9e8      	bls.n	8009742 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8009770:	4b13      	ldr	r3, [pc, #76]	; (80097c0 <RCC_SetFlashLatency+0xf4>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f023 0207 	bic.w	r2, r3, #7
 8009778:	4911      	ldr	r1, [pc, #68]	; (80097c0 <RCC_SetFlashLatency+0xf4>)
 800977a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800977c:	4313      	orrs	r3, r2
 800977e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009780:	f7fd feae 	bl	80074e0 <HAL_GetTick>
 8009784:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8009786:	e008      	b.n	800979a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009788:	f7fd feaa 	bl	80074e0 <HAL_GetTick>
 800978c:	4602      	mov	r2, r0
 800978e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	2b02      	cmp	r3, #2
 8009794:	d901      	bls.n	800979a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8009796:	2303      	movs	r3, #3
 8009798:	e007      	b.n	80097aa <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800979a:	4b09      	ldr	r3, [pc, #36]	; (80097c0 <RCC_SetFlashLatency+0xf4>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 0307 	and.w	r3, r3, #7
 80097a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d1ef      	bne.n	8009788 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	374c      	adds	r7, #76	; 0x4c
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd90      	pop	{r4, r7, pc}
 80097b2:	bf00      	nop
 80097b4:	08013f3c 	.word	0x08013f3c
 80097b8:	08013f4c 	.word	0x08013f4c
 80097bc:	08013f58 	.word	0x08013f58
 80097c0:	58004000 	.word	0x58004000

080097c4 <LL_RCC_LSE_IsEnabled>:
{
 80097c4:	b480      	push	{r7}
 80097c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80097c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097d0:	f003 0301 	and.w	r3, r3, #1
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d101      	bne.n	80097dc <LL_RCC_LSE_IsEnabled+0x18>
 80097d8:	2301      	movs	r3, #1
 80097da:	e000      	b.n	80097de <LL_RCC_LSE_IsEnabled+0x1a>
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <LL_RCC_LSE_IsReady>:
{
 80097e8:	b480      	push	{r7}
 80097ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80097ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097f4:	f003 0302 	and.w	r3, r3, #2
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d101      	bne.n	8009800 <LL_RCC_LSE_IsReady+0x18>
 80097fc:	2301      	movs	r3, #1
 80097fe:	e000      	b.n	8009802 <LL_RCC_LSE_IsReady+0x1a>
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <LL_RCC_MSI_EnablePLLMode>:
{
 800980c:	b480      	push	{r7}
 800980e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8009810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800981a:	f043 0304 	orr.w	r3, r3, #4
 800981e:	6013      	str	r3, [r2, #0]
}
 8009820:	bf00      	nop
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr

0800982a <LL_RCC_SetRFWKPClockSource>:
{
 800982a:	b480      	push	{r7}
 800982c:	b083      	sub	sp, #12
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8009832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800983a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800983e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4313      	orrs	r3, r2
 8009846:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800984a:	bf00      	nop
 800984c:	370c      	adds	r7, #12
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr

08009856 <LL_RCC_SetSMPSClockSource>:
{
 8009856:	b480      	push	{r7}
 8009858:	b083      	sub	sp, #12
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800985e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009864:	f023 0203 	bic.w	r2, r3, #3
 8009868:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4313      	orrs	r3, r2
 8009870:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009872:	bf00      	nop
 8009874:	370c      	adds	r7, #12
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr

0800987e <LL_RCC_SetSMPSPrescaler>:
{
 800987e:	b480      	push	{r7}
 8009880:	b083      	sub	sp, #12
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8009886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800988a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009890:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	4313      	orrs	r3, r2
 8009898:	624b      	str	r3, [r1, #36]	; 0x24
}
 800989a:	bf00      	nop
 800989c:	370c      	adds	r7, #12
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr

080098a6 <LL_RCC_SetUSARTClockSource>:
{
 80098a6:	b480      	push	{r7}
 80098a8:	b083      	sub	sp, #12
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80098ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098b6:	f023 0203 	bic.w	r2, r3, #3
 80098ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80098c6:	bf00      	nop
 80098c8:	370c      	adds	r7, #12
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr

080098d2 <LL_RCC_SetLPUARTClockSource>:
{
 80098d2:	b480      	push	{r7}
 80098d4:	b083      	sub	sp, #12
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80098da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80098e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80098f2:	bf00      	nop
 80098f4:	370c      	adds	r7, #12
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr

080098fe <LL_RCC_SetI2CClockSource>:
{
 80098fe:	b480      	push	{r7}
 8009900:	b083      	sub	sp, #12
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8009906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800990a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	091b      	lsrs	r3, r3, #4
 8009912:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8009916:	43db      	mvns	r3, r3
 8009918:	401a      	ands	r2, r3
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	011b      	lsls	r3, r3, #4
 800991e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8009922:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009926:	4313      	orrs	r3, r2
 8009928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800992c:	bf00      	nop
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <LL_RCC_SetLPTIMClockSource>:
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8009940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009944:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	0c1b      	lsrs	r3, r3, #16
 800994c:	041b      	lsls	r3, r3, #16
 800994e:	43db      	mvns	r3, r3
 8009950:	401a      	ands	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	041b      	lsls	r3, r3, #16
 8009956:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800995a:	4313      	orrs	r3, r2
 800995c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009960:	bf00      	nop
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <LL_RCC_SetSAIClockSource>:
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8009974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800997c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009980:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4313      	orrs	r3, r2
 8009988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800998c:	bf00      	nop
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <LL_RCC_SetRNGClockSource>:
{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80099a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099a8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80099ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4313      	orrs	r3, r2
 80099b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80099b8:	bf00      	nop
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <LL_RCC_SetCLK48ClockSource>:
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80099cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80099d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	4313      	orrs	r3, r2
 80099e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80099e4:	bf00      	nop
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <LL_RCC_SetUSBClockSource>:
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f7ff ffe3 	bl	80099c4 <LL_RCC_SetCLK48ClockSource>
}
 80099fe:	bf00      	nop
 8009a00:	3708      	adds	r7, #8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <LL_RCC_SetADCClockSource>:
{
 8009a06:	b480      	push	{r7}
 8009a08:	b083      	sub	sp, #12
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8009a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009a1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009a26:	bf00      	nop
 8009a28:	370c      	adds	r7, #12
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr

08009a32 <LL_RCC_SetRTCClockSource>:
{
 8009a32:	b480      	push	{r7}
 8009a34:	b083      	sub	sp, #12
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009a52:	bf00      	nop
 8009a54:	370c      	adds	r7, #12
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr

08009a5e <LL_RCC_GetRTCClockSource>:
{
 8009a5e:	b480      	push	{r7}
 8009a60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8009a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <LL_RCC_ForceBackupDomainReset>:
{
 8009a78:	b480      	push	{r7}
 8009a7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009a90:	bf00      	nop
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr

08009a9a <LL_RCC_ReleaseBackupDomainReset>:
{
 8009a9a:	b480      	push	{r7}
 8009a9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009aae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009ab2:	bf00      	nop
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <LL_RCC_PLLSAI1_Enable>:
{
 8009abc:	b480      	push	{r7}
 8009abe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8009ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009aca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009ace:	6013      	str	r3, [r2, #0]
}
 8009ad0:	bf00      	nop
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr

08009ada <LL_RCC_PLLSAI1_Disable>:
{
 8009ada:	b480      	push	{r7}
 8009adc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8009ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009ae8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009aec:	6013      	str	r3, [r2, #0]
}
 8009aee:	bf00      	nop
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <LL_RCC_PLLSAI1_IsReady>:
{
 8009af8:	b480      	push	{r7}
 8009afa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8009afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b0a:	d101      	bne.n	8009b10 <LL_RCC_PLLSAI1_IsReady+0x18>
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	e000      	b.n	8009b12 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8009b10:	2300      	movs	r3, #0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b088      	sub	sp, #32
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8009b24:	2300      	movs	r3, #0
 8009b26:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8009b28:	2300      	movs	r3, #0
 8009b2a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d034      	beq.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009b40:	d021      	beq.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8009b42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009b46:	d81b      	bhi.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009b48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009b4c:	d01d      	beq.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8009b4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009b52:	d815      	bhi.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00b      	beq.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8009b58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b5c:	d110      	bne.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8009b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b6c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8009b6e:	e00d      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	3304      	adds	r3, #4
 8009b74:	4618      	mov	r0, r3
 8009b76:	f000 f94d 	bl	8009e14 <RCCEx_PLLSAI1_ConfigNP>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009b7e:	e005      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	77fb      	strb	r3, [r7, #31]
        break;
 8009b84:	e002      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8009b86:	bf00      	nop
 8009b88:	e000      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8009b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b8c:	7ffb      	ldrb	r3, [r7, #31]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d105      	bne.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7ff fee8 	bl	800996c <LL_RCC_SetSAIClockSource>
 8009b9c:	e001      	b.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b9e:	7ffb      	ldrb	r3, [r7, #31]
 8009ba0:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d046      	beq.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8009bae:	f7ff ff56 	bl	8009a5e <LL_RCC_GetRTCClockSource>
 8009bb2:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb8:	69ba      	ldr	r2, [r7, #24]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d03c      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8009bbe:	f7fe fbf1 	bl	80083a4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d105      	bne.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7ff ff30 	bl	8009a32 <LL_RCC_SetRTCClockSource>
 8009bd2:	e02e      	b.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8009bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bdc:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8009bde:	f7ff ff4b 	bl	8009a78 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8009be2:	f7ff ff5a 	bl	8009a9a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8009bf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8009bfe:	f7ff fde1 	bl	80097c4 <LL_RCC_LSE_IsEnabled>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d114      	bne.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009c08:	f7fd fc6a 	bl	80074e0 <HAL_GetTick>
 8009c0c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8009c0e:	e00b      	b.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c10:	f7fd fc66 	bl	80074e0 <HAL_GetTick>
 8009c14:	4602      	mov	r2, r0
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	1ad3      	subs	r3, r2, r3
 8009c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d902      	bls.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8009c22:	2303      	movs	r3, #3
 8009c24:	77fb      	strb	r3, [r7, #31]
              break;
 8009c26:	e004      	b.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8009c28:	f7ff fdde 	bl	80097e8 <LL_RCC_LSE_IsReady>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d1ee      	bne.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8009c32:	7ffb      	ldrb	r3, [r7, #31]
 8009c34:	77bb      	strb	r3, [r7, #30]
 8009c36:	e001      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c38:	7ffb      	ldrb	r3, [r7, #31]
 8009c3a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f003 0301 	and.w	r3, r3, #1
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d004      	beq.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	699b      	ldr	r3, [r3, #24]
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f7ff fe2a 	bl	80098a6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f003 0302 	and.w	r3, r3, #2
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d004      	beq.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	69db      	ldr	r3, [r3, #28]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7ff fe35 	bl	80098d2 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f003 0310 	and.w	r3, r3, #16
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d004      	beq.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7ff fe5d 	bl	8009938 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f003 0320 	and.w	r3, r3, #32
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d004      	beq.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7ff fe52 	bl	8009938 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 0304 	and.w	r3, r3, #4
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d004      	beq.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6a1b      	ldr	r3, [r3, #32]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7ff fe2a 	bl	80098fe <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f003 0308 	and.w	r3, r3, #8
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d004      	beq.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7ff fe1f 	bl	80098fe <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d022      	beq.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7ff fe8d 	bl	80099f0 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009cde:	d107      	bne.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8009ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009cee:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cf4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009cf8:	d10b      	bne.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	3304      	adds	r3, #4
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f000 f8e3 	bl	8009eca <RCCEx_PLLSAI1_ConfigNQ>
 8009d04:	4603      	mov	r3, r0
 8009d06:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8009d08:	7ffb      	ldrb	r3, [r7, #31]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d001      	beq.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8009d0e:	7ffb      	ldrb	r3, [r7, #31]
 8009d10:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d02b      	beq.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d26:	d008      	beq.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d30:	d003      	beq.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d105      	bne.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7ff fe2a 	bl	8009998 <LL_RCC_SetRNGClockSource>
 8009d44:	e00a      	b.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d4e:	60fb      	str	r3, [r7, #12]
 8009d50:	2000      	movs	r0, #0
 8009d52:	f7ff fe21 	bl	8009998 <LL_RCC_SetRNGClockSource>
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f7ff fe34 	bl	80099c4 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d60:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8009d64:	d107      	bne.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8009d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d74:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d022      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7ff fe3d 	bl	8009a06 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d94:	d107      	bne.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009da4:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009daa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009dae:	d10b      	bne.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	3304      	adds	r3, #4
 8009db4:	4618      	mov	r0, r3
 8009db6:	f000 f8e3 	bl	8009f80 <RCCEx_PLLSAI1_ConfigNR>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8009dbe:	7ffb      	ldrb	r3, [r7, #31]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d001      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8009dc4:	7ffb      	ldrb	r3, [r7, #31]
 8009dc6:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d004      	beq.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7ff fd26 	bl	800982a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d009      	beq.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7ff fd45 	bl	800987e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7ff fd2c 	bl	8009856 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8009dfe:	7fbb      	ldrb	r3, [r7, #30]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3720      	adds	r7, #32
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8009e0c:	f7ff fcfe 	bl	800980c <LL_RCC_MSI_EnablePLLMode>
}
 8009e10:	bf00      	nop
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009e20:	f7ff fe5b 	bl	8009ada <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009e24:	f7fd fb5c 	bl	80074e0 <HAL_GetTick>
 8009e28:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009e2a:	e009      	b.n	8009e40 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009e2c:	f7fd fb58 	bl	80074e0 <HAL_GetTick>
 8009e30:	4602      	mov	r2, r0
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	1ad3      	subs	r3, r2, r3
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	d902      	bls.n	8009e40 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8009e3a:	2303      	movs	r3, #3
 8009e3c:	73fb      	strb	r3, [r7, #15]
      break;
 8009e3e:	e004      	b.n	8009e4a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009e40:	f7ff fe5a 	bl	8009af8 <LL_RCC_PLLSAI1_IsReady>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1f0      	bne.n	8009e2c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8009e4a:	7bfb      	ldrb	r3, [r7, #15]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d137      	bne.n	8009ec0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	021b      	lsls	r3, r3, #8
 8009e60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009e64:	4313      	orrs	r3, r2
 8009e66:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8009e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e6c:	691b      	ldr	r3, [r3, #16]
 8009e6e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009e7e:	f7ff fe1d 	bl	8009abc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e82:	f7fd fb2d 	bl	80074e0 <HAL_GetTick>
 8009e86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009e88:	e009      	b.n	8009e9e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009e8a:	f7fd fb29 	bl	80074e0 <HAL_GetTick>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	1ad3      	subs	r3, r2, r3
 8009e94:	2b02      	cmp	r3, #2
 8009e96:	d902      	bls.n	8009e9e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8009e98:	2303      	movs	r3, #3
 8009e9a:	73fb      	strb	r3, [r7, #15]
        break;
 8009e9c:	e004      	b.n	8009ea8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009e9e:	f7ff fe2b 	bl	8009af8 <LL_RCC_PLLSAI1_IsReady>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d1f0      	bne.n	8009e8a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8009ea8:	7bfb      	ldrb	r3, [r7, #15]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d108      	bne.n	8009ec0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009eb2:	691a      	ldr	r2, [r3, #16]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	691b      	ldr	r3, [r3, #16]
 8009eb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b084      	sub	sp, #16
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009ed6:	f7ff fe00 	bl	8009ada <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009eda:	f7fd fb01 	bl	80074e0 <HAL_GetTick>
 8009ede:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009ee0:	e009      	b.n	8009ef6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009ee2:	f7fd fafd 	bl	80074e0 <HAL_GetTick>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	1ad3      	subs	r3, r2, r3
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d902      	bls.n	8009ef6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8009ef4:	e004      	b.n	8009f00 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009ef6:	f7ff fdff 	bl	8009af8 <LL_RCC_PLLSAI1_IsReady>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d1f0      	bne.n	8009ee2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8009f00:	7bfb      	ldrb	r3, [r7, #15]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d137      	bne.n	8009f76 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	021b      	lsls	r3, r3, #8
 8009f16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8009f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f22:	691b      	ldr	r3, [r3, #16]
 8009f24:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009f30:	4313      	orrs	r3, r2
 8009f32:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009f34:	f7ff fdc2 	bl	8009abc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f38:	f7fd fad2 	bl	80074e0 <HAL_GetTick>
 8009f3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009f3e:	e009      	b.n	8009f54 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009f40:	f7fd face 	bl	80074e0 <HAL_GetTick>
 8009f44:	4602      	mov	r2, r0
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	2b02      	cmp	r3, #2
 8009f4c:	d902      	bls.n	8009f54 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8009f4e:	2303      	movs	r3, #3
 8009f50:	73fb      	strb	r3, [r7, #15]
        break;
 8009f52:	e004      	b.n	8009f5e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009f54:	f7ff fdd0 	bl	8009af8 <LL_RCC_PLLSAI1_IsReady>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d1f0      	bne.n	8009f40 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8009f5e:	7bfb      	ldrb	r3, [r7, #15]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d108      	bne.n	8009f76 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f68:	691a      	ldr	r2, [r3, #16]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	691b      	ldr	r3, [r3, #16]
 8009f6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009f72:	4313      	orrs	r3, r2
 8009f74:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3710      	adds	r7, #16
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009f8c:	f7ff fda5 	bl	8009ada <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009f90:	f7fd faa6 	bl	80074e0 <HAL_GetTick>
 8009f94:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009f96:	e009      	b.n	8009fac <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009f98:	f7fd faa2 	bl	80074e0 <HAL_GetTick>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	1ad3      	subs	r3, r2, r3
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d902      	bls.n	8009fac <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	73fb      	strb	r3, [r7, #15]
      break;
 8009faa:	e004      	b.n	8009fb6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009fac:	f7ff fda4 	bl	8009af8 <LL_RCC_PLLSAI1_IsReady>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1f0      	bne.n	8009f98 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8009fb6:	7bfb      	ldrb	r3, [r7, #15]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d137      	bne.n	800a02c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	021b      	lsls	r3, r3, #8
 8009fcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8009fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fd8:	691b      	ldr	r3, [r3, #16]
 8009fda:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009fea:	f7ff fd67 	bl	8009abc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fee:	f7fd fa77 	bl	80074e0 <HAL_GetTick>
 8009ff2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009ff4:	e009      	b.n	800a00a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009ff6:	f7fd fa73 	bl	80074e0 <HAL_GetTick>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	1ad3      	subs	r3, r2, r3
 800a000:	2b02      	cmp	r3, #2
 800a002:	d902      	bls.n	800a00a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800a004:	2303      	movs	r3, #3
 800a006:	73fb      	strb	r3, [r7, #15]
        break;
 800a008:	e004      	b.n	800a014 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a00a:	f7ff fd75 	bl	8009af8 <LL_RCC_PLLSAI1_IsReady>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b01      	cmp	r3, #1
 800a012:	d1f0      	bne.n	8009ff6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800a014:	7bfb      	ldrb	r3, [r7, #15]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d108      	bne.n	800a02c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800a01a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a01e:	691a      	ldr	r2, [r3, #16]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a028:	4313      	orrs	r3, r2
 800a02a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800a02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
	...

0800a038 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d101      	bne.n	800a04a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	e09f      	b.n	800a18a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a050:	b2db      	uxtb	r3, r3
 800a052:	2b00      	cmp	r3, #0
 800a054:	d106      	bne.n	800a064 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f7fc fe3a 	bl	8006cd8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2202      	movs	r2, #2
 800a068:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a06c:	4b49      	ldr	r3, [pc, #292]	; (800a194 <HAL_RTC_Init+0x15c>)
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	f003 0310 	and.w	r3, r3, #16
 800a074:	2b10      	cmp	r3, #16
 800a076:	d07e      	beq.n	800a176 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	22ca      	movs	r2, #202	; 0xca
 800a07e:	625a      	str	r2, [r3, #36]	; 0x24
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2253      	movs	r2, #83	; 0x53
 800a086:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 f8ab 	bl	800a1e4 <RTC_EnterInitMode>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d00a      	beq.n	800a0aa <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	22ff      	movs	r2, #255	; 0xff
 800a09a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2204      	movs	r2, #4
 800a0a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	73fb      	strb	r3, [r7, #15]
 800a0a8:	e067      	b.n	800a17a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	6812      	ldr	r2, [r2, #0]
 800a0b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a0b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0bc:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	6899      	ldr	r1, [r3, #8]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	685a      	ldr	r2, [r3, #4]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	691b      	ldr	r3, [r3, #16]
 800a0cc:	431a      	orrs	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	699b      	ldr	r3, [r3, #24]
 800a0d2:	431a      	orrs	r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	430a      	orrs	r2, r1
 800a0da:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	68d2      	ldr	r2, [r2, #12]
 800a0e4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	6919      	ldr	r1, [r3, #16]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	041a      	lsls	r2, r3, #16
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	430a      	orrs	r2, r1
 800a0f8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	68da      	ldr	r2, [r3, #12]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a108:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f022 0203 	bic.w	r2, r2, #3
 800a118:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	69da      	ldr	r2, [r3, #28]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	695b      	ldr	r3, [r3, #20]
 800a128:	431a      	orrs	r2, r3
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	430a      	orrs	r2, r1
 800a130:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	f003 0320 	and.w	r3, r3, #32
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d113      	bne.n	800a168 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 f829 	bl	800a198 <HAL_RTC_WaitForSynchro>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00d      	beq.n	800a168 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	22ff      	movs	r2, #255	; 0xff
 800a152:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2204      	movs	r2, #4
 800a158:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800a164:	2301      	movs	r3, #1
 800a166:	e010      	b.n	800a18a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	22ff      	movs	r2, #255	; 0xff
 800a16e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 800a170:	2300      	movs	r3, #0
 800a172:	73fb      	strb	r3, [r7, #15]
 800a174:	e001      	b.n	800a17a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800a176:	2300      	movs	r3, #0
 800a178:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800a17a:	7bfb      	ldrb	r3, [r7, #15]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d103      	bne.n	800a188 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800a188:	7bfb      	ldrb	r3, [r7, #15]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	40002800 	.word	0x40002800

0800a198 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	68da      	ldr	r2, [r3, #12]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a1ae:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800a1b0:	f7fd f996 	bl	80074e0 <HAL_GetTick>
 800a1b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a1b6:	e009      	b.n	800a1cc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a1b8:	f7fd f992 	bl	80074e0 <HAL_GetTick>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	1ad3      	subs	r3, r2, r3
 800a1c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a1c6:	d901      	bls.n	800a1cc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800a1c8:	2303      	movs	r3, #3
 800a1ca:	e007      	b.n	800a1dc <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	f003 0320 	and.w	r3, r3, #32
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d0ee      	beq.n	800a1b8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d119      	bne.n	800a22e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a202:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a204:	f7fd f96c 	bl	80074e0 <HAL_GetTick>
 800a208:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a20a:	e009      	b.n	800a220 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a20c:	f7fd f968 	bl	80074e0 <HAL_GetTick>
 800a210:	4602      	mov	r2, r0
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	1ad3      	subs	r3, r2, r3
 800a216:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a21a:	d901      	bls.n	800a220 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800a21c:	2303      	movs	r3, #3
 800a21e:	e007      	b.n	800a230 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d0ee      	beq.n	800a20c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b086      	sub	sp, #24
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d101      	bne.n	800a252 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800a24e:	2302      	movs	r3, #2
 800a250:	e0a8      	b.n	800a3a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2201      	movs	r2, #1
 800a256:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2202      	movs	r2, #2
 800a25e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	22ca      	movs	r2, #202	; 0xca
 800a268:	625a      	str	r2, [r3, #36]	; 0x24
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2253      	movs	r2, #83	; 0x53
 800a270:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d020      	beq.n	800a2c2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800a280:	f7fd f92e 	bl	80074e0 <HAL_GetTick>
 800a284:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800a286:	e015      	b.n	800a2b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a288:	f7fd f92a 	bl	80074e0 <HAL_GetTick>
 800a28c:	4602      	mov	r2, r0
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	1ad3      	subs	r3, r2, r3
 800a292:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a296:	d90d      	bls.n	800a2b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	22ff      	movs	r2, #255	; 0xff
 800a29e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2203      	movs	r2, #3
 800a2a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800a2b0:	2303      	movs	r3, #3
 800a2b2:	e077      	b.n	800a3a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	f003 0304 	and.w	r3, r3, #4
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d1e2      	bne.n	800a288 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	689a      	ldr	r2, [r3, #8]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2d0:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	b2da      	uxtb	r2, r3
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800a2e2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800a2e4:	f7fd f8fc 	bl	80074e0 <HAL_GetTick>
 800a2e8:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800a2ea:	e015      	b.n	800a318 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a2ec:	f7fd f8f8 	bl	80074e0 <HAL_GetTick>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	1ad3      	subs	r3, r2, r3
 800a2f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a2fa:	d90d      	bls.n	800a318 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	22ff      	movs	r2, #255	; 0xff
 800a302:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2203      	movs	r2, #3
 800a308:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800a314:	2303      	movs	r3, #3
 800a316:	e045      	b.n	800a3a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	f003 0304 	and.w	r3, r3, #4
 800a322:	2b00      	cmp	r3, #0
 800a324:	d0e2      	beq.n	800a2ec <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	68ba      	ldr	r2, [r7, #8]
 800a32c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	689a      	ldr	r2, [r3, #8]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f022 0207 	bic.w	r2, r2, #7
 800a33c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	6899      	ldr	r1, [r3, #8]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	430a      	orrs	r2, r1
 800a34c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800a34e:	4b17      	ldr	r3, [pc, #92]	; (800a3ac <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800a350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a354:	4a15      	ldr	r2, [pc, #84]	; (800a3ac <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800a356:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a35a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800a35e:	4b13      	ldr	r3, [pc, #76]	; (800a3ac <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a12      	ldr	r2, [pc, #72]	; (800a3ac <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800a364:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a368:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	689a      	ldr	r2, [r3, #8]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a378:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	689a      	ldr	r2, [r3, #8]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a388:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	22ff      	movs	r2, #255	; 0xff
 800a390:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2201      	movs	r2, #1
 800a396:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2200      	movs	r2, #0
 800a39e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3718      	adds	r7, #24
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	58000800 	.word	0x58000800

0800a3b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d101      	bne.n	800a3c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e095      	b.n	800a4ee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d108      	bne.n	800a3dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a3d2:	d009      	beq.n	800a3e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	61da      	str	r2, [r3, #28]
 800a3da:	e005      	b.n	800a3e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d106      	bne.n	800a408 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f7fc fc9e 	bl	8006d44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2202      	movs	r2, #2
 800a40c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a41e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a428:	d902      	bls.n	800a430 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a42a:	2300      	movs	r3, #0
 800a42c:	60fb      	str	r3, [r7, #12]
 800a42e:	e002      	b.n	800a436 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a434:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a43e:	d007      	beq.n	800a450 <HAL_SPI_Init+0xa0>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a448:	d002      	beq.n	800a450 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a460:	431a      	orrs	r2, r3
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	691b      	ldr	r3, [r3, #16]
 800a466:	f003 0302 	and.w	r3, r3, #2
 800a46a:	431a      	orrs	r2, r3
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	695b      	ldr	r3, [r3, #20]
 800a470:	f003 0301 	and.w	r3, r3, #1
 800a474:	431a      	orrs	r2, r3
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	699b      	ldr	r3, [r3, #24]
 800a47a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a47e:	431a      	orrs	r2, r3
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	69db      	ldr	r3, [r3, #28]
 800a484:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a488:	431a      	orrs	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6a1b      	ldr	r3, [r3, #32]
 800a48e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a492:	ea42 0103 	orr.w	r1, r2, r3
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a49a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	430a      	orrs	r2, r1
 800a4a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	699b      	ldr	r3, [r3, #24]
 800a4aa:	0c1b      	lsrs	r3, r3, #16
 800a4ac:	f003 0204 	and.w	r2, r3, #4
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b4:	f003 0310 	and.w	r3, r3, #16
 800a4b8:	431a      	orrs	r2, r3
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4be:	f003 0308 	and.w	r3, r3, #8
 800a4c2:	431a      	orrs	r2, r3
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a4cc:	ea42 0103 	orr.w	r1, r2, r3
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	430a      	orrs	r2, r1
 800a4dc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b088      	sub	sp, #32
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	60f8      	str	r0, [r7, #12]
 800a4fe:	60b9      	str	r1, [r7, #8]
 800a500:	603b      	str	r3, [r7, #0]
 800a502:	4613      	mov	r3, r2
 800a504:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a506:	2300      	movs	r3, #0
 800a508:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a510:	2b01      	cmp	r3, #1
 800a512:	d101      	bne.n	800a518 <HAL_SPI_Transmit+0x22>
 800a514:	2302      	movs	r3, #2
 800a516:	e15f      	b.n	800a7d8 <HAL_SPI_Transmit+0x2e2>
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a520:	f7fc ffde 	bl	80074e0 <HAL_GetTick>
 800a524:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a526:	88fb      	ldrh	r3, [r7, #6]
 800a528:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a530:	b2db      	uxtb	r3, r3
 800a532:	2b01      	cmp	r3, #1
 800a534:	d002      	beq.n	800a53c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a536:	2302      	movs	r3, #2
 800a538:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a53a:	e148      	b.n	800a7ce <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d002      	beq.n	800a548 <HAL_SPI_Transmit+0x52>
 800a542:	88fb      	ldrh	r3, [r7, #6]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d102      	bne.n	800a54e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a54c:	e13f      	b.n	800a7ce <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2203      	movs	r2, #3
 800a552:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2200      	movs	r2, #0
 800a55a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	88fa      	ldrh	r2, [r7, #6]
 800a566:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	88fa      	ldrh	r2, [r7, #6]
 800a56c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2200      	movs	r2, #0
 800a572:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2200      	movs	r2, #0
 800a578:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2200      	movs	r2, #0
 800a580:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2200      	movs	r2, #0
 800a588:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2200      	movs	r2, #0
 800a58e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a598:	d10f      	bne.n	800a5ba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a5b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5c4:	2b40      	cmp	r3, #64	; 0x40
 800a5c6:	d007      	beq.n	800a5d8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	68db      	ldr	r3, [r3, #12]
 800a5dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a5e0:	d94f      	bls.n	800a682 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d002      	beq.n	800a5f0 <HAL_SPI_Transmit+0xfa>
 800a5ea:	8afb      	ldrh	r3, [r7, #22]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d142      	bne.n	800a676 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f4:	881a      	ldrh	r2, [r3, #0]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a600:	1c9a      	adds	r2, r3, #2
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	3b01      	subs	r3, #1
 800a60e:	b29a      	uxth	r2, r3
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a614:	e02f      	b.n	800a676 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	f003 0302 	and.w	r3, r3, #2
 800a620:	2b02      	cmp	r3, #2
 800a622:	d112      	bne.n	800a64a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a628:	881a      	ldrh	r2, [r3, #0]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a634:	1c9a      	adds	r2, r3, #2
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a63e:	b29b      	uxth	r3, r3
 800a640:	3b01      	subs	r3, #1
 800a642:	b29a      	uxth	r2, r3
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a648:	e015      	b.n	800a676 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a64a:	f7fc ff49 	bl	80074e0 <HAL_GetTick>
 800a64e:	4602      	mov	r2, r0
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	1ad3      	subs	r3, r2, r3
 800a654:	683a      	ldr	r2, [r7, #0]
 800a656:	429a      	cmp	r2, r3
 800a658:	d803      	bhi.n	800a662 <HAL_SPI_Transmit+0x16c>
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a660:	d102      	bne.n	800a668 <HAL_SPI_Transmit+0x172>
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d106      	bne.n	800a676 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800a668:	2303      	movs	r3, #3
 800a66a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2201      	movs	r2, #1
 800a670:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800a674:	e0ab      	b.n	800a7ce <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d1ca      	bne.n	800a616 <HAL_SPI_Transmit+0x120>
 800a680:	e080      	b.n	800a784 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d002      	beq.n	800a690 <HAL_SPI_Transmit+0x19a>
 800a68a:	8afb      	ldrh	r3, [r7, #22]
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d174      	bne.n	800a77a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a694:	b29b      	uxth	r3, r3
 800a696:	2b01      	cmp	r3, #1
 800a698:	d912      	bls.n	800a6c0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a69e:	881a      	ldrh	r2, [r3, #0]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6aa:	1c9a      	adds	r2, r3, #2
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	3b02      	subs	r3, #2
 800a6b8:	b29a      	uxth	r2, r3
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a6be:	e05c      	b.n	800a77a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	330c      	adds	r3, #12
 800a6ca:	7812      	ldrb	r2, [r2, #0]
 800a6cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d2:	1c5a      	adds	r2, r3, #1
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	b29a      	uxth	r2, r3
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a6e6:	e048      	b.n	800a77a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	f003 0302 	and.w	r3, r3, #2
 800a6f2:	2b02      	cmp	r3, #2
 800a6f4:	d12b      	bne.n	800a74e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d912      	bls.n	800a726 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a704:	881a      	ldrh	r2, [r3, #0]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a710:	1c9a      	adds	r2, r3, #2
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	3b02      	subs	r3, #2
 800a71e:	b29a      	uxth	r2, r3
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a724:	e029      	b.n	800a77a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	330c      	adds	r3, #12
 800a730:	7812      	ldrb	r2, [r2, #0]
 800a732:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a738:	1c5a      	adds	r2, r3, #1
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a742:	b29b      	uxth	r3, r3
 800a744:	3b01      	subs	r3, #1
 800a746:	b29a      	uxth	r2, r3
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a74c:	e015      	b.n	800a77a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a74e:	f7fc fec7 	bl	80074e0 <HAL_GetTick>
 800a752:	4602      	mov	r2, r0
 800a754:	69bb      	ldr	r3, [r7, #24]
 800a756:	1ad3      	subs	r3, r2, r3
 800a758:	683a      	ldr	r2, [r7, #0]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d803      	bhi.n	800a766 <HAL_SPI_Transmit+0x270>
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a764:	d102      	bne.n	800a76c <HAL_SPI_Transmit+0x276>
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d106      	bne.n	800a77a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800a76c:	2303      	movs	r3, #3
 800a76e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2201      	movs	r2, #1
 800a774:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800a778:	e029      	b.n	800a7ce <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a77e:	b29b      	uxth	r3, r3
 800a780:	2b00      	cmp	r3, #0
 800a782:	d1b1      	bne.n	800a6e8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a784:	69ba      	ldr	r2, [r7, #24]
 800a786:	6839      	ldr	r1, [r7, #0]
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f000 fc7d 	bl	800b088 <SPI_EndRxTxTransaction>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d002      	beq.n	800a79a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2220      	movs	r2, #32
 800a798:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	689b      	ldr	r3, [r3, #8]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d10a      	bne.n	800a7b8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	613b      	str	r3, [r7, #16]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	613b      	str	r3, [r7, #16]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	613b      	str	r3, [r7, #16]
 800a7b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d002      	beq.n	800a7c6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	77fb      	strb	r3, [r7, #31]
 800a7c4:	e003      	b.n	800a7ce <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a7d6:	7ffb      	ldrb	r3, [r7, #31]
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3720      	adds	r7, #32
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b08a      	sub	sp, #40	; 0x28
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	60b9      	str	r1, [r7, #8]
 800a7ea:	607a      	str	r2, [r7, #4]
 800a7ec:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d101      	bne.n	800a806 <HAL_SPI_TransmitReceive+0x26>
 800a802:	2302      	movs	r3, #2
 800a804:	e20a      	b.n	800ac1c <HAL_SPI_TransmitReceive+0x43c>
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2201      	movs	r2, #1
 800a80a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a80e:	f7fc fe67 	bl	80074e0 <HAL_GetTick>
 800a812:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a81a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a822:	887b      	ldrh	r3, [r7, #2]
 800a824:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a826:	887b      	ldrh	r3, [r7, #2]
 800a828:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a82a:	7efb      	ldrb	r3, [r7, #27]
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d00e      	beq.n	800a84e <HAL_SPI_TransmitReceive+0x6e>
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a836:	d106      	bne.n	800a846 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d102      	bne.n	800a846 <HAL_SPI_TransmitReceive+0x66>
 800a840:	7efb      	ldrb	r3, [r7, #27]
 800a842:	2b04      	cmp	r3, #4
 800a844:	d003      	beq.n	800a84e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a846:	2302      	movs	r3, #2
 800a848:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a84c:	e1e0      	b.n	800ac10 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d005      	beq.n	800a860 <HAL_SPI_TransmitReceive+0x80>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d002      	beq.n	800a860 <HAL_SPI_TransmitReceive+0x80>
 800a85a:	887b      	ldrh	r3, [r7, #2]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d103      	bne.n	800a868 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a860:	2301      	movs	r3, #1
 800a862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a866:	e1d3      	b.n	800ac10 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	2b04      	cmp	r3, #4
 800a872:	d003      	beq.n	800a87c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2205      	movs	r2, #5
 800a878:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2200      	movs	r2, #0
 800a880:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	887a      	ldrh	r2, [r7, #2]
 800a88c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	887a      	ldrh	r2, [r7, #2]
 800a894:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	68ba      	ldr	r2, [r7, #8]
 800a89c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	887a      	ldrh	r2, [r7, #2]
 800a8a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	887a      	ldrh	r2, [r7, #2]
 800a8a8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a8be:	d802      	bhi.n	800a8c6 <HAL_SPI_TransmitReceive+0xe6>
 800a8c0:	8a3b      	ldrh	r3, [r7, #16]
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d908      	bls.n	800a8d8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	685a      	ldr	r2, [r3, #4]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a8d4:	605a      	str	r2, [r3, #4]
 800a8d6:	e007      	b.n	800a8e8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	685a      	ldr	r2, [r3, #4]
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a8e6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8f2:	2b40      	cmp	r3, #64	; 0x40
 800a8f4:	d007      	beq.n	800a906 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a904:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a90e:	f240 8081 	bls.w	800aa14 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d002      	beq.n	800a920 <HAL_SPI_TransmitReceive+0x140>
 800a91a:	8a7b      	ldrh	r3, [r7, #18]
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d16d      	bne.n	800a9fc <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a924:	881a      	ldrh	r2, [r3, #0]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a930:	1c9a      	adds	r2, r3, #2
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	3b01      	subs	r3, #1
 800a93e:	b29a      	uxth	r2, r3
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a944:	e05a      	b.n	800a9fc <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	689b      	ldr	r3, [r3, #8]
 800a94c:	f003 0302 	and.w	r3, r3, #2
 800a950:	2b02      	cmp	r3, #2
 800a952:	d11b      	bne.n	800a98c <HAL_SPI_TransmitReceive+0x1ac>
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a958:	b29b      	uxth	r3, r3
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d016      	beq.n	800a98c <HAL_SPI_TransmitReceive+0x1ac>
 800a95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a960:	2b01      	cmp	r3, #1
 800a962:	d113      	bne.n	800a98c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a968:	881a      	ldrh	r2, [r3, #0]
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a974:	1c9a      	adds	r2, r3, #2
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a97e:	b29b      	uxth	r3, r3
 800a980:	3b01      	subs	r3, #1
 800a982:	b29a      	uxth	r2, r3
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a988:	2300      	movs	r3, #0
 800a98a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	689b      	ldr	r3, [r3, #8]
 800a992:	f003 0301 	and.w	r3, r3, #1
 800a996:	2b01      	cmp	r3, #1
 800a998:	d11c      	bne.n	800a9d4 <HAL_SPI_TransmitReceive+0x1f4>
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d016      	beq.n	800a9d4 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	68da      	ldr	r2, [r3, #12]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b0:	b292      	uxth	r2, r2
 800a9b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b8:	1c9a      	adds	r2, r3, #2
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	3b01      	subs	r3, #1
 800a9c8:	b29a      	uxth	r2, r3
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a9d4:	f7fc fd84 	bl	80074e0 <HAL_GetTick>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	1ad3      	subs	r3, r2, r3
 800a9de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d80b      	bhi.n	800a9fc <HAL_SPI_TransmitReceive+0x21c>
 800a9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ea:	d007      	beq.n	800a9fc <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800a9ec:	2303      	movs	r3, #3
 800a9ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800a9fa:	e109      	b.n	800ac10 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d19f      	bne.n	800a946 <HAL_SPI_TransmitReceive+0x166>
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d199      	bne.n	800a946 <HAL_SPI_TransmitReceive+0x166>
 800aa12:	e0e3      	b.n	800abdc <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d003      	beq.n	800aa24 <HAL_SPI_TransmitReceive+0x244>
 800aa1c:	8a7b      	ldrh	r3, [r7, #18]
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	f040 80cf 	bne.w	800abc2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d912      	bls.n	800aa54 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa32:	881a      	ldrh	r2, [r3, #0]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa3e:	1c9a      	adds	r2, r3, #2
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	3b02      	subs	r3, #2
 800aa4c:	b29a      	uxth	r2, r3
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aa52:	e0b6      	b.n	800abc2 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	330c      	adds	r3, #12
 800aa5e:	7812      	ldrb	r2, [r2, #0]
 800aa60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa66:	1c5a      	adds	r2, r3, #1
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	3b01      	subs	r3, #1
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa7a:	e0a2      	b.n	800abc2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	689b      	ldr	r3, [r3, #8]
 800aa82:	f003 0302 	and.w	r3, r3, #2
 800aa86:	2b02      	cmp	r3, #2
 800aa88:	d134      	bne.n	800aaf4 <HAL_SPI_TransmitReceive+0x314>
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d02f      	beq.n	800aaf4 <HAL_SPI_TransmitReceive+0x314>
 800aa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d12c      	bne.n	800aaf4 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d912      	bls.n	800aaca <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa8:	881a      	ldrh	r2, [r3, #0]
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab4:	1c9a      	adds	r2, r3, #2
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	3b02      	subs	r3, #2
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aac8:	e012      	b.n	800aaf0 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	330c      	adds	r3, #12
 800aad4:	7812      	ldrb	r2, [r2, #0]
 800aad6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aadc:	1c5a      	adds	r2, r3, #1
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	3b01      	subs	r3, #1
 800aaea:	b29a      	uxth	r2, r3
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	689b      	ldr	r3, [r3, #8]
 800aafa:	f003 0301 	and.w	r3, r3, #1
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d148      	bne.n	800ab94 <HAL_SPI_TransmitReceive+0x3b4>
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d042      	beq.n	800ab94 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	d923      	bls.n	800ab62 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	68da      	ldr	r2, [r3, #12]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab24:	b292      	uxth	r2, r2
 800ab26:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab2c:	1c9a      	adds	r2, r3, #2
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	3b02      	subs	r3, #2
 800ab3c:	b29a      	uxth	r2, r3
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d81f      	bhi.n	800ab90 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	685a      	ldr	r2, [r3, #4]
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ab5e:	605a      	str	r2, [r3, #4]
 800ab60:	e016      	b.n	800ab90 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f103 020c 	add.w	r2, r3, #12
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab6e:	7812      	ldrb	r2, [r2, #0]
 800ab70:	b2d2      	uxtb	r2, r2
 800ab72:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab78:	1c5a      	adds	r2, r3, #1
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	3b01      	subs	r3, #1
 800ab88:	b29a      	uxth	r2, r3
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ab90:	2301      	movs	r3, #1
 800ab92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ab94:	f7fc fca4 	bl	80074e0 <HAL_GetTick>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	69fb      	ldr	r3, [r7, #28]
 800ab9c:	1ad3      	subs	r3, r2, r3
 800ab9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d803      	bhi.n	800abac <HAL_SPI_TransmitReceive+0x3cc>
 800aba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abaa:	d102      	bne.n	800abb2 <HAL_SPI_TransmitReceive+0x3d2>
 800abac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d107      	bne.n	800abc2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800abb2:	2303      	movs	r3, #3
 800abb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2201      	movs	r2, #1
 800abbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800abc0:	e026      	b.n	800ac10 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	2b00      	cmp	r3, #0
 800abca:	f47f af57 	bne.w	800aa7c <HAL_SPI_TransmitReceive+0x29c>
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	f47f af50 	bne.w	800aa7c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800abdc:	69fa      	ldr	r2, [r7, #28]
 800abde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f000 fa51 	bl	800b088 <SPI_EndRxTxTransaction>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d005      	beq.n	800abf8 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2220      	movs	r2, #32
 800abf6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d003      	beq.n	800ac08 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800ac00:	2301      	movs	r3, #1
 800ac02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ac06:	e003      	b.n	800ac10 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2200      	movs	r2, #0
 800ac14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ac18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3728      	adds	r7, #40	; 0x28
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b088      	sub	sp, #32
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	689b      	ldr	r3, [r3, #8]
 800ac3a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ac3c:	69bb      	ldr	r3, [r7, #24]
 800ac3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d10e      	bne.n	800ac64 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d009      	beq.n	800ac64 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ac50:	69fb      	ldr	r3, [r7, #28]
 800ac52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d004      	beq.n	800ac64 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	4798      	blx	r3
    return;
 800ac62:	e0ce      	b.n	800ae02 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ac64:	69bb      	ldr	r3, [r7, #24]
 800ac66:	f003 0302 	and.w	r3, r3, #2
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d009      	beq.n	800ac82 <HAL_SPI_IRQHandler+0x5e>
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d004      	beq.n	800ac82 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	4798      	blx	r3
    return;
 800ac80:	e0bf      	b.n	800ae02 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	f003 0320 	and.w	r3, r3, #32
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d10a      	bne.n	800aca2 <HAL_SPI_IRQHandler+0x7e>
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d105      	bne.n	800aca2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	f000 80b0 	beq.w	800ae02 <HAL_SPI_IRQHandler+0x1de>
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	f003 0320 	and.w	r3, r3, #32
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	f000 80aa 	beq.w	800ae02 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d023      	beq.n	800ad00 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	2b03      	cmp	r3, #3
 800acc2:	d011      	beq.n	800ace8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acc8:	f043 0204 	orr.w	r2, r3, #4
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800acd0:	2300      	movs	r3, #0
 800acd2:	617b      	str	r3, [r7, #20]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	617b      	str	r3, [r7, #20]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	617b      	str	r3, [r7, #20]
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	e00b      	b.n	800ad00 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ace8:	2300      	movs	r3, #0
 800acea:	613b      	str	r3, [r7, #16]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	68db      	ldr	r3, [r3, #12]
 800acf2:	613b      	str	r3, [r7, #16]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	613b      	str	r3, [r7, #16]
 800acfc:	693b      	ldr	r3, [r7, #16]
        return;
 800acfe:	e080      	b.n	800ae02 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	f003 0320 	and.w	r3, r3, #32
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d014      	beq.n	800ad34 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad0e:	f043 0201 	orr.w	r2, r3, #1
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ad16:	2300      	movs	r3, #0
 800ad18:	60fb      	str	r3, [r7, #12]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	60fb      	str	r3, [r7, #12]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad30:	601a      	str	r2, [r3, #0]
 800ad32:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00c      	beq.n	800ad58 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad42:	f043 0208 	orr.w	r2, r3, #8
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	60bb      	str	r3, [r7, #8]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	689b      	ldr	r3, [r3, #8]
 800ad54:	60bb      	str	r3, [r7, #8]
 800ad56:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d04f      	beq.n	800ae00 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	685a      	ldr	r2, [r3, #4]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ad6e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2201      	movs	r2, #1
 800ad74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	f003 0302 	and.w	r3, r3, #2
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d104      	bne.n	800ad8c <HAL_SPI_IRQHandler+0x168>
 800ad82:	69fb      	ldr	r3, [r7, #28]
 800ad84:	f003 0301 	and.w	r3, r3, #1
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d034      	beq.n	800adf6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	685a      	ldr	r2, [r3, #4]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f022 0203 	bic.w	r2, r2, #3
 800ad9a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d011      	beq.n	800adc8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ada8:	4a17      	ldr	r2, [pc, #92]	; (800ae08 <HAL_SPI_IRQHandler+0x1e4>)
 800adaa:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7fc fe5a 	bl	8007a6a <HAL_DMA_Abort_IT>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d005      	beq.n	800adc8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d016      	beq.n	800adfe <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800add4:	4a0c      	ldr	r2, [pc, #48]	; (800ae08 <HAL_SPI_IRQHandler+0x1e4>)
 800add6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800addc:	4618      	mov	r0, r3
 800adde:	f7fc fe44 	bl	8007a6a <HAL_DMA_Abort_IT>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d00a      	beq.n	800adfe <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800adf4:	e003      	b.n	800adfe <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 f808 	bl	800ae0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800adfc:	e000      	b.n	800ae00 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800adfe:	bf00      	nop
    return;
 800ae00:	bf00      	nop
  }
}
 800ae02:	3720      	adds	r7, #32
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}
 800ae08:	0800ae21 	.word	0x0800ae21

0800ae0c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ae14:	bf00      	nop
 800ae16:	370c      	adds	r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae2c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2200      	movs	r2, #0
 800ae32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ae3c:	68f8      	ldr	r0, [r7, #12]
 800ae3e:	f7ff ffe5 	bl	800ae0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ae42:	bf00      	nop
 800ae44:	3710      	adds	r7, #16
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
	...

0800ae4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b088      	sub	sp, #32
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	603b      	str	r3, [r7, #0]
 800ae58:	4613      	mov	r3, r2
 800ae5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ae5c:	f7fc fb40 	bl	80074e0 <HAL_GetTick>
 800ae60:	4602      	mov	r2, r0
 800ae62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae64:	1a9b      	subs	r3, r3, r2
 800ae66:	683a      	ldr	r2, [r7, #0]
 800ae68:	4413      	add	r3, r2
 800ae6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ae6c:	f7fc fb38 	bl	80074e0 <HAL_GetTick>
 800ae70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ae72:	4b39      	ldr	r3, [pc, #228]	; (800af58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	015b      	lsls	r3, r3, #5
 800ae78:	0d1b      	lsrs	r3, r3, #20
 800ae7a:	69fa      	ldr	r2, [r7, #28]
 800ae7c:	fb02 f303 	mul.w	r3, r2, r3
 800ae80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ae82:	e054      	b.n	800af2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae8a:	d050      	beq.n	800af2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ae8c:	f7fc fb28 	bl	80074e0 <HAL_GetTick>
 800ae90:	4602      	mov	r2, r0
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	1ad3      	subs	r3, r2, r3
 800ae96:	69fa      	ldr	r2, [r7, #28]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d902      	bls.n	800aea2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d13d      	bne.n	800af1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	685a      	ldr	r2, [r3, #4]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800aeb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aeba:	d111      	bne.n	800aee0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	689b      	ldr	r3, [r3, #8]
 800aec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aec4:	d004      	beq.n	800aed0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	689b      	ldr	r3, [r3, #8]
 800aeca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aece:	d107      	bne.n	800aee0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	681a      	ldr	r2, [r3, #0]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aede:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aee8:	d10f      	bne.n	800af0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aef8:	601a      	str	r2, [r3, #0]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2201      	movs	r2, #1
 800af0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2200      	movs	r2, #0
 800af16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800af1a:	2303      	movs	r3, #3
 800af1c:	e017      	b.n	800af4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d101      	bne.n	800af28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800af24:	2300      	movs	r3, #0
 800af26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	3b01      	subs	r3, #1
 800af2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	689a      	ldr	r2, [r3, #8]
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	4013      	ands	r3, r2
 800af38:	68ba      	ldr	r2, [r7, #8]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	bf0c      	ite	eq
 800af3e:	2301      	moveq	r3, #1
 800af40:	2300      	movne	r3, #0
 800af42:	b2db      	uxtb	r3, r3
 800af44:	461a      	mov	r2, r3
 800af46:	79fb      	ldrb	r3, [r7, #7]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d19b      	bne.n	800ae84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3720      	adds	r7, #32
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	20000154 	.word	0x20000154

0800af5c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b08a      	sub	sp, #40	; 0x28
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	607a      	str	r2, [r7, #4]
 800af68:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800af6a:	2300      	movs	r3, #0
 800af6c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800af6e:	f7fc fab7 	bl	80074e0 <HAL_GetTick>
 800af72:	4602      	mov	r2, r0
 800af74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af76:	1a9b      	subs	r3, r3, r2
 800af78:	683a      	ldr	r2, [r7, #0]
 800af7a:	4413      	add	r3, r2
 800af7c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800af7e:	f7fc faaf 	bl	80074e0 <HAL_GetTick>
 800af82:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	330c      	adds	r3, #12
 800af8a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800af8c:	4b3d      	ldr	r3, [pc, #244]	; (800b084 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	4613      	mov	r3, r2
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	4413      	add	r3, r2
 800af96:	00da      	lsls	r2, r3, #3
 800af98:	1ad3      	subs	r3, r2, r3
 800af9a:	0d1b      	lsrs	r3, r3, #20
 800af9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af9e:	fb02 f303 	mul.w	r3, r2, r3
 800afa2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800afa4:	e060      	b.n	800b068 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800afac:	d107      	bne.n	800afbe <SPI_WaitFifoStateUntilTimeout+0x62>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d104      	bne.n	800afbe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800afbc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc4:	d050      	beq.n	800b068 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800afc6:	f7fc fa8b 	bl	80074e0 <HAL_GetTick>
 800afca:	4602      	mov	r2, r0
 800afcc:	6a3b      	ldr	r3, [r7, #32]
 800afce:	1ad3      	subs	r3, r2, r3
 800afd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d902      	bls.n	800afdc <SPI_WaitFifoStateUntilTimeout+0x80>
 800afd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d13d      	bne.n	800b058 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	685a      	ldr	r2, [r3, #4]
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800afea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aff4:	d111      	bne.n	800b01a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	689b      	ldr	r3, [r3, #8]
 800affa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800affe:	d004      	beq.n	800b00a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b008:	d107      	bne.n	800b01a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b018:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b01e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b022:	d10f      	bne.n	800b044 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b032:	601a      	str	r2, [r3, #0]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b042:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2201      	movs	r2, #1
 800b048:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2200      	movs	r2, #0
 800b050:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b054:	2303      	movs	r3, #3
 800b056:	e010      	b.n	800b07a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b058:	69bb      	ldr	r3, [r7, #24]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d101      	bne.n	800b062 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b05e:	2300      	movs	r3, #0
 800b060:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800b062:	69bb      	ldr	r3, [r7, #24]
 800b064:	3b01      	subs	r3, #1
 800b066:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	689a      	ldr	r2, [r3, #8]
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	4013      	ands	r3, r2
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	429a      	cmp	r2, r3
 800b076:	d196      	bne.n	800afa6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b078:	2300      	movs	r3, #0
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3728      	adds	r7, #40	; 0x28
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	20000154 	.word	0x20000154

0800b088 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b086      	sub	sp, #24
 800b08c:	af02      	add	r7, sp, #8
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	2200      	movs	r2, #0
 800b09c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	f7ff ff5b 	bl	800af5c <SPI_WaitFifoStateUntilTimeout>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d007      	beq.n	800b0bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0b0:	f043 0220 	orr.w	r2, r3, #32
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b0b8:	2303      	movs	r3, #3
 800b0ba:	e027      	b.n	800b10c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	2180      	movs	r1, #128	; 0x80
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	f7ff fec0 	bl	800ae4c <SPI_WaitFlagStateUntilTimeout>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d007      	beq.n	800b0e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0d6:	f043 0220 	orr.w	r2, r3, #32
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b0de:	2303      	movs	r3, #3
 800b0e0:	e014      	b.n	800b10c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	9300      	str	r3, [sp, #0]
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f7ff ff34 	bl	800af5c <SPI_WaitFifoStateUntilTimeout>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d007      	beq.n	800b10a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0fe:	f043 0220 	orr.w	r2, r3, #32
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b106:	2303      	movs	r3, #3
 800b108:	e000      	b.n	800b10c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b10a:	2300      	movs	r3, #0
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3710      	adds	r7, #16
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <LL_RCC_GetUSARTClockSource>:
{
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800b11c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b120:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	4013      	ands	r3, r2
}
 800b128:	4618      	mov	r0, r3
 800b12a:	370c      	adds	r7, #12
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <LL_RCC_GetLPUARTClockSource>:
{
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800b13c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b140:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	4013      	ands	r3, r2
}
 800b148:	4618      	mov	r0, r3
 800b14a:	370c      	adds	r7, #12
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr

0800b154 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d101      	bne.n	800b166 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b162:	2301      	movs	r3, #1
 800b164:	e042      	b.n	800b1ec <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d106      	bne.n	800b17e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f7fb fe75 	bl	8006e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2224      	movs	r2, #36	; 0x24
 800b182:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f022 0201 	bic.w	r2, r2, #1
 800b194:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d002      	beq.n	800b1a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 fe22 	bl	800bde8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 fbf7 	bl	800b998 <UART_SetConfig>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d101      	bne.n	800b1b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e01b      	b.n	800b1ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	685a      	ldr	r2, [r3, #4]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b1c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	689a      	ldr	r2, [r3, #8]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b1d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f042 0201 	orr.w	r2, r2, #1
 800b1e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f000 fea1 	bl	800bf2c <UART_CheckIdleState>
 800b1ea:	4603      	mov	r3, r0
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3708      	adds	r7, #8
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b08a      	sub	sp, #40	; 0x28
 800b1f8:	af02      	add	r7, sp, #8
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	603b      	str	r3, [r7, #0]
 800b200:	4613      	mov	r3, r2
 800b202:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b20a:	2b20      	cmp	r3, #32
 800b20c:	d17b      	bne.n	800b306 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d002      	beq.n	800b21a <HAL_UART_Transmit+0x26>
 800b214:	88fb      	ldrh	r3, [r7, #6]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d101      	bne.n	800b21e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b21a:	2301      	movs	r3, #1
 800b21c:	e074      	b.n	800b308 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2200      	movs	r2, #0
 800b222:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2221      	movs	r2, #33	; 0x21
 800b22a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b22e:	f7fc f957 	bl	80074e0 <HAL_GetTick>
 800b232:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	88fa      	ldrh	r2, [r7, #6]
 800b238:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	88fa      	ldrh	r2, [r7, #6]
 800b240:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	689b      	ldr	r3, [r3, #8]
 800b248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b24c:	d108      	bne.n	800b260 <HAL_UART_Transmit+0x6c>
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d104      	bne.n	800b260 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b256:	2300      	movs	r3, #0
 800b258:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	61bb      	str	r3, [r7, #24]
 800b25e:	e003      	b.n	800b268 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b264:	2300      	movs	r3, #0
 800b266:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b268:	e030      	b.n	800b2cc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	9300      	str	r3, [sp, #0]
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	2200      	movs	r2, #0
 800b272:	2180      	movs	r1, #128	; 0x80
 800b274:	68f8      	ldr	r0, [r7, #12]
 800b276:	f000 ff03 	bl	800c080 <UART_WaitOnFlagUntilTimeout>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d005      	beq.n	800b28c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2220      	movs	r2, #32
 800b284:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b288:	2303      	movs	r3, #3
 800b28a:	e03d      	b.n	800b308 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d10b      	bne.n	800b2aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	881b      	ldrh	r3, [r3, #0]
 800b296:	461a      	mov	r2, r3
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b2a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	3302      	adds	r3, #2
 800b2a6:	61bb      	str	r3, [r7, #24]
 800b2a8:	e007      	b.n	800b2ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b2aa:	69fb      	ldr	r3, [r7, #28]
 800b2ac:	781a      	ldrb	r2, [r3, #0]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	3b01      	subs	r3, #1
 800b2c4:	b29a      	uxth	r2, r3
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1c8      	bne.n	800b26a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	9300      	str	r3, [sp, #0]
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	2140      	movs	r1, #64	; 0x40
 800b2e2:	68f8      	ldr	r0, [r7, #12]
 800b2e4:	f000 fecc 	bl	800c080 <UART_WaitOnFlagUntilTimeout>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d005      	beq.n	800b2fa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2220      	movs	r2, #32
 800b2f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800b2f6:	2303      	movs	r3, #3
 800b2f8:	e006      	b.n	800b308 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2220      	movs	r2, #32
 800b2fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b302:	2300      	movs	r3, #0
 800b304:	e000      	b.n	800b308 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b306:	2302      	movs	r3, #2
  }
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3720      	adds	r7, #32
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b0ba      	sub	sp, #232	; 0xe8
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	69db      	ldr	r3, [r3, #28]
 800b31e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	689b      	ldr	r3, [r3, #8]
 800b332:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b336:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b33a:	f640 030f 	movw	r3, #2063	; 0x80f
 800b33e:	4013      	ands	r3, r2
 800b340:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b344:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d11b      	bne.n	800b384 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b34c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b350:	f003 0320 	and.w	r3, r3, #32
 800b354:	2b00      	cmp	r3, #0
 800b356:	d015      	beq.n	800b384 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b35c:	f003 0320 	and.w	r3, r3, #32
 800b360:	2b00      	cmp	r3, #0
 800b362:	d105      	bne.n	800b370 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d009      	beq.n	800b384 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b374:	2b00      	cmp	r3, #0
 800b376:	f000 82e3 	beq.w	800b940 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	4798      	blx	r3
      }
      return;
 800b382:	e2dd      	b.n	800b940 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b384:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b388:	2b00      	cmp	r3, #0
 800b38a:	f000 8123 	beq.w	800b5d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b38e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b392:	4b8d      	ldr	r3, [pc, #564]	; (800b5c8 <HAL_UART_IRQHandler+0x2b8>)
 800b394:	4013      	ands	r3, r2
 800b396:	2b00      	cmp	r3, #0
 800b398:	d106      	bne.n	800b3a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b39a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b39e:	4b8b      	ldr	r3, [pc, #556]	; (800b5cc <HAL_UART_IRQHandler+0x2bc>)
 800b3a0:	4013      	ands	r3, r2
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	f000 8116 	beq.w	800b5d4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b3a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3ac:	f003 0301 	and.w	r3, r3, #1
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d011      	beq.n	800b3d8 <HAL_UART_IRQHandler+0xc8>
 800b3b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00b      	beq.n	800b3d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3ce:	f043 0201 	orr.w	r2, r3, #1
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b3d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3dc:	f003 0302 	and.w	r3, r3, #2
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d011      	beq.n	800b408 <HAL_UART_IRQHandler+0xf8>
 800b3e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3e8:	f003 0301 	and.w	r3, r3, #1
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d00b      	beq.n	800b408 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2202      	movs	r2, #2
 800b3f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3fe:	f043 0204 	orr.w	r2, r3, #4
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b40c:	f003 0304 	and.w	r3, r3, #4
 800b410:	2b00      	cmp	r3, #0
 800b412:	d011      	beq.n	800b438 <HAL_UART_IRQHandler+0x128>
 800b414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b418:	f003 0301 	and.w	r3, r3, #1
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d00b      	beq.n	800b438 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	2204      	movs	r2, #4
 800b426:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b42e:	f043 0202 	orr.w	r2, r3, #2
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b43c:	f003 0308 	and.w	r3, r3, #8
 800b440:	2b00      	cmp	r3, #0
 800b442:	d017      	beq.n	800b474 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b448:	f003 0320 	and.w	r3, r3, #32
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d105      	bne.n	800b45c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b450:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b454:	4b5c      	ldr	r3, [pc, #368]	; (800b5c8 <HAL_UART_IRQHandler+0x2b8>)
 800b456:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d00b      	beq.n	800b474 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2208      	movs	r2, #8
 800b462:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b46a:	f043 0208 	orr.w	r2, r3, #8
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d012      	beq.n	800b4a6 <HAL_UART_IRQHandler+0x196>
 800b480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b484:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d00c      	beq.n	800b4a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b494:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b49c:	f043 0220 	orr.w	r2, r3, #32
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	f000 8249 	beq.w	800b944 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b4b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4b6:	f003 0320 	and.w	r3, r3, #32
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d013      	beq.n	800b4e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b4be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4c2:	f003 0320 	and.w	r3, r3, #32
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d105      	bne.n	800b4d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b4ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b4ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d007      	beq.n	800b4e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d003      	beq.n	800b4e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	689b      	ldr	r3, [r3, #8]
 800b4f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4fa:	2b40      	cmp	r3, #64	; 0x40
 800b4fc:	d005      	beq.n	800b50a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b4fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b502:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b506:	2b00      	cmp	r3, #0
 800b508:	d054      	beq.n	800b5b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 fe25 	bl	800c15a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b51a:	2b40      	cmp	r3, #64	; 0x40
 800b51c:	d146      	bne.n	800b5ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	3308      	adds	r3, #8
 800b524:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b528:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b52c:	e853 3f00 	ldrex	r3, [r3]
 800b530:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b534:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b53c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	3308      	adds	r3, #8
 800b546:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b54a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b54e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b552:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b556:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b55a:	e841 2300 	strex	r3, r2, [r1]
 800b55e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b562:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1d9      	bne.n	800b51e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b570:	2b00      	cmp	r3, #0
 800b572:	d017      	beq.n	800b5a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b57a:	4a15      	ldr	r2, [pc, #84]	; (800b5d0 <HAL_UART_IRQHandler+0x2c0>)
 800b57c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b584:	4618      	mov	r0, r3
 800b586:	f7fc fa70 	bl	8007a6a <HAL_DMA_Abort_IT>
 800b58a:	4603      	mov	r3, r0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d019      	beq.n	800b5c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b59e:	4610      	mov	r0, r2
 800b5a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5a2:	e00f      	b.n	800b5c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 f9e1 	bl	800b96c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5aa:	e00b      	b.n	800b5c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 f9dd 	bl	800b96c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5b2:	e007      	b.n	800b5c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 f9d9 	bl	800b96c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b5c2:	e1bf      	b.n	800b944 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5c4:	bf00      	nop
    return;
 800b5c6:	e1bd      	b.n	800b944 <HAL_UART_IRQHandler+0x634>
 800b5c8:	10000001 	.word	0x10000001
 800b5cc:	04000120 	.word	0x04000120
 800b5d0:	0800c227 	.word	0x0800c227

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	f040 8153 	bne.w	800b884 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b5de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5e2:	f003 0310 	and.w	r3, r3, #16
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	f000 814c 	beq.w	800b884 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b5ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5f0:	f003 0310 	and.w	r3, r3, #16
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f000 8145 	beq.w	800b884 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2210      	movs	r2, #16
 800b600:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b60c:	2b40      	cmp	r3, #64	; 0x40
 800b60e:	f040 80bb 	bne.w	800b788 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b620:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b624:	2b00      	cmp	r3, #0
 800b626:	f000 818f 	beq.w	800b948 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b630:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b634:	429a      	cmp	r2, r3
 800b636:	f080 8187 	bcs.w	800b948 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b640:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f003 0320 	and.w	r3, r3, #32
 800b652:	2b00      	cmp	r3, #0
 800b654:	f040 8087 	bne.w	800b766 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b660:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b664:	e853 3f00 	ldrex	r3, [r3]
 800b668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b66c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b674:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	461a      	mov	r2, r3
 800b67e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b682:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b686:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b68a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b68e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b692:	e841 2300 	strex	r3, r2, [r1]
 800b696:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b69a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d1da      	bne.n	800b658 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	3308      	adds	r3, #8
 800b6a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6ac:	e853 3f00 	ldrex	r3, [r3]
 800b6b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b6b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b6b4:	f023 0301 	bic.w	r3, r3, #1
 800b6b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	3308      	adds	r3, #8
 800b6c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b6c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b6ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b6ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b6d2:	e841 2300 	strex	r3, r2, [r1]
 800b6d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b6d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d1e1      	bne.n	800b6a2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	3308      	adds	r3, #8
 800b6e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b6e8:	e853 3f00 	ldrex	r3, [r3]
 800b6ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b6ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	3308      	adds	r3, #8
 800b6fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b702:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b704:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b706:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b708:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b70a:	e841 2300 	strex	r3, r2, [r1]
 800b70e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b712:	2b00      	cmp	r3, #0
 800b714:	d1e3      	bne.n	800b6de <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2220      	movs	r2, #32
 800b71a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2200      	movs	r2, #0
 800b722:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b72a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b72c:	e853 3f00 	ldrex	r3, [r3]
 800b730:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b734:	f023 0310 	bic.w	r3, r3, #16
 800b738:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	461a      	mov	r2, r3
 800b742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b746:	65bb      	str	r3, [r7, #88]	; 0x58
 800b748:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b74a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b74c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b74e:	e841 2300 	strex	r3, r2, [r1]
 800b752:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b756:	2b00      	cmp	r3, #0
 800b758:	d1e4      	bne.n	800b724 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b760:	4618      	mov	r0, r3
 800b762:	f7fc f923 	bl	80079ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2202      	movs	r2, #2
 800b76a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b778:	b29b      	uxth	r3, r3
 800b77a:	1ad3      	subs	r3, r2, r3
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	4619      	mov	r1, r3
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 f8fd 	bl	800b980 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b786:	e0df      	b.n	800b948 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b794:	b29b      	uxth	r3, r3
 800b796:	1ad3      	subs	r3, r2, r3
 800b798:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	f000 80d1 	beq.w	800b94c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800b7aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	f000 80cc 	beq.w	800b94c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7bc:	e853 3f00 	ldrex	r3, [r3]
 800b7c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b7c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b7c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b7d6:	647b      	str	r3, [r7, #68]	; 0x44
 800b7d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b7dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b7de:	e841 2300 	strex	r3, r2, [r1]
 800b7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d1e4      	bne.n	800b7b4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	3308      	adds	r3, #8
 800b7f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f4:	e853 3f00 	ldrex	r3, [r3]
 800b7f8:	623b      	str	r3, [r7, #32]
   return(result);
 800b7fa:	6a3b      	ldr	r3, [r7, #32]
 800b7fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b800:	f023 0301 	bic.w	r3, r3, #1
 800b804:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	3308      	adds	r3, #8
 800b80e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b812:	633a      	str	r2, [r7, #48]	; 0x30
 800b814:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b816:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b81a:	e841 2300 	strex	r3, r2, [r1]
 800b81e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b822:	2b00      	cmp	r3, #0
 800b824:	d1e1      	bne.n	800b7ea <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2220      	movs	r2, #32
 800b82a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2200      	movs	r2, #0
 800b832:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2200      	movs	r2, #0
 800b838:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	e853 3f00 	ldrex	r3, [r3]
 800b846:	60fb      	str	r3, [r7, #12]
   return(result);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f023 0310 	bic.w	r3, r3, #16
 800b84e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	461a      	mov	r2, r3
 800b858:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b85c:	61fb      	str	r3, [r7, #28]
 800b85e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b860:	69b9      	ldr	r1, [r7, #24]
 800b862:	69fa      	ldr	r2, [r7, #28]
 800b864:	e841 2300 	strex	r3, r2, [r1]
 800b868:	617b      	str	r3, [r7, #20]
   return(result);
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d1e4      	bne.n	800b83a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2202      	movs	r2, #2
 800b874:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b876:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b87a:	4619      	mov	r1, r3
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f000 f87f 	bl	800b980 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b882:	e063      	b.n	800b94c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b888:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d00e      	beq.n	800b8ae <HAL_UART_IRQHandler+0x59e>
 800b890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d008      	beq.n	800b8ae <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b8a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f000 fcfe 	bl	800c2a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b8ac:	e051      	b.n	800b952 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b8ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d014      	beq.n	800b8e4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b8ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d105      	bne.n	800b8d2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b8c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d008      	beq.n	800b8e4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d03a      	beq.n	800b950 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	4798      	blx	r3
    }
    return;
 800b8e2:	e035      	b.n	800b950 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b8e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d009      	beq.n	800b904 <HAL_UART_IRQHandler+0x5f4>
 800b8f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d003      	beq.n	800b904 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 fca8 	bl	800c252 <UART_EndTransmit_IT>
    return;
 800b902:	e026      	b.n	800b952 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b908:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d009      	beq.n	800b924 <HAL_UART_IRQHandler+0x614>
 800b910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b914:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d003      	beq.n	800b924 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 fcd7 	bl	800c2d0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b922:	e016      	b.n	800b952 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b928:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d010      	beq.n	800b952 <HAL_UART_IRQHandler+0x642>
 800b930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b934:	2b00      	cmp	r3, #0
 800b936:	da0c      	bge.n	800b952 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 fcbf 	bl	800c2bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b93e:	e008      	b.n	800b952 <HAL_UART_IRQHandler+0x642>
      return;
 800b940:	bf00      	nop
 800b942:	e006      	b.n	800b952 <HAL_UART_IRQHandler+0x642>
    return;
 800b944:	bf00      	nop
 800b946:	e004      	b.n	800b952 <HAL_UART_IRQHandler+0x642>
      return;
 800b948:	bf00      	nop
 800b94a:	e002      	b.n	800b952 <HAL_UART_IRQHandler+0x642>
      return;
 800b94c:	bf00      	nop
 800b94e:	e000      	b.n	800b952 <HAL_UART_IRQHandler+0x642>
    return;
 800b950:	bf00      	nop
  }
}
 800b952:	37e8      	adds	r7, #232	; 0xe8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b960:	bf00      	nop
 800b962:	370c      	adds	r7, #12
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b974:	bf00      	nop
 800b976:	370c      	adds	r7, #12
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b980:	b480      	push	{r7}
 800b982:	b083      	sub	sp, #12
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	460b      	mov	r3, r1
 800b98a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b98c:	bf00      	nop
 800b98e:	370c      	adds	r7, #12
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr

0800b998 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b99c:	b08c      	sub	sp, #48	; 0x30
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	689a      	ldr	r2, [r3, #8]
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	691b      	ldr	r3, [r3, #16]
 800b9b0:	431a      	orrs	r2, r3
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	695b      	ldr	r3, [r3, #20]
 800b9b6:	431a      	orrs	r2, r3
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	69db      	ldr	r3, [r3, #28]
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	4baf      	ldr	r3, [pc, #700]	; (800bc84 <UART_SetConfig+0x2ec>)
 800b9c8:	4013      	ands	r3, r2
 800b9ca:	697a      	ldr	r2, [r7, #20]
 800b9cc:	6812      	ldr	r2, [r2, #0]
 800b9ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9d0:	430b      	orrs	r3, r1
 800b9d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	68da      	ldr	r2, [r3, #12]
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	430a      	orrs	r2, r1
 800b9e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	699b      	ldr	r3, [r3, #24]
 800b9ee:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4aa4      	ldr	r2, [pc, #656]	; (800bc88 <UART_SetConfig+0x2f0>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d004      	beq.n	800ba04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	6a1b      	ldr	r3, [r3, #32]
 800b9fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba00:	4313      	orrs	r3, r2
 800ba02:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ba0e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ba12:	697a      	ldr	r2, [r7, #20]
 800ba14:	6812      	ldr	r2, [r2, #0]
 800ba16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba18:	430b      	orrs	r3, r1
 800ba1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba22:	f023 010f 	bic.w	r1, r3, #15
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	430a      	orrs	r2, r1
 800ba30:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a95      	ldr	r2, [pc, #596]	; (800bc8c <UART_SetConfig+0x2f4>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d125      	bne.n	800ba88 <UART_SetConfig+0xf0>
 800ba3c:	2003      	movs	r0, #3
 800ba3e:	f7ff fb69 	bl	800b114 <LL_RCC_GetUSARTClockSource>
 800ba42:	4603      	mov	r3, r0
 800ba44:	2b03      	cmp	r3, #3
 800ba46:	d81b      	bhi.n	800ba80 <UART_SetConfig+0xe8>
 800ba48:	a201      	add	r2, pc, #4	; (adr r2, 800ba50 <UART_SetConfig+0xb8>)
 800ba4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba4e:	bf00      	nop
 800ba50:	0800ba61 	.word	0x0800ba61
 800ba54:	0800ba71 	.word	0x0800ba71
 800ba58:	0800ba69 	.word	0x0800ba69
 800ba5c:	0800ba79 	.word	0x0800ba79
 800ba60:	2301      	movs	r3, #1
 800ba62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba66:	e042      	b.n	800baee <UART_SetConfig+0x156>
 800ba68:	2302      	movs	r3, #2
 800ba6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba6e:	e03e      	b.n	800baee <UART_SetConfig+0x156>
 800ba70:	2304      	movs	r3, #4
 800ba72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba76:	e03a      	b.n	800baee <UART_SetConfig+0x156>
 800ba78:	2308      	movs	r3, #8
 800ba7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba7e:	e036      	b.n	800baee <UART_SetConfig+0x156>
 800ba80:	2310      	movs	r3, #16
 800ba82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba86:	e032      	b.n	800baee <UART_SetConfig+0x156>
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a7e      	ldr	r2, [pc, #504]	; (800bc88 <UART_SetConfig+0x2f0>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d12a      	bne.n	800bae8 <UART_SetConfig+0x150>
 800ba92:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800ba96:	f7ff fb4d 	bl	800b134 <LL_RCC_GetLPUARTClockSource>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800baa0:	d01a      	beq.n	800bad8 <UART_SetConfig+0x140>
 800baa2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800baa6:	d81b      	bhi.n	800bae0 <UART_SetConfig+0x148>
 800baa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800baac:	d00c      	beq.n	800bac8 <UART_SetConfig+0x130>
 800baae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bab2:	d815      	bhi.n	800bae0 <UART_SetConfig+0x148>
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d003      	beq.n	800bac0 <UART_SetConfig+0x128>
 800bab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800babc:	d008      	beq.n	800bad0 <UART_SetConfig+0x138>
 800babe:	e00f      	b.n	800bae0 <UART_SetConfig+0x148>
 800bac0:	2300      	movs	r3, #0
 800bac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bac6:	e012      	b.n	800baee <UART_SetConfig+0x156>
 800bac8:	2302      	movs	r3, #2
 800baca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bace:	e00e      	b.n	800baee <UART_SetConfig+0x156>
 800bad0:	2304      	movs	r3, #4
 800bad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bad6:	e00a      	b.n	800baee <UART_SetConfig+0x156>
 800bad8:	2308      	movs	r3, #8
 800bada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bade:	e006      	b.n	800baee <UART_SetConfig+0x156>
 800bae0:	2310      	movs	r3, #16
 800bae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bae6:	e002      	b.n	800baee <UART_SetConfig+0x156>
 800bae8:	2310      	movs	r3, #16
 800baea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4a65      	ldr	r2, [pc, #404]	; (800bc88 <UART_SetConfig+0x2f0>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	f040 8097 	bne.w	800bc28 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bafa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bafe:	2b08      	cmp	r3, #8
 800bb00:	d823      	bhi.n	800bb4a <UART_SetConfig+0x1b2>
 800bb02:	a201      	add	r2, pc, #4	; (adr r2, 800bb08 <UART_SetConfig+0x170>)
 800bb04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb08:	0800bb2d 	.word	0x0800bb2d
 800bb0c:	0800bb4b 	.word	0x0800bb4b
 800bb10:	0800bb35 	.word	0x0800bb35
 800bb14:	0800bb4b 	.word	0x0800bb4b
 800bb18:	0800bb3b 	.word	0x0800bb3b
 800bb1c:	0800bb4b 	.word	0x0800bb4b
 800bb20:	0800bb4b 	.word	0x0800bb4b
 800bb24:	0800bb4b 	.word	0x0800bb4b
 800bb28:	0800bb43 	.word	0x0800bb43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb2c:	f7fd fd6a 	bl	8009604 <HAL_RCC_GetPCLK1Freq>
 800bb30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bb32:	e010      	b.n	800bb56 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb34:	4b56      	ldr	r3, [pc, #344]	; (800bc90 <UART_SetConfig+0x2f8>)
 800bb36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bb38:	e00d      	b.n	800bb56 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb3a:	f7fd fce3 	bl	8009504 <HAL_RCC_GetSysClockFreq>
 800bb3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bb40:	e009      	b.n	800bb56 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bb48:	e005      	b.n	800bb56 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bb54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	f000 812b 	beq.w	800bdb4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb62:	4a4c      	ldr	r2, [pc, #304]	; (800bc94 <UART_SetConfig+0x2fc>)
 800bb64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb68:	461a      	mov	r2, r3
 800bb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb6c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb70:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	685a      	ldr	r2, [r3, #4]
 800bb76:	4613      	mov	r3, r2
 800bb78:	005b      	lsls	r3, r3, #1
 800bb7a:	4413      	add	r3, r2
 800bb7c:	69ba      	ldr	r2, [r7, #24]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d305      	bcc.n	800bb8e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bb88:	69ba      	ldr	r2, [r7, #24]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d903      	bls.n	800bb96 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800bb8e:	2301      	movs	r3, #1
 800bb90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bb94:	e10e      	b.n	800bdb4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb98:	2200      	movs	r2, #0
 800bb9a:	60bb      	str	r3, [r7, #8]
 800bb9c:	60fa      	str	r2, [r7, #12]
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba2:	4a3c      	ldr	r2, [pc, #240]	; (800bc94 <UART_SetConfig+0x2fc>)
 800bba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	2200      	movs	r2, #0
 800bbac:	603b      	str	r3, [r7, #0]
 800bbae:	607a      	str	r2, [r7, #4]
 800bbb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bbb8:	f7f5 f81e 	bl	8000bf8 <__aeabi_uldivmod>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	4610      	mov	r0, r2
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	f04f 0200 	mov.w	r2, #0
 800bbc8:	f04f 0300 	mov.w	r3, #0
 800bbcc:	020b      	lsls	r3, r1, #8
 800bbce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bbd2:	0202      	lsls	r2, r0, #8
 800bbd4:	6979      	ldr	r1, [r7, #20]
 800bbd6:	6849      	ldr	r1, [r1, #4]
 800bbd8:	0849      	lsrs	r1, r1, #1
 800bbda:	2000      	movs	r0, #0
 800bbdc:	460c      	mov	r4, r1
 800bbde:	4605      	mov	r5, r0
 800bbe0:	eb12 0804 	adds.w	r8, r2, r4
 800bbe4:	eb43 0905 	adc.w	r9, r3, r5
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	469a      	mov	sl, r3
 800bbf0:	4693      	mov	fp, r2
 800bbf2:	4652      	mov	r2, sl
 800bbf4:	465b      	mov	r3, fp
 800bbf6:	4640      	mov	r0, r8
 800bbf8:	4649      	mov	r1, r9
 800bbfa:	f7f4 fffd 	bl	8000bf8 <__aeabi_uldivmod>
 800bbfe:	4602      	mov	r2, r0
 800bc00:	460b      	mov	r3, r1
 800bc02:	4613      	mov	r3, r2
 800bc04:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bc06:	6a3b      	ldr	r3, [r7, #32]
 800bc08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc0c:	d308      	bcc.n	800bc20 <UART_SetConfig+0x288>
 800bc0e:	6a3b      	ldr	r3, [r7, #32]
 800bc10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc14:	d204      	bcs.n	800bc20 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	6a3a      	ldr	r2, [r7, #32]
 800bc1c:	60da      	str	r2, [r3, #12]
 800bc1e:	e0c9      	b.n	800bdb4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800bc20:	2301      	movs	r3, #1
 800bc22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bc26:	e0c5      	b.n	800bdb4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	69db      	ldr	r3, [r3, #28]
 800bc2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc30:	d16d      	bne.n	800bd0e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800bc32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc36:	3b01      	subs	r3, #1
 800bc38:	2b07      	cmp	r3, #7
 800bc3a:	d82d      	bhi.n	800bc98 <UART_SetConfig+0x300>
 800bc3c:	a201      	add	r2, pc, #4	; (adr r2, 800bc44 <UART_SetConfig+0x2ac>)
 800bc3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc42:	bf00      	nop
 800bc44:	0800bc65 	.word	0x0800bc65
 800bc48:	0800bc6d 	.word	0x0800bc6d
 800bc4c:	0800bc99 	.word	0x0800bc99
 800bc50:	0800bc73 	.word	0x0800bc73
 800bc54:	0800bc99 	.word	0x0800bc99
 800bc58:	0800bc99 	.word	0x0800bc99
 800bc5c:	0800bc99 	.word	0x0800bc99
 800bc60:	0800bc7b 	.word	0x0800bc7b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc64:	f7fd fce4 	bl	8009630 <HAL_RCC_GetPCLK2Freq>
 800bc68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bc6a:	e01b      	b.n	800bca4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc6c:	4b08      	ldr	r3, [pc, #32]	; (800bc90 <UART_SetConfig+0x2f8>)
 800bc6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bc70:	e018      	b.n	800bca4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc72:	f7fd fc47 	bl	8009504 <HAL_RCC_GetSysClockFreq>
 800bc76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bc78:	e014      	b.n	800bca4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bc80:	e010      	b.n	800bca4 <UART_SetConfig+0x30c>
 800bc82:	bf00      	nop
 800bc84:	cfff69f3 	.word	0xcfff69f3
 800bc88:	40008000 	.word	0x40008000
 800bc8c:	40013800 	.word	0x40013800
 800bc90:	00f42400 	.word	0x00f42400
 800bc94:	0801417c 	.word	0x0801417c
      default:
        pclk = 0U;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bca2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	f000 8084 	beq.w	800bdb4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb0:	4a4b      	ldr	r2, [pc, #300]	; (800bde0 <UART_SetConfig+0x448>)
 800bcb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcba:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcbe:	005a      	lsls	r2, r3, #1
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	085b      	lsrs	r3, r3, #1
 800bcc6:	441a      	add	r2, r3
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcd0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bcd2:	6a3b      	ldr	r3, [r7, #32]
 800bcd4:	2b0f      	cmp	r3, #15
 800bcd6:	d916      	bls.n	800bd06 <UART_SetConfig+0x36e>
 800bcd8:	6a3b      	ldr	r3, [r7, #32]
 800bcda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcde:	d212      	bcs.n	800bd06 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bce0:	6a3b      	ldr	r3, [r7, #32]
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	f023 030f 	bic.w	r3, r3, #15
 800bce8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bcea:	6a3b      	ldr	r3, [r7, #32]
 800bcec:	085b      	lsrs	r3, r3, #1
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	f003 0307 	and.w	r3, r3, #7
 800bcf4:	b29a      	uxth	r2, r3
 800bcf6:	8bfb      	ldrh	r3, [r7, #30]
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	8bfa      	ldrh	r2, [r7, #30]
 800bd02:	60da      	str	r2, [r3, #12]
 800bd04:	e056      	b.n	800bdb4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800bd06:	2301      	movs	r3, #1
 800bd08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bd0c:	e052      	b.n	800bdb4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bd0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd12:	3b01      	subs	r3, #1
 800bd14:	2b07      	cmp	r3, #7
 800bd16:	d822      	bhi.n	800bd5e <UART_SetConfig+0x3c6>
 800bd18:	a201      	add	r2, pc, #4	; (adr r2, 800bd20 <UART_SetConfig+0x388>)
 800bd1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd1e:	bf00      	nop
 800bd20:	0800bd41 	.word	0x0800bd41
 800bd24:	0800bd49 	.word	0x0800bd49
 800bd28:	0800bd5f 	.word	0x0800bd5f
 800bd2c:	0800bd4f 	.word	0x0800bd4f
 800bd30:	0800bd5f 	.word	0x0800bd5f
 800bd34:	0800bd5f 	.word	0x0800bd5f
 800bd38:	0800bd5f 	.word	0x0800bd5f
 800bd3c:	0800bd57 	.word	0x0800bd57
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd40:	f7fd fc76 	bl	8009630 <HAL_RCC_GetPCLK2Freq>
 800bd44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd46:	e010      	b.n	800bd6a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd48:	4b26      	ldr	r3, [pc, #152]	; (800bde4 <UART_SetConfig+0x44c>)
 800bd4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd4c:	e00d      	b.n	800bd6a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd4e:	f7fd fbd9 	bl	8009504 <HAL_RCC_GetSysClockFreq>
 800bd52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd54:	e009      	b.n	800bd6a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd5c:	e005      	b.n	800bd6a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bd62:	2301      	movs	r3, #1
 800bd64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bd68:	bf00      	nop
    }

    if (pclk != 0U)
 800bd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d021      	beq.n	800bdb4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd74:	4a1a      	ldr	r2, [pc, #104]	; (800bde0 <UART_SetConfig+0x448>)
 800bd76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7e:	fbb3 f2f2 	udiv	r2, r3, r2
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	085b      	lsrs	r3, r3, #1
 800bd88:	441a      	add	r2, r3
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd94:	6a3b      	ldr	r3, [r7, #32]
 800bd96:	2b0f      	cmp	r3, #15
 800bd98:	d909      	bls.n	800bdae <UART_SetConfig+0x416>
 800bd9a:	6a3b      	ldr	r3, [r7, #32]
 800bd9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bda0:	d205      	bcs.n	800bdae <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bda2:	6a3b      	ldr	r3, [r7, #32]
 800bda4:	b29a      	uxth	r2, r3
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	60da      	str	r2, [r3, #12]
 800bdac:	e002      	b.n	800bdb4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800bdd0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3730      	adds	r7, #48	; 0x30
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bdde:	bf00      	nop
 800bde0:	0801417c 	.word	0x0801417c
 800bde4:	00f42400 	.word	0x00f42400

0800bde8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b083      	sub	sp, #12
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdf4:	f003 0308 	and.w	r3, r3, #8
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d00a      	beq.n	800be12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	430a      	orrs	r2, r1
 800be10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be16:	f003 0301 	and.w	r3, r3, #1
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d00a      	beq.n	800be34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	430a      	orrs	r2, r1
 800be32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be38:	f003 0302 	and.w	r3, r3, #2
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d00a      	beq.n	800be56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	430a      	orrs	r2, r1
 800be54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be5a:	f003 0304 	and.w	r3, r3, #4
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d00a      	beq.n	800be78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	685b      	ldr	r3, [r3, #4]
 800be68:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	430a      	orrs	r2, r1
 800be76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be7c:	f003 0310 	and.w	r3, r3, #16
 800be80:	2b00      	cmp	r3, #0
 800be82:	d00a      	beq.n	800be9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	430a      	orrs	r2, r1
 800be98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be9e:	f003 0320 	and.w	r3, r3, #32
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d00a      	beq.n	800bebc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	689b      	ldr	r3, [r3, #8]
 800beac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	430a      	orrs	r2, r1
 800beba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d01a      	beq.n	800befe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	430a      	orrs	r2, r1
 800bedc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bee2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bee6:	d10a      	bne.n	800befe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	430a      	orrs	r2, r1
 800befc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d00a      	beq.n	800bf20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	430a      	orrs	r2, r1
 800bf1e:	605a      	str	r2, [r3, #4]
  }
}
 800bf20:	bf00      	nop
 800bf22:	370c      	adds	r7, #12
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr

0800bf2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b098      	sub	sp, #96	; 0x60
 800bf30:	af02      	add	r7, sp, #8
 800bf32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2200      	movs	r2, #0
 800bf38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf3c:	f7fb fad0 	bl	80074e0 <HAL_GetTick>
 800bf40:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f003 0308 	and.w	r3, r3, #8
 800bf4c:	2b08      	cmp	r3, #8
 800bf4e:	d12f      	bne.n	800bfb0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bf54:	9300      	str	r3, [sp, #0]
 800bf56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 f88e 	bl	800c080 <UART_WaitOnFlagUntilTimeout>
 800bf64:	4603      	mov	r3, r0
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d022      	beq.n	800bfb0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf72:	e853 3f00 	ldrex	r3, [r3]
 800bf76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bf78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf7e:	653b      	str	r3, [r7, #80]	; 0x50
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	461a      	mov	r2, r3
 800bf86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf88:	647b      	str	r3, [r7, #68]	; 0x44
 800bf8a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bf8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf90:	e841 2300 	strex	r3, r2, [r1]
 800bf94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bf96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d1e6      	bne.n	800bf6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2220      	movs	r2, #32
 800bfa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bfac:	2303      	movs	r3, #3
 800bfae:	e063      	b.n	800c078 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f003 0304 	and.w	r3, r3, #4
 800bfba:	2b04      	cmp	r3, #4
 800bfbc:	d149      	bne.n	800c052 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bfbe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bfc2:	9300      	str	r3, [sp, #0]
 800bfc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f000 f857 	bl	800c080 <UART_WaitOnFlagUntilTimeout>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d03c      	beq.n	800c052 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe0:	e853 3f00 	ldrex	r3, [r3]
 800bfe4:	623b      	str	r3, [r7, #32]
   return(result);
 800bfe6:	6a3b      	ldr	r3, [r7, #32]
 800bfe8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bfec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	461a      	mov	r2, r3
 800bff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bff6:	633b      	str	r3, [r7, #48]	; 0x30
 800bff8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bffa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bffe:	e841 2300 	strex	r3, r2, [r1]
 800c002:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c006:	2b00      	cmp	r3, #0
 800c008:	d1e6      	bne.n	800bfd8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	3308      	adds	r3, #8
 800c010:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	e853 3f00 	ldrex	r3, [r3]
 800c018:	60fb      	str	r3, [r7, #12]
   return(result);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f023 0301 	bic.w	r3, r3, #1
 800c020:	64bb      	str	r3, [r7, #72]	; 0x48
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	3308      	adds	r3, #8
 800c028:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c02a:	61fa      	str	r2, [r7, #28]
 800c02c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c02e:	69b9      	ldr	r1, [r7, #24]
 800c030:	69fa      	ldr	r2, [r7, #28]
 800c032:	e841 2300 	strex	r3, r2, [r1]
 800c036:	617b      	str	r3, [r7, #20]
   return(result);
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d1e5      	bne.n	800c00a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2220      	movs	r2, #32
 800c042:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2200      	movs	r2, #0
 800c04a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c04e:	2303      	movs	r3, #3
 800c050:	e012      	b.n	800c078 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2220      	movs	r2, #32
 800c056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2220      	movs	r2, #32
 800c05e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2200      	movs	r2, #0
 800c066:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2200      	movs	r2, #0
 800c06c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2200      	movs	r2, #0
 800c072:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c076:	2300      	movs	r3, #0
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3758      	adds	r7, #88	; 0x58
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af00      	add	r7, sp, #0
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	60b9      	str	r1, [r7, #8]
 800c08a:	603b      	str	r3, [r7, #0]
 800c08c:	4613      	mov	r3, r2
 800c08e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c090:	e04f      	b.n	800c132 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c092:	69bb      	ldr	r3, [r7, #24]
 800c094:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c098:	d04b      	beq.n	800c132 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c09a:	f7fb fa21 	bl	80074e0 <HAL_GetTick>
 800c09e:	4602      	mov	r2, r0
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	1ad3      	subs	r3, r2, r3
 800c0a4:	69ba      	ldr	r2, [r7, #24]
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d302      	bcc.n	800c0b0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c0aa:	69bb      	ldr	r3, [r7, #24]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d101      	bne.n	800c0b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c0b0:	2303      	movs	r3, #3
 800c0b2:	e04e      	b.n	800c152 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f003 0304 	and.w	r3, r3, #4
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d037      	beq.n	800c132 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	2b80      	cmp	r3, #128	; 0x80
 800c0c6:	d034      	beq.n	800c132 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	2b40      	cmp	r3, #64	; 0x40
 800c0cc:	d031      	beq.n	800c132 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	69db      	ldr	r3, [r3, #28]
 800c0d4:	f003 0308 	and.w	r3, r3, #8
 800c0d8:	2b08      	cmp	r3, #8
 800c0da:	d110      	bne.n	800c0fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	2208      	movs	r2, #8
 800c0e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c0e4:	68f8      	ldr	r0, [r7, #12]
 800c0e6:	f000 f838 	bl	800c15a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2208      	movs	r2, #8
 800c0ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	e029      	b.n	800c152 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	69db      	ldr	r3, [r3, #28]
 800c104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c10c:	d111      	bne.n	800c132 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c116:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c118:	68f8      	ldr	r0, [r7, #12]
 800c11a:	f000 f81e 	bl	800c15a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2220      	movs	r2, #32
 800c122:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2200      	movs	r2, #0
 800c12a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c12e:	2303      	movs	r3, #3
 800c130:	e00f      	b.n	800c152 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	69da      	ldr	r2, [r3, #28]
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	4013      	ands	r3, r2
 800c13c:	68ba      	ldr	r2, [r7, #8]
 800c13e:	429a      	cmp	r2, r3
 800c140:	bf0c      	ite	eq
 800c142:	2301      	moveq	r3, #1
 800c144:	2300      	movne	r3, #0
 800c146:	b2db      	uxtb	r3, r3
 800c148:	461a      	mov	r2, r3
 800c14a:	79fb      	ldrb	r3, [r7, #7]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d0a0      	beq.n	800c092 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c150:	2300      	movs	r3, #0
}
 800c152:	4618      	mov	r0, r3
 800c154:	3710      	adds	r7, #16
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c15a:	b480      	push	{r7}
 800c15c:	b095      	sub	sp, #84	; 0x54
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c16a:	e853 3f00 	ldrex	r3, [r3]
 800c16e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c172:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c176:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	461a      	mov	r2, r3
 800c17e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c180:	643b      	str	r3, [r7, #64]	; 0x40
 800c182:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c184:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c186:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c188:	e841 2300 	strex	r3, r2, [r1]
 800c18c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c190:	2b00      	cmp	r3, #0
 800c192:	d1e6      	bne.n	800c162 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	3308      	adds	r3, #8
 800c19a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c19c:	6a3b      	ldr	r3, [r7, #32]
 800c19e:	e853 3f00 	ldrex	r3, [r3]
 800c1a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c1aa:	f023 0301 	bic.w	r3, r3, #1
 800c1ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	3308      	adds	r3, #8
 800c1b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c1ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c1be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1c0:	e841 2300 	strex	r3, r2, [r1]
 800c1c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d1e3      	bne.n	800c194 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d118      	bne.n	800c206 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	e853 3f00 	ldrex	r3, [r3]
 800c1e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	f023 0310 	bic.w	r3, r3, #16
 800c1e8:	647b      	str	r3, [r7, #68]	; 0x44
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1f2:	61bb      	str	r3, [r7, #24]
 800c1f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1f6:	6979      	ldr	r1, [r7, #20]
 800c1f8:	69ba      	ldr	r2, [r7, #24]
 800c1fa:	e841 2300 	strex	r3, r2, [r1]
 800c1fe:	613b      	str	r3, [r7, #16]
   return(result);
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d1e6      	bne.n	800c1d4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2220      	movs	r2, #32
 800c20a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2200      	movs	r2, #0
 800c212:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2200      	movs	r2, #0
 800c218:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c21a:	bf00      	nop
 800c21c:	3754      	adds	r7, #84	; 0x54
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr

0800c226 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c226:	b580      	push	{r7, lr}
 800c228:	b084      	sub	sp, #16
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c232:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	2200      	movs	r2, #0
 800c238:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2200      	movs	r2, #0
 800c240:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c244:	68f8      	ldr	r0, [r7, #12]
 800c246:	f7ff fb91 	bl	800b96c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c24a:	bf00      	nop
 800c24c:	3710      	adds	r7, #16
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}

0800c252 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c252:	b580      	push	{r7, lr}
 800c254:	b088      	sub	sp, #32
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	e853 3f00 	ldrex	r3, [r3]
 800c266:	60bb      	str	r3, [r7, #8]
   return(result);
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c26e:	61fb      	str	r3, [r7, #28]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	461a      	mov	r2, r3
 800c276:	69fb      	ldr	r3, [r7, #28]
 800c278:	61bb      	str	r3, [r7, #24]
 800c27a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c27c:	6979      	ldr	r1, [r7, #20]
 800c27e:	69ba      	ldr	r2, [r7, #24]
 800c280:	e841 2300 	strex	r3, r2, [r1]
 800c284:	613b      	str	r3, [r7, #16]
   return(result);
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d1e6      	bne.n	800c25a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2220      	movs	r2, #32
 800c290:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2200      	movs	r2, #0
 800c298:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f7ff fb5c 	bl	800b958 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2a0:	bf00      	nop
 800c2a2:	3720      	adds	r7, #32
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b083      	sub	sp, #12
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c2b0:	bf00      	nop
 800c2b2:	370c      	adds	r7, #12
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr

0800c2bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b083      	sub	sp, #12
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c2c4:	bf00      	nop
 800c2c6:	370c      	adds	r7, #12
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr

0800c2d0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b083      	sub	sp, #12
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c2d8:	bf00      	nop
 800c2da:	370c      	adds	r7, #12
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr

0800c2e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b085      	sub	sp, #20
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c2f2:	2b01      	cmp	r3, #1
 800c2f4:	d101      	bne.n	800c2fa <HAL_UARTEx_DisableFifoMode+0x16>
 800c2f6:	2302      	movs	r3, #2
 800c2f8:	e027      	b.n	800c34a <HAL_UARTEx_DisableFifoMode+0x66>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2201      	movs	r2, #1
 800c2fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2224      	movs	r2, #36	; 0x24
 800c306:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	681a      	ldr	r2, [r3, #0]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f022 0201 	bic.w	r2, r2, #1
 800c320:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c328:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2200      	movs	r2, #0
 800c32e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	68fa      	ldr	r2, [r7, #12]
 800c336:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2220      	movs	r2, #32
 800c33c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2200      	movs	r2, #0
 800c344:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c348:	2300      	movs	r3, #0
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3714      	adds	r7, #20
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr

0800c356 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b084      	sub	sp, #16
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
 800c35e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c366:	2b01      	cmp	r3, #1
 800c368:	d101      	bne.n	800c36e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c36a:	2302      	movs	r3, #2
 800c36c:	e02d      	b.n	800c3ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2201      	movs	r2, #1
 800c372:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2224      	movs	r2, #36	; 0x24
 800c37a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	681a      	ldr	r2, [r3, #0]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f022 0201 	bic.w	r2, r2, #1
 800c394:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	689b      	ldr	r3, [r3, #8]
 800c39c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	683a      	ldr	r2, [r7, #0]
 800c3a6:	430a      	orrs	r2, r1
 800c3a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f000 f850 	bl	800c450 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	68fa      	ldr	r2, [r7, #12]
 800c3b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2220      	movs	r2, #32
 800c3bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c3c8:	2300      	movs	r3, #0
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3710      	adds	r7, #16
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}

0800c3d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b084      	sub	sp, #16
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
 800c3da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c3e2:	2b01      	cmp	r3, #1
 800c3e4:	d101      	bne.n	800c3ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c3e6:	2302      	movs	r3, #2
 800c3e8:	e02d      	b.n	800c446 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2224      	movs	r2, #36	; 0x24
 800c3f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	681a      	ldr	r2, [r3, #0]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f022 0201 	bic.w	r2, r2, #1
 800c410:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	683a      	ldr	r2, [r7, #0]
 800c422:	430a      	orrs	r2, r1
 800c424:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 f812 	bl	800c450 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	68fa      	ldr	r2, [r7, #12]
 800c432:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2220      	movs	r2, #32
 800c438:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2200      	movs	r2, #0
 800c440:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c444:	2300      	movs	r3, #0
}
 800c446:	4618      	mov	r0, r3
 800c448:	3710      	adds	r7, #16
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
	...

0800c450 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c450:	b480      	push	{r7}
 800c452:	b085      	sub	sp, #20
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d108      	bne.n	800c472 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2201      	movs	r2, #1
 800c464:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2201      	movs	r2, #1
 800c46c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c470:	e031      	b.n	800c4d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c472:	2308      	movs	r3, #8
 800c474:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c476:	2308      	movs	r3, #8
 800c478:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	689b      	ldr	r3, [r3, #8]
 800c480:	0e5b      	lsrs	r3, r3, #25
 800c482:	b2db      	uxtb	r3, r3
 800c484:	f003 0307 	and.w	r3, r3, #7
 800c488:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	689b      	ldr	r3, [r3, #8]
 800c490:	0f5b      	lsrs	r3, r3, #29
 800c492:	b2db      	uxtb	r3, r3
 800c494:	f003 0307 	and.w	r3, r3, #7
 800c498:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c49a:	7bbb      	ldrb	r3, [r7, #14]
 800c49c:	7b3a      	ldrb	r2, [r7, #12]
 800c49e:	4911      	ldr	r1, [pc, #68]	; (800c4e4 <UARTEx_SetNbDataToProcess+0x94>)
 800c4a0:	5c8a      	ldrb	r2, [r1, r2]
 800c4a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c4a6:	7b3a      	ldrb	r2, [r7, #12]
 800c4a8:	490f      	ldr	r1, [pc, #60]	; (800c4e8 <UARTEx_SetNbDataToProcess+0x98>)
 800c4aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c4ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800c4b0:	b29a      	uxth	r2, r3
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c4b8:	7bfb      	ldrb	r3, [r7, #15]
 800c4ba:	7b7a      	ldrb	r2, [r7, #13]
 800c4bc:	4909      	ldr	r1, [pc, #36]	; (800c4e4 <UARTEx_SetNbDataToProcess+0x94>)
 800c4be:	5c8a      	ldrb	r2, [r1, r2]
 800c4c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c4c4:	7b7a      	ldrb	r2, [r7, #13]
 800c4c6:	4908      	ldr	r1, [pc, #32]	; (800c4e8 <UARTEx_SetNbDataToProcess+0x98>)
 800c4c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c4ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800c4ce:	b29a      	uxth	r2, r3
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c4d6:	bf00      	nop
 800c4d8:	3714      	adds	r7, #20
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr
 800c4e2:	bf00      	nop
 800c4e4:	08014194 	.word	0x08014194
 800c4e8:	0801419c 	.word	0x0801419c

0800c4ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b085      	sub	sp, #20
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c4f4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800c4f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c500:	b29a      	uxth	r2, r3
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	b29b      	uxth	r3, r3
 800c506:	43db      	mvns	r3, r3
 800c508:	b29b      	uxth	r3, r3
 800c50a:	4013      	ands	r3, r2
 800c50c:	b29a      	uxth	r2, r3
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c514:	2300      	movs	r3, #0
}
 800c516:	4618      	mov	r0, r3
 800c518:	3714      	adds	r7, #20
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr

0800c522 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c522:	b480      	push	{r7}
 800c524:	b085      	sub	sp, #20
 800c526:	af00      	add	r7, sp, #0
 800c528:	60f8      	str	r0, [r7, #12]
 800c52a:	1d3b      	adds	r3, r7, #4
 800c52c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2201      	movs	r2, #1
 800c534:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2200      	movs	r2, #0
 800c53c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2200      	movs	r2, #0
 800c544:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2200      	movs	r2, #0
 800c54c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800c550:	2300      	movs	r3, #0
}
 800c552:	4618      	mov	r0, r3
 800c554:	3714      	adds	r7, #20
 800c556:	46bd      	mov	sp, r7
 800c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55c:	4770      	bx	lr

0800c55e <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800c55e:	b580      	push	{r7, lr}
 800c560:	b088      	sub	sp, #32
 800c562:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c564:	2300      	movs	r3, #0
 800c566:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c568:	f107 0308 	add.w	r3, r7, #8
 800c56c:	2218      	movs	r2, #24
 800c56e:	2100      	movs	r1, #0
 800c570:	4618      	mov	r0, r3
 800c572:	f001 f888 	bl	800d686 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c576:	233f      	movs	r3, #63	; 0x3f
 800c578:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800c57a:	2381      	movs	r3, #129	; 0x81
 800c57c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c57e:	1dfb      	adds	r3, r7, #7
 800c580:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c582:	2301      	movs	r3, #1
 800c584:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c586:	f107 0308 	add.w	r3, r7, #8
 800c58a:	2100      	movs	r1, #0
 800c58c:	4618      	mov	r0, r3
 800c58e:	f001 fc09 	bl	800dda4 <hci_send_req>
 800c592:	4603      	mov	r3, r0
 800c594:	2b00      	cmp	r3, #0
 800c596:	da01      	bge.n	800c59c <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800c598:	23ff      	movs	r3, #255	; 0xff
 800c59a:	e000      	b.n	800c59e <aci_gap_set_non_discoverable+0x40>
  return status;
 800c59c:	79fb      	ldrb	r3, [r7, #7]
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3720      	adds	r7, #32
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}

0800c5a6 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800c5a6:	b5b0      	push	{r4, r5, r7, lr}
 800c5a8:	b0ce      	sub	sp, #312	; 0x138
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	4605      	mov	r5, r0
 800c5ae:	460c      	mov	r4, r1
 800c5b0:	4610      	mov	r0, r2
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c5b8:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800c5bc:	462a      	mov	r2, r5
 800c5be:	701a      	strb	r2, [r3, #0]
 800c5c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c5c4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800c5c8:	4622      	mov	r2, r4
 800c5ca:	801a      	strh	r2, [r3, #0]
 800c5cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c5d0:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	801a      	strh	r2, [r3, #0]
 800c5d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c5dc:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800c5e0:	460a      	mov	r2, r1
 800c5e2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800c5e4:	f107 0310 	add.w	r3, r7, #16
 800c5e8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800c5ec:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800c5f0:	3308      	adds	r3, #8
 800c5f2:	f107 0210 	add.w	r2, r7, #16
 800c5f6:	4413      	add	r3, r2
 800c5f8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800c5fc:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800c600:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800c604:	4413      	add	r3, r2
 800c606:	3309      	adds	r3, #9
 800c608:	f107 0210 	add.w	r2, r7, #16
 800c60c:	4413      	add	r3, r2
 800c60e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c612:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c616:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800c61a:	2200      	movs	r2, #0
 800c61c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c61e:	2300      	movs	r3, #0
 800c620:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800c624:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c628:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800c62c:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800c630:	7812      	ldrb	r2, [r2, #0]
 800c632:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c634:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c638:	3301      	adds	r3, #1
 800c63a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800c63e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c642:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800c646:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800c64a:	8812      	ldrh	r2, [r2, #0]
 800c64c:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800c650:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c654:	3302      	adds	r3, #2
 800c656:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800c65a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c65e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800c662:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800c666:	8812      	ldrh	r2, [r2, #0]
 800c668:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800c66c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c670:	3302      	adds	r3, #2
 800c672:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800c676:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c67a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800c67e:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800c682:	7812      	ldrb	r2, [r2, #0]
 800c684:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800c686:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c68a:	3301      	adds	r3, #1
 800c68c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800c690:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c694:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800c698:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800c69a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c69e:	3301      	adds	r3, #1
 800c6a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800c6a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c6a8:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800c6ac:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800c6ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800c6b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c6bc:	3308      	adds	r3, #8
 800c6be:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800c6c2:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f000 ffcd 	bl	800d666 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800c6cc:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800c6d0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c6d4:	4413      	add	r3, r2
 800c6d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800c6da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c6de:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800c6e2:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800c6e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800c6ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800c6f8:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f000 ffb2 	bl	800d666 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800c702:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800c706:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c70a:	4413      	add	r3, r2
 800c70c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800c710:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c714:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800c718:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800c71a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c71e:	3302      	adds	r3, #2
 800c720:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800c724:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c728:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800c72c:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800c72e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c732:	3302      	adds	r3, #2
 800c734:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c738:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c73c:	2218      	movs	r2, #24
 800c73e:	2100      	movs	r1, #0
 800c740:	4618      	mov	r0, r3
 800c742:	f000 ffa0 	bl	800d686 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c746:	233f      	movs	r3, #63	; 0x3f
 800c748:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800c74c:	2383      	movs	r3, #131	; 0x83
 800c74e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c752:	f107 0310 	add.w	r3, r7, #16
 800c756:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c75a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c75e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c762:	f107 030f 	add.w	r3, r7, #15
 800c766:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c76a:	2301      	movs	r3, #1
 800c76c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c770:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c774:	2100      	movs	r1, #0
 800c776:	4618      	mov	r0, r3
 800c778:	f001 fb14 	bl	800dda4 <hci_send_req>
 800c77c:	4603      	mov	r3, r0
 800c77e:	2b00      	cmp	r3, #0
 800c780:	da01      	bge.n	800c786 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800c782:	23ff      	movs	r3, #255	; 0xff
 800c784:	e004      	b.n	800c790 <aci_gap_set_discoverable+0x1ea>
  return status;
 800c786:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c78a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800c78e:	781b      	ldrb	r3, [r3, #0]
}
 800c790:	4618      	mov	r0, r3
 800c792:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800c796:	46bd      	mov	sp, r7
 800c798:	bdb0      	pop	{r4, r5, r7, pc}

0800c79a <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800c79a:	b580      	push	{r7, lr}
 800c79c:	b0cc      	sub	sp, #304	; 0x130
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c7a6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800c7aa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800c7ac:	f107 0310 	add.w	r3, r7, #16
 800c7b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c7b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c7b8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c7bc:	2200      	movs	r2, #0
 800c7be:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800c7c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c7ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c7ce:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800c7d2:	7812      	ldrb	r2, [r2, #0]
 800c7d4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c7d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c7da:	3301      	adds	r3, #1
 800c7dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c7e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c7e4:	2218      	movs	r2, #24
 800c7e6:	2100      	movs	r1, #0
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f000 ff4c 	bl	800d686 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c7ee:	233f      	movs	r3, #63	; 0x3f
 800c7f0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800c7f4:	2385      	movs	r3, #133	; 0x85
 800c7f6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c7fa:	f107 0310 	add.w	r3, r7, #16
 800c7fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c802:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c806:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c80a:	f107 030f 	add.w	r3, r7, #15
 800c80e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c812:	2301      	movs	r3, #1
 800c814:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c818:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c81c:	2100      	movs	r1, #0
 800c81e:	4618      	mov	r0, r3
 800c820:	f001 fac0 	bl	800dda4 <hci_send_req>
 800c824:	4603      	mov	r3, r0
 800c826:	2b00      	cmp	r3, #0
 800c828:	da01      	bge.n	800c82e <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800c82a:	23ff      	movs	r3, #255	; 0xff
 800c82c:	e004      	b.n	800c838 <aci_gap_set_io_capability+0x9e>
  return status;
 800c82e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c832:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c836:	781b      	ldrb	r3, [r3, #0]
}
 800c838:	4618      	mov	r0, r3
 800c83a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}

0800c842 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800c842:	b5b0      	push	{r4, r5, r7, lr}
 800c844:	b0cc      	sub	sp, #304	; 0x130
 800c846:	af00      	add	r7, sp, #0
 800c848:	4605      	mov	r5, r0
 800c84a:	460c      	mov	r4, r1
 800c84c:	4610      	mov	r0, r2
 800c84e:	4619      	mov	r1, r3
 800c850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c854:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800c858:	462a      	mov	r2, r5
 800c85a:	701a      	strb	r2, [r3, #0]
 800c85c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c860:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800c864:	4622      	mov	r2, r4
 800c866:	701a      	strb	r2, [r3, #0]
 800c868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c86c:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800c870:	4602      	mov	r2, r0
 800c872:	701a      	strb	r2, [r3, #0]
 800c874:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c878:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c87c:	460a      	mov	r2, r1
 800c87e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800c880:	f107 0310 	add.w	r3, r7, #16
 800c884:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c88c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c890:	2200      	movs	r2, #0
 800c892:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c894:	2300      	movs	r3, #0
 800c896:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800c89a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c89e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c8a2:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800c8a6:	7812      	ldrb	r2, [r2, #0]
 800c8a8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c8aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800c8b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c8b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c8bc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800c8c0:	7812      	ldrb	r2, [r2, #0]
 800c8c2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c8c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800c8ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c8d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c8d6:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800c8da:	7812      	ldrb	r2, [r2, #0]
 800c8dc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c8de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800c8e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c8ec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c8f0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800c8f4:	7812      	ldrb	r2, [r2, #0]
 800c8f6:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800c8f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800c902:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c906:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800c90a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800c90c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c910:	3301      	adds	r3, #1
 800c912:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800c916:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c91a:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800c91e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800c920:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c924:	3301      	adds	r3, #1
 800c926:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800c92a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c92e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800c932:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800c934:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c938:	3301      	adds	r3, #1
 800c93a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800c93e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c942:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c946:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800c94a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c94e:	3304      	adds	r3, #4
 800c950:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800c954:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c958:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800c95c:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800c95e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c962:	3301      	adds	r3, #1
 800c964:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c968:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c96c:	2218      	movs	r2, #24
 800c96e:	2100      	movs	r1, #0
 800c970:	4618      	mov	r0, r3
 800c972:	f000 fe88 	bl	800d686 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c976:	233f      	movs	r3, #63	; 0x3f
 800c978:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800c97c:	2386      	movs	r3, #134	; 0x86
 800c97e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c982:	f107 0310 	add.w	r3, r7, #16
 800c986:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c98a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c98e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c992:	f107 030f 	add.w	r3, r7, #15
 800c996:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c99a:	2301      	movs	r3, #1
 800c99c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c9a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c9a4:	2100      	movs	r1, #0
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f001 f9fc 	bl	800dda4 <hci_send_req>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	da01      	bge.n	800c9b6 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800c9b2:	23ff      	movs	r3, #255	; 0xff
 800c9b4:	e004      	b.n	800c9c0 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800c9b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c9ba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c9be:	781b      	ldrb	r3, [r3, #0]
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bdb0      	pop	{r4, r5, r7, pc}

0800c9ca <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800c9ca:	b590      	push	{r4, r7, lr}
 800c9cc:	b0cd      	sub	sp, #308	; 0x134
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	4604      	mov	r4, r0
 800c9d2:	4608      	mov	r0, r1
 800c9d4:	4611      	mov	r1, r2
 800c9d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c9da:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800c9de:	6013      	str	r3, [r2, #0]
 800c9e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c9e4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800c9e8:	4622      	mov	r2, r4
 800c9ea:	701a      	strb	r2, [r3, #0]
 800c9ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c9f0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	701a      	strb	r2, [r3, #0]
 800c9f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c9fc:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800ca00:	460a      	mov	r2, r1
 800ca02:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800ca04:	f107 0310 	add.w	r3, r7, #16
 800ca08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800ca0c:	f107 0308 	add.w	r3, r7, #8
 800ca10:	2207      	movs	r2, #7
 800ca12:	2100      	movs	r1, #0
 800ca14:	4618      	mov	r0, r3
 800ca16:	f000 fe36 	bl	800d686 <Osal_MemSet>
  int index_input = 0;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800ca20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ca24:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ca28:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800ca2c:	7812      	ldrb	r2, [r2, #0]
 800ca2e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ca30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca34:	3301      	adds	r3, #1
 800ca36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800ca3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ca3e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ca42:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ca46:	7812      	ldrb	r2, [r2, #0]
 800ca48:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ca4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca4e:	3301      	adds	r3, #1
 800ca50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800ca54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ca58:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ca5c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800ca60:	7812      	ldrb	r2, [r2, #0]
 800ca62:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ca64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca68:	3301      	adds	r3, #1
 800ca6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ca6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ca72:	2218      	movs	r2, #24
 800ca74:	2100      	movs	r1, #0
 800ca76:	4618      	mov	r0, r3
 800ca78:	f000 fe05 	bl	800d686 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ca7c:	233f      	movs	r3, #63	; 0x3f
 800ca7e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800ca82:	238a      	movs	r3, #138	; 0x8a
 800ca84:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ca88:	f107 0310 	add.w	r3, r7, #16
 800ca8c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ca90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca94:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800ca98:	f107 0308 	add.w	r3, r7, #8
 800ca9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800caa0:	2307      	movs	r3, #7
 800caa2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800caa6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800caaa:	2100      	movs	r1, #0
 800caac:	4618      	mov	r0, r3
 800caae:	f001 f979 	bl	800dda4 <hci_send_req>
 800cab2:	4603      	mov	r3, r0
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	da01      	bge.n	800cabc <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800cab8:	23ff      	movs	r3, #255	; 0xff
 800caba:	e02e      	b.n	800cb1a <aci_gap_init+0x150>
  if ( resp.Status )
 800cabc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cac0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d005      	beq.n	800cad6 <aci_gap_init+0x10c>
    return resp.Status;
 800caca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cace:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	e021      	b.n	800cb1a <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800cad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cada:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800cade:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cae2:	b29a      	uxth	r2, r3
 800cae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cae8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800caf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800caf4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800caf8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800cafc:	b29a      	uxth	r2, r3
 800cafe:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800cb02:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800cb04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cb08:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800cb0c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800cb10:	b29a      	uxth	r2, r3
 800cb12:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800cb16:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800cb18:	2300      	movs	r3, #0
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd90      	pop	{r4, r7, pc}

0800cb24 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b0cc      	sub	sp, #304	; 0x130
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	4602      	mov	r2, r0
 800cb2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cb30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cb34:	6019      	str	r1, [r3, #0]
 800cb36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cb3a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800cb3e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800cb40:	f107 0310 	add.w	r3, r7, #16
 800cb44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800cb48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cb4c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800cb50:	2200      	movs	r2, #0
 800cb52:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cb54:	2300      	movs	r3, #0
 800cb56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800cb5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb5e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cb62:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800cb66:	7812      	ldrb	r2, [r2, #0]
 800cb68:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cb6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb6e:	3301      	adds	r3, #1
 800cb70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800cb74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb78:	1c58      	adds	r0, r3, #1
 800cb7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cb7e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800cb82:	781a      	ldrb	r2, [r3, #0]
 800cb84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cb88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cb8c:	6819      	ldr	r1, [r3, #0]
 800cb8e:	f000 fd6a 	bl	800d666 <Osal_MemCpy>
  index_input += AdvDataLen;
 800cb92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cb96:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800cba0:	4413      	add	r3, r2
 800cba2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cba6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cbaa:	2218      	movs	r2, #24
 800cbac:	2100      	movs	r1, #0
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f000 fd69 	bl	800d686 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cbb4:	233f      	movs	r3, #63	; 0x3f
 800cbb6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800cbba:	238e      	movs	r3, #142	; 0x8e
 800cbbc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cbc0:	f107 0310 	add.w	r3, r7, #16
 800cbc4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cbc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cbcc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cbd0:	f107 030f 	add.w	r3, r7, #15
 800cbd4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cbd8:	2301      	movs	r3, #1
 800cbda:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cbde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cbe2:	2100      	movs	r1, #0
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f001 f8dd 	bl	800dda4 <hci_send_req>
 800cbea:	4603      	mov	r3, r0
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	da01      	bge.n	800cbf4 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800cbf0:	23ff      	movs	r3, #255	; 0xff
 800cbf2:	e004      	b.n	800cbfe <aci_gap_update_adv_data+0xda>
  return status;
 800cbf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cbf8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800cbfc:	781b      	ldrb	r3, [r3, #0]
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}

0800cc08 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b088      	sub	sp, #32
 800cc0c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cc12:	f107 0308 	add.w	r3, r7, #8
 800cc16:	2218      	movs	r2, #24
 800cc18:	2100      	movs	r1, #0
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f000 fd33 	bl	800d686 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cc20:	233f      	movs	r3, #63	; 0x3f
 800cc22:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800cc24:	2392      	movs	r3, #146	; 0x92
 800cc26:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800cc28:	1dfb      	adds	r3, r7, #7
 800cc2a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cc30:	f107 0308 	add.w	r3, r7, #8
 800cc34:	2100      	movs	r1, #0
 800cc36:	4618      	mov	r0, r3
 800cc38:	f001 f8b4 	bl	800dda4 <hci_send_req>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	da01      	bge.n	800cc46 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800cc42:	23ff      	movs	r3, #255	; 0xff
 800cc44:	e000      	b.n	800cc48 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800cc46:	79fb      	ldrb	r3, [r7, #7]
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3720      	adds	r7, #32
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}

0800cc50 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b088      	sub	sp, #32
 800cc54:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800cc56:	2300      	movs	r3, #0
 800cc58:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cc5a:	f107 0308 	add.w	r3, r7, #8
 800cc5e:	2218      	movs	r2, #24
 800cc60:	2100      	movs	r1, #0
 800cc62:	4618      	mov	r0, r3
 800cc64:	f000 fd0f 	bl	800d686 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cc68:	233f      	movs	r3, #63	; 0x3f
 800cc6a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800cc6c:	f240 1301 	movw	r3, #257	; 0x101
 800cc70:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800cc72:	1dfb      	adds	r3, r7, #7
 800cc74:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800cc76:	2301      	movs	r3, #1
 800cc78:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cc7a:	f107 0308 	add.w	r3, r7, #8
 800cc7e:	2100      	movs	r1, #0
 800cc80:	4618      	mov	r0, r3
 800cc82:	f001 f88f 	bl	800dda4 <hci_send_req>
 800cc86:	4603      	mov	r3, r0
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	da01      	bge.n	800cc90 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800cc8c:	23ff      	movs	r3, #255	; 0xff
 800cc8e:	e000      	b.n	800cc92 <aci_gatt_init+0x42>
  return status;
 800cc90:	79fb      	ldrb	r3, [r7, #7]
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3720      	adds	r7, #32
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}

0800cc9a <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800cc9a:	b590      	push	{r4, r7, lr}
 800cc9c:	b0cf      	sub	sp, #316	; 0x13c
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	4604      	mov	r4, r0
 800cca2:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800cca6:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800ccaa:	6001      	str	r1, [r0, #0]
 800ccac:	4610      	mov	r0, r2
 800ccae:	4619      	mov	r1, r3
 800ccb0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ccb4:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800ccb8:	4622      	mov	r2, r4
 800ccba:	701a      	strb	r2, [r3, #0]
 800ccbc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ccc0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800ccc4:	4602      	mov	r2, r0
 800ccc6:	701a      	strb	r2, [r3, #0]
 800ccc8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800cccc:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800ccd0:	460a      	mov	r2, r1
 800ccd2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800ccd4:	f107 0310 	add.w	r3, r7, #16
 800ccd8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800ccdc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800cce0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	2b01      	cmp	r3, #1
 800cce8:	d00a      	beq.n	800cd00 <aci_gatt_add_service+0x66>
 800ccea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ccee:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	2b02      	cmp	r3, #2
 800ccf6:	d101      	bne.n	800ccfc <aci_gatt_add_service+0x62>
 800ccf8:	2311      	movs	r3, #17
 800ccfa:	e002      	b.n	800cd02 <aci_gatt_add_service+0x68>
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	e000      	b.n	800cd02 <aci_gatt_add_service+0x68>
 800cd00:	2303      	movs	r3, #3
 800cd02:	f107 0210 	add.w	r2, r7, #16
 800cd06:	4413      	add	r3, r2
 800cd08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800cd0c:	f107 030c 	add.w	r3, r7, #12
 800cd10:	2203      	movs	r2, #3
 800cd12:	2100      	movs	r1, #0
 800cd14:	4618      	mov	r0, r3
 800cd16:	f000 fcb6 	bl	800d686 <Osal_MemSet>
  int index_input = 0;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800cd20:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cd24:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800cd28:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800cd2c:	7812      	ldrb	r2, [r2, #0]
 800cd2e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cd30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cd34:	3301      	adds	r3, #1
 800cd36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800cd3a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800cd3e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	2b01      	cmp	r3, #1
 800cd46:	d002      	beq.n	800cd4e <aci_gatt_add_service+0xb4>
 800cd48:	2b02      	cmp	r3, #2
 800cd4a:	d004      	beq.n	800cd56 <aci_gatt_add_service+0xbc>
 800cd4c:	e007      	b.n	800cd5e <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800cd4e:	2302      	movs	r3, #2
 800cd50:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800cd54:	e005      	b.n	800cd62 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800cd56:	2310      	movs	r3, #16
 800cd58:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800cd5c:	e001      	b.n	800cd62 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800cd5e:	2397      	movs	r3, #151	; 0x97
 800cd60:	e06c      	b.n	800ce3c <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800cd62:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cd66:	1c58      	adds	r0, r3, #1
 800cd68:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800cd6c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800cd70:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800cd74:	6819      	ldr	r1, [r3, #0]
 800cd76:	f000 fc76 	bl	800d666 <Osal_MemCpy>
    index_input += size;
 800cd7a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800cd7e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800cd82:	4413      	add	r3, r2
 800cd84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800cd88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cd8c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800cd90:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800cd94:	7812      	ldrb	r2, [r2, #0]
 800cd96:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800cd98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800cda2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cda6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800cdaa:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800cdae:	7812      	ldrb	r2, [r2, #0]
 800cdb0:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800cdb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cdb6:	3301      	adds	r3, #1
 800cdb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cdbc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cdc0:	2218      	movs	r2, #24
 800cdc2:	2100      	movs	r1, #0
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f000 fc5e 	bl	800d686 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cdca:	233f      	movs	r3, #63	; 0x3f
 800cdcc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800cdd0:	f44f 7381 	mov.w	r3, #258	; 0x102
 800cdd4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cdd8:	f107 0310 	add.w	r3, r7, #16
 800cddc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cde0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cde4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800cde8:	f107 030c 	add.w	r3, r7, #12
 800cdec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800cdf0:	2303      	movs	r3, #3
 800cdf2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cdf6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cdfa:	2100      	movs	r1, #0
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f000 ffd1 	bl	800dda4 <hci_send_req>
 800ce02:	4603      	mov	r3, r0
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	da01      	bge.n	800ce0c <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800ce08:	23ff      	movs	r3, #255	; 0xff
 800ce0a:	e017      	b.n	800ce3c <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800ce0c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ce10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d005      	beq.n	800ce26 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800ce1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ce1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	e00a      	b.n	800ce3c <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800ce26:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ce2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ce2e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ce32:	b29a      	uxth	r2, r3
 800ce34:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ce38:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ce3a:	2300      	movs	r3, #0
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd90      	pop	{r4, r7, pc}

0800ce46 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800ce46:	b590      	push	{r4, r7, lr}
 800ce48:	b0d1      	sub	sp, #324	; 0x144
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	4604      	mov	r4, r0
 800ce4e:	4608      	mov	r0, r1
 800ce50:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800ce54:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800ce58:	600a      	str	r2, [r1, #0]
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ce60:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800ce64:	4622      	mov	r2, r4
 800ce66:	801a      	strh	r2, [r3, #0]
 800ce68:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ce6c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800ce70:	4602      	mov	r2, r0
 800ce72:	701a      	strb	r2, [r3, #0]
 800ce74:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ce78:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800ce7c:	460a      	mov	r2, r1
 800ce7e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800ce80:	f107 0318 	add.w	r3, r7, #24
 800ce84:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800ce88:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ce8c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	2b01      	cmp	r3, #1
 800ce94:	d00a      	beq.n	800ceac <aci_gatt_add_char+0x66>
 800ce96:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ce9a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	2b02      	cmp	r3, #2
 800cea2:	d101      	bne.n	800cea8 <aci_gatt_add_char+0x62>
 800cea4:	2313      	movs	r3, #19
 800cea6:	e002      	b.n	800ceae <aci_gatt_add_char+0x68>
 800cea8:	2303      	movs	r3, #3
 800ceaa:	e000      	b.n	800ceae <aci_gatt_add_char+0x68>
 800ceac:	2305      	movs	r3, #5
 800ceae:	f107 0218 	add.w	r2, r7, #24
 800ceb2:	4413      	add	r3, r2
 800ceb4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800ceb8:	f107 0314 	add.w	r3, r7, #20
 800cebc:	2203      	movs	r2, #3
 800cebe:	2100      	movs	r1, #0
 800cec0:	4618      	mov	r0, r3
 800cec2:	f000 fbe0 	bl	800d686 <Osal_MemSet>
  int index_input = 0;
 800cec6:	2300      	movs	r3, #0
 800cec8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800cecc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800ced0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800ced4:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800ced8:	8812      	ldrh	r2, [r2, #0]
 800ceda:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800cedc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cee0:	3302      	adds	r3, #2
 800cee2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800cee6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800ceea:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800ceee:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800cef2:	7812      	ldrb	r2, [r2, #0]
 800cef4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800cef6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cefa:	3301      	adds	r3, #1
 800cefc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800cf00:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cf04:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800cf08:	781b      	ldrb	r3, [r3, #0]
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d002      	beq.n	800cf14 <aci_gatt_add_char+0xce>
 800cf0e:	2b02      	cmp	r3, #2
 800cf10:	d004      	beq.n	800cf1c <aci_gatt_add_char+0xd6>
 800cf12:	e007      	b.n	800cf24 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800cf14:	2302      	movs	r3, #2
 800cf16:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800cf1a:	e005      	b.n	800cf28 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800cf1c:	2310      	movs	r3, #16
 800cf1e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800cf22:	e001      	b.n	800cf28 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800cf24:	2397      	movs	r3, #151	; 0x97
 800cf26:	e091      	b.n	800d04c <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800cf28:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800cf2c:	1cd8      	adds	r0, r3, #3
 800cf2e:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800cf32:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cf36:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800cf3a:	6819      	ldr	r1, [r3, #0]
 800cf3c:	f000 fb93 	bl	800d666 <Osal_MemCpy>
    index_input += size;
 800cf40:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800cf44:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800cf48:	4413      	add	r3, r2
 800cf4a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800cf4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cf52:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800cf56:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800cf5a:	8812      	ldrh	r2, [r2, #0]
 800cf5c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800cf5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cf62:	3302      	adds	r3, #2
 800cf64:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800cf68:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cf6c:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800cf70:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800cf72:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cf76:	3301      	adds	r3, #1
 800cf78:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800cf7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cf80:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800cf84:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800cf86:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cf8a:	3301      	adds	r3, #1
 800cf8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800cf90:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cf94:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800cf98:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800cf9a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800cfa4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cfa8:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800cfac:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800cfae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cfb2:	3301      	adds	r3, #1
 800cfb4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800cfb8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cfbc:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800cfc0:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800cfc2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cfcc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800cfd0:	2218      	movs	r2, #24
 800cfd2:	2100      	movs	r1, #0
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f000 fb56 	bl	800d686 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cfda:	233f      	movs	r3, #63	; 0x3f
 800cfdc:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800cfe0:	f44f 7382 	mov.w	r3, #260	; 0x104
 800cfe4:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800cfe8:	f107 0318 	add.w	r3, r7, #24
 800cfec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800cff0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cff4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800cff8:	f107 0314 	add.w	r3, r7, #20
 800cffc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800d000:	2303      	movs	r3, #3
 800d002:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d006:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d00a:	2100      	movs	r1, #0
 800d00c:	4618      	mov	r0, r3
 800d00e:	f000 fec9 	bl	800dda4 <hci_send_req>
 800d012:	4603      	mov	r3, r0
 800d014:	2b00      	cmp	r3, #0
 800d016:	da01      	bge.n	800d01c <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800d018:	23ff      	movs	r3, #255	; 0xff
 800d01a:	e017      	b.n	800d04c <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800d01c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d020:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d005      	beq.n	800d036 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800d02a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d02e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d032:	781b      	ldrb	r3, [r3, #0]
 800d034:	e00a      	b.n	800d04c <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800d036:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d03a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d03e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d042:	b29a      	uxth	r2, r3
 800d044:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800d048:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d04a:	2300      	movs	r3, #0
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800d052:	46bd      	mov	sp, r7
 800d054:	bd90      	pop	{r4, r7, pc}

0800d056 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800d056:	b5b0      	push	{r4, r5, r7, lr}
 800d058:	b0cc      	sub	sp, #304	; 0x130
 800d05a:	af00      	add	r7, sp, #0
 800d05c:	4605      	mov	r5, r0
 800d05e:	460c      	mov	r4, r1
 800d060:	4610      	mov	r0, r2
 800d062:	4619      	mov	r1, r3
 800d064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d068:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d06c:	462a      	mov	r2, r5
 800d06e:	801a      	strh	r2, [r3, #0]
 800d070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d074:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d078:	4622      	mov	r2, r4
 800d07a:	801a      	strh	r2, [r3, #0]
 800d07c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d080:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800d084:	4602      	mov	r2, r0
 800d086:	701a      	strb	r2, [r3, #0]
 800d088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d08c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800d090:	460a      	mov	r2, r1
 800d092:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800d094:	f107 0310 	add.w	r3, r7, #16
 800d098:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d09c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d0a0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800d0ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d0b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d0b6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d0ba:	8812      	ldrh	r2, [r2, #0]
 800d0bc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d0be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d0c2:	3302      	adds	r3, #2
 800d0c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800d0c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d0cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d0d0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800d0d4:	8812      	ldrh	r2, [r2, #0]
 800d0d6:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800d0d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d0dc:	3302      	adds	r3, #2
 800d0de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800d0e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d0e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d0ea:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800d0ee:	7812      	ldrb	r2, [r2, #0]
 800d0f0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800d0f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800d0fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d100:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d104:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800d108:	7812      	ldrb	r2, [r2, #0]
 800d10a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d10c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d110:	3301      	adds	r3, #1
 800d112:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800d116:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d11a:	1d98      	adds	r0, r3, #6
 800d11c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d120:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800d124:	781b      	ldrb	r3, [r3, #0]
 800d126:	461a      	mov	r2, r3
 800d128:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800d12c:	f000 fa9b 	bl	800d666 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800d130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d134:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d13e:	4413      	add	r3, r2
 800d140:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d144:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d148:	2218      	movs	r2, #24
 800d14a:	2100      	movs	r1, #0
 800d14c:	4618      	mov	r0, r3
 800d14e:	f000 fa9a 	bl	800d686 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d152:	233f      	movs	r3, #63	; 0x3f
 800d154:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800d158:	f44f 7383 	mov.w	r3, #262	; 0x106
 800d15c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d160:	f107 0310 	add.w	r3, r7, #16
 800d164:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d168:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d16c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d170:	f107 030f 	add.w	r3, r7, #15
 800d174:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d178:	2301      	movs	r3, #1
 800d17a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d17e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d182:	2100      	movs	r1, #0
 800d184:	4618      	mov	r0, r3
 800d186:	f000 fe0d 	bl	800dda4 <hci_send_req>
 800d18a:	4603      	mov	r3, r0
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	da01      	bge.n	800d194 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800d190:	23ff      	movs	r3, #255	; 0xff
 800d192:	e004      	b.n	800d19e <aci_gatt_update_char_value+0x148>
  return status;
 800d194:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d198:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d19c:	781b      	ldrb	r3, [r3, #0]
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bdb0      	pop	{r4, r5, r7, pc}

0800d1a8 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b0cc      	sub	sp, #304	; 0x130
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d1b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d1b6:	601a      	str	r2, [r3, #0]
 800d1b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d1bc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800d1c0:	4602      	mov	r2, r0
 800d1c2:	701a      	strb	r2, [r3, #0]
 800d1c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d1c8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d1cc:	460a      	mov	r2, r1
 800d1ce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800d1d0:	f107 0310 	add.w	r3, r7, #16
 800d1d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d1d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d1dc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800d1ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d1ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d1f2:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800d1f6:	7812      	ldrb	r2, [r2, #0]
 800d1f8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d1fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d1fe:	3301      	adds	r3, #1
 800d200:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800d204:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d208:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d20c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d210:	7812      	ldrb	r2, [r2, #0]
 800d212:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d214:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d218:	3301      	adds	r3, #1
 800d21a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800d21e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d222:	1c98      	adds	r0, r3, #2
 800d224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d228:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d22c:	781a      	ldrb	r2, [r3, #0]
 800d22e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d232:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d236:	6819      	ldr	r1, [r3, #0]
 800d238:	f000 fa15 	bl	800d666 <Osal_MemCpy>
  index_input += Length;
 800d23c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d240:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d24a:	4413      	add	r3, r2
 800d24c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d250:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d254:	2218      	movs	r2, #24
 800d256:	2100      	movs	r1, #0
 800d258:	4618      	mov	r0, r3
 800d25a:	f000 fa14 	bl	800d686 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d25e:	233f      	movs	r3, #63	; 0x3f
 800d260:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800d264:	230c      	movs	r3, #12
 800d266:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d26a:	f107 0310 	add.w	r3, r7, #16
 800d26e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d272:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d276:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d27a:	f107 030f 	add.w	r3, r7, #15
 800d27e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d282:	2301      	movs	r3, #1
 800d284:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d288:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d28c:	2100      	movs	r1, #0
 800d28e:	4618      	mov	r0, r3
 800d290:	f000 fd88 	bl	800dda4 <hci_send_req>
 800d294:	4603      	mov	r3, r0
 800d296:	2b00      	cmp	r3, #0
 800d298:	da01      	bge.n	800d29e <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800d29a:	23ff      	movs	r3, #255	; 0xff
 800d29c:	e004      	b.n	800d2a8 <aci_hal_write_config_data+0x100>
  return status;
 800d29e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d2a2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d2a6:	781b      	ldrb	r3, [r3, #0]
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}

0800d2b2 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800d2b2:	b580      	push	{r7, lr}
 800d2b4:	b0cc      	sub	sp, #304	; 0x130
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	4602      	mov	r2, r0
 800d2ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d2be:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800d2c2:	701a      	strb	r2, [r3, #0]
 800d2c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d2c8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d2cc:	460a      	mov	r2, r1
 800d2ce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800d2d0:	f107 0310 	add.w	r3, r7, #16
 800d2d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d2d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d2dc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800d2ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d2ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d2f2:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800d2f6:	7812      	ldrb	r2, [r2, #0]
 800d2f8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d2fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d2fe:	3301      	adds	r3, #1
 800d300:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800d304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d308:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d30c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d310:	7812      	ldrb	r2, [r2, #0]
 800d312:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d314:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d318:	3301      	adds	r3, #1
 800d31a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d31e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d322:	2218      	movs	r2, #24
 800d324:	2100      	movs	r1, #0
 800d326:	4618      	mov	r0, r3
 800d328:	f000 f9ad 	bl	800d686 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d32c:	233f      	movs	r3, #63	; 0x3f
 800d32e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800d332:	230f      	movs	r3, #15
 800d334:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d338:	f107 0310 	add.w	r3, r7, #16
 800d33c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d340:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d344:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d348:	f107 030f 	add.w	r3, r7, #15
 800d34c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d350:	2301      	movs	r3, #1
 800d352:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d356:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d35a:	2100      	movs	r1, #0
 800d35c:	4618      	mov	r0, r3
 800d35e:	f000 fd21 	bl	800dda4 <hci_send_req>
 800d362:	4603      	mov	r3, r0
 800d364:	2b00      	cmp	r3, #0
 800d366:	da01      	bge.n	800d36c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800d368:	23ff      	movs	r3, #255	; 0xff
 800d36a:	e004      	b.n	800d376 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800d36c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d370:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d374:	781b      	ldrb	r3, [r3, #0]
}
 800d376:	4618      	mov	r0, r3
 800d378:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b0cc      	sub	sp, #304	; 0x130
 800d384:	af00      	add	r7, sp, #0
 800d386:	4602      	mov	r2, r0
 800d388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d38c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d390:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800d392:	f107 0310 	add.w	r3, r7, #16
 800d396:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d39a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d39e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800d3ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d3b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d3b4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d3b8:	8812      	ldrh	r2, [r2, #0]
 800d3ba:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d3bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d3c0:	3302      	adds	r3, #2
 800d3c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d3c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d3ca:	2218      	movs	r2, #24
 800d3cc:	2100      	movs	r1, #0
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f000 f959 	bl	800d686 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d3d4:	233f      	movs	r3, #63	; 0x3f
 800d3d6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800d3da:	2318      	movs	r3, #24
 800d3dc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d3e0:	f107 0310 	add.w	r3, r7, #16
 800d3e4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d3e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d3ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d3f0:	f107 030f 	add.w	r3, r7, #15
 800d3f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d3fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d402:	2100      	movs	r1, #0
 800d404:	4618      	mov	r0, r3
 800d406:	f000 fccd 	bl	800dda4 <hci_send_req>
 800d40a:	4603      	mov	r3, r0
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	da01      	bge.n	800d414 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800d410:	23ff      	movs	r3, #255	; 0xff
 800d412:	e004      	b.n	800d41e <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800d414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d418:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d41c:	781b      	ldrb	r3, [r3, #0]
}
 800d41e:	4618      	mov	r0, r3
 800d420:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}

0800d428 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b088      	sub	sp, #32
 800d42c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d42e:	2300      	movs	r3, #0
 800d430:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d432:	f107 0308 	add.w	r3, r7, #8
 800d436:	2218      	movs	r2, #24
 800d438:	2100      	movs	r1, #0
 800d43a:	4618      	mov	r0, r3
 800d43c:	f000 f923 	bl	800d686 <Osal_MemSet>
  rq.ogf = 0x03;
 800d440:	2303      	movs	r3, #3
 800d442:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800d444:	2303      	movs	r3, #3
 800d446:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d448:	1dfb      	adds	r3, r7, #7
 800d44a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d44c:	2301      	movs	r3, #1
 800d44e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d450:	f107 0308 	add.w	r3, r7, #8
 800d454:	2100      	movs	r1, #0
 800d456:	4618      	mov	r0, r3
 800d458:	f000 fca4 	bl	800dda4 <hci_send_req>
 800d45c:	4603      	mov	r3, r0
 800d45e:	2b00      	cmp	r3, #0
 800d460:	da01      	bge.n	800d466 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d462:	23ff      	movs	r3, #255	; 0xff
 800d464:	e000      	b.n	800d468 <hci_reset+0x40>
  return status;
 800d466:	79fb      	ldrb	r3, [r7, #7]
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3720      	adds	r7, #32
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b0ce      	sub	sp, #312	; 0x138
 800d474:	af00      	add	r7, sp, #0
 800d476:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d47a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d47e:	6019      	str	r1, [r3, #0]
 800d480:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d484:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d488:	601a      	str	r2, [r3, #0]
 800d48a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d48e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d492:	4602      	mov	r2, r0
 800d494:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800d496:	f107 0318 	add.w	r3, r7, #24
 800d49a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d49e:	f107 0310 	add.w	r3, r7, #16
 800d4a2:	2205      	movs	r2, #5
 800d4a4:	2100      	movs	r1, #0
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f000 f8ed 	bl	800d686 <Osal_MemSet>
  int index_input = 0;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800d4b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d4b6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800d4ba:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d4be:	8812      	ldrh	r2, [r2, #0]
 800d4c0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d4c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d4c6:	3302      	adds	r3, #2
 800d4c8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d4cc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d4d0:	2218      	movs	r2, #24
 800d4d2:	2100      	movs	r1, #0
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f000 f8d6 	bl	800d686 <Osal_MemSet>
  rq.ogf = 0x08;
 800d4da:	2308      	movs	r3, #8
 800d4dc:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800d4e0:	2330      	movs	r3, #48	; 0x30
 800d4e2:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800d4e6:	f107 0318 	add.w	r3, r7, #24
 800d4ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800d4ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d4f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800d4f6:	f107 0310 	add.w	r3, r7, #16
 800d4fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800d4fe:	2305      	movs	r3, #5
 800d500:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d504:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d508:	2100      	movs	r1, #0
 800d50a:	4618      	mov	r0, r3
 800d50c:	f000 fc4a 	bl	800dda4 <hci_send_req>
 800d510:	4603      	mov	r3, r0
 800d512:	2b00      	cmp	r3, #0
 800d514:	da01      	bge.n	800d51a <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 800d516:	23ff      	movs	r3, #255	; 0xff
 800d518:	e023      	b.n	800d562 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 800d51a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d51e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d005      	beq.n	800d534 <hci_le_read_phy+0xc4>
    return resp.Status;
 800d528:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d52c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d530:	781b      	ldrb	r3, [r3, #0]
 800d532:	e016      	b.n	800d562 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 800d534:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d538:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d53c:	78da      	ldrb	r2, [r3, #3]
 800d53e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d542:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800d54a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d54e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d552:	791a      	ldrb	r2, [r3, #4]
 800d554:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d558:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d560:	2300      	movs	r3, #0
}
 800d562:	4618      	mov	r0, r3
 800d564:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800d56c:	b590      	push	{r4, r7, lr}
 800d56e:	b0cd      	sub	sp, #308	; 0x134
 800d570:	af00      	add	r7, sp, #0
 800d572:	4604      	mov	r4, r0
 800d574:	4608      	mov	r0, r1
 800d576:	4611      	mov	r1, r2
 800d578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d57c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800d580:	4622      	mov	r2, r4
 800d582:	701a      	strb	r2, [r3, #0]
 800d584:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d588:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d58c:	4602      	mov	r2, r0
 800d58e:	701a      	strb	r2, [r3, #0]
 800d590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d594:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800d598:	460a      	mov	r2, r1
 800d59a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800d59c:	f107 0310 	add.w	r3, r7, #16
 800d5a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d5a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d5a8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800d5b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d5ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d5be:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800d5c2:	7812      	ldrb	r2, [r2, #0]
 800d5c4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d5c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800d5d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d5d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d5d8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d5dc:	7812      	ldrb	r2, [r2, #0]
 800d5de:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d5e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d5e4:	3301      	adds	r3, #1
 800d5e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800d5ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d5ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d5f2:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800d5f6:	7812      	ldrb	r2, [r2, #0]
 800d5f8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d5fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d5fe:	3301      	adds	r3, #1
 800d600:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d604:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d608:	2218      	movs	r2, #24
 800d60a:	2100      	movs	r1, #0
 800d60c:	4618      	mov	r0, r3
 800d60e:	f000 f83a 	bl	800d686 <Osal_MemSet>
  rq.ogf = 0x08;
 800d612:	2308      	movs	r3, #8
 800d614:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800d618:	2331      	movs	r3, #49	; 0x31
 800d61a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d61e:	f107 0310 	add.w	r3, r7, #16
 800d622:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d626:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d62a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d62e:	f107 030f 	add.w	r3, r7, #15
 800d632:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d636:	2301      	movs	r3, #1
 800d638:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d63c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d640:	2100      	movs	r1, #0
 800d642:	4618      	mov	r0, r3
 800d644:	f000 fbae 	bl	800dda4 <hci_send_req>
 800d648:	4603      	mov	r3, r0
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	da01      	bge.n	800d652 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800d64e:	23ff      	movs	r3, #255	; 0xff
 800d650:	e004      	b.n	800d65c <hci_le_set_default_phy+0xf0>
  return status;
 800d652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d656:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d65a:	781b      	ldrb	r3, [r3, #0]
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800d662:	46bd      	mov	sp, r7
 800d664:	bd90      	pop	{r4, r7, pc}

0800d666 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800d666:	b580      	push	{r7, lr}
 800d668:	b084      	sub	sp, #16
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	60f8      	str	r0, [r7, #12]
 800d66e:	60b9      	str	r1, [r7, #8]
 800d670:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800d672:	687a      	ldr	r2, [r7, #4]
 800d674:	68b9      	ldr	r1, [r7, #8]
 800d676:	68f8      	ldr	r0, [r7, #12]
 800d678:	f002 ffb1 	bl	80105de <memcpy>
 800d67c:	4603      	mov	r3, r0
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3710      	adds	r7, #16
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}

0800d686 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800d686:	b580      	push	{r7, lr}
 800d688:	b084      	sub	sp, #16
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	60f8      	str	r0, [r7, #12]
 800d68e:	60b9      	str	r1, [r7, #8]
 800d690:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800d692:	687a      	ldr	r2, [r7, #4]
 800d694:	68b9      	ldr	r1, [r7, #8]
 800d696:	68f8      	ldr	r0, [r7, #12]
 800d698:	f002 ff22 	bl	80104e0 <memset>
 800d69c:	4603      	mov	r3, r0
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3710      	adds	r7, #16
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
	...

0800d6a8 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b08a      	sub	sp, #40	; 0x28
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	3301      	adds	r3, #1
 800d6ba:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800d6bc:	6a3b      	ldr	r3, [r7, #32]
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	2bff      	cmp	r3, #255	; 0xff
 800d6c2:	d14c      	bne.n	800d75e <PeerToPeer_Event_Handler+0xb6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800d6c4:	6a3b      	ldr	r3, [r7, #32]
 800d6c6:	3302      	adds	r3, #2
 800d6c8:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 800d6ca:	69fb      	ldr	r3, [r7, #28]
 800d6cc:	881b      	ldrh	r3, [r3, #0]
 800d6ce:	b29b      	uxth	r3, r3
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	f640 4301 	movw	r3, #3073	; 0xc01
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d13d      	bne.n	800d756 <PeerToPeer_Event_Handler+0xae>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800d6da:	69fb      	ldr	r3, [r7, #28]
 800d6dc:	3302      	adds	r3, #2
 800d6de:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800d6e0:	69bb      	ldr	r3, [r7, #24]
 800d6e2:	885b      	ldrh	r3, [r3, #2]
 800d6e4:	b29b      	uxth	r3, r3
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	4b20      	ldr	r3, [pc, #128]	; (800d76c <PeerToPeer_Event_Handler+0xc4>)
 800d6ea:	889b      	ldrh	r3, [r3, #4]
 800d6ec:	3302      	adds	r3, #2
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d118      	bne.n	800d724 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800d6f8:	69bb      	ldr	r3, [r7, #24]
 800d6fa:	7a1b      	ldrb	r3, [r3, #8]
 800d6fc:	f003 0301 	and.w	r3, r3, #1
 800d700:	2b00      	cmp	r3, #0
 800d702:	d007      	beq.n	800d714 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800d704:	2300      	movs	r3, #0
 800d706:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800d708:	f107 0308 	add.w	r3, r7, #8
 800d70c:	4618      	mov	r0, r3
 800d70e:	f001 fc43 	bl	800ef98 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 800d712:	e022      	b.n	800d75a <PeerToPeer_Event_Handler+0xb2>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800d714:	2301      	movs	r3, #1
 800d716:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800d718:	f107 0308 	add.w	r3, r7, #8
 800d71c:	4618      	mov	r0, r3
 800d71e:	f001 fc3b 	bl	800ef98 <P2PS_STM_App_Notification>
        break;
 800d722:	e01a      	b.n	800d75a <PeerToPeer_Event_Handler+0xb2>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800d724:	69bb      	ldr	r3, [r7, #24]
 800d726:	885b      	ldrh	r3, [r3, #2]
 800d728:	b29b      	uxth	r3, r3
 800d72a:	461a      	mov	r2, r3
 800d72c:	4b0f      	ldr	r3, [pc, #60]	; (800d76c <PeerToPeer_Event_Handler+0xc4>)
 800d72e:	885b      	ldrh	r3, [r3, #2]
 800d730:	3301      	adds	r3, #1
 800d732:	429a      	cmp	r2, r3
 800d734:	d111      	bne.n	800d75a <PeerToPeer_Event_Handler+0xb2>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800d736:	2303      	movs	r3, #3
 800d738:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800d73a:	69bb      	ldr	r3, [r7, #24]
 800d73c:	88db      	ldrh	r3, [r3, #6]
 800d73e:	b29b      	uxth	r3, r3
 800d740:	b2db      	uxtb	r3, r3
 800d742:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800d744:	69bb      	ldr	r3, [r7, #24]
 800d746:	3308      	adds	r3, #8
 800d748:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800d74a:	f107 0308 	add.w	r3, r7, #8
 800d74e:	4618      	mov	r0, r3
 800d750:	f001 fc22 	bl	800ef98 <P2PS_STM_App_Notification>
        break;
 800d754:	e001      	b.n	800d75a <PeerToPeer_Event_Handler+0xb2>

        default:
          break;
 800d756:	bf00      	nop
 800d758:	e002      	b.n	800d760 <PeerToPeer_Event_Handler+0xb8>
        break;
 800d75a:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800d75c:	e000      	b.n	800d760 <PeerToPeer_Event_Handler+0xb8>

    default:
      break;
 800d75e:	bf00      	nop
  }

  return(return_value);
 800d760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800d764:	4618      	mov	r0, r3
 800d766:	3728      	adds	r7, #40	; 0x28
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}
 800d76c:	20000350 	.word	0x20000350

0800d770 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b08a      	sub	sp, #40	; 0x28
 800d774:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800d776:	484a      	ldr	r0, [pc, #296]	; (800d8a0 <P2PS_STM_Init+0x130>)
 800d778:	f000 f94a 	bl	800da10 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800d77c:	238f      	movs	r3, #143	; 0x8f
 800d77e:	703b      	strb	r3, [r7, #0]
 800d780:	23e5      	movs	r3, #229	; 0xe5
 800d782:	707b      	strb	r3, [r7, #1]
 800d784:	23b3      	movs	r3, #179	; 0xb3
 800d786:	70bb      	strb	r3, [r7, #2]
 800d788:	23d5      	movs	r3, #213	; 0xd5
 800d78a:	70fb      	strb	r3, [r7, #3]
 800d78c:	232e      	movs	r3, #46	; 0x2e
 800d78e:	713b      	strb	r3, [r7, #4]
 800d790:	237f      	movs	r3, #127	; 0x7f
 800d792:	717b      	strb	r3, [r7, #5]
 800d794:	234a      	movs	r3, #74	; 0x4a
 800d796:	71bb      	strb	r3, [r7, #6]
 800d798:	2398      	movs	r3, #152	; 0x98
 800d79a:	71fb      	strb	r3, [r7, #7]
 800d79c:	232a      	movs	r3, #42	; 0x2a
 800d79e:	723b      	strb	r3, [r7, #8]
 800d7a0:	2348      	movs	r3, #72	; 0x48
 800d7a2:	727b      	strb	r3, [r7, #9]
 800d7a4:	237a      	movs	r3, #122	; 0x7a
 800d7a6:	72bb      	strb	r3, [r7, #10]
 800d7a8:	23cc      	movs	r3, #204	; 0xcc
 800d7aa:	72fb      	strb	r3, [r7, #11]
 800d7ac:	2340      	movs	r3, #64	; 0x40
 800d7ae:	733b      	strb	r3, [r7, #12]
 800d7b0:	23fe      	movs	r3, #254	; 0xfe
 800d7b2:	737b      	strb	r3, [r7, #13]
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	73bb      	strb	r3, [r7, #14]
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800d7bc:	4639      	mov	r1, r7
 800d7be:	4b39      	ldr	r3, [pc, #228]	; (800d8a4 <P2PS_STM_Init+0x134>)
 800d7c0:	9300      	str	r3, [sp, #0]
 800d7c2:	2306      	movs	r3, #6
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	2002      	movs	r0, #2
 800d7c8:	f7ff fa67 	bl	800cc9a <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800d7cc:	2319      	movs	r3, #25
 800d7ce:	703b      	strb	r3, [r7, #0]
 800d7d0:	23ed      	movs	r3, #237	; 0xed
 800d7d2:	707b      	strb	r3, [r7, #1]
 800d7d4:	2382      	movs	r3, #130	; 0x82
 800d7d6:	70bb      	strb	r3, [r7, #2]
 800d7d8:	23ae      	movs	r3, #174	; 0xae
 800d7da:	70fb      	strb	r3, [r7, #3]
 800d7dc:	23ed      	movs	r3, #237	; 0xed
 800d7de:	713b      	strb	r3, [r7, #4]
 800d7e0:	2321      	movs	r3, #33	; 0x21
 800d7e2:	717b      	strb	r3, [r7, #5]
 800d7e4:	234c      	movs	r3, #76	; 0x4c
 800d7e6:	71bb      	strb	r3, [r7, #6]
 800d7e8:	239d      	movs	r3, #157	; 0x9d
 800d7ea:	71fb      	strb	r3, [r7, #7]
 800d7ec:	2341      	movs	r3, #65	; 0x41
 800d7ee:	723b      	strb	r3, [r7, #8]
 800d7f0:	2345      	movs	r3, #69	; 0x45
 800d7f2:	727b      	strb	r3, [r7, #9]
 800d7f4:	2322      	movs	r3, #34	; 0x22
 800d7f6:	72bb      	strb	r3, [r7, #10]
 800d7f8:	238e      	movs	r3, #142	; 0x8e
 800d7fa:	72fb      	strb	r3, [r7, #11]
 800d7fc:	2341      	movs	r3, #65	; 0x41
 800d7fe:	733b      	strb	r3, [r7, #12]
 800d800:	23fe      	movs	r3, #254	; 0xfe
 800d802:	737b      	strb	r3, [r7, #13]
 800d804:	2300      	movs	r3, #0
 800d806:	73bb      	strb	r3, [r7, #14]
 800d808:	2300      	movs	r3, #0
 800d80a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800d80c:	4b25      	ldr	r3, [pc, #148]	; (800d8a4 <P2PS_STM_Init+0x134>)
 800d80e:	8818      	ldrh	r0, [r3, #0]
 800d810:	463a      	mov	r2, r7
 800d812:	4b25      	ldr	r3, [pc, #148]	; (800d8a8 <P2PS_STM_Init+0x138>)
 800d814:	9305      	str	r3, [sp, #20]
 800d816:	2301      	movs	r3, #1
 800d818:	9304      	str	r3, [sp, #16]
 800d81a:	230a      	movs	r3, #10
 800d81c:	9303      	str	r3, [sp, #12]
 800d81e:	2301      	movs	r3, #1
 800d820:	9302      	str	r3, [sp, #8]
 800d822:	2300      	movs	r3, #0
 800d824:	9301      	str	r3, [sp, #4]
 800d826:	2306      	movs	r3, #6
 800d828:	9300      	str	r3, [sp, #0]
 800d82a:	2302      	movs	r3, #2
 800d82c:	2102      	movs	r1, #2
 800d82e:	f7ff fb0a 	bl	800ce46 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800d832:	2319      	movs	r3, #25
 800d834:	703b      	strb	r3, [r7, #0]
 800d836:	23ed      	movs	r3, #237	; 0xed
 800d838:	707b      	strb	r3, [r7, #1]
 800d83a:	2382      	movs	r3, #130	; 0x82
 800d83c:	70bb      	strb	r3, [r7, #2]
 800d83e:	23ae      	movs	r3, #174	; 0xae
 800d840:	70fb      	strb	r3, [r7, #3]
 800d842:	23ed      	movs	r3, #237	; 0xed
 800d844:	713b      	strb	r3, [r7, #4]
 800d846:	2321      	movs	r3, #33	; 0x21
 800d848:	717b      	strb	r3, [r7, #5]
 800d84a:	234c      	movs	r3, #76	; 0x4c
 800d84c:	71bb      	strb	r3, [r7, #6]
 800d84e:	239d      	movs	r3, #157	; 0x9d
 800d850:	71fb      	strb	r3, [r7, #7]
 800d852:	2341      	movs	r3, #65	; 0x41
 800d854:	723b      	strb	r3, [r7, #8]
 800d856:	2345      	movs	r3, #69	; 0x45
 800d858:	727b      	strb	r3, [r7, #9]
 800d85a:	2322      	movs	r3, #34	; 0x22
 800d85c:	72bb      	strb	r3, [r7, #10]
 800d85e:	238e      	movs	r3, #142	; 0x8e
 800d860:	72fb      	strb	r3, [r7, #11]
 800d862:	2342      	movs	r3, #66	; 0x42
 800d864:	733b      	strb	r3, [r7, #12]
 800d866:	23fe      	movs	r3, #254	; 0xfe
 800d868:	737b      	strb	r3, [r7, #13]
 800d86a:	2300      	movs	r3, #0
 800d86c:	73bb      	strb	r3, [r7, #14]
 800d86e:	2300      	movs	r3, #0
 800d870:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800d872:	4b0c      	ldr	r3, [pc, #48]	; (800d8a4 <P2PS_STM_Init+0x134>)
 800d874:	8818      	ldrh	r0, [r3, #0]
 800d876:	463a      	mov	r2, r7
 800d878:	4b0c      	ldr	r3, [pc, #48]	; (800d8ac <P2PS_STM_Init+0x13c>)
 800d87a:	9305      	str	r3, [sp, #20]
 800d87c:	2301      	movs	r3, #1
 800d87e:	9304      	str	r3, [sp, #16]
 800d880:	230a      	movs	r3, #10
 800d882:	9303      	str	r3, [sp, #12]
 800d884:	2301      	movs	r3, #1
 800d886:	9302      	str	r3, [sp, #8]
 800d888:	2300      	movs	r3, #0
 800d88a:	9301      	str	r3, [sp, #4]
 800d88c:	2310      	movs	r3, #16
 800d88e:	9300      	str	r3, [sp, #0]
 800d890:	2302      	movs	r3, #2
 800d892:	2102      	movs	r1, #2
 800d894:	f7ff fad7 	bl	800ce46 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800d898:	bf00      	nop
}
 800d89a:	3710      	adds	r7, #16
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}
 800d8a0:	0800d6a9 	.word	0x0800d6a9
 800d8a4:	20000350 	.word	0x20000350
 800d8a8:	20000352 	.word	0x20000352
 800d8ac:	20000354 	.word	0x20000354

0800d8b0 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	af00      	add	r7, sp, #0
  return;
 800d8b4:	bf00      	nop
}
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr

0800d8be <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800d8be:	b480      	push	{r7}
 800d8c0:	af00      	add	r7, sp, #0
  return;
 800d8c2:	bf00      	nop
}
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ca:	4770      	bx	lr

0800d8cc <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	af00      	add	r7, sp, #0
  return;
 800d8d0:	bf00      	nop
}
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d8:	4770      	bx	lr

0800d8da <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800d8da:	b480      	push	{r7}
 800d8dc:	af00      	add	r7, sp, #0
  return;
 800d8de:	bf00      	nop
}
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr

0800d8e8 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	af00      	add	r7, sp, #0
  return;
 800d8ec:	bf00      	nop
}
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f4:	4770      	bx	lr

0800d8f6 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800d8f6:	b480      	push	{r7}
 800d8f8:	af00      	add	r7, sp, #0
  return;
 800d8fa:	bf00      	nop
}
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr

0800d904 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800d904:	b480      	push	{r7}
 800d906:	af00      	add	r7, sp, #0
  return;
 800d908:	bf00      	nop
}
 800d90a:	46bd      	mov	sp, r7
 800d90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d910:	4770      	bx	lr

0800d912 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800d912:	b480      	push	{r7}
 800d914:	af00      	add	r7, sp, #0
  return;
 800d916:	bf00      	nop
}
 800d918:	46bd      	mov	sp, r7
 800d91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91e:	4770      	bx	lr

0800d920 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800d920:	b480      	push	{r7}
 800d922:	af00      	add	r7, sp, #0
  return;
 800d924:	bf00      	nop
}
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr

0800d92e <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800d92e:	b480      	push	{r7}
 800d930:	af00      	add	r7, sp, #0
  return;
 800d932:	bf00      	nop
}
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr

0800d93c <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800d93c:	b480      	push	{r7}
 800d93e:	af00      	add	r7, sp, #0
  return;
 800d940:	bf00      	nop
}
 800d942:	46bd      	mov	sp, r7
 800d944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d948:	4770      	bx	lr

0800d94a <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800d94a:	b480      	push	{r7}
 800d94c:	af00      	add	r7, sp, #0
  return;
 800d94e:	bf00      	nop
}
 800d950:	46bd      	mov	sp, r7
 800d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d956:	4770      	bx	lr

0800d958 <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 800d958:	b480      	push	{r7}
 800d95a:	af00      	add	r7, sp, #0
  return;
 800d95c:	bf00      	nop
}
 800d95e:	46bd      	mov	sp, r7
 800d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d964:	4770      	bx	lr

0800d966 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800d966:	b480      	push	{r7}
 800d968:	af00      	add	r7, sp, #0
  return;
 800d96a:	bf00      	nop
}
 800d96c:	46bd      	mov	sp, r7
 800d96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d972:	4770      	bx	lr

0800d974 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800d974:	b480      	push	{r7}
 800d976:	af00      	add	r7, sp, #0
  return;
 800d978:	bf00      	nop
}
 800d97a:	46bd      	mov	sp, r7
 800d97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d980:	4770      	bx	lr

0800d982 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800d982:	b480      	push	{r7}
 800d984:	af00      	add	r7, sp, #0
  return;
 800d986:	bf00      	nop
}
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr

0800d990 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800d990:	b480      	push	{r7}
 800d992:	af00      	add	r7, sp, #0
  return;
 800d994:	bf00      	nop
}
 800d996:	46bd      	mov	sp, r7
 800d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99c:	4770      	bx	lr
	...

0800d9a0 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800d9a4:	4b04      	ldr	r3, [pc, #16]	; (800d9b8 <SVCCTL_Init+0x18>)
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800d9aa:	4b04      	ldr	r3, [pc, #16]	; (800d9bc <SVCCTL_Init+0x1c>)
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800d9b0:	f000 f806 	bl	800d9c0 <SVCCTL_SvcInit>

  return;
 800d9b4:	bf00      	nop
}
 800d9b6:	bd80      	pop	{r7, pc}
 800d9b8:	20000358 	.word	0x20000358
 800d9bc:	20000378 	.word	0x20000378

0800d9c0 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	af00      	add	r7, sp, #0
  BAS_Init();
 800d9c4:	f7ff ff74 	bl	800d8b0 <BAS_Init>

  BLS_Init();
 800d9c8:	f7ff ff79 	bl	800d8be <BLS_Init>

  CRS_STM_Init();
 800d9cc:	f7ff ff7e 	bl	800d8cc <CRS_STM_Init>

  DIS_Init();
 800d9d0:	f7ff ff83 	bl	800d8da <DIS_Init>

  EDS_STM_Init();
 800d9d4:	f7ff ff88 	bl	800d8e8 <EDS_STM_Init>

  HIDS_Init();
 800d9d8:	f7ff ff8d 	bl	800d8f6 <HIDS_Init>

  HRS_Init();
 800d9dc:	f7ff ff92 	bl	800d904 <HRS_Init>

  HTS_Init();
 800d9e0:	f7ff ff97 	bl	800d912 <HTS_Init>

  IAS_Init();
 800d9e4:	f7ff ff9c 	bl	800d920 <IAS_Init>

  LLS_Init();
 800d9e8:	f7ff ffa1 	bl	800d92e <LLS_Init>

  TPS_Init();
 800d9ec:	f7ff ffa6 	bl	800d93c <TPS_Init>

  MOTENV_STM_Init();
 800d9f0:	f7ff ffab 	bl	800d94a <MOTENV_STM_Init>

  P2PS_STM_Init();
 800d9f4:	f7ff febc 	bl	800d770 <P2PS_STM_Init>

  ZDD_STM_Init();
 800d9f8:	f7ff ffae 	bl	800d958 <ZDD_STM_Init>

  OTAS_STM_Init();
 800d9fc:	f7ff ffb3 	bl	800d966 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800da00:	f7ff ffbf 	bl	800d982 <BVOPUS_STM_Init>

  MESH_Init();
 800da04:	f7ff ffb6 	bl	800d974 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800da08:	f7ff ffc2 	bl	800d990 <SVCCTL_InitCustomSvc>
  
  return;
 800da0c:	bf00      	nop
}
 800da0e:	bd80      	pop	{r7, pc}

0800da10 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800da10:	b480      	push	{r7}
 800da12:	b083      	sub	sp, #12
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800da18:	4b09      	ldr	r3, [pc, #36]	; (800da40 <SVCCTL_RegisterSvcHandler+0x30>)
 800da1a:	7f1b      	ldrb	r3, [r3, #28]
 800da1c:	4619      	mov	r1, r3
 800da1e:	4a08      	ldr	r2, [pc, #32]	; (800da40 <SVCCTL_RegisterSvcHandler+0x30>)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800da26:	4b06      	ldr	r3, [pc, #24]	; (800da40 <SVCCTL_RegisterSvcHandler+0x30>)
 800da28:	7f1b      	ldrb	r3, [r3, #28]
 800da2a:	3301      	adds	r3, #1
 800da2c:	b2da      	uxtb	r2, r3
 800da2e:	4b04      	ldr	r3, [pc, #16]	; (800da40 <SVCCTL_RegisterSvcHandler+0x30>)
 800da30:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800da32:	bf00      	nop
}
 800da34:	370c      	adds	r7, #12
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr
 800da3e:	bf00      	nop
 800da40:	20000358 	.word	0x20000358

0800da44 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b086      	sub	sp, #24
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	3301      	adds	r3, #1
 800da50:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800da52:	2300      	movs	r3, #0
 800da54:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	2bff      	cmp	r3, #255	; 0xff
 800da5c:	d125      	bne.n	800daaa <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	3302      	adds	r3, #2
 800da62:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	881b      	ldrh	r3, [r3, #0]
 800da68:	b29b      	uxth	r3, r3
 800da6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800da6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800da72:	d118      	bne.n	800daa6 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800da74:	2300      	movs	r3, #0
 800da76:	757b      	strb	r3, [r7, #21]
 800da78:	e00d      	b.n	800da96 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800da7a:	7d7b      	ldrb	r3, [r7, #21]
 800da7c:	4a1a      	ldr	r2, [pc, #104]	; (800dae8 <SVCCTL_UserEvtRx+0xa4>)
 800da7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	4798      	blx	r3
 800da86:	4603      	mov	r3, r0
 800da88:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800da8a:	7dfb      	ldrb	r3, [r7, #23]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d108      	bne.n	800daa2 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800da90:	7d7b      	ldrb	r3, [r7, #21]
 800da92:	3301      	adds	r3, #1
 800da94:	757b      	strb	r3, [r7, #21]
 800da96:	4b14      	ldr	r3, [pc, #80]	; (800dae8 <SVCCTL_UserEvtRx+0xa4>)
 800da98:	7f1b      	ldrb	r3, [r3, #28]
 800da9a:	7d7a      	ldrb	r2, [r7, #21]
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d3ec      	bcc.n	800da7a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800daa0:	e002      	b.n	800daa8 <SVCCTL_UserEvtRx+0x64>
              break;
 800daa2:	bf00      	nop
          break;
 800daa4:	e000      	b.n	800daa8 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800daa6:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800daa8:	e000      	b.n	800daac <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800daaa:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800daac:	7dfb      	ldrb	r3, [r7, #23]
 800daae:	2b02      	cmp	r3, #2
 800dab0:	d00f      	beq.n	800dad2 <SVCCTL_UserEvtRx+0x8e>
 800dab2:	2b02      	cmp	r3, #2
 800dab4:	dc10      	bgt.n	800dad8 <SVCCTL_UserEvtRx+0x94>
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d002      	beq.n	800dac0 <SVCCTL_UserEvtRx+0x7c>
 800daba:	2b01      	cmp	r3, #1
 800dabc:	d006      	beq.n	800dacc <SVCCTL_UserEvtRx+0x88>
 800dabe:	e00b      	b.n	800dad8 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f000 ffa3 	bl	800ea0c <SVCCTL_App_Notification>
 800dac6:	4603      	mov	r3, r0
 800dac8:	75bb      	strb	r3, [r7, #22]
      break;
 800daca:	e008      	b.n	800dade <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800dacc:	2301      	movs	r3, #1
 800dace:	75bb      	strb	r3, [r7, #22]
      break;
 800dad0:	e005      	b.n	800dade <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800dad2:	2300      	movs	r3, #0
 800dad4:	75bb      	strb	r3, [r7, #22]
      break;
 800dad6:	e002      	b.n	800dade <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800dad8:	2301      	movs	r3, #1
 800dada:	75bb      	strb	r3, [r7, #22]
      break;
 800dadc:	bf00      	nop
  }

  return (return_status);
 800dade:	7dbb      	ldrb	r3, [r7, #22]
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3718      	adds	r7, #24
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}
 800dae8:	20000358 	.word	0x20000358

0800daec <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b088      	sub	sp, #32
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800daf4:	f107 030c 	add.w	r3, r7, #12
 800daf8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800db00:	69fb      	ldr	r3, [r7, #28]
 800db02:	212e      	movs	r1, #46	; 0x2e
 800db04:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800db08:	f000 fae8 	bl	800e0dc <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800db0c:	69fb      	ldr	r3, [r7, #28]
 800db0e:	330b      	adds	r3, #11
 800db10:	78db      	ldrb	r3, [r3, #3]
}
 800db12:	4618      	mov	r0, r3
 800db14:	3720      	adds	r7, #32
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}

0800db1a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800db1a:	b580      	push	{r7, lr}
 800db1c:	b088      	sub	sp, #32
 800db1e:	af00      	add	r7, sp, #0
 800db20:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800db22:	f107 030c 	add.w	r3, r7, #12
 800db26:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800db2e:	69fb      	ldr	r3, [r7, #28]
 800db30:	210f      	movs	r1, #15
 800db32:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800db36:	f000 fad1 	bl	800e0dc <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800db3a:	69fb      	ldr	r3, [r7, #28]
 800db3c:	330b      	adds	r3, #11
 800db3e:	78db      	ldrb	r3, [r3, #3]
}
 800db40:	4618      	mov	r0, r3
 800db42:	3720      	adds	r7, #32
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}

0800db48 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b088      	sub	sp, #32
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800db50:	f107 030c 	add.w	r3, r7, #12
 800db54:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800db56:	69fb      	ldr	r3, [r7, #28]
 800db58:	687a      	ldr	r2, [r7, #4]
 800db5a:	2110      	movs	r1, #16
 800db5c:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800db60:	f000 fabc 	bl	800e0dc <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800db64:	69fb      	ldr	r3, [r7, #28]
 800db66:	330b      	adds	r3, #11
 800db68:	78db      	ldrb	r3, [r3, #3]
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	3720      	adds	r7, #32
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}
	...

0800db74 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800db74:	b480      	push	{r7}
 800db76:	b08b      	sub	sp, #44	; 0x2c
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800db7c:	2300      	movs	r3, #0
 800db7e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800db80:	2300      	movs	r3, #0
 800db82:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800db84:	2300      	movs	r3, #0
 800db86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800db88:	2300      	movs	r3, #0
 800db8a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800db8c:	2300      	movs	r3, #0
 800db8e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800db90:	2300      	movs	r3, #0
 800db92:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800db94:	2300      	movs	r3, #0
 800db96:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800db98:	2300      	movs	r3, #0
 800db9a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800db9c:	4b4a      	ldr	r3, [pc, #296]	; (800dcc8 <SHCI_GetWirelessFwInfo+0x154>)
 800db9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dba0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800dba4:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	009b      	lsls	r3, r3, #2
 800dbaa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800dbae:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	4a44      	ldr	r2, [pc, #272]	; (800dccc <SHCI_GetWirelessFwInfo+0x158>)
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d10f      	bne.n	800dbe0 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	695b      	ldr	r3, [r3, #20]
 800dbc4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	699b      	ldr	r3, [r3, #24]
 800dbca:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	69db      	ldr	r3, [r3, #28]
 800dbd0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	68db      	ldr	r3, [r3, #12]
 800dbd6:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	691b      	ldr	r3, [r3, #16]
 800dbdc:	617b      	str	r3, [r7, #20]
 800dbde:	e01a      	b.n	800dc16 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	009b      	lsls	r3, r3, #2
 800dbe4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800dbe8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800dbec:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	691b      	ldr	r3, [r3, #16]
 800dbf4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	695b      	ldr	r3, [r3, #20]
 800dbfc:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	699b      	ldr	r3, [r3, #24]
 800dc04:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	685b      	ldr	r3, [r3, #4]
 800dc0c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	689b      	ldr	r3, [r3, #8]
 800dc14:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800dc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc18:	0e1b      	lsrs	r3, r3, #24
 800dc1a:	b2da      	uxtb	r2, r3
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800dc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc22:	0c1b      	lsrs	r3, r3, #16
 800dc24:	b2da      	uxtb	r2, r3
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800dc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2c:	0a1b      	lsrs	r3, r3, #8
 800dc2e:	b2da      	uxtb	r2, r3
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800dc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc36:	091b      	lsrs	r3, r3, #4
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	f003 030f 	and.w	r3, r3, #15
 800dc3e:	b2da      	uxtb	r2, r3
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800dc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc46:	b2db      	uxtb	r3, r3
 800dc48:	f003 030f 	and.w	r3, r3, #15
 800dc4c:	b2da      	uxtb	r2, r3
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800dc52:	6a3b      	ldr	r3, [r7, #32]
 800dc54:	0e1b      	lsrs	r3, r3, #24
 800dc56:	b2da      	uxtb	r2, r3
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800dc5c:	6a3b      	ldr	r3, [r7, #32]
 800dc5e:	0c1b      	lsrs	r3, r3, #16
 800dc60:	b2da      	uxtb	r2, r3
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800dc66:	6a3b      	ldr	r3, [r7, #32]
 800dc68:	0a1b      	lsrs	r3, r3, #8
 800dc6a:	b2da      	uxtb	r2, r3
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800dc70:	6a3b      	ldr	r3, [r7, #32]
 800dc72:	b2da      	uxtb	r2, r3
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800dc78:	69fb      	ldr	r3, [r7, #28]
 800dc7a:	b2da      	uxtb	r2, r3
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800dc80:	69bb      	ldr	r3, [r7, #24]
 800dc82:	0e1b      	lsrs	r3, r3, #24
 800dc84:	b2da      	uxtb	r2, r3
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800dc8a:	69bb      	ldr	r3, [r7, #24]
 800dc8c:	0c1b      	lsrs	r3, r3, #16
 800dc8e:	b2da      	uxtb	r2, r3
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	0a1b      	lsrs	r3, r3, #8
 800dc98:	b2da      	uxtb	r2, r3
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	0e1b      	lsrs	r3, r3, #24
 800dca2:	b2da      	uxtb	r2, r3
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	0c1b      	lsrs	r3, r3, #16
 800dcac:	b2da      	uxtb	r2, r3
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	b2da      	uxtb	r2, r3
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800dcba:	2300      	movs	r3, #0
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	372c      	adds	r7, #44	; 0x2c
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc6:	4770      	bx	lr
 800dcc8:	58004000 	.word	0x58004000
 800dccc:	a94656b9 	.word	0xa94656b9

0800dcd0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b082      	sub	sp, #8
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	685b      	ldr	r3, [r3, #4]
 800dcde:	4a08      	ldr	r2, [pc, #32]	; (800dd00 <hci_init+0x30>)
 800dce0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800dce2:	4a08      	ldr	r2, [pc, #32]	; (800dd04 <hci_init+0x34>)
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800dce8:	4806      	ldr	r0, [pc, #24]	; (800dd04 <hci_init+0x34>)
 800dcea:	f000 f979 	bl	800dfe0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f000 f8da 	bl	800deac <TlInit>

  return;
 800dcf8:	bf00      	nop
}
 800dcfa:	3708      	adds	r7, #8
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}
 800dd00:	20001698 	.word	0x20001698
 800dd04:	20001670 	.word	0x20001670

0800dd08 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b084      	sub	sp, #16
 800dd0c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800dd0e:	4822      	ldr	r0, [pc, #136]	; (800dd98 <hci_user_evt_proc+0x90>)
 800dd10:	f000 fd32 	bl	800e778 <LST_is_empty>
 800dd14:	4603      	mov	r3, r0
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d12b      	bne.n	800dd72 <hci_user_evt_proc+0x6a>
 800dd1a:	4b20      	ldr	r3, [pc, #128]	; (800dd9c <hci_user_evt_proc+0x94>)
 800dd1c:	781b      	ldrb	r3, [r3, #0]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d027      	beq.n	800dd72 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800dd22:	f107 030c 	add.w	r3, r7, #12
 800dd26:	4619      	mov	r1, r3
 800dd28:	481b      	ldr	r0, [pc, #108]	; (800dd98 <hci_user_evt_proc+0x90>)
 800dd2a:	f000 fdb4 	bl	800e896 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800dd2e:	4b1c      	ldr	r3, [pc, #112]	; (800dda0 <hci_user_evt_proc+0x98>)
 800dd30:	69db      	ldr	r3, [r3, #28]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d00c      	beq.n	800dd50 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800dd3e:	4b18      	ldr	r3, [pc, #96]	; (800dda0 <hci_user_evt_proc+0x98>)
 800dd40:	69db      	ldr	r3, [r3, #28]
 800dd42:	1d3a      	adds	r2, r7, #4
 800dd44:	4610      	mov	r0, r2
 800dd46:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800dd48:	793a      	ldrb	r2, [r7, #4]
 800dd4a:	4b14      	ldr	r3, [pc, #80]	; (800dd9c <hci_user_evt_proc+0x94>)
 800dd4c:	701a      	strb	r2, [r3, #0]
 800dd4e:	e002      	b.n	800dd56 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800dd50:	4b12      	ldr	r3, [pc, #72]	; (800dd9c <hci_user_evt_proc+0x94>)
 800dd52:	2201      	movs	r2, #1
 800dd54:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800dd56:	4b11      	ldr	r3, [pc, #68]	; (800dd9c <hci_user_evt_proc+0x94>)
 800dd58:	781b      	ldrb	r3, [r3, #0]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d004      	beq.n	800dd68 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	4618      	mov	r0, r3
 800dd62:	f000 fc0d 	bl	800e580 <TL_MM_EvtDone>
 800dd66:	e004      	b.n	800dd72 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	480a      	ldr	r0, [pc, #40]	; (800dd98 <hci_user_evt_proc+0x90>)
 800dd6e:	f000 fd25 	bl	800e7bc <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800dd72:	4809      	ldr	r0, [pc, #36]	; (800dd98 <hci_user_evt_proc+0x90>)
 800dd74:	f000 fd00 	bl	800e778 <LST_is_empty>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d107      	bne.n	800dd8e <hci_user_evt_proc+0x86>
 800dd7e:	4b07      	ldr	r3, [pc, #28]	; (800dd9c <hci_user_evt_proc+0x94>)
 800dd80:	781b      	ldrb	r3, [r3, #0]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d003      	beq.n	800dd8e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800dd86:	4804      	ldr	r0, [pc, #16]	; (800dd98 <hci_user_evt_proc+0x90>)
 800dd88:	f001 f8ad 	bl	800eee6 <hci_notify_asynch_evt>
  }


  return;
 800dd8c:	bf00      	nop
 800dd8e:	bf00      	nop
}
 800dd90:	3710      	adds	r7, #16
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	20000380 	.word	0x20000380
 800dd9c:	2000038c 	.word	0x2000038c
 800dda0:	20001670 	.word	0x20001670

0800dda4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b088      	sub	sp, #32
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	460b      	mov	r3, r1
 800ddae:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800ddb0:	2000      	movs	r0, #0
 800ddb2:	f000 f8d1 	bl	800df58 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	885b      	ldrh	r3, [r3, #2]
 800ddbe:	b21b      	sxth	r3, r3
 800ddc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ddc4:	b21a      	sxth	r2, r3
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	881b      	ldrh	r3, [r3, #0]
 800ddca:	029b      	lsls	r3, r3, #10
 800ddcc:	b21b      	sxth	r3, r3
 800ddce:	4313      	orrs	r3, r2
 800ddd0:	b21b      	sxth	r3, r3
 800ddd2:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800ddd4:	4b33      	ldr	r3, [pc, #204]	; (800dea4 <hci_send_req+0x100>)
 800ddd6:	2201      	movs	r2, #1
 800ddd8:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	68db      	ldr	r3, [r3, #12]
 800ddde:	b2d9      	uxtb	r1, r3
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	689a      	ldr	r2, [r3, #8]
 800dde4:	8bbb      	ldrh	r3, [r7, #28]
 800dde6:	4618      	mov	r0, r3
 800dde8:	f000 f890 	bl	800df0c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800ddec:	e04e      	b.n	800de8c <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800ddee:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800ddf2:	f001 f88f 	bl	800ef14 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800ddf6:	e043      	b.n	800de80 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800ddf8:	f107 030c 	add.w	r3, r7, #12
 800ddfc:	4619      	mov	r1, r3
 800ddfe:	482a      	ldr	r0, [pc, #168]	; (800dea8 <hci_send_req+0x104>)
 800de00:	f000 fd49 	bl	800e896 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	7a5b      	ldrb	r3, [r3, #9]
 800de08:	2b0f      	cmp	r3, #15
 800de0a:	d114      	bne.n	800de36 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	330b      	adds	r3, #11
 800de10:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800de12:	693b      	ldr	r3, [r7, #16]
 800de14:	885b      	ldrh	r3, [r3, #2]
 800de16:	b29b      	uxth	r3, r3
 800de18:	8bba      	ldrh	r2, [r7, #28]
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d104      	bne.n	800de28 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	691b      	ldr	r3, [r3, #16]
 800de22:	693a      	ldr	r2, [r7, #16]
 800de24:	7812      	ldrb	r2, [r2, #0]
 800de26:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	785b      	ldrb	r3, [r3, #1]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d027      	beq.n	800de80 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800de30:	2301      	movs	r3, #1
 800de32:	77fb      	strb	r3, [r7, #31]
 800de34:	e024      	b.n	800de80 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	330b      	adds	r3, #11
 800de3a:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800de3c:	69bb      	ldr	r3, [r7, #24]
 800de3e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800de42:	b29b      	uxth	r3, r3
 800de44:	8bba      	ldrh	r2, [r7, #28]
 800de46:	429a      	cmp	r2, r3
 800de48:	d114      	bne.n	800de74 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	7a9b      	ldrb	r3, [r3, #10]
 800de4e:	3b03      	subs	r3, #3
 800de50:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	695a      	ldr	r2, [r3, #20]
 800de56:	7dfb      	ldrb	r3, [r7, #23]
 800de58:	429a      	cmp	r2, r3
 800de5a:	bfa8      	it	ge
 800de5c:	461a      	movge	r2, r3
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6918      	ldr	r0, [r3, #16]
 800de66:	69bb      	ldr	r3, [r7, #24]
 800de68:	1cd9      	adds	r1, r3, #3
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	695b      	ldr	r3, [r3, #20]
 800de6e:	461a      	mov	r2, r3
 800de70:	f002 fbb5 	bl	80105de <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800de74:	69bb      	ldr	r3, [r7, #24]
 800de76:	781b      	ldrb	r3, [r3, #0]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d001      	beq.n	800de80 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800de7c:	2301      	movs	r3, #1
 800de7e:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800de80:	4809      	ldr	r0, [pc, #36]	; (800dea8 <hci_send_req+0x104>)
 800de82:	f000 fc79 	bl	800e778 <LST_is_empty>
 800de86:	4603      	mov	r3, r0
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d0b5      	beq.n	800ddf8 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800de8c:	7ffb      	ldrb	r3, [r7, #31]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d0ad      	beq.n	800ddee <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800de92:	2001      	movs	r0, #1
 800de94:	f000 f860 	bl	800df58 <NotifyCmdStatus>

  return 0;
 800de98:	2300      	movs	r3, #0
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	3720      	adds	r7, #32
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}
 800dea2:	bf00      	nop
 800dea4:	2000169c 	.word	0x2000169c
 800dea8:	20001690 	.word	0x20001690

0800deac <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b086      	sub	sp, #24
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800deb4:	480f      	ldr	r0, [pc, #60]	; (800def4 <TlInit+0x48>)
 800deb6:	f000 fc4f 	bl	800e758 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800deba:	4a0f      	ldr	r2, [pc, #60]	; (800def8 <TlInit+0x4c>)
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800dec0:	480e      	ldr	r0, [pc, #56]	; (800defc <TlInit+0x50>)
 800dec2:	f000 fc49 	bl	800e758 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800dec6:	4b0e      	ldr	r3, [pc, #56]	; (800df00 <TlInit+0x54>)
 800dec8:	2201      	movs	r2, #1
 800deca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800decc:	4b0d      	ldr	r3, [pc, #52]	; (800df04 <TlInit+0x58>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d00a      	beq.n	800deea <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800ded8:	4b0b      	ldr	r3, [pc, #44]	; (800df08 <TlInit+0x5c>)
 800deda:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800dedc:	4b09      	ldr	r3, [pc, #36]	; (800df04 <TlInit+0x58>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	f107 0208 	add.w	r2, r7, #8
 800dee4:	4610      	mov	r0, r2
 800dee6:	4798      	blx	r3
  }

  return;
 800dee8:	bf00      	nop
 800deea:	bf00      	nop
}
 800deec:	3718      	adds	r7, #24
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}
 800def2:	bf00      	nop
 800def4:	20001690 	.word	0x20001690
 800def8:	20000388 	.word	0x20000388
 800defc:	20000380 	.word	0x20000380
 800df00:	2000038c 	.word	0x2000038c
 800df04:	20001670 	.word	0x20001670
 800df08:	0800df99 	.word	0x0800df99

0800df0c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b082      	sub	sp, #8
 800df10:	af00      	add	r7, sp, #0
 800df12:	4603      	mov	r3, r0
 800df14:	603a      	str	r2, [r7, #0]
 800df16:	80fb      	strh	r3, [r7, #6]
 800df18:	460b      	mov	r3, r1
 800df1a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800df1c:	4b0c      	ldr	r3, [pc, #48]	; (800df50 <SendCmd+0x44>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	88fa      	ldrh	r2, [r7, #6]
 800df22:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800df26:	4b0a      	ldr	r3, [pc, #40]	; (800df50 <SendCmd+0x44>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	797a      	ldrb	r2, [r7, #5]
 800df2c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800df2e:	4b08      	ldr	r3, [pc, #32]	; (800df50 <SendCmd+0x44>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	330c      	adds	r3, #12
 800df34:	797a      	ldrb	r2, [r7, #5]
 800df36:	6839      	ldr	r1, [r7, #0]
 800df38:	4618      	mov	r0, r3
 800df3a:	f002 fb50 	bl	80105de <memcpy>

  hciContext.io.Send(0,0);
 800df3e:	4b05      	ldr	r3, [pc, #20]	; (800df54 <SendCmd+0x48>)
 800df40:	691b      	ldr	r3, [r3, #16]
 800df42:	2100      	movs	r1, #0
 800df44:	2000      	movs	r0, #0
 800df46:	4798      	blx	r3

  return;
 800df48:	bf00      	nop
}
 800df4a:	3708      	adds	r7, #8
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}
 800df50:	20000388 	.word	0x20000388
 800df54:	20001670 	.word	0x20001670

0800df58 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b082      	sub	sp, #8
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	4603      	mov	r3, r0
 800df60:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800df62:	79fb      	ldrb	r3, [r7, #7]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d108      	bne.n	800df7a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800df68:	4b0a      	ldr	r3, [pc, #40]	; (800df94 <NotifyCmdStatus+0x3c>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d00d      	beq.n	800df8c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800df70:	4b08      	ldr	r3, [pc, #32]	; (800df94 <NotifyCmdStatus+0x3c>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	2000      	movs	r0, #0
 800df76:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800df78:	e008      	b.n	800df8c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800df7a:	4b06      	ldr	r3, [pc, #24]	; (800df94 <NotifyCmdStatus+0x3c>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d004      	beq.n	800df8c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800df82:	4b04      	ldr	r3, [pc, #16]	; (800df94 <NotifyCmdStatus+0x3c>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	2001      	movs	r0, #1
 800df88:	4798      	blx	r3
  return;
 800df8a:	bf00      	nop
 800df8c:	bf00      	nop
}
 800df8e:	3708      	adds	r7, #8
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}
 800df94:	20001698 	.word	0x20001698

0800df98 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b082      	sub	sp, #8
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	7a5b      	ldrb	r3, [r3, #9]
 800dfa4:	2b0f      	cmp	r3, #15
 800dfa6:	d003      	beq.n	800dfb0 <TlEvtReceived+0x18>
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	7a5b      	ldrb	r3, [r3, #9]
 800dfac:	2b0e      	cmp	r3, #14
 800dfae:	d107      	bne.n	800dfc0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800dfb0:	6879      	ldr	r1, [r7, #4]
 800dfb2:	4809      	ldr	r0, [pc, #36]	; (800dfd8 <TlEvtReceived+0x40>)
 800dfb4:	f000 fc28 	bl	800e808 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800dfb8:	2000      	movs	r0, #0
 800dfba:	f000 ffa0 	bl	800eefe <hci_cmd_resp_release>
 800dfbe:	e006      	b.n	800dfce <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800dfc0:	6879      	ldr	r1, [r7, #4]
 800dfc2:	4806      	ldr	r0, [pc, #24]	; (800dfdc <TlEvtReceived+0x44>)
 800dfc4:	f000 fc20 	bl	800e808 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800dfc8:	4804      	ldr	r0, [pc, #16]	; (800dfdc <TlEvtReceived+0x44>)
 800dfca:	f000 ff8c 	bl	800eee6 <hci_notify_asynch_evt>
  }

  return;
 800dfce:	bf00      	nop
}
 800dfd0:	3708      	adds	r7, #8
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	20001690 	.word	0x20001690
 800dfdc:	20000380 	.word	0x20000380

0800dfe0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b083      	sub	sp, #12
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	4a05      	ldr	r2, [pc, #20]	; (800e000 <hci_register_io_bus+0x20>)
 800dfec:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	4a04      	ldr	r2, [pc, #16]	; (800e004 <hci_register_io_bus+0x24>)
 800dff2:	611a      	str	r2, [r3, #16]

  return;
 800dff4:	bf00      	nop
}
 800dff6:	370c      	adds	r7, #12
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr
 800e000:	0800e2f9 	.word	0x0800e2f9
 800e004:	0800e361 	.word	0x0800e361

0800e008 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	4a08      	ldr	r2, [pc, #32]	; (800e038 <shci_init+0x30>)
 800e018:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800e01a:	4a08      	ldr	r2, [pc, #32]	; (800e03c <shci_init+0x34>)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800e020:	4806      	ldr	r0, [pc, #24]	; (800e03c <shci_init+0x34>)
 800e022:	f000 f915 	bl	800e250 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	4618      	mov	r0, r3
 800e02c:	f000 f898 	bl	800e160 <TlInit>

  return;
 800e030:	bf00      	nop
}
 800e032:	3708      	adds	r7, #8
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}
 800e038:	200016c0 	.word	0x200016c0
 800e03c:	200016a0 	.word	0x200016a0

0800e040 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b084      	sub	sp, #16
 800e044:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e046:	4822      	ldr	r0, [pc, #136]	; (800e0d0 <shci_user_evt_proc+0x90>)
 800e048:	f000 fb96 	bl	800e778 <LST_is_empty>
 800e04c:	4603      	mov	r3, r0
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d12b      	bne.n	800e0aa <shci_user_evt_proc+0x6a>
 800e052:	4b20      	ldr	r3, [pc, #128]	; (800e0d4 <shci_user_evt_proc+0x94>)
 800e054:	781b      	ldrb	r3, [r3, #0]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d027      	beq.n	800e0aa <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e05a:	f107 030c 	add.w	r3, r7, #12
 800e05e:	4619      	mov	r1, r3
 800e060:	481b      	ldr	r0, [pc, #108]	; (800e0d0 <shci_user_evt_proc+0x90>)
 800e062:	f000 fc18 	bl	800e896 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800e066:	4b1c      	ldr	r3, [pc, #112]	; (800e0d8 <shci_user_evt_proc+0x98>)
 800e068:	69db      	ldr	r3, [r3, #28]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d00c      	beq.n	800e088 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800e072:	2301      	movs	r3, #1
 800e074:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e076:	4b18      	ldr	r3, [pc, #96]	; (800e0d8 <shci_user_evt_proc+0x98>)
 800e078:	69db      	ldr	r3, [r3, #28]
 800e07a:	1d3a      	adds	r2, r7, #4
 800e07c:	4610      	mov	r0, r2
 800e07e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800e080:	793a      	ldrb	r2, [r7, #4]
 800e082:	4b14      	ldr	r3, [pc, #80]	; (800e0d4 <shci_user_evt_proc+0x94>)
 800e084:	701a      	strb	r2, [r3, #0]
 800e086:	e002      	b.n	800e08e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e088:	4b12      	ldr	r3, [pc, #72]	; (800e0d4 <shci_user_evt_proc+0x94>)
 800e08a:	2201      	movs	r2, #1
 800e08c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800e08e:	4b11      	ldr	r3, [pc, #68]	; (800e0d4 <shci_user_evt_proc+0x94>)
 800e090:	781b      	ldrb	r3, [r3, #0]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d004      	beq.n	800e0a0 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	4618      	mov	r0, r3
 800e09a:	f000 fa71 	bl	800e580 <TL_MM_EvtDone>
 800e09e:	e004      	b.n	800e0aa <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	480a      	ldr	r0, [pc, #40]	; (800e0d0 <shci_user_evt_proc+0x90>)
 800e0a6:	f000 fb89 	bl	800e7bc <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e0aa:	4809      	ldr	r0, [pc, #36]	; (800e0d0 <shci_user_evt_proc+0x90>)
 800e0ac:	f000 fb64 	bl	800e778 <LST_is_empty>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d107      	bne.n	800e0c6 <shci_user_evt_proc+0x86>
 800e0b6:	4b07      	ldr	r3, [pc, #28]	; (800e0d4 <shci_user_evt_proc+0x94>)
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d003      	beq.n	800e0c6 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800e0be:	4804      	ldr	r0, [pc, #16]	; (800e0d0 <shci_user_evt_proc+0x90>)
 800e0c0:	f7f3 f968 	bl	8001394 <shci_notify_asynch_evt>
  }


  return;
 800e0c4:	bf00      	nop
 800e0c6:	bf00      	nop
}
 800e0c8:	3710      	adds	r7, #16
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
 800e0ce:	bf00      	nop
 800e0d0:	20000390 	.word	0x20000390
 800e0d4:	200003a0 	.word	0x200003a0
 800e0d8:	200016a0 	.word	0x200016a0

0800e0dc <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b084      	sub	sp, #16
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	60ba      	str	r2, [r7, #8]
 800e0e4:	607b      	str	r3, [r7, #4]
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	81fb      	strh	r3, [r7, #14]
 800e0ea:	460b      	mov	r3, r1
 800e0ec:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800e0ee:	2000      	movs	r0, #0
 800e0f0:	f000 f868 	bl	800e1c4 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800e0f4:	4b17      	ldr	r3, [pc, #92]	; (800e154 <shci_send+0x78>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	89fa      	ldrh	r2, [r7, #14]
 800e0fa:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800e0fe:	4b15      	ldr	r3, [pc, #84]	; (800e154 <shci_send+0x78>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	7b7a      	ldrb	r2, [r7, #13]
 800e104:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800e106:	4b13      	ldr	r3, [pc, #76]	; (800e154 <shci_send+0x78>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	330c      	adds	r3, #12
 800e10c:	7b7a      	ldrb	r2, [r7, #13]
 800e10e:	68b9      	ldr	r1, [r7, #8]
 800e110:	4618      	mov	r0, r3
 800e112:	f002 fa64 	bl	80105de <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800e116:	4b10      	ldr	r3, [pc, #64]	; (800e158 <shci_send+0x7c>)
 800e118:	2201      	movs	r2, #1
 800e11a:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800e11c:	4b0f      	ldr	r3, [pc, #60]	; (800e15c <shci_send+0x80>)
 800e11e:	691b      	ldr	r3, [r3, #16]
 800e120:	2100      	movs	r1, #0
 800e122:	2000      	movs	r0, #0
 800e124:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800e126:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800e12a:	f7f3 f94a 	bl	80013c2 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f103 0008 	add.w	r0, r3, #8
 800e134:	4b07      	ldr	r3, [pc, #28]	; (800e154 <shci_send+0x78>)
 800e136:	6819      	ldr	r1, [r3, #0]
 800e138:	4b06      	ldr	r3, [pc, #24]	; (800e154 <shci_send+0x78>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	789b      	ldrb	r3, [r3, #2]
 800e13e:	3303      	adds	r3, #3
 800e140:	461a      	mov	r2, r3
 800e142:	f002 fa4c 	bl	80105de <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e146:	2001      	movs	r0, #1
 800e148:	f000 f83c 	bl	800e1c4 <Cmd_SetStatus>

  return;
 800e14c:	bf00      	nop
}
 800e14e:	3710      	adds	r7, #16
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}
 800e154:	2000039c 	.word	0x2000039c
 800e158:	200016c4 	.word	0x200016c4
 800e15c:	200016a0 	.word	0x200016a0

0800e160 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b086      	sub	sp, #24
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800e168:	4a10      	ldr	r2, [pc, #64]	; (800e1ac <TlInit+0x4c>)
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800e16e:	4810      	ldr	r0, [pc, #64]	; (800e1b0 <TlInit+0x50>)
 800e170:	f000 faf2 	bl	800e758 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e174:	2001      	movs	r0, #1
 800e176:	f000 f825 	bl	800e1c4 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e17a:	4b0e      	ldr	r3, [pc, #56]	; (800e1b4 <TlInit+0x54>)
 800e17c:	2201      	movs	r2, #1
 800e17e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800e180:	4b0d      	ldr	r3, [pc, #52]	; (800e1b8 <TlInit+0x58>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d00c      	beq.n	800e1a2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800e18c:	4b0b      	ldr	r3, [pc, #44]	; (800e1bc <TlInit+0x5c>)
 800e18e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800e190:	4b0b      	ldr	r3, [pc, #44]	; (800e1c0 <TlInit+0x60>)
 800e192:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800e194:	4b08      	ldr	r3, [pc, #32]	; (800e1b8 <TlInit+0x58>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	f107 020c 	add.w	r2, r7, #12
 800e19c:	4610      	mov	r0, r2
 800e19e:	4798      	blx	r3
  }

  return;
 800e1a0:	bf00      	nop
 800e1a2:	bf00      	nop
}
 800e1a4:	3718      	adds	r7, #24
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}
 800e1aa:	bf00      	nop
 800e1ac:	2000039c 	.word	0x2000039c
 800e1b0:	20000390 	.word	0x20000390
 800e1b4:	200003a0 	.word	0x200003a0
 800e1b8:	200016a0 	.word	0x200016a0
 800e1bc:	0800e215 	.word	0x0800e215
 800e1c0:	0800e22d 	.word	0x0800e22d

0800e1c4 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b082      	sub	sp, #8
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800e1ce:	79fb      	ldrb	r3, [r7, #7]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d10b      	bne.n	800e1ec <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800e1d4:	4b0d      	ldr	r3, [pc, #52]	; (800e20c <Cmd_SetStatus+0x48>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d003      	beq.n	800e1e4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800e1dc:	4b0b      	ldr	r3, [pc, #44]	; (800e20c <Cmd_SetStatus+0x48>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	2000      	movs	r0, #0
 800e1e2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800e1e4:	4b0a      	ldr	r3, [pc, #40]	; (800e210 <Cmd_SetStatus+0x4c>)
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800e1ea:	e00b      	b.n	800e204 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800e1ec:	4b08      	ldr	r3, [pc, #32]	; (800e210 <Cmd_SetStatus+0x4c>)
 800e1ee:	2201      	movs	r2, #1
 800e1f0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800e1f2:	4b06      	ldr	r3, [pc, #24]	; (800e20c <Cmd_SetStatus+0x48>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d004      	beq.n	800e204 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800e1fa:	4b04      	ldr	r3, [pc, #16]	; (800e20c <Cmd_SetStatus+0x48>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	2001      	movs	r0, #1
 800e200:	4798      	blx	r3
  return;
 800e202:	bf00      	nop
 800e204:	bf00      	nop
}
 800e206:	3708      	adds	r7, #8
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}
 800e20c:	200016c0 	.word	0x200016c0
 800e210:	20000398 	.word	0x20000398

0800e214 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800e21c:	2000      	movs	r0, #0
 800e21e:	f7f3 f8c5 	bl	80013ac <shci_cmd_resp_release>

  return;
 800e222:	bf00      	nop
}
 800e224:	3708      	adds	r7, #8
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}
	...

0800e22c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b082      	sub	sp, #8
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800e234:	6879      	ldr	r1, [r7, #4]
 800e236:	4805      	ldr	r0, [pc, #20]	; (800e24c <TlUserEvtReceived+0x20>)
 800e238:	f000 fae6 	bl	800e808 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e23c:	4803      	ldr	r0, [pc, #12]	; (800e24c <TlUserEvtReceived+0x20>)
 800e23e:	f7f3 f8a9 	bl	8001394 <shci_notify_asynch_evt>

  return;
 800e242:	bf00      	nop
}
 800e244:	3708      	adds	r7, #8
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
 800e24a:	bf00      	nop
 800e24c:	20000390 	.word	0x20000390

0800e250 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800e250:	b480      	push	{r7}
 800e252:	b083      	sub	sp, #12
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	4a05      	ldr	r2, [pc, #20]	; (800e270 <shci_register_io_bus+0x20>)
 800e25c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	4a04      	ldr	r2, [pc, #16]	; (800e274 <shci_register_io_bus+0x24>)
 800e262:	611a      	str	r2, [r3, #16]

  return;
 800e264:	bf00      	nop
}
 800e266:	370c      	adds	r7, #12
 800e268:	46bd      	mov	sp, r7
 800e26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26e:	4770      	bx	lr
 800e270:	0800e40d 	.word	0x0800e40d
 800e274:	0800e461 	.word	0x0800e461

0800e278 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800e27c:	f001 f83a 	bl	800f2f4 <HW_IPCC_Enable>

  return;
 800e280:	bf00      	nop
}
 800e282:	bd80      	pop	{r7, pc}

0800e284 <TL_Init>:


void TL_Init( void )
{
 800e284:	b580      	push	{r7, lr}
 800e286:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800e288:	4b10      	ldr	r3, [pc, #64]	; (800e2cc <TL_Init+0x48>)
 800e28a:	4a11      	ldr	r2, [pc, #68]	; (800e2d0 <TL_Init+0x4c>)
 800e28c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800e28e:	4b0f      	ldr	r3, [pc, #60]	; (800e2cc <TL_Init+0x48>)
 800e290:	4a10      	ldr	r2, [pc, #64]	; (800e2d4 <TL_Init+0x50>)
 800e292:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800e294:	4b0d      	ldr	r3, [pc, #52]	; (800e2cc <TL_Init+0x48>)
 800e296:	4a10      	ldr	r2, [pc, #64]	; (800e2d8 <TL_Init+0x54>)
 800e298:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800e29a:	4b0c      	ldr	r3, [pc, #48]	; (800e2cc <TL_Init+0x48>)
 800e29c:	4a0f      	ldr	r2, [pc, #60]	; (800e2dc <TL_Init+0x58>)
 800e29e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800e2a0:	4b0a      	ldr	r3, [pc, #40]	; (800e2cc <TL_Init+0x48>)
 800e2a2:	4a0f      	ldr	r2, [pc, #60]	; (800e2e0 <TL_Init+0x5c>)
 800e2a4:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800e2a6:	4b09      	ldr	r3, [pc, #36]	; (800e2cc <TL_Init+0x48>)
 800e2a8:	4a0e      	ldr	r2, [pc, #56]	; (800e2e4 <TL_Init+0x60>)
 800e2aa:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800e2ac:	4b07      	ldr	r3, [pc, #28]	; (800e2cc <TL_Init+0x48>)
 800e2ae:	4a0e      	ldr	r2, [pc, #56]	; (800e2e8 <TL_Init+0x64>)
 800e2b0:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800e2b2:	4b06      	ldr	r3, [pc, #24]	; (800e2cc <TL_Init+0x48>)
 800e2b4:	4a0d      	ldr	r2, [pc, #52]	; (800e2ec <TL_Init+0x68>)
 800e2b6:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800e2b8:	4b04      	ldr	r3, [pc, #16]	; (800e2cc <TL_Init+0x48>)
 800e2ba:	4a0d      	ldr	r2, [pc, #52]	; (800e2f0 <TL_Init+0x6c>)
 800e2bc:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800e2be:	4b03      	ldr	r3, [pc, #12]	; (800e2cc <TL_Init+0x48>)
 800e2c0:	4a0c      	ldr	r2, [pc, #48]	; (800e2f4 <TL_Init+0x70>)
 800e2c2:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800e2c4:	f001 f82a 	bl	800f31c <HW_IPCC_Init>

  return;
 800e2c8:	bf00      	nop
}
 800e2ca:	bd80      	pop	{r7, pc}
 800e2cc:	20030000 	.word	0x20030000
 800e2d0:	20030028 	.word	0x20030028
 800e2d4:	20030048 	.word	0x20030048
 800e2d8:	20030058 	.word	0x20030058
 800e2dc:	20030068 	.word	0x20030068
 800e2e0:	20030070 	.word	0x20030070
 800e2e4:	20030078 	.word	0x20030078
 800e2e8:	20030080 	.word	0x20030080
 800e2ec:	2003009c 	.word	0x2003009c
 800e2f0:	200300a0 	.word	0x200300a0
 800e2f4:	200300ac 	.word	0x200300ac

0800e2f8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b084      	sub	sp, #16
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800e304:	4811      	ldr	r0, [pc, #68]	; (800e34c <TL_BLE_Init+0x54>)
 800e306:	f000 fa27 	bl	800e758 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800e30a:	4b11      	ldr	r3, [pc, #68]	; (800e350 <TL_BLE_Init+0x58>)
 800e30c:	685b      	ldr	r3, [r3, #4]
 800e30e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	689a      	ldr	r2, [r3, #8]
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	68da      	ldr	r2, [r3, #12]
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	4a0c      	ldr	r2, [pc, #48]	; (800e354 <TL_BLE_Init+0x5c>)
 800e324:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	4a08      	ldr	r2, [pc, #32]	; (800e34c <TL_BLE_Init+0x54>)
 800e32a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800e32c:	f001 f80c 	bl	800f348 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	4a08      	ldr	r2, [pc, #32]	; (800e358 <TL_BLE_Init+0x60>)
 800e336:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	685b      	ldr	r3, [r3, #4]
 800e33c:	4a07      	ldr	r2, [pc, #28]	; (800e35c <TL_BLE_Init+0x64>)
 800e33e:	6013      	str	r3, [r2, #0]

  return 0;
 800e340:	2300      	movs	r3, #0
}
 800e342:	4618      	mov	r0, r3
 800e344:	3710      	adds	r7, #16
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
 800e34a:	bf00      	nop
 800e34c:	200300c8 	.word	0x200300c8
 800e350:	20030000 	.word	0x20030000
 800e354:	20030a58 	.word	0x20030a58
 800e358:	200016d0 	.word	0x200016d0
 800e35c:	200016d4 	.word	0x200016d4

0800e360 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b082      	sub	sp, #8
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
 800e368:	460b      	mov	r3, r1
 800e36a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800e36c:	4b09      	ldr	r3, [pc, #36]	; (800e394 <TL_BLE_SendCmd+0x34>)
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	2201      	movs	r2, #1
 800e374:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800e376:	4b07      	ldr	r3, [pc, #28]	; (800e394 <TL_BLE_SendCmd+0x34>)
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	4619      	mov	r1, r3
 800e37e:	2001      	movs	r0, #1
 800e380:	f000 f96c 	bl	800e65c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800e384:	f000 ffea 	bl	800f35c <HW_IPCC_BLE_SendCmd>

  return 0;
 800e388:	2300      	movs	r3, #0
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3708      	adds	r7, #8
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	20030000 	.word	0x20030000

0800e398 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800e39e:	e01c      	b.n	800e3da <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800e3a0:	1d3b      	adds	r3, r7, #4
 800e3a2:	4619      	mov	r1, r3
 800e3a4:	4812      	ldr	r0, [pc, #72]	; (800e3f0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e3a6:	f000 fa76 	bl	800e896 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	7a5b      	ldrb	r3, [r3, #9]
 800e3ae:	2b0f      	cmp	r3, #15
 800e3b0:	d003      	beq.n	800e3ba <HW_IPCC_BLE_RxEvtNot+0x22>
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	7a5b      	ldrb	r3, [r3, #9]
 800e3b6:	2b0e      	cmp	r3, #14
 800e3b8:	d105      	bne.n	800e3c6 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	4619      	mov	r1, r3
 800e3be:	2002      	movs	r0, #2
 800e3c0:	f000 f94c 	bl	800e65c <OutputDbgTrace>
 800e3c4:	e004      	b.n	800e3d0 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	2003      	movs	r0, #3
 800e3cc:	f000 f946 	bl	800e65c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800e3d0:	4b08      	ldr	r3, [pc, #32]	; (800e3f4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	687a      	ldr	r2, [r7, #4]
 800e3d6:	4610      	mov	r0, r2
 800e3d8:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800e3da:	4805      	ldr	r0, [pc, #20]	; (800e3f0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e3dc:	f000 f9cc 	bl	800e778 <LST_is_empty>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d0dc      	beq.n	800e3a0 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800e3e6:	bf00      	nop
}
 800e3e8:	3708      	adds	r7, #8
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	200300c8 	.word	0x200300c8
 800e3f4:	200016d0 	.word	0x200016d0

0800e3f8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800e3fc:	4b02      	ldr	r3, [pc, #8]	; (800e408 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	4798      	blx	r3

  return;
 800e402:	bf00      	nop
}
 800e404:	bd80      	pop	{r7, pc}
 800e406:	bf00      	nop
 800e408:	200016d4 	.word	0x200016d4

0800e40c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b084      	sub	sp, #16
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800e418:	480d      	ldr	r0, [pc, #52]	; (800e450 <TL_SYS_Init+0x44>)
 800e41a:	f000 f99d 	bl	800e758 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800e41e:	4b0d      	ldr	r3, [pc, #52]	; (800e454 <TL_SYS_Init+0x48>)
 800e420:	68db      	ldr	r3, [r3, #12]
 800e422:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	689a      	ldr	r2, [r3, #8]
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	4a08      	ldr	r2, [pc, #32]	; (800e450 <TL_SYS_Init+0x44>)
 800e430:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800e432:	f000 ffb5 	bl	800f3a0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	4a07      	ldr	r2, [pc, #28]	; (800e458 <TL_SYS_Init+0x4c>)
 800e43c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	685b      	ldr	r3, [r3, #4]
 800e442:	4a06      	ldr	r2, [pc, #24]	; (800e45c <TL_SYS_Init+0x50>)
 800e444:	6013      	str	r3, [r2, #0]

  return 0;
 800e446:	2300      	movs	r3, #0
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3710      	adds	r7, #16
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}
 800e450:	200300d0 	.word	0x200300d0
 800e454:	20030000 	.word	0x20030000
 800e458:	200016d8 	.word	0x200016d8
 800e45c:	200016dc 	.word	0x200016dc

0800e460 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b082      	sub	sp, #8
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
 800e468:	460b      	mov	r3, r1
 800e46a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800e46c:	4b09      	ldr	r3, [pc, #36]	; (800e494 <TL_SYS_SendCmd+0x34>)
 800e46e:	68db      	ldr	r3, [r3, #12]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	2210      	movs	r2, #16
 800e474:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800e476:	4b07      	ldr	r3, [pc, #28]	; (800e494 <TL_SYS_SendCmd+0x34>)
 800e478:	68db      	ldr	r3, [r3, #12]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	4619      	mov	r1, r3
 800e47e:	2004      	movs	r0, #4
 800e480:	f000 f8ec 	bl	800e65c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800e484:	f000 ff96 	bl	800f3b4 <HW_IPCC_SYS_SendCmd>

  return 0;
 800e488:	2300      	movs	r3, #0
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	3708      	adds	r7, #8
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}
 800e492:	bf00      	nop
 800e494:	20030000 	.word	0x20030000

0800e498 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e49c:	4b07      	ldr	r3, [pc, #28]	; (800e4bc <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800e49e:	68db      	ldr	r3, [r3, #12]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	4619      	mov	r1, r3
 800e4a4:	2005      	movs	r0, #5
 800e4a6:	f000 f8d9 	bl	800e65c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e4aa:	4b05      	ldr	r3, [pc, #20]	; (800e4c0 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	4a03      	ldr	r2, [pc, #12]	; (800e4bc <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800e4b0:	68d2      	ldr	r2, [r2, #12]
 800e4b2:	6812      	ldr	r2, [r2, #0]
 800e4b4:	4610      	mov	r0, r2
 800e4b6:	4798      	blx	r3

  return;
 800e4b8:	bf00      	nop
}
 800e4ba:	bd80      	pop	{r7, pc}
 800e4bc:	20030000 	.word	0x20030000
 800e4c0:	200016d8 	.word	0x200016d8

0800e4c4 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b082      	sub	sp, #8
 800e4c8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800e4ca:	e00e      	b.n	800e4ea <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800e4cc:	1d3b      	adds	r3, r7, #4
 800e4ce:	4619      	mov	r1, r3
 800e4d0:	480b      	ldr	r0, [pc, #44]	; (800e500 <HW_IPCC_SYS_EvtNot+0x3c>)
 800e4d2:	f000 f9e0 	bl	800e896 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	4619      	mov	r1, r3
 800e4da:	2006      	movs	r0, #6
 800e4dc:	f000 f8be 	bl	800e65c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800e4e0:	4b08      	ldr	r3, [pc, #32]	; (800e504 <HW_IPCC_SYS_EvtNot+0x40>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	687a      	ldr	r2, [r7, #4]
 800e4e6:	4610      	mov	r0, r2
 800e4e8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800e4ea:	4805      	ldr	r0, [pc, #20]	; (800e500 <HW_IPCC_SYS_EvtNot+0x3c>)
 800e4ec:	f000 f944 	bl	800e778 <LST_is_empty>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d0ea      	beq.n	800e4cc <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800e4f6:	bf00      	nop
}
 800e4f8:	3708      	adds	r7, #8
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}
 800e4fe:	bf00      	nop
 800e500:	200300d0 	.word	0x200300d0
 800e504:	200016dc 	.word	0x200016dc

0800e508 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800e510:	4817      	ldr	r0, [pc, #92]	; (800e570 <TL_MM_Init+0x68>)
 800e512:	f000 f921 	bl	800e758 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800e516:	4817      	ldr	r0, [pc, #92]	; (800e574 <TL_MM_Init+0x6c>)
 800e518:	f000 f91e 	bl	800e758 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800e51c:	4b16      	ldr	r3, [pc, #88]	; (800e578 <TL_MM_Init+0x70>)
 800e51e:	691b      	ldr	r3, [r3, #16]
 800e520:	4a16      	ldr	r2, [pc, #88]	; (800e57c <TL_MM_Init+0x74>)
 800e522:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800e524:	4b15      	ldr	r3, [pc, #84]	; (800e57c <TL_MM_Init+0x74>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	687a      	ldr	r2, [r7, #4]
 800e52a:	6892      	ldr	r2, [r2, #8]
 800e52c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800e52e:	4b13      	ldr	r3, [pc, #76]	; (800e57c <TL_MM_Init+0x74>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	687a      	ldr	r2, [r7, #4]
 800e534:	68d2      	ldr	r2, [r2, #12]
 800e536:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800e538:	4b10      	ldr	r3, [pc, #64]	; (800e57c <TL_MM_Init+0x74>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	4a0c      	ldr	r2, [pc, #48]	; (800e570 <TL_MM_Init+0x68>)
 800e53e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800e540:	4b0e      	ldr	r3, [pc, #56]	; (800e57c <TL_MM_Init+0x74>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	687a      	ldr	r2, [r7, #4]
 800e546:	6812      	ldr	r2, [r2, #0]
 800e548:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800e54a:	4b0c      	ldr	r3, [pc, #48]	; (800e57c <TL_MM_Init+0x74>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	687a      	ldr	r2, [r7, #4]
 800e550:	6852      	ldr	r2, [r2, #4]
 800e552:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800e554:	4b09      	ldr	r3, [pc, #36]	; (800e57c <TL_MM_Init+0x74>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	687a      	ldr	r2, [r7, #4]
 800e55a:	6912      	ldr	r2, [r2, #16]
 800e55c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800e55e:	4b07      	ldr	r3, [pc, #28]	; (800e57c <TL_MM_Init+0x74>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	687a      	ldr	r2, [r7, #4]
 800e564:	6952      	ldr	r2, [r2, #20]
 800e566:	619a      	str	r2, [r3, #24]

  return;
 800e568:	bf00      	nop
}
 800e56a:	3708      	adds	r7, #8
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}
 800e570:	200300b8 	.word	0x200300b8
 800e574:	200016c8 	.word	0x200016c8
 800e578:	20030000 	.word	0x20030000
 800e57c:	200016e0 	.word	0x200016e0

0800e580 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b082      	sub	sp, #8
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800e588:	6879      	ldr	r1, [r7, #4]
 800e58a:	4807      	ldr	r0, [pc, #28]	; (800e5a8 <TL_MM_EvtDone+0x28>)
 800e58c:	f000 f93c 	bl	800e808 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800e590:	6879      	ldr	r1, [r7, #4]
 800e592:	2000      	movs	r0, #0
 800e594:	f000 f862 	bl	800e65c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800e598:	4804      	ldr	r0, [pc, #16]	; (800e5ac <TL_MM_EvtDone+0x2c>)
 800e59a:	f000 ff31 	bl	800f400 <HW_IPCC_MM_SendFreeBuf>

  return;
 800e59e:	bf00      	nop
}
 800e5a0:	3708      	adds	r7, #8
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	bd80      	pop	{r7, pc}
 800e5a6:	bf00      	nop
 800e5a8:	200016c8 	.word	0x200016c8
 800e5ac:	0800e5b1 	.word	0x0800e5b1

0800e5b0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800e5b6:	e00c      	b.n	800e5d2 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800e5b8:	1d3b      	adds	r3, r7, #4
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	480a      	ldr	r0, [pc, #40]	; (800e5e8 <SendFreeBuf+0x38>)
 800e5be:	f000 f96a 	bl	800e896 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800e5c2:	4b0a      	ldr	r3, [pc, #40]	; (800e5ec <SendFreeBuf+0x3c>)
 800e5c4:	691b      	ldr	r3, [r3, #16]
 800e5c6:	691b      	ldr	r3, [r3, #16]
 800e5c8:	687a      	ldr	r2, [r7, #4]
 800e5ca:	4611      	mov	r1, r2
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f000 f91b 	bl	800e808 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800e5d2:	4805      	ldr	r0, [pc, #20]	; (800e5e8 <SendFreeBuf+0x38>)
 800e5d4:	f000 f8d0 	bl	800e778 <LST_is_empty>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d0ec      	beq.n	800e5b8 <SendFreeBuf+0x8>
  }

  return;
 800e5de:	bf00      	nop
}
 800e5e0:	3708      	adds	r7, #8
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}
 800e5e6:	bf00      	nop
 800e5e8:	200016c8 	.word	0x200016c8
 800e5ec:	20030000 	.word	0x20030000

0800e5f0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800e5f4:	4805      	ldr	r0, [pc, #20]	; (800e60c <TL_TRACES_Init+0x1c>)
 800e5f6:	f000 f8af 	bl	800e758 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800e5fa:	4b05      	ldr	r3, [pc, #20]	; (800e610 <TL_TRACES_Init+0x20>)
 800e5fc:	695b      	ldr	r3, [r3, #20]
 800e5fe:	4a03      	ldr	r2, [pc, #12]	; (800e60c <TL_TRACES_Init+0x1c>)
 800e600:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800e602:	f000 ff33 	bl	800f46c <HW_IPCC_TRACES_Init>

  return;
 800e606:	bf00      	nop
}
 800e608:	bd80      	pop	{r7, pc}
 800e60a:	bf00      	nop
 800e60c:	200300c0 	.word	0x200300c0
 800e610:	20030000 	.word	0x20030000

0800e614 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b082      	sub	sp, #8
 800e618:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800e61a:	e008      	b.n	800e62e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800e61c:	1d3b      	adds	r3, r7, #4
 800e61e:	4619      	mov	r1, r3
 800e620:	4808      	ldr	r0, [pc, #32]	; (800e644 <HW_IPCC_TRACES_EvtNot+0x30>)
 800e622:	f000 f938 	bl	800e896 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	4618      	mov	r0, r3
 800e62a:	f000 f80d 	bl	800e648 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800e62e:	4805      	ldr	r0, [pc, #20]	; (800e644 <HW_IPCC_TRACES_EvtNot+0x30>)
 800e630:	f000 f8a2 	bl	800e778 <LST_is_empty>
 800e634:	4603      	mov	r3, r0
 800e636:	2b00      	cmp	r3, #0
 800e638:	d0f0      	beq.n	800e61c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800e63a:	bf00      	nop
}
 800e63c:	3708      	adds	r7, #8
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	200300c0 	.word	0x200300c0

0800e648 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800e648:	b480      	push	{r7}
 800e64a:	b083      	sub	sp, #12
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800e650:	bf00      	nop
 800e652:	370c      	adds	r7, #12
 800e654:	46bd      	mov	sp, r7
 800e656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65a:	4770      	bx	lr

0800e65c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800e65c:	b480      	push	{r7}
 800e65e:	b085      	sub	sp, #20
 800e660:	af00      	add	r7, sp, #0
 800e662:	4603      	mov	r3, r0
 800e664:	6039      	str	r1, [r7, #0]
 800e666:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800e668:	79fb      	ldrb	r3, [r7, #7]
 800e66a:	2b06      	cmp	r3, #6
 800e66c:	d845      	bhi.n	800e6fa <OutputDbgTrace+0x9e>
 800e66e:	a201      	add	r2, pc, #4	; (adr r2, 800e674 <OutputDbgTrace+0x18>)
 800e670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e674:	0800e691 	.word	0x0800e691
 800e678:	0800e6b5 	.word	0x0800e6b5
 800e67c:	0800e6bb 	.word	0x0800e6bb
 800e680:	0800e6cf 	.word	0x0800e6cf
 800e684:	0800e6db 	.word	0x0800e6db
 800e688:	0800e6e1 	.word	0x0800e6e1
 800e68c:	0800e6ef 	.word	0x0800e6ef
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	7a5b      	ldrb	r3, [r3, #9]
 800e698:	2bff      	cmp	r3, #255	; 0xff
 800e69a:	d005      	beq.n	800e6a8 <OutputDbgTrace+0x4c>
 800e69c:	2bff      	cmp	r3, #255	; 0xff
 800e69e:	dc05      	bgt.n	800e6ac <OutputDbgTrace+0x50>
 800e6a0:	2b0e      	cmp	r3, #14
 800e6a2:	d005      	beq.n	800e6b0 <OutputDbgTrace+0x54>
 800e6a4:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800e6a6:	e001      	b.n	800e6ac <OutputDbgTrace+0x50>
          break;
 800e6a8:	bf00      	nop
 800e6aa:	e027      	b.n	800e6fc <OutputDbgTrace+0xa0>
          break;
 800e6ac:	bf00      	nop
 800e6ae:	e025      	b.n	800e6fc <OutputDbgTrace+0xa0>
          break;
 800e6b0:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800e6b2:	e023      	b.n	800e6fc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800e6b8:	e020      	b.n	800e6fc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	7a5b      	ldrb	r3, [r3, #9]
 800e6c2:	2b0e      	cmp	r3, #14
 800e6c4:	d001      	beq.n	800e6ca <OutputDbgTrace+0x6e>
 800e6c6:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800e6c8:	e000      	b.n	800e6cc <OutputDbgTrace+0x70>
          break;
 800e6ca:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e6cc:	e016      	b.n	800e6fc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	7a5b      	ldrb	r3, [r3, #9]
 800e6d6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e6d8:	e010      	b.n	800e6fc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800e6de:	e00d      	b.n	800e6fc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	7a5b      	ldrb	r3, [r3, #9]
 800e6e8:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800e6ea:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e6ec:	e006      	b.n	800e6fc <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	7a5b      	ldrb	r3, [r3, #9]
 800e6f6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e6f8:	e000      	b.n	800e6fc <OutputDbgTrace+0xa0>

    default:
      break;
 800e6fa:	bf00      	nop
  }

  return;
 800e6fc:	bf00      	nop
}
 800e6fe:	3714      	adds	r7, #20
 800e700:	46bd      	mov	sp, r7
 800e702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e706:	4770      	bx	lr

0800e708 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800e708:	b480      	push	{r7}
 800e70a:	b085      	sub	sp, #20
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	4603      	mov	r3, r0
 800e710:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800e712:	4b0f      	ldr	r3, [pc, #60]	; (800e750 <OTP_Read+0x48>)
 800e714:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800e716:	e002      	b.n	800e71e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	3b08      	subs	r3, #8
 800e71c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	3307      	adds	r3, #7
 800e722:	781b      	ldrb	r3, [r3, #0]
 800e724:	79fa      	ldrb	r2, [r7, #7]
 800e726:	429a      	cmp	r2, r3
 800e728:	d003      	beq.n	800e732 <OTP_Read+0x2a>
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	4a09      	ldr	r2, [pc, #36]	; (800e754 <OTP_Read+0x4c>)
 800e72e:	4293      	cmp	r3, r2
 800e730:	d1f2      	bne.n	800e718 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	3307      	adds	r3, #7
 800e736:	781b      	ldrb	r3, [r3, #0]
 800e738:	79fa      	ldrb	r2, [r7, #7]
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d001      	beq.n	800e742 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800e73e:	2300      	movs	r3, #0
 800e740:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800e742:	68fb      	ldr	r3, [r7, #12]
}
 800e744:	4618      	mov	r0, r3
 800e746:	3714      	adds	r7, #20
 800e748:	46bd      	mov	sp, r7
 800e74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74e:	4770      	bx	lr
 800e750:	1fff73f8 	.word	0x1fff73f8
 800e754:	1fff7000 	.word	0x1fff7000

0800e758 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800e758:	b480      	push	{r7}
 800e75a:	b083      	sub	sp, #12
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	687a      	ldr	r2, [r7, #4]
 800e764:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	687a      	ldr	r2, [r7, #4]
 800e76a:	605a      	str	r2, [r3, #4]
}
 800e76c:	bf00      	nop
 800e76e:	370c      	adds	r7, #12
 800e770:	46bd      	mov	sp, r7
 800e772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e776:	4770      	bx	lr

0800e778 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800e778:	b480      	push	{r7}
 800e77a:	b087      	sub	sp, #28
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e780:	f3ef 8310 	mrs	r3, PRIMASK
 800e784:	60fb      	str	r3, [r7, #12]
  return(result);
 800e786:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e788:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800e78a:	b672      	cpsid	i
}
 800e78c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	687a      	ldr	r2, [r7, #4]
 800e794:	429a      	cmp	r2, r3
 800e796:	d102      	bne.n	800e79e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800e798:	2301      	movs	r3, #1
 800e79a:	75fb      	strb	r3, [r7, #23]
 800e79c:	e001      	b.n	800e7a2 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	75fb      	strb	r3, [r7, #23]
 800e7a2:	693b      	ldr	r3, [r7, #16]
 800e7a4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	f383 8810 	msr	PRIMASK, r3
}
 800e7ac:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800e7ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	371c      	adds	r7, #28
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ba:	4770      	bx	lr

0800e7bc <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b087      	sub	sp, #28
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
 800e7c4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e7c6:	f3ef 8310 	mrs	r3, PRIMASK
 800e7ca:	60fb      	str	r3, [r7, #12]
  return(result);
 800e7cc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e7ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e7d0:	b672      	cpsid	i
}
 800e7d2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681a      	ldr	r2, [r3, #0]
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	687a      	ldr	r2, [r7, #4]
 800e7e0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	683a      	ldr	r2, [r7, #0]
 800e7e6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	683a      	ldr	r2, [r7, #0]
 800e7ee:	605a      	str	r2, [r3, #4]
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	f383 8810 	msr	PRIMASK, r3
}
 800e7fa:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e7fc:	bf00      	nop
 800e7fe:	371c      	adds	r7, #28
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr

0800e808 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800e808:	b480      	push	{r7}
 800e80a:	b087      	sub	sp, #28
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e812:	f3ef 8310 	mrs	r3, PRIMASK
 800e816:	60fb      	str	r3, [r7, #12]
  return(result);
 800e818:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e81a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e81c:	b672      	cpsid	i
}
 800e81e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	687a      	ldr	r2, [r7, #4]
 800e824:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	685a      	ldr	r2, [r3, #4]
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	683a      	ldr	r2, [r7, #0]
 800e832:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	685b      	ldr	r3, [r3, #4]
 800e838:	683a      	ldr	r2, [r7, #0]
 800e83a:	601a      	str	r2, [r3, #0]
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	f383 8810 	msr	PRIMASK, r3
}
 800e846:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e848:	bf00      	nop
 800e84a:	371c      	adds	r7, #28
 800e84c:	46bd      	mov	sp, r7
 800e84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e852:	4770      	bx	lr

0800e854 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800e854:	b480      	push	{r7}
 800e856:	b087      	sub	sp, #28
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e85c:	f3ef 8310 	mrs	r3, PRIMASK
 800e860:	60fb      	str	r3, [r7, #12]
  return(result);
 800e862:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e864:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e866:	b672      	cpsid	i
}
 800e868:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	685b      	ldr	r3, [r3, #4]
 800e86e:	687a      	ldr	r2, [r7, #4]
 800e870:	6812      	ldr	r2, [r2, #0]
 800e872:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	687a      	ldr	r2, [r7, #4]
 800e87a:	6852      	ldr	r2, [r2, #4]
 800e87c:	605a      	str	r2, [r3, #4]
 800e87e:	697b      	ldr	r3, [r7, #20]
 800e880:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	f383 8810 	msr	PRIMASK, r3
}
 800e888:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e88a:	bf00      	nop
 800e88c:	371c      	adds	r7, #28
 800e88e:	46bd      	mov	sp, r7
 800e890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e894:	4770      	bx	lr

0800e896 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800e896:	b580      	push	{r7, lr}
 800e898:	b086      	sub	sp, #24
 800e89a:	af00      	add	r7, sp, #0
 800e89c:	6078      	str	r0, [r7, #4]
 800e89e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8a0:	f3ef 8310 	mrs	r3, PRIMASK
 800e8a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800e8a6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e8a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e8aa:	b672      	cpsid	i
}
 800e8ac:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681a      	ldr	r2, [r3, #0]
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f7ff ffca 	bl	800e854 <LST_remove_node>
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	f383 8810 	msr	PRIMASK, r3
}
 800e8ca:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e8cc:	bf00      	nop
 800e8ce:	3718      	adds	r7, #24
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}

0800e8d4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800e8d8:	4b03      	ldr	r3, [pc, #12]	; (800e8e8 <LL_FLASH_GetUDN+0x14>)
 800e8da:	681b      	ldr	r3, [r3, #0]
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e4:	4770      	bx	lr
 800e8e6:	bf00      	nop
 800e8e8:	1fff7580 	.word	0x1fff7580

0800e8ec <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800e8f0:	4b03      	ldr	r3, [pc, #12]	; (800e900 <LL_FLASH_GetDeviceID+0x14>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	b2db      	uxtb	r3, r3
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr
 800e900:	1fff7584 	.word	0x1fff7584

0800e904 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800e904:	b480      	push	{r7}
 800e906:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800e908:	4b03      	ldr	r3, [pc, #12]	; (800e918 <LL_FLASH_GetSTCompanyID+0x14>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	0a1b      	lsrs	r3, r3, #8
}
 800e90e:	4618      	mov	r0, r3
 800e910:	46bd      	mov	sp, r7
 800e912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e916:	4770      	bx	lr
 800e918:	1fff7584 	.word	0x1fff7584

0800e91c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800e91c:	b5b0      	push	{r4, r5, r7, lr}
 800e91e:	b090      	sub	sp, #64	; 0x40
 800e920:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800e922:	2392      	movs	r3, #146	; 0x92
 800e924:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800e928:	4b2e      	ldr	r3, [pc, #184]	; (800e9e4 <APP_BLE_Init+0xc8>)
 800e92a:	1d3c      	adds	r4, r7, #4
 800e92c:	461d      	mov	r5, r3
 800e92e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e936:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e938:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e93a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e93e:	c403      	stmia	r4!, {r0, r1}
 800e940:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800e942:	f000 f90b 	bl	800eb5c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800e946:	2101      	movs	r1, #1
 800e948:	2002      	movs	r0, #2
 800e94a:	f000 fdb7 	bl	800f4bc <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800e94e:	4a26      	ldr	r2, [pc, #152]	; (800e9e8 <APP_BLE_Init+0xcc>)
 800e950:	2100      	movs	r1, #0
 800e952:	2002      	movs	r0, #2
 800e954:	f000 fede 	bl	800f714 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800e958:	1d3b      	adds	r3, r7, #4
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7ff f8c6 	bl	800daec <SHCI_C2_BLE_Init>
 800e960:	4603      	mov	r3, r0
 800e962:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800e966:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d001      	beq.n	800e972 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800e96e:	f7f8 f905 	bl	8006b7c <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800e972:	f000 f909 	bl	800eb88 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800e976:	f7ff f813 	bl	800d9a0 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800e97a:	4b1c      	ldr	r3, [pc, #112]	; (800e9ec <APP_BLE_Init+0xd0>)
 800e97c:	2200      	movs	r2, #0
 800e97e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800e982:	4b1a      	ldr	r3, [pc, #104]	; (800e9ec <APP_BLE_Init+0xd0>)
 800e984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e988:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800e98a:	4a19      	ldr	r2, [pc, #100]	; (800e9f0 <APP_BLE_Init+0xd4>)
 800e98c:	2100      	movs	r1, #0
 800e98e:	2001      	movs	r0, #1
 800e990:	f000 fec0 	bl	800f714 <UTIL_SEQ_RegTask>
#if (BLE_CFG_OTA_REBOOT_CHAR != 0)
  a_ManufData[sizeof(a_ManufData)-8] = CFG_FEATURE_OTA_REBOOT;
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800e994:	2006      	movs	r0, #6
 800e996:	f7fe fcf3 	bl	800d380 <aci_hal_set_radio_activity_mask>
 800e99a:	4603      	mov	r3, r0
 800e99c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800e9a0:	f000 fb2a 	bl	800eff8 <P2PS_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800e9a4:	4b13      	ldr	r3, [pc, #76]	; (800e9f4 <APP_BLE_Init+0xd8>)
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	4913      	ldr	r1, [pc, #76]	; (800e9f8 <APP_BLE_Init+0xdc>)
 800e9aa:	2000      	movs	r0, #0
 800e9ac:	f7f7 fabc 	bl	8005f28 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800e9b0:	4b12      	ldr	r3, [pc, #72]	; (800e9fc <APP_BLE_Init+0xe0>)
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	4912      	ldr	r1, [pc, #72]	; (800ea00 <APP_BLE_Init+0xe4>)
 800e9b6:	2000      	movs	r0, #0
 800e9b8:	f7f7 fab6 	bl	8005f28 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800e9bc:	4b0b      	ldr	r3, [pc, #44]	; (800e9ec <APP_BLE_Init+0xd0>)
 800e9be:	2200      	movs	r2, #0
 800e9c0:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800e9c2:	4b0a      	ldr	r3, [pc, #40]	; (800e9ec <APP_BLE_Init+0xd0>)
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800e9c8:	4b0e      	ldr	r3, [pc, #56]	; (800ea04 <APP_BLE_Init+0xe8>)
 800e9ca:	2280      	movs	r2, #128	; 0x80
 800e9cc:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800e9ce:	4b0e      	ldr	r3, [pc, #56]	; (800ea08 <APP_BLE_Init+0xec>)
 800e9d0:	22a0      	movs	r2, #160	; 0xa0
 800e9d2:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800e9d4:	2001      	movs	r0, #1
 800e9d6:	f000 f9a9 	bl	800ed2c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800e9da:	bf00      	nop
}
 800e9dc:	3740      	adds	r7, #64	; 0x40
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bdb0      	pop	{r4, r5, r7, pc}
 800e9e2:	bf00      	nop
 800e9e4:	08013f68 	.word	0x08013f68
 800e9e8:	0800dd09 	.word	0x0800dd09
 800e9ec:	200016ec 	.word	0x200016ec
 800e9f0:	0800ee95 	.word	0x0800ee95
 800e9f4:	0800eec9 	.word	0x0800eec9
 800e9f8:	2000176d 	.word	0x2000176d
 800e9fc:	0800eed9 	.word	0x0800eed9
 800ea00:	2000176e 	.word	0x2000176e
 800ea04:	20001770 	.word	0x20001770
 800ea08:	20001772 	.word	0x20001772

0800ea0c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b08a      	sub	sp, #40	; 0x28
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800ea14:	2392      	movs	r3, #146	; 0x92
 800ea16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	3301      	adds	r3, #1
 800ea1e:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800ea20:	6a3b      	ldr	r3, [r7, #32]
 800ea22:	781b      	ldrb	r3, [r3, #0]
 800ea24:	2bff      	cmp	r3, #255	; 0xff
 800ea26:	d076      	beq.n	800eb16 <SVCCTL_App_Notification+0x10a>
 800ea28:	2bff      	cmp	r3, #255	; 0xff
 800ea2a:	f300 808b 	bgt.w	800eb44 <SVCCTL_App_Notification+0x138>
 800ea2e:	2b05      	cmp	r3, #5
 800ea30:	d002      	beq.n	800ea38 <SVCCTL_App_Notification+0x2c>
 800ea32:	2b3e      	cmp	r3, #62	; 0x3e
 800ea34:	d020      	beq.n	800ea78 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800ea36:	e085      	b.n	800eb44 <SVCCTL_App_Notification+0x138>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800ea38:	6a3b      	ldr	r3, [r7, #32]
 800ea3a:	3302      	adds	r3, #2
 800ea3c:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ea44:	b29a      	uxth	r2, r3
 800ea46:	4b43      	ldr	r3, [pc, #268]	; (800eb54 <SVCCTL_App_Notification+0x148>)
 800ea48:	8adb      	ldrh	r3, [r3, #22]
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d106      	bne.n	800ea5c <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800ea4e:	4b41      	ldr	r3, [pc, #260]	; (800eb54 <SVCCTL_App_Notification+0x148>)
 800ea50:	2200      	movs	r2, #0
 800ea52:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ea54:	4b3f      	ldr	r3, [pc, #252]	; (800eb54 <SVCCTL_App_Notification+0x148>)
 800ea56:	2200      	movs	r2, #0
 800ea58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800ea5c:	2001      	movs	r0, #1
 800ea5e:	f000 f965 	bl	800ed2c <Adv_Request>
      HandleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800ea62:	4b3d      	ldr	r3, [pc, #244]	; (800eb58 <SVCCTL_App_Notification+0x14c>)
 800ea64:	2201      	movs	r2, #1
 800ea66:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800ea68:	4b3a      	ldr	r3, [pc, #232]	; (800eb54 <SVCCTL_App_Notification+0x148>)
 800ea6a:	8ada      	ldrh	r2, [r3, #22]
 800ea6c:	4b3a      	ldr	r3, [pc, #232]	; (800eb58 <SVCCTL_App_Notification+0x14c>)
 800ea6e:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&HandleNotification);
 800ea70:	4839      	ldr	r0, [pc, #228]	; (800eb58 <SVCCTL_App_Notification+0x14c>)
 800ea72:	f000 faad 	bl	800efd0 <P2PS_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800ea76:	e068      	b.n	800eb4a <SVCCTL_App_Notification+0x13e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800ea78:	6a3b      	ldr	r3, [r7, #32]
 800ea7a:	3302      	adds	r3, #2
 800ea7c:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 800ea7e:	69bb      	ldr	r3, [r7, #24]
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	2b0c      	cmp	r3, #12
 800ea84:	d005      	beq.n	800ea92 <SVCCTL_App_Notification+0x86>
 800ea86:	2b0c      	cmp	r3, #12
 800ea88:	dc41      	bgt.n	800eb0e <SVCCTL_App_Notification+0x102>
 800ea8a:	2b01      	cmp	r3, #1
 800ea8c:	d017      	beq.n	800eabe <SVCCTL_App_Notification+0xb2>
 800ea8e:	2b03      	cmp	r3, #3
          break;
 800ea90:	e03d      	b.n	800eb0e <SVCCTL_App_Notification+0x102>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 800ea92:	69bb      	ldr	r3, [r7, #24]
 800ea94:	3301      	adds	r3, #1
 800ea96:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 800ea98:	4b2e      	ldr	r3, [pc, #184]	; (800eb54 <SVCCTL_App_Notification+0x148>)
 800ea9a:	8adb      	ldrh	r3, [r3, #22]
 800ea9c:	f107 020a 	add.w	r2, r7, #10
 800eaa0:	f107 010b 	add.w	r1, r7, #11
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7fe fce3 	bl	800d470 <hci_le_read_phy>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800eab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d12c      	bne.n	800eb12 <SVCCTL_App_Notification+0x106>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 800eab8:	7afb      	ldrb	r3, [r7, #11]
 800eaba:	2b02      	cmp	r3, #2
          break;
 800eabc:	e029      	b.n	800eb12 <SVCCTL_App_Notification+0x106>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800eabe:	69bb      	ldr	r3, [r7, #24]
 800eac0:	3301      	adds	r3, #1
 800eac2:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800eac4:	4b23      	ldr	r3, [pc, #140]	; (800eb54 <SVCCTL_App_Notification+0x148>)
 800eac6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7f7 faa6 	bl	800601c <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800ead0:	4b20      	ldr	r3, [pc, #128]	; (800eb54 <SVCCTL_App_Notification+0x148>)
 800ead2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ead6:	2b04      	cmp	r3, #4
 800ead8:	d104      	bne.n	800eae4 <SVCCTL_App_Notification+0xd8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800eada:	4b1e      	ldr	r3, [pc, #120]	; (800eb54 <SVCCTL_App_Notification+0x148>)
 800eadc:	2206      	movs	r2, #6
 800eade:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800eae2:	e003      	b.n	800eaec <SVCCTL_App_Notification+0xe0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800eae4:	4b1b      	ldr	r3, [pc, #108]	; (800eb54 <SVCCTL_App_Notification+0x148>)
 800eae6:	2205      	movs	r2, #5
 800eae8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800eaec:	693b      	ldr	r3, [r7, #16]
 800eaee:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800eaf2:	b29a      	uxth	r2, r3
 800eaf4:	4b17      	ldr	r3, [pc, #92]	; (800eb54 <SVCCTL_App_Notification+0x148>)
 800eaf6:	82da      	strh	r2, [r3, #22]
          HandleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800eaf8:	4b17      	ldr	r3, [pc, #92]	; (800eb58 <SVCCTL_App_Notification+0x14c>)
 800eafa:	2200      	movs	r2, #0
 800eafc:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800eafe:	4b15      	ldr	r3, [pc, #84]	; (800eb54 <SVCCTL_App_Notification+0x148>)
 800eb00:	8ada      	ldrh	r2, [r3, #22]
 800eb02:	4b15      	ldr	r3, [pc, #84]	; (800eb58 <SVCCTL_App_Notification+0x14c>)
 800eb04:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&HandleNotification);
 800eb06:	4814      	ldr	r0, [pc, #80]	; (800eb58 <SVCCTL_App_Notification+0x14c>)
 800eb08:	f000 fa62 	bl	800efd0 <P2PS_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800eb0c:	e002      	b.n	800eb14 <SVCCTL_App_Notification+0x108>
          break;
 800eb0e:	bf00      	nop
 800eb10:	e01b      	b.n	800eb4a <SVCCTL_App_Notification+0x13e>
          break;
 800eb12:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800eb14:	e019      	b.n	800eb4a <SVCCTL_App_Notification+0x13e>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800eb16:	6a3b      	ldr	r3, [r7, #32]
 800eb18:	3302      	adds	r3, #2
 800eb1a:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800eb1c:	69fb      	ldr	r3, [r7, #28]
 800eb1e:	881b      	ldrh	r3, [r3, #0]
 800eb20:	b29b      	uxth	r3, r3
 800eb22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb26:	d009      	beq.n	800eb3c <SVCCTL_App_Notification+0x130>
 800eb28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb2c:	dc0c      	bgt.n	800eb48 <SVCCTL_App_Notification+0x13c>
 800eb2e:	2b04      	cmp	r3, #4
 800eb30:	d006      	beq.n	800eb40 <SVCCTL_App_Notification+0x134>
 800eb32:	f240 4207 	movw	r2, #1031	; 0x407
 800eb36:	4293      	cmp	r3, r2
 800eb38:	d106      	bne.n	800eb48 <SVCCTL_App_Notification+0x13c>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800eb3a:	e002      	b.n	800eb42 <SVCCTL_App_Notification+0x136>
          break;
 800eb3c:	bf00      	nop
 800eb3e:	e003      	b.n	800eb48 <SVCCTL_App_Notification+0x13c>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800eb40:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800eb42:	e001      	b.n	800eb48 <SVCCTL_App_Notification+0x13c>
      break;
 800eb44:	bf00      	nop
 800eb46:	e000      	b.n	800eb4a <SVCCTL_App_Notification+0x13e>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800eb48:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800eb4a:	2301      	movs	r3, #1
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3728      	adds	r7, #40	; 0x28
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}
 800eb54:	200016ec 	.word	0x200016ec
 800eb58:	20001774 	.word	0x20001774

0800eb5c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b082      	sub	sp, #8
 800eb60:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800eb62:	4b06      	ldr	r3, [pc, #24]	; (800eb7c <Ble_Tl_Init+0x20>)
 800eb64:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800eb66:	4b06      	ldr	r3, [pc, #24]	; (800eb80 <Ble_Tl_Init+0x24>)
 800eb68:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800eb6a:	463b      	mov	r3, r7
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	4805      	ldr	r0, [pc, #20]	; (800eb84 <Ble_Tl_Init+0x28>)
 800eb70:	f7ff f8ae 	bl	800dcd0 <hci_init>

  return;
 800eb74:	bf00      	nop
}
 800eb76:	3708      	adds	r7, #8
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}
 800eb7c:	200300d8 	.word	0x200300d8
 800eb80:	0800ef63 	.word	0x0800ef63
 800eb84:	0800ef2b 	.word	0x0800ef2b

0800eb88 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800eb88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb8a:	b08d      	sub	sp, #52	; 0x34
 800eb8c:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800eb8e:	2300      	movs	r3, #0
 800eb90:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800eb92:	2392      	movs	r3, #146	; 0x92
 800eb94:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800eb96:	f7fe fc47 	bl	800d428 <hci_reset>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800eb9e:	f000 f935 	bl	800ee0c <BleGetBdAddress>
 800eba2:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800eba4:	693a      	ldr	r2, [r7, #16]
 800eba6:	2106      	movs	r1, #6
 800eba8:	2000      	movs	r0, #0
 800ebaa:	f7fe fafd 	bl	800d1a8 <aci_hal_write_config_data>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	3305      	adds	r3, #5
 800ebb6:	781a      	ldrb	r2, [r3, #0]
 800ebb8:	4b56      	ldr	r3, [pc, #344]	; (800ed14 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800ebba:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	3304      	adds	r3, #4
 800ebc0:	781a      	ldrb	r2, [r3, #0]
 800ebc2:	4b54      	ldr	r3, [pc, #336]	; (800ed14 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800ebc4:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	3303      	adds	r3, #3
 800ebca:	781a      	ldrb	r2, [r3, #0]
 800ebcc:	4b51      	ldr	r3, [pc, #324]	; (800ed14 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800ebce:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	3302      	adds	r3, #2
 800ebd4:	781a      	ldrb	r2, [r3, #0]
 800ebd6:	4b4f      	ldr	r3, [pc, #316]	; (800ed14 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800ebd8:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	3301      	adds	r3, #1
 800ebde:	781a      	ldrb	r2, [r3, #0]
 800ebe0:	4b4c      	ldr	r3, [pc, #304]	; (800ed14 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800ebe2:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	781a      	ldrb	r2, [r3, #0]
 800ebe8:	4b4a      	ldr	r3, [pc, #296]	; (800ed14 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800ebea:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800ebec:	4a4a      	ldr	r2, [pc, #296]	; (800ed18 <Ble_Hci_Gap_Gatt_Init+0x190>)
 800ebee:	2110      	movs	r1, #16
 800ebf0:	2018      	movs	r0, #24
 800ebf2:	f7fe fad9 	bl	800d1a8 <aci_hal_write_config_data>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800ebfa:	4a48      	ldr	r2, [pc, #288]	; (800ed1c <Ble_Hci_Gap_Gatt_Init+0x194>)
 800ebfc:	2110      	movs	r1, #16
 800ebfe:	2008      	movs	r0, #8
 800ec00:	f7fe fad2 	bl	800d1a8 <aci_hal_write_config_data>
 800ec04:	4603      	mov	r3, r0
 800ec06:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800ec08:	2118      	movs	r1, #24
 800ec0a:	2001      	movs	r0, #1
 800ec0c:	f7fe fb51 	bl	800d2b2 <aci_hal_set_tx_power_level>
 800ec10:	4603      	mov	r3, r0
 800ec12:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800ec14:	f7fe f81c 	bl	800cc50 <aci_gatt_init>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800ec20:	7bfb      	ldrb	r3, [r7, #15]
 800ec22:	f043 0301 	orr.w	r3, r3, #1
 800ec26:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800ec28:	7bfb      	ldrb	r3, [r7, #15]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d01f      	beq.n	800ec6e <Ble_Hci_Gap_Gatt_Init+0xe6>
  {
    const char *name = "P2PSRV1";
 800ec2e:	4b3c      	ldr	r3, [pc, #240]	; (800ed20 <Ble_Hci_Gap_Gatt_Init+0x198>)
 800ec30:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800ec32:	1dba      	adds	r2, r7, #6
 800ec34:	7bf8      	ldrb	r0, [r7, #15]
 800ec36:	1cbb      	adds	r3, r7, #2
 800ec38:	9301      	str	r3, [sp, #4]
 800ec3a:	1d3b      	adds	r3, r7, #4
 800ec3c:	9300      	str	r3, [sp, #0]
 800ec3e:	4613      	mov	r3, r2
 800ec40:	2207      	movs	r2, #7
 800ec42:	2100      	movs	r1, #0
 800ec44:	f7fd fec1 	bl	800c9ca <aci_gap_init>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800ec4c:	88fc      	ldrh	r4, [r7, #6]
 800ec4e:	88bd      	ldrh	r5, [r7, #4]
 800ec50:	68b8      	ldr	r0, [r7, #8]
 800ec52:	f7f1 fae5 	bl	8000220 <strlen>
 800ec56:	4603      	mov	r3, r0
 800ec58:	b2da      	uxtb	r2, r3
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	9300      	str	r3, [sp, #0]
 800ec5e:	4613      	mov	r3, r2
 800ec60:	2200      	movs	r2, #0
 800ec62:	4629      	mov	r1, r5
 800ec64:	4620      	mov	r0, r4
 800ec66:	f7fe f9f6 	bl	800d056 <aci_gatt_update_char_value>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800ec6e:	88f8      	ldrh	r0, [r7, #6]
 800ec70:	8879      	ldrh	r1, [r7, #2]
 800ec72:	463b      	mov	r3, r7
 800ec74:	9300      	str	r3, [sp, #0]
 800ec76:	2302      	movs	r3, #2
 800ec78:	2200      	movs	r2, #0
 800ec7a:	f7fe f9ec 	bl	800d056 <aci_gatt_update_char_value>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800ec82:	2202      	movs	r2, #2
 800ec84:	2102      	movs	r1, #2
 800ec86:	2000      	movs	r0, #0
 800ec88:	f7fe fc70 	bl	800d56c <hci_le_set_default_phy>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800ec90:	4b24      	ldr	r3, [pc, #144]	; (800ed24 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ec92:	2201      	movs	r2, #1
 800ec94:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800ec96:	4b23      	ldr	r3, [pc, #140]	; (800ed24 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ec98:	781b      	ldrb	r3, [r3, #0]
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f7fd fd7d 	bl	800c79a <aci_gap_set_io_capability>
 800eca0:	4603      	mov	r3, r0
 800eca2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800eca4:	4b1f      	ldr	r3, [pc, #124]	; (800ed24 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800eca6:	2201      	movs	r2, #1
 800eca8:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800ecaa:	4b1e      	ldr	r3, [pc, #120]	; (800ed24 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ecac:	2208      	movs	r2, #8
 800ecae:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800ecb0:	4b1c      	ldr	r3, [pc, #112]	; (800ed24 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ecb2:	2210      	movs	r2, #16
 800ecb4:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800ecb6:	4b1b      	ldr	r3, [pc, #108]	; (800ed24 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ecb8:	2200      	movs	r2, #0
 800ecba:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800ecbc:	4b19      	ldr	r3, [pc, #100]	; (800ed24 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ecbe:	4a1a      	ldr	r2, [pc, #104]	; (800ed28 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 800ecc0:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800ecc2:	4b18      	ldr	r3, [pc, #96]	; (800ed24 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ecc4:	2201      	movs	r2, #1
 800ecc6:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800ecc8:	4b16      	ldr	r3, [pc, #88]	; (800ed24 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ecca:	789c      	ldrb	r4, [r3, #2]
 800eccc:	4b15      	ldr	r3, [pc, #84]	; (800ed24 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ecce:	785d      	ldrb	r5, [r3, #1]
 800ecd0:	4b14      	ldr	r3, [pc, #80]	; (800ed24 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ecd2:	791b      	ldrb	r3, [r3, #4]
 800ecd4:	4a13      	ldr	r2, [pc, #76]	; (800ed24 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ecd6:	7952      	ldrb	r2, [r2, #5]
 800ecd8:	4912      	ldr	r1, [pc, #72]	; (800ed24 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ecda:	78c9      	ldrb	r1, [r1, #3]
 800ecdc:	4811      	ldr	r0, [pc, #68]	; (800ed24 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ecde:	6880      	ldr	r0, [r0, #8]
 800ece0:	2600      	movs	r6, #0
 800ece2:	9604      	str	r6, [sp, #16]
 800ece4:	9003      	str	r0, [sp, #12]
 800ece6:	9102      	str	r1, [sp, #8]
 800ece8:	9201      	str	r2, [sp, #4]
 800ecea:	9300      	str	r3, [sp, #0]
 800ecec:	2300      	movs	r3, #0
 800ecee:	2201      	movs	r2, #1
 800ecf0:	4629      	mov	r1, r5
 800ecf2:	4620      	mov	r0, r4
 800ecf4:	f7fd fda5 	bl	800c842 <aci_gap_set_authentication_requirement>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800ecfc:	4b09      	ldr	r3, [pc, #36]	; (800ed24 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ecfe:	789b      	ldrb	r3, [r3, #2]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d003      	beq.n	800ed0c <Ble_Hci_Gap_Gatt_Init+0x184>
  {
    ret = aci_gap_configure_whitelist();
 800ed04:	f7fd ff80 	bl	800cc08 <aci_gap_configure_filter_accept_list>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800ed0c:	bf00      	nop
 800ed0e:	371c      	adds	r7, #28
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed14:	20000160 	.word	0x20000160
 800ed18:	080141ac 	.word	0x080141ac
 800ed1c:	080141bc 	.word	0x080141bc
 800ed20:	08013fa4 	.word	0x08013fa4
 800ed24:	200016ec 	.word	0x200016ec
 800ed28:	0001b207 	.word	0x0001b207

0800ed2c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b08c      	sub	sp, #48	; 0x30
 800ed30:	af08      	add	r7, sp, #32
 800ed32:	4603      	mov	r3, r0
 800ed34:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ed36:	2392      	movs	r3, #146	; 0x92
 800ed38:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 800ed3a:	79fb      	ldrb	r3, [r7, #7]
 800ed3c:	2b01      	cmp	r3, #1
 800ed3e:	d106      	bne.n	800ed4e <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800ed40:	4b2b      	ldr	r3, [pc, #172]	; (800edf0 <Adv_Request+0xc4>)
 800ed42:	881b      	ldrh	r3, [r3, #0]
 800ed44:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800ed46:	4b2b      	ldr	r3, [pc, #172]	; (800edf4 <Adv_Request+0xc8>)
 800ed48:	881b      	ldrh	r3, [r3, #0]
 800ed4a:	81bb      	strh	r3, [r7, #12]
 800ed4c:	e005      	b.n	800ed5a <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800ed4e:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800ed52:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800ed54:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800ed58:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800ed5a:	4b27      	ldr	r3, [pc, #156]	; (800edf8 <Adv_Request+0xcc>)
 800ed5c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ed60:	4618      	mov	r0, r3
 800ed62:	f7f7 f95b 	bl	800601c <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 800ed66:	79fb      	ldrb	r3, [r7, #7]
 800ed68:	2b02      	cmp	r3, #2
 800ed6a:	d10d      	bne.n	800ed88 <Adv_Request+0x5c>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800ed6c:	4b22      	ldr	r3, [pc, #136]	; (800edf8 <Adv_Request+0xcc>)
 800ed6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed72:	2b01      	cmp	r3, #1
 800ed74:	d004      	beq.n	800ed80 <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800ed76:	4b20      	ldr	r3, [pc, #128]	; (800edf8 <Adv_Request+0xcc>)
 800ed78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed7c:	2b02      	cmp	r3, #2
 800ed7e:	d103      	bne.n	800ed88 <Adv_Request+0x5c>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 800ed80:	f7fd fbed 	bl	800c55e <aci_gap_set_non_discoverable>
 800ed84:	4603      	mov	r3, r0
 800ed86:	72fb      	strb	r3, [r7, #11]
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800ed88:	4a1b      	ldr	r2, [pc, #108]	; (800edf8 <Adv_Request+0xcc>)
 800ed8a:	79fb      	ldrb	r3, [r7, #7]
 800ed8c:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 800ed90:	4b19      	ldr	r3, [pc, #100]	; (800edf8 <Adv_Request+0xcc>)
 800ed92:	7e1b      	ldrb	r3, [r3, #24]
 800ed94:	89ba      	ldrh	r2, [r7, #12]
 800ed96:	89f9      	ldrh	r1, [r7, #14]
 800ed98:	2000      	movs	r0, #0
 800ed9a:	9006      	str	r0, [sp, #24]
 800ed9c:	2000      	movs	r0, #0
 800ed9e:	9005      	str	r0, [sp, #20]
 800eda0:	4816      	ldr	r0, [pc, #88]	; (800edfc <Adv_Request+0xd0>)
 800eda2:	9004      	str	r0, [sp, #16]
 800eda4:	9303      	str	r3, [sp, #12]
 800eda6:	4b16      	ldr	r3, [pc, #88]	; (800ee00 <Adv_Request+0xd4>)
 800eda8:	9302      	str	r3, [sp, #8]
 800edaa:	2308      	movs	r3, #8
 800edac:	9301      	str	r3, [sp, #4]
 800edae:	2300      	movs	r3, #0
 800edb0:	9300      	str	r3, [sp, #0]
 800edb2:	2300      	movs	r3, #0
 800edb4:	2000      	movs	r0, #0
 800edb6:	f7fd fbf6 	bl	800c5a6 <aci_gap_set_discoverable>
 800edba:	4603      	mov	r3, r0
 800edbc:	72fb      	strb	r3, [r7, #11]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 800edbe:	4911      	ldr	r1, [pc, #68]	; (800ee04 <Adv_Request+0xd8>)
 800edc0:	200e      	movs	r0, #14
 800edc2:	f7fd feaf 	bl	800cb24 <aci_gap_update_adv_data>
 800edc6:	4603      	mov	r3, r0
 800edc8:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 800edca:	7afb      	ldrb	r3, [r7, #11]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d10a      	bne.n	800ede6 <Adv_Request+0xba>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
    }
  }
  else
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 800edd0:	79fb      	ldrb	r3, [r7, #7]
 800edd2:	2b01      	cmp	r3, #1
 800edd4:	d107      	bne.n	800ede6 <Adv_Request+0xba>
    {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
      /* Start Timer to STOP ADV - TIMEOUT - and next Restart Low Power Advertising */
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800edd6:	4b08      	ldr	r3, [pc, #32]	; (800edf8 <Adv_Request+0xcc>)
 800edd8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eddc:	490a      	ldr	r1, [pc, #40]	; (800ee08 <Adv_Request+0xdc>)
 800edde:	4618      	mov	r0, r3
 800ede0:	f7f7 f9a0 	bl	8006124 <HW_TS_Start>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 800ede4:	bf00      	nop
 800ede6:	bf00      	nop
}
 800ede8:	3710      	adds	r7, #16
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}
 800edee:	bf00      	nop
 800edf0:	20001770 	.word	0x20001770
 800edf4:	20001772 	.word	0x20001772
 800edf8:	200016ec 	.word	0x200016ec
 800edfc:	20001705 	.word	0x20001705
 800ee00:	080141cc 	.word	0x080141cc
 800ee04:	20000160 	.word	0x20000160
 800ee08:	0001e046 	.word	0x0001e046

0800ee0c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b086      	sub	sp, #24
 800ee10:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800ee12:	f7ff fd5f 	bl	800e8d4 <LL_FLASH_GetUDN>
 800ee16:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee1e:	d023      	beq.n	800ee68 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800ee20:	f7ff fd70 	bl	800e904 <LL_FLASH_GetSTCompanyID>
 800ee24:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800ee26:	f7ff fd61 	bl	800e8ec <LL_FLASH_GetDeviceID>
 800ee2a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800ee2c:	693b      	ldr	r3, [r7, #16]
 800ee2e:	b2da      	uxtb	r2, r3
 800ee30:	4b16      	ldr	r3, [pc, #88]	; (800ee8c <BleGetBdAddress+0x80>)
 800ee32:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800ee34:	693b      	ldr	r3, [r7, #16]
 800ee36:	0a1b      	lsrs	r3, r3, #8
 800ee38:	b2da      	uxtb	r2, r3
 800ee3a:	4b14      	ldr	r3, [pc, #80]	; (800ee8c <BleGetBdAddress+0x80>)
 800ee3c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	b2da      	uxtb	r2, r3
 800ee42:	4b12      	ldr	r3, [pc, #72]	; (800ee8c <BleGetBdAddress+0x80>)
 800ee44:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	b2da      	uxtb	r2, r3
 800ee4a:	4b10      	ldr	r3, [pc, #64]	; (800ee8c <BleGetBdAddress+0x80>)
 800ee4c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	0a1b      	lsrs	r3, r3, #8
 800ee52:	b2da      	uxtb	r2, r3
 800ee54:	4b0d      	ldr	r3, [pc, #52]	; (800ee8c <BleGetBdAddress+0x80>)
 800ee56:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	0c1b      	lsrs	r3, r3, #16
 800ee5c:	b2da      	uxtb	r2, r3
 800ee5e:	4b0b      	ldr	r3, [pc, #44]	; (800ee8c <BleGetBdAddress+0x80>)
 800ee60:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800ee62:	4b0a      	ldr	r3, [pc, #40]	; (800ee8c <BleGetBdAddress+0x80>)
 800ee64:	617b      	str	r3, [r7, #20]
 800ee66:	e00b      	b.n	800ee80 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800ee68:	2000      	movs	r0, #0
 800ee6a:	f7ff fc4d 	bl	800e708 <OTP_Read>
 800ee6e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d002      	beq.n	800ee7c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	617b      	str	r3, [r7, #20]
 800ee7a:	e001      	b.n	800ee80 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800ee7c:	4b04      	ldr	r3, [pc, #16]	; (800ee90 <BleGetBdAddress+0x84>)
 800ee7e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800ee80:	697b      	ldr	r3, [r7, #20]
}
 800ee82:	4618      	mov	r0, r3
 800ee84:	3718      	adds	r7, #24
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bd80      	pop	{r7, pc}
 800ee8a:	bf00      	nop
 800ee8c:	200016e4 	.word	0x200016e4
 800ee90:	080141a4 	.word	0x080141a4

0800ee94 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b082      	sub	sp, #8
 800ee98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800ee9a:	4b0a      	ldr	r3, [pc, #40]	; (800eec4 <Adv_Cancel+0x30>)
 800ee9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eea0:	2b05      	cmp	r3, #5
 800eea2:	d00a      	beq.n	800eeba <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800eea4:	2392      	movs	r3, #146	; 0x92
 800eea6:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800eea8:	f7fd fb59 	bl	800c55e <aci_gap_set_non_discoverable>
 800eeac:	4603      	mov	r3, r0
 800eeae:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800eeb0:	4b04      	ldr	r3, [pc, #16]	; (800eec4 <Adv_Cancel+0x30>)
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800eeb8:	bf00      	nop
 800eeba:	bf00      	nop
}
 800eebc:	3708      	adds	r7, #8
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}
 800eec2:	bf00      	nop
 800eec4:	200016ec 	.word	0x200016ec

0800eec8 <Adv_Cancel_Req>:

static void Adv_Cancel_Req(void)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_Req_1 */

  /* USER CODE END Adv_Cancel_Req_1 */

  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800eecc:	2100      	movs	r1, #0
 800eece:	2001      	movs	r0, #1
 800eed0:	f000 fc42 	bl	800f758 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN Adv_Cancel_Req_2 */

  /* USER CODE END Adv_Cancel_Req_2 */

  return;
 800eed4:	bf00      	nop
}
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 800eed8:	b480      	push	{r7}
 800eeda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */

  /* USER CODE END Switch_OFF_GPIO */
}
 800eedc:	bf00      	nop
 800eede:	46bd      	mov	sp, r7
 800eee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee4:	4770      	bx	lr

0800eee6 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800eee6:	b580      	push	{r7, lr}
 800eee8:	b082      	sub	sp, #8
 800eeea:	af00      	add	r7, sp, #0
 800eeec:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800eeee:	2100      	movs	r1, #0
 800eef0:	2002      	movs	r0, #2
 800eef2:	f000 fc31 	bl	800f758 <UTIL_SEQ_SetTask>

  return;
 800eef6:	bf00      	nop
}
 800eef8:	3708      	adds	r7, #8
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}

0800eefe <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800eefe:	b580      	push	{r7, lr}
 800ef00:	b082      	sub	sp, #8
 800ef02:	af00      	add	r7, sp, #0
 800ef04:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800ef06:	2001      	movs	r0, #1
 800ef08:	f000 fc92 	bl	800f830 <UTIL_SEQ_SetEvt>

  return;
 800ef0c:	bf00      	nop
}
 800ef0e:	3708      	adds	r7, #8
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}

0800ef14 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b082      	sub	sp, #8
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800ef1c:	2001      	movs	r0, #1
 800ef1e:	f000 fca7 	bl	800f870 <UTIL_SEQ_WaitEvt>

  return;
 800ef22:	bf00      	nop
}
 800ef24:	3708      	adds	r7, #8
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}

0800ef2a <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800ef2a:	b580      	push	{r7, lr}
 800ef2c:	b084      	sub	sp, #16
 800ef2e:	af00      	add	r7, sp, #0
 800ef30:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	685b      	ldr	r3, [r3, #4]
 800ef3a:	3308      	adds	r3, #8
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7fe fd81 	bl	800da44 <SVCCTL_UserEvtRx>
 800ef42:	4603      	mov	r3, r0
 800ef44:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800ef46:	7afb      	ldrb	r3, [r7, #11]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d003      	beq.n	800ef54 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	2201      	movs	r2, #1
 800ef50:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800ef52:	e003      	b.n	800ef5c <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	2200      	movs	r2, #0
 800ef58:	701a      	strb	r2, [r3, #0]
  return;
 800ef5a:	bf00      	nop
}
 800ef5c:	3710      	adds	r7, #16
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}

0800ef62 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800ef62:	b580      	push	{r7, lr}
 800ef64:	b084      	sub	sp, #16
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	4603      	mov	r3, r0
 800ef6a:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800ef6c:	79fb      	ldrb	r3, [r7, #7]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d002      	beq.n	800ef78 <BLE_StatusNot+0x16>
 800ef72:	2b01      	cmp	r3, #1
 800ef74:	d006      	beq.n	800ef84 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800ef76:	e00b      	b.n	800ef90 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800ef78:	2303      	movs	r3, #3
 800ef7a:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800ef7c:	68f8      	ldr	r0, [r7, #12]
 800ef7e:	f000 fc17 	bl	800f7b0 <UTIL_SEQ_PauseTask>
      break;
 800ef82:	e005      	b.n	800ef90 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800ef84:	2303      	movs	r3, #3
 800ef86:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800ef88:	68f8      	ldr	r0, [r7, #12]
 800ef8a:	f000 fc31 	bl	800f7f0 <UTIL_SEQ_ResumeTask>
      break;
 800ef8e:	bf00      	nop
  }

  return;
 800ef90:	bf00      	nop
}
 800ef92:	3710      	adds	r7, #16
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}

0800ef98 <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b083      	sub	sp, #12
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	781b      	ldrb	r3, [r3, #0]
 800efa4:	2b03      	cmp	r3, #3
 800efa6:	d006      	beq.n	800efb6 <P2PS_STM_App_Notification+0x1e>
 800efa8:	2b03      	cmp	r3, #3
 800efaa:	dc06      	bgt.n	800efba <P2PS_STM_App_Notification+0x22>
 800efac:	2b00      	cmp	r3, #0
 800efae:	d006      	beq.n	800efbe <P2PS_STM_App_Notification+0x26>
 800efb0:	2b01      	cmp	r3, #1
 800efb2:	d006      	beq.n	800efc2 <P2PS_STM_App_Notification+0x2a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800efb4:	e001      	b.n	800efba <P2PS_STM_App_Notification+0x22>
      break;
 800efb6:	bf00      	nop
 800efb8:	e004      	b.n	800efc4 <P2PS_STM_App_Notification+0x2c>
      break;
 800efba:	bf00      	nop
 800efbc:	e002      	b.n	800efc4 <P2PS_STM_App_Notification+0x2c>
      break;
 800efbe:	bf00      	nop
 800efc0:	e000      	b.n	800efc4 <P2PS_STM_App_Notification+0x2c>
      break;
 800efc2:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800efc4:	bf00      	nop
}
 800efc6:	370c      	adds	r7, #12
 800efc8:	46bd      	mov	sp, r7
 800efca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efce:	4770      	bx	lr

0800efd0 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800efd0:	b480      	push	{r7}
 800efd2:	b083      	sub	sp, #12
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d002      	beq.n	800efe6 <P2PS_APP_Notification+0x16>
 800efe0:	2b01      	cmp	r3, #1
 800efe2:	d002      	beq.n	800efea <P2PS_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800efe4:	e002      	b.n	800efec <P2PS_APP_Notification+0x1c>
    break;
 800efe6:	bf00      	nop
 800efe8:	e000      	b.n	800efec <P2PS_APP_Notification+0x1c>
    break;
 800efea:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800efec:	bf00      	nop
}
 800efee:	370c      	adds	r7, #12
 800eff0:	46bd      	mov	sp, r7
 800eff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff6:	4770      	bx	lr

0800eff8 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800eff8:	b480      	push	{r7}
 800effa:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 800effc:	bf00      	nop
}
 800effe:	46bd      	mov	sp, r7
 800f000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f004:	4770      	bx	lr
	...

0800f008 <LL_PWR_EnableBootC2>:
{
 800f008:	b480      	push	{r7}
 800f00a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800f00c:	4b05      	ldr	r3, [pc, #20]	; (800f024 <LL_PWR_EnableBootC2+0x1c>)
 800f00e:	68db      	ldr	r3, [r3, #12]
 800f010:	4a04      	ldr	r2, [pc, #16]	; (800f024 <LL_PWR_EnableBootC2+0x1c>)
 800f012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f016:	60d3      	str	r3, [r2, #12]
}
 800f018:	bf00      	nop
 800f01a:	46bd      	mov	sp, r7
 800f01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f020:	4770      	bx	lr
 800f022:	bf00      	nop
 800f024:	58000400 	.word	0x58000400

0800f028 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800f028:	b480      	push	{r7}
 800f02a:	b083      	sub	sp, #12
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800f030:	4b06      	ldr	r3, [pc, #24]	; (800f04c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800f032:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800f036:	4905      	ldr	r1, [pc, #20]	; (800f04c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	4313      	orrs	r3, r2
 800f03c:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800f040:	bf00      	nop
 800f042:	370c      	adds	r7, #12
 800f044:	46bd      	mov	sp, r7
 800f046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04a:	4770      	bx	lr
 800f04c:	58000800 	.word	0x58000800

0800f050 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800f050:	b480      	push	{r7}
 800f052:	b083      	sub	sp, #12
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800f058:	4b05      	ldr	r3, [pc, #20]	; (800f070 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800f05a:	6a1a      	ldr	r2, [r3, #32]
 800f05c:	4904      	ldr	r1, [pc, #16]	; (800f070 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	4313      	orrs	r3, r2
 800f062:	620b      	str	r3, [r1, #32]
}
 800f064:	bf00      	nop
 800f066:	370c      	adds	r7, #12
 800f068:	46bd      	mov	sp, r7
 800f06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06e:	4770      	bx	lr
 800f070:	58000800 	.word	0x58000800

0800f074 <LL_AHB3_GRP1_EnableClock>:
{
 800f074:	b480      	push	{r7}
 800f076:	b085      	sub	sp, #20
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800f07c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f080:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f082:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	4313      	orrs	r3, r2
 800f08a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800f08c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f090:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	4013      	ands	r3, r2
 800f096:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f098:	68fb      	ldr	r3, [r7, #12]
}
 800f09a:	bf00      	nop
 800f09c:	3714      	adds	r7, #20
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a4:	4770      	bx	lr

0800f0a6 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800f0a6:	b480      	push	{r7}
 800f0a8:	b085      	sub	sp, #20
 800f0aa:	af00      	add	r7, sp, #0
 800f0ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800f0ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f0b2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800f0b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	4313      	orrs	r3, r2
 800f0be:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800f0c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f0c6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	4013      	ands	r3, r2
 800f0ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
}
 800f0d2:	bf00      	nop
 800f0d4:	3714      	adds	r7, #20
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0dc:	4770      	bx	lr

0800f0de <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800f0de:	b480      	push	{r7}
 800f0e0:	b083      	sub	sp, #12
 800f0e2:	af00      	add	r7, sp, #0
 800f0e4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	601a      	str	r2, [r3, #0]
}
 800f0f2:	bf00      	nop
 800f0f4:	370c      	adds	r7, #12
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fc:	4770      	bx	lr

0800f0fe <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800f0fe:	b480      	push	{r7}
 800f100:	b083      	sub	sp, #12
 800f102:	af00      	add	r7, sp, #0
 800f104:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	f043 0201 	orr.w	r2, r3, #1
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	601a      	str	r2, [r3, #0]
}
 800f112:	bf00      	nop
 800f114:	370c      	adds	r7, #12
 800f116:	46bd      	mov	sp, r7
 800f118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11c:	4770      	bx	lr

0800f11e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f11e:	b480      	push	{r7}
 800f120:	b083      	sub	sp, #12
 800f122:	af00      	add	r7, sp, #0
 800f124:	6078      	str	r0, [r7, #4]
 800f126:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	685a      	ldr	r2, [r3, #4]
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	041b      	lsls	r3, r3, #16
 800f130:	43db      	mvns	r3, r3
 800f132:	401a      	ands	r2, r3
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	605a      	str	r2, [r3, #4]
}
 800f138:	bf00      	nop
 800f13a:	370c      	adds	r7, #12
 800f13c:	46bd      	mov	sp, r7
 800f13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f142:	4770      	bx	lr

0800f144 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f144:	b480      	push	{r7}
 800f146:	b083      	sub	sp, #12
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	685a      	ldr	r2, [r3, #4]
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	041b      	lsls	r3, r3, #16
 800f156:	431a      	orrs	r2, r3
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	605a      	str	r2, [r3, #4]
}
 800f15c:	bf00      	nop
 800f15e:	370c      	adds	r7, #12
 800f160:	46bd      	mov	sp, r7
 800f162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f166:	4770      	bx	lr

0800f168 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f168:	b480      	push	{r7}
 800f16a:	b083      	sub	sp, #12
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
 800f170:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	685a      	ldr	r2, [r3, #4]
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	43db      	mvns	r3, r3
 800f17a:	401a      	ands	r2, r3
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	605a      	str	r2, [r3, #4]
}
 800f180:	bf00      	nop
 800f182:	370c      	adds	r7, #12
 800f184:	46bd      	mov	sp, r7
 800f186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18a:	4770      	bx	lr

0800f18c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f18c:	b480      	push	{r7}
 800f18e:	b083      	sub	sp, #12
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
 800f194:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	683a      	ldr	r2, [r7, #0]
 800f19a:	609a      	str	r2, [r3, #8]
}
 800f19c:	bf00      	nop
 800f19e:	370c      	adds	r7, #12
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a6:	4770      	bx	lr

0800f1a8 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b083      	sub	sp, #12
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
 800f1b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	041a      	lsls	r2, r3, #16
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	609a      	str	r2, [r3, #8]
}
 800f1ba:	bf00      	nop
 800f1bc:	370c      	adds	r7, #12
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c4:	4770      	bx	lr

0800f1c6 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800f1c6:	b480      	push	{r7}
 800f1c8:	b083      	sub	sp, #12
 800f1ca:	af00      	add	r7, sp, #0
 800f1cc:	6078      	str	r0, [r7, #4]
 800f1ce:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	68da      	ldr	r2, [r3, #12]
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	4013      	ands	r3, r2
 800f1d8:	683a      	ldr	r2, [r7, #0]
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	d101      	bne.n	800f1e2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800f1de:	2301      	movs	r3, #1
 800f1e0:	e000      	b.n	800f1e4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800f1e2:	2300      	movs	r3, #0
}
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	370c      	adds	r7, #12
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ee:	4770      	bx	lr

0800f1f0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800f1f0:	b480      	push	{r7}
 800f1f2:	b083      	sub	sp, #12
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
 800f1f8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	69da      	ldr	r2, [r3, #28]
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	4013      	ands	r3, r2
 800f202:	683a      	ldr	r2, [r7, #0]
 800f204:	429a      	cmp	r2, r3
 800f206:	d101      	bne.n	800f20c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800f208:	2301      	movs	r3, #1
 800f20a:	e000      	b.n	800f20e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800f20c:	2300      	movs	r3, #0
}
 800f20e:	4618      	mov	r0, r3
 800f210:	370c      	adds	r7, #12
 800f212:	46bd      	mov	sp, r7
 800f214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f218:	4770      	bx	lr
	...

0800f21c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800f220:	2102      	movs	r1, #2
 800f222:	4818      	ldr	r0, [pc, #96]	; (800f284 <HW_IPCC_Rx_Handler+0x68>)
 800f224:	f7ff ffe4 	bl	800f1f0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f228:	4603      	mov	r3, r0
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d008      	beq.n	800f240 <HW_IPCC_Rx_Handler+0x24>
 800f22e:	4b15      	ldr	r3, [pc, #84]	; (800f284 <HW_IPCC_Rx_Handler+0x68>)
 800f230:	685b      	ldr	r3, [r3, #4]
 800f232:	f003 0302 	and.w	r3, r3, #2
 800f236:	2b00      	cmp	r3, #0
 800f238:	d102      	bne.n	800f240 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800f23a:	f000 f8d5 	bl	800f3e8 <HW_IPCC_SYS_EvtHandler>
 800f23e:	e01e      	b.n	800f27e <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800f240:	2101      	movs	r1, #1
 800f242:	4810      	ldr	r0, [pc, #64]	; (800f284 <HW_IPCC_Rx_Handler+0x68>)
 800f244:	f7ff ffd4 	bl	800f1f0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f248:	4603      	mov	r3, r0
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d008      	beq.n	800f260 <HW_IPCC_Rx_Handler+0x44>
 800f24e:	4b0d      	ldr	r3, [pc, #52]	; (800f284 <HW_IPCC_Rx_Handler+0x68>)
 800f250:	685b      	ldr	r3, [r3, #4]
 800f252:	f003 0301 	and.w	r3, r3, #1
 800f256:	2b00      	cmp	r3, #0
 800f258:	d102      	bne.n	800f260 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800f25a:	f000 f889 	bl	800f370 <HW_IPCC_BLE_EvtHandler>
 800f25e:	e00e      	b.n	800f27e <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800f260:	2108      	movs	r1, #8
 800f262:	4808      	ldr	r0, [pc, #32]	; (800f284 <HW_IPCC_Rx_Handler+0x68>)
 800f264:	f7ff ffc4 	bl	800f1f0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f268:	4603      	mov	r3, r0
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d008      	beq.n	800f280 <HW_IPCC_Rx_Handler+0x64>
 800f26e:	4b05      	ldr	r3, [pc, #20]	; (800f284 <HW_IPCC_Rx_Handler+0x68>)
 800f270:	685b      	ldr	r3, [r3, #4]
 800f272:	f003 0308 	and.w	r3, r3, #8
 800f276:	2b00      	cmp	r3, #0
 800f278:	d102      	bne.n	800f280 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800f27a:	f000 f901 	bl	800f480 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800f27e:	bf00      	nop
 800f280:	bf00      	nop
}
 800f282:	bd80      	pop	{r7, pc}
 800f284:	58000c00 	.word	0x58000c00

0800f288 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800f28c:	2102      	movs	r1, #2
 800f28e:	4818      	ldr	r0, [pc, #96]	; (800f2f0 <HW_IPCC_Tx_Handler+0x68>)
 800f290:	f7ff ff99 	bl	800f1c6 <LL_C1_IPCC_IsActiveFlag_CHx>
 800f294:	4603      	mov	r3, r0
 800f296:	2b00      	cmp	r3, #0
 800f298:	d108      	bne.n	800f2ac <HW_IPCC_Tx_Handler+0x24>
 800f29a:	4b15      	ldr	r3, [pc, #84]	; (800f2f0 <HW_IPCC_Tx_Handler+0x68>)
 800f29c:	685b      	ldr	r3, [r3, #4]
 800f29e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d102      	bne.n	800f2ac <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800f2a6:	f000 f893 	bl	800f3d0 <HW_IPCC_SYS_CmdEvtHandler>
 800f2aa:	e01e      	b.n	800f2ea <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800f2ac:	2108      	movs	r1, #8
 800f2ae:	4810      	ldr	r0, [pc, #64]	; (800f2f0 <HW_IPCC_Tx_Handler+0x68>)
 800f2b0:	f7ff ff89 	bl	800f1c6 <LL_C1_IPCC_IsActiveFlag_CHx>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d108      	bne.n	800f2cc <HW_IPCC_Tx_Handler+0x44>
 800f2ba:	4b0d      	ldr	r3, [pc, #52]	; (800f2f0 <HW_IPCC_Tx_Handler+0x68>)
 800f2bc:	685b      	ldr	r3, [r3, #4]
 800f2be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d102      	bne.n	800f2cc <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800f2c6:	f000 f8bd 	bl	800f444 <HW_IPCC_MM_FreeBufHandler>
 800f2ca:	e00e      	b.n	800f2ea <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800f2cc:	2120      	movs	r1, #32
 800f2ce:	4808      	ldr	r0, [pc, #32]	; (800f2f0 <HW_IPCC_Tx_Handler+0x68>)
 800f2d0:	f7ff ff79 	bl	800f1c6 <LL_C1_IPCC_IsActiveFlag_CHx>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d108      	bne.n	800f2ec <HW_IPCC_Tx_Handler+0x64>
 800f2da:	4b05      	ldr	r3, [pc, #20]	; (800f2f0 <HW_IPCC_Tx_Handler+0x68>)
 800f2dc:	685b      	ldr	r3, [r3, #4]
 800f2de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d102      	bne.n	800f2ec <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800f2e6:	f000 f84f 	bl	800f388 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800f2ea:	bf00      	nop
 800f2ec:	bf00      	nop
}
 800f2ee:	bd80      	pop	{r7, pc}
 800f2f0:	58000c00 	.word	0x58000c00

0800f2f4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800f2f8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800f2fc:	f7ff fed3 	bl	800f0a6 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800f300:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f304:	f7ff fea4 	bl	800f050 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800f308:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f30c:	f7ff fe8c 	bl	800f028 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800f310:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800f312:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800f314:	f7ff fe78 	bl	800f008 <LL_PWR_EnableBootC2>

  return;
 800f318:	bf00      	nop
}
 800f31a:	bd80      	pop	{r7, pc}

0800f31c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800f320:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800f324:	f7ff fea6 	bl	800f074 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800f328:	4806      	ldr	r0, [pc, #24]	; (800f344 <HW_IPCC_Init+0x28>)
 800f32a:	f7ff fee8 	bl	800f0fe <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800f32e:	4805      	ldr	r0, [pc, #20]	; (800f344 <HW_IPCC_Init+0x28>)
 800f330:	f7ff fed5 	bl	800f0de <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800f334:	202c      	movs	r0, #44	; 0x2c
 800f336:	f7f8 fa4c 	bl	80077d2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800f33a:	202d      	movs	r0, #45	; 0x2d
 800f33c:	f7f8 fa49 	bl	80077d2 <HAL_NVIC_EnableIRQ>

  return;
 800f340:	bf00      	nop
}
 800f342:	bd80      	pop	{r7, pc}
 800f344:	58000c00 	.word	0x58000c00

0800f348 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800f34c:	2101      	movs	r1, #1
 800f34e:	4802      	ldr	r0, [pc, #8]	; (800f358 <HW_IPCC_BLE_Init+0x10>)
 800f350:	f7ff ff0a 	bl	800f168 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800f354:	bf00      	nop
}
 800f356:	bd80      	pop	{r7, pc}
 800f358:	58000c00 	.word	0x58000c00

0800f35c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800f360:	2101      	movs	r1, #1
 800f362:	4802      	ldr	r0, [pc, #8]	; (800f36c <HW_IPCC_BLE_SendCmd+0x10>)
 800f364:	f7ff ff20 	bl	800f1a8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800f368:	bf00      	nop
}
 800f36a:	bd80      	pop	{r7, pc}
 800f36c:	58000c00 	.word	0x58000c00

0800f370 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800f370:	b580      	push	{r7, lr}
 800f372:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800f374:	f7ff f810 	bl	800e398 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800f378:	2101      	movs	r1, #1
 800f37a:	4802      	ldr	r0, [pc, #8]	; (800f384 <HW_IPCC_BLE_EvtHandler+0x14>)
 800f37c:	f7ff ff06 	bl	800f18c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800f380:	bf00      	nop
}
 800f382:	bd80      	pop	{r7, pc}
 800f384:	58000c00 	.word	0x58000c00

0800f388 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800f38c:	2120      	movs	r1, #32
 800f38e:	4803      	ldr	r0, [pc, #12]	; (800f39c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800f390:	f7ff fed8 	bl	800f144 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800f394:	f7ff f830 	bl	800e3f8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800f398:	bf00      	nop
}
 800f39a:	bd80      	pop	{r7, pc}
 800f39c:	58000c00 	.word	0x58000c00

0800f3a0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800f3a4:	2102      	movs	r1, #2
 800f3a6:	4802      	ldr	r0, [pc, #8]	; (800f3b0 <HW_IPCC_SYS_Init+0x10>)
 800f3a8:	f7ff fede 	bl	800f168 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800f3ac:	bf00      	nop
}
 800f3ae:	bd80      	pop	{r7, pc}
 800f3b0:	58000c00 	.word	0x58000c00

0800f3b4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800f3b8:	2102      	movs	r1, #2
 800f3ba:	4804      	ldr	r0, [pc, #16]	; (800f3cc <HW_IPCC_SYS_SendCmd+0x18>)
 800f3bc:	f7ff fef4 	bl	800f1a8 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800f3c0:	2102      	movs	r1, #2
 800f3c2:	4802      	ldr	r0, [pc, #8]	; (800f3cc <HW_IPCC_SYS_SendCmd+0x18>)
 800f3c4:	f7ff feab 	bl	800f11e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800f3c8:	bf00      	nop
}
 800f3ca:	bd80      	pop	{r7, pc}
 800f3cc:	58000c00 	.word	0x58000c00

0800f3d0 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800f3d4:	2102      	movs	r1, #2
 800f3d6:	4803      	ldr	r0, [pc, #12]	; (800f3e4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800f3d8:	f7ff feb4 	bl	800f144 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800f3dc:	f7ff f85c 	bl	800e498 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800f3e0:	bf00      	nop
}
 800f3e2:	bd80      	pop	{r7, pc}
 800f3e4:	58000c00 	.word	0x58000c00

0800f3e8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800f3ec:	f7ff f86a 	bl	800e4c4 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800f3f0:	2102      	movs	r1, #2
 800f3f2:	4802      	ldr	r0, [pc, #8]	; (800f3fc <HW_IPCC_SYS_EvtHandler+0x14>)
 800f3f4:	f7ff feca 	bl	800f18c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800f3f8:	bf00      	nop
}
 800f3fa:	bd80      	pop	{r7, pc}
 800f3fc:	58000c00 	.word	0x58000c00

0800f400 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b082      	sub	sp, #8
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800f408:	2108      	movs	r1, #8
 800f40a:	480c      	ldr	r0, [pc, #48]	; (800f43c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800f40c:	f7ff fedb 	bl	800f1c6 <LL_C1_IPCC_IsActiveFlag_CHx>
 800f410:	4603      	mov	r3, r0
 800f412:	2b00      	cmp	r3, #0
 800f414:	d007      	beq.n	800f426 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800f416:	4a0a      	ldr	r2, [pc, #40]	; (800f440 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800f41c:	2108      	movs	r1, #8
 800f41e:	4807      	ldr	r0, [pc, #28]	; (800f43c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800f420:	f7ff fe7d 	bl	800f11e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800f424:	e006      	b.n	800f434 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800f42a:	2108      	movs	r1, #8
 800f42c:	4803      	ldr	r0, [pc, #12]	; (800f43c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800f42e:	f7ff febb 	bl	800f1a8 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800f432:	bf00      	nop
}
 800f434:	3708      	adds	r7, #8
 800f436:	46bd      	mov	sp, r7
 800f438:	bd80      	pop	{r7, pc}
 800f43a:	bf00      	nop
 800f43c:	58000c00 	.word	0x58000c00
 800f440:	20001778 	.word	0x20001778

0800f444 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800f444:	b580      	push	{r7, lr}
 800f446:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800f448:	2108      	movs	r1, #8
 800f44a:	4806      	ldr	r0, [pc, #24]	; (800f464 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800f44c:	f7ff fe7a 	bl	800f144 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800f450:	4b05      	ldr	r3, [pc, #20]	; (800f468 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800f456:	2108      	movs	r1, #8
 800f458:	4802      	ldr	r0, [pc, #8]	; (800f464 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800f45a:	f7ff fea5 	bl	800f1a8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800f45e:	bf00      	nop
}
 800f460:	bd80      	pop	{r7, pc}
 800f462:	bf00      	nop
 800f464:	58000c00 	.word	0x58000c00
 800f468:	20001778 	.word	0x20001778

0800f46c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800f470:	2108      	movs	r1, #8
 800f472:	4802      	ldr	r0, [pc, #8]	; (800f47c <HW_IPCC_TRACES_Init+0x10>)
 800f474:	f7ff fe78 	bl	800f168 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800f478:	bf00      	nop
}
 800f47a:	bd80      	pop	{r7, pc}
 800f47c:	58000c00 	.word	0x58000c00

0800f480 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800f480:	b580      	push	{r7, lr}
 800f482:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800f484:	f7ff f8c6 	bl	800e614 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800f488:	2108      	movs	r1, #8
 800f48a:	4802      	ldr	r0, [pc, #8]	; (800f494 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800f48c:	f7ff fe7e 	bl	800f18c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800f490:	bf00      	nop
}
 800f492:	bd80      	pop	{r7, pc}
 800f494:	58000c00 	.word	0x58000c00

0800f498 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800f498:	b480      	push	{r7}
 800f49a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800f49c:	4b05      	ldr	r3, [pc, #20]	; (800f4b4 <UTIL_LPM_Init+0x1c>)
 800f49e:	2200      	movs	r2, #0
 800f4a0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800f4a2:	4b05      	ldr	r3, [pc, #20]	; (800f4b8 <UTIL_LPM_Init+0x20>)
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800f4a8:	bf00      	nop
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b0:	4770      	bx	lr
 800f4b2:	bf00      	nop
 800f4b4:	2000177c 	.word	0x2000177c
 800f4b8:	20001780 	.word	0x20001780

0800f4bc <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800f4bc:	b480      	push	{r7}
 800f4be:	b087      	sub	sp, #28
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
 800f4c4:	460b      	mov	r3, r1
 800f4c6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f4c8:	f3ef 8310 	mrs	r3, PRIMASK
 800f4cc:	613b      	str	r3, [r7, #16]
  return(result);
 800f4ce:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800f4d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f4d2:	b672      	cpsid	i
}
 800f4d4:	bf00      	nop
  
  switch(state)
 800f4d6:	78fb      	ldrb	r3, [r7, #3]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d008      	beq.n	800f4ee <UTIL_LPM_SetOffMode+0x32>
 800f4dc:	2b01      	cmp	r3, #1
 800f4de:	d10e      	bne.n	800f4fe <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800f4e0:	4b0d      	ldr	r3, [pc, #52]	; (800f518 <UTIL_LPM_SetOffMode+0x5c>)
 800f4e2:	681a      	ldr	r2, [r3, #0]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	4313      	orrs	r3, r2
 800f4e8:	4a0b      	ldr	r2, [pc, #44]	; (800f518 <UTIL_LPM_SetOffMode+0x5c>)
 800f4ea:	6013      	str	r3, [r2, #0]
      break;
 800f4ec:	e008      	b.n	800f500 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	43da      	mvns	r2, r3
 800f4f2:	4b09      	ldr	r3, [pc, #36]	; (800f518 <UTIL_LPM_SetOffMode+0x5c>)
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	4013      	ands	r3, r2
 800f4f8:	4a07      	ldr	r2, [pc, #28]	; (800f518 <UTIL_LPM_SetOffMode+0x5c>)
 800f4fa:	6013      	str	r3, [r2, #0]
      break;
 800f4fc:	e000      	b.n	800f500 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800f4fe:	bf00      	nop
 800f500:	697b      	ldr	r3, [r7, #20]
 800f502:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	f383 8810 	msr	PRIMASK, r3
}
 800f50a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800f50c:	bf00      	nop
 800f50e:	371c      	adds	r7, #28
 800f510:	46bd      	mov	sp, r7
 800f512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f516:	4770      	bx	lr
 800f518:	20001780 	.word	0x20001780

0800f51c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b090      	sub	sp, #64	; 0x40
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800f524:	4b73      	ldr	r3, [pc, #460]	; (800f6f4 <UTIL_SEQ_Run+0x1d8>)
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800f52a:	4b72      	ldr	r3, [pc, #456]	; (800f6f4 <UTIL_SEQ_Run+0x1d8>)
 800f52c:	681a      	ldr	r2, [r3, #0]
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	4013      	ands	r3, r2
 800f532:	4a70      	ldr	r2, [pc, #448]	; (800f6f4 <UTIL_SEQ_Run+0x1d8>)
 800f534:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800f536:	4b70      	ldr	r3, [pc, #448]	; (800f6f8 <UTIL_SEQ_Run+0x1dc>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800f53c:	4b6f      	ldr	r3, [pc, #444]	; (800f6fc <UTIL_SEQ_Run+0x1e0>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800f542:	4b6f      	ldr	r3, [pc, #444]	; (800f700 <UTIL_SEQ_Run+0x1e4>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800f548:	4b6e      	ldr	r3, [pc, #440]	; (800f704 <UTIL_SEQ_Run+0x1e8>)
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800f54e:	e08d      	b.n	800f66c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800f550:	2300      	movs	r3, #0
 800f552:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800f554:	e002      	b.n	800f55c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800f556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f558:	3301      	adds	r3, #1
 800f55a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800f55c:	4a6a      	ldr	r2, [pc, #424]	; (800f708 <UTIL_SEQ_Run+0x1ec>)
 800f55e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f560:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800f564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f566:	401a      	ands	r2, r3
 800f568:	4b62      	ldr	r3, [pc, #392]	; (800f6f4 <UTIL_SEQ_Run+0x1d8>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	4013      	ands	r3, r2
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d0f1      	beq.n	800f556 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800f572:	4a65      	ldr	r2, [pc, #404]	; (800f708 <UTIL_SEQ_Run+0x1ec>)
 800f574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f576:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800f57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f57c:	401a      	ands	r2, r3
 800f57e:	4b5d      	ldr	r3, [pc, #372]	; (800f6f4 <UTIL_SEQ_Run+0x1d8>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	4013      	ands	r3, r2
 800f584:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800f586:	4a60      	ldr	r2, [pc, #384]	; (800f708 <UTIL_SEQ_Run+0x1ec>)
 800f588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f58a:	00db      	lsls	r3, r3, #3
 800f58c:	4413      	add	r3, r2
 800f58e:	685a      	ldr	r2, [r3, #4]
 800f590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f592:	4013      	ands	r3, r2
 800f594:	2b00      	cmp	r3, #0
 800f596:	d106      	bne.n	800f5a6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800f598:	4a5b      	ldr	r2, [pc, #364]	; (800f708 <UTIL_SEQ_Run+0x1ec>)
 800f59a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f59c:	00db      	lsls	r3, r3, #3
 800f59e:	4413      	add	r3, r2
 800f5a0:	f04f 32ff 	mov.w	r2, #4294967295
 800f5a4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800f5a6:	4a58      	ldr	r2, [pc, #352]	; (800f708 <UTIL_SEQ_Run+0x1ec>)
 800f5a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5aa:	00db      	lsls	r3, r3, #3
 800f5ac:	4413      	add	r3, r2
 800f5ae:	685a      	ldr	r2, [r3, #4]
 800f5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b2:	4013      	ands	r3, r2
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f000 f9b3 	bl	800f920 <SEQ_BitPosition>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	461a      	mov	r2, r3
 800f5be:	4b53      	ldr	r3, [pc, #332]	; (800f70c <UTIL_SEQ_Run+0x1f0>)
 800f5c0:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800f5c2:	4a51      	ldr	r2, [pc, #324]	; (800f708 <UTIL_SEQ_Run+0x1ec>)
 800f5c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5c6:	00db      	lsls	r3, r3, #3
 800f5c8:	4413      	add	r3, r2
 800f5ca:	685a      	ldr	r2, [r3, #4]
 800f5cc:	4b4f      	ldr	r3, [pc, #316]	; (800f70c <UTIL_SEQ_Run+0x1f0>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	2101      	movs	r1, #1
 800f5d2:	fa01 f303 	lsl.w	r3, r1, r3
 800f5d6:	43db      	mvns	r3, r3
 800f5d8:	401a      	ands	r2, r3
 800f5da:	494b      	ldr	r1, [pc, #300]	; (800f708 <UTIL_SEQ_Run+0x1ec>)
 800f5dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5de:	00db      	lsls	r3, r3, #3
 800f5e0:	440b      	add	r3, r1
 800f5e2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f5e4:	f3ef 8310 	mrs	r3, PRIMASK
 800f5e8:	61bb      	str	r3, [r7, #24]
  return(result);
 800f5ea:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f5ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800f5ee:	b672      	cpsid	i
}
 800f5f0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800f5f2:	4b46      	ldr	r3, [pc, #280]	; (800f70c <UTIL_SEQ_Run+0x1f0>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	2201      	movs	r2, #1
 800f5f8:	fa02 f303 	lsl.w	r3, r2, r3
 800f5fc:	43da      	mvns	r2, r3
 800f5fe:	4b3e      	ldr	r3, [pc, #248]	; (800f6f8 <UTIL_SEQ_Run+0x1dc>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	4013      	ands	r3, r2
 800f604:	4a3c      	ldr	r2, [pc, #240]	; (800f6f8 <UTIL_SEQ_Run+0x1dc>)
 800f606:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800f608:	2302      	movs	r3, #2
 800f60a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f60c:	e013      	b.n	800f636 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800f60e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f610:	3b01      	subs	r3, #1
 800f612:	4a3d      	ldr	r2, [pc, #244]	; (800f708 <UTIL_SEQ_Run+0x1ec>)
 800f614:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800f618:	4b3c      	ldr	r3, [pc, #240]	; (800f70c <UTIL_SEQ_Run+0x1f0>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	2201      	movs	r2, #1
 800f61e:	fa02 f303 	lsl.w	r3, r2, r3
 800f622:	43da      	mvns	r2, r3
 800f624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f626:	3b01      	subs	r3, #1
 800f628:	400a      	ands	r2, r1
 800f62a:	4937      	ldr	r1, [pc, #220]	; (800f708 <UTIL_SEQ_Run+0x1ec>)
 800f62c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800f630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f632:	3b01      	subs	r3, #1
 800f634:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d1e8      	bne.n	800f60e <UTIL_SEQ_Run+0xf2>
 800f63c:	6a3b      	ldr	r3, [r7, #32]
 800f63e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	f383 8810 	msr	PRIMASK, r3
}
 800f646:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800f648:	4b30      	ldr	r3, [pc, #192]	; (800f70c <UTIL_SEQ_Run+0x1f0>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	4a30      	ldr	r2, [pc, #192]	; (800f710 <UTIL_SEQ_Run+0x1f4>)
 800f64e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f652:	4798      	blx	r3

    local_taskset = TaskSet;
 800f654:	4b28      	ldr	r3, [pc, #160]	; (800f6f8 <UTIL_SEQ_Run+0x1dc>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800f65a:	4b28      	ldr	r3, [pc, #160]	; (800f6fc <UTIL_SEQ_Run+0x1e0>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800f660:	4b27      	ldr	r3, [pc, #156]	; (800f700 <UTIL_SEQ_Run+0x1e4>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800f666:	4b27      	ldr	r3, [pc, #156]	; (800f704 <UTIL_SEQ_Run+0x1e8>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800f66c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f670:	401a      	ands	r2, r3
 800f672:	4b20      	ldr	r3, [pc, #128]	; (800f6f4 <UTIL_SEQ_Run+0x1d8>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	4013      	ands	r3, r2
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d005      	beq.n	800f688 <UTIL_SEQ_Run+0x16c>
 800f67c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f680:	4013      	ands	r3, r2
 800f682:	2b00      	cmp	r3, #0
 800f684:	f43f af64 	beq.w	800f550 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800f688:	4b20      	ldr	r3, [pc, #128]	; (800f70c <UTIL_SEQ_Run+0x1f0>)
 800f68a:	f04f 32ff 	mov.w	r2, #4294967295
 800f68e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800f690:	f000 f938 	bl	800f904 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f694:	f3ef 8310 	mrs	r3, PRIMASK
 800f698:	613b      	str	r3, [r7, #16]
  return(result);
 800f69a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800f69c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800f69e:	b672      	cpsid	i
}
 800f6a0:	bf00      	nop
  local_taskset = TaskSet;
 800f6a2:	4b15      	ldr	r3, [pc, #84]	; (800f6f8 <UTIL_SEQ_Run+0x1dc>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800f6a8:	4b14      	ldr	r3, [pc, #80]	; (800f6fc <UTIL_SEQ_Run+0x1e0>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800f6ae:	4b14      	ldr	r3, [pc, #80]	; (800f700 <UTIL_SEQ_Run+0x1e4>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800f6b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b8:	401a      	ands	r2, r3
 800f6ba:	4b0e      	ldr	r3, [pc, #56]	; (800f6f4 <UTIL_SEQ_Run+0x1d8>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	4013      	ands	r3, r2
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d107      	bne.n	800f6d4 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800f6c4:	4b0f      	ldr	r3, [pc, #60]	; (800f704 <UTIL_SEQ_Run+0x1e8>)
 800f6c6:	681a      	ldr	r2, [r3, #0]
 800f6c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6ca:	4013      	ands	r3, r2
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d101      	bne.n	800f6d4 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800f6d0:	f7f1 fe4c 	bl	800136c <UTIL_SEQ_Idle>
 800f6d4:	69fb      	ldr	r3, [r7, #28]
 800f6d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	f383 8810 	msr	PRIMASK, r3
}
 800f6de:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800f6e0:	f000 f917 	bl	800f912 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800f6e4:	4a03      	ldr	r2, [pc, #12]	; (800f6f4 <UTIL_SEQ_Run+0x1d8>)
 800f6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6e8:	6013      	str	r3, [r2, #0]

  return;
 800f6ea:	bf00      	nop
}
 800f6ec:	3740      	adds	r7, #64	; 0x40
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}
 800f6f2:	bf00      	nop
 800f6f4:	20000174 	.word	0x20000174
 800f6f8:	20001784 	.word	0x20001784
 800f6fc:	20001788 	.word	0x20001788
 800f700:	20000170 	.word	0x20000170
 800f704:	2000178c 	.word	0x2000178c
 800f708:	20001814 	.word	0x20001814
 800f70c:	20001790 	.word	0x20001790
 800f710:	20001794 	.word	0x20001794

0800f714 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b088      	sub	sp, #32
 800f718:	af00      	add	r7, sp, #0
 800f71a:	60f8      	str	r0, [r7, #12]
 800f71c:	60b9      	str	r1, [r7, #8]
 800f71e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f720:	f3ef 8310 	mrs	r3, PRIMASK
 800f724:	617b      	str	r3, [r7, #20]
  return(result);
 800f726:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800f728:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800f72a:	b672      	cpsid	i
}
 800f72c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800f72e:	68f8      	ldr	r0, [r7, #12]
 800f730:	f000 f8f6 	bl	800f920 <SEQ_BitPosition>
 800f734:	4603      	mov	r3, r0
 800f736:	4619      	mov	r1, r3
 800f738:	4a06      	ldr	r2, [pc, #24]	; (800f754 <UTIL_SEQ_RegTask+0x40>)
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f740:	69fb      	ldr	r3, [r7, #28]
 800f742:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f744:	69bb      	ldr	r3, [r7, #24]
 800f746:	f383 8810 	msr	PRIMASK, r3
}
 800f74a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800f74c:	bf00      	nop
}
 800f74e:	3720      	adds	r7, #32
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}
 800f754:	20001794 	.word	0x20001794

0800f758 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800f758:	b480      	push	{r7}
 800f75a:	b087      	sub	sp, #28
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f762:	f3ef 8310 	mrs	r3, PRIMASK
 800f766:	60fb      	str	r3, [r7, #12]
  return(result);
 800f768:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f76a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f76c:	b672      	cpsid	i
}
 800f76e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800f770:	4b0d      	ldr	r3, [pc, #52]	; (800f7a8 <UTIL_SEQ_SetTask+0x50>)
 800f772:	681a      	ldr	r2, [r3, #0]
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	4313      	orrs	r3, r2
 800f778:	4a0b      	ldr	r2, [pc, #44]	; (800f7a8 <UTIL_SEQ_SetTask+0x50>)
 800f77a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800f77c:	4a0b      	ldr	r2, [pc, #44]	; (800f7ac <UTIL_SEQ_SetTask+0x54>)
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	431a      	orrs	r2, r3
 800f788:	4908      	ldr	r1, [pc, #32]	; (800f7ac <UTIL_SEQ_SetTask+0x54>)
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800f790:	697b      	ldr	r3, [r7, #20]
 800f792:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f794:	693b      	ldr	r3, [r7, #16]
 800f796:	f383 8810 	msr	PRIMASK, r3
}
 800f79a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800f79c:	bf00      	nop
}
 800f79e:	371c      	adds	r7, #28
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a6:	4770      	bx	lr
 800f7a8:	20001784 	.word	0x20001784
 800f7ac:	20001814 	.word	0x20001814

0800f7b0 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800f7b0:	b480      	push	{r7}
 800f7b2:	b087      	sub	sp, #28
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f7b8:	f3ef 8310 	mrs	r3, PRIMASK
 800f7bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800f7be:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f7c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f7c2:	b672      	cpsid	i
}
 800f7c4:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	43da      	mvns	r2, r3
 800f7ca:	4b08      	ldr	r3, [pc, #32]	; (800f7ec <UTIL_SEQ_PauseTask+0x3c>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	4013      	ands	r3, r2
 800f7d0:	4a06      	ldr	r2, [pc, #24]	; (800f7ec <UTIL_SEQ_PauseTask+0x3c>)
 800f7d2:	6013      	str	r3, [r2, #0]
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f7d8:	693b      	ldr	r3, [r7, #16]
 800f7da:	f383 8810 	msr	PRIMASK, r3
}
 800f7de:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800f7e0:	bf00      	nop
}
 800f7e2:	371c      	adds	r7, #28
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ea:	4770      	bx	lr
 800f7ec:	20000170 	.word	0x20000170

0800f7f0 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	b087      	sub	sp, #28
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f7f8:	f3ef 8310 	mrs	r3, PRIMASK
 800f7fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800f7fe:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f800:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f802:	b672      	cpsid	i
}
 800f804:	bf00      	nop

  TaskMask |= TaskId_bm;
 800f806:	4b09      	ldr	r3, [pc, #36]	; (800f82c <UTIL_SEQ_ResumeTask+0x3c>)
 800f808:	681a      	ldr	r2, [r3, #0]
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	4313      	orrs	r3, r2
 800f80e:	4a07      	ldr	r2, [pc, #28]	; (800f82c <UTIL_SEQ_ResumeTask+0x3c>)
 800f810:	6013      	str	r3, [r2, #0]
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f816:	693b      	ldr	r3, [r7, #16]
 800f818:	f383 8810 	msr	PRIMASK, r3
}
 800f81c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800f81e:	bf00      	nop
}
 800f820:	371c      	adds	r7, #28
 800f822:	46bd      	mov	sp, r7
 800f824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f828:	4770      	bx	lr
 800f82a:	bf00      	nop
 800f82c:	20000170 	.word	0x20000170

0800f830 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800f830:	b480      	push	{r7}
 800f832:	b087      	sub	sp, #28
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f838:	f3ef 8310 	mrs	r3, PRIMASK
 800f83c:	60fb      	str	r3, [r7, #12]
  return(result);
 800f83e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f840:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f842:	b672      	cpsid	i
}
 800f844:	bf00      	nop

  EvtSet |= EvtId_bm;
 800f846:	4b09      	ldr	r3, [pc, #36]	; (800f86c <UTIL_SEQ_SetEvt+0x3c>)
 800f848:	681a      	ldr	r2, [r3, #0]
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	4313      	orrs	r3, r2
 800f84e:	4a07      	ldr	r2, [pc, #28]	; (800f86c <UTIL_SEQ_SetEvt+0x3c>)
 800f850:	6013      	str	r3, [r2, #0]
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	f383 8810 	msr	PRIMASK, r3
}
 800f85c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800f85e:	bf00      	nop
}
 800f860:	371c      	adds	r7, #28
 800f862:	46bd      	mov	sp, r7
 800f864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f868:	4770      	bx	lr
 800f86a:	bf00      	nop
 800f86c:	20001788 	.word	0x20001788

0800f870 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b088      	sub	sp, #32
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800f878:	4b1f      	ldr	r3, [pc, #124]	; (800f8f8 <UTIL_SEQ_WaitEvt+0x88>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800f87e:	4b1e      	ldr	r3, [pc, #120]	; (800f8f8 <UTIL_SEQ_WaitEvt+0x88>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f886:	d102      	bne.n	800f88e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800f888:	2300      	movs	r3, #0
 800f88a:	61fb      	str	r3, [r7, #28]
 800f88c:	e005      	b.n	800f89a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800f88e:	4b1a      	ldr	r3, [pc, #104]	; (800f8f8 <UTIL_SEQ_WaitEvt+0x88>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	2201      	movs	r2, #1
 800f894:	fa02 f303 	lsl.w	r3, r2, r3
 800f898:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800f89a:	4b18      	ldr	r3, [pc, #96]	; (800f8fc <UTIL_SEQ_WaitEvt+0x8c>)
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800f8a0:	4a16      	ldr	r2, [pc, #88]	; (800f8fc <UTIL_SEQ_WaitEvt+0x8c>)
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800f8a6:	e003      	b.n	800f8b0 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800f8a8:	6879      	ldr	r1, [r7, #4]
 800f8aa:	69f8      	ldr	r0, [r7, #28]
 800f8ac:	f7f1 fd65 	bl	800137a <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800f8b0:	4b13      	ldr	r3, [pc, #76]	; (800f900 <UTIL_SEQ_WaitEvt+0x90>)
 800f8b2:	681a      	ldr	r2, [r3, #0]
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	4013      	ands	r3, r2
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d0f5      	beq.n	800f8a8 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800f8bc:	4a0e      	ldr	r2, [pc, #56]	; (800f8f8 <UTIL_SEQ_WaitEvt+0x88>)
 800f8be:	69bb      	ldr	r3, [r7, #24]
 800f8c0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f8c2:	f3ef 8310 	mrs	r3, PRIMASK
 800f8c6:	60bb      	str	r3, [r7, #8]
  return(result);
 800f8c8:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f8ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800f8cc:	b672      	cpsid	i
}
 800f8ce:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	43da      	mvns	r2, r3
 800f8d4:	4b0a      	ldr	r3, [pc, #40]	; (800f900 <UTIL_SEQ_WaitEvt+0x90>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	4013      	ands	r3, r2
 800f8da:	4a09      	ldr	r2, [pc, #36]	; (800f900 <UTIL_SEQ_WaitEvt+0x90>)
 800f8dc:	6013      	str	r3, [r2, #0]
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	f383 8810 	msr	PRIMASK, r3
}
 800f8e8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800f8ea:	4a04      	ldr	r2, [pc, #16]	; (800f8fc <UTIL_SEQ_WaitEvt+0x8c>)
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	6013      	str	r3, [r2, #0]
  return;
 800f8f0:	bf00      	nop
}
 800f8f2:	3720      	adds	r7, #32
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}
 800f8f8:	20001790 	.word	0x20001790
 800f8fc:	2000178c 	.word	0x2000178c
 800f900:	20001788 	.word	0x20001788

0800f904 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800f904:	b480      	push	{r7}
 800f906:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800f908:	bf00      	nop
}
 800f90a:	46bd      	mov	sp, r7
 800f90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f910:	4770      	bx	lr

0800f912 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800f912:	b480      	push	{r7}
 800f914:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800f916:	bf00      	nop
}
 800f918:	46bd      	mov	sp, r7
 800f91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91e:	4770      	bx	lr

0800f920 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800f920:	b480      	push	{r7}
 800f922:	b085      	sub	sp, #20
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800f928:	2300      	movs	r3, #0
 800f92a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	0c1b      	lsrs	r3, r3, #16
 800f934:	041b      	lsls	r3, r3, #16
 800f936:	2b00      	cmp	r3, #0
 800f938:	d104      	bne.n	800f944 <SEQ_BitPosition+0x24>
 800f93a:	2310      	movs	r3, #16
 800f93c:	73fb      	strb	r3, [r7, #15]
 800f93e:	68bb      	ldr	r3, [r7, #8]
 800f940:	041b      	lsls	r3, r3, #16
 800f942:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d105      	bne.n	800f95a <SEQ_BitPosition+0x3a>
 800f94e:	7bfb      	ldrb	r3, [r7, #15]
 800f950:	3308      	adds	r3, #8
 800f952:	73fb      	strb	r3, [r7, #15]
 800f954:	68bb      	ldr	r3, [r7, #8]
 800f956:	021b      	lsls	r3, r3, #8
 800f958:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f960:	2b00      	cmp	r3, #0
 800f962:	d105      	bne.n	800f970 <SEQ_BitPosition+0x50>
 800f964:	7bfb      	ldrb	r3, [r7, #15]
 800f966:	3304      	adds	r3, #4
 800f968:	73fb      	strb	r3, [r7, #15]
 800f96a:	68bb      	ldr	r3, [r7, #8]
 800f96c:	011b      	lsls	r3, r3, #4
 800f96e:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	0f1b      	lsrs	r3, r3, #28
 800f974:	4a07      	ldr	r2, [pc, #28]	; (800f994 <SEQ_BitPosition+0x74>)
 800f976:	5cd2      	ldrb	r2, [r2, r3]
 800f978:	7bfb      	ldrb	r3, [r7, #15]
 800f97a:	4413      	add	r3, r2
 800f97c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800f97e:	7bfb      	ldrb	r3, [r7, #15]
 800f980:	f1c3 031f 	rsb	r3, r3, #31
 800f984:	b2db      	uxtb	r3, r3
}
 800f986:	4618      	mov	r0, r3
 800f988:	3714      	adds	r7, #20
 800f98a:	46bd      	mov	sp, r7
 800f98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f990:	4770      	bx	lr
 800f992:	bf00      	nop
 800f994:	080141d4 	.word	0x080141d4

0800f998 <__cvt>:
 800f998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f99c:	ec55 4b10 	vmov	r4, r5, d0
 800f9a0:	2d00      	cmp	r5, #0
 800f9a2:	460e      	mov	r6, r1
 800f9a4:	4619      	mov	r1, r3
 800f9a6:	462b      	mov	r3, r5
 800f9a8:	bfbb      	ittet	lt
 800f9aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f9ae:	461d      	movlt	r5, r3
 800f9b0:	2300      	movge	r3, #0
 800f9b2:	232d      	movlt	r3, #45	; 0x2d
 800f9b4:	700b      	strb	r3, [r1, #0]
 800f9b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f9b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f9bc:	4691      	mov	r9, r2
 800f9be:	f023 0820 	bic.w	r8, r3, #32
 800f9c2:	bfbc      	itt	lt
 800f9c4:	4622      	movlt	r2, r4
 800f9c6:	4614      	movlt	r4, r2
 800f9c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f9cc:	d005      	beq.n	800f9da <__cvt+0x42>
 800f9ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f9d2:	d100      	bne.n	800f9d6 <__cvt+0x3e>
 800f9d4:	3601      	adds	r6, #1
 800f9d6:	2102      	movs	r1, #2
 800f9d8:	e000      	b.n	800f9dc <__cvt+0x44>
 800f9da:	2103      	movs	r1, #3
 800f9dc:	ab03      	add	r3, sp, #12
 800f9de:	9301      	str	r3, [sp, #4]
 800f9e0:	ab02      	add	r3, sp, #8
 800f9e2:	9300      	str	r3, [sp, #0]
 800f9e4:	ec45 4b10 	vmov	d0, r4, r5
 800f9e8:	4653      	mov	r3, sl
 800f9ea:	4632      	mov	r2, r6
 800f9ec:	f000 fe90 	bl	8010710 <_dtoa_r>
 800f9f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f9f4:	4607      	mov	r7, r0
 800f9f6:	d102      	bne.n	800f9fe <__cvt+0x66>
 800f9f8:	f019 0f01 	tst.w	r9, #1
 800f9fc:	d022      	beq.n	800fa44 <__cvt+0xac>
 800f9fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fa02:	eb07 0906 	add.w	r9, r7, r6
 800fa06:	d110      	bne.n	800fa2a <__cvt+0x92>
 800fa08:	783b      	ldrb	r3, [r7, #0]
 800fa0a:	2b30      	cmp	r3, #48	; 0x30
 800fa0c:	d10a      	bne.n	800fa24 <__cvt+0x8c>
 800fa0e:	2200      	movs	r2, #0
 800fa10:	2300      	movs	r3, #0
 800fa12:	4620      	mov	r0, r4
 800fa14:	4629      	mov	r1, r5
 800fa16:	f7f1 f82f 	bl	8000a78 <__aeabi_dcmpeq>
 800fa1a:	b918      	cbnz	r0, 800fa24 <__cvt+0x8c>
 800fa1c:	f1c6 0601 	rsb	r6, r6, #1
 800fa20:	f8ca 6000 	str.w	r6, [sl]
 800fa24:	f8da 3000 	ldr.w	r3, [sl]
 800fa28:	4499      	add	r9, r3
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	4620      	mov	r0, r4
 800fa30:	4629      	mov	r1, r5
 800fa32:	f7f1 f821 	bl	8000a78 <__aeabi_dcmpeq>
 800fa36:	b108      	cbz	r0, 800fa3c <__cvt+0xa4>
 800fa38:	f8cd 900c 	str.w	r9, [sp, #12]
 800fa3c:	2230      	movs	r2, #48	; 0x30
 800fa3e:	9b03      	ldr	r3, [sp, #12]
 800fa40:	454b      	cmp	r3, r9
 800fa42:	d307      	bcc.n	800fa54 <__cvt+0xbc>
 800fa44:	9b03      	ldr	r3, [sp, #12]
 800fa46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fa48:	1bdb      	subs	r3, r3, r7
 800fa4a:	4638      	mov	r0, r7
 800fa4c:	6013      	str	r3, [r2, #0]
 800fa4e:	b004      	add	sp, #16
 800fa50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa54:	1c59      	adds	r1, r3, #1
 800fa56:	9103      	str	r1, [sp, #12]
 800fa58:	701a      	strb	r2, [r3, #0]
 800fa5a:	e7f0      	b.n	800fa3e <__cvt+0xa6>

0800fa5c <__exponent>:
 800fa5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa5e:	4603      	mov	r3, r0
 800fa60:	2900      	cmp	r1, #0
 800fa62:	bfb8      	it	lt
 800fa64:	4249      	neglt	r1, r1
 800fa66:	f803 2b02 	strb.w	r2, [r3], #2
 800fa6a:	bfb4      	ite	lt
 800fa6c:	222d      	movlt	r2, #45	; 0x2d
 800fa6e:	222b      	movge	r2, #43	; 0x2b
 800fa70:	2909      	cmp	r1, #9
 800fa72:	7042      	strb	r2, [r0, #1]
 800fa74:	dd2a      	ble.n	800facc <__exponent+0x70>
 800fa76:	f10d 0207 	add.w	r2, sp, #7
 800fa7a:	4617      	mov	r7, r2
 800fa7c:	260a      	movs	r6, #10
 800fa7e:	4694      	mov	ip, r2
 800fa80:	fb91 f5f6 	sdiv	r5, r1, r6
 800fa84:	fb06 1415 	mls	r4, r6, r5, r1
 800fa88:	3430      	adds	r4, #48	; 0x30
 800fa8a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800fa8e:	460c      	mov	r4, r1
 800fa90:	2c63      	cmp	r4, #99	; 0x63
 800fa92:	f102 32ff 	add.w	r2, r2, #4294967295
 800fa96:	4629      	mov	r1, r5
 800fa98:	dcf1      	bgt.n	800fa7e <__exponent+0x22>
 800fa9a:	3130      	adds	r1, #48	; 0x30
 800fa9c:	f1ac 0402 	sub.w	r4, ip, #2
 800faa0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800faa4:	1c41      	adds	r1, r0, #1
 800faa6:	4622      	mov	r2, r4
 800faa8:	42ba      	cmp	r2, r7
 800faaa:	d30a      	bcc.n	800fac2 <__exponent+0x66>
 800faac:	f10d 0209 	add.w	r2, sp, #9
 800fab0:	eba2 020c 	sub.w	r2, r2, ip
 800fab4:	42bc      	cmp	r4, r7
 800fab6:	bf88      	it	hi
 800fab8:	2200      	movhi	r2, #0
 800faba:	4413      	add	r3, r2
 800fabc:	1a18      	subs	r0, r3, r0
 800fabe:	b003      	add	sp, #12
 800fac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fac2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800fac6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800faca:	e7ed      	b.n	800faa8 <__exponent+0x4c>
 800facc:	2330      	movs	r3, #48	; 0x30
 800face:	3130      	adds	r1, #48	; 0x30
 800fad0:	7083      	strb	r3, [r0, #2]
 800fad2:	70c1      	strb	r1, [r0, #3]
 800fad4:	1d03      	adds	r3, r0, #4
 800fad6:	e7f1      	b.n	800fabc <__exponent+0x60>

0800fad8 <_printf_float>:
 800fad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fadc:	ed2d 8b02 	vpush	{d8}
 800fae0:	b08d      	sub	sp, #52	; 0x34
 800fae2:	460c      	mov	r4, r1
 800fae4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fae8:	4616      	mov	r6, r2
 800faea:	461f      	mov	r7, r3
 800faec:	4605      	mov	r5, r0
 800faee:	f000 fcff 	bl	80104f0 <_localeconv_r>
 800faf2:	f8d0 a000 	ldr.w	sl, [r0]
 800faf6:	4650      	mov	r0, sl
 800faf8:	f7f0 fb92 	bl	8000220 <strlen>
 800fafc:	2300      	movs	r3, #0
 800fafe:	930a      	str	r3, [sp, #40]	; 0x28
 800fb00:	6823      	ldr	r3, [r4, #0]
 800fb02:	9305      	str	r3, [sp, #20]
 800fb04:	f8d8 3000 	ldr.w	r3, [r8]
 800fb08:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fb0c:	3307      	adds	r3, #7
 800fb0e:	f023 0307 	bic.w	r3, r3, #7
 800fb12:	f103 0208 	add.w	r2, r3, #8
 800fb16:	f8c8 2000 	str.w	r2, [r8]
 800fb1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fb1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fb22:	9307      	str	r3, [sp, #28]
 800fb24:	f8cd 8018 	str.w	r8, [sp, #24]
 800fb28:	ee08 0a10 	vmov	s16, r0
 800fb2c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800fb30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fb34:	4b9e      	ldr	r3, [pc, #632]	; (800fdb0 <_printf_float+0x2d8>)
 800fb36:	f04f 32ff 	mov.w	r2, #4294967295
 800fb3a:	f7f0 ffcf 	bl	8000adc <__aeabi_dcmpun>
 800fb3e:	bb88      	cbnz	r0, 800fba4 <_printf_float+0xcc>
 800fb40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fb44:	4b9a      	ldr	r3, [pc, #616]	; (800fdb0 <_printf_float+0x2d8>)
 800fb46:	f04f 32ff 	mov.w	r2, #4294967295
 800fb4a:	f7f0 ffa9 	bl	8000aa0 <__aeabi_dcmple>
 800fb4e:	bb48      	cbnz	r0, 800fba4 <_printf_float+0xcc>
 800fb50:	2200      	movs	r2, #0
 800fb52:	2300      	movs	r3, #0
 800fb54:	4640      	mov	r0, r8
 800fb56:	4649      	mov	r1, r9
 800fb58:	f7f0 ff98 	bl	8000a8c <__aeabi_dcmplt>
 800fb5c:	b110      	cbz	r0, 800fb64 <_printf_float+0x8c>
 800fb5e:	232d      	movs	r3, #45	; 0x2d
 800fb60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb64:	4a93      	ldr	r2, [pc, #588]	; (800fdb4 <_printf_float+0x2dc>)
 800fb66:	4b94      	ldr	r3, [pc, #592]	; (800fdb8 <_printf_float+0x2e0>)
 800fb68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800fb6c:	bf94      	ite	ls
 800fb6e:	4690      	movls	r8, r2
 800fb70:	4698      	movhi	r8, r3
 800fb72:	2303      	movs	r3, #3
 800fb74:	6123      	str	r3, [r4, #16]
 800fb76:	9b05      	ldr	r3, [sp, #20]
 800fb78:	f023 0304 	bic.w	r3, r3, #4
 800fb7c:	6023      	str	r3, [r4, #0]
 800fb7e:	f04f 0900 	mov.w	r9, #0
 800fb82:	9700      	str	r7, [sp, #0]
 800fb84:	4633      	mov	r3, r6
 800fb86:	aa0b      	add	r2, sp, #44	; 0x2c
 800fb88:	4621      	mov	r1, r4
 800fb8a:	4628      	mov	r0, r5
 800fb8c:	f000 f9da 	bl	800ff44 <_printf_common>
 800fb90:	3001      	adds	r0, #1
 800fb92:	f040 8090 	bne.w	800fcb6 <_printf_float+0x1de>
 800fb96:	f04f 30ff 	mov.w	r0, #4294967295
 800fb9a:	b00d      	add	sp, #52	; 0x34
 800fb9c:	ecbd 8b02 	vpop	{d8}
 800fba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fba4:	4642      	mov	r2, r8
 800fba6:	464b      	mov	r3, r9
 800fba8:	4640      	mov	r0, r8
 800fbaa:	4649      	mov	r1, r9
 800fbac:	f7f0 ff96 	bl	8000adc <__aeabi_dcmpun>
 800fbb0:	b140      	cbz	r0, 800fbc4 <_printf_float+0xec>
 800fbb2:	464b      	mov	r3, r9
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	bfbc      	itt	lt
 800fbb8:	232d      	movlt	r3, #45	; 0x2d
 800fbba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fbbe:	4a7f      	ldr	r2, [pc, #508]	; (800fdbc <_printf_float+0x2e4>)
 800fbc0:	4b7f      	ldr	r3, [pc, #508]	; (800fdc0 <_printf_float+0x2e8>)
 800fbc2:	e7d1      	b.n	800fb68 <_printf_float+0x90>
 800fbc4:	6863      	ldr	r3, [r4, #4]
 800fbc6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800fbca:	9206      	str	r2, [sp, #24]
 800fbcc:	1c5a      	adds	r2, r3, #1
 800fbce:	d13f      	bne.n	800fc50 <_printf_float+0x178>
 800fbd0:	2306      	movs	r3, #6
 800fbd2:	6063      	str	r3, [r4, #4]
 800fbd4:	9b05      	ldr	r3, [sp, #20]
 800fbd6:	6861      	ldr	r1, [r4, #4]
 800fbd8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fbdc:	2300      	movs	r3, #0
 800fbde:	9303      	str	r3, [sp, #12]
 800fbe0:	ab0a      	add	r3, sp, #40	; 0x28
 800fbe2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fbe6:	ab09      	add	r3, sp, #36	; 0x24
 800fbe8:	ec49 8b10 	vmov	d0, r8, r9
 800fbec:	9300      	str	r3, [sp, #0]
 800fbee:	6022      	str	r2, [r4, #0]
 800fbf0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fbf4:	4628      	mov	r0, r5
 800fbf6:	f7ff fecf 	bl	800f998 <__cvt>
 800fbfa:	9b06      	ldr	r3, [sp, #24]
 800fbfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fbfe:	2b47      	cmp	r3, #71	; 0x47
 800fc00:	4680      	mov	r8, r0
 800fc02:	d108      	bne.n	800fc16 <_printf_float+0x13e>
 800fc04:	1cc8      	adds	r0, r1, #3
 800fc06:	db02      	blt.n	800fc0e <_printf_float+0x136>
 800fc08:	6863      	ldr	r3, [r4, #4]
 800fc0a:	4299      	cmp	r1, r3
 800fc0c:	dd41      	ble.n	800fc92 <_printf_float+0x1ba>
 800fc0e:	f1ab 0302 	sub.w	r3, fp, #2
 800fc12:	fa5f fb83 	uxtb.w	fp, r3
 800fc16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fc1a:	d820      	bhi.n	800fc5e <_printf_float+0x186>
 800fc1c:	3901      	subs	r1, #1
 800fc1e:	465a      	mov	r2, fp
 800fc20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fc24:	9109      	str	r1, [sp, #36]	; 0x24
 800fc26:	f7ff ff19 	bl	800fa5c <__exponent>
 800fc2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fc2c:	1813      	adds	r3, r2, r0
 800fc2e:	2a01      	cmp	r2, #1
 800fc30:	4681      	mov	r9, r0
 800fc32:	6123      	str	r3, [r4, #16]
 800fc34:	dc02      	bgt.n	800fc3c <_printf_float+0x164>
 800fc36:	6822      	ldr	r2, [r4, #0]
 800fc38:	07d2      	lsls	r2, r2, #31
 800fc3a:	d501      	bpl.n	800fc40 <_printf_float+0x168>
 800fc3c:	3301      	adds	r3, #1
 800fc3e:	6123      	str	r3, [r4, #16]
 800fc40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d09c      	beq.n	800fb82 <_printf_float+0xaa>
 800fc48:	232d      	movs	r3, #45	; 0x2d
 800fc4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc4e:	e798      	b.n	800fb82 <_printf_float+0xaa>
 800fc50:	9a06      	ldr	r2, [sp, #24]
 800fc52:	2a47      	cmp	r2, #71	; 0x47
 800fc54:	d1be      	bne.n	800fbd4 <_printf_float+0xfc>
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d1bc      	bne.n	800fbd4 <_printf_float+0xfc>
 800fc5a:	2301      	movs	r3, #1
 800fc5c:	e7b9      	b.n	800fbd2 <_printf_float+0xfa>
 800fc5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800fc62:	d118      	bne.n	800fc96 <_printf_float+0x1be>
 800fc64:	2900      	cmp	r1, #0
 800fc66:	6863      	ldr	r3, [r4, #4]
 800fc68:	dd0b      	ble.n	800fc82 <_printf_float+0x1aa>
 800fc6a:	6121      	str	r1, [r4, #16]
 800fc6c:	b913      	cbnz	r3, 800fc74 <_printf_float+0x19c>
 800fc6e:	6822      	ldr	r2, [r4, #0]
 800fc70:	07d0      	lsls	r0, r2, #31
 800fc72:	d502      	bpl.n	800fc7a <_printf_float+0x1a2>
 800fc74:	3301      	adds	r3, #1
 800fc76:	440b      	add	r3, r1
 800fc78:	6123      	str	r3, [r4, #16]
 800fc7a:	65a1      	str	r1, [r4, #88]	; 0x58
 800fc7c:	f04f 0900 	mov.w	r9, #0
 800fc80:	e7de      	b.n	800fc40 <_printf_float+0x168>
 800fc82:	b913      	cbnz	r3, 800fc8a <_printf_float+0x1b2>
 800fc84:	6822      	ldr	r2, [r4, #0]
 800fc86:	07d2      	lsls	r2, r2, #31
 800fc88:	d501      	bpl.n	800fc8e <_printf_float+0x1b6>
 800fc8a:	3302      	adds	r3, #2
 800fc8c:	e7f4      	b.n	800fc78 <_printf_float+0x1a0>
 800fc8e:	2301      	movs	r3, #1
 800fc90:	e7f2      	b.n	800fc78 <_printf_float+0x1a0>
 800fc92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800fc96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc98:	4299      	cmp	r1, r3
 800fc9a:	db05      	blt.n	800fca8 <_printf_float+0x1d0>
 800fc9c:	6823      	ldr	r3, [r4, #0]
 800fc9e:	6121      	str	r1, [r4, #16]
 800fca0:	07d8      	lsls	r0, r3, #31
 800fca2:	d5ea      	bpl.n	800fc7a <_printf_float+0x1a2>
 800fca4:	1c4b      	adds	r3, r1, #1
 800fca6:	e7e7      	b.n	800fc78 <_printf_float+0x1a0>
 800fca8:	2900      	cmp	r1, #0
 800fcaa:	bfd4      	ite	le
 800fcac:	f1c1 0202 	rsble	r2, r1, #2
 800fcb0:	2201      	movgt	r2, #1
 800fcb2:	4413      	add	r3, r2
 800fcb4:	e7e0      	b.n	800fc78 <_printf_float+0x1a0>
 800fcb6:	6823      	ldr	r3, [r4, #0]
 800fcb8:	055a      	lsls	r2, r3, #21
 800fcba:	d407      	bmi.n	800fccc <_printf_float+0x1f4>
 800fcbc:	6923      	ldr	r3, [r4, #16]
 800fcbe:	4642      	mov	r2, r8
 800fcc0:	4631      	mov	r1, r6
 800fcc2:	4628      	mov	r0, r5
 800fcc4:	47b8      	blx	r7
 800fcc6:	3001      	adds	r0, #1
 800fcc8:	d12c      	bne.n	800fd24 <_printf_float+0x24c>
 800fcca:	e764      	b.n	800fb96 <_printf_float+0xbe>
 800fccc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fcd0:	f240 80e0 	bls.w	800fe94 <_printf_float+0x3bc>
 800fcd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fcd8:	2200      	movs	r2, #0
 800fcda:	2300      	movs	r3, #0
 800fcdc:	f7f0 fecc 	bl	8000a78 <__aeabi_dcmpeq>
 800fce0:	2800      	cmp	r0, #0
 800fce2:	d034      	beq.n	800fd4e <_printf_float+0x276>
 800fce4:	4a37      	ldr	r2, [pc, #220]	; (800fdc4 <_printf_float+0x2ec>)
 800fce6:	2301      	movs	r3, #1
 800fce8:	4631      	mov	r1, r6
 800fcea:	4628      	mov	r0, r5
 800fcec:	47b8      	blx	r7
 800fcee:	3001      	adds	r0, #1
 800fcf0:	f43f af51 	beq.w	800fb96 <_printf_float+0xbe>
 800fcf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	db02      	blt.n	800fd02 <_printf_float+0x22a>
 800fcfc:	6823      	ldr	r3, [r4, #0]
 800fcfe:	07d8      	lsls	r0, r3, #31
 800fd00:	d510      	bpl.n	800fd24 <_printf_float+0x24c>
 800fd02:	ee18 3a10 	vmov	r3, s16
 800fd06:	4652      	mov	r2, sl
 800fd08:	4631      	mov	r1, r6
 800fd0a:	4628      	mov	r0, r5
 800fd0c:	47b8      	blx	r7
 800fd0e:	3001      	adds	r0, #1
 800fd10:	f43f af41 	beq.w	800fb96 <_printf_float+0xbe>
 800fd14:	f04f 0800 	mov.w	r8, #0
 800fd18:	f104 091a 	add.w	r9, r4, #26
 800fd1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd1e:	3b01      	subs	r3, #1
 800fd20:	4543      	cmp	r3, r8
 800fd22:	dc09      	bgt.n	800fd38 <_printf_float+0x260>
 800fd24:	6823      	ldr	r3, [r4, #0]
 800fd26:	079b      	lsls	r3, r3, #30
 800fd28:	f100 8107 	bmi.w	800ff3a <_printf_float+0x462>
 800fd2c:	68e0      	ldr	r0, [r4, #12]
 800fd2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd30:	4298      	cmp	r0, r3
 800fd32:	bfb8      	it	lt
 800fd34:	4618      	movlt	r0, r3
 800fd36:	e730      	b.n	800fb9a <_printf_float+0xc2>
 800fd38:	2301      	movs	r3, #1
 800fd3a:	464a      	mov	r2, r9
 800fd3c:	4631      	mov	r1, r6
 800fd3e:	4628      	mov	r0, r5
 800fd40:	47b8      	blx	r7
 800fd42:	3001      	adds	r0, #1
 800fd44:	f43f af27 	beq.w	800fb96 <_printf_float+0xbe>
 800fd48:	f108 0801 	add.w	r8, r8, #1
 800fd4c:	e7e6      	b.n	800fd1c <_printf_float+0x244>
 800fd4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	dc39      	bgt.n	800fdc8 <_printf_float+0x2f0>
 800fd54:	4a1b      	ldr	r2, [pc, #108]	; (800fdc4 <_printf_float+0x2ec>)
 800fd56:	2301      	movs	r3, #1
 800fd58:	4631      	mov	r1, r6
 800fd5a:	4628      	mov	r0, r5
 800fd5c:	47b8      	blx	r7
 800fd5e:	3001      	adds	r0, #1
 800fd60:	f43f af19 	beq.w	800fb96 <_printf_float+0xbe>
 800fd64:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800fd68:	4313      	orrs	r3, r2
 800fd6a:	d102      	bne.n	800fd72 <_printf_float+0x29a>
 800fd6c:	6823      	ldr	r3, [r4, #0]
 800fd6e:	07d9      	lsls	r1, r3, #31
 800fd70:	d5d8      	bpl.n	800fd24 <_printf_float+0x24c>
 800fd72:	ee18 3a10 	vmov	r3, s16
 800fd76:	4652      	mov	r2, sl
 800fd78:	4631      	mov	r1, r6
 800fd7a:	4628      	mov	r0, r5
 800fd7c:	47b8      	blx	r7
 800fd7e:	3001      	adds	r0, #1
 800fd80:	f43f af09 	beq.w	800fb96 <_printf_float+0xbe>
 800fd84:	f04f 0900 	mov.w	r9, #0
 800fd88:	f104 0a1a 	add.w	sl, r4, #26
 800fd8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd8e:	425b      	negs	r3, r3
 800fd90:	454b      	cmp	r3, r9
 800fd92:	dc01      	bgt.n	800fd98 <_printf_float+0x2c0>
 800fd94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd96:	e792      	b.n	800fcbe <_printf_float+0x1e6>
 800fd98:	2301      	movs	r3, #1
 800fd9a:	4652      	mov	r2, sl
 800fd9c:	4631      	mov	r1, r6
 800fd9e:	4628      	mov	r0, r5
 800fda0:	47b8      	blx	r7
 800fda2:	3001      	adds	r0, #1
 800fda4:	f43f aef7 	beq.w	800fb96 <_printf_float+0xbe>
 800fda8:	f109 0901 	add.w	r9, r9, #1
 800fdac:	e7ee      	b.n	800fd8c <_printf_float+0x2b4>
 800fdae:	bf00      	nop
 800fdb0:	7fefffff 	.word	0x7fefffff
 800fdb4:	080141e4 	.word	0x080141e4
 800fdb8:	080141e8 	.word	0x080141e8
 800fdbc:	080141ec 	.word	0x080141ec
 800fdc0:	080141f0 	.word	0x080141f0
 800fdc4:	080141f4 	.word	0x080141f4
 800fdc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fdca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fdcc:	429a      	cmp	r2, r3
 800fdce:	bfa8      	it	ge
 800fdd0:	461a      	movge	r2, r3
 800fdd2:	2a00      	cmp	r2, #0
 800fdd4:	4691      	mov	r9, r2
 800fdd6:	dc37      	bgt.n	800fe48 <_printf_float+0x370>
 800fdd8:	f04f 0b00 	mov.w	fp, #0
 800fddc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fde0:	f104 021a 	add.w	r2, r4, #26
 800fde4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fde6:	9305      	str	r3, [sp, #20]
 800fde8:	eba3 0309 	sub.w	r3, r3, r9
 800fdec:	455b      	cmp	r3, fp
 800fdee:	dc33      	bgt.n	800fe58 <_printf_float+0x380>
 800fdf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fdf4:	429a      	cmp	r2, r3
 800fdf6:	db3b      	blt.n	800fe70 <_printf_float+0x398>
 800fdf8:	6823      	ldr	r3, [r4, #0]
 800fdfa:	07da      	lsls	r2, r3, #31
 800fdfc:	d438      	bmi.n	800fe70 <_printf_float+0x398>
 800fdfe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800fe02:	eba2 0903 	sub.w	r9, r2, r3
 800fe06:	9b05      	ldr	r3, [sp, #20]
 800fe08:	1ad2      	subs	r2, r2, r3
 800fe0a:	4591      	cmp	r9, r2
 800fe0c:	bfa8      	it	ge
 800fe0e:	4691      	movge	r9, r2
 800fe10:	f1b9 0f00 	cmp.w	r9, #0
 800fe14:	dc35      	bgt.n	800fe82 <_printf_float+0x3aa>
 800fe16:	f04f 0800 	mov.w	r8, #0
 800fe1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fe1e:	f104 0a1a 	add.w	sl, r4, #26
 800fe22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fe26:	1a9b      	subs	r3, r3, r2
 800fe28:	eba3 0309 	sub.w	r3, r3, r9
 800fe2c:	4543      	cmp	r3, r8
 800fe2e:	f77f af79 	ble.w	800fd24 <_printf_float+0x24c>
 800fe32:	2301      	movs	r3, #1
 800fe34:	4652      	mov	r2, sl
 800fe36:	4631      	mov	r1, r6
 800fe38:	4628      	mov	r0, r5
 800fe3a:	47b8      	blx	r7
 800fe3c:	3001      	adds	r0, #1
 800fe3e:	f43f aeaa 	beq.w	800fb96 <_printf_float+0xbe>
 800fe42:	f108 0801 	add.w	r8, r8, #1
 800fe46:	e7ec      	b.n	800fe22 <_printf_float+0x34a>
 800fe48:	4613      	mov	r3, r2
 800fe4a:	4631      	mov	r1, r6
 800fe4c:	4642      	mov	r2, r8
 800fe4e:	4628      	mov	r0, r5
 800fe50:	47b8      	blx	r7
 800fe52:	3001      	adds	r0, #1
 800fe54:	d1c0      	bne.n	800fdd8 <_printf_float+0x300>
 800fe56:	e69e      	b.n	800fb96 <_printf_float+0xbe>
 800fe58:	2301      	movs	r3, #1
 800fe5a:	4631      	mov	r1, r6
 800fe5c:	4628      	mov	r0, r5
 800fe5e:	9205      	str	r2, [sp, #20]
 800fe60:	47b8      	blx	r7
 800fe62:	3001      	adds	r0, #1
 800fe64:	f43f ae97 	beq.w	800fb96 <_printf_float+0xbe>
 800fe68:	9a05      	ldr	r2, [sp, #20]
 800fe6a:	f10b 0b01 	add.w	fp, fp, #1
 800fe6e:	e7b9      	b.n	800fde4 <_printf_float+0x30c>
 800fe70:	ee18 3a10 	vmov	r3, s16
 800fe74:	4652      	mov	r2, sl
 800fe76:	4631      	mov	r1, r6
 800fe78:	4628      	mov	r0, r5
 800fe7a:	47b8      	blx	r7
 800fe7c:	3001      	adds	r0, #1
 800fe7e:	d1be      	bne.n	800fdfe <_printf_float+0x326>
 800fe80:	e689      	b.n	800fb96 <_printf_float+0xbe>
 800fe82:	9a05      	ldr	r2, [sp, #20]
 800fe84:	464b      	mov	r3, r9
 800fe86:	4442      	add	r2, r8
 800fe88:	4631      	mov	r1, r6
 800fe8a:	4628      	mov	r0, r5
 800fe8c:	47b8      	blx	r7
 800fe8e:	3001      	adds	r0, #1
 800fe90:	d1c1      	bne.n	800fe16 <_printf_float+0x33e>
 800fe92:	e680      	b.n	800fb96 <_printf_float+0xbe>
 800fe94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe96:	2a01      	cmp	r2, #1
 800fe98:	dc01      	bgt.n	800fe9e <_printf_float+0x3c6>
 800fe9a:	07db      	lsls	r3, r3, #31
 800fe9c:	d53a      	bpl.n	800ff14 <_printf_float+0x43c>
 800fe9e:	2301      	movs	r3, #1
 800fea0:	4642      	mov	r2, r8
 800fea2:	4631      	mov	r1, r6
 800fea4:	4628      	mov	r0, r5
 800fea6:	47b8      	blx	r7
 800fea8:	3001      	adds	r0, #1
 800feaa:	f43f ae74 	beq.w	800fb96 <_printf_float+0xbe>
 800feae:	ee18 3a10 	vmov	r3, s16
 800feb2:	4652      	mov	r2, sl
 800feb4:	4631      	mov	r1, r6
 800feb6:	4628      	mov	r0, r5
 800feb8:	47b8      	blx	r7
 800feba:	3001      	adds	r0, #1
 800febc:	f43f ae6b 	beq.w	800fb96 <_printf_float+0xbe>
 800fec0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fec4:	2200      	movs	r2, #0
 800fec6:	2300      	movs	r3, #0
 800fec8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800fecc:	f7f0 fdd4 	bl	8000a78 <__aeabi_dcmpeq>
 800fed0:	b9d8      	cbnz	r0, 800ff0a <_printf_float+0x432>
 800fed2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800fed6:	f108 0201 	add.w	r2, r8, #1
 800feda:	4631      	mov	r1, r6
 800fedc:	4628      	mov	r0, r5
 800fede:	47b8      	blx	r7
 800fee0:	3001      	adds	r0, #1
 800fee2:	d10e      	bne.n	800ff02 <_printf_float+0x42a>
 800fee4:	e657      	b.n	800fb96 <_printf_float+0xbe>
 800fee6:	2301      	movs	r3, #1
 800fee8:	4652      	mov	r2, sl
 800feea:	4631      	mov	r1, r6
 800feec:	4628      	mov	r0, r5
 800feee:	47b8      	blx	r7
 800fef0:	3001      	adds	r0, #1
 800fef2:	f43f ae50 	beq.w	800fb96 <_printf_float+0xbe>
 800fef6:	f108 0801 	add.w	r8, r8, #1
 800fefa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fefc:	3b01      	subs	r3, #1
 800fefe:	4543      	cmp	r3, r8
 800ff00:	dcf1      	bgt.n	800fee6 <_printf_float+0x40e>
 800ff02:	464b      	mov	r3, r9
 800ff04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ff08:	e6da      	b.n	800fcc0 <_printf_float+0x1e8>
 800ff0a:	f04f 0800 	mov.w	r8, #0
 800ff0e:	f104 0a1a 	add.w	sl, r4, #26
 800ff12:	e7f2      	b.n	800fefa <_printf_float+0x422>
 800ff14:	2301      	movs	r3, #1
 800ff16:	4642      	mov	r2, r8
 800ff18:	e7df      	b.n	800feda <_printf_float+0x402>
 800ff1a:	2301      	movs	r3, #1
 800ff1c:	464a      	mov	r2, r9
 800ff1e:	4631      	mov	r1, r6
 800ff20:	4628      	mov	r0, r5
 800ff22:	47b8      	blx	r7
 800ff24:	3001      	adds	r0, #1
 800ff26:	f43f ae36 	beq.w	800fb96 <_printf_float+0xbe>
 800ff2a:	f108 0801 	add.w	r8, r8, #1
 800ff2e:	68e3      	ldr	r3, [r4, #12]
 800ff30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ff32:	1a5b      	subs	r3, r3, r1
 800ff34:	4543      	cmp	r3, r8
 800ff36:	dcf0      	bgt.n	800ff1a <_printf_float+0x442>
 800ff38:	e6f8      	b.n	800fd2c <_printf_float+0x254>
 800ff3a:	f04f 0800 	mov.w	r8, #0
 800ff3e:	f104 0919 	add.w	r9, r4, #25
 800ff42:	e7f4      	b.n	800ff2e <_printf_float+0x456>

0800ff44 <_printf_common>:
 800ff44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff48:	4616      	mov	r6, r2
 800ff4a:	4699      	mov	r9, r3
 800ff4c:	688a      	ldr	r2, [r1, #8]
 800ff4e:	690b      	ldr	r3, [r1, #16]
 800ff50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ff54:	4293      	cmp	r3, r2
 800ff56:	bfb8      	it	lt
 800ff58:	4613      	movlt	r3, r2
 800ff5a:	6033      	str	r3, [r6, #0]
 800ff5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ff60:	4607      	mov	r7, r0
 800ff62:	460c      	mov	r4, r1
 800ff64:	b10a      	cbz	r2, 800ff6a <_printf_common+0x26>
 800ff66:	3301      	adds	r3, #1
 800ff68:	6033      	str	r3, [r6, #0]
 800ff6a:	6823      	ldr	r3, [r4, #0]
 800ff6c:	0699      	lsls	r1, r3, #26
 800ff6e:	bf42      	ittt	mi
 800ff70:	6833      	ldrmi	r3, [r6, #0]
 800ff72:	3302      	addmi	r3, #2
 800ff74:	6033      	strmi	r3, [r6, #0]
 800ff76:	6825      	ldr	r5, [r4, #0]
 800ff78:	f015 0506 	ands.w	r5, r5, #6
 800ff7c:	d106      	bne.n	800ff8c <_printf_common+0x48>
 800ff7e:	f104 0a19 	add.w	sl, r4, #25
 800ff82:	68e3      	ldr	r3, [r4, #12]
 800ff84:	6832      	ldr	r2, [r6, #0]
 800ff86:	1a9b      	subs	r3, r3, r2
 800ff88:	42ab      	cmp	r3, r5
 800ff8a:	dc26      	bgt.n	800ffda <_printf_common+0x96>
 800ff8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ff90:	1e13      	subs	r3, r2, #0
 800ff92:	6822      	ldr	r2, [r4, #0]
 800ff94:	bf18      	it	ne
 800ff96:	2301      	movne	r3, #1
 800ff98:	0692      	lsls	r2, r2, #26
 800ff9a:	d42b      	bmi.n	800fff4 <_printf_common+0xb0>
 800ff9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ffa0:	4649      	mov	r1, r9
 800ffa2:	4638      	mov	r0, r7
 800ffa4:	47c0      	blx	r8
 800ffa6:	3001      	adds	r0, #1
 800ffa8:	d01e      	beq.n	800ffe8 <_printf_common+0xa4>
 800ffaa:	6823      	ldr	r3, [r4, #0]
 800ffac:	6922      	ldr	r2, [r4, #16]
 800ffae:	f003 0306 	and.w	r3, r3, #6
 800ffb2:	2b04      	cmp	r3, #4
 800ffb4:	bf02      	ittt	eq
 800ffb6:	68e5      	ldreq	r5, [r4, #12]
 800ffb8:	6833      	ldreq	r3, [r6, #0]
 800ffba:	1aed      	subeq	r5, r5, r3
 800ffbc:	68a3      	ldr	r3, [r4, #8]
 800ffbe:	bf0c      	ite	eq
 800ffc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ffc4:	2500      	movne	r5, #0
 800ffc6:	4293      	cmp	r3, r2
 800ffc8:	bfc4      	itt	gt
 800ffca:	1a9b      	subgt	r3, r3, r2
 800ffcc:	18ed      	addgt	r5, r5, r3
 800ffce:	2600      	movs	r6, #0
 800ffd0:	341a      	adds	r4, #26
 800ffd2:	42b5      	cmp	r5, r6
 800ffd4:	d11a      	bne.n	801000c <_printf_common+0xc8>
 800ffd6:	2000      	movs	r0, #0
 800ffd8:	e008      	b.n	800ffec <_printf_common+0xa8>
 800ffda:	2301      	movs	r3, #1
 800ffdc:	4652      	mov	r2, sl
 800ffde:	4649      	mov	r1, r9
 800ffe0:	4638      	mov	r0, r7
 800ffe2:	47c0      	blx	r8
 800ffe4:	3001      	adds	r0, #1
 800ffe6:	d103      	bne.n	800fff0 <_printf_common+0xac>
 800ffe8:	f04f 30ff 	mov.w	r0, #4294967295
 800ffec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fff0:	3501      	adds	r5, #1
 800fff2:	e7c6      	b.n	800ff82 <_printf_common+0x3e>
 800fff4:	18e1      	adds	r1, r4, r3
 800fff6:	1c5a      	adds	r2, r3, #1
 800fff8:	2030      	movs	r0, #48	; 0x30
 800fffa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fffe:	4422      	add	r2, r4
 8010000:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010004:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010008:	3302      	adds	r3, #2
 801000a:	e7c7      	b.n	800ff9c <_printf_common+0x58>
 801000c:	2301      	movs	r3, #1
 801000e:	4622      	mov	r2, r4
 8010010:	4649      	mov	r1, r9
 8010012:	4638      	mov	r0, r7
 8010014:	47c0      	blx	r8
 8010016:	3001      	adds	r0, #1
 8010018:	d0e6      	beq.n	800ffe8 <_printf_common+0xa4>
 801001a:	3601      	adds	r6, #1
 801001c:	e7d9      	b.n	800ffd2 <_printf_common+0x8e>
	...

08010020 <_printf_i>:
 8010020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010024:	7e0f      	ldrb	r7, [r1, #24]
 8010026:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010028:	2f78      	cmp	r7, #120	; 0x78
 801002a:	4691      	mov	r9, r2
 801002c:	4680      	mov	r8, r0
 801002e:	460c      	mov	r4, r1
 8010030:	469a      	mov	sl, r3
 8010032:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010036:	d807      	bhi.n	8010048 <_printf_i+0x28>
 8010038:	2f62      	cmp	r7, #98	; 0x62
 801003a:	d80a      	bhi.n	8010052 <_printf_i+0x32>
 801003c:	2f00      	cmp	r7, #0
 801003e:	f000 80d4 	beq.w	80101ea <_printf_i+0x1ca>
 8010042:	2f58      	cmp	r7, #88	; 0x58
 8010044:	f000 80c0 	beq.w	80101c8 <_printf_i+0x1a8>
 8010048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801004c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010050:	e03a      	b.n	80100c8 <_printf_i+0xa8>
 8010052:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010056:	2b15      	cmp	r3, #21
 8010058:	d8f6      	bhi.n	8010048 <_printf_i+0x28>
 801005a:	a101      	add	r1, pc, #4	; (adr r1, 8010060 <_printf_i+0x40>)
 801005c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010060:	080100b9 	.word	0x080100b9
 8010064:	080100cd 	.word	0x080100cd
 8010068:	08010049 	.word	0x08010049
 801006c:	08010049 	.word	0x08010049
 8010070:	08010049 	.word	0x08010049
 8010074:	08010049 	.word	0x08010049
 8010078:	080100cd 	.word	0x080100cd
 801007c:	08010049 	.word	0x08010049
 8010080:	08010049 	.word	0x08010049
 8010084:	08010049 	.word	0x08010049
 8010088:	08010049 	.word	0x08010049
 801008c:	080101d1 	.word	0x080101d1
 8010090:	080100f9 	.word	0x080100f9
 8010094:	0801018b 	.word	0x0801018b
 8010098:	08010049 	.word	0x08010049
 801009c:	08010049 	.word	0x08010049
 80100a0:	080101f3 	.word	0x080101f3
 80100a4:	08010049 	.word	0x08010049
 80100a8:	080100f9 	.word	0x080100f9
 80100ac:	08010049 	.word	0x08010049
 80100b0:	08010049 	.word	0x08010049
 80100b4:	08010193 	.word	0x08010193
 80100b8:	682b      	ldr	r3, [r5, #0]
 80100ba:	1d1a      	adds	r2, r3, #4
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	602a      	str	r2, [r5, #0]
 80100c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80100c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80100c8:	2301      	movs	r3, #1
 80100ca:	e09f      	b.n	801020c <_printf_i+0x1ec>
 80100cc:	6820      	ldr	r0, [r4, #0]
 80100ce:	682b      	ldr	r3, [r5, #0]
 80100d0:	0607      	lsls	r7, r0, #24
 80100d2:	f103 0104 	add.w	r1, r3, #4
 80100d6:	6029      	str	r1, [r5, #0]
 80100d8:	d501      	bpl.n	80100de <_printf_i+0xbe>
 80100da:	681e      	ldr	r6, [r3, #0]
 80100dc:	e003      	b.n	80100e6 <_printf_i+0xc6>
 80100de:	0646      	lsls	r6, r0, #25
 80100e0:	d5fb      	bpl.n	80100da <_printf_i+0xba>
 80100e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80100e6:	2e00      	cmp	r6, #0
 80100e8:	da03      	bge.n	80100f2 <_printf_i+0xd2>
 80100ea:	232d      	movs	r3, #45	; 0x2d
 80100ec:	4276      	negs	r6, r6
 80100ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80100f2:	485a      	ldr	r0, [pc, #360]	; (801025c <_printf_i+0x23c>)
 80100f4:	230a      	movs	r3, #10
 80100f6:	e012      	b.n	801011e <_printf_i+0xfe>
 80100f8:	682b      	ldr	r3, [r5, #0]
 80100fa:	6820      	ldr	r0, [r4, #0]
 80100fc:	1d19      	adds	r1, r3, #4
 80100fe:	6029      	str	r1, [r5, #0]
 8010100:	0605      	lsls	r5, r0, #24
 8010102:	d501      	bpl.n	8010108 <_printf_i+0xe8>
 8010104:	681e      	ldr	r6, [r3, #0]
 8010106:	e002      	b.n	801010e <_printf_i+0xee>
 8010108:	0641      	lsls	r1, r0, #25
 801010a:	d5fb      	bpl.n	8010104 <_printf_i+0xe4>
 801010c:	881e      	ldrh	r6, [r3, #0]
 801010e:	4853      	ldr	r0, [pc, #332]	; (801025c <_printf_i+0x23c>)
 8010110:	2f6f      	cmp	r7, #111	; 0x6f
 8010112:	bf0c      	ite	eq
 8010114:	2308      	moveq	r3, #8
 8010116:	230a      	movne	r3, #10
 8010118:	2100      	movs	r1, #0
 801011a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801011e:	6865      	ldr	r5, [r4, #4]
 8010120:	60a5      	str	r5, [r4, #8]
 8010122:	2d00      	cmp	r5, #0
 8010124:	bfa2      	ittt	ge
 8010126:	6821      	ldrge	r1, [r4, #0]
 8010128:	f021 0104 	bicge.w	r1, r1, #4
 801012c:	6021      	strge	r1, [r4, #0]
 801012e:	b90e      	cbnz	r6, 8010134 <_printf_i+0x114>
 8010130:	2d00      	cmp	r5, #0
 8010132:	d04b      	beq.n	80101cc <_printf_i+0x1ac>
 8010134:	4615      	mov	r5, r2
 8010136:	fbb6 f1f3 	udiv	r1, r6, r3
 801013a:	fb03 6711 	mls	r7, r3, r1, r6
 801013e:	5dc7      	ldrb	r7, [r0, r7]
 8010140:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010144:	4637      	mov	r7, r6
 8010146:	42bb      	cmp	r3, r7
 8010148:	460e      	mov	r6, r1
 801014a:	d9f4      	bls.n	8010136 <_printf_i+0x116>
 801014c:	2b08      	cmp	r3, #8
 801014e:	d10b      	bne.n	8010168 <_printf_i+0x148>
 8010150:	6823      	ldr	r3, [r4, #0]
 8010152:	07de      	lsls	r6, r3, #31
 8010154:	d508      	bpl.n	8010168 <_printf_i+0x148>
 8010156:	6923      	ldr	r3, [r4, #16]
 8010158:	6861      	ldr	r1, [r4, #4]
 801015a:	4299      	cmp	r1, r3
 801015c:	bfde      	ittt	le
 801015e:	2330      	movle	r3, #48	; 0x30
 8010160:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010164:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010168:	1b52      	subs	r2, r2, r5
 801016a:	6122      	str	r2, [r4, #16]
 801016c:	f8cd a000 	str.w	sl, [sp]
 8010170:	464b      	mov	r3, r9
 8010172:	aa03      	add	r2, sp, #12
 8010174:	4621      	mov	r1, r4
 8010176:	4640      	mov	r0, r8
 8010178:	f7ff fee4 	bl	800ff44 <_printf_common>
 801017c:	3001      	adds	r0, #1
 801017e:	d14a      	bne.n	8010216 <_printf_i+0x1f6>
 8010180:	f04f 30ff 	mov.w	r0, #4294967295
 8010184:	b004      	add	sp, #16
 8010186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801018a:	6823      	ldr	r3, [r4, #0]
 801018c:	f043 0320 	orr.w	r3, r3, #32
 8010190:	6023      	str	r3, [r4, #0]
 8010192:	4833      	ldr	r0, [pc, #204]	; (8010260 <_printf_i+0x240>)
 8010194:	2778      	movs	r7, #120	; 0x78
 8010196:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801019a:	6823      	ldr	r3, [r4, #0]
 801019c:	6829      	ldr	r1, [r5, #0]
 801019e:	061f      	lsls	r7, r3, #24
 80101a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80101a4:	d402      	bmi.n	80101ac <_printf_i+0x18c>
 80101a6:	065f      	lsls	r7, r3, #25
 80101a8:	bf48      	it	mi
 80101aa:	b2b6      	uxthmi	r6, r6
 80101ac:	07df      	lsls	r7, r3, #31
 80101ae:	bf48      	it	mi
 80101b0:	f043 0320 	orrmi.w	r3, r3, #32
 80101b4:	6029      	str	r1, [r5, #0]
 80101b6:	bf48      	it	mi
 80101b8:	6023      	strmi	r3, [r4, #0]
 80101ba:	b91e      	cbnz	r6, 80101c4 <_printf_i+0x1a4>
 80101bc:	6823      	ldr	r3, [r4, #0]
 80101be:	f023 0320 	bic.w	r3, r3, #32
 80101c2:	6023      	str	r3, [r4, #0]
 80101c4:	2310      	movs	r3, #16
 80101c6:	e7a7      	b.n	8010118 <_printf_i+0xf8>
 80101c8:	4824      	ldr	r0, [pc, #144]	; (801025c <_printf_i+0x23c>)
 80101ca:	e7e4      	b.n	8010196 <_printf_i+0x176>
 80101cc:	4615      	mov	r5, r2
 80101ce:	e7bd      	b.n	801014c <_printf_i+0x12c>
 80101d0:	682b      	ldr	r3, [r5, #0]
 80101d2:	6826      	ldr	r6, [r4, #0]
 80101d4:	6961      	ldr	r1, [r4, #20]
 80101d6:	1d18      	adds	r0, r3, #4
 80101d8:	6028      	str	r0, [r5, #0]
 80101da:	0635      	lsls	r5, r6, #24
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	d501      	bpl.n	80101e4 <_printf_i+0x1c4>
 80101e0:	6019      	str	r1, [r3, #0]
 80101e2:	e002      	b.n	80101ea <_printf_i+0x1ca>
 80101e4:	0670      	lsls	r0, r6, #25
 80101e6:	d5fb      	bpl.n	80101e0 <_printf_i+0x1c0>
 80101e8:	8019      	strh	r1, [r3, #0]
 80101ea:	2300      	movs	r3, #0
 80101ec:	6123      	str	r3, [r4, #16]
 80101ee:	4615      	mov	r5, r2
 80101f0:	e7bc      	b.n	801016c <_printf_i+0x14c>
 80101f2:	682b      	ldr	r3, [r5, #0]
 80101f4:	1d1a      	adds	r2, r3, #4
 80101f6:	602a      	str	r2, [r5, #0]
 80101f8:	681d      	ldr	r5, [r3, #0]
 80101fa:	6862      	ldr	r2, [r4, #4]
 80101fc:	2100      	movs	r1, #0
 80101fe:	4628      	mov	r0, r5
 8010200:	f7ef ffbe 	bl	8000180 <memchr>
 8010204:	b108      	cbz	r0, 801020a <_printf_i+0x1ea>
 8010206:	1b40      	subs	r0, r0, r5
 8010208:	6060      	str	r0, [r4, #4]
 801020a:	6863      	ldr	r3, [r4, #4]
 801020c:	6123      	str	r3, [r4, #16]
 801020e:	2300      	movs	r3, #0
 8010210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010214:	e7aa      	b.n	801016c <_printf_i+0x14c>
 8010216:	6923      	ldr	r3, [r4, #16]
 8010218:	462a      	mov	r2, r5
 801021a:	4649      	mov	r1, r9
 801021c:	4640      	mov	r0, r8
 801021e:	47d0      	blx	sl
 8010220:	3001      	adds	r0, #1
 8010222:	d0ad      	beq.n	8010180 <_printf_i+0x160>
 8010224:	6823      	ldr	r3, [r4, #0]
 8010226:	079b      	lsls	r3, r3, #30
 8010228:	d413      	bmi.n	8010252 <_printf_i+0x232>
 801022a:	68e0      	ldr	r0, [r4, #12]
 801022c:	9b03      	ldr	r3, [sp, #12]
 801022e:	4298      	cmp	r0, r3
 8010230:	bfb8      	it	lt
 8010232:	4618      	movlt	r0, r3
 8010234:	e7a6      	b.n	8010184 <_printf_i+0x164>
 8010236:	2301      	movs	r3, #1
 8010238:	4632      	mov	r2, r6
 801023a:	4649      	mov	r1, r9
 801023c:	4640      	mov	r0, r8
 801023e:	47d0      	blx	sl
 8010240:	3001      	adds	r0, #1
 8010242:	d09d      	beq.n	8010180 <_printf_i+0x160>
 8010244:	3501      	adds	r5, #1
 8010246:	68e3      	ldr	r3, [r4, #12]
 8010248:	9903      	ldr	r1, [sp, #12]
 801024a:	1a5b      	subs	r3, r3, r1
 801024c:	42ab      	cmp	r3, r5
 801024e:	dcf2      	bgt.n	8010236 <_printf_i+0x216>
 8010250:	e7eb      	b.n	801022a <_printf_i+0x20a>
 8010252:	2500      	movs	r5, #0
 8010254:	f104 0619 	add.w	r6, r4, #25
 8010258:	e7f5      	b.n	8010246 <_printf_i+0x226>
 801025a:	bf00      	nop
 801025c:	080141f6 	.word	0x080141f6
 8010260:	08014207 	.word	0x08014207

08010264 <std>:
 8010264:	2300      	movs	r3, #0
 8010266:	b510      	push	{r4, lr}
 8010268:	4604      	mov	r4, r0
 801026a:	e9c0 3300 	strd	r3, r3, [r0]
 801026e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010272:	6083      	str	r3, [r0, #8]
 8010274:	8181      	strh	r1, [r0, #12]
 8010276:	6643      	str	r3, [r0, #100]	; 0x64
 8010278:	81c2      	strh	r2, [r0, #14]
 801027a:	6183      	str	r3, [r0, #24]
 801027c:	4619      	mov	r1, r3
 801027e:	2208      	movs	r2, #8
 8010280:	305c      	adds	r0, #92	; 0x5c
 8010282:	f000 f92d 	bl	80104e0 <memset>
 8010286:	4b0d      	ldr	r3, [pc, #52]	; (80102bc <std+0x58>)
 8010288:	6263      	str	r3, [r4, #36]	; 0x24
 801028a:	4b0d      	ldr	r3, [pc, #52]	; (80102c0 <std+0x5c>)
 801028c:	62a3      	str	r3, [r4, #40]	; 0x28
 801028e:	4b0d      	ldr	r3, [pc, #52]	; (80102c4 <std+0x60>)
 8010290:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010292:	4b0d      	ldr	r3, [pc, #52]	; (80102c8 <std+0x64>)
 8010294:	6323      	str	r3, [r4, #48]	; 0x30
 8010296:	4b0d      	ldr	r3, [pc, #52]	; (80102cc <std+0x68>)
 8010298:	6224      	str	r4, [r4, #32]
 801029a:	429c      	cmp	r4, r3
 801029c:	d006      	beq.n	80102ac <std+0x48>
 801029e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80102a2:	4294      	cmp	r4, r2
 80102a4:	d002      	beq.n	80102ac <std+0x48>
 80102a6:	33d0      	adds	r3, #208	; 0xd0
 80102a8:	429c      	cmp	r4, r3
 80102aa:	d105      	bne.n	80102b8 <std+0x54>
 80102ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80102b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102b4:	f000 b990 	b.w	80105d8 <__retarget_lock_init_recursive>
 80102b8:	bd10      	pop	{r4, pc}
 80102ba:	bf00      	nop
 80102bc:	080103e9 	.word	0x080103e9
 80102c0:	0801040b 	.word	0x0801040b
 80102c4:	08010443 	.word	0x08010443
 80102c8:	08010467 	.word	0x08010467
 80102cc:	20001824 	.word	0x20001824

080102d0 <stdio_exit_handler>:
 80102d0:	4a02      	ldr	r2, [pc, #8]	; (80102dc <stdio_exit_handler+0xc>)
 80102d2:	4903      	ldr	r1, [pc, #12]	; (80102e0 <stdio_exit_handler+0x10>)
 80102d4:	4803      	ldr	r0, [pc, #12]	; (80102e4 <stdio_exit_handler+0x14>)
 80102d6:	f000 b869 	b.w	80103ac <_fwalk_sglue>
 80102da:	bf00      	nop
 80102dc:	20000178 	.word	0x20000178
 80102e0:	08012231 	.word	0x08012231
 80102e4:	20000184 	.word	0x20000184

080102e8 <cleanup_stdio>:
 80102e8:	6841      	ldr	r1, [r0, #4]
 80102ea:	4b0c      	ldr	r3, [pc, #48]	; (801031c <cleanup_stdio+0x34>)
 80102ec:	4299      	cmp	r1, r3
 80102ee:	b510      	push	{r4, lr}
 80102f0:	4604      	mov	r4, r0
 80102f2:	d001      	beq.n	80102f8 <cleanup_stdio+0x10>
 80102f4:	f001 ff9c 	bl	8012230 <_fflush_r>
 80102f8:	68a1      	ldr	r1, [r4, #8]
 80102fa:	4b09      	ldr	r3, [pc, #36]	; (8010320 <cleanup_stdio+0x38>)
 80102fc:	4299      	cmp	r1, r3
 80102fe:	d002      	beq.n	8010306 <cleanup_stdio+0x1e>
 8010300:	4620      	mov	r0, r4
 8010302:	f001 ff95 	bl	8012230 <_fflush_r>
 8010306:	68e1      	ldr	r1, [r4, #12]
 8010308:	4b06      	ldr	r3, [pc, #24]	; (8010324 <cleanup_stdio+0x3c>)
 801030a:	4299      	cmp	r1, r3
 801030c:	d004      	beq.n	8010318 <cleanup_stdio+0x30>
 801030e:	4620      	mov	r0, r4
 8010310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010314:	f001 bf8c 	b.w	8012230 <_fflush_r>
 8010318:	bd10      	pop	{r4, pc}
 801031a:	bf00      	nop
 801031c:	20001824 	.word	0x20001824
 8010320:	2000188c 	.word	0x2000188c
 8010324:	200018f4 	.word	0x200018f4

08010328 <global_stdio_init.part.0>:
 8010328:	b510      	push	{r4, lr}
 801032a:	4b0b      	ldr	r3, [pc, #44]	; (8010358 <global_stdio_init.part.0+0x30>)
 801032c:	4c0b      	ldr	r4, [pc, #44]	; (801035c <global_stdio_init.part.0+0x34>)
 801032e:	4a0c      	ldr	r2, [pc, #48]	; (8010360 <global_stdio_init.part.0+0x38>)
 8010330:	601a      	str	r2, [r3, #0]
 8010332:	4620      	mov	r0, r4
 8010334:	2200      	movs	r2, #0
 8010336:	2104      	movs	r1, #4
 8010338:	f7ff ff94 	bl	8010264 <std>
 801033c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010340:	2201      	movs	r2, #1
 8010342:	2109      	movs	r1, #9
 8010344:	f7ff ff8e 	bl	8010264 <std>
 8010348:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801034c:	2202      	movs	r2, #2
 801034e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010352:	2112      	movs	r1, #18
 8010354:	f7ff bf86 	b.w	8010264 <std>
 8010358:	2000195c 	.word	0x2000195c
 801035c:	20001824 	.word	0x20001824
 8010360:	080102d1 	.word	0x080102d1

08010364 <__sfp_lock_acquire>:
 8010364:	4801      	ldr	r0, [pc, #4]	; (801036c <__sfp_lock_acquire+0x8>)
 8010366:	f000 b938 	b.w	80105da <__retarget_lock_acquire_recursive>
 801036a:	bf00      	nop
 801036c:	20001965 	.word	0x20001965

08010370 <__sfp_lock_release>:
 8010370:	4801      	ldr	r0, [pc, #4]	; (8010378 <__sfp_lock_release+0x8>)
 8010372:	f000 b933 	b.w	80105dc <__retarget_lock_release_recursive>
 8010376:	bf00      	nop
 8010378:	20001965 	.word	0x20001965

0801037c <__sinit>:
 801037c:	b510      	push	{r4, lr}
 801037e:	4604      	mov	r4, r0
 8010380:	f7ff fff0 	bl	8010364 <__sfp_lock_acquire>
 8010384:	6a23      	ldr	r3, [r4, #32]
 8010386:	b11b      	cbz	r3, 8010390 <__sinit+0x14>
 8010388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801038c:	f7ff bff0 	b.w	8010370 <__sfp_lock_release>
 8010390:	4b04      	ldr	r3, [pc, #16]	; (80103a4 <__sinit+0x28>)
 8010392:	6223      	str	r3, [r4, #32]
 8010394:	4b04      	ldr	r3, [pc, #16]	; (80103a8 <__sinit+0x2c>)
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d1f5      	bne.n	8010388 <__sinit+0xc>
 801039c:	f7ff ffc4 	bl	8010328 <global_stdio_init.part.0>
 80103a0:	e7f2      	b.n	8010388 <__sinit+0xc>
 80103a2:	bf00      	nop
 80103a4:	080102e9 	.word	0x080102e9
 80103a8:	2000195c 	.word	0x2000195c

080103ac <_fwalk_sglue>:
 80103ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103b0:	4607      	mov	r7, r0
 80103b2:	4688      	mov	r8, r1
 80103b4:	4614      	mov	r4, r2
 80103b6:	2600      	movs	r6, #0
 80103b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80103bc:	f1b9 0901 	subs.w	r9, r9, #1
 80103c0:	d505      	bpl.n	80103ce <_fwalk_sglue+0x22>
 80103c2:	6824      	ldr	r4, [r4, #0]
 80103c4:	2c00      	cmp	r4, #0
 80103c6:	d1f7      	bne.n	80103b8 <_fwalk_sglue+0xc>
 80103c8:	4630      	mov	r0, r6
 80103ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103ce:	89ab      	ldrh	r3, [r5, #12]
 80103d0:	2b01      	cmp	r3, #1
 80103d2:	d907      	bls.n	80103e4 <_fwalk_sglue+0x38>
 80103d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80103d8:	3301      	adds	r3, #1
 80103da:	d003      	beq.n	80103e4 <_fwalk_sglue+0x38>
 80103dc:	4629      	mov	r1, r5
 80103de:	4638      	mov	r0, r7
 80103e0:	47c0      	blx	r8
 80103e2:	4306      	orrs	r6, r0
 80103e4:	3568      	adds	r5, #104	; 0x68
 80103e6:	e7e9      	b.n	80103bc <_fwalk_sglue+0x10>

080103e8 <__sread>:
 80103e8:	b510      	push	{r4, lr}
 80103ea:	460c      	mov	r4, r1
 80103ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103f0:	f000 f8a4 	bl	801053c <_read_r>
 80103f4:	2800      	cmp	r0, #0
 80103f6:	bfab      	itete	ge
 80103f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80103fa:	89a3      	ldrhlt	r3, [r4, #12]
 80103fc:	181b      	addge	r3, r3, r0
 80103fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010402:	bfac      	ite	ge
 8010404:	6563      	strge	r3, [r4, #84]	; 0x54
 8010406:	81a3      	strhlt	r3, [r4, #12]
 8010408:	bd10      	pop	{r4, pc}

0801040a <__swrite>:
 801040a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801040e:	461f      	mov	r7, r3
 8010410:	898b      	ldrh	r3, [r1, #12]
 8010412:	05db      	lsls	r3, r3, #23
 8010414:	4605      	mov	r5, r0
 8010416:	460c      	mov	r4, r1
 8010418:	4616      	mov	r6, r2
 801041a:	d505      	bpl.n	8010428 <__swrite+0x1e>
 801041c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010420:	2302      	movs	r3, #2
 8010422:	2200      	movs	r2, #0
 8010424:	f000 f878 	bl	8010518 <_lseek_r>
 8010428:	89a3      	ldrh	r3, [r4, #12]
 801042a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801042e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010432:	81a3      	strh	r3, [r4, #12]
 8010434:	4632      	mov	r2, r6
 8010436:	463b      	mov	r3, r7
 8010438:	4628      	mov	r0, r5
 801043a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801043e:	f000 b88f 	b.w	8010560 <_write_r>

08010442 <__sseek>:
 8010442:	b510      	push	{r4, lr}
 8010444:	460c      	mov	r4, r1
 8010446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801044a:	f000 f865 	bl	8010518 <_lseek_r>
 801044e:	1c43      	adds	r3, r0, #1
 8010450:	89a3      	ldrh	r3, [r4, #12]
 8010452:	bf15      	itete	ne
 8010454:	6560      	strne	r0, [r4, #84]	; 0x54
 8010456:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801045a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801045e:	81a3      	strheq	r3, [r4, #12]
 8010460:	bf18      	it	ne
 8010462:	81a3      	strhne	r3, [r4, #12]
 8010464:	bd10      	pop	{r4, pc}

08010466 <__sclose>:
 8010466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801046a:	f000 b845 	b.w	80104f8 <_close_r>

0801046e <_vsniprintf_r>:
 801046e:	b530      	push	{r4, r5, lr}
 8010470:	4614      	mov	r4, r2
 8010472:	2c00      	cmp	r4, #0
 8010474:	b09b      	sub	sp, #108	; 0x6c
 8010476:	4605      	mov	r5, r0
 8010478:	461a      	mov	r2, r3
 801047a:	da05      	bge.n	8010488 <_vsniprintf_r+0x1a>
 801047c:	238b      	movs	r3, #139	; 0x8b
 801047e:	6003      	str	r3, [r0, #0]
 8010480:	f04f 30ff 	mov.w	r0, #4294967295
 8010484:	b01b      	add	sp, #108	; 0x6c
 8010486:	bd30      	pop	{r4, r5, pc}
 8010488:	f44f 7302 	mov.w	r3, #520	; 0x208
 801048c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010490:	bf14      	ite	ne
 8010492:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010496:	4623      	moveq	r3, r4
 8010498:	9302      	str	r3, [sp, #8]
 801049a:	9305      	str	r3, [sp, #20]
 801049c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80104a0:	9100      	str	r1, [sp, #0]
 80104a2:	9104      	str	r1, [sp, #16]
 80104a4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80104a8:	4669      	mov	r1, sp
 80104aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80104ac:	f001 fbf8 	bl	8011ca0 <_svfiprintf_r>
 80104b0:	1c43      	adds	r3, r0, #1
 80104b2:	bfbc      	itt	lt
 80104b4:	238b      	movlt	r3, #139	; 0x8b
 80104b6:	602b      	strlt	r3, [r5, #0]
 80104b8:	2c00      	cmp	r4, #0
 80104ba:	d0e3      	beq.n	8010484 <_vsniprintf_r+0x16>
 80104bc:	9b00      	ldr	r3, [sp, #0]
 80104be:	2200      	movs	r2, #0
 80104c0:	701a      	strb	r2, [r3, #0]
 80104c2:	e7df      	b.n	8010484 <_vsniprintf_r+0x16>

080104c4 <vsniprintf>:
 80104c4:	b507      	push	{r0, r1, r2, lr}
 80104c6:	9300      	str	r3, [sp, #0]
 80104c8:	4613      	mov	r3, r2
 80104ca:	460a      	mov	r2, r1
 80104cc:	4601      	mov	r1, r0
 80104ce:	4803      	ldr	r0, [pc, #12]	; (80104dc <vsniprintf+0x18>)
 80104d0:	6800      	ldr	r0, [r0, #0]
 80104d2:	f7ff ffcc 	bl	801046e <_vsniprintf_r>
 80104d6:	b003      	add	sp, #12
 80104d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80104dc:	200001d0 	.word	0x200001d0

080104e0 <memset>:
 80104e0:	4402      	add	r2, r0
 80104e2:	4603      	mov	r3, r0
 80104e4:	4293      	cmp	r3, r2
 80104e6:	d100      	bne.n	80104ea <memset+0xa>
 80104e8:	4770      	bx	lr
 80104ea:	f803 1b01 	strb.w	r1, [r3], #1
 80104ee:	e7f9      	b.n	80104e4 <memset+0x4>

080104f0 <_localeconv_r>:
 80104f0:	4800      	ldr	r0, [pc, #0]	; (80104f4 <_localeconv_r+0x4>)
 80104f2:	4770      	bx	lr
 80104f4:	200002c4 	.word	0x200002c4

080104f8 <_close_r>:
 80104f8:	b538      	push	{r3, r4, r5, lr}
 80104fa:	4d06      	ldr	r5, [pc, #24]	; (8010514 <_close_r+0x1c>)
 80104fc:	2300      	movs	r3, #0
 80104fe:	4604      	mov	r4, r0
 8010500:	4608      	mov	r0, r1
 8010502:	602b      	str	r3, [r5, #0]
 8010504:	f7f6 fe87 	bl	8007216 <_close>
 8010508:	1c43      	adds	r3, r0, #1
 801050a:	d102      	bne.n	8010512 <_close_r+0x1a>
 801050c:	682b      	ldr	r3, [r5, #0]
 801050e:	b103      	cbz	r3, 8010512 <_close_r+0x1a>
 8010510:	6023      	str	r3, [r4, #0]
 8010512:	bd38      	pop	{r3, r4, r5, pc}
 8010514:	20001960 	.word	0x20001960

08010518 <_lseek_r>:
 8010518:	b538      	push	{r3, r4, r5, lr}
 801051a:	4d07      	ldr	r5, [pc, #28]	; (8010538 <_lseek_r+0x20>)
 801051c:	4604      	mov	r4, r0
 801051e:	4608      	mov	r0, r1
 8010520:	4611      	mov	r1, r2
 8010522:	2200      	movs	r2, #0
 8010524:	602a      	str	r2, [r5, #0]
 8010526:	461a      	mov	r2, r3
 8010528:	f7f6 fe9c 	bl	8007264 <_lseek>
 801052c:	1c43      	adds	r3, r0, #1
 801052e:	d102      	bne.n	8010536 <_lseek_r+0x1e>
 8010530:	682b      	ldr	r3, [r5, #0]
 8010532:	b103      	cbz	r3, 8010536 <_lseek_r+0x1e>
 8010534:	6023      	str	r3, [r4, #0]
 8010536:	bd38      	pop	{r3, r4, r5, pc}
 8010538:	20001960 	.word	0x20001960

0801053c <_read_r>:
 801053c:	b538      	push	{r3, r4, r5, lr}
 801053e:	4d07      	ldr	r5, [pc, #28]	; (801055c <_read_r+0x20>)
 8010540:	4604      	mov	r4, r0
 8010542:	4608      	mov	r0, r1
 8010544:	4611      	mov	r1, r2
 8010546:	2200      	movs	r2, #0
 8010548:	602a      	str	r2, [r5, #0]
 801054a:	461a      	mov	r2, r3
 801054c:	f7f6 fe2a 	bl	80071a4 <_read>
 8010550:	1c43      	adds	r3, r0, #1
 8010552:	d102      	bne.n	801055a <_read_r+0x1e>
 8010554:	682b      	ldr	r3, [r5, #0]
 8010556:	b103      	cbz	r3, 801055a <_read_r+0x1e>
 8010558:	6023      	str	r3, [r4, #0]
 801055a:	bd38      	pop	{r3, r4, r5, pc}
 801055c:	20001960 	.word	0x20001960

08010560 <_write_r>:
 8010560:	b538      	push	{r3, r4, r5, lr}
 8010562:	4d07      	ldr	r5, [pc, #28]	; (8010580 <_write_r+0x20>)
 8010564:	4604      	mov	r4, r0
 8010566:	4608      	mov	r0, r1
 8010568:	4611      	mov	r1, r2
 801056a:	2200      	movs	r2, #0
 801056c:	602a      	str	r2, [r5, #0]
 801056e:	461a      	mov	r2, r3
 8010570:	f7f6 fe35 	bl	80071de <_write>
 8010574:	1c43      	adds	r3, r0, #1
 8010576:	d102      	bne.n	801057e <_write_r+0x1e>
 8010578:	682b      	ldr	r3, [r5, #0]
 801057a:	b103      	cbz	r3, 801057e <_write_r+0x1e>
 801057c:	6023      	str	r3, [r4, #0]
 801057e:	bd38      	pop	{r3, r4, r5, pc}
 8010580:	20001960 	.word	0x20001960

08010584 <__errno>:
 8010584:	4b01      	ldr	r3, [pc, #4]	; (801058c <__errno+0x8>)
 8010586:	6818      	ldr	r0, [r3, #0]
 8010588:	4770      	bx	lr
 801058a:	bf00      	nop
 801058c:	200001d0 	.word	0x200001d0

08010590 <__libc_init_array>:
 8010590:	b570      	push	{r4, r5, r6, lr}
 8010592:	4d0d      	ldr	r5, [pc, #52]	; (80105c8 <__libc_init_array+0x38>)
 8010594:	4c0d      	ldr	r4, [pc, #52]	; (80105cc <__libc_init_array+0x3c>)
 8010596:	1b64      	subs	r4, r4, r5
 8010598:	10a4      	asrs	r4, r4, #2
 801059a:	2600      	movs	r6, #0
 801059c:	42a6      	cmp	r6, r4
 801059e:	d109      	bne.n	80105b4 <__libc_init_array+0x24>
 80105a0:	4d0b      	ldr	r5, [pc, #44]	; (80105d0 <__libc_init_array+0x40>)
 80105a2:	4c0c      	ldr	r4, [pc, #48]	; (80105d4 <__libc_init_array+0x44>)
 80105a4:	f002 ffd0 	bl	8013548 <_init>
 80105a8:	1b64      	subs	r4, r4, r5
 80105aa:	10a4      	asrs	r4, r4, #2
 80105ac:	2600      	movs	r6, #0
 80105ae:	42a6      	cmp	r6, r4
 80105b0:	d105      	bne.n	80105be <__libc_init_array+0x2e>
 80105b2:	bd70      	pop	{r4, r5, r6, pc}
 80105b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80105b8:	4798      	blx	r3
 80105ba:	3601      	adds	r6, #1
 80105bc:	e7ee      	b.n	801059c <__libc_init_array+0xc>
 80105be:	f855 3b04 	ldr.w	r3, [r5], #4
 80105c2:	4798      	blx	r3
 80105c4:	3601      	adds	r6, #1
 80105c6:	e7f2      	b.n	80105ae <__libc_init_array+0x1e>
 80105c8:	08014590 	.word	0x08014590
 80105cc:	08014590 	.word	0x08014590
 80105d0:	08014590 	.word	0x08014590
 80105d4:	08014594 	.word	0x08014594

080105d8 <__retarget_lock_init_recursive>:
 80105d8:	4770      	bx	lr

080105da <__retarget_lock_acquire_recursive>:
 80105da:	4770      	bx	lr

080105dc <__retarget_lock_release_recursive>:
 80105dc:	4770      	bx	lr

080105de <memcpy>:
 80105de:	440a      	add	r2, r1
 80105e0:	4291      	cmp	r1, r2
 80105e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80105e6:	d100      	bne.n	80105ea <memcpy+0xc>
 80105e8:	4770      	bx	lr
 80105ea:	b510      	push	{r4, lr}
 80105ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80105f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80105f4:	4291      	cmp	r1, r2
 80105f6:	d1f9      	bne.n	80105ec <memcpy+0xe>
 80105f8:	bd10      	pop	{r4, pc}

080105fa <quorem>:
 80105fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105fe:	6903      	ldr	r3, [r0, #16]
 8010600:	690c      	ldr	r4, [r1, #16]
 8010602:	42a3      	cmp	r3, r4
 8010604:	4607      	mov	r7, r0
 8010606:	db7e      	blt.n	8010706 <quorem+0x10c>
 8010608:	3c01      	subs	r4, #1
 801060a:	f101 0814 	add.w	r8, r1, #20
 801060e:	f100 0514 	add.w	r5, r0, #20
 8010612:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010616:	9301      	str	r3, [sp, #4]
 8010618:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801061c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010620:	3301      	adds	r3, #1
 8010622:	429a      	cmp	r2, r3
 8010624:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010628:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801062c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010630:	d331      	bcc.n	8010696 <quorem+0x9c>
 8010632:	f04f 0e00 	mov.w	lr, #0
 8010636:	4640      	mov	r0, r8
 8010638:	46ac      	mov	ip, r5
 801063a:	46f2      	mov	sl, lr
 801063c:	f850 2b04 	ldr.w	r2, [r0], #4
 8010640:	b293      	uxth	r3, r2
 8010642:	fb06 e303 	mla	r3, r6, r3, lr
 8010646:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801064a:	0c1a      	lsrs	r2, r3, #16
 801064c:	b29b      	uxth	r3, r3
 801064e:	ebaa 0303 	sub.w	r3, sl, r3
 8010652:	f8dc a000 	ldr.w	sl, [ip]
 8010656:	fa13 f38a 	uxtah	r3, r3, sl
 801065a:	fb06 220e 	mla	r2, r6, lr, r2
 801065e:	9300      	str	r3, [sp, #0]
 8010660:	9b00      	ldr	r3, [sp, #0]
 8010662:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010666:	b292      	uxth	r2, r2
 8010668:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801066c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010670:	f8bd 3000 	ldrh.w	r3, [sp]
 8010674:	4581      	cmp	r9, r0
 8010676:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801067a:	f84c 3b04 	str.w	r3, [ip], #4
 801067e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010682:	d2db      	bcs.n	801063c <quorem+0x42>
 8010684:	f855 300b 	ldr.w	r3, [r5, fp]
 8010688:	b92b      	cbnz	r3, 8010696 <quorem+0x9c>
 801068a:	9b01      	ldr	r3, [sp, #4]
 801068c:	3b04      	subs	r3, #4
 801068e:	429d      	cmp	r5, r3
 8010690:	461a      	mov	r2, r3
 8010692:	d32c      	bcc.n	80106ee <quorem+0xf4>
 8010694:	613c      	str	r4, [r7, #16]
 8010696:	4638      	mov	r0, r7
 8010698:	f001 f9a8 	bl	80119ec <__mcmp>
 801069c:	2800      	cmp	r0, #0
 801069e:	db22      	blt.n	80106e6 <quorem+0xec>
 80106a0:	3601      	adds	r6, #1
 80106a2:	4629      	mov	r1, r5
 80106a4:	2000      	movs	r0, #0
 80106a6:	f858 2b04 	ldr.w	r2, [r8], #4
 80106aa:	f8d1 c000 	ldr.w	ip, [r1]
 80106ae:	b293      	uxth	r3, r2
 80106b0:	1ac3      	subs	r3, r0, r3
 80106b2:	0c12      	lsrs	r2, r2, #16
 80106b4:	fa13 f38c 	uxtah	r3, r3, ip
 80106b8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80106bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80106c0:	b29b      	uxth	r3, r3
 80106c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80106c6:	45c1      	cmp	r9, r8
 80106c8:	f841 3b04 	str.w	r3, [r1], #4
 80106cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80106d0:	d2e9      	bcs.n	80106a6 <quorem+0xac>
 80106d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80106d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80106da:	b922      	cbnz	r2, 80106e6 <quorem+0xec>
 80106dc:	3b04      	subs	r3, #4
 80106de:	429d      	cmp	r5, r3
 80106e0:	461a      	mov	r2, r3
 80106e2:	d30a      	bcc.n	80106fa <quorem+0x100>
 80106e4:	613c      	str	r4, [r7, #16]
 80106e6:	4630      	mov	r0, r6
 80106e8:	b003      	add	sp, #12
 80106ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106ee:	6812      	ldr	r2, [r2, #0]
 80106f0:	3b04      	subs	r3, #4
 80106f2:	2a00      	cmp	r2, #0
 80106f4:	d1ce      	bne.n	8010694 <quorem+0x9a>
 80106f6:	3c01      	subs	r4, #1
 80106f8:	e7c9      	b.n	801068e <quorem+0x94>
 80106fa:	6812      	ldr	r2, [r2, #0]
 80106fc:	3b04      	subs	r3, #4
 80106fe:	2a00      	cmp	r2, #0
 8010700:	d1f0      	bne.n	80106e4 <quorem+0xea>
 8010702:	3c01      	subs	r4, #1
 8010704:	e7eb      	b.n	80106de <quorem+0xe4>
 8010706:	2000      	movs	r0, #0
 8010708:	e7ee      	b.n	80106e8 <quorem+0xee>
 801070a:	0000      	movs	r0, r0
 801070c:	0000      	movs	r0, r0
	...

08010710 <_dtoa_r>:
 8010710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010714:	ed2d 8b04 	vpush	{d8-d9}
 8010718:	69c5      	ldr	r5, [r0, #28]
 801071a:	b093      	sub	sp, #76	; 0x4c
 801071c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010720:	ec57 6b10 	vmov	r6, r7, d0
 8010724:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010728:	9107      	str	r1, [sp, #28]
 801072a:	4604      	mov	r4, r0
 801072c:	920a      	str	r2, [sp, #40]	; 0x28
 801072e:	930d      	str	r3, [sp, #52]	; 0x34
 8010730:	b975      	cbnz	r5, 8010750 <_dtoa_r+0x40>
 8010732:	2010      	movs	r0, #16
 8010734:	f000 fe2a 	bl	801138c <malloc>
 8010738:	4602      	mov	r2, r0
 801073a:	61e0      	str	r0, [r4, #28]
 801073c:	b920      	cbnz	r0, 8010748 <_dtoa_r+0x38>
 801073e:	4bae      	ldr	r3, [pc, #696]	; (80109f8 <_dtoa_r+0x2e8>)
 8010740:	21ef      	movs	r1, #239	; 0xef
 8010742:	48ae      	ldr	r0, [pc, #696]	; (80109fc <_dtoa_r+0x2ec>)
 8010744:	f001 fe5c 	bl	8012400 <__assert_func>
 8010748:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801074c:	6005      	str	r5, [r0, #0]
 801074e:	60c5      	str	r5, [r0, #12]
 8010750:	69e3      	ldr	r3, [r4, #28]
 8010752:	6819      	ldr	r1, [r3, #0]
 8010754:	b151      	cbz	r1, 801076c <_dtoa_r+0x5c>
 8010756:	685a      	ldr	r2, [r3, #4]
 8010758:	604a      	str	r2, [r1, #4]
 801075a:	2301      	movs	r3, #1
 801075c:	4093      	lsls	r3, r2
 801075e:	608b      	str	r3, [r1, #8]
 8010760:	4620      	mov	r0, r4
 8010762:	f000 ff07 	bl	8011574 <_Bfree>
 8010766:	69e3      	ldr	r3, [r4, #28]
 8010768:	2200      	movs	r2, #0
 801076a:	601a      	str	r2, [r3, #0]
 801076c:	1e3b      	subs	r3, r7, #0
 801076e:	bfbb      	ittet	lt
 8010770:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010774:	9303      	strlt	r3, [sp, #12]
 8010776:	2300      	movge	r3, #0
 8010778:	2201      	movlt	r2, #1
 801077a:	bfac      	ite	ge
 801077c:	f8c8 3000 	strge.w	r3, [r8]
 8010780:	f8c8 2000 	strlt.w	r2, [r8]
 8010784:	4b9e      	ldr	r3, [pc, #632]	; (8010a00 <_dtoa_r+0x2f0>)
 8010786:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801078a:	ea33 0308 	bics.w	r3, r3, r8
 801078e:	d11b      	bne.n	80107c8 <_dtoa_r+0xb8>
 8010790:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010792:	f242 730f 	movw	r3, #9999	; 0x270f
 8010796:	6013      	str	r3, [r2, #0]
 8010798:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801079c:	4333      	orrs	r3, r6
 801079e:	f000 8593 	beq.w	80112c8 <_dtoa_r+0xbb8>
 80107a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80107a4:	b963      	cbnz	r3, 80107c0 <_dtoa_r+0xb0>
 80107a6:	4b97      	ldr	r3, [pc, #604]	; (8010a04 <_dtoa_r+0x2f4>)
 80107a8:	e027      	b.n	80107fa <_dtoa_r+0xea>
 80107aa:	4b97      	ldr	r3, [pc, #604]	; (8010a08 <_dtoa_r+0x2f8>)
 80107ac:	9300      	str	r3, [sp, #0]
 80107ae:	3308      	adds	r3, #8
 80107b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80107b2:	6013      	str	r3, [r2, #0]
 80107b4:	9800      	ldr	r0, [sp, #0]
 80107b6:	b013      	add	sp, #76	; 0x4c
 80107b8:	ecbd 8b04 	vpop	{d8-d9}
 80107bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107c0:	4b90      	ldr	r3, [pc, #576]	; (8010a04 <_dtoa_r+0x2f4>)
 80107c2:	9300      	str	r3, [sp, #0]
 80107c4:	3303      	adds	r3, #3
 80107c6:	e7f3      	b.n	80107b0 <_dtoa_r+0xa0>
 80107c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80107cc:	2200      	movs	r2, #0
 80107ce:	ec51 0b17 	vmov	r0, r1, d7
 80107d2:	eeb0 8a47 	vmov.f32	s16, s14
 80107d6:	eef0 8a67 	vmov.f32	s17, s15
 80107da:	2300      	movs	r3, #0
 80107dc:	f7f0 f94c 	bl	8000a78 <__aeabi_dcmpeq>
 80107e0:	4681      	mov	r9, r0
 80107e2:	b160      	cbz	r0, 80107fe <_dtoa_r+0xee>
 80107e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80107e6:	2301      	movs	r3, #1
 80107e8:	6013      	str	r3, [r2, #0]
 80107ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	f000 8568 	beq.w	80112c2 <_dtoa_r+0xbb2>
 80107f2:	4b86      	ldr	r3, [pc, #536]	; (8010a0c <_dtoa_r+0x2fc>)
 80107f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80107f6:	6013      	str	r3, [r2, #0]
 80107f8:	3b01      	subs	r3, #1
 80107fa:	9300      	str	r3, [sp, #0]
 80107fc:	e7da      	b.n	80107b4 <_dtoa_r+0xa4>
 80107fe:	aa10      	add	r2, sp, #64	; 0x40
 8010800:	a911      	add	r1, sp, #68	; 0x44
 8010802:	4620      	mov	r0, r4
 8010804:	eeb0 0a48 	vmov.f32	s0, s16
 8010808:	eef0 0a68 	vmov.f32	s1, s17
 801080c:	f001 f994 	bl	8011b38 <__d2b>
 8010810:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010814:	4682      	mov	sl, r0
 8010816:	2d00      	cmp	r5, #0
 8010818:	d07f      	beq.n	801091a <_dtoa_r+0x20a>
 801081a:	ee18 3a90 	vmov	r3, s17
 801081e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010822:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010826:	ec51 0b18 	vmov	r0, r1, d8
 801082a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801082e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010832:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8010836:	4619      	mov	r1, r3
 8010838:	2200      	movs	r2, #0
 801083a:	4b75      	ldr	r3, [pc, #468]	; (8010a10 <_dtoa_r+0x300>)
 801083c:	f7ef fcfc 	bl	8000238 <__aeabi_dsub>
 8010840:	a367      	add	r3, pc, #412	; (adr r3, 80109e0 <_dtoa_r+0x2d0>)
 8010842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010846:	f7ef feaf 	bl	80005a8 <__aeabi_dmul>
 801084a:	a367      	add	r3, pc, #412	; (adr r3, 80109e8 <_dtoa_r+0x2d8>)
 801084c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010850:	f7ef fcf4 	bl	800023c <__adddf3>
 8010854:	4606      	mov	r6, r0
 8010856:	4628      	mov	r0, r5
 8010858:	460f      	mov	r7, r1
 801085a:	f7ef fe3b 	bl	80004d4 <__aeabi_i2d>
 801085e:	a364      	add	r3, pc, #400	; (adr r3, 80109f0 <_dtoa_r+0x2e0>)
 8010860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010864:	f7ef fea0 	bl	80005a8 <__aeabi_dmul>
 8010868:	4602      	mov	r2, r0
 801086a:	460b      	mov	r3, r1
 801086c:	4630      	mov	r0, r6
 801086e:	4639      	mov	r1, r7
 8010870:	f7ef fce4 	bl	800023c <__adddf3>
 8010874:	4606      	mov	r6, r0
 8010876:	460f      	mov	r7, r1
 8010878:	f7f0 f946 	bl	8000b08 <__aeabi_d2iz>
 801087c:	2200      	movs	r2, #0
 801087e:	4683      	mov	fp, r0
 8010880:	2300      	movs	r3, #0
 8010882:	4630      	mov	r0, r6
 8010884:	4639      	mov	r1, r7
 8010886:	f7f0 f901 	bl	8000a8c <__aeabi_dcmplt>
 801088a:	b148      	cbz	r0, 80108a0 <_dtoa_r+0x190>
 801088c:	4658      	mov	r0, fp
 801088e:	f7ef fe21 	bl	80004d4 <__aeabi_i2d>
 8010892:	4632      	mov	r2, r6
 8010894:	463b      	mov	r3, r7
 8010896:	f7f0 f8ef 	bl	8000a78 <__aeabi_dcmpeq>
 801089a:	b908      	cbnz	r0, 80108a0 <_dtoa_r+0x190>
 801089c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80108a0:	f1bb 0f16 	cmp.w	fp, #22
 80108a4:	d857      	bhi.n	8010956 <_dtoa_r+0x246>
 80108a6:	4b5b      	ldr	r3, [pc, #364]	; (8010a14 <_dtoa_r+0x304>)
 80108a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80108ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b0:	ec51 0b18 	vmov	r0, r1, d8
 80108b4:	f7f0 f8ea 	bl	8000a8c <__aeabi_dcmplt>
 80108b8:	2800      	cmp	r0, #0
 80108ba:	d04e      	beq.n	801095a <_dtoa_r+0x24a>
 80108bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80108c0:	2300      	movs	r3, #0
 80108c2:	930c      	str	r3, [sp, #48]	; 0x30
 80108c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80108c6:	1b5b      	subs	r3, r3, r5
 80108c8:	1e5a      	subs	r2, r3, #1
 80108ca:	bf45      	ittet	mi
 80108cc:	f1c3 0301 	rsbmi	r3, r3, #1
 80108d0:	9305      	strmi	r3, [sp, #20]
 80108d2:	2300      	movpl	r3, #0
 80108d4:	2300      	movmi	r3, #0
 80108d6:	9206      	str	r2, [sp, #24]
 80108d8:	bf54      	ite	pl
 80108da:	9305      	strpl	r3, [sp, #20]
 80108dc:	9306      	strmi	r3, [sp, #24]
 80108de:	f1bb 0f00 	cmp.w	fp, #0
 80108e2:	db3c      	blt.n	801095e <_dtoa_r+0x24e>
 80108e4:	9b06      	ldr	r3, [sp, #24]
 80108e6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80108ea:	445b      	add	r3, fp
 80108ec:	9306      	str	r3, [sp, #24]
 80108ee:	2300      	movs	r3, #0
 80108f0:	9308      	str	r3, [sp, #32]
 80108f2:	9b07      	ldr	r3, [sp, #28]
 80108f4:	2b09      	cmp	r3, #9
 80108f6:	d868      	bhi.n	80109ca <_dtoa_r+0x2ba>
 80108f8:	2b05      	cmp	r3, #5
 80108fa:	bfc4      	itt	gt
 80108fc:	3b04      	subgt	r3, #4
 80108fe:	9307      	strgt	r3, [sp, #28]
 8010900:	9b07      	ldr	r3, [sp, #28]
 8010902:	f1a3 0302 	sub.w	r3, r3, #2
 8010906:	bfcc      	ite	gt
 8010908:	2500      	movgt	r5, #0
 801090a:	2501      	movle	r5, #1
 801090c:	2b03      	cmp	r3, #3
 801090e:	f200 8085 	bhi.w	8010a1c <_dtoa_r+0x30c>
 8010912:	e8df f003 	tbb	[pc, r3]
 8010916:	3b2e      	.short	0x3b2e
 8010918:	5839      	.short	0x5839
 801091a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801091e:	441d      	add	r5, r3
 8010920:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010924:	2b20      	cmp	r3, #32
 8010926:	bfc1      	itttt	gt
 8010928:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801092c:	fa08 f803 	lslgt.w	r8, r8, r3
 8010930:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8010934:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010938:	bfd6      	itet	le
 801093a:	f1c3 0320 	rsble	r3, r3, #32
 801093e:	ea48 0003 	orrgt.w	r0, r8, r3
 8010942:	fa06 f003 	lslle.w	r0, r6, r3
 8010946:	f7ef fdb5 	bl	80004b4 <__aeabi_ui2d>
 801094a:	2201      	movs	r2, #1
 801094c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010950:	3d01      	subs	r5, #1
 8010952:	920e      	str	r2, [sp, #56]	; 0x38
 8010954:	e76f      	b.n	8010836 <_dtoa_r+0x126>
 8010956:	2301      	movs	r3, #1
 8010958:	e7b3      	b.n	80108c2 <_dtoa_r+0x1b2>
 801095a:	900c      	str	r0, [sp, #48]	; 0x30
 801095c:	e7b2      	b.n	80108c4 <_dtoa_r+0x1b4>
 801095e:	9b05      	ldr	r3, [sp, #20]
 8010960:	eba3 030b 	sub.w	r3, r3, fp
 8010964:	9305      	str	r3, [sp, #20]
 8010966:	f1cb 0300 	rsb	r3, fp, #0
 801096a:	9308      	str	r3, [sp, #32]
 801096c:	2300      	movs	r3, #0
 801096e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010970:	e7bf      	b.n	80108f2 <_dtoa_r+0x1e2>
 8010972:	2300      	movs	r3, #0
 8010974:	9309      	str	r3, [sp, #36]	; 0x24
 8010976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010978:	2b00      	cmp	r3, #0
 801097a:	dc52      	bgt.n	8010a22 <_dtoa_r+0x312>
 801097c:	2301      	movs	r3, #1
 801097e:	9301      	str	r3, [sp, #4]
 8010980:	9304      	str	r3, [sp, #16]
 8010982:	461a      	mov	r2, r3
 8010984:	920a      	str	r2, [sp, #40]	; 0x28
 8010986:	e00b      	b.n	80109a0 <_dtoa_r+0x290>
 8010988:	2301      	movs	r3, #1
 801098a:	e7f3      	b.n	8010974 <_dtoa_r+0x264>
 801098c:	2300      	movs	r3, #0
 801098e:	9309      	str	r3, [sp, #36]	; 0x24
 8010990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010992:	445b      	add	r3, fp
 8010994:	9301      	str	r3, [sp, #4]
 8010996:	3301      	adds	r3, #1
 8010998:	2b01      	cmp	r3, #1
 801099a:	9304      	str	r3, [sp, #16]
 801099c:	bfb8      	it	lt
 801099e:	2301      	movlt	r3, #1
 80109a0:	69e0      	ldr	r0, [r4, #28]
 80109a2:	2100      	movs	r1, #0
 80109a4:	2204      	movs	r2, #4
 80109a6:	f102 0614 	add.w	r6, r2, #20
 80109aa:	429e      	cmp	r6, r3
 80109ac:	d93d      	bls.n	8010a2a <_dtoa_r+0x31a>
 80109ae:	6041      	str	r1, [r0, #4]
 80109b0:	4620      	mov	r0, r4
 80109b2:	f000 fd9f 	bl	80114f4 <_Balloc>
 80109b6:	9000      	str	r0, [sp, #0]
 80109b8:	2800      	cmp	r0, #0
 80109ba:	d139      	bne.n	8010a30 <_dtoa_r+0x320>
 80109bc:	4b16      	ldr	r3, [pc, #88]	; (8010a18 <_dtoa_r+0x308>)
 80109be:	4602      	mov	r2, r0
 80109c0:	f240 11af 	movw	r1, #431	; 0x1af
 80109c4:	e6bd      	b.n	8010742 <_dtoa_r+0x32>
 80109c6:	2301      	movs	r3, #1
 80109c8:	e7e1      	b.n	801098e <_dtoa_r+0x27e>
 80109ca:	2501      	movs	r5, #1
 80109cc:	2300      	movs	r3, #0
 80109ce:	9307      	str	r3, [sp, #28]
 80109d0:	9509      	str	r5, [sp, #36]	; 0x24
 80109d2:	f04f 33ff 	mov.w	r3, #4294967295
 80109d6:	9301      	str	r3, [sp, #4]
 80109d8:	9304      	str	r3, [sp, #16]
 80109da:	2200      	movs	r2, #0
 80109dc:	2312      	movs	r3, #18
 80109de:	e7d1      	b.n	8010984 <_dtoa_r+0x274>
 80109e0:	636f4361 	.word	0x636f4361
 80109e4:	3fd287a7 	.word	0x3fd287a7
 80109e8:	8b60c8b3 	.word	0x8b60c8b3
 80109ec:	3fc68a28 	.word	0x3fc68a28
 80109f0:	509f79fb 	.word	0x509f79fb
 80109f4:	3fd34413 	.word	0x3fd34413
 80109f8:	08014225 	.word	0x08014225
 80109fc:	0801423c 	.word	0x0801423c
 8010a00:	7ff00000 	.word	0x7ff00000
 8010a04:	08014221 	.word	0x08014221
 8010a08:	08014218 	.word	0x08014218
 8010a0c:	080141f5 	.word	0x080141f5
 8010a10:	3ff80000 	.word	0x3ff80000
 8010a14:	08014328 	.word	0x08014328
 8010a18:	08014294 	.word	0x08014294
 8010a1c:	2301      	movs	r3, #1
 8010a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8010a20:	e7d7      	b.n	80109d2 <_dtoa_r+0x2c2>
 8010a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a24:	9301      	str	r3, [sp, #4]
 8010a26:	9304      	str	r3, [sp, #16]
 8010a28:	e7ba      	b.n	80109a0 <_dtoa_r+0x290>
 8010a2a:	3101      	adds	r1, #1
 8010a2c:	0052      	lsls	r2, r2, #1
 8010a2e:	e7ba      	b.n	80109a6 <_dtoa_r+0x296>
 8010a30:	69e3      	ldr	r3, [r4, #28]
 8010a32:	9a00      	ldr	r2, [sp, #0]
 8010a34:	601a      	str	r2, [r3, #0]
 8010a36:	9b04      	ldr	r3, [sp, #16]
 8010a38:	2b0e      	cmp	r3, #14
 8010a3a:	f200 80a8 	bhi.w	8010b8e <_dtoa_r+0x47e>
 8010a3e:	2d00      	cmp	r5, #0
 8010a40:	f000 80a5 	beq.w	8010b8e <_dtoa_r+0x47e>
 8010a44:	f1bb 0f00 	cmp.w	fp, #0
 8010a48:	dd38      	ble.n	8010abc <_dtoa_r+0x3ac>
 8010a4a:	4bc0      	ldr	r3, [pc, #768]	; (8010d4c <_dtoa_r+0x63c>)
 8010a4c:	f00b 020f 	and.w	r2, fp, #15
 8010a50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a54:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010a58:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010a5c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010a60:	d019      	beq.n	8010a96 <_dtoa_r+0x386>
 8010a62:	4bbb      	ldr	r3, [pc, #748]	; (8010d50 <_dtoa_r+0x640>)
 8010a64:	ec51 0b18 	vmov	r0, r1, d8
 8010a68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010a6c:	f7ef fec6 	bl	80007fc <__aeabi_ddiv>
 8010a70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a74:	f008 080f 	and.w	r8, r8, #15
 8010a78:	2503      	movs	r5, #3
 8010a7a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010d50 <_dtoa_r+0x640>
 8010a7e:	f1b8 0f00 	cmp.w	r8, #0
 8010a82:	d10a      	bne.n	8010a9a <_dtoa_r+0x38a>
 8010a84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a88:	4632      	mov	r2, r6
 8010a8a:	463b      	mov	r3, r7
 8010a8c:	f7ef feb6 	bl	80007fc <__aeabi_ddiv>
 8010a90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a94:	e02b      	b.n	8010aee <_dtoa_r+0x3de>
 8010a96:	2502      	movs	r5, #2
 8010a98:	e7ef      	b.n	8010a7a <_dtoa_r+0x36a>
 8010a9a:	f018 0f01 	tst.w	r8, #1
 8010a9e:	d008      	beq.n	8010ab2 <_dtoa_r+0x3a2>
 8010aa0:	4630      	mov	r0, r6
 8010aa2:	4639      	mov	r1, r7
 8010aa4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010aa8:	f7ef fd7e 	bl	80005a8 <__aeabi_dmul>
 8010aac:	3501      	adds	r5, #1
 8010aae:	4606      	mov	r6, r0
 8010ab0:	460f      	mov	r7, r1
 8010ab2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010ab6:	f109 0908 	add.w	r9, r9, #8
 8010aba:	e7e0      	b.n	8010a7e <_dtoa_r+0x36e>
 8010abc:	f000 809f 	beq.w	8010bfe <_dtoa_r+0x4ee>
 8010ac0:	f1cb 0600 	rsb	r6, fp, #0
 8010ac4:	4ba1      	ldr	r3, [pc, #644]	; (8010d4c <_dtoa_r+0x63c>)
 8010ac6:	4fa2      	ldr	r7, [pc, #648]	; (8010d50 <_dtoa_r+0x640>)
 8010ac8:	f006 020f 	and.w	r2, r6, #15
 8010acc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad4:	ec51 0b18 	vmov	r0, r1, d8
 8010ad8:	f7ef fd66 	bl	80005a8 <__aeabi_dmul>
 8010adc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ae0:	1136      	asrs	r6, r6, #4
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	2502      	movs	r5, #2
 8010ae6:	2e00      	cmp	r6, #0
 8010ae8:	d17e      	bne.n	8010be8 <_dtoa_r+0x4d8>
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d1d0      	bne.n	8010a90 <_dtoa_r+0x380>
 8010aee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010af0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	f000 8084 	beq.w	8010c02 <_dtoa_r+0x4f2>
 8010afa:	4b96      	ldr	r3, [pc, #600]	; (8010d54 <_dtoa_r+0x644>)
 8010afc:	2200      	movs	r2, #0
 8010afe:	4640      	mov	r0, r8
 8010b00:	4649      	mov	r1, r9
 8010b02:	f7ef ffc3 	bl	8000a8c <__aeabi_dcmplt>
 8010b06:	2800      	cmp	r0, #0
 8010b08:	d07b      	beq.n	8010c02 <_dtoa_r+0x4f2>
 8010b0a:	9b04      	ldr	r3, [sp, #16]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d078      	beq.n	8010c02 <_dtoa_r+0x4f2>
 8010b10:	9b01      	ldr	r3, [sp, #4]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	dd39      	ble.n	8010b8a <_dtoa_r+0x47a>
 8010b16:	4b90      	ldr	r3, [pc, #576]	; (8010d58 <_dtoa_r+0x648>)
 8010b18:	2200      	movs	r2, #0
 8010b1a:	4640      	mov	r0, r8
 8010b1c:	4649      	mov	r1, r9
 8010b1e:	f7ef fd43 	bl	80005a8 <__aeabi_dmul>
 8010b22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b26:	9e01      	ldr	r6, [sp, #4]
 8010b28:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010b2c:	3501      	adds	r5, #1
 8010b2e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010b32:	4628      	mov	r0, r5
 8010b34:	f7ef fcce 	bl	80004d4 <__aeabi_i2d>
 8010b38:	4642      	mov	r2, r8
 8010b3a:	464b      	mov	r3, r9
 8010b3c:	f7ef fd34 	bl	80005a8 <__aeabi_dmul>
 8010b40:	4b86      	ldr	r3, [pc, #536]	; (8010d5c <_dtoa_r+0x64c>)
 8010b42:	2200      	movs	r2, #0
 8010b44:	f7ef fb7a 	bl	800023c <__adddf3>
 8010b48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010b4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b50:	9303      	str	r3, [sp, #12]
 8010b52:	2e00      	cmp	r6, #0
 8010b54:	d158      	bne.n	8010c08 <_dtoa_r+0x4f8>
 8010b56:	4b82      	ldr	r3, [pc, #520]	; (8010d60 <_dtoa_r+0x650>)
 8010b58:	2200      	movs	r2, #0
 8010b5a:	4640      	mov	r0, r8
 8010b5c:	4649      	mov	r1, r9
 8010b5e:	f7ef fb6b 	bl	8000238 <__aeabi_dsub>
 8010b62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b66:	4680      	mov	r8, r0
 8010b68:	4689      	mov	r9, r1
 8010b6a:	f7ef ffad 	bl	8000ac8 <__aeabi_dcmpgt>
 8010b6e:	2800      	cmp	r0, #0
 8010b70:	f040 8296 	bne.w	80110a0 <_dtoa_r+0x990>
 8010b74:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010b78:	4640      	mov	r0, r8
 8010b7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b7e:	4649      	mov	r1, r9
 8010b80:	f7ef ff84 	bl	8000a8c <__aeabi_dcmplt>
 8010b84:	2800      	cmp	r0, #0
 8010b86:	f040 8289 	bne.w	801109c <_dtoa_r+0x98c>
 8010b8a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010b8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	f2c0 814e 	blt.w	8010e32 <_dtoa_r+0x722>
 8010b96:	f1bb 0f0e 	cmp.w	fp, #14
 8010b9a:	f300 814a 	bgt.w	8010e32 <_dtoa_r+0x722>
 8010b9e:	4b6b      	ldr	r3, [pc, #428]	; (8010d4c <_dtoa_r+0x63c>)
 8010ba0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010ba4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	f280 80dc 	bge.w	8010d68 <_dtoa_r+0x658>
 8010bb0:	9b04      	ldr	r3, [sp, #16]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	f300 80d8 	bgt.w	8010d68 <_dtoa_r+0x658>
 8010bb8:	f040 826f 	bne.w	801109a <_dtoa_r+0x98a>
 8010bbc:	4b68      	ldr	r3, [pc, #416]	; (8010d60 <_dtoa_r+0x650>)
 8010bbe:	2200      	movs	r2, #0
 8010bc0:	4640      	mov	r0, r8
 8010bc2:	4649      	mov	r1, r9
 8010bc4:	f7ef fcf0 	bl	80005a8 <__aeabi_dmul>
 8010bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010bcc:	f7ef ff72 	bl	8000ab4 <__aeabi_dcmpge>
 8010bd0:	9e04      	ldr	r6, [sp, #16]
 8010bd2:	4637      	mov	r7, r6
 8010bd4:	2800      	cmp	r0, #0
 8010bd6:	f040 8245 	bne.w	8011064 <_dtoa_r+0x954>
 8010bda:	9d00      	ldr	r5, [sp, #0]
 8010bdc:	2331      	movs	r3, #49	; 0x31
 8010bde:	f805 3b01 	strb.w	r3, [r5], #1
 8010be2:	f10b 0b01 	add.w	fp, fp, #1
 8010be6:	e241      	b.n	801106c <_dtoa_r+0x95c>
 8010be8:	07f2      	lsls	r2, r6, #31
 8010bea:	d505      	bpl.n	8010bf8 <_dtoa_r+0x4e8>
 8010bec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010bf0:	f7ef fcda 	bl	80005a8 <__aeabi_dmul>
 8010bf4:	3501      	adds	r5, #1
 8010bf6:	2301      	movs	r3, #1
 8010bf8:	1076      	asrs	r6, r6, #1
 8010bfa:	3708      	adds	r7, #8
 8010bfc:	e773      	b.n	8010ae6 <_dtoa_r+0x3d6>
 8010bfe:	2502      	movs	r5, #2
 8010c00:	e775      	b.n	8010aee <_dtoa_r+0x3de>
 8010c02:	9e04      	ldr	r6, [sp, #16]
 8010c04:	465f      	mov	r7, fp
 8010c06:	e792      	b.n	8010b2e <_dtoa_r+0x41e>
 8010c08:	9900      	ldr	r1, [sp, #0]
 8010c0a:	4b50      	ldr	r3, [pc, #320]	; (8010d4c <_dtoa_r+0x63c>)
 8010c0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010c10:	4431      	add	r1, r6
 8010c12:	9102      	str	r1, [sp, #8]
 8010c14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010c16:	eeb0 9a47 	vmov.f32	s18, s14
 8010c1a:	eef0 9a67 	vmov.f32	s19, s15
 8010c1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010c22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010c26:	2900      	cmp	r1, #0
 8010c28:	d044      	beq.n	8010cb4 <_dtoa_r+0x5a4>
 8010c2a:	494e      	ldr	r1, [pc, #312]	; (8010d64 <_dtoa_r+0x654>)
 8010c2c:	2000      	movs	r0, #0
 8010c2e:	f7ef fde5 	bl	80007fc <__aeabi_ddiv>
 8010c32:	ec53 2b19 	vmov	r2, r3, d9
 8010c36:	f7ef faff 	bl	8000238 <__aeabi_dsub>
 8010c3a:	9d00      	ldr	r5, [sp, #0]
 8010c3c:	ec41 0b19 	vmov	d9, r0, r1
 8010c40:	4649      	mov	r1, r9
 8010c42:	4640      	mov	r0, r8
 8010c44:	f7ef ff60 	bl	8000b08 <__aeabi_d2iz>
 8010c48:	4606      	mov	r6, r0
 8010c4a:	f7ef fc43 	bl	80004d4 <__aeabi_i2d>
 8010c4e:	4602      	mov	r2, r0
 8010c50:	460b      	mov	r3, r1
 8010c52:	4640      	mov	r0, r8
 8010c54:	4649      	mov	r1, r9
 8010c56:	f7ef faef 	bl	8000238 <__aeabi_dsub>
 8010c5a:	3630      	adds	r6, #48	; 0x30
 8010c5c:	f805 6b01 	strb.w	r6, [r5], #1
 8010c60:	ec53 2b19 	vmov	r2, r3, d9
 8010c64:	4680      	mov	r8, r0
 8010c66:	4689      	mov	r9, r1
 8010c68:	f7ef ff10 	bl	8000a8c <__aeabi_dcmplt>
 8010c6c:	2800      	cmp	r0, #0
 8010c6e:	d164      	bne.n	8010d3a <_dtoa_r+0x62a>
 8010c70:	4642      	mov	r2, r8
 8010c72:	464b      	mov	r3, r9
 8010c74:	4937      	ldr	r1, [pc, #220]	; (8010d54 <_dtoa_r+0x644>)
 8010c76:	2000      	movs	r0, #0
 8010c78:	f7ef fade 	bl	8000238 <__aeabi_dsub>
 8010c7c:	ec53 2b19 	vmov	r2, r3, d9
 8010c80:	f7ef ff04 	bl	8000a8c <__aeabi_dcmplt>
 8010c84:	2800      	cmp	r0, #0
 8010c86:	f040 80b6 	bne.w	8010df6 <_dtoa_r+0x6e6>
 8010c8a:	9b02      	ldr	r3, [sp, #8]
 8010c8c:	429d      	cmp	r5, r3
 8010c8e:	f43f af7c 	beq.w	8010b8a <_dtoa_r+0x47a>
 8010c92:	4b31      	ldr	r3, [pc, #196]	; (8010d58 <_dtoa_r+0x648>)
 8010c94:	ec51 0b19 	vmov	r0, r1, d9
 8010c98:	2200      	movs	r2, #0
 8010c9a:	f7ef fc85 	bl	80005a8 <__aeabi_dmul>
 8010c9e:	4b2e      	ldr	r3, [pc, #184]	; (8010d58 <_dtoa_r+0x648>)
 8010ca0:	ec41 0b19 	vmov	d9, r0, r1
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	4640      	mov	r0, r8
 8010ca8:	4649      	mov	r1, r9
 8010caa:	f7ef fc7d 	bl	80005a8 <__aeabi_dmul>
 8010cae:	4680      	mov	r8, r0
 8010cb0:	4689      	mov	r9, r1
 8010cb2:	e7c5      	b.n	8010c40 <_dtoa_r+0x530>
 8010cb4:	ec51 0b17 	vmov	r0, r1, d7
 8010cb8:	f7ef fc76 	bl	80005a8 <__aeabi_dmul>
 8010cbc:	9b02      	ldr	r3, [sp, #8]
 8010cbe:	9d00      	ldr	r5, [sp, #0]
 8010cc0:	930f      	str	r3, [sp, #60]	; 0x3c
 8010cc2:	ec41 0b19 	vmov	d9, r0, r1
 8010cc6:	4649      	mov	r1, r9
 8010cc8:	4640      	mov	r0, r8
 8010cca:	f7ef ff1d 	bl	8000b08 <__aeabi_d2iz>
 8010cce:	4606      	mov	r6, r0
 8010cd0:	f7ef fc00 	bl	80004d4 <__aeabi_i2d>
 8010cd4:	3630      	adds	r6, #48	; 0x30
 8010cd6:	4602      	mov	r2, r0
 8010cd8:	460b      	mov	r3, r1
 8010cda:	4640      	mov	r0, r8
 8010cdc:	4649      	mov	r1, r9
 8010cde:	f7ef faab 	bl	8000238 <__aeabi_dsub>
 8010ce2:	f805 6b01 	strb.w	r6, [r5], #1
 8010ce6:	9b02      	ldr	r3, [sp, #8]
 8010ce8:	429d      	cmp	r5, r3
 8010cea:	4680      	mov	r8, r0
 8010cec:	4689      	mov	r9, r1
 8010cee:	f04f 0200 	mov.w	r2, #0
 8010cf2:	d124      	bne.n	8010d3e <_dtoa_r+0x62e>
 8010cf4:	4b1b      	ldr	r3, [pc, #108]	; (8010d64 <_dtoa_r+0x654>)
 8010cf6:	ec51 0b19 	vmov	r0, r1, d9
 8010cfa:	f7ef fa9f 	bl	800023c <__adddf3>
 8010cfe:	4602      	mov	r2, r0
 8010d00:	460b      	mov	r3, r1
 8010d02:	4640      	mov	r0, r8
 8010d04:	4649      	mov	r1, r9
 8010d06:	f7ef fedf 	bl	8000ac8 <__aeabi_dcmpgt>
 8010d0a:	2800      	cmp	r0, #0
 8010d0c:	d173      	bne.n	8010df6 <_dtoa_r+0x6e6>
 8010d0e:	ec53 2b19 	vmov	r2, r3, d9
 8010d12:	4914      	ldr	r1, [pc, #80]	; (8010d64 <_dtoa_r+0x654>)
 8010d14:	2000      	movs	r0, #0
 8010d16:	f7ef fa8f 	bl	8000238 <__aeabi_dsub>
 8010d1a:	4602      	mov	r2, r0
 8010d1c:	460b      	mov	r3, r1
 8010d1e:	4640      	mov	r0, r8
 8010d20:	4649      	mov	r1, r9
 8010d22:	f7ef feb3 	bl	8000a8c <__aeabi_dcmplt>
 8010d26:	2800      	cmp	r0, #0
 8010d28:	f43f af2f 	beq.w	8010b8a <_dtoa_r+0x47a>
 8010d2c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010d2e:	1e6b      	subs	r3, r5, #1
 8010d30:	930f      	str	r3, [sp, #60]	; 0x3c
 8010d32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010d36:	2b30      	cmp	r3, #48	; 0x30
 8010d38:	d0f8      	beq.n	8010d2c <_dtoa_r+0x61c>
 8010d3a:	46bb      	mov	fp, r7
 8010d3c:	e04a      	b.n	8010dd4 <_dtoa_r+0x6c4>
 8010d3e:	4b06      	ldr	r3, [pc, #24]	; (8010d58 <_dtoa_r+0x648>)
 8010d40:	f7ef fc32 	bl	80005a8 <__aeabi_dmul>
 8010d44:	4680      	mov	r8, r0
 8010d46:	4689      	mov	r9, r1
 8010d48:	e7bd      	b.n	8010cc6 <_dtoa_r+0x5b6>
 8010d4a:	bf00      	nop
 8010d4c:	08014328 	.word	0x08014328
 8010d50:	08014300 	.word	0x08014300
 8010d54:	3ff00000 	.word	0x3ff00000
 8010d58:	40240000 	.word	0x40240000
 8010d5c:	401c0000 	.word	0x401c0000
 8010d60:	40140000 	.word	0x40140000
 8010d64:	3fe00000 	.word	0x3fe00000
 8010d68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010d6c:	9d00      	ldr	r5, [sp, #0]
 8010d6e:	4642      	mov	r2, r8
 8010d70:	464b      	mov	r3, r9
 8010d72:	4630      	mov	r0, r6
 8010d74:	4639      	mov	r1, r7
 8010d76:	f7ef fd41 	bl	80007fc <__aeabi_ddiv>
 8010d7a:	f7ef fec5 	bl	8000b08 <__aeabi_d2iz>
 8010d7e:	9001      	str	r0, [sp, #4]
 8010d80:	f7ef fba8 	bl	80004d4 <__aeabi_i2d>
 8010d84:	4642      	mov	r2, r8
 8010d86:	464b      	mov	r3, r9
 8010d88:	f7ef fc0e 	bl	80005a8 <__aeabi_dmul>
 8010d8c:	4602      	mov	r2, r0
 8010d8e:	460b      	mov	r3, r1
 8010d90:	4630      	mov	r0, r6
 8010d92:	4639      	mov	r1, r7
 8010d94:	f7ef fa50 	bl	8000238 <__aeabi_dsub>
 8010d98:	9e01      	ldr	r6, [sp, #4]
 8010d9a:	9f04      	ldr	r7, [sp, #16]
 8010d9c:	3630      	adds	r6, #48	; 0x30
 8010d9e:	f805 6b01 	strb.w	r6, [r5], #1
 8010da2:	9e00      	ldr	r6, [sp, #0]
 8010da4:	1bae      	subs	r6, r5, r6
 8010da6:	42b7      	cmp	r7, r6
 8010da8:	4602      	mov	r2, r0
 8010daa:	460b      	mov	r3, r1
 8010dac:	d134      	bne.n	8010e18 <_dtoa_r+0x708>
 8010dae:	f7ef fa45 	bl	800023c <__adddf3>
 8010db2:	4642      	mov	r2, r8
 8010db4:	464b      	mov	r3, r9
 8010db6:	4606      	mov	r6, r0
 8010db8:	460f      	mov	r7, r1
 8010dba:	f7ef fe85 	bl	8000ac8 <__aeabi_dcmpgt>
 8010dbe:	b9c8      	cbnz	r0, 8010df4 <_dtoa_r+0x6e4>
 8010dc0:	4642      	mov	r2, r8
 8010dc2:	464b      	mov	r3, r9
 8010dc4:	4630      	mov	r0, r6
 8010dc6:	4639      	mov	r1, r7
 8010dc8:	f7ef fe56 	bl	8000a78 <__aeabi_dcmpeq>
 8010dcc:	b110      	cbz	r0, 8010dd4 <_dtoa_r+0x6c4>
 8010dce:	9b01      	ldr	r3, [sp, #4]
 8010dd0:	07db      	lsls	r3, r3, #31
 8010dd2:	d40f      	bmi.n	8010df4 <_dtoa_r+0x6e4>
 8010dd4:	4651      	mov	r1, sl
 8010dd6:	4620      	mov	r0, r4
 8010dd8:	f000 fbcc 	bl	8011574 <_Bfree>
 8010ddc:	2300      	movs	r3, #0
 8010dde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010de0:	702b      	strb	r3, [r5, #0]
 8010de2:	f10b 0301 	add.w	r3, fp, #1
 8010de6:	6013      	str	r3, [r2, #0]
 8010de8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	f43f ace2 	beq.w	80107b4 <_dtoa_r+0xa4>
 8010df0:	601d      	str	r5, [r3, #0]
 8010df2:	e4df      	b.n	80107b4 <_dtoa_r+0xa4>
 8010df4:	465f      	mov	r7, fp
 8010df6:	462b      	mov	r3, r5
 8010df8:	461d      	mov	r5, r3
 8010dfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010dfe:	2a39      	cmp	r2, #57	; 0x39
 8010e00:	d106      	bne.n	8010e10 <_dtoa_r+0x700>
 8010e02:	9a00      	ldr	r2, [sp, #0]
 8010e04:	429a      	cmp	r2, r3
 8010e06:	d1f7      	bne.n	8010df8 <_dtoa_r+0x6e8>
 8010e08:	9900      	ldr	r1, [sp, #0]
 8010e0a:	2230      	movs	r2, #48	; 0x30
 8010e0c:	3701      	adds	r7, #1
 8010e0e:	700a      	strb	r2, [r1, #0]
 8010e10:	781a      	ldrb	r2, [r3, #0]
 8010e12:	3201      	adds	r2, #1
 8010e14:	701a      	strb	r2, [r3, #0]
 8010e16:	e790      	b.n	8010d3a <_dtoa_r+0x62a>
 8010e18:	4ba3      	ldr	r3, [pc, #652]	; (80110a8 <_dtoa_r+0x998>)
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	f7ef fbc4 	bl	80005a8 <__aeabi_dmul>
 8010e20:	2200      	movs	r2, #0
 8010e22:	2300      	movs	r3, #0
 8010e24:	4606      	mov	r6, r0
 8010e26:	460f      	mov	r7, r1
 8010e28:	f7ef fe26 	bl	8000a78 <__aeabi_dcmpeq>
 8010e2c:	2800      	cmp	r0, #0
 8010e2e:	d09e      	beq.n	8010d6e <_dtoa_r+0x65e>
 8010e30:	e7d0      	b.n	8010dd4 <_dtoa_r+0x6c4>
 8010e32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e34:	2a00      	cmp	r2, #0
 8010e36:	f000 80ca 	beq.w	8010fce <_dtoa_r+0x8be>
 8010e3a:	9a07      	ldr	r2, [sp, #28]
 8010e3c:	2a01      	cmp	r2, #1
 8010e3e:	f300 80ad 	bgt.w	8010f9c <_dtoa_r+0x88c>
 8010e42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010e44:	2a00      	cmp	r2, #0
 8010e46:	f000 80a5 	beq.w	8010f94 <_dtoa_r+0x884>
 8010e4a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010e4e:	9e08      	ldr	r6, [sp, #32]
 8010e50:	9d05      	ldr	r5, [sp, #20]
 8010e52:	9a05      	ldr	r2, [sp, #20]
 8010e54:	441a      	add	r2, r3
 8010e56:	9205      	str	r2, [sp, #20]
 8010e58:	9a06      	ldr	r2, [sp, #24]
 8010e5a:	2101      	movs	r1, #1
 8010e5c:	441a      	add	r2, r3
 8010e5e:	4620      	mov	r0, r4
 8010e60:	9206      	str	r2, [sp, #24]
 8010e62:	f000 fc3d 	bl	80116e0 <__i2b>
 8010e66:	4607      	mov	r7, r0
 8010e68:	b165      	cbz	r5, 8010e84 <_dtoa_r+0x774>
 8010e6a:	9b06      	ldr	r3, [sp, #24]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	dd09      	ble.n	8010e84 <_dtoa_r+0x774>
 8010e70:	42ab      	cmp	r3, r5
 8010e72:	9a05      	ldr	r2, [sp, #20]
 8010e74:	bfa8      	it	ge
 8010e76:	462b      	movge	r3, r5
 8010e78:	1ad2      	subs	r2, r2, r3
 8010e7a:	9205      	str	r2, [sp, #20]
 8010e7c:	9a06      	ldr	r2, [sp, #24]
 8010e7e:	1aed      	subs	r5, r5, r3
 8010e80:	1ad3      	subs	r3, r2, r3
 8010e82:	9306      	str	r3, [sp, #24]
 8010e84:	9b08      	ldr	r3, [sp, #32]
 8010e86:	b1f3      	cbz	r3, 8010ec6 <_dtoa_r+0x7b6>
 8010e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	f000 80a3 	beq.w	8010fd6 <_dtoa_r+0x8c6>
 8010e90:	2e00      	cmp	r6, #0
 8010e92:	dd10      	ble.n	8010eb6 <_dtoa_r+0x7a6>
 8010e94:	4639      	mov	r1, r7
 8010e96:	4632      	mov	r2, r6
 8010e98:	4620      	mov	r0, r4
 8010e9a:	f000 fce1 	bl	8011860 <__pow5mult>
 8010e9e:	4652      	mov	r2, sl
 8010ea0:	4601      	mov	r1, r0
 8010ea2:	4607      	mov	r7, r0
 8010ea4:	4620      	mov	r0, r4
 8010ea6:	f000 fc31 	bl	801170c <__multiply>
 8010eaa:	4651      	mov	r1, sl
 8010eac:	4680      	mov	r8, r0
 8010eae:	4620      	mov	r0, r4
 8010eb0:	f000 fb60 	bl	8011574 <_Bfree>
 8010eb4:	46c2      	mov	sl, r8
 8010eb6:	9b08      	ldr	r3, [sp, #32]
 8010eb8:	1b9a      	subs	r2, r3, r6
 8010eba:	d004      	beq.n	8010ec6 <_dtoa_r+0x7b6>
 8010ebc:	4651      	mov	r1, sl
 8010ebe:	4620      	mov	r0, r4
 8010ec0:	f000 fcce 	bl	8011860 <__pow5mult>
 8010ec4:	4682      	mov	sl, r0
 8010ec6:	2101      	movs	r1, #1
 8010ec8:	4620      	mov	r0, r4
 8010eca:	f000 fc09 	bl	80116e0 <__i2b>
 8010ece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	4606      	mov	r6, r0
 8010ed4:	f340 8081 	ble.w	8010fda <_dtoa_r+0x8ca>
 8010ed8:	461a      	mov	r2, r3
 8010eda:	4601      	mov	r1, r0
 8010edc:	4620      	mov	r0, r4
 8010ede:	f000 fcbf 	bl	8011860 <__pow5mult>
 8010ee2:	9b07      	ldr	r3, [sp, #28]
 8010ee4:	2b01      	cmp	r3, #1
 8010ee6:	4606      	mov	r6, r0
 8010ee8:	dd7a      	ble.n	8010fe0 <_dtoa_r+0x8d0>
 8010eea:	f04f 0800 	mov.w	r8, #0
 8010eee:	6933      	ldr	r3, [r6, #16]
 8010ef0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010ef4:	6918      	ldr	r0, [r3, #16]
 8010ef6:	f000 fba5 	bl	8011644 <__hi0bits>
 8010efa:	f1c0 0020 	rsb	r0, r0, #32
 8010efe:	9b06      	ldr	r3, [sp, #24]
 8010f00:	4418      	add	r0, r3
 8010f02:	f010 001f 	ands.w	r0, r0, #31
 8010f06:	f000 8094 	beq.w	8011032 <_dtoa_r+0x922>
 8010f0a:	f1c0 0320 	rsb	r3, r0, #32
 8010f0e:	2b04      	cmp	r3, #4
 8010f10:	f340 8085 	ble.w	801101e <_dtoa_r+0x90e>
 8010f14:	9b05      	ldr	r3, [sp, #20]
 8010f16:	f1c0 001c 	rsb	r0, r0, #28
 8010f1a:	4403      	add	r3, r0
 8010f1c:	9305      	str	r3, [sp, #20]
 8010f1e:	9b06      	ldr	r3, [sp, #24]
 8010f20:	4403      	add	r3, r0
 8010f22:	4405      	add	r5, r0
 8010f24:	9306      	str	r3, [sp, #24]
 8010f26:	9b05      	ldr	r3, [sp, #20]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	dd05      	ble.n	8010f38 <_dtoa_r+0x828>
 8010f2c:	4651      	mov	r1, sl
 8010f2e:	461a      	mov	r2, r3
 8010f30:	4620      	mov	r0, r4
 8010f32:	f000 fcef 	bl	8011914 <__lshift>
 8010f36:	4682      	mov	sl, r0
 8010f38:	9b06      	ldr	r3, [sp, #24]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	dd05      	ble.n	8010f4a <_dtoa_r+0x83a>
 8010f3e:	4631      	mov	r1, r6
 8010f40:	461a      	mov	r2, r3
 8010f42:	4620      	mov	r0, r4
 8010f44:	f000 fce6 	bl	8011914 <__lshift>
 8010f48:	4606      	mov	r6, r0
 8010f4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d072      	beq.n	8011036 <_dtoa_r+0x926>
 8010f50:	4631      	mov	r1, r6
 8010f52:	4650      	mov	r0, sl
 8010f54:	f000 fd4a 	bl	80119ec <__mcmp>
 8010f58:	2800      	cmp	r0, #0
 8010f5a:	da6c      	bge.n	8011036 <_dtoa_r+0x926>
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	4651      	mov	r1, sl
 8010f60:	220a      	movs	r2, #10
 8010f62:	4620      	mov	r0, r4
 8010f64:	f000 fb28 	bl	80115b8 <__multadd>
 8010f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010f6e:	4682      	mov	sl, r0
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	f000 81b0 	beq.w	80112d6 <_dtoa_r+0xbc6>
 8010f76:	2300      	movs	r3, #0
 8010f78:	4639      	mov	r1, r7
 8010f7a:	220a      	movs	r2, #10
 8010f7c:	4620      	mov	r0, r4
 8010f7e:	f000 fb1b 	bl	80115b8 <__multadd>
 8010f82:	9b01      	ldr	r3, [sp, #4]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	4607      	mov	r7, r0
 8010f88:	f300 8096 	bgt.w	80110b8 <_dtoa_r+0x9a8>
 8010f8c:	9b07      	ldr	r3, [sp, #28]
 8010f8e:	2b02      	cmp	r3, #2
 8010f90:	dc59      	bgt.n	8011046 <_dtoa_r+0x936>
 8010f92:	e091      	b.n	80110b8 <_dtoa_r+0x9a8>
 8010f94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010f96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010f9a:	e758      	b.n	8010e4e <_dtoa_r+0x73e>
 8010f9c:	9b04      	ldr	r3, [sp, #16]
 8010f9e:	1e5e      	subs	r6, r3, #1
 8010fa0:	9b08      	ldr	r3, [sp, #32]
 8010fa2:	42b3      	cmp	r3, r6
 8010fa4:	bfbf      	itttt	lt
 8010fa6:	9b08      	ldrlt	r3, [sp, #32]
 8010fa8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8010faa:	9608      	strlt	r6, [sp, #32]
 8010fac:	1af3      	sublt	r3, r6, r3
 8010fae:	bfb4      	ite	lt
 8010fb0:	18d2      	addlt	r2, r2, r3
 8010fb2:	1b9e      	subge	r6, r3, r6
 8010fb4:	9b04      	ldr	r3, [sp, #16]
 8010fb6:	bfbc      	itt	lt
 8010fb8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8010fba:	2600      	movlt	r6, #0
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	bfb7      	itett	lt
 8010fc0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010fc4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010fc8:	1a9d      	sublt	r5, r3, r2
 8010fca:	2300      	movlt	r3, #0
 8010fcc:	e741      	b.n	8010e52 <_dtoa_r+0x742>
 8010fce:	9e08      	ldr	r6, [sp, #32]
 8010fd0:	9d05      	ldr	r5, [sp, #20]
 8010fd2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010fd4:	e748      	b.n	8010e68 <_dtoa_r+0x758>
 8010fd6:	9a08      	ldr	r2, [sp, #32]
 8010fd8:	e770      	b.n	8010ebc <_dtoa_r+0x7ac>
 8010fda:	9b07      	ldr	r3, [sp, #28]
 8010fdc:	2b01      	cmp	r3, #1
 8010fde:	dc19      	bgt.n	8011014 <_dtoa_r+0x904>
 8010fe0:	9b02      	ldr	r3, [sp, #8]
 8010fe2:	b9bb      	cbnz	r3, 8011014 <_dtoa_r+0x904>
 8010fe4:	9b03      	ldr	r3, [sp, #12]
 8010fe6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010fea:	b99b      	cbnz	r3, 8011014 <_dtoa_r+0x904>
 8010fec:	9b03      	ldr	r3, [sp, #12]
 8010fee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010ff2:	0d1b      	lsrs	r3, r3, #20
 8010ff4:	051b      	lsls	r3, r3, #20
 8010ff6:	b183      	cbz	r3, 801101a <_dtoa_r+0x90a>
 8010ff8:	9b05      	ldr	r3, [sp, #20]
 8010ffa:	3301      	adds	r3, #1
 8010ffc:	9305      	str	r3, [sp, #20]
 8010ffe:	9b06      	ldr	r3, [sp, #24]
 8011000:	3301      	adds	r3, #1
 8011002:	9306      	str	r3, [sp, #24]
 8011004:	f04f 0801 	mov.w	r8, #1
 8011008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801100a:	2b00      	cmp	r3, #0
 801100c:	f47f af6f 	bne.w	8010eee <_dtoa_r+0x7de>
 8011010:	2001      	movs	r0, #1
 8011012:	e774      	b.n	8010efe <_dtoa_r+0x7ee>
 8011014:	f04f 0800 	mov.w	r8, #0
 8011018:	e7f6      	b.n	8011008 <_dtoa_r+0x8f8>
 801101a:	4698      	mov	r8, r3
 801101c:	e7f4      	b.n	8011008 <_dtoa_r+0x8f8>
 801101e:	d082      	beq.n	8010f26 <_dtoa_r+0x816>
 8011020:	9a05      	ldr	r2, [sp, #20]
 8011022:	331c      	adds	r3, #28
 8011024:	441a      	add	r2, r3
 8011026:	9205      	str	r2, [sp, #20]
 8011028:	9a06      	ldr	r2, [sp, #24]
 801102a:	441a      	add	r2, r3
 801102c:	441d      	add	r5, r3
 801102e:	9206      	str	r2, [sp, #24]
 8011030:	e779      	b.n	8010f26 <_dtoa_r+0x816>
 8011032:	4603      	mov	r3, r0
 8011034:	e7f4      	b.n	8011020 <_dtoa_r+0x910>
 8011036:	9b04      	ldr	r3, [sp, #16]
 8011038:	2b00      	cmp	r3, #0
 801103a:	dc37      	bgt.n	80110ac <_dtoa_r+0x99c>
 801103c:	9b07      	ldr	r3, [sp, #28]
 801103e:	2b02      	cmp	r3, #2
 8011040:	dd34      	ble.n	80110ac <_dtoa_r+0x99c>
 8011042:	9b04      	ldr	r3, [sp, #16]
 8011044:	9301      	str	r3, [sp, #4]
 8011046:	9b01      	ldr	r3, [sp, #4]
 8011048:	b963      	cbnz	r3, 8011064 <_dtoa_r+0x954>
 801104a:	4631      	mov	r1, r6
 801104c:	2205      	movs	r2, #5
 801104e:	4620      	mov	r0, r4
 8011050:	f000 fab2 	bl	80115b8 <__multadd>
 8011054:	4601      	mov	r1, r0
 8011056:	4606      	mov	r6, r0
 8011058:	4650      	mov	r0, sl
 801105a:	f000 fcc7 	bl	80119ec <__mcmp>
 801105e:	2800      	cmp	r0, #0
 8011060:	f73f adbb 	bgt.w	8010bda <_dtoa_r+0x4ca>
 8011064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011066:	9d00      	ldr	r5, [sp, #0]
 8011068:	ea6f 0b03 	mvn.w	fp, r3
 801106c:	f04f 0800 	mov.w	r8, #0
 8011070:	4631      	mov	r1, r6
 8011072:	4620      	mov	r0, r4
 8011074:	f000 fa7e 	bl	8011574 <_Bfree>
 8011078:	2f00      	cmp	r7, #0
 801107a:	f43f aeab 	beq.w	8010dd4 <_dtoa_r+0x6c4>
 801107e:	f1b8 0f00 	cmp.w	r8, #0
 8011082:	d005      	beq.n	8011090 <_dtoa_r+0x980>
 8011084:	45b8      	cmp	r8, r7
 8011086:	d003      	beq.n	8011090 <_dtoa_r+0x980>
 8011088:	4641      	mov	r1, r8
 801108a:	4620      	mov	r0, r4
 801108c:	f000 fa72 	bl	8011574 <_Bfree>
 8011090:	4639      	mov	r1, r7
 8011092:	4620      	mov	r0, r4
 8011094:	f000 fa6e 	bl	8011574 <_Bfree>
 8011098:	e69c      	b.n	8010dd4 <_dtoa_r+0x6c4>
 801109a:	2600      	movs	r6, #0
 801109c:	4637      	mov	r7, r6
 801109e:	e7e1      	b.n	8011064 <_dtoa_r+0x954>
 80110a0:	46bb      	mov	fp, r7
 80110a2:	4637      	mov	r7, r6
 80110a4:	e599      	b.n	8010bda <_dtoa_r+0x4ca>
 80110a6:	bf00      	nop
 80110a8:	40240000 	.word	0x40240000
 80110ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	f000 80c8 	beq.w	8011244 <_dtoa_r+0xb34>
 80110b4:	9b04      	ldr	r3, [sp, #16]
 80110b6:	9301      	str	r3, [sp, #4]
 80110b8:	2d00      	cmp	r5, #0
 80110ba:	dd05      	ble.n	80110c8 <_dtoa_r+0x9b8>
 80110bc:	4639      	mov	r1, r7
 80110be:	462a      	mov	r2, r5
 80110c0:	4620      	mov	r0, r4
 80110c2:	f000 fc27 	bl	8011914 <__lshift>
 80110c6:	4607      	mov	r7, r0
 80110c8:	f1b8 0f00 	cmp.w	r8, #0
 80110cc:	d05b      	beq.n	8011186 <_dtoa_r+0xa76>
 80110ce:	6879      	ldr	r1, [r7, #4]
 80110d0:	4620      	mov	r0, r4
 80110d2:	f000 fa0f 	bl	80114f4 <_Balloc>
 80110d6:	4605      	mov	r5, r0
 80110d8:	b928      	cbnz	r0, 80110e6 <_dtoa_r+0x9d6>
 80110da:	4b83      	ldr	r3, [pc, #524]	; (80112e8 <_dtoa_r+0xbd8>)
 80110dc:	4602      	mov	r2, r0
 80110de:	f240 21ef 	movw	r1, #751	; 0x2ef
 80110e2:	f7ff bb2e 	b.w	8010742 <_dtoa_r+0x32>
 80110e6:	693a      	ldr	r2, [r7, #16]
 80110e8:	3202      	adds	r2, #2
 80110ea:	0092      	lsls	r2, r2, #2
 80110ec:	f107 010c 	add.w	r1, r7, #12
 80110f0:	300c      	adds	r0, #12
 80110f2:	f7ff fa74 	bl	80105de <memcpy>
 80110f6:	2201      	movs	r2, #1
 80110f8:	4629      	mov	r1, r5
 80110fa:	4620      	mov	r0, r4
 80110fc:	f000 fc0a 	bl	8011914 <__lshift>
 8011100:	9b00      	ldr	r3, [sp, #0]
 8011102:	3301      	adds	r3, #1
 8011104:	9304      	str	r3, [sp, #16]
 8011106:	e9dd 2300 	ldrd	r2, r3, [sp]
 801110a:	4413      	add	r3, r2
 801110c:	9308      	str	r3, [sp, #32]
 801110e:	9b02      	ldr	r3, [sp, #8]
 8011110:	f003 0301 	and.w	r3, r3, #1
 8011114:	46b8      	mov	r8, r7
 8011116:	9306      	str	r3, [sp, #24]
 8011118:	4607      	mov	r7, r0
 801111a:	9b04      	ldr	r3, [sp, #16]
 801111c:	4631      	mov	r1, r6
 801111e:	3b01      	subs	r3, #1
 8011120:	4650      	mov	r0, sl
 8011122:	9301      	str	r3, [sp, #4]
 8011124:	f7ff fa69 	bl	80105fa <quorem>
 8011128:	4641      	mov	r1, r8
 801112a:	9002      	str	r0, [sp, #8]
 801112c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011130:	4650      	mov	r0, sl
 8011132:	f000 fc5b 	bl	80119ec <__mcmp>
 8011136:	463a      	mov	r2, r7
 8011138:	9005      	str	r0, [sp, #20]
 801113a:	4631      	mov	r1, r6
 801113c:	4620      	mov	r0, r4
 801113e:	f000 fc71 	bl	8011a24 <__mdiff>
 8011142:	68c2      	ldr	r2, [r0, #12]
 8011144:	4605      	mov	r5, r0
 8011146:	bb02      	cbnz	r2, 801118a <_dtoa_r+0xa7a>
 8011148:	4601      	mov	r1, r0
 801114a:	4650      	mov	r0, sl
 801114c:	f000 fc4e 	bl	80119ec <__mcmp>
 8011150:	4602      	mov	r2, r0
 8011152:	4629      	mov	r1, r5
 8011154:	4620      	mov	r0, r4
 8011156:	9209      	str	r2, [sp, #36]	; 0x24
 8011158:	f000 fa0c 	bl	8011574 <_Bfree>
 801115c:	9b07      	ldr	r3, [sp, #28]
 801115e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011160:	9d04      	ldr	r5, [sp, #16]
 8011162:	ea43 0102 	orr.w	r1, r3, r2
 8011166:	9b06      	ldr	r3, [sp, #24]
 8011168:	4319      	orrs	r1, r3
 801116a:	d110      	bne.n	801118e <_dtoa_r+0xa7e>
 801116c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011170:	d029      	beq.n	80111c6 <_dtoa_r+0xab6>
 8011172:	9b05      	ldr	r3, [sp, #20]
 8011174:	2b00      	cmp	r3, #0
 8011176:	dd02      	ble.n	801117e <_dtoa_r+0xa6e>
 8011178:	9b02      	ldr	r3, [sp, #8]
 801117a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801117e:	9b01      	ldr	r3, [sp, #4]
 8011180:	f883 9000 	strb.w	r9, [r3]
 8011184:	e774      	b.n	8011070 <_dtoa_r+0x960>
 8011186:	4638      	mov	r0, r7
 8011188:	e7ba      	b.n	8011100 <_dtoa_r+0x9f0>
 801118a:	2201      	movs	r2, #1
 801118c:	e7e1      	b.n	8011152 <_dtoa_r+0xa42>
 801118e:	9b05      	ldr	r3, [sp, #20]
 8011190:	2b00      	cmp	r3, #0
 8011192:	db04      	blt.n	801119e <_dtoa_r+0xa8e>
 8011194:	9907      	ldr	r1, [sp, #28]
 8011196:	430b      	orrs	r3, r1
 8011198:	9906      	ldr	r1, [sp, #24]
 801119a:	430b      	orrs	r3, r1
 801119c:	d120      	bne.n	80111e0 <_dtoa_r+0xad0>
 801119e:	2a00      	cmp	r2, #0
 80111a0:	dded      	ble.n	801117e <_dtoa_r+0xa6e>
 80111a2:	4651      	mov	r1, sl
 80111a4:	2201      	movs	r2, #1
 80111a6:	4620      	mov	r0, r4
 80111a8:	f000 fbb4 	bl	8011914 <__lshift>
 80111ac:	4631      	mov	r1, r6
 80111ae:	4682      	mov	sl, r0
 80111b0:	f000 fc1c 	bl	80119ec <__mcmp>
 80111b4:	2800      	cmp	r0, #0
 80111b6:	dc03      	bgt.n	80111c0 <_dtoa_r+0xab0>
 80111b8:	d1e1      	bne.n	801117e <_dtoa_r+0xa6e>
 80111ba:	f019 0f01 	tst.w	r9, #1
 80111be:	d0de      	beq.n	801117e <_dtoa_r+0xa6e>
 80111c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80111c4:	d1d8      	bne.n	8011178 <_dtoa_r+0xa68>
 80111c6:	9a01      	ldr	r2, [sp, #4]
 80111c8:	2339      	movs	r3, #57	; 0x39
 80111ca:	7013      	strb	r3, [r2, #0]
 80111cc:	462b      	mov	r3, r5
 80111ce:	461d      	mov	r5, r3
 80111d0:	3b01      	subs	r3, #1
 80111d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80111d6:	2a39      	cmp	r2, #57	; 0x39
 80111d8:	d06c      	beq.n	80112b4 <_dtoa_r+0xba4>
 80111da:	3201      	adds	r2, #1
 80111dc:	701a      	strb	r2, [r3, #0]
 80111de:	e747      	b.n	8011070 <_dtoa_r+0x960>
 80111e0:	2a00      	cmp	r2, #0
 80111e2:	dd07      	ble.n	80111f4 <_dtoa_r+0xae4>
 80111e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80111e8:	d0ed      	beq.n	80111c6 <_dtoa_r+0xab6>
 80111ea:	9a01      	ldr	r2, [sp, #4]
 80111ec:	f109 0301 	add.w	r3, r9, #1
 80111f0:	7013      	strb	r3, [r2, #0]
 80111f2:	e73d      	b.n	8011070 <_dtoa_r+0x960>
 80111f4:	9b04      	ldr	r3, [sp, #16]
 80111f6:	9a08      	ldr	r2, [sp, #32]
 80111f8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80111fc:	4293      	cmp	r3, r2
 80111fe:	d043      	beq.n	8011288 <_dtoa_r+0xb78>
 8011200:	4651      	mov	r1, sl
 8011202:	2300      	movs	r3, #0
 8011204:	220a      	movs	r2, #10
 8011206:	4620      	mov	r0, r4
 8011208:	f000 f9d6 	bl	80115b8 <__multadd>
 801120c:	45b8      	cmp	r8, r7
 801120e:	4682      	mov	sl, r0
 8011210:	f04f 0300 	mov.w	r3, #0
 8011214:	f04f 020a 	mov.w	r2, #10
 8011218:	4641      	mov	r1, r8
 801121a:	4620      	mov	r0, r4
 801121c:	d107      	bne.n	801122e <_dtoa_r+0xb1e>
 801121e:	f000 f9cb 	bl	80115b8 <__multadd>
 8011222:	4680      	mov	r8, r0
 8011224:	4607      	mov	r7, r0
 8011226:	9b04      	ldr	r3, [sp, #16]
 8011228:	3301      	adds	r3, #1
 801122a:	9304      	str	r3, [sp, #16]
 801122c:	e775      	b.n	801111a <_dtoa_r+0xa0a>
 801122e:	f000 f9c3 	bl	80115b8 <__multadd>
 8011232:	4639      	mov	r1, r7
 8011234:	4680      	mov	r8, r0
 8011236:	2300      	movs	r3, #0
 8011238:	220a      	movs	r2, #10
 801123a:	4620      	mov	r0, r4
 801123c:	f000 f9bc 	bl	80115b8 <__multadd>
 8011240:	4607      	mov	r7, r0
 8011242:	e7f0      	b.n	8011226 <_dtoa_r+0xb16>
 8011244:	9b04      	ldr	r3, [sp, #16]
 8011246:	9301      	str	r3, [sp, #4]
 8011248:	9d00      	ldr	r5, [sp, #0]
 801124a:	4631      	mov	r1, r6
 801124c:	4650      	mov	r0, sl
 801124e:	f7ff f9d4 	bl	80105fa <quorem>
 8011252:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011256:	9b00      	ldr	r3, [sp, #0]
 8011258:	f805 9b01 	strb.w	r9, [r5], #1
 801125c:	1aea      	subs	r2, r5, r3
 801125e:	9b01      	ldr	r3, [sp, #4]
 8011260:	4293      	cmp	r3, r2
 8011262:	dd07      	ble.n	8011274 <_dtoa_r+0xb64>
 8011264:	4651      	mov	r1, sl
 8011266:	2300      	movs	r3, #0
 8011268:	220a      	movs	r2, #10
 801126a:	4620      	mov	r0, r4
 801126c:	f000 f9a4 	bl	80115b8 <__multadd>
 8011270:	4682      	mov	sl, r0
 8011272:	e7ea      	b.n	801124a <_dtoa_r+0xb3a>
 8011274:	9b01      	ldr	r3, [sp, #4]
 8011276:	2b00      	cmp	r3, #0
 8011278:	bfc8      	it	gt
 801127a:	461d      	movgt	r5, r3
 801127c:	9b00      	ldr	r3, [sp, #0]
 801127e:	bfd8      	it	le
 8011280:	2501      	movle	r5, #1
 8011282:	441d      	add	r5, r3
 8011284:	f04f 0800 	mov.w	r8, #0
 8011288:	4651      	mov	r1, sl
 801128a:	2201      	movs	r2, #1
 801128c:	4620      	mov	r0, r4
 801128e:	f000 fb41 	bl	8011914 <__lshift>
 8011292:	4631      	mov	r1, r6
 8011294:	4682      	mov	sl, r0
 8011296:	f000 fba9 	bl	80119ec <__mcmp>
 801129a:	2800      	cmp	r0, #0
 801129c:	dc96      	bgt.n	80111cc <_dtoa_r+0xabc>
 801129e:	d102      	bne.n	80112a6 <_dtoa_r+0xb96>
 80112a0:	f019 0f01 	tst.w	r9, #1
 80112a4:	d192      	bne.n	80111cc <_dtoa_r+0xabc>
 80112a6:	462b      	mov	r3, r5
 80112a8:	461d      	mov	r5, r3
 80112aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80112ae:	2a30      	cmp	r2, #48	; 0x30
 80112b0:	d0fa      	beq.n	80112a8 <_dtoa_r+0xb98>
 80112b2:	e6dd      	b.n	8011070 <_dtoa_r+0x960>
 80112b4:	9a00      	ldr	r2, [sp, #0]
 80112b6:	429a      	cmp	r2, r3
 80112b8:	d189      	bne.n	80111ce <_dtoa_r+0xabe>
 80112ba:	f10b 0b01 	add.w	fp, fp, #1
 80112be:	2331      	movs	r3, #49	; 0x31
 80112c0:	e796      	b.n	80111f0 <_dtoa_r+0xae0>
 80112c2:	4b0a      	ldr	r3, [pc, #40]	; (80112ec <_dtoa_r+0xbdc>)
 80112c4:	f7ff ba99 	b.w	80107fa <_dtoa_r+0xea>
 80112c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	f47f aa6d 	bne.w	80107aa <_dtoa_r+0x9a>
 80112d0:	4b07      	ldr	r3, [pc, #28]	; (80112f0 <_dtoa_r+0xbe0>)
 80112d2:	f7ff ba92 	b.w	80107fa <_dtoa_r+0xea>
 80112d6:	9b01      	ldr	r3, [sp, #4]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	dcb5      	bgt.n	8011248 <_dtoa_r+0xb38>
 80112dc:	9b07      	ldr	r3, [sp, #28]
 80112de:	2b02      	cmp	r3, #2
 80112e0:	f73f aeb1 	bgt.w	8011046 <_dtoa_r+0x936>
 80112e4:	e7b0      	b.n	8011248 <_dtoa_r+0xb38>
 80112e6:	bf00      	nop
 80112e8:	08014294 	.word	0x08014294
 80112ec:	080141f4 	.word	0x080141f4
 80112f0:	08014218 	.word	0x08014218

080112f4 <_free_r>:
 80112f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80112f6:	2900      	cmp	r1, #0
 80112f8:	d044      	beq.n	8011384 <_free_r+0x90>
 80112fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112fe:	9001      	str	r0, [sp, #4]
 8011300:	2b00      	cmp	r3, #0
 8011302:	f1a1 0404 	sub.w	r4, r1, #4
 8011306:	bfb8      	it	lt
 8011308:	18e4      	addlt	r4, r4, r3
 801130a:	f000 f8e7 	bl	80114dc <__malloc_lock>
 801130e:	4a1e      	ldr	r2, [pc, #120]	; (8011388 <_free_r+0x94>)
 8011310:	9801      	ldr	r0, [sp, #4]
 8011312:	6813      	ldr	r3, [r2, #0]
 8011314:	b933      	cbnz	r3, 8011324 <_free_r+0x30>
 8011316:	6063      	str	r3, [r4, #4]
 8011318:	6014      	str	r4, [r2, #0]
 801131a:	b003      	add	sp, #12
 801131c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011320:	f000 b8e2 	b.w	80114e8 <__malloc_unlock>
 8011324:	42a3      	cmp	r3, r4
 8011326:	d908      	bls.n	801133a <_free_r+0x46>
 8011328:	6825      	ldr	r5, [r4, #0]
 801132a:	1961      	adds	r1, r4, r5
 801132c:	428b      	cmp	r3, r1
 801132e:	bf01      	itttt	eq
 8011330:	6819      	ldreq	r1, [r3, #0]
 8011332:	685b      	ldreq	r3, [r3, #4]
 8011334:	1949      	addeq	r1, r1, r5
 8011336:	6021      	streq	r1, [r4, #0]
 8011338:	e7ed      	b.n	8011316 <_free_r+0x22>
 801133a:	461a      	mov	r2, r3
 801133c:	685b      	ldr	r3, [r3, #4]
 801133e:	b10b      	cbz	r3, 8011344 <_free_r+0x50>
 8011340:	42a3      	cmp	r3, r4
 8011342:	d9fa      	bls.n	801133a <_free_r+0x46>
 8011344:	6811      	ldr	r1, [r2, #0]
 8011346:	1855      	adds	r5, r2, r1
 8011348:	42a5      	cmp	r5, r4
 801134a:	d10b      	bne.n	8011364 <_free_r+0x70>
 801134c:	6824      	ldr	r4, [r4, #0]
 801134e:	4421      	add	r1, r4
 8011350:	1854      	adds	r4, r2, r1
 8011352:	42a3      	cmp	r3, r4
 8011354:	6011      	str	r1, [r2, #0]
 8011356:	d1e0      	bne.n	801131a <_free_r+0x26>
 8011358:	681c      	ldr	r4, [r3, #0]
 801135a:	685b      	ldr	r3, [r3, #4]
 801135c:	6053      	str	r3, [r2, #4]
 801135e:	440c      	add	r4, r1
 8011360:	6014      	str	r4, [r2, #0]
 8011362:	e7da      	b.n	801131a <_free_r+0x26>
 8011364:	d902      	bls.n	801136c <_free_r+0x78>
 8011366:	230c      	movs	r3, #12
 8011368:	6003      	str	r3, [r0, #0]
 801136a:	e7d6      	b.n	801131a <_free_r+0x26>
 801136c:	6825      	ldr	r5, [r4, #0]
 801136e:	1961      	adds	r1, r4, r5
 8011370:	428b      	cmp	r3, r1
 8011372:	bf04      	itt	eq
 8011374:	6819      	ldreq	r1, [r3, #0]
 8011376:	685b      	ldreq	r3, [r3, #4]
 8011378:	6063      	str	r3, [r4, #4]
 801137a:	bf04      	itt	eq
 801137c:	1949      	addeq	r1, r1, r5
 801137e:	6021      	streq	r1, [r4, #0]
 8011380:	6054      	str	r4, [r2, #4]
 8011382:	e7ca      	b.n	801131a <_free_r+0x26>
 8011384:	b003      	add	sp, #12
 8011386:	bd30      	pop	{r4, r5, pc}
 8011388:	20001968 	.word	0x20001968

0801138c <malloc>:
 801138c:	4b02      	ldr	r3, [pc, #8]	; (8011398 <malloc+0xc>)
 801138e:	4601      	mov	r1, r0
 8011390:	6818      	ldr	r0, [r3, #0]
 8011392:	f000 b823 	b.w	80113dc <_malloc_r>
 8011396:	bf00      	nop
 8011398:	200001d0 	.word	0x200001d0

0801139c <sbrk_aligned>:
 801139c:	b570      	push	{r4, r5, r6, lr}
 801139e:	4e0e      	ldr	r6, [pc, #56]	; (80113d8 <sbrk_aligned+0x3c>)
 80113a0:	460c      	mov	r4, r1
 80113a2:	6831      	ldr	r1, [r6, #0]
 80113a4:	4605      	mov	r5, r0
 80113a6:	b911      	cbnz	r1, 80113ae <sbrk_aligned+0x12>
 80113a8:	f001 f81a 	bl	80123e0 <_sbrk_r>
 80113ac:	6030      	str	r0, [r6, #0]
 80113ae:	4621      	mov	r1, r4
 80113b0:	4628      	mov	r0, r5
 80113b2:	f001 f815 	bl	80123e0 <_sbrk_r>
 80113b6:	1c43      	adds	r3, r0, #1
 80113b8:	d00a      	beq.n	80113d0 <sbrk_aligned+0x34>
 80113ba:	1cc4      	adds	r4, r0, #3
 80113bc:	f024 0403 	bic.w	r4, r4, #3
 80113c0:	42a0      	cmp	r0, r4
 80113c2:	d007      	beq.n	80113d4 <sbrk_aligned+0x38>
 80113c4:	1a21      	subs	r1, r4, r0
 80113c6:	4628      	mov	r0, r5
 80113c8:	f001 f80a 	bl	80123e0 <_sbrk_r>
 80113cc:	3001      	adds	r0, #1
 80113ce:	d101      	bne.n	80113d4 <sbrk_aligned+0x38>
 80113d0:	f04f 34ff 	mov.w	r4, #4294967295
 80113d4:	4620      	mov	r0, r4
 80113d6:	bd70      	pop	{r4, r5, r6, pc}
 80113d8:	2000196c 	.word	0x2000196c

080113dc <_malloc_r>:
 80113dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113e0:	1ccd      	adds	r5, r1, #3
 80113e2:	f025 0503 	bic.w	r5, r5, #3
 80113e6:	3508      	adds	r5, #8
 80113e8:	2d0c      	cmp	r5, #12
 80113ea:	bf38      	it	cc
 80113ec:	250c      	movcc	r5, #12
 80113ee:	2d00      	cmp	r5, #0
 80113f0:	4607      	mov	r7, r0
 80113f2:	db01      	blt.n	80113f8 <_malloc_r+0x1c>
 80113f4:	42a9      	cmp	r1, r5
 80113f6:	d905      	bls.n	8011404 <_malloc_r+0x28>
 80113f8:	230c      	movs	r3, #12
 80113fa:	603b      	str	r3, [r7, #0]
 80113fc:	2600      	movs	r6, #0
 80113fe:	4630      	mov	r0, r6
 8011400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011404:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80114d8 <_malloc_r+0xfc>
 8011408:	f000 f868 	bl	80114dc <__malloc_lock>
 801140c:	f8d8 3000 	ldr.w	r3, [r8]
 8011410:	461c      	mov	r4, r3
 8011412:	bb5c      	cbnz	r4, 801146c <_malloc_r+0x90>
 8011414:	4629      	mov	r1, r5
 8011416:	4638      	mov	r0, r7
 8011418:	f7ff ffc0 	bl	801139c <sbrk_aligned>
 801141c:	1c43      	adds	r3, r0, #1
 801141e:	4604      	mov	r4, r0
 8011420:	d155      	bne.n	80114ce <_malloc_r+0xf2>
 8011422:	f8d8 4000 	ldr.w	r4, [r8]
 8011426:	4626      	mov	r6, r4
 8011428:	2e00      	cmp	r6, #0
 801142a:	d145      	bne.n	80114b8 <_malloc_r+0xdc>
 801142c:	2c00      	cmp	r4, #0
 801142e:	d048      	beq.n	80114c2 <_malloc_r+0xe6>
 8011430:	6823      	ldr	r3, [r4, #0]
 8011432:	4631      	mov	r1, r6
 8011434:	4638      	mov	r0, r7
 8011436:	eb04 0903 	add.w	r9, r4, r3
 801143a:	f000 ffd1 	bl	80123e0 <_sbrk_r>
 801143e:	4581      	cmp	r9, r0
 8011440:	d13f      	bne.n	80114c2 <_malloc_r+0xe6>
 8011442:	6821      	ldr	r1, [r4, #0]
 8011444:	1a6d      	subs	r5, r5, r1
 8011446:	4629      	mov	r1, r5
 8011448:	4638      	mov	r0, r7
 801144a:	f7ff ffa7 	bl	801139c <sbrk_aligned>
 801144e:	3001      	adds	r0, #1
 8011450:	d037      	beq.n	80114c2 <_malloc_r+0xe6>
 8011452:	6823      	ldr	r3, [r4, #0]
 8011454:	442b      	add	r3, r5
 8011456:	6023      	str	r3, [r4, #0]
 8011458:	f8d8 3000 	ldr.w	r3, [r8]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d038      	beq.n	80114d2 <_malloc_r+0xf6>
 8011460:	685a      	ldr	r2, [r3, #4]
 8011462:	42a2      	cmp	r2, r4
 8011464:	d12b      	bne.n	80114be <_malloc_r+0xe2>
 8011466:	2200      	movs	r2, #0
 8011468:	605a      	str	r2, [r3, #4]
 801146a:	e00f      	b.n	801148c <_malloc_r+0xb0>
 801146c:	6822      	ldr	r2, [r4, #0]
 801146e:	1b52      	subs	r2, r2, r5
 8011470:	d41f      	bmi.n	80114b2 <_malloc_r+0xd6>
 8011472:	2a0b      	cmp	r2, #11
 8011474:	d917      	bls.n	80114a6 <_malloc_r+0xca>
 8011476:	1961      	adds	r1, r4, r5
 8011478:	42a3      	cmp	r3, r4
 801147a:	6025      	str	r5, [r4, #0]
 801147c:	bf18      	it	ne
 801147e:	6059      	strne	r1, [r3, #4]
 8011480:	6863      	ldr	r3, [r4, #4]
 8011482:	bf08      	it	eq
 8011484:	f8c8 1000 	streq.w	r1, [r8]
 8011488:	5162      	str	r2, [r4, r5]
 801148a:	604b      	str	r3, [r1, #4]
 801148c:	4638      	mov	r0, r7
 801148e:	f104 060b 	add.w	r6, r4, #11
 8011492:	f000 f829 	bl	80114e8 <__malloc_unlock>
 8011496:	f026 0607 	bic.w	r6, r6, #7
 801149a:	1d23      	adds	r3, r4, #4
 801149c:	1af2      	subs	r2, r6, r3
 801149e:	d0ae      	beq.n	80113fe <_malloc_r+0x22>
 80114a0:	1b9b      	subs	r3, r3, r6
 80114a2:	50a3      	str	r3, [r4, r2]
 80114a4:	e7ab      	b.n	80113fe <_malloc_r+0x22>
 80114a6:	42a3      	cmp	r3, r4
 80114a8:	6862      	ldr	r2, [r4, #4]
 80114aa:	d1dd      	bne.n	8011468 <_malloc_r+0x8c>
 80114ac:	f8c8 2000 	str.w	r2, [r8]
 80114b0:	e7ec      	b.n	801148c <_malloc_r+0xb0>
 80114b2:	4623      	mov	r3, r4
 80114b4:	6864      	ldr	r4, [r4, #4]
 80114b6:	e7ac      	b.n	8011412 <_malloc_r+0x36>
 80114b8:	4634      	mov	r4, r6
 80114ba:	6876      	ldr	r6, [r6, #4]
 80114bc:	e7b4      	b.n	8011428 <_malloc_r+0x4c>
 80114be:	4613      	mov	r3, r2
 80114c0:	e7cc      	b.n	801145c <_malloc_r+0x80>
 80114c2:	230c      	movs	r3, #12
 80114c4:	603b      	str	r3, [r7, #0]
 80114c6:	4638      	mov	r0, r7
 80114c8:	f000 f80e 	bl	80114e8 <__malloc_unlock>
 80114cc:	e797      	b.n	80113fe <_malloc_r+0x22>
 80114ce:	6025      	str	r5, [r4, #0]
 80114d0:	e7dc      	b.n	801148c <_malloc_r+0xb0>
 80114d2:	605b      	str	r3, [r3, #4]
 80114d4:	deff      	udf	#255	; 0xff
 80114d6:	bf00      	nop
 80114d8:	20001968 	.word	0x20001968

080114dc <__malloc_lock>:
 80114dc:	4801      	ldr	r0, [pc, #4]	; (80114e4 <__malloc_lock+0x8>)
 80114de:	f7ff b87c 	b.w	80105da <__retarget_lock_acquire_recursive>
 80114e2:	bf00      	nop
 80114e4:	20001964 	.word	0x20001964

080114e8 <__malloc_unlock>:
 80114e8:	4801      	ldr	r0, [pc, #4]	; (80114f0 <__malloc_unlock+0x8>)
 80114ea:	f7ff b877 	b.w	80105dc <__retarget_lock_release_recursive>
 80114ee:	bf00      	nop
 80114f0:	20001964 	.word	0x20001964

080114f4 <_Balloc>:
 80114f4:	b570      	push	{r4, r5, r6, lr}
 80114f6:	69c6      	ldr	r6, [r0, #28]
 80114f8:	4604      	mov	r4, r0
 80114fa:	460d      	mov	r5, r1
 80114fc:	b976      	cbnz	r6, 801151c <_Balloc+0x28>
 80114fe:	2010      	movs	r0, #16
 8011500:	f7ff ff44 	bl	801138c <malloc>
 8011504:	4602      	mov	r2, r0
 8011506:	61e0      	str	r0, [r4, #28]
 8011508:	b920      	cbnz	r0, 8011514 <_Balloc+0x20>
 801150a:	4b18      	ldr	r3, [pc, #96]	; (801156c <_Balloc+0x78>)
 801150c:	4818      	ldr	r0, [pc, #96]	; (8011570 <_Balloc+0x7c>)
 801150e:	216b      	movs	r1, #107	; 0x6b
 8011510:	f000 ff76 	bl	8012400 <__assert_func>
 8011514:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011518:	6006      	str	r6, [r0, #0]
 801151a:	60c6      	str	r6, [r0, #12]
 801151c:	69e6      	ldr	r6, [r4, #28]
 801151e:	68f3      	ldr	r3, [r6, #12]
 8011520:	b183      	cbz	r3, 8011544 <_Balloc+0x50>
 8011522:	69e3      	ldr	r3, [r4, #28]
 8011524:	68db      	ldr	r3, [r3, #12]
 8011526:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801152a:	b9b8      	cbnz	r0, 801155c <_Balloc+0x68>
 801152c:	2101      	movs	r1, #1
 801152e:	fa01 f605 	lsl.w	r6, r1, r5
 8011532:	1d72      	adds	r2, r6, #5
 8011534:	0092      	lsls	r2, r2, #2
 8011536:	4620      	mov	r0, r4
 8011538:	f000 ff80 	bl	801243c <_calloc_r>
 801153c:	b160      	cbz	r0, 8011558 <_Balloc+0x64>
 801153e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011542:	e00e      	b.n	8011562 <_Balloc+0x6e>
 8011544:	2221      	movs	r2, #33	; 0x21
 8011546:	2104      	movs	r1, #4
 8011548:	4620      	mov	r0, r4
 801154a:	f000 ff77 	bl	801243c <_calloc_r>
 801154e:	69e3      	ldr	r3, [r4, #28]
 8011550:	60f0      	str	r0, [r6, #12]
 8011552:	68db      	ldr	r3, [r3, #12]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d1e4      	bne.n	8011522 <_Balloc+0x2e>
 8011558:	2000      	movs	r0, #0
 801155a:	bd70      	pop	{r4, r5, r6, pc}
 801155c:	6802      	ldr	r2, [r0, #0]
 801155e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011562:	2300      	movs	r3, #0
 8011564:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011568:	e7f7      	b.n	801155a <_Balloc+0x66>
 801156a:	bf00      	nop
 801156c:	08014225 	.word	0x08014225
 8011570:	080142a5 	.word	0x080142a5

08011574 <_Bfree>:
 8011574:	b570      	push	{r4, r5, r6, lr}
 8011576:	69c6      	ldr	r6, [r0, #28]
 8011578:	4605      	mov	r5, r0
 801157a:	460c      	mov	r4, r1
 801157c:	b976      	cbnz	r6, 801159c <_Bfree+0x28>
 801157e:	2010      	movs	r0, #16
 8011580:	f7ff ff04 	bl	801138c <malloc>
 8011584:	4602      	mov	r2, r0
 8011586:	61e8      	str	r0, [r5, #28]
 8011588:	b920      	cbnz	r0, 8011594 <_Bfree+0x20>
 801158a:	4b09      	ldr	r3, [pc, #36]	; (80115b0 <_Bfree+0x3c>)
 801158c:	4809      	ldr	r0, [pc, #36]	; (80115b4 <_Bfree+0x40>)
 801158e:	218f      	movs	r1, #143	; 0x8f
 8011590:	f000 ff36 	bl	8012400 <__assert_func>
 8011594:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011598:	6006      	str	r6, [r0, #0]
 801159a:	60c6      	str	r6, [r0, #12]
 801159c:	b13c      	cbz	r4, 80115ae <_Bfree+0x3a>
 801159e:	69eb      	ldr	r3, [r5, #28]
 80115a0:	6862      	ldr	r2, [r4, #4]
 80115a2:	68db      	ldr	r3, [r3, #12]
 80115a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80115a8:	6021      	str	r1, [r4, #0]
 80115aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80115ae:	bd70      	pop	{r4, r5, r6, pc}
 80115b0:	08014225 	.word	0x08014225
 80115b4:	080142a5 	.word	0x080142a5

080115b8 <__multadd>:
 80115b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115bc:	690d      	ldr	r5, [r1, #16]
 80115be:	4607      	mov	r7, r0
 80115c0:	460c      	mov	r4, r1
 80115c2:	461e      	mov	r6, r3
 80115c4:	f101 0c14 	add.w	ip, r1, #20
 80115c8:	2000      	movs	r0, #0
 80115ca:	f8dc 3000 	ldr.w	r3, [ip]
 80115ce:	b299      	uxth	r1, r3
 80115d0:	fb02 6101 	mla	r1, r2, r1, r6
 80115d4:	0c1e      	lsrs	r6, r3, #16
 80115d6:	0c0b      	lsrs	r3, r1, #16
 80115d8:	fb02 3306 	mla	r3, r2, r6, r3
 80115dc:	b289      	uxth	r1, r1
 80115de:	3001      	adds	r0, #1
 80115e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80115e4:	4285      	cmp	r5, r0
 80115e6:	f84c 1b04 	str.w	r1, [ip], #4
 80115ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80115ee:	dcec      	bgt.n	80115ca <__multadd+0x12>
 80115f0:	b30e      	cbz	r6, 8011636 <__multadd+0x7e>
 80115f2:	68a3      	ldr	r3, [r4, #8]
 80115f4:	42ab      	cmp	r3, r5
 80115f6:	dc19      	bgt.n	801162c <__multadd+0x74>
 80115f8:	6861      	ldr	r1, [r4, #4]
 80115fa:	4638      	mov	r0, r7
 80115fc:	3101      	adds	r1, #1
 80115fe:	f7ff ff79 	bl	80114f4 <_Balloc>
 8011602:	4680      	mov	r8, r0
 8011604:	b928      	cbnz	r0, 8011612 <__multadd+0x5a>
 8011606:	4602      	mov	r2, r0
 8011608:	4b0c      	ldr	r3, [pc, #48]	; (801163c <__multadd+0x84>)
 801160a:	480d      	ldr	r0, [pc, #52]	; (8011640 <__multadd+0x88>)
 801160c:	21ba      	movs	r1, #186	; 0xba
 801160e:	f000 fef7 	bl	8012400 <__assert_func>
 8011612:	6922      	ldr	r2, [r4, #16]
 8011614:	3202      	adds	r2, #2
 8011616:	f104 010c 	add.w	r1, r4, #12
 801161a:	0092      	lsls	r2, r2, #2
 801161c:	300c      	adds	r0, #12
 801161e:	f7fe ffde 	bl	80105de <memcpy>
 8011622:	4621      	mov	r1, r4
 8011624:	4638      	mov	r0, r7
 8011626:	f7ff ffa5 	bl	8011574 <_Bfree>
 801162a:	4644      	mov	r4, r8
 801162c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011630:	3501      	adds	r5, #1
 8011632:	615e      	str	r6, [r3, #20]
 8011634:	6125      	str	r5, [r4, #16]
 8011636:	4620      	mov	r0, r4
 8011638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801163c:	08014294 	.word	0x08014294
 8011640:	080142a5 	.word	0x080142a5

08011644 <__hi0bits>:
 8011644:	0c03      	lsrs	r3, r0, #16
 8011646:	041b      	lsls	r3, r3, #16
 8011648:	b9d3      	cbnz	r3, 8011680 <__hi0bits+0x3c>
 801164a:	0400      	lsls	r0, r0, #16
 801164c:	2310      	movs	r3, #16
 801164e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011652:	bf04      	itt	eq
 8011654:	0200      	lsleq	r0, r0, #8
 8011656:	3308      	addeq	r3, #8
 8011658:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801165c:	bf04      	itt	eq
 801165e:	0100      	lsleq	r0, r0, #4
 8011660:	3304      	addeq	r3, #4
 8011662:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011666:	bf04      	itt	eq
 8011668:	0080      	lsleq	r0, r0, #2
 801166a:	3302      	addeq	r3, #2
 801166c:	2800      	cmp	r0, #0
 801166e:	db05      	blt.n	801167c <__hi0bits+0x38>
 8011670:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011674:	f103 0301 	add.w	r3, r3, #1
 8011678:	bf08      	it	eq
 801167a:	2320      	moveq	r3, #32
 801167c:	4618      	mov	r0, r3
 801167e:	4770      	bx	lr
 8011680:	2300      	movs	r3, #0
 8011682:	e7e4      	b.n	801164e <__hi0bits+0xa>

08011684 <__lo0bits>:
 8011684:	6803      	ldr	r3, [r0, #0]
 8011686:	f013 0207 	ands.w	r2, r3, #7
 801168a:	d00c      	beq.n	80116a6 <__lo0bits+0x22>
 801168c:	07d9      	lsls	r1, r3, #31
 801168e:	d422      	bmi.n	80116d6 <__lo0bits+0x52>
 8011690:	079a      	lsls	r2, r3, #30
 8011692:	bf49      	itett	mi
 8011694:	085b      	lsrmi	r3, r3, #1
 8011696:	089b      	lsrpl	r3, r3, #2
 8011698:	6003      	strmi	r3, [r0, #0]
 801169a:	2201      	movmi	r2, #1
 801169c:	bf5c      	itt	pl
 801169e:	6003      	strpl	r3, [r0, #0]
 80116a0:	2202      	movpl	r2, #2
 80116a2:	4610      	mov	r0, r2
 80116a4:	4770      	bx	lr
 80116a6:	b299      	uxth	r1, r3
 80116a8:	b909      	cbnz	r1, 80116ae <__lo0bits+0x2a>
 80116aa:	0c1b      	lsrs	r3, r3, #16
 80116ac:	2210      	movs	r2, #16
 80116ae:	b2d9      	uxtb	r1, r3
 80116b0:	b909      	cbnz	r1, 80116b6 <__lo0bits+0x32>
 80116b2:	3208      	adds	r2, #8
 80116b4:	0a1b      	lsrs	r3, r3, #8
 80116b6:	0719      	lsls	r1, r3, #28
 80116b8:	bf04      	itt	eq
 80116ba:	091b      	lsreq	r3, r3, #4
 80116bc:	3204      	addeq	r2, #4
 80116be:	0799      	lsls	r1, r3, #30
 80116c0:	bf04      	itt	eq
 80116c2:	089b      	lsreq	r3, r3, #2
 80116c4:	3202      	addeq	r2, #2
 80116c6:	07d9      	lsls	r1, r3, #31
 80116c8:	d403      	bmi.n	80116d2 <__lo0bits+0x4e>
 80116ca:	085b      	lsrs	r3, r3, #1
 80116cc:	f102 0201 	add.w	r2, r2, #1
 80116d0:	d003      	beq.n	80116da <__lo0bits+0x56>
 80116d2:	6003      	str	r3, [r0, #0]
 80116d4:	e7e5      	b.n	80116a2 <__lo0bits+0x1e>
 80116d6:	2200      	movs	r2, #0
 80116d8:	e7e3      	b.n	80116a2 <__lo0bits+0x1e>
 80116da:	2220      	movs	r2, #32
 80116dc:	e7e1      	b.n	80116a2 <__lo0bits+0x1e>
	...

080116e0 <__i2b>:
 80116e0:	b510      	push	{r4, lr}
 80116e2:	460c      	mov	r4, r1
 80116e4:	2101      	movs	r1, #1
 80116e6:	f7ff ff05 	bl	80114f4 <_Balloc>
 80116ea:	4602      	mov	r2, r0
 80116ec:	b928      	cbnz	r0, 80116fa <__i2b+0x1a>
 80116ee:	4b05      	ldr	r3, [pc, #20]	; (8011704 <__i2b+0x24>)
 80116f0:	4805      	ldr	r0, [pc, #20]	; (8011708 <__i2b+0x28>)
 80116f2:	f240 1145 	movw	r1, #325	; 0x145
 80116f6:	f000 fe83 	bl	8012400 <__assert_func>
 80116fa:	2301      	movs	r3, #1
 80116fc:	6144      	str	r4, [r0, #20]
 80116fe:	6103      	str	r3, [r0, #16]
 8011700:	bd10      	pop	{r4, pc}
 8011702:	bf00      	nop
 8011704:	08014294 	.word	0x08014294
 8011708:	080142a5 	.word	0x080142a5

0801170c <__multiply>:
 801170c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011710:	4691      	mov	r9, r2
 8011712:	690a      	ldr	r2, [r1, #16]
 8011714:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011718:	429a      	cmp	r2, r3
 801171a:	bfb8      	it	lt
 801171c:	460b      	movlt	r3, r1
 801171e:	460c      	mov	r4, r1
 8011720:	bfbc      	itt	lt
 8011722:	464c      	movlt	r4, r9
 8011724:	4699      	movlt	r9, r3
 8011726:	6927      	ldr	r7, [r4, #16]
 8011728:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801172c:	68a3      	ldr	r3, [r4, #8]
 801172e:	6861      	ldr	r1, [r4, #4]
 8011730:	eb07 060a 	add.w	r6, r7, sl
 8011734:	42b3      	cmp	r3, r6
 8011736:	b085      	sub	sp, #20
 8011738:	bfb8      	it	lt
 801173a:	3101      	addlt	r1, #1
 801173c:	f7ff feda 	bl	80114f4 <_Balloc>
 8011740:	b930      	cbnz	r0, 8011750 <__multiply+0x44>
 8011742:	4602      	mov	r2, r0
 8011744:	4b44      	ldr	r3, [pc, #272]	; (8011858 <__multiply+0x14c>)
 8011746:	4845      	ldr	r0, [pc, #276]	; (801185c <__multiply+0x150>)
 8011748:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801174c:	f000 fe58 	bl	8012400 <__assert_func>
 8011750:	f100 0514 	add.w	r5, r0, #20
 8011754:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011758:	462b      	mov	r3, r5
 801175a:	2200      	movs	r2, #0
 801175c:	4543      	cmp	r3, r8
 801175e:	d321      	bcc.n	80117a4 <__multiply+0x98>
 8011760:	f104 0314 	add.w	r3, r4, #20
 8011764:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011768:	f109 0314 	add.w	r3, r9, #20
 801176c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011770:	9202      	str	r2, [sp, #8]
 8011772:	1b3a      	subs	r2, r7, r4
 8011774:	3a15      	subs	r2, #21
 8011776:	f022 0203 	bic.w	r2, r2, #3
 801177a:	3204      	adds	r2, #4
 801177c:	f104 0115 	add.w	r1, r4, #21
 8011780:	428f      	cmp	r7, r1
 8011782:	bf38      	it	cc
 8011784:	2204      	movcc	r2, #4
 8011786:	9201      	str	r2, [sp, #4]
 8011788:	9a02      	ldr	r2, [sp, #8]
 801178a:	9303      	str	r3, [sp, #12]
 801178c:	429a      	cmp	r2, r3
 801178e:	d80c      	bhi.n	80117aa <__multiply+0x9e>
 8011790:	2e00      	cmp	r6, #0
 8011792:	dd03      	ble.n	801179c <__multiply+0x90>
 8011794:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011798:	2b00      	cmp	r3, #0
 801179a:	d05b      	beq.n	8011854 <__multiply+0x148>
 801179c:	6106      	str	r6, [r0, #16]
 801179e:	b005      	add	sp, #20
 80117a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117a4:	f843 2b04 	str.w	r2, [r3], #4
 80117a8:	e7d8      	b.n	801175c <__multiply+0x50>
 80117aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80117ae:	f1ba 0f00 	cmp.w	sl, #0
 80117b2:	d024      	beq.n	80117fe <__multiply+0xf2>
 80117b4:	f104 0e14 	add.w	lr, r4, #20
 80117b8:	46a9      	mov	r9, r5
 80117ba:	f04f 0c00 	mov.w	ip, #0
 80117be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80117c2:	f8d9 1000 	ldr.w	r1, [r9]
 80117c6:	fa1f fb82 	uxth.w	fp, r2
 80117ca:	b289      	uxth	r1, r1
 80117cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80117d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80117d4:	f8d9 2000 	ldr.w	r2, [r9]
 80117d8:	4461      	add	r1, ip
 80117da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80117de:	fb0a c20b 	mla	r2, sl, fp, ip
 80117e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80117e6:	b289      	uxth	r1, r1
 80117e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80117ec:	4577      	cmp	r7, lr
 80117ee:	f849 1b04 	str.w	r1, [r9], #4
 80117f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80117f6:	d8e2      	bhi.n	80117be <__multiply+0xb2>
 80117f8:	9a01      	ldr	r2, [sp, #4]
 80117fa:	f845 c002 	str.w	ip, [r5, r2]
 80117fe:	9a03      	ldr	r2, [sp, #12]
 8011800:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011804:	3304      	adds	r3, #4
 8011806:	f1b9 0f00 	cmp.w	r9, #0
 801180a:	d021      	beq.n	8011850 <__multiply+0x144>
 801180c:	6829      	ldr	r1, [r5, #0]
 801180e:	f104 0c14 	add.w	ip, r4, #20
 8011812:	46ae      	mov	lr, r5
 8011814:	f04f 0a00 	mov.w	sl, #0
 8011818:	f8bc b000 	ldrh.w	fp, [ip]
 801181c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011820:	fb09 220b 	mla	r2, r9, fp, r2
 8011824:	4452      	add	r2, sl
 8011826:	b289      	uxth	r1, r1
 8011828:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801182c:	f84e 1b04 	str.w	r1, [lr], #4
 8011830:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011834:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011838:	f8be 1000 	ldrh.w	r1, [lr]
 801183c:	fb09 110a 	mla	r1, r9, sl, r1
 8011840:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011844:	4567      	cmp	r7, ip
 8011846:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801184a:	d8e5      	bhi.n	8011818 <__multiply+0x10c>
 801184c:	9a01      	ldr	r2, [sp, #4]
 801184e:	50a9      	str	r1, [r5, r2]
 8011850:	3504      	adds	r5, #4
 8011852:	e799      	b.n	8011788 <__multiply+0x7c>
 8011854:	3e01      	subs	r6, #1
 8011856:	e79b      	b.n	8011790 <__multiply+0x84>
 8011858:	08014294 	.word	0x08014294
 801185c:	080142a5 	.word	0x080142a5

08011860 <__pow5mult>:
 8011860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011864:	4615      	mov	r5, r2
 8011866:	f012 0203 	ands.w	r2, r2, #3
 801186a:	4606      	mov	r6, r0
 801186c:	460f      	mov	r7, r1
 801186e:	d007      	beq.n	8011880 <__pow5mult+0x20>
 8011870:	4c25      	ldr	r4, [pc, #148]	; (8011908 <__pow5mult+0xa8>)
 8011872:	3a01      	subs	r2, #1
 8011874:	2300      	movs	r3, #0
 8011876:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801187a:	f7ff fe9d 	bl	80115b8 <__multadd>
 801187e:	4607      	mov	r7, r0
 8011880:	10ad      	asrs	r5, r5, #2
 8011882:	d03d      	beq.n	8011900 <__pow5mult+0xa0>
 8011884:	69f4      	ldr	r4, [r6, #28]
 8011886:	b97c      	cbnz	r4, 80118a8 <__pow5mult+0x48>
 8011888:	2010      	movs	r0, #16
 801188a:	f7ff fd7f 	bl	801138c <malloc>
 801188e:	4602      	mov	r2, r0
 8011890:	61f0      	str	r0, [r6, #28]
 8011892:	b928      	cbnz	r0, 80118a0 <__pow5mult+0x40>
 8011894:	4b1d      	ldr	r3, [pc, #116]	; (801190c <__pow5mult+0xac>)
 8011896:	481e      	ldr	r0, [pc, #120]	; (8011910 <__pow5mult+0xb0>)
 8011898:	f240 11b3 	movw	r1, #435	; 0x1b3
 801189c:	f000 fdb0 	bl	8012400 <__assert_func>
 80118a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80118a4:	6004      	str	r4, [r0, #0]
 80118a6:	60c4      	str	r4, [r0, #12]
 80118a8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80118ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80118b0:	b94c      	cbnz	r4, 80118c6 <__pow5mult+0x66>
 80118b2:	f240 2171 	movw	r1, #625	; 0x271
 80118b6:	4630      	mov	r0, r6
 80118b8:	f7ff ff12 	bl	80116e0 <__i2b>
 80118bc:	2300      	movs	r3, #0
 80118be:	f8c8 0008 	str.w	r0, [r8, #8]
 80118c2:	4604      	mov	r4, r0
 80118c4:	6003      	str	r3, [r0, #0]
 80118c6:	f04f 0900 	mov.w	r9, #0
 80118ca:	07eb      	lsls	r3, r5, #31
 80118cc:	d50a      	bpl.n	80118e4 <__pow5mult+0x84>
 80118ce:	4639      	mov	r1, r7
 80118d0:	4622      	mov	r2, r4
 80118d2:	4630      	mov	r0, r6
 80118d4:	f7ff ff1a 	bl	801170c <__multiply>
 80118d8:	4639      	mov	r1, r7
 80118da:	4680      	mov	r8, r0
 80118dc:	4630      	mov	r0, r6
 80118de:	f7ff fe49 	bl	8011574 <_Bfree>
 80118e2:	4647      	mov	r7, r8
 80118e4:	106d      	asrs	r5, r5, #1
 80118e6:	d00b      	beq.n	8011900 <__pow5mult+0xa0>
 80118e8:	6820      	ldr	r0, [r4, #0]
 80118ea:	b938      	cbnz	r0, 80118fc <__pow5mult+0x9c>
 80118ec:	4622      	mov	r2, r4
 80118ee:	4621      	mov	r1, r4
 80118f0:	4630      	mov	r0, r6
 80118f2:	f7ff ff0b 	bl	801170c <__multiply>
 80118f6:	6020      	str	r0, [r4, #0]
 80118f8:	f8c0 9000 	str.w	r9, [r0]
 80118fc:	4604      	mov	r4, r0
 80118fe:	e7e4      	b.n	80118ca <__pow5mult+0x6a>
 8011900:	4638      	mov	r0, r7
 8011902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011906:	bf00      	nop
 8011908:	080143f0 	.word	0x080143f0
 801190c:	08014225 	.word	0x08014225
 8011910:	080142a5 	.word	0x080142a5

08011914 <__lshift>:
 8011914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011918:	460c      	mov	r4, r1
 801191a:	6849      	ldr	r1, [r1, #4]
 801191c:	6923      	ldr	r3, [r4, #16]
 801191e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011922:	68a3      	ldr	r3, [r4, #8]
 8011924:	4607      	mov	r7, r0
 8011926:	4691      	mov	r9, r2
 8011928:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801192c:	f108 0601 	add.w	r6, r8, #1
 8011930:	42b3      	cmp	r3, r6
 8011932:	db0b      	blt.n	801194c <__lshift+0x38>
 8011934:	4638      	mov	r0, r7
 8011936:	f7ff fddd 	bl	80114f4 <_Balloc>
 801193a:	4605      	mov	r5, r0
 801193c:	b948      	cbnz	r0, 8011952 <__lshift+0x3e>
 801193e:	4602      	mov	r2, r0
 8011940:	4b28      	ldr	r3, [pc, #160]	; (80119e4 <__lshift+0xd0>)
 8011942:	4829      	ldr	r0, [pc, #164]	; (80119e8 <__lshift+0xd4>)
 8011944:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011948:	f000 fd5a 	bl	8012400 <__assert_func>
 801194c:	3101      	adds	r1, #1
 801194e:	005b      	lsls	r3, r3, #1
 8011950:	e7ee      	b.n	8011930 <__lshift+0x1c>
 8011952:	2300      	movs	r3, #0
 8011954:	f100 0114 	add.w	r1, r0, #20
 8011958:	f100 0210 	add.w	r2, r0, #16
 801195c:	4618      	mov	r0, r3
 801195e:	4553      	cmp	r3, sl
 8011960:	db33      	blt.n	80119ca <__lshift+0xb6>
 8011962:	6920      	ldr	r0, [r4, #16]
 8011964:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011968:	f104 0314 	add.w	r3, r4, #20
 801196c:	f019 091f 	ands.w	r9, r9, #31
 8011970:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011974:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011978:	d02b      	beq.n	80119d2 <__lshift+0xbe>
 801197a:	f1c9 0e20 	rsb	lr, r9, #32
 801197e:	468a      	mov	sl, r1
 8011980:	2200      	movs	r2, #0
 8011982:	6818      	ldr	r0, [r3, #0]
 8011984:	fa00 f009 	lsl.w	r0, r0, r9
 8011988:	4310      	orrs	r0, r2
 801198a:	f84a 0b04 	str.w	r0, [sl], #4
 801198e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011992:	459c      	cmp	ip, r3
 8011994:	fa22 f20e 	lsr.w	r2, r2, lr
 8011998:	d8f3      	bhi.n	8011982 <__lshift+0x6e>
 801199a:	ebac 0304 	sub.w	r3, ip, r4
 801199e:	3b15      	subs	r3, #21
 80119a0:	f023 0303 	bic.w	r3, r3, #3
 80119a4:	3304      	adds	r3, #4
 80119a6:	f104 0015 	add.w	r0, r4, #21
 80119aa:	4584      	cmp	ip, r0
 80119ac:	bf38      	it	cc
 80119ae:	2304      	movcc	r3, #4
 80119b0:	50ca      	str	r2, [r1, r3]
 80119b2:	b10a      	cbz	r2, 80119b8 <__lshift+0xa4>
 80119b4:	f108 0602 	add.w	r6, r8, #2
 80119b8:	3e01      	subs	r6, #1
 80119ba:	4638      	mov	r0, r7
 80119bc:	612e      	str	r6, [r5, #16]
 80119be:	4621      	mov	r1, r4
 80119c0:	f7ff fdd8 	bl	8011574 <_Bfree>
 80119c4:	4628      	mov	r0, r5
 80119c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80119ce:	3301      	adds	r3, #1
 80119d0:	e7c5      	b.n	801195e <__lshift+0x4a>
 80119d2:	3904      	subs	r1, #4
 80119d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80119d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80119dc:	459c      	cmp	ip, r3
 80119de:	d8f9      	bhi.n	80119d4 <__lshift+0xc0>
 80119e0:	e7ea      	b.n	80119b8 <__lshift+0xa4>
 80119e2:	bf00      	nop
 80119e4:	08014294 	.word	0x08014294
 80119e8:	080142a5 	.word	0x080142a5

080119ec <__mcmp>:
 80119ec:	b530      	push	{r4, r5, lr}
 80119ee:	6902      	ldr	r2, [r0, #16]
 80119f0:	690c      	ldr	r4, [r1, #16]
 80119f2:	1b12      	subs	r2, r2, r4
 80119f4:	d10e      	bne.n	8011a14 <__mcmp+0x28>
 80119f6:	f100 0314 	add.w	r3, r0, #20
 80119fa:	3114      	adds	r1, #20
 80119fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011a00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011a04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011a08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011a0c:	42a5      	cmp	r5, r4
 8011a0e:	d003      	beq.n	8011a18 <__mcmp+0x2c>
 8011a10:	d305      	bcc.n	8011a1e <__mcmp+0x32>
 8011a12:	2201      	movs	r2, #1
 8011a14:	4610      	mov	r0, r2
 8011a16:	bd30      	pop	{r4, r5, pc}
 8011a18:	4283      	cmp	r3, r0
 8011a1a:	d3f3      	bcc.n	8011a04 <__mcmp+0x18>
 8011a1c:	e7fa      	b.n	8011a14 <__mcmp+0x28>
 8011a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8011a22:	e7f7      	b.n	8011a14 <__mcmp+0x28>

08011a24 <__mdiff>:
 8011a24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a28:	460c      	mov	r4, r1
 8011a2a:	4606      	mov	r6, r0
 8011a2c:	4611      	mov	r1, r2
 8011a2e:	4620      	mov	r0, r4
 8011a30:	4690      	mov	r8, r2
 8011a32:	f7ff ffdb 	bl	80119ec <__mcmp>
 8011a36:	1e05      	subs	r5, r0, #0
 8011a38:	d110      	bne.n	8011a5c <__mdiff+0x38>
 8011a3a:	4629      	mov	r1, r5
 8011a3c:	4630      	mov	r0, r6
 8011a3e:	f7ff fd59 	bl	80114f4 <_Balloc>
 8011a42:	b930      	cbnz	r0, 8011a52 <__mdiff+0x2e>
 8011a44:	4b3a      	ldr	r3, [pc, #232]	; (8011b30 <__mdiff+0x10c>)
 8011a46:	4602      	mov	r2, r0
 8011a48:	f240 2137 	movw	r1, #567	; 0x237
 8011a4c:	4839      	ldr	r0, [pc, #228]	; (8011b34 <__mdiff+0x110>)
 8011a4e:	f000 fcd7 	bl	8012400 <__assert_func>
 8011a52:	2301      	movs	r3, #1
 8011a54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011a58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a5c:	bfa4      	itt	ge
 8011a5e:	4643      	movge	r3, r8
 8011a60:	46a0      	movge	r8, r4
 8011a62:	4630      	mov	r0, r6
 8011a64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011a68:	bfa6      	itte	ge
 8011a6a:	461c      	movge	r4, r3
 8011a6c:	2500      	movge	r5, #0
 8011a6e:	2501      	movlt	r5, #1
 8011a70:	f7ff fd40 	bl	80114f4 <_Balloc>
 8011a74:	b920      	cbnz	r0, 8011a80 <__mdiff+0x5c>
 8011a76:	4b2e      	ldr	r3, [pc, #184]	; (8011b30 <__mdiff+0x10c>)
 8011a78:	4602      	mov	r2, r0
 8011a7a:	f240 2145 	movw	r1, #581	; 0x245
 8011a7e:	e7e5      	b.n	8011a4c <__mdiff+0x28>
 8011a80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011a84:	6926      	ldr	r6, [r4, #16]
 8011a86:	60c5      	str	r5, [r0, #12]
 8011a88:	f104 0914 	add.w	r9, r4, #20
 8011a8c:	f108 0514 	add.w	r5, r8, #20
 8011a90:	f100 0e14 	add.w	lr, r0, #20
 8011a94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011a98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011a9c:	f108 0210 	add.w	r2, r8, #16
 8011aa0:	46f2      	mov	sl, lr
 8011aa2:	2100      	movs	r1, #0
 8011aa4:	f859 3b04 	ldr.w	r3, [r9], #4
 8011aa8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011aac:	fa11 f88b 	uxtah	r8, r1, fp
 8011ab0:	b299      	uxth	r1, r3
 8011ab2:	0c1b      	lsrs	r3, r3, #16
 8011ab4:	eba8 0801 	sub.w	r8, r8, r1
 8011ab8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011abc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011ac0:	fa1f f888 	uxth.w	r8, r8
 8011ac4:	1419      	asrs	r1, r3, #16
 8011ac6:	454e      	cmp	r6, r9
 8011ac8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011acc:	f84a 3b04 	str.w	r3, [sl], #4
 8011ad0:	d8e8      	bhi.n	8011aa4 <__mdiff+0x80>
 8011ad2:	1b33      	subs	r3, r6, r4
 8011ad4:	3b15      	subs	r3, #21
 8011ad6:	f023 0303 	bic.w	r3, r3, #3
 8011ada:	3304      	adds	r3, #4
 8011adc:	3415      	adds	r4, #21
 8011ade:	42a6      	cmp	r6, r4
 8011ae0:	bf38      	it	cc
 8011ae2:	2304      	movcc	r3, #4
 8011ae4:	441d      	add	r5, r3
 8011ae6:	4473      	add	r3, lr
 8011ae8:	469e      	mov	lr, r3
 8011aea:	462e      	mov	r6, r5
 8011aec:	4566      	cmp	r6, ip
 8011aee:	d30e      	bcc.n	8011b0e <__mdiff+0xea>
 8011af0:	f10c 0203 	add.w	r2, ip, #3
 8011af4:	1b52      	subs	r2, r2, r5
 8011af6:	f022 0203 	bic.w	r2, r2, #3
 8011afa:	3d03      	subs	r5, #3
 8011afc:	45ac      	cmp	ip, r5
 8011afe:	bf38      	it	cc
 8011b00:	2200      	movcc	r2, #0
 8011b02:	4413      	add	r3, r2
 8011b04:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011b08:	b17a      	cbz	r2, 8011b2a <__mdiff+0x106>
 8011b0a:	6107      	str	r7, [r0, #16]
 8011b0c:	e7a4      	b.n	8011a58 <__mdiff+0x34>
 8011b0e:	f856 8b04 	ldr.w	r8, [r6], #4
 8011b12:	fa11 f288 	uxtah	r2, r1, r8
 8011b16:	1414      	asrs	r4, r2, #16
 8011b18:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011b1c:	b292      	uxth	r2, r2
 8011b1e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011b22:	f84e 2b04 	str.w	r2, [lr], #4
 8011b26:	1421      	asrs	r1, r4, #16
 8011b28:	e7e0      	b.n	8011aec <__mdiff+0xc8>
 8011b2a:	3f01      	subs	r7, #1
 8011b2c:	e7ea      	b.n	8011b04 <__mdiff+0xe0>
 8011b2e:	bf00      	nop
 8011b30:	08014294 	.word	0x08014294
 8011b34:	080142a5 	.word	0x080142a5

08011b38 <__d2b>:
 8011b38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011b3c:	460f      	mov	r7, r1
 8011b3e:	2101      	movs	r1, #1
 8011b40:	ec59 8b10 	vmov	r8, r9, d0
 8011b44:	4616      	mov	r6, r2
 8011b46:	f7ff fcd5 	bl	80114f4 <_Balloc>
 8011b4a:	4604      	mov	r4, r0
 8011b4c:	b930      	cbnz	r0, 8011b5c <__d2b+0x24>
 8011b4e:	4602      	mov	r2, r0
 8011b50:	4b24      	ldr	r3, [pc, #144]	; (8011be4 <__d2b+0xac>)
 8011b52:	4825      	ldr	r0, [pc, #148]	; (8011be8 <__d2b+0xb0>)
 8011b54:	f240 310f 	movw	r1, #783	; 0x30f
 8011b58:	f000 fc52 	bl	8012400 <__assert_func>
 8011b5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011b60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011b64:	bb2d      	cbnz	r5, 8011bb2 <__d2b+0x7a>
 8011b66:	9301      	str	r3, [sp, #4]
 8011b68:	f1b8 0300 	subs.w	r3, r8, #0
 8011b6c:	d026      	beq.n	8011bbc <__d2b+0x84>
 8011b6e:	4668      	mov	r0, sp
 8011b70:	9300      	str	r3, [sp, #0]
 8011b72:	f7ff fd87 	bl	8011684 <__lo0bits>
 8011b76:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011b7a:	b1e8      	cbz	r0, 8011bb8 <__d2b+0x80>
 8011b7c:	f1c0 0320 	rsb	r3, r0, #32
 8011b80:	fa02 f303 	lsl.w	r3, r2, r3
 8011b84:	430b      	orrs	r3, r1
 8011b86:	40c2      	lsrs	r2, r0
 8011b88:	6163      	str	r3, [r4, #20]
 8011b8a:	9201      	str	r2, [sp, #4]
 8011b8c:	9b01      	ldr	r3, [sp, #4]
 8011b8e:	61a3      	str	r3, [r4, #24]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	bf14      	ite	ne
 8011b94:	2202      	movne	r2, #2
 8011b96:	2201      	moveq	r2, #1
 8011b98:	6122      	str	r2, [r4, #16]
 8011b9a:	b1bd      	cbz	r5, 8011bcc <__d2b+0x94>
 8011b9c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011ba0:	4405      	add	r5, r0
 8011ba2:	603d      	str	r5, [r7, #0]
 8011ba4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011ba8:	6030      	str	r0, [r6, #0]
 8011baa:	4620      	mov	r0, r4
 8011bac:	b003      	add	sp, #12
 8011bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011bb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011bb6:	e7d6      	b.n	8011b66 <__d2b+0x2e>
 8011bb8:	6161      	str	r1, [r4, #20]
 8011bba:	e7e7      	b.n	8011b8c <__d2b+0x54>
 8011bbc:	a801      	add	r0, sp, #4
 8011bbe:	f7ff fd61 	bl	8011684 <__lo0bits>
 8011bc2:	9b01      	ldr	r3, [sp, #4]
 8011bc4:	6163      	str	r3, [r4, #20]
 8011bc6:	3020      	adds	r0, #32
 8011bc8:	2201      	movs	r2, #1
 8011bca:	e7e5      	b.n	8011b98 <__d2b+0x60>
 8011bcc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011bd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011bd4:	6038      	str	r0, [r7, #0]
 8011bd6:	6918      	ldr	r0, [r3, #16]
 8011bd8:	f7ff fd34 	bl	8011644 <__hi0bits>
 8011bdc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011be0:	e7e2      	b.n	8011ba8 <__d2b+0x70>
 8011be2:	bf00      	nop
 8011be4:	08014294 	.word	0x08014294
 8011be8:	080142a5 	.word	0x080142a5

08011bec <__ssputs_r>:
 8011bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bf0:	688e      	ldr	r6, [r1, #8]
 8011bf2:	461f      	mov	r7, r3
 8011bf4:	42be      	cmp	r6, r7
 8011bf6:	680b      	ldr	r3, [r1, #0]
 8011bf8:	4682      	mov	sl, r0
 8011bfa:	460c      	mov	r4, r1
 8011bfc:	4690      	mov	r8, r2
 8011bfe:	d82c      	bhi.n	8011c5a <__ssputs_r+0x6e>
 8011c00:	898a      	ldrh	r2, [r1, #12]
 8011c02:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011c06:	d026      	beq.n	8011c56 <__ssputs_r+0x6a>
 8011c08:	6965      	ldr	r5, [r4, #20]
 8011c0a:	6909      	ldr	r1, [r1, #16]
 8011c0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011c10:	eba3 0901 	sub.w	r9, r3, r1
 8011c14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011c18:	1c7b      	adds	r3, r7, #1
 8011c1a:	444b      	add	r3, r9
 8011c1c:	106d      	asrs	r5, r5, #1
 8011c1e:	429d      	cmp	r5, r3
 8011c20:	bf38      	it	cc
 8011c22:	461d      	movcc	r5, r3
 8011c24:	0553      	lsls	r3, r2, #21
 8011c26:	d527      	bpl.n	8011c78 <__ssputs_r+0x8c>
 8011c28:	4629      	mov	r1, r5
 8011c2a:	f7ff fbd7 	bl	80113dc <_malloc_r>
 8011c2e:	4606      	mov	r6, r0
 8011c30:	b360      	cbz	r0, 8011c8c <__ssputs_r+0xa0>
 8011c32:	6921      	ldr	r1, [r4, #16]
 8011c34:	464a      	mov	r2, r9
 8011c36:	f7fe fcd2 	bl	80105de <memcpy>
 8011c3a:	89a3      	ldrh	r3, [r4, #12]
 8011c3c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c44:	81a3      	strh	r3, [r4, #12]
 8011c46:	6126      	str	r6, [r4, #16]
 8011c48:	6165      	str	r5, [r4, #20]
 8011c4a:	444e      	add	r6, r9
 8011c4c:	eba5 0509 	sub.w	r5, r5, r9
 8011c50:	6026      	str	r6, [r4, #0]
 8011c52:	60a5      	str	r5, [r4, #8]
 8011c54:	463e      	mov	r6, r7
 8011c56:	42be      	cmp	r6, r7
 8011c58:	d900      	bls.n	8011c5c <__ssputs_r+0x70>
 8011c5a:	463e      	mov	r6, r7
 8011c5c:	6820      	ldr	r0, [r4, #0]
 8011c5e:	4632      	mov	r2, r6
 8011c60:	4641      	mov	r1, r8
 8011c62:	f000 fba3 	bl	80123ac <memmove>
 8011c66:	68a3      	ldr	r3, [r4, #8]
 8011c68:	1b9b      	subs	r3, r3, r6
 8011c6a:	60a3      	str	r3, [r4, #8]
 8011c6c:	6823      	ldr	r3, [r4, #0]
 8011c6e:	4433      	add	r3, r6
 8011c70:	6023      	str	r3, [r4, #0]
 8011c72:	2000      	movs	r0, #0
 8011c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c78:	462a      	mov	r2, r5
 8011c7a:	f000 fc07 	bl	801248c <_realloc_r>
 8011c7e:	4606      	mov	r6, r0
 8011c80:	2800      	cmp	r0, #0
 8011c82:	d1e0      	bne.n	8011c46 <__ssputs_r+0x5a>
 8011c84:	6921      	ldr	r1, [r4, #16]
 8011c86:	4650      	mov	r0, sl
 8011c88:	f7ff fb34 	bl	80112f4 <_free_r>
 8011c8c:	230c      	movs	r3, #12
 8011c8e:	f8ca 3000 	str.w	r3, [sl]
 8011c92:	89a3      	ldrh	r3, [r4, #12]
 8011c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c98:	81a3      	strh	r3, [r4, #12]
 8011c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8011c9e:	e7e9      	b.n	8011c74 <__ssputs_r+0x88>

08011ca0 <_svfiprintf_r>:
 8011ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ca4:	4698      	mov	r8, r3
 8011ca6:	898b      	ldrh	r3, [r1, #12]
 8011ca8:	061b      	lsls	r3, r3, #24
 8011caa:	b09d      	sub	sp, #116	; 0x74
 8011cac:	4607      	mov	r7, r0
 8011cae:	460d      	mov	r5, r1
 8011cb0:	4614      	mov	r4, r2
 8011cb2:	d50e      	bpl.n	8011cd2 <_svfiprintf_r+0x32>
 8011cb4:	690b      	ldr	r3, [r1, #16]
 8011cb6:	b963      	cbnz	r3, 8011cd2 <_svfiprintf_r+0x32>
 8011cb8:	2140      	movs	r1, #64	; 0x40
 8011cba:	f7ff fb8f 	bl	80113dc <_malloc_r>
 8011cbe:	6028      	str	r0, [r5, #0]
 8011cc0:	6128      	str	r0, [r5, #16]
 8011cc2:	b920      	cbnz	r0, 8011cce <_svfiprintf_r+0x2e>
 8011cc4:	230c      	movs	r3, #12
 8011cc6:	603b      	str	r3, [r7, #0]
 8011cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8011ccc:	e0d0      	b.n	8011e70 <_svfiprintf_r+0x1d0>
 8011cce:	2340      	movs	r3, #64	; 0x40
 8011cd0:	616b      	str	r3, [r5, #20]
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8011cd6:	2320      	movs	r3, #32
 8011cd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011cdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ce0:	2330      	movs	r3, #48	; 0x30
 8011ce2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011e88 <_svfiprintf_r+0x1e8>
 8011ce6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011cea:	f04f 0901 	mov.w	r9, #1
 8011cee:	4623      	mov	r3, r4
 8011cf0:	469a      	mov	sl, r3
 8011cf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011cf6:	b10a      	cbz	r2, 8011cfc <_svfiprintf_r+0x5c>
 8011cf8:	2a25      	cmp	r2, #37	; 0x25
 8011cfa:	d1f9      	bne.n	8011cf0 <_svfiprintf_r+0x50>
 8011cfc:	ebba 0b04 	subs.w	fp, sl, r4
 8011d00:	d00b      	beq.n	8011d1a <_svfiprintf_r+0x7a>
 8011d02:	465b      	mov	r3, fp
 8011d04:	4622      	mov	r2, r4
 8011d06:	4629      	mov	r1, r5
 8011d08:	4638      	mov	r0, r7
 8011d0a:	f7ff ff6f 	bl	8011bec <__ssputs_r>
 8011d0e:	3001      	adds	r0, #1
 8011d10:	f000 80a9 	beq.w	8011e66 <_svfiprintf_r+0x1c6>
 8011d14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d16:	445a      	add	r2, fp
 8011d18:	9209      	str	r2, [sp, #36]	; 0x24
 8011d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	f000 80a1 	beq.w	8011e66 <_svfiprintf_r+0x1c6>
 8011d24:	2300      	movs	r3, #0
 8011d26:	f04f 32ff 	mov.w	r2, #4294967295
 8011d2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d2e:	f10a 0a01 	add.w	sl, sl, #1
 8011d32:	9304      	str	r3, [sp, #16]
 8011d34:	9307      	str	r3, [sp, #28]
 8011d36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011d3a:	931a      	str	r3, [sp, #104]	; 0x68
 8011d3c:	4654      	mov	r4, sl
 8011d3e:	2205      	movs	r2, #5
 8011d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d44:	4850      	ldr	r0, [pc, #320]	; (8011e88 <_svfiprintf_r+0x1e8>)
 8011d46:	f7ee fa1b 	bl	8000180 <memchr>
 8011d4a:	9a04      	ldr	r2, [sp, #16]
 8011d4c:	b9d8      	cbnz	r0, 8011d86 <_svfiprintf_r+0xe6>
 8011d4e:	06d0      	lsls	r0, r2, #27
 8011d50:	bf44      	itt	mi
 8011d52:	2320      	movmi	r3, #32
 8011d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d58:	0711      	lsls	r1, r2, #28
 8011d5a:	bf44      	itt	mi
 8011d5c:	232b      	movmi	r3, #43	; 0x2b
 8011d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d62:	f89a 3000 	ldrb.w	r3, [sl]
 8011d66:	2b2a      	cmp	r3, #42	; 0x2a
 8011d68:	d015      	beq.n	8011d96 <_svfiprintf_r+0xf6>
 8011d6a:	9a07      	ldr	r2, [sp, #28]
 8011d6c:	4654      	mov	r4, sl
 8011d6e:	2000      	movs	r0, #0
 8011d70:	f04f 0c0a 	mov.w	ip, #10
 8011d74:	4621      	mov	r1, r4
 8011d76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d7a:	3b30      	subs	r3, #48	; 0x30
 8011d7c:	2b09      	cmp	r3, #9
 8011d7e:	d94d      	bls.n	8011e1c <_svfiprintf_r+0x17c>
 8011d80:	b1b0      	cbz	r0, 8011db0 <_svfiprintf_r+0x110>
 8011d82:	9207      	str	r2, [sp, #28]
 8011d84:	e014      	b.n	8011db0 <_svfiprintf_r+0x110>
 8011d86:	eba0 0308 	sub.w	r3, r0, r8
 8011d8a:	fa09 f303 	lsl.w	r3, r9, r3
 8011d8e:	4313      	orrs	r3, r2
 8011d90:	9304      	str	r3, [sp, #16]
 8011d92:	46a2      	mov	sl, r4
 8011d94:	e7d2      	b.n	8011d3c <_svfiprintf_r+0x9c>
 8011d96:	9b03      	ldr	r3, [sp, #12]
 8011d98:	1d19      	adds	r1, r3, #4
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	9103      	str	r1, [sp, #12]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	bfbb      	ittet	lt
 8011da2:	425b      	neglt	r3, r3
 8011da4:	f042 0202 	orrlt.w	r2, r2, #2
 8011da8:	9307      	strge	r3, [sp, #28]
 8011daa:	9307      	strlt	r3, [sp, #28]
 8011dac:	bfb8      	it	lt
 8011dae:	9204      	strlt	r2, [sp, #16]
 8011db0:	7823      	ldrb	r3, [r4, #0]
 8011db2:	2b2e      	cmp	r3, #46	; 0x2e
 8011db4:	d10c      	bne.n	8011dd0 <_svfiprintf_r+0x130>
 8011db6:	7863      	ldrb	r3, [r4, #1]
 8011db8:	2b2a      	cmp	r3, #42	; 0x2a
 8011dba:	d134      	bne.n	8011e26 <_svfiprintf_r+0x186>
 8011dbc:	9b03      	ldr	r3, [sp, #12]
 8011dbe:	1d1a      	adds	r2, r3, #4
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	9203      	str	r2, [sp, #12]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	bfb8      	it	lt
 8011dc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8011dcc:	3402      	adds	r4, #2
 8011dce:	9305      	str	r3, [sp, #20]
 8011dd0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011e98 <_svfiprintf_r+0x1f8>
 8011dd4:	7821      	ldrb	r1, [r4, #0]
 8011dd6:	2203      	movs	r2, #3
 8011dd8:	4650      	mov	r0, sl
 8011dda:	f7ee f9d1 	bl	8000180 <memchr>
 8011dde:	b138      	cbz	r0, 8011df0 <_svfiprintf_r+0x150>
 8011de0:	9b04      	ldr	r3, [sp, #16]
 8011de2:	eba0 000a 	sub.w	r0, r0, sl
 8011de6:	2240      	movs	r2, #64	; 0x40
 8011de8:	4082      	lsls	r2, r0
 8011dea:	4313      	orrs	r3, r2
 8011dec:	3401      	adds	r4, #1
 8011dee:	9304      	str	r3, [sp, #16]
 8011df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011df4:	4825      	ldr	r0, [pc, #148]	; (8011e8c <_svfiprintf_r+0x1ec>)
 8011df6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011dfa:	2206      	movs	r2, #6
 8011dfc:	f7ee f9c0 	bl	8000180 <memchr>
 8011e00:	2800      	cmp	r0, #0
 8011e02:	d038      	beq.n	8011e76 <_svfiprintf_r+0x1d6>
 8011e04:	4b22      	ldr	r3, [pc, #136]	; (8011e90 <_svfiprintf_r+0x1f0>)
 8011e06:	bb1b      	cbnz	r3, 8011e50 <_svfiprintf_r+0x1b0>
 8011e08:	9b03      	ldr	r3, [sp, #12]
 8011e0a:	3307      	adds	r3, #7
 8011e0c:	f023 0307 	bic.w	r3, r3, #7
 8011e10:	3308      	adds	r3, #8
 8011e12:	9303      	str	r3, [sp, #12]
 8011e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e16:	4433      	add	r3, r6
 8011e18:	9309      	str	r3, [sp, #36]	; 0x24
 8011e1a:	e768      	b.n	8011cee <_svfiprintf_r+0x4e>
 8011e1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e20:	460c      	mov	r4, r1
 8011e22:	2001      	movs	r0, #1
 8011e24:	e7a6      	b.n	8011d74 <_svfiprintf_r+0xd4>
 8011e26:	2300      	movs	r3, #0
 8011e28:	3401      	adds	r4, #1
 8011e2a:	9305      	str	r3, [sp, #20]
 8011e2c:	4619      	mov	r1, r3
 8011e2e:	f04f 0c0a 	mov.w	ip, #10
 8011e32:	4620      	mov	r0, r4
 8011e34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e38:	3a30      	subs	r2, #48	; 0x30
 8011e3a:	2a09      	cmp	r2, #9
 8011e3c:	d903      	bls.n	8011e46 <_svfiprintf_r+0x1a6>
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d0c6      	beq.n	8011dd0 <_svfiprintf_r+0x130>
 8011e42:	9105      	str	r1, [sp, #20]
 8011e44:	e7c4      	b.n	8011dd0 <_svfiprintf_r+0x130>
 8011e46:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e4a:	4604      	mov	r4, r0
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	e7f0      	b.n	8011e32 <_svfiprintf_r+0x192>
 8011e50:	ab03      	add	r3, sp, #12
 8011e52:	9300      	str	r3, [sp, #0]
 8011e54:	462a      	mov	r2, r5
 8011e56:	4b0f      	ldr	r3, [pc, #60]	; (8011e94 <_svfiprintf_r+0x1f4>)
 8011e58:	a904      	add	r1, sp, #16
 8011e5a:	4638      	mov	r0, r7
 8011e5c:	f7fd fe3c 	bl	800fad8 <_printf_float>
 8011e60:	1c42      	adds	r2, r0, #1
 8011e62:	4606      	mov	r6, r0
 8011e64:	d1d6      	bne.n	8011e14 <_svfiprintf_r+0x174>
 8011e66:	89ab      	ldrh	r3, [r5, #12]
 8011e68:	065b      	lsls	r3, r3, #25
 8011e6a:	f53f af2d 	bmi.w	8011cc8 <_svfiprintf_r+0x28>
 8011e6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011e70:	b01d      	add	sp, #116	; 0x74
 8011e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e76:	ab03      	add	r3, sp, #12
 8011e78:	9300      	str	r3, [sp, #0]
 8011e7a:	462a      	mov	r2, r5
 8011e7c:	4b05      	ldr	r3, [pc, #20]	; (8011e94 <_svfiprintf_r+0x1f4>)
 8011e7e:	a904      	add	r1, sp, #16
 8011e80:	4638      	mov	r0, r7
 8011e82:	f7fe f8cd 	bl	8010020 <_printf_i>
 8011e86:	e7eb      	b.n	8011e60 <_svfiprintf_r+0x1c0>
 8011e88:	080143fc 	.word	0x080143fc
 8011e8c:	08014406 	.word	0x08014406
 8011e90:	0800fad9 	.word	0x0800fad9
 8011e94:	08011bed 	.word	0x08011bed
 8011e98:	08014402 	.word	0x08014402

08011e9c <__sfputc_r>:
 8011e9c:	6893      	ldr	r3, [r2, #8]
 8011e9e:	3b01      	subs	r3, #1
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	b410      	push	{r4}
 8011ea4:	6093      	str	r3, [r2, #8]
 8011ea6:	da08      	bge.n	8011eba <__sfputc_r+0x1e>
 8011ea8:	6994      	ldr	r4, [r2, #24]
 8011eaa:	42a3      	cmp	r3, r4
 8011eac:	db01      	blt.n	8011eb2 <__sfputc_r+0x16>
 8011eae:	290a      	cmp	r1, #10
 8011eb0:	d103      	bne.n	8011eba <__sfputc_r+0x1e>
 8011eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011eb6:	f000 b9e3 	b.w	8012280 <__swbuf_r>
 8011eba:	6813      	ldr	r3, [r2, #0]
 8011ebc:	1c58      	adds	r0, r3, #1
 8011ebe:	6010      	str	r0, [r2, #0]
 8011ec0:	7019      	strb	r1, [r3, #0]
 8011ec2:	4608      	mov	r0, r1
 8011ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ec8:	4770      	bx	lr

08011eca <__sfputs_r>:
 8011eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ecc:	4606      	mov	r6, r0
 8011ece:	460f      	mov	r7, r1
 8011ed0:	4614      	mov	r4, r2
 8011ed2:	18d5      	adds	r5, r2, r3
 8011ed4:	42ac      	cmp	r4, r5
 8011ed6:	d101      	bne.n	8011edc <__sfputs_r+0x12>
 8011ed8:	2000      	movs	r0, #0
 8011eda:	e007      	b.n	8011eec <__sfputs_r+0x22>
 8011edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ee0:	463a      	mov	r2, r7
 8011ee2:	4630      	mov	r0, r6
 8011ee4:	f7ff ffda 	bl	8011e9c <__sfputc_r>
 8011ee8:	1c43      	adds	r3, r0, #1
 8011eea:	d1f3      	bne.n	8011ed4 <__sfputs_r+0xa>
 8011eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011ef0 <_vfiprintf_r>:
 8011ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ef4:	460d      	mov	r5, r1
 8011ef6:	b09d      	sub	sp, #116	; 0x74
 8011ef8:	4614      	mov	r4, r2
 8011efa:	4698      	mov	r8, r3
 8011efc:	4606      	mov	r6, r0
 8011efe:	b118      	cbz	r0, 8011f08 <_vfiprintf_r+0x18>
 8011f00:	6a03      	ldr	r3, [r0, #32]
 8011f02:	b90b      	cbnz	r3, 8011f08 <_vfiprintf_r+0x18>
 8011f04:	f7fe fa3a 	bl	801037c <__sinit>
 8011f08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f0a:	07d9      	lsls	r1, r3, #31
 8011f0c:	d405      	bmi.n	8011f1a <_vfiprintf_r+0x2a>
 8011f0e:	89ab      	ldrh	r3, [r5, #12]
 8011f10:	059a      	lsls	r2, r3, #22
 8011f12:	d402      	bmi.n	8011f1a <_vfiprintf_r+0x2a>
 8011f14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f16:	f7fe fb60 	bl	80105da <__retarget_lock_acquire_recursive>
 8011f1a:	89ab      	ldrh	r3, [r5, #12]
 8011f1c:	071b      	lsls	r3, r3, #28
 8011f1e:	d501      	bpl.n	8011f24 <_vfiprintf_r+0x34>
 8011f20:	692b      	ldr	r3, [r5, #16]
 8011f22:	b99b      	cbnz	r3, 8011f4c <_vfiprintf_r+0x5c>
 8011f24:	4629      	mov	r1, r5
 8011f26:	4630      	mov	r0, r6
 8011f28:	f000 f9e8 	bl	80122fc <__swsetup_r>
 8011f2c:	b170      	cbz	r0, 8011f4c <_vfiprintf_r+0x5c>
 8011f2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f30:	07dc      	lsls	r4, r3, #31
 8011f32:	d504      	bpl.n	8011f3e <_vfiprintf_r+0x4e>
 8011f34:	f04f 30ff 	mov.w	r0, #4294967295
 8011f38:	b01d      	add	sp, #116	; 0x74
 8011f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f3e:	89ab      	ldrh	r3, [r5, #12]
 8011f40:	0598      	lsls	r0, r3, #22
 8011f42:	d4f7      	bmi.n	8011f34 <_vfiprintf_r+0x44>
 8011f44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f46:	f7fe fb49 	bl	80105dc <__retarget_lock_release_recursive>
 8011f4a:	e7f3      	b.n	8011f34 <_vfiprintf_r+0x44>
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8011f50:	2320      	movs	r3, #32
 8011f52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f56:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f5a:	2330      	movs	r3, #48	; 0x30
 8011f5c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012110 <_vfiprintf_r+0x220>
 8011f60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f64:	f04f 0901 	mov.w	r9, #1
 8011f68:	4623      	mov	r3, r4
 8011f6a:	469a      	mov	sl, r3
 8011f6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f70:	b10a      	cbz	r2, 8011f76 <_vfiprintf_r+0x86>
 8011f72:	2a25      	cmp	r2, #37	; 0x25
 8011f74:	d1f9      	bne.n	8011f6a <_vfiprintf_r+0x7a>
 8011f76:	ebba 0b04 	subs.w	fp, sl, r4
 8011f7a:	d00b      	beq.n	8011f94 <_vfiprintf_r+0xa4>
 8011f7c:	465b      	mov	r3, fp
 8011f7e:	4622      	mov	r2, r4
 8011f80:	4629      	mov	r1, r5
 8011f82:	4630      	mov	r0, r6
 8011f84:	f7ff ffa1 	bl	8011eca <__sfputs_r>
 8011f88:	3001      	adds	r0, #1
 8011f8a:	f000 80a9 	beq.w	80120e0 <_vfiprintf_r+0x1f0>
 8011f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f90:	445a      	add	r2, fp
 8011f92:	9209      	str	r2, [sp, #36]	; 0x24
 8011f94:	f89a 3000 	ldrb.w	r3, [sl]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	f000 80a1 	beq.w	80120e0 <_vfiprintf_r+0x1f0>
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8011fa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011fa8:	f10a 0a01 	add.w	sl, sl, #1
 8011fac:	9304      	str	r3, [sp, #16]
 8011fae:	9307      	str	r3, [sp, #28]
 8011fb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011fb4:	931a      	str	r3, [sp, #104]	; 0x68
 8011fb6:	4654      	mov	r4, sl
 8011fb8:	2205      	movs	r2, #5
 8011fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fbe:	4854      	ldr	r0, [pc, #336]	; (8012110 <_vfiprintf_r+0x220>)
 8011fc0:	f7ee f8de 	bl	8000180 <memchr>
 8011fc4:	9a04      	ldr	r2, [sp, #16]
 8011fc6:	b9d8      	cbnz	r0, 8012000 <_vfiprintf_r+0x110>
 8011fc8:	06d1      	lsls	r1, r2, #27
 8011fca:	bf44      	itt	mi
 8011fcc:	2320      	movmi	r3, #32
 8011fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011fd2:	0713      	lsls	r3, r2, #28
 8011fd4:	bf44      	itt	mi
 8011fd6:	232b      	movmi	r3, #43	; 0x2b
 8011fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8011fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8011fe2:	d015      	beq.n	8012010 <_vfiprintf_r+0x120>
 8011fe4:	9a07      	ldr	r2, [sp, #28]
 8011fe6:	4654      	mov	r4, sl
 8011fe8:	2000      	movs	r0, #0
 8011fea:	f04f 0c0a 	mov.w	ip, #10
 8011fee:	4621      	mov	r1, r4
 8011ff0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ff4:	3b30      	subs	r3, #48	; 0x30
 8011ff6:	2b09      	cmp	r3, #9
 8011ff8:	d94d      	bls.n	8012096 <_vfiprintf_r+0x1a6>
 8011ffa:	b1b0      	cbz	r0, 801202a <_vfiprintf_r+0x13a>
 8011ffc:	9207      	str	r2, [sp, #28]
 8011ffe:	e014      	b.n	801202a <_vfiprintf_r+0x13a>
 8012000:	eba0 0308 	sub.w	r3, r0, r8
 8012004:	fa09 f303 	lsl.w	r3, r9, r3
 8012008:	4313      	orrs	r3, r2
 801200a:	9304      	str	r3, [sp, #16]
 801200c:	46a2      	mov	sl, r4
 801200e:	e7d2      	b.n	8011fb6 <_vfiprintf_r+0xc6>
 8012010:	9b03      	ldr	r3, [sp, #12]
 8012012:	1d19      	adds	r1, r3, #4
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	9103      	str	r1, [sp, #12]
 8012018:	2b00      	cmp	r3, #0
 801201a:	bfbb      	ittet	lt
 801201c:	425b      	neglt	r3, r3
 801201e:	f042 0202 	orrlt.w	r2, r2, #2
 8012022:	9307      	strge	r3, [sp, #28]
 8012024:	9307      	strlt	r3, [sp, #28]
 8012026:	bfb8      	it	lt
 8012028:	9204      	strlt	r2, [sp, #16]
 801202a:	7823      	ldrb	r3, [r4, #0]
 801202c:	2b2e      	cmp	r3, #46	; 0x2e
 801202e:	d10c      	bne.n	801204a <_vfiprintf_r+0x15a>
 8012030:	7863      	ldrb	r3, [r4, #1]
 8012032:	2b2a      	cmp	r3, #42	; 0x2a
 8012034:	d134      	bne.n	80120a0 <_vfiprintf_r+0x1b0>
 8012036:	9b03      	ldr	r3, [sp, #12]
 8012038:	1d1a      	adds	r2, r3, #4
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	9203      	str	r2, [sp, #12]
 801203e:	2b00      	cmp	r3, #0
 8012040:	bfb8      	it	lt
 8012042:	f04f 33ff 	movlt.w	r3, #4294967295
 8012046:	3402      	adds	r4, #2
 8012048:	9305      	str	r3, [sp, #20]
 801204a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012120 <_vfiprintf_r+0x230>
 801204e:	7821      	ldrb	r1, [r4, #0]
 8012050:	2203      	movs	r2, #3
 8012052:	4650      	mov	r0, sl
 8012054:	f7ee f894 	bl	8000180 <memchr>
 8012058:	b138      	cbz	r0, 801206a <_vfiprintf_r+0x17a>
 801205a:	9b04      	ldr	r3, [sp, #16]
 801205c:	eba0 000a 	sub.w	r0, r0, sl
 8012060:	2240      	movs	r2, #64	; 0x40
 8012062:	4082      	lsls	r2, r0
 8012064:	4313      	orrs	r3, r2
 8012066:	3401      	adds	r4, #1
 8012068:	9304      	str	r3, [sp, #16]
 801206a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801206e:	4829      	ldr	r0, [pc, #164]	; (8012114 <_vfiprintf_r+0x224>)
 8012070:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012074:	2206      	movs	r2, #6
 8012076:	f7ee f883 	bl	8000180 <memchr>
 801207a:	2800      	cmp	r0, #0
 801207c:	d03f      	beq.n	80120fe <_vfiprintf_r+0x20e>
 801207e:	4b26      	ldr	r3, [pc, #152]	; (8012118 <_vfiprintf_r+0x228>)
 8012080:	bb1b      	cbnz	r3, 80120ca <_vfiprintf_r+0x1da>
 8012082:	9b03      	ldr	r3, [sp, #12]
 8012084:	3307      	adds	r3, #7
 8012086:	f023 0307 	bic.w	r3, r3, #7
 801208a:	3308      	adds	r3, #8
 801208c:	9303      	str	r3, [sp, #12]
 801208e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012090:	443b      	add	r3, r7
 8012092:	9309      	str	r3, [sp, #36]	; 0x24
 8012094:	e768      	b.n	8011f68 <_vfiprintf_r+0x78>
 8012096:	fb0c 3202 	mla	r2, ip, r2, r3
 801209a:	460c      	mov	r4, r1
 801209c:	2001      	movs	r0, #1
 801209e:	e7a6      	b.n	8011fee <_vfiprintf_r+0xfe>
 80120a0:	2300      	movs	r3, #0
 80120a2:	3401      	adds	r4, #1
 80120a4:	9305      	str	r3, [sp, #20]
 80120a6:	4619      	mov	r1, r3
 80120a8:	f04f 0c0a 	mov.w	ip, #10
 80120ac:	4620      	mov	r0, r4
 80120ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120b2:	3a30      	subs	r2, #48	; 0x30
 80120b4:	2a09      	cmp	r2, #9
 80120b6:	d903      	bls.n	80120c0 <_vfiprintf_r+0x1d0>
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d0c6      	beq.n	801204a <_vfiprintf_r+0x15a>
 80120bc:	9105      	str	r1, [sp, #20]
 80120be:	e7c4      	b.n	801204a <_vfiprintf_r+0x15a>
 80120c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80120c4:	4604      	mov	r4, r0
 80120c6:	2301      	movs	r3, #1
 80120c8:	e7f0      	b.n	80120ac <_vfiprintf_r+0x1bc>
 80120ca:	ab03      	add	r3, sp, #12
 80120cc:	9300      	str	r3, [sp, #0]
 80120ce:	462a      	mov	r2, r5
 80120d0:	4b12      	ldr	r3, [pc, #72]	; (801211c <_vfiprintf_r+0x22c>)
 80120d2:	a904      	add	r1, sp, #16
 80120d4:	4630      	mov	r0, r6
 80120d6:	f7fd fcff 	bl	800fad8 <_printf_float>
 80120da:	4607      	mov	r7, r0
 80120dc:	1c78      	adds	r0, r7, #1
 80120de:	d1d6      	bne.n	801208e <_vfiprintf_r+0x19e>
 80120e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80120e2:	07d9      	lsls	r1, r3, #31
 80120e4:	d405      	bmi.n	80120f2 <_vfiprintf_r+0x202>
 80120e6:	89ab      	ldrh	r3, [r5, #12]
 80120e8:	059a      	lsls	r2, r3, #22
 80120ea:	d402      	bmi.n	80120f2 <_vfiprintf_r+0x202>
 80120ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80120ee:	f7fe fa75 	bl	80105dc <__retarget_lock_release_recursive>
 80120f2:	89ab      	ldrh	r3, [r5, #12]
 80120f4:	065b      	lsls	r3, r3, #25
 80120f6:	f53f af1d 	bmi.w	8011f34 <_vfiprintf_r+0x44>
 80120fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80120fc:	e71c      	b.n	8011f38 <_vfiprintf_r+0x48>
 80120fe:	ab03      	add	r3, sp, #12
 8012100:	9300      	str	r3, [sp, #0]
 8012102:	462a      	mov	r2, r5
 8012104:	4b05      	ldr	r3, [pc, #20]	; (801211c <_vfiprintf_r+0x22c>)
 8012106:	a904      	add	r1, sp, #16
 8012108:	4630      	mov	r0, r6
 801210a:	f7fd ff89 	bl	8010020 <_printf_i>
 801210e:	e7e4      	b.n	80120da <_vfiprintf_r+0x1ea>
 8012110:	080143fc 	.word	0x080143fc
 8012114:	08014406 	.word	0x08014406
 8012118:	0800fad9 	.word	0x0800fad9
 801211c:	08011ecb 	.word	0x08011ecb
 8012120:	08014402 	.word	0x08014402

08012124 <__sflush_r>:
 8012124:	898a      	ldrh	r2, [r1, #12]
 8012126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801212a:	4605      	mov	r5, r0
 801212c:	0710      	lsls	r0, r2, #28
 801212e:	460c      	mov	r4, r1
 8012130:	d458      	bmi.n	80121e4 <__sflush_r+0xc0>
 8012132:	684b      	ldr	r3, [r1, #4]
 8012134:	2b00      	cmp	r3, #0
 8012136:	dc05      	bgt.n	8012144 <__sflush_r+0x20>
 8012138:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801213a:	2b00      	cmp	r3, #0
 801213c:	dc02      	bgt.n	8012144 <__sflush_r+0x20>
 801213e:	2000      	movs	r0, #0
 8012140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012144:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012146:	2e00      	cmp	r6, #0
 8012148:	d0f9      	beq.n	801213e <__sflush_r+0x1a>
 801214a:	2300      	movs	r3, #0
 801214c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012150:	682f      	ldr	r7, [r5, #0]
 8012152:	6a21      	ldr	r1, [r4, #32]
 8012154:	602b      	str	r3, [r5, #0]
 8012156:	d032      	beq.n	80121be <__sflush_r+0x9a>
 8012158:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801215a:	89a3      	ldrh	r3, [r4, #12]
 801215c:	075a      	lsls	r2, r3, #29
 801215e:	d505      	bpl.n	801216c <__sflush_r+0x48>
 8012160:	6863      	ldr	r3, [r4, #4]
 8012162:	1ac0      	subs	r0, r0, r3
 8012164:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012166:	b10b      	cbz	r3, 801216c <__sflush_r+0x48>
 8012168:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801216a:	1ac0      	subs	r0, r0, r3
 801216c:	2300      	movs	r3, #0
 801216e:	4602      	mov	r2, r0
 8012170:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012172:	6a21      	ldr	r1, [r4, #32]
 8012174:	4628      	mov	r0, r5
 8012176:	47b0      	blx	r6
 8012178:	1c43      	adds	r3, r0, #1
 801217a:	89a3      	ldrh	r3, [r4, #12]
 801217c:	d106      	bne.n	801218c <__sflush_r+0x68>
 801217e:	6829      	ldr	r1, [r5, #0]
 8012180:	291d      	cmp	r1, #29
 8012182:	d82b      	bhi.n	80121dc <__sflush_r+0xb8>
 8012184:	4a29      	ldr	r2, [pc, #164]	; (801222c <__sflush_r+0x108>)
 8012186:	410a      	asrs	r2, r1
 8012188:	07d6      	lsls	r6, r2, #31
 801218a:	d427      	bmi.n	80121dc <__sflush_r+0xb8>
 801218c:	2200      	movs	r2, #0
 801218e:	6062      	str	r2, [r4, #4]
 8012190:	04d9      	lsls	r1, r3, #19
 8012192:	6922      	ldr	r2, [r4, #16]
 8012194:	6022      	str	r2, [r4, #0]
 8012196:	d504      	bpl.n	80121a2 <__sflush_r+0x7e>
 8012198:	1c42      	adds	r2, r0, #1
 801219a:	d101      	bne.n	80121a0 <__sflush_r+0x7c>
 801219c:	682b      	ldr	r3, [r5, #0]
 801219e:	b903      	cbnz	r3, 80121a2 <__sflush_r+0x7e>
 80121a0:	6560      	str	r0, [r4, #84]	; 0x54
 80121a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80121a4:	602f      	str	r7, [r5, #0]
 80121a6:	2900      	cmp	r1, #0
 80121a8:	d0c9      	beq.n	801213e <__sflush_r+0x1a>
 80121aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80121ae:	4299      	cmp	r1, r3
 80121b0:	d002      	beq.n	80121b8 <__sflush_r+0x94>
 80121b2:	4628      	mov	r0, r5
 80121b4:	f7ff f89e 	bl	80112f4 <_free_r>
 80121b8:	2000      	movs	r0, #0
 80121ba:	6360      	str	r0, [r4, #52]	; 0x34
 80121bc:	e7c0      	b.n	8012140 <__sflush_r+0x1c>
 80121be:	2301      	movs	r3, #1
 80121c0:	4628      	mov	r0, r5
 80121c2:	47b0      	blx	r6
 80121c4:	1c41      	adds	r1, r0, #1
 80121c6:	d1c8      	bne.n	801215a <__sflush_r+0x36>
 80121c8:	682b      	ldr	r3, [r5, #0]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d0c5      	beq.n	801215a <__sflush_r+0x36>
 80121ce:	2b1d      	cmp	r3, #29
 80121d0:	d001      	beq.n	80121d6 <__sflush_r+0xb2>
 80121d2:	2b16      	cmp	r3, #22
 80121d4:	d101      	bne.n	80121da <__sflush_r+0xb6>
 80121d6:	602f      	str	r7, [r5, #0]
 80121d8:	e7b1      	b.n	801213e <__sflush_r+0x1a>
 80121da:	89a3      	ldrh	r3, [r4, #12]
 80121dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121e0:	81a3      	strh	r3, [r4, #12]
 80121e2:	e7ad      	b.n	8012140 <__sflush_r+0x1c>
 80121e4:	690f      	ldr	r7, [r1, #16]
 80121e6:	2f00      	cmp	r7, #0
 80121e8:	d0a9      	beq.n	801213e <__sflush_r+0x1a>
 80121ea:	0793      	lsls	r3, r2, #30
 80121ec:	680e      	ldr	r6, [r1, #0]
 80121ee:	bf08      	it	eq
 80121f0:	694b      	ldreq	r3, [r1, #20]
 80121f2:	600f      	str	r7, [r1, #0]
 80121f4:	bf18      	it	ne
 80121f6:	2300      	movne	r3, #0
 80121f8:	eba6 0807 	sub.w	r8, r6, r7
 80121fc:	608b      	str	r3, [r1, #8]
 80121fe:	f1b8 0f00 	cmp.w	r8, #0
 8012202:	dd9c      	ble.n	801213e <__sflush_r+0x1a>
 8012204:	6a21      	ldr	r1, [r4, #32]
 8012206:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012208:	4643      	mov	r3, r8
 801220a:	463a      	mov	r2, r7
 801220c:	4628      	mov	r0, r5
 801220e:	47b0      	blx	r6
 8012210:	2800      	cmp	r0, #0
 8012212:	dc06      	bgt.n	8012222 <__sflush_r+0xfe>
 8012214:	89a3      	ldrh	r3, [r4, #12]
 8012216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801221a:	81a3      	strh	r3, [r4, #12]
 801221c:	f04f 30ff 	mov.w	r0, #4294967295
 8012220:	e78e      	b.n	8012140 <__sflush_r+0x1c>
 8012222:	4407      	add	r7, r0
 8012224:	eba8 0800 	sub.w	r8, r8, r0
 8012228:	e7e9      	b.n	80121fe <__sflush_r+0xda>
 801222a:	bf00      	nop
 801222c:	dfbffffe 	.word	0xdfbffffe

08012230 <_fflush_r>:
 8012230:	b538      	push	{r3, r4, r5, lr}
 8012232:	690b      	ldr	r3, [r1, #16]
 8012234:	4605      	mov	r5, r0
 8012236:	460c      	mov	r4, r1
 8012238:	b913      	cbnz	r3, 8012240 <_fflush_r+0x10>
 801223a:	2500      	movs	r5, #0
 801223c:	4628      	mov	r0, r5
 801223e:	bd38      	pop	{r3, r4, r5, pc}
 8012240:	b118      	cbz	r0, 801224a <_fflush_r+0x1a>
 8012242:	6a03      	ldr	r3, [r0, #32]
 8012244:	b90b      	cbnz	r3, 801224a <_fflush_r+0x1a>
 8012246:	f7fe f899 	bl	801037c <__sinit>
 801224a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d0f3      	beq.n	801223a <_fflush_r+0xa>
 8012252:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012254:	07d0      	lsls	r0, r2, #31
 8012256:	d404      	bmi.n	8012262 <_fflush_r+0x32>
 8012258:	0599      	lsls	r1, r3, #22
 801225a:	d402      	bmi.n	8012262 <_fflush_r+0x32>
 801225c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801225e:	f7fe f9bc 	bl	80105da <__retarget_lock_acquire_recursive>
 8012262:	4628      	mov	r0, r5
 8012264:	4621      	mov	r1, r4
 8012266:	f7ff ff5d 	bl	8012124 <__sflush_r>
 801226a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801226c:	07da      	lsls	r2, r3, #31
 801226e:	4605      	mov	r5, r0
 8012270:	d4e4      	bmi.n	801223c <_fflush_r+0xc>
 8012272:	89a3      	ldrh	r3, [r4, #12]
 8012274:	059b      	lsls	r3, r3, #22
 8012276:	d4e1      	bmi.n	801223c <_fflush_r+0xc>
 8012278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801227a:	f7fe f9af 	bl	80105dc <__retarget_lock_release_recursive>
 801227e:	e7dd      	b.n	801223c <_fflush_r+0xc>

08012280 <__swbuf_r>:
 8012280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012282:	460e      	mov	r6, r1
 8012284:	4614      	mov	r4, r2
 8012286:	4605      	mov	r5, r0
 8012288:	b118      	cbz	r0, 8012292 <__swbuf_r+0x12>
 801228a:	6a03      	ldr	r3, [r0, #32]
 801228c:	b90b      	cbnz	r3, 8012292 <__swbuf_r+0x12>
 801228e:	f7fe f875 	bl	801037c <__sinit>
 8012292:	69a3      	ldr	r3, [r4, #24]
 8012294:	60a3      	str	r3, [r4, #8]
 8012296:	89a3      	ldrh	r3, [r4, #12]
 8012298:	071a      	lsls	r2, r3, #28
 801229a:	d525      	bpl.n	80122e8 <__swbuf_r+0x68>
 801229c:	6923      	ldr	r3, [r4, #16]
 801229e:	b31b      	cbz	r3, 80122e8 <__swbuf_r+0x68>
 80122a0:	6823      	ldr	r3, [r4, #0]
 80122a2:	6922      	ldr	r2, [r4, #16]
 80122a4:	1a98      	subs	r0, r3, r2
 80122a6:	6963      	ldr	r3, [r4, #20]
 80122a8:	b2f6      	uxtb	r6, r6
 80122aa:	4283      	cmp	r3, r0
 80122ac:	4637      	mov	r7, r6
 80122ae:	dc04      	bgt.n	80122ba <__swbuf_r+0x3a>
 80122b0:	4621      	mov	r1, r4
 80122b2:	4628      	mov	r0, r5
 80122b4:	f7ff ffbc 	bl	8012230 <_fflush_r>
 80122b8:	b9e0      	cbnz	r0, 80122f4 <__swbuf_r+0x74>
 80122ba:	68a3      	ldr	r3, [r4, #8]
 80122bc:	3b01      	subs	r3, #1
 80122be:	60a3      	str	r3, [r4, #8]
 80122c0:	6823      	ldr	r3, [r4, #0]
 80122c2:	1c5a      	adds	r2, r3, #1
 80122c4:	6022      	str	r2, [r4, #0]
 80122c6:	701e      	strb	r6, [r3, #0]
 80122c8:	6962      	ldr	r2, [r4, #20]
 80122ca:	1c43      	adds	r3, r0, #1
 80122cc:	429a      	cmp	r2, r3
 80122ce:	d004      	beq.n	80122da <__swbuf_r+0x5a>
 80122d0:	89a3      	ldrh	r3, [r4, #12]
 80122d2:	07db      	lsls	r3, r3, #31
 80122d4:	d506      	bpl.n	80122e4 <__swbuf_r+0x64>
 80122d6:	2e0a      	cmp	r6, #10
 80122d8:	d104      	bne.n	80122e4 <__swbuf_r+0x64>
 80122da:	4621      	mov	r1, r4
 80122dc:	4628      	mov	r0, r5
 80122de:	f7ff ffa7 	bl	8012230 <_fflush_r>
 80122e2:	b938      	cbnz	r0, 80122f4 <__swbuf_r+0x74>
 80122e4:	4638      	mov	r0, r7
 80122e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122e8:	4621      	mov	r1, r4
 80122ea:	4628      	mov	r0, r5
 80122ec:	f000 f806 	bl	80122fc <__swsetup_r>
 80122f0:	2800      	cmp	r0, #0
 80122f2:	d0d5      	beq.n	80122a0 <__swbuf_r+0x20>
 80122f4:	f04f 37ff 	mov.w	r7, #4294967295
 80122f8:	e7f4      	b.n	80122e4 <__swbuf_r+0x64>
	...

080122fc <__swsetup_r>:
 80122fc:	b538      	push	{r3, r4, r5, lr}
 80122fe:	4b2a      	ldr	r3, [pc, #168]	; (80123a8 <__swsetup_r+0xac>)
 8012300:	4605      	mov	r5, r0
 8012302:	6818      	ldr	r0, [r3, #0]
 8012304:	460c      	mov	r4, r1
 8012306:	b118      	cbz	r0, 8012310 <__swsetup_r+0x14>
 8012308:	6a03      	ldr	r3, [r0, #32]
 801230a:	b90b      	cbnz	r3, 8012310 <__swsetup_r+0x14>
 801230c:	f7fe f836 	bl	801037c <__sinit>
 8012310:	89a3      	ldrh	r3, [r4, #12]
 8012312:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012316:	0718      	lsls	r0, r3, #28
 8012318:	d422      	bmi.n	8012360 <__swsetup_r+0x64>
 801231a:	06d9      	lsls	r1, r3, #27
 801231c:	d407      	bmi.n	801232e <__swsetup_r+0x32>
 801231e:	2309      	movs	r3, #9
 8012320:	602b      	str	r3, [r5, #0]
 8012322:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012326:	81a3      	strh	r3, [r4, #12]
 8012328:	f04f 30ff 	mov.w	r0, #4294967295
 801232c:	e034      	b.n	8012398 <__swsetup_r+0x9c>
 801232e:	0758      	lsls	r0, r3, #29
 8012330:	d512      	bpl.n	8012358 <__swsetup_r+0x5c>
 8012332:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012334:	b141      	cbz	r1, 8012348 <__swsetup_r+0x4c>
 8012336:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801233a:	4299      	cmp	r1, r3
 801233c:	d002      	beq.n	8012344 <__swsetup_r+0x48>
 801233e:	4628      	mov	r0, r5
 8012340:	f7fe ffd8 	bl	80112f4 <_free_r>
 8012344:	2300      	movs	r3, #0
 8012346:	6363      	str	r3, [r4, #52]	; 0x34
 8012348:	89a3      	ldrh	r3, [r4, #12]
 801234a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801234e:	81a3      	strh	r3, [r4, #12]
 8012350:	2300      	movs	r3, #0
 8012352:	6063      	str	r3, [r4, #4]
 8012354:	6923      	ldr	r3, [r4, #16]
 8012356:	6023      	str	r3, [r4, #0]
 8012358:	89a3      	ldrh	r3, [r4, #12]
 801235a:	f043 0308 	orr.w	r3, r3, #8
 801235e:	81a3      	strh	r3, [r4, #12]
 8012360:	6923      	ldr	r3, [r4, #16]
 8012362:	b94b      	cbnz	r3, 8012378 <__swsetup_r+0x7c>
 8012364:	89a3      	ldrh	r3, [r4, #12]
 8012366:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801236a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801236e:	d003      	beq.n	8012378 <__swsetup_r+0x7c>
 8012370:	4621      	mov	r1, r4
 8012372:	4628      	mov	r0, r5
 8012374:	f000 f8fe 	bl	8012574 <__smakebuf_r>
 8012378:	89a0      	ldrh	r0, [r4, #12]
 801237a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801237e:	f010 0301 	ands.w	r3, r0, #1
 8012382:	d00a      	beq.n	801239a <__swsetup_r+0x9e>
 8012384:	2300      	movs	r3, #0
 8012386:	60a3      	str	r3, [r4, #8]
 8012388:	6963      	ldr	r3, [r4, #20]
 801238a:	425b      	negs	r3, r3
 801238c:	61a3      	str	r3, [r4, #24]
 801238e:	6923      	ldr	r3, [r4, #16]
 8012390:	b943      	cbnz	r3, 80123a4 <__swsetup_r+0xa8>
 8012392:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012396:	d1c4      	bne.n	8012322 <__swsetup_r+0x26>
 8012398:	bd38      	pop	{r3, r4, r5, pc}
 801239a:	0781      	lsls	r1, r0, #30
 801239c:	bf58      	it	pl
 801239e:	6963      	ldrpl	r3, [r4, #20]
 80123a0:	60a3      	str	r3, [r4, #8]
 80123a2:	e7f4      	b.n	801238e <__swsetup_r+0x92>
 80123a4:	2000      	movs	r0, #0
 80123a6:	e7f7      	b.n	8012398 <__swsetup_r+0x9c>
 80123a8:	200001d0 	.word	0x200001d0

080123ac <memmove>:
 80123ac:	4288      	cmp	r0, r1
 80123ae:	b510      	push	{r4, lr}
 80123b0:	eb01 0402 	add.w	r4, r1, r2
 80123b4:	d902      	bls.n	80123bc <memmove+0x10>
 80123b6:	4284      	cmp	r4, r0
 80123b8:	4623      	mov	r3, r4
 80123ba:	d807      	bhi.n	80123cc <memmove+0x20>
 80123bc:	1e43      	subs	r3, r0, #1
 80123be:	42a1      	cmp	r1, r4
 80123c0:	d008      	beq.n	80123d4 <memmove+0x28>
 80123c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80123c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80123ca:	e7f8      	b.n	80123be <memmove+0x12>
 80123cc:	4402      	add	r2, r0
 80123ce:	4601      	mov	r1, r0
 80123d0:	428a      	cmp	r2, r1
 80123d2:	d100      	bne.n	80123d6 <memmove+0x2a>
 80123d4:	bd10      	pop	{r4, pc}
 80123d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80123da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80123de:	e7f7      	b.n	80123d0 <memmove+0x24>

080123e0 <_sbrk_r>:
 80123e0:	b538      	push	{r3, r4, r5, lr}
 80123e2:	4d06      	ldr	r5, [pc, #24]	; (80123fc <_sbrk_r+0x1c>)
 80123e4:	2300      	movs	r3, #0
 80123e6:	4604      	mov	r4, r0
 80123e8:	4608      	mov	r0, r1
 80123ea:	602b      	str	r3, [r5, #0]
 80123ec:	f7f4 ff48 	bl	8007280 <_sbrk>
 80123f0:	1c43      	adds	r3, r0, #1
 80123f2:	d102      	bne.n	80123fa <_sbrk_r+0x1a>
 80123f4:	682b      	ldr	r3, [r5, #0]
 80123f6:	b103      	cbz	r3, 80123fa <_sbrk_r+0x1a>
 80123f8:	6023      	str	r3, [r4, #0]
 80123fa:	bd38      	pop	{r3, r4, r5, pc}
 80123fc:	20001960 	.word	0x20001960

08012400 <__assert_func>:
 8012400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012402:	4614      	mov	r4, r2
 8012404:	461a      	mov	r2, r3
 8012406:	4b09      	ldr	r3, [pc, #36]	; (801242c <__assert_func+0x2c>)
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	4605      	mov	r5, r0
 801240c:	68d8      	ldr	r0, [r3, #12]
 801240e:	b14c      	cbz	r4, 8012424 <__assert_func+0x24>
 8012410:	4b07      	ldr	r3, [pc, #28]	; (8012430 <__assert_func+0x30>)
 8012412:	9100      	str	r1, [sp, #0]
 8012414:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012418:	4906      	ldr	r1, [pc, #24]	; (8012434 <__assert_func+0x34>)
 801241a:	462b      	mov	r3, r5
 801241c:	f000 f872 	bl	8012504 <fiprintf>
 8012420:	f000 f906 	bl	8012630 <abort>
 8012424:	4b04      	ldr	r3, [pc, #16]	; (8012438 <__assert_func+0x38>)
 8012426:	461c      	mov	r4, r3
 8012428:	e7f3      	b.n	8012412 <__assert_func+0x12>
 801242a:	bf00      	nop
 801242c:	200001d0 	.word	0x200001d0
 8012430:	08014417 	.word	0x08014417
 8012434:	08014424 	.word	0x08014424
 8012438:	08014452 	.word	0x08014452

0801243c <_calloc_r>:
 801243c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801243e:	fba1 2402 	umull	r2, r4, r1, r2
 8012442:	b94c      	cbnz	r4, 8012458 <_calloc_r+0x1c>
 8012444:	4611      	mov	r1, r2
 8012446:	9201      	str	r2, [sp, #4]
 8012448:	f7fe ffc8 	bl	80113dc <_malloc_r>
 801244c:	9a01      	ldr	r2, [sp, #4]
 801244e:	4605      	mov	r5, r0
 8012450:	b930      	cbnz	r0, 8012460 <_calloc_r+0x24>
 8012452:	4628      	mov	r0, r5
 8012454:	b003      	add	sp, #12
 8012456:	bd30      	pop	{r4, r5, pc}
 8012458:	220c      	movs	r2, #12
 801245a:	6002      	str	r2, [r0, #0]
 801245c:	2500      	movs	r5, #0
 801245e:	e7f8      	b.n	8012452 <_calloc_r+0x16>
 8012460:	4621      	mov	r1, r4
 8012462:	f7fe f83d 	bl	80104e0 <memset>
 8012466:	e7f4      	b.n	8012452 <_calloc_r+0x16>

08012468 <__ascii_mbtowc>:
 8012468:	b082      	sub	sp, #8
 801246a:	b901      	cbnz	r1, 801246e <__ascii_mbtowc+0x6>
 801246c:	a901      	add	r1, sp, #4
 801246e:	b142      	cbz	r2, 8012482 <__ascii_mbtowc+0x1a>
 8012470:	b14b      	cbz	r3, 8012486 <__ascii_mbtowc+0x1e>
 8012472:	7813      	ldrb	r3, [r2, #0]
 8012474:	600b      	str	r3, [r1, #0]
 8012476:	7812      	ldrb	r2, [r2, #0]
 8012478:	1e10      	subs	r0, r2, #0
 801247a:	bf18      	it	ne
 801247c:	2001      	movne	r0, #1
 801247e:	b002      	add	sp, #8
 8012480:	4770      	bx	lr
 8012482:	4610      	mov	r0, r2
 8012484:	e7fb      	b.n	801247e <__ascii_mbtowc+0x16>
 8012486:	f06f 0001 	mvn.w	r0, #1
 801248a:	e7f8      	b.n	801247e <__ascii_mbtowc+0x16>

0801248c <_realloc_r>:
 801248c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012490:	4680      	mov	r8, r0
 8012492:	4614      	mov	r4, r2
 8012494:	460e      	mov	r6, r1
 8012496:	b921      	cbnz	r1, 80124a2 <_realloc_r+0x16>
 8012498:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801249c:	4611      	mov	r1, r2
 801249e:	f7fe bf9d 	b.w	80113dc <_malloc_r>
 80124a2:	b92a      	cbnz	r2, 80124b0 <_realloc_r+0x24>
 80124a4:	f7fe ff26 	bl	80112f4 <_free_r>
 80124a8:	4625      	mov	r5, r4
 80124aa:	4628      	mov	r0, r5
 80124ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124b0:	f000 f8c5 	bl	801263e <_malloc_usable_size_r>
 80124b4:	4284      	cmp	r4, r0
 80124b6:	4607      	mov	r7, r0
 80124b8:	d802      	bhi.n	80124c0 <_realloc_r+0x34>
 80124ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80124be:	d812      	bhi.n	80124e6 <_realloc_r+0x5a>
 80124c0:	4621      	mov	r1, r4
 80124c2:	4640      	mov	r0, r8
 80124c4:	f7fe ff8a 	bl	80113dc <_malloc_r>
 80124c8:	4605      	mov	r5, r0
 80124ca:	2800      	cmp	r0, #0
 80124cc:	d0ed      	beq.n	80124aa <_realloc_r+0x1e>
 80124ce:	42bc      	cmp	r4, r7
 80124d0:	4622      	mov	r2, r4
 80124d2:	4631      	mov	r1, r6
 80124d4:	bf28      	it	cs
 80124d6:	463a      	movcs	r2, r7
 80124d8:	f7fe f881 	bl	80105de <memcpy>
 80124dc:	4631      	mov	r1, r6
 80124de:	4640      	mov	r0, r8
 80124e0:	f7fe ff08 	bl	80112f4 <_free_r>
 80124e4:	e7e1      	b.n	80124aa <_realloc_r+0x1e>
 80124e6:	4635      	mov	r5, r6
 80124e8:	e7df      	b.n	80124aa <_realloc_r+0x1e>

080124ea <__ascii_wctomb>:
 80124ea:	b149      	cbz	r1, 8012500 <__ascii_wctomb+0x16>
 80124ec:	2aff      	cmp	r2, #255	; 0xff
 80124ee:	bf85      	ittet	hi
 80124f0:	238a      	movhi	r3, #138	; 0x8a
 80124f2:	6003      	strhi	r3, [r0, #0]
 80124f4:	700a      	strbls	r2, [r1, #0]
 80124f6:	f04f 30ff 	movhi.w	r0, #4294967295
 80124fa:	bf98      	it	ls
 80124fc:	2001      	movls	r0, #1
 80124fe:	4770      	bx	lr
 8012500:	4608      	mov	r0, r1
 8012502:	4770      	bx	lr

08012504 <fiprintf>:
 8012504:	b40e      	push	{r1, r2, r3}
 8012506:	b503      	push	{r0, r1, lr}
 8012508:	4601      	mov	r1, r0
 801250a:	ab03      	add	r3, sp, #12
 801250c:	4805      	ldr	r0, [pc, #20]	; (8012524 <fiprintf+0x20>)
 801250e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012512:	6800      	ldr	r0, [r0, #0]
 8012514:	9301      	str	r3, [sp, #4]
 8012516:	f7ff fceb 	bl	8011ef0 <_vfiprintf_r>
 801251a:	b002      	add	sp, #8
 801251c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012520:	b003      	add	sp, #12
 8012522:	4770      	bx	lr
 8012524:	200001d0 	.word	0x200001d0

08012528 <__swhatbuf_r>:
 8012528:	b570      	push	{r4, r5, r6, lr}
 801252a:	460c      	mov	r4, r1
 801252c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012530:	2900      	cmp	r1, #0
 8012532:	b096      	sub	sp, #88	; 0x58
 8012534:	4615      	mov	r5, r2
 8012536:	461e      	mov	r6, r3
 8012538:	da0d      	bge.n	8012556 <__swhatbuf_r+0x2e>
 801253a:	89a3      	ldrh	r3, [r4, #12]
 801253c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012540:	f04f 0100 	mov.w	r1, #0
 8012544:	bf0c      	ite	eq
 8012546:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801254a:	2340      	movne	r3, #64	; 0x40
 801254c:	2000      	movs	r0, #0
 801254e:	6031      	str	r1, [r6, #0]
 8012550:	602b      	str	r3, [r5, #0]
 8012552:	b016      	add	sp, #88	; 0x58
 8012554:	bd70      	pop	{r4, r5, r6, pc}
 8012556:	466a      	mov	r2, sp
 8012558:	f000 f848 	bl	80125ec <_fstat_r>
 801255c:	2800      	cmp	r0, #0
 801255e:	dbec      	blt.n	801253a <__swhatbuf_r+0x12>
 8012560:	9901      	ldr	r1, [sp, #4]
 8012562:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012566:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801256a:	4259      	negs	r1, r3
 801256c:	4159      	adcs	r1, r3
 801256e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012572:	e7eb      	b.n	801254c <__swhatbuf_r+0x24>

08012574 <__smakebuf_r>:
 8012574:	898b      	ldrh	r3, [r1, #12]
 8012576:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012578:	079d      	lsls	r5, r3, #30
 801257a:	4606      	mov	r6, r0
 801257c:	460c      	mov	r4, r1
 801257e:	d507      	bpl.n	8012590 <__smakebuf_r+0x1c>
 8012580:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012584:	6023      	str	r3, [r4, #0]
 8012586:	6123      	str	r3, [r4, #16]
 8012588:	2301      	movs	r3, #1
 801258a:	6163      	str	r3, [r4, #20]
 801258c:	b002      	add	sp, #8
 801258e:	bd70      	pop	{r4, r5, r6, pc}
 8012590:	ab01      	add	r3, sp, #4
 8012592:	466a      	mov	r2, sp
 8012594:	f7ff ffc8 	bl	8012528 <__swhatbuf_r>
 8012598:	9900      	ldr	r1, [sp, #0]
 801259a:	4605      	mov	r5, r0
 801259c:	4630      	mov	r0, r6
 801259e:	f7fe ff1d 	bl	80113dc <_malloc_r>
 80125a2:	b948      	cbnz	r0, 80125b8 <__smakebuf_r+0x44>
 80125a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80125a8:	059a      	lsls	r2, r3, #22
 80125aa:	d4ef      	bmi.n	801258c <__smakebuf_r+0x18>
 80125ac:	f023 0303 	bic.w	r3, r3, #3
 80125b0:	f043 0302 	orr.w	r3, r3, #2
 80125b4:	81a3      	strh	r3, [r4, #12]
 80125b6:	e7e3      	b.n	8012580 <__smakebuf_r+0xc>
 80125b8:	89a3      	ldrh	r3, [r4, #12]
 80125ba:	6020      	str	r0, [r4, #0]
 80125bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125c0:	81a3      	strh	r3, [r4, #12]
 80125c2:	9b00      	ldr	r3, [sp, #0]
 80125c4:	6163      	str	r3, [r4, #20]
 80125c6:	9b01      	ldr	r3, [sp, #4]
 80125c8:	6120      	str	r0, [r4, #16]
 80125ca:	b15b      	cbz	r3, 80125e4 <__smakebuf_r+0x70>
 80125cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125d0:	4630      	mov	r0, r6
 80125d2:	f000 f81d 	bl	8012610 <_isatty_r>
 80125d6:	b128      	cbz	r0, 80125e4 <__smakebuf_r+0x70>
 80125d8:	89a3      	ldrh	r3, [r4, #12]
 80125da:	f023 0303 	bic.w	r3, r3, #3
 80125de:	f043 0301 	orr.w	r3, r3, #1
 80125e2:	81a3      	strh	r3, [r4, #12]
 80125e4:	89a3      	ldrh	r3, [r4, #12]
 80125e6:	431d      	orrs	r5, r3
 80125e8:	81a5      	strh	r5, [r4, #12]
 80125ea:	e7cf      	b.n	801258c <__smakebuf_r+0x18>

080125ec <_fstat_r>:
 80125ec:	b538      	push	{r3, r4, r5, lr}
 80125ee:	4d07      	ldr	r5, [pc, #28]	; (801260c <_fstat_r+0x20>)
 80125f0:	2300      	movs	r3, #0
 80125f2:	4604      	mov	r4, r0
 80125f4:	4608      	mov	r0, r1
 80125f6:	4611      	mov	r1, r2
 80125f8:	602b      	str	r3, [r5, #0]
 80125fa:	f7f4 fe18 	bl	800722e <_fstat>
 80125fe:	1c43      	adds	r3, r0, #1
 8012600:	d102      	bne.n	8012608 <_fstat_r+0x1c>
 8012602:	682b      	ldr	r3, [r5, #0]
 8012604:	b103      	cbz	r3, 8012608 <_fstat_r+0x1c>
 8012606:	6023      	str	r3, [r4, #0]
 8012608:	bd38      	pop	{r3, r4, r5, pc}
 801260a:	bf00      	nop
 801260c:	20001960 	.word	0x20001960

08012610 <_isatty_r>:
 8012610:	b538      	push	{r3, r4, r5, lr}
 8012612:	4d06      	ldr	r5, [pc, #24]	; (801262c <_isatty_r+0x1c>)
 8012614:	2300      	movs	r3, #0
 8012616:	4604      	mov	r4, r0
 8012618:	4608      	mov	r0, r1
 801261a:	602b      	str	r3, [r5, #0]
 801261c:	f7f4 fe17 	bl	800724e <_isatty>
 8012620:	1c43      	adds	r3, r0, #1
 8012622:	d102      	bne.n	801262a <_isatty_r+0x1a>
 8012624:	682b      	ldr	r3, [r5, #0]
 8012626:	b103      	cbz	r3, 801262a <_isatty_r+0x1a>
 8012628:	6023      	str	r3, [r4, #0]
 801262a:	bd38      	pop	{r3, r4, r5, pc}
 801262c:	20001960 	.word	0x20001960

08012630 <abort>:
 8012630:	b508      	push	{r3, lr}
 8012632:	2006      	movs	r0, #6
 8012634:	f000 f834 	bl	80126a0 <raise>
 8012638:	2001      	movs	r0, #1
 801263a:	f7f4 fda9 	bl	8007190 <_exit>

0801263e <_malloc_usable_size_r>:
 801263e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012642:	1f18      	subs	r0, r3, #4
 8012644:	2b00      	cmp	r3, #0
 8012646:	bfbc      	itt	lt
 8012648:	580b      	ldrlt	r3, [r1, r0]
 801264a:	18c0      	addlt	r0, r0, r3
 801264c:	4770      	bx	lr

0801264e <_raise_r>:
 801264e:	291f      	cmp	r1, #31
 8012650:	b538      	push	{r3, r4, r5, lr}
 8012652:	4604      	mov	r4, r0
 8012654:	460d      	mov	r5, r1
 8012656:	d904      	bls.n	8012662 <_raise_r+0x14>
 8012658:	2316      	movs	r3, #22
 801265a:	6003      	str	r3, [r0, #0]
 801265c:	f04f 30ff 	mov.w	r0, #4294967295
 8012660:	bd38      	pop	{r3, r4, r5, pc}
 8012662:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012664:	b112      	cbz	r2, 801266c <_raise_r+0x1e>
 8012666:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801266a:	b94b      	cbnz	r3, 8012680 <_raise_r+0x32>
 801266c:	4620      	mov	r0, r4
 801266e:	f000 f831 	bl	80126d4 <_getpid_r>
 8012672:	462a      	mov	r2, r5
 8012674:	4601      	mov	r1, r0
 8012676:	4620      	mov	r0, r4
 8012678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801267c:	f000 b818 	b.w	80126b0 <_kill_r>
 8012680:	2b01      	cmp	r3, #1
 8012682:	d00a      	beq.n	801269a <_raise_r+0x4c>
 8012684:	1c59      	adds	r1, r3, #1
 8012686:	d103      	bne.n	8012690 <_raise_r+0x42>
 8012688:	2316      	movs	r3, #22
 801268a:	6003      	str	r3, [r0, #0]
 801268c:	2001      	movs	r0, #1
 801268e:	e7e7      	b.n	8012660 <_raise_r+0x12>
 8012690:	2400      	movs	r4, #0
 8012692:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012696:	4628      	mov	r0, r5
 8012698:	4798      	blx	r3
 801269a:	2000      	movs	r0, #0
 801269c:	e7e0      	b.n	8012660 <_raise_r+0x12>
	...

080126a0 <raise>:
 80126a0:	4b02      	ldr	r3, [pc, #8]	; (80126ac <raise+0xc>)
 80126a2:	4601      	mov	r1, r0
 80126a4:	6818      	ldr	r0, [r3, #0]
 80126a6:	f7ff bfd2 	b.w	801264e <_raise_r>
 80126aa:	bf00      	nop
 80126ac:	200001d0 	.word	0x200001d0

080126b0 <_kill_r>:
 80126b0:	b538      	push	{r3, r4, r5, lr}
 80126b2:	4d07      	ldr	r5, [pc, #28]	; (80126d0 <_kill_r+0x20>)
 80126b4:	2300      	movs	r3, #0
 80126b6:	4604      	mov	r4, r0
 80126b8:	4608      	mov	r0, r1
 80126ba:	4611      	mov	r1, r2
 80126bc:	602b      	str	r3, [r5, #0]
 80126be:	f7f4 fd57 	bl	8007170 <_kill>
 80126c2:	1c43      	adds	r3, r0, #1
 80126c4:	d102      	bne.n	80126cc <_kill_r+0x1c>
 80126c6:	682b      	ldr	r3, [r5, #0]
 80126c8:	b103      	cbz	r3, 80126cc <_kill_r+0x1c>
 80126ca:	6023      	str	r3, [r4, #0]
 80126cc:	bd38      	pop	{r3, r4, r5, pc}
 80126ce:	bf00      	nop
 80126d0:	20001960 	.word	0x20001960

080126d4 <_getpid_r>:
 80126d4:	f7f4 bd44 	b.w	8007160 <_getpid>

080126d8 <pow>:
 80126d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126da:	ed2d 8b02 	vpush	{d8}
 80126de:	eeb0 8a40 	vmov.f32	s16, s0
 80126e2:	eef0 8a60 	vmov.f32	s17, s1
 80126e6:	ec55 4b11 	vmov	r4, r5, d1
 80126ea:	f000 f871 	bl	80127d0 <__ieee754_pow>
 80126ee:	4622      	mov	r2, r4
 80126f0:	462b      	mov	r3, r5
 80126f2:	4620      	mov	r0, r4
 80126f4:	4629      	mov	r1, r5
 80126f6:	ec57 6b10 	vmov	r6, r7, d0
 80126fa:	f7ee f9ef 	bl	8000adc <__aeabi_dcmpun>
 80126fe:	2800      	cmp	r0, #0
 8012700:	d13b      	bne.n	801277a <pow+0xa2>
 8012702:	ec51 0b18 	vmov	r0, r1, d8
 8012706:	2200      	movs	r2, #0
 8012708:	2300      	movs	r3, #0
 801270a:	f7ee f9b5 	bl	8000a78 <__aeabi_dcmpeq>
 801270e:	b1b8      	cbz	r0, 8012740 <pow+0x68>
 8012710:	2200      	movs	r2, #0
 8012712:	2300      	movs	r3, #0
 8012714:	4620      	mov	r0, r4
 8012716:	4629      	mov	r1, r5
 8012718:	f7ee f9ae 	bl	8000a78 <__aeabi_dcmpeq>
 801271c:	2800      	cmp	r0, #0
 801271e:	d146      	bne.n	80127ae <pow+0xd6>
 8012720:	ec45 4b10 	vmov	d0, r4, r5
 8012724:	f000 f848 	bl	80127b8 <finite>
 8012728:	b338      	cbz	r0, 801277a <pow+0xa2>
 801272a:	2200      	movs	r2, #0
 801272c:	2300      	movs	r3, #0
 801272e:	4620      	mov	r0, r4
 8012730:	4629      	mov	r1, r5
 8012732:	f7ee f9ab 	bl	8000a8c <__aeabi_dcmplt>
 8012736:	b300      	cbz	r0, 801277a <pow+0xa2>
 8012738:	f7fd ff24 	bl	8010584 <__errno>
 801273c:	2322      	movs	r3, #34	; 0x22
 801273e:	e01b      	b.n	8012778 <pow+0xa0>
 8012740:	ec47 6b10 	vmov	d0, r6, r7
 8012744:	f000 f838 	bl	80127b8 <finite>
 8012748:	b9e0      	cbnz	r0, 8012784 <pow+0xac>
 801274a:	eeb0 0a48 	vmov.f32	s0, s16
 801274e:	eef0 0a68 	vmov.f32	s1, s17
 8012752:	f000 f831 	bl	80127b8 <finite>
 8012756:	b1a8      	cbz	r0, 8012784 <pow+0xac>
 8012758:	ec45 4b10 	vmov	d0, r4, r5
 801275c:	f000 f82c 	bl	80127b8 <finite>
 8012760:	b180      	cbz	r0, 8012784 <pow+0xac>
 8012762:	4632      	mov	r2, r6
 8012764:	463b      	mov	r3, r7
 8012766:	4630      	mov	r0, r6
 8012768:	4639      	mov	r1, r7
 801276a:	f7ee f9b7 	bl	8000adc <__aeabi_dcmpun>
 801276e:	2800      	cmp	r0, #0
 8012770:	d0e2      	beq.n	8012738 <pow+0x60>
 8012772:	f7fd ff07 	bl	8010584 <__errno>
 8012776:	2321      	movs	r3, #33	; 0x21
 8012778:	6003      	str	r3, [r0, #0]
 801277a:	ecbd 8b02 	vpop	{d8}
 801277e:	ec47 6b10 	vmov	d0, r6, r7
 8012782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012784:	2200      	movs	r2, #0
 8012786:	2300      	movs	r3, #0
 8012788:	4630      	mov	r0, r6
 801278a:	4639      	mov	r1, r7
 801278c:	f7ee f974 	bl	8000a78 <__aeabi_dcmpeq>
 8012790:	2800      	cmp	r0, #0
 8012792:	d0f2      	beq.n	801277a <pow+0xa2>
 8012794:	eeb0 0a48 	vmov.f32	s0, s16
 8012798:	eef0 0a68 	vmov.f32	s1, s17
 801279c:	f000 f80c 	bl	80127b8 <finite>
 80127a0:	2800      	cmp	r0, #0
 80127a2:	d0ea      	beq.n	801277a <pow+0xa2>
 80127a4:	ec45 4b10 	vmov	d0, r4, r5
 80127a8:	f000 f806 	bl	80127b8 <finite>
 80127ac:	e7c3      	b.n	8012736 <pow+0x5e>
 80127ae:	4f01      	ldr	r7, [pc, #4]	; (80127b4 <pow+0xdc>)
 80127b0:	2600      	movs	r6, #0
 80127b2:	e7e2      	b.n	801277a <pow+0xa2>
 80127b4:	3ff00000 	.word	0x3ff00000

080127b8 <finite>:
 80127b8:	b082      	sub	sp, #8
 80127ba:	ed8d 0b00 	vstr	d0, [sp]
 80127be:	9801      	ldr	r0, [sp, #4]
 80127c0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80127c4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80127c8:	0fc0      	lsrs	r0, r0, #31
 80127ca:	b002      	add	sp, #8
 80127cc:	4770      	bx	lr
	...

080127d0 <__ieee754_pow>:
 80127d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127d4:	ed2d 8b06 	vpush	{d8-d10}
 80127d8:	b089      	sub	sp, #36	; 0x24
 80127da:	ed8d 1b00 	vstr	d1, [sp]
 80127de:	e9dd 2900 	ldrd	r2, r9, [sp]
 80127e2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80127e6:	ea58 0102 	orrs.w	r1, r8, r2
 80127ea:	ec57 6b10 	vmov	r6, r7, d0
 80127ee:	d115      	bne.n	801281c <__ieee754_pow+0x4c>
 80127f0:	19b3      	adds	r3, r6, r6
 80127f2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80127f6:	4152      	adcs	r2, r2
 80127f8:	4299      	cmp	r1, r3
 80127fa:	4b89      	ldr	r3, [pc, #548]	; (8012a20 <__ieee754_pow+0x250>)
 80127fc:	4193      	sbcs	r3, r2
 80127fe:	f080 84d1 	bcs.w	80131a4 <__ieee754_pow+0x9d4>
 8012802:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012806:	4630      	mov	r0, r6
 8012808:	4639      	mov	r1, r7
 801280a:	f7ed fd17 	bl	800023c <__adddf3>
 801280e:	ec41 0b10 	vmov	d0, r0, r1
 8012812:	b009      	add	sp, #36	; 0x24
 8012814:	ecbd 8b06 	vpop	{d8-d10}
 8012818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801281c:	4b81      	ldr	r3, [pc, #516]	; (8012a24 <__ieee754_pow+0x254>)
 801281e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8012822:	429c      	cmp	r4, r3
 8012824:	ee10 aa10 	vmov	sl, s0
 8012828:	463d      	mov	r5, r7
 801282a:	dc06      	bgt.n	801283a <__ieee754_pow+0x6a>
 801282c:	d101      	bne.n	8012832 <__ieee754_pow+0x62>
 801282e:	2e00      	cmp	r6, #0
 8012830:	d1e7      	bne.n	8012802 <__ieee754_pow+0x32>
 8012832:	4598      	cmp	r8, r3
 8012834:	dc01      	bgt.n	801283a <__ieee754_pow+0x6a>
 8012836:	d10f      	bne.n	8012858 <__ieee754_pow+0x88>
 8012838:	b172      	cbz	r2, 8012858 <__ieee754_pow+0x88>
 801283a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801283e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8012842:	ea55 050a 	orrs.w	r5, r5, sl
 8012846:	d1dc      	bne.n	8012802 <__ieee754_pow+0x32>
 8012848:	e9dd 3200 	ldrd	r3, r2, [sp]
 801284c:	18db      	adds	r3, r3, r3
 801284e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8012852:	4152      	adcs	r2, r2
 8012854:	429d      	cmp	r5, r3
 8012856:	e7d0      	b.n	80127fa <__ieee754_pow+0x2a>
 8012858:	2d00      	cmp	r5, #0
 801285a:	da3b      	bge.n	80128d4 <__ieee754_pow+0x104>
 801285c:	4b72      	ldr	r3, [pc, #456]	; (8012a28 <__ieee754_pow+0x258>)
 801285e:	4598      	cmp	r8, r3
 8012860:	dc51      	bgt.n	8012906 <__ieee754_pow+0x136>
 8012862:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8012866:	4598      	cmp	r8, r3
 8012868:	f340 84ab 	ble.w	80131c2 <__ieee754_pow+0x9f2>
 801286c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012870:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012874:	2b14      	cmp	r3, #20
 8012876:	dd0f      	ble.n	8012898 <__ieee754_pow+0xc8>
 8012878:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801287c:	fa22 f103 	lsr.w	r1, r2, r3
 8012880:	fa01 f303 	lsl.w	r3, r1, r3
 8012884:	4293      	cmp	r3, r2
 8012886:	f040 849c 	bne.w	80131c2 <__ieee754_pow+0x9f2>
 801288a:	f001 0101 	and.w	r1, r1, #1
 801288e:	f1c1 0302 	rsb	r3, r1, #2
 8012892:	9304      	str	r3, [sp, #16]
 8012894:	b182      	cbz	r2, 80128b8 <__ieee754_pow+0xe8>
 8012896:	e05f      	b.n	8012958 <__ieee754_pow+0x188>
 8012898:	2a00      	cmp	r2, #0
 801289a:	d15b      	bne.n	8012954 <__ieee754_pow+0x184>
 801289c:	f1c3 0314 	rsb	r3, r3, #20
 80128a0:	fa48 f103 	asr.w	r1, r8, r3
 80128a4:	fa01 f303 	lsl.w	r3, r1, r3
 80128a8:	4543      	cmp	r3, r8
 80128aa:	f040 8487 	bne.w	80131bc <__ieee754_pow+0x9ec>
 80128ae:	f001 0101 	and.w	r1, r1, #1
 80128b2:	f1c1 0302 	rsb	r3, r1, #2
 80128b6:	9304      	str	r3, [sp, #16]
 80128b8:	4b5c      	ldr	r3, [pc, #368]	; (8012a2c <__ieee754_pow+0x25c>)
 80128ba:	4598      	cmp	r8, r3
 80128bc:	d132      	bne.n	8012924 <__ieee754_pow+0x154>
 80128be:	f1b9 0f00 	cmp.w	r9, #0
 80128c2:	f280 8477 	bge.w	80131b4 <__ieee754_pow+0x9e4>
 80128c6:	4959      	ldr	r1, [pc, #356]	; (8012a2c <__ieee754_pow+0x25c>)
 80128c8:	4632      	mov	r2, r6
 80128ca:	463b      	mov	r3, r7
 80128cc:	2000      	movs	r0, #0
 80128ce:	f7ed ff95 	bl	80007fc <__aeabi_ddiv>
 80128d2:	e79c      	b.n	801280e <__ieee754_pow+0x3e>
 80128d4:	2300      	movs	r3, #0
 80128d6:	9304      	str	r3, [sp, #16]
 80128d8:	2a00      	cmp	r2, #0
 80128da:	d13d      	bne.n	8012958 <__ieee754_pow+0x188>
 80128dc:	4b51      	ldr	r3, [pc, #324]	; (8012a24 <__ieee754_pow+0x254>)
 80128de:	4598      	cmp	r8, r3
 80128e0:	d1ea      	bne.n	80128b8 <__ieee754_pow+0xe8>
 80128e2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80128e6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80128ea:	ea53 030a 	orrs.w	r3, r3, sl
 80128ee:	f000 8459 	beq.w	80131a4 <__ieee754_pow+0x9d4>
 80128f2:	4b4f      	ldr	r3, [pc, #316]	; (8012a30 <__ieee754_pow+0x260>)
 80128f4:	429c      	cmp	r4, r3
 80128f6:	dd08      	ble.n	801290a <__ieee754_pow+0x13a>
 80128f8:	f1b9 0f00 	cmp.w	r9, #0
 80128fc:	f2c0 8456 	blt.w	80131ac <__ieee754_pow+0x9dc>
 8012900:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012904:	e783      	b.n	801280e <__ieee754_pow+0x3e>
 8012906:	2302      	movs	r3, #2
 8012908:	e7e5      	b.n	80128d6 <__ieee754_pow+0x106>
 801290a:	f1b9 0f00 	cmp.w	r9, #0
 801290e:	f04f 0000 	mov.w	r0, #0
 8012912:	f04f 0100 	mov.w	r1, #0
 8012916:	f6bf af7a 	bge.w	801280e <__ieee754_pow+0x3e>
 801291a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801291e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012922:	e774      	b.n	801280e <__ieee754_pow+0x3e>
 8012924:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8012928:	d106      	bne.n	8012938 <__ieee754_pow+0x168>
 801292a:	4632      	mov	r2, r6
 801292c:	463b      	mov	r3, r7
 801292e:	4630      	mov	r0, r6
 8012930:	4639      	mov	r1, r7
 8012932:	f7ed fe39 	bl	80005a8 <__aeabi_dmul>
 8012936:	e76a      	b.n	801280e <__ieee754_pow+0x3e>
 8012938:	4b3e      	ldr	r3, [pc, #248]	; (8012a34 <__ieee754_pow+0x264>)
 801293a:	4599      	cmp	r9, r3
 801293c:	d10c      	bne.n	8012958 <__ieee754_pow+0x188>
 801293e:	2d00      	cmp	r5, #0
 8012940:	db0a      	blt.n	8012958 <__ieee754_pow+0x188>
 8012942:	ec47 6b10 	vmov	d0, r6, r7
 8012946:	b009      	add	sp, #36	; 0x24
 8012948:	ecbd 8b06 	vpop	{d8-d10}
 801294c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012950:	f000 bd20 	b.w	8013394 <__ieee754_sqrt>
 8012954:	2300      	movs	r3, #0
 8012956:	9304      	str	r3, [sp, #16]
 8012958:	ec47 6b10 	vmov	d0, r6, r7
 801295c:	f000 fc62 	bl	8013224 <fabs>
 8012960:	ec51 0b10 	vmov	r0, r1, d0
 8012964:	f1ba 0f00 	cmp.w	sl, #0
 8012968:	d129      	bne.n	80129be <__ieee754_pow+0x1ee>
 801296a:	b124      	cbz	r4, 8012976 <__ieee754_pow+0x1a6>
 801296c:	4b2f      	ldr	r3, [pc, #188]	; (8012a2c <__ieee754_pow+0x25c>)
 801296e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8012972:	429a      	cmp	r2, r3
 8012974:	d123      	bne.n	80129be <__ieee754_pow+0x1ee>
 8012976:	f1b9 0f00 	cmp.w	r9, #0
 801297a:	da05      	bge.n	8012988 <__ieee754_pow+0x1b8>
 801297c:	4602      	mov	r2, r0
 801297e:	460b      	mov	r3, r1
 8012980:	2000      	movs	r0, #0
 8012982:	492a      	ldr	r1, [pc, #168]	; (8012a2c <__ieee754_pow+0x25c>)
 8012984:	f7ed ff3a 	bl	80007fc <__aeabi_ddiv>
 8012988:	2d00      	cmp	r5, #0
 801298a:	f6bf af40 	bge.w	801280e <__ieee754_pow+0x3e>
 801298e:	9b04      	ldr	r3, [sp, #16]
 8012990:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8012994:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012998:	431c      	orrs	r4, r3
 801299a:	d108      	bne.n	80129ae <__ieee754_pow+0x1de>
 801299c:	4602      	mov	r2, r0
 801299e:	460b      	mov	r3, r1
 80129a0:	4610      	mov	r0, r2
 80129a2:	4619      	mov	r1, r3
 80129a4:	f7ed fc48 	bl	8000238 <__aeabi_dsub>
 80129a8:	4602      	mov	r2, r0
 80129aa:	460b      	mov	r3, r1
 80129ac:	e78f      	b.n	80128ce <__ieee754_pow+0xfe>
 80129ae:	9b04      	ldr	r3, [sp, #16]
 80129b0:	2b01      	cmp	r3, #1
 80129b2:	f47f af2c 	bne.w	801280e <__ieee754_pow+0x3e>
 80129b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80129ba:	4619      	mov	r1, r3
 80129bc:	e727      	b.n	801280e <__ieee754_pow+0x3e>
 80129be:	0feb      	lsrs	r3, r5, #31
 80129c0:	3b01      	subs	r3, #1
 80129c2:	9306      	str	r3, [sp, #24]
 80129c4:	9a06      	ldr	r2, [sp, #24]
 80129c6:	9b04      	ldr	r3, [sp, #16]
 80129c8:	4313      	orrs	r3, r2
 80129ca:	d102      	bne.n	80129d2 <__ieee754_pow+0x202>
 80129cc:	4632      	mov	r2, r6
 80129ce:	463b      	mov	r3, r7
 80129d0:	e7e6      	b.n	80129a0 <__ieee754_pow+0x1d0>
 80129d2:	4b19      	ldr	r3, [pc, #100]	; (8012a38 <__ieee754_pow+0x268>)
 80129d4:	4598      	cmp	r8, r3
 80129d6:	f340 80fb 	ble.w	8012bd0 <__ieee754_pow+0x400>
 80129da:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80129de:	4598      	cmp	r8, r3
 80129e0:	4b13      	ldr	r3, [pc, #76]	; (8012a30 <__ieee754_pow+0x260>)
 80129e2:	dd0c      	ble.n	80129fe <__ieee754_pow+0x22e>
 80129e4:	429c      	cmp	r4, r3
 80129e6:	dc0f      	bgt.n	8012a08 <__ieee754_pow+0x238>
 80129e8:	f1b9 0f00 	cmp.w	r9, #0
 80129ec:	da0f      	bge.n	8012a0e <__ieee754_pow+0x23e>
 80129ee:	2000      	movs	r0, #0
 80129f0:	b009      	add	sp, #36	; 0x24
 80129f2:	ecbd 8b06 	vpop	{d8-d10}
 80129f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129fa:	f000 bcc2 	b.w	8013382 <__math_oflow>
 80129fe:	429c      	cmp	r4, r3
 8012a00:	dbf2      	blt.n	80129e8 <__ieee754_pow+0x218>
 8012a02:	4b0a      	ldr	r3, [pc, #40]	; (8012a2c <__ieee754_pow+0x25c>)
 8012a04:	429c      	cmp	r4, r3
 8012a06:	dd19      	ble.n	8012a3c <__ieee754_pow+0x26c>
 8012a08:	f1b9 0f00 	cmp.w	r9, #0
 8012a0c:	dcef      	bgt.n	80129ee <__ieee754_pow+0x21e>
 8012a0e:	2000      	movs	r0, #0
 8012a10:	b009      	add	sp, #36	; 0x24
 8012a12:	ecbd 8b06 	vpop	{d8-d10}
 8012a16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a1a:	f000 bca9 	b.w	8013370 <__math_uflow>
 8012a1e:	bf00      	nop
 8012a20:	fff00000 	.word	0xfff00000
 8012a24:	7ff00000 	.word	0x7ff00000
 8012a28:	433fffff 	.word	0x433fffff
 8012a2c:	3ff00000 	.word	0x3ff00000
 8012a30:	3fefffff 	.word	0x3fefffff
 8012a34:	3fe00000 	.word	0x3fe00000
 8012a38:	41e00000 	.word	0x41e00000
 8012a3c:	4b60      	ldr	r3, [pc, #384]	; (8012bc0 <__ieee754_pow+0x3f0>)
 8012a3e:	2200      	movs	r2, #0
 8012a40:	f7ed fbfa 	bl	8000238 <__aeabi_dsub>
 8012a44:	a354      	add	r3, pc, #336	; (adr r3, 8012b98 <__ieee754_pow+0x3c8>)
 8012a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a4a:	4604      	mov	r4, r0
 8012a4c:	460d      	mov	r5, r1
 8012a4e:	f7ed fdab 	bl	80005a8 <__aeabi_dmul>
 8012a52:	a353      	add	r3, pc, #332	; (adr r3, 8012ba0 <__ieee754_pow+0x3d0>)
 8012a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a58:	4606      	mov	r6, r0
 8012a5a:	460f      	mov	r7, r1
 8012a5c:	4620      	mov	r0, r4
 8012a5e:	4629      	mov	r1, r5
 8012a60:	f7ed fda2 	bl	80005a8 <__aeabi_dmul>
 8012a64:	4b57      	ldr	r3, [pc, #348]	; (8012bc4 <__ieee754_pow+0x3f4>)
 8012a66:	4682      	mov	sl, r0
 8012a68:	468b      	mov	fp, r1
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	4620      	mov	r0, r4
 8012a6e:	4629      	mov	r1, r5
 8012a70:	f7ed fd9a 	bl	80005a8 <__aeabi_dmul>
 8012a74:	4602      	mov	r2, r0
 8012a76:	460b      	mov	r3, r1
 8012a78:	a14b      	add	r1, pc, #300	; (adr r1, 8012ba8 <__ieee754_pow+0x3d8>)
 8012a7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012a7e:	f7ed fbdb 	bl	8000238 <__aeabi_dsub>
 8012a82:	4622      	mov	r2, r4
 8012a84:	462b      	mov	r3, r5
 8012a86:	f7ed fd8f 	bl	80005a8 <__aeabi_dmul>
 8012a8a:	4602      	mov	r2, r0
 8012a8c:	460b      	mov	r3, r1
 8012a8e:	2000      	movs	r0, #0
 8012a90:	494d      	ldr	r1, [pc, #308]	; (8012bc8 <__ieee754_pow+0x3f8>)
 8012a92:	f7ed fbd1 	bl	8000238 <__aeabi_dsub>
 8012a96:	4622      	mov	r2, r4
 8012a98:	4680      	mov	r8, r0
 8012a9a:	4689      	mov	r9, r1
 8012a9c:	462b      	mov	r3, r5
 8012a9e:	4620      	mov	r0, r4
 8012aa0:	4629      	mov	r1, r5
 8012aa2:	f7ed fd81 	bl	80005a8 <__aeabi_dmul>
 8012aa6:	4602      	mov	r2, r0
 8012aa8:	460b      	mov	r3, r1
 8012aaa:	4640      	mov	r0, r8
 8012aac:	4649      	mov	r1, r9
 8012aae:	f7ed fd7b 	bl	80005a8 <__aeabi_dmul>
 8012ab2:	a33f      	add	r3, pc, #252	; (adr r3, 8012bb0 <__ieee754_pow+0x3e0>)
 8012ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ab8:	f7ed fd76 	bl	80005a8 <__aeabi_dmul>
 8012abc:	4602      	mov	r2, r0
 8012abe:	460b      	mov	r3, r1
 8012ac0:	4650      	mov	r0, sl
 8012ac2:	4659      	mov	r1, fp
 8012ac4:	f7ed fbb8 	bl	8000238 <__aeabi_dsub>
 8012ac8:	4602      	mov	r2, r0
 8012aca:	460b      	mov	r3, r1
 8012acc:	4680      	mov	r8, r0
 8012ace:	4689      	mov	r9, r1
 8012ad0:	4630      	mov	r0, r6
 8012ad2:	4639      	mov	r1, r7
 8012ad4:	f7ed fbb2 	bl	800023c <__adddf3>
 8012ad8:	2000      	movs	r0, #0
 8012ada:	4632      	mov	r2, r6
 8012adc:	463b      	mov	r3, r7
 8012ade:	4604      	mov	r4, r0
 8012ae0:	460d      	mov	r5, r1
 8012ae2:	f7ed fba9 	bl	8000238 <__aeabi_dsub>
 8012ae6:	4602      	mov	r2, r0
 8012ae8:	460b      	mov	r3, r1
 8012aea:	4640      	mov	r0, r8
 8012aec:	4649      	mov	r1, r9
 8012aee:	f7ed fba3 	bl	8000238 <__aeabi_dsub>
 8012af2:	9b04      	ldr	r3, [sp, #16]
 8012af4:	9a06      	ldr	r2, [sp, #24]
 8012af6:	3b01      	subs	r3, #1
 8012af8:	4313      	orrs	r3, r2
 8012afa:	4682      	mov	sl, r0
 8012afc:	468b      	mov	fp, r1
 8012afe:	f040 81e7 	bne.w	8012ed0 <__ieee754_pow+0x700>
 8012b02:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8012bb8 <__ieee754_pow+0x3e8>
 8012b06:	eeb0 8a47 	vmov.f32	s16, s14
 8012b0a:	eef0 8a67 	vmov.f32	s17, s15
 8012b0e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012b12:	2600      	movs	r6, #0
 8012b14:	4632      	mov	r2, r6
 8012b16:	463b      	mov	r3, r7
 8012b18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012b1c:	f7ed fb8c 	bl	8000238 <__aeabi_dsub>
 8012b20:	4622      	mov	r2, r4
 8012b22:	462b      	mov	r3, r5
 8012b24:	f7ed fd40 	bl	80005a8 <__aeabi_dmul>
 8012b28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b2c:	4680      	mov	r8, r0
 8012b2e:	4689      	mov	r9, r1
 8012b30:	4650      	mov	r0, sl
 8012b32:	4659      	mov	r1, fp
 8012b34:	f7ed fd38 	bl	80005a8 <__aeabi_dmul>
 8012b38:	4602      	mov	r2, r0
 8012b3a:	460b      	mov	r3, r1
 8012b3c:	4640      	mov	r0, r8
 8012b3e:	4649      	mov	r1, r9
 8012b40:	f7ed fb7c 	bl	800023c <__adddf3>
 8012b44:	4632      	mov	r2, r6
 8012b46:	463b      	mov	r3, r7
 8012b48:	4680      	mov	r8, r0
 8012b4a:	4689      	mov	r9, r1
 8012b4c:	4620      	mov	r0, r4
 8012b4e:	4629      	mov	r1, r5
 8012b50:	f7ed fd2a 	bl	80005a8 <__aeabi_dmul>
 8012b54:	460b      	mov	r3, r1
 8012b56:	4604      	mov	r4, r0
 8012b58:	460d      	mov	r5, r1
 8012b5a:	4602      	mov	r2, r0
 8012b5c:	4649      	mov	r1, r9
 8012b5e:	4640      	mov	r0, r8
 8012b60:	f7ed fb6c 	bl	800023c <__adddf3>
 8012b64:	4b19      	ldr	r3, [pc, #100]	; (8012bcc <__ieee754_pow+0x3fc>)
 8012b66:	4299      	cmp	r1, r3
 8012b68:	ec45 4b19 	vmov	d9, r4, r5
 8012b6c:	4606      	mov	r6, r0
 8012b6e:	460f      	mov	r7, r1
 8012b70:	468b      	mov	fp, r1
 8012b72:	f340 82f0 	ble.w	8013156 <__ieee754_pow+0x986>
 8012b76:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012b7a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012b7e:	4303      	orrs	r3, r0
 8012b80:	f000 81e4 	beq.w	8012f4c <__ieee754_pow+0x77c>
 8012b84:	ec51 0b18 	vmov	r0, r1, d8
 8012b88:	2200      	movs	r2, #0
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	f7ed ff7e 	bl	8000a8c <__aeabi_dcmplt>
 8012b90:	3800      	subs	r0, #0
 8012b92:	bf18      	it	ne
 8012b94:	2001      	movne	r0, #1
 8012b96:	e72b      	b.n	80129f0 <__ieee754_pow+0x220>
 8012b98:	60000000 	.word	0x60000000
 8012b9c:	3ff71547 	.word	0x3ff71547
 8012ba0:	f85ddf44 	.word	0xf85ddf44
 8012ba4:	3e54ae0b 	.word	0x3e54ae0b
 8012ba8:	55555555 	.word	0x55555555
 8012bac:	3fd55555 	.word	0x3fd55555
 8012bb0:	652b82fe 	.word	0x652b82fe
 8012bb4:	3ff71547 	.word	0x3ff71547
 8012bb8:	00000000 	.word	0x00000000
 8012bbc:	bff00000 	.word	0xbff00000
 8012bc0:	3ff00000 	.word	0x3ff00000
 8012bc4:	3fd00000 	.word	0x3fd00000
 8012bc8:	3fe00000 	.word	0x3fe00000
 8012bcc:	408fffff 	.word	0x408fffff
 8012bd0:	4bd5      	ldr	r3, [pc, #852]	; (8012f28 <__ieee754_pow+0x758>)
 8012bd2:	402b      	ands	r3, r5
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	b92b      	cbnz	r3, 8012be4 <__ieee754_pow+0x414>
 8012bd8:	4bd4      	ldr	r3, [pc, #848]	; (8012f2c <__ieee754_pow+0x75c>)
 8012bda:	f7ed fce5 	bl	80005a8 <__aeabi_dmul>
 8012bde:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8012be2:	460c      	mov	r4, r1
 8012be4:	1523      	asrs	r3, r4, #20
 8012be6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012bea:	4413      	add	r3, r2
 8012bec:	9305      	str	r3, [sp, #20]
 8012bee:	4bd0      	ldr	r3, [pc, #832]	; (8012f30 <__ieee754_pow+0x760>)
 8012bf0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012bf4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012bf8:	429c      	cmp	r4, r3
 8012bfa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012bfe:	dd08      	ble.n	8012c12 <__ieee754_pow+0x442>
 8012c00:	4bcc      	ldr	r3, [pc, #816]	; (8012f34 <__ieee754_pow+0x764>)
 8012c02:	429c      	cmp	r4, r3
 8012c04:	f340 8162 	ble.w	8012ecc <__ieee754_pow+0x6fc>
 8012c08:	9b05      	ldr	r3, [sp, #20]
 8012c0a:	3301      	adds	r3, #1
 8012c0c:	9305      	str	r3, [sp, #20]
 8012c0e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8012c12:	2400      	movs	r4, #0
 8012c14:	00e3      	lsls	r3, r4, #3
 8012c16:	9307      	str	r3, [sp, #28]
 8012c18:	4bc7      	ldr	r3, [pc, #796]	; (8012f38 <__ieee754_pow+0x768>)
 8012c1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012c1e:	ed93 7b00 	vldr	d7, [r3]
 8012c22:	4629      	mov	r1, r5
 8012c24:	ec53 2b17 	vmov	r2, r3, d7
 8012c28:	eeb0 9a47 	vmov.f32	s18, s14
 8012c2c:	eef0 9a67 	vmov.f32	s19, s15
 8012c30:	4682      	mov	sl, r0
 8012c32:	f7ed fb01 	bl	8000238 <__aeabi_dsub>
 8012c36:	4652      	mov	r2, sl
 8012c38:	4606      	mov	r6, r0
 8012c3a:	460f      	mov	r7, r1
 8012c3c:	462b      	mov	r3, r5
 8012c3e:	ec51 0b19 	vmov	r0, r1, d9
 8012c42:	f7ed fafb 	bl	800023c <__adddf3>
 8012c46:	4602      	mov	r2, r0
 8012c48:	460b      	mov	r3, r1
 8012c4a:	2000      	movs	r0, #0
 8012c4c:	49bb      	ldr	r1, [pc, #748]	; (8012f3c <__ieee754_pow+0x76c>)
 8012c4e:	f7ed fdd5 	bl	80007fc <__aeabi_ddiv>
 8012c52:	ec41 0b1a 	vmov	d10, r0, r1
 8012c56:	4602      	mov	r2, r0
 8012c58:	460b      	mov	r3, r1
 8012c5a:	4630      	mov	r0, r6
 8012c5c:	4639      	mov	r1, r7
 8012c5e:	f7ed fca3 	bl	80005a8 <__aeabi_dmul>
 8012c62:	2300      	movs	r3, #0
 8012c64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c68:	9302      	str	r3, [sp, #8]
 8012c6a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012c6e:	46ab      	mov	fp, r5
 8012c70:	106d      	asrs	r5, r5, #1
 8012c72:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012c76:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012c7a:	ec41 0b18 	vmov	d8, r0, r1
 8012c7e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8012c82:	2200      	movs	r2, #0
 8012c84:	4640      	mov	r0, r8
 8012c86:	4649      	mov	r1, r9
 8012c88:	4614      	mov	r4, r2
 8012c8a:	461d      	mov	r5, r3
 8012c8c:	f7ed fc8c 	bl	80005a8 <__aeabi_dmul>
 8012c90:	4602      	mov	r2, r0
 8012c92:	460b      	mov	r3, r1
 8012c94:	4630      	mov	r0, r6
 8012c96:	4639      	mov	r1, r7
 8012c98:	f7ed face 	bl	8000238 <__aeabi_dsub>
 8012c9c:	ec53 2b19 	vmov	r2, r3, d9
 8012ca0:	4606      	mov	r6, r0
 8012ca2:	460f      	mov	r7, r1
 8012ca4:	4620      	mov	r0, r4
 8012ca6:	4629      	mov	r1, r5
 8012ca8:	f7ed fac6 	bl	8000238 <__aeabi_dsub>
 8012cac:	4602      	mov	r2, r0
 8012cae:	460b      	mov	r3, r1
 8012cb0:	4650      	mov	r0, sl
 8012cb2:	4659      	mov	r1, fp
 8012cb4:	f7ed fac0 	bl	8000238 <__aeabi_dsub>
 8012cb8:	4642      	mov	r2, r8
 8012cba:	464b      	mov	r3, r9
 8012cbc:	f7ed fc74 	bl	80005a8 <__aeabi_dmul>
 8012cc0:	4602      	mov	r2, r0
 8012cc2:	460b      	mov	r3, r1
 8012cc4:	4630      	mov	r0, r6
 8012cc6:	4639      	mov	r1, r7
 8012cc8:	f7ed fab6 	bl	8000238 <__aeabi_dsub>
 8012ccc:	ec53 2b1a 	vmov	r2, r3, d10
 8012cd0:	f7ed fc6a 	bl	80005a8 <__aeabi_dmul>
 8012cd4:	ec53 2b18 	vmov	r2, r3, d8
 8012cd8:	ec41 0b19 	vmov	d9, r0, r1
 8012cdc:	ec51 0b18 	vmov	r0, r1, d8
 8012ce0:	f7ed fc62 	bl	80005a8 <__aeabi_dmul>
 8012ce4:	a37c      	add	r3, pc, #496	; (adr r3, 8012ed8 <__ieee754_pow+0x708>)
 8012ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cea:	4604      	mov	r4, r0
 8012cec:	460d      	mov	r5, r1
 8012cee:	f7ed fc5b 	bl	80005a8 <__aeabi_dmul>
 8012cf2:	a37b      	add	r3, pc, #492	; (adr r3, 8012ee0 <__ieee754_pow+0x710>)
 8012cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cf8:	f7ed faa0 	bl	800023c <__adddf3>
 8012cfc:	4622      	mov	r2, r4
 8012cfe:	462b      	mov	r3, r5
 8012d00:	f7ed fc52 	bl	80005a8 <__aeabi_dmul>
 8012d04:	a378      	add	r3, pc, #480	; (adr r3, 8012ee8 <__ieee754_pow+0x718>)
 8012d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d0a:	f7ed fa97 	bl	800023c <__adddf3>
 8012d0e:	4622      	mov	r2, r4
 8012d10:	462b      	mov	r3, r5
 8012d12:	f7ed fc49 	bl	80005a8 <__aeabi_dmul>
 8012d16:	a376      	add	r3, pc, #472	; (adr r3, 8012ef0 <__ieee754_pow+0x720>)
 8012d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d1c:	f7ed fa8e 	bl	800023c <__adddf3>
 8012d20:	4622      	mov	r2, r4
 8012d22:	462b      	mov	r3, r5
 8012d24:	f7ed fc40 	bl	80005a8 <__aeabi_dmul>
 8012d28:	a373      	add	r3, pc, #460	; (adr r3, 8012ef8 <__ieee754_pow+0x728>)
 8012d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d2e:	f7ed fa85 	bl	800023c <__adddf3>
 8012d32:	4622      	mov	r2, r4
 8012d34:	462b      	mov	r3, r5
 8012d36:	f7ed fc37 	bl	80005a8 <__aeabi_dmul>
 8012d3a:	a371      	add	r3, pc, #452	; (adr r3, 8012f00 <__ieee754_pow+0x730>)
 8012d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d40:	f7ed fa7c 	bl	800023c <__adddf3>
 8012d44:	4622      	mov	r2, r4
 8012d46:	4606      	mov	r6, r0
 8012d48:	460f      	mov	r7, r1
 8012d4a:	462b      	mov	r3, r5
 8012d4c:	4620      	mov	r0, r4
 8012d4e:	4629      	mov	r1, r5
 8012d50:	f7ed fc2a 	bl	80005a8 <__aeabi_dmul>
 8012d54:	4602      	mov	r2, r0
 8012d56:	460b      	mov	r3, r1
 8012d58:	4630      	mov	r0, r6
 8012d5a:	4639      	mov	r1, r7
 8012d5c:	f7ed fc24 	bl	80005a8 <__aeabi_dmul>
 8012d60:	4642      	mov	r2, r8
 8012d62:	4604      	mov	r4, r0
 8012d64:	460d      	mov	r5, r1
 8012d66:	464b      	mov	r3, r9
 8012d68:	ec51 0b18 	vmov	r0, r1, d8
 8012d6c:	f7ed fa66 	bl	800023c <__adddf3>
 8012d70:	ec53 2b19 	vmov	r2, r3, d9
 8012d74:	f7ed fc18 	bl	80005a8 <__aeabi_dmul>
 8012d78:	4622      	mov	r2, r4
 8012d7a:	462b      	mov	r3, r5
 8012d7c:	f7ed fa5e 	bl	800023c <__adddf3>
 8012d80:	4642      	mov	r2, r8
 8012d82:	4682      	mov	sl, r0
 8012d84:	468b      	mov	fp, r1
 8012d86:	464b      	mov	r3, r9
 8012d88:	4640      	mov	r0, r8
 8012d8a:	4649      	mov	r1, r9
 8012d8c:	f7ed fc0c 	bl	80005a8 <__aeabi_dmul>
 8012d90:	4b6b      	ldr	r3, [pc, #428]	; (8012f40 <__ieee754_pow+0x770>)
 8012d92:	2200      	movs	r2, #0
 8012d94:	4606      	mov	r6, r0
 8012d96:	460f      	mov	r7, r1
 8012d98:	f7ed fa50 	bl	800023c <__adddf3>
 8012d9c:	4652      	mov	r2, sl
 8012d9e:	465b      	mov	r3, fp
 8012da0:	f7ed fa4c 	bl	800023c <__adddf3>
 8012da4:	2000      	movs	r0, #0
 8012da6:	4604      	mov	r4, r0
 8012da8:	460d      	mov	r5, r1
 8012daa:	4602      	mov	r2, r0
 8012dac:	460b      	mov	r3, r1
 8012dae:	4640      	mov	r0, r8
 8012db0:	4649      	mov	r1, r9
 8012db2:	f7ed fbf9 	bl	80005a8 <__aeabi_dmul>
 8012db6:	4b62      	ldr	r3, [pc, #392]	; (8012f40 <__ieee754_pow+0x770>)
 8012db8:	4680      	mov	r8, r0
 8012dba:	4689      	mov	r9, r1
 8012dbc:	2200      	movs	r2, #0
 8012dbe:	4620      	mov	r0, r4
 8012dc0:	4629      	mov	r1, r5
 8012dc2:	f7ed fa39 	bl	8000238 <__aeabi_dsub>
 8012dc6:	4632      	mov	r2, r6
 8012dc8:	463b      	mov	r3, r7
 8012dca:	f7ed fa35 	bl	8000238 <__aeabi_dsub>
 8012dce:	4602      	mov	r2, r0
 8012dd0:	460b      	mov	r3, r1
 8012dd2:	4650      	mov	r0, sl
 8012dd4:	4659      	mov	r1, fp
 8012dd6:	f7ed fa2f 	bl	8000238 <__aeabi_dsub>
 8012dda:	ec53 2b18 	vmov	r2, r3, d8
 8012dde:	f7ed fbe3 	bl	80005a8 <__aeabi_dmul>
 8012de2:	4622      	mov	r2, r4
 8012de4:	4606      	mov	r6, r0
 8012de6:	460f      	mov	r7, r1
 8012de8:	462b      	mov	r3, r5
 8012dea:	ec51 0b19 	vmov	r0, r1, d9
 8012dee:	f7ed fbdb 	bl	80005a8 <__aeabi_dmul>
 8012df2:	4602      	mov	r2, r0
 8012df4:	460b      	mov	r3, r1
 8012df6:	4630      	mov	r0, r6
 8012df8:	4639      	mov	r1, r7
 8012dfa:	f7ed fa1f 	bl	800023c <__adddf3>
 8012dfe:	4606      	mov	r6, r0
 8012e00:	460f      	mov	r7, r1
 8012e02:	4602      	mov	r2, r0
 8012e04:	460b      	mov	r3, r1
 8012e06:	4640      	mov	r0, r8
 8012e08:	4649      	mov	r1, r9
 8012e0a:	f7ed fa17 	bl	800023c <__adddf3>
 8012e0e:	a33e      	add	r3, pc, #248	; (adr r3, 8012f08 <__ieee754_pow+0x738>)
 8012e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e14:	2000      	movs	r0, #0
 8012e16:	4604      	mov	r4, r0
 8012e18:	460d      	mov	r5, r1
 8012e1a:	f7ed fbc5 	bl	80005a8 <__aeabi_dmul>
 8012e1e:	4642      	mov	r2, r8
 8012e20:	ec41 0b18 	vmov	d8, r0, r1
 8012e24:	464b      	mov	r3, r9
 8012e26:	4620      	mov	r0, r4
 8012e28:	4629      	mov	r1, r5
 8012e2a:	f7ed fa05 	bl	8000238 <__aeabi_dsub>
 8012e2e:	4602      	mov	r2, r0
 8012e30:	460b      	mov	r3, r1
 8012e32:	4630      	mov	r0, r6
 8012e34:	4639      	mov	r1, r7
 8012e36:	f7ed f9ff 	bl	8000238 <__aeabi_dsub>
 8012e3a:	a335      	add	r3, pc, #212	; (adr r3, 8012f10 <__ieee754_pow+0x740>)
 8012e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e40:	f7ed fbb2 	bl	80005a8 <__aeabi_dmul>
 8012e44:	a334      	add	r3, pc, #208	; (adr r3, 8012f18 <__ieee754_pow+0x748>)
 8012e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e4a:	4606      	mov	r6, r0
 8012e4c:	460f      	mov	r7, r1
 8012e4e:	4620      	mov	r0, r4
 8012e50:	4629      	mov	r1, r5
 8012e52:	f7ed fba9 	bl	80005a8 <__aeabi_dmul>
 8012e56:	4602      	mov	r2, r0
 8012e58:	460b      	mov	r3, r1
 8012e5a:	4630      	mov	r0, r6
 8012e5c:	4639      	mov	r1, r7
 8012e5e:	f7ed f9ed 	bl	800023c <__adddf3>
 8012e62:	9a07      	ldr	r2, [sp, #28]
 8012e64:	4b37      	ldr	r3, [pc, #220]	; (8012f44 <__ieee754_pow+0x774>)
 8012e66:	4413      	add	r3, r2
 8012e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e6c:	f7ed f9e6 	bl	800023c <__adddf3>
 8012e70:	4682      	mov	sl, r0
 8012e72:	9805      	ldr	r0, [sp, #20]
 8012e74:	468b      	mov	fp, r1
 8012e76:	f7ed fb2d 	bl	80004d4 <__aeabi_i2d>
 8012e7a:	9a07      	ldr	r2, [sp, #28]
 8012e7c:	4b32      	ldr	r3, [pc, #200]	; (8012f48 <__ieee754_pow+0x778>)
 8012e7e:	4413      	add	r3, r2
 8012e80:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012e84:	4606      	mov	r6, r0
 8012e86:	460f      	mov	r7, r1
 8012e88:	4652      	mov	r2, sl
 8012e8a:	465b      	mov	r3, fp
 8012e8c:	ec51 0b18 	vmov	r0, r1, d8
 8012e90:	f7ed f9d4 	bl	800023c <__adddf3>
 8012e94:	4642      	mov	r2, r8
 8012e96:	464b      	mov	r3, r9
 8012e98:	f7ed f9d0 	bl	800023c <__adddf3>
 8012e9c:	4632      	mov	r2, r6
 8012e9e:	463b      	mov	r3, r7
 8012ea0:	f7ed f9cc 	bl	800023c <__adddf3>
 8012ea4:	2000      	movs	r0, #0
 8012ea6:	4632      	mov	r2, r6
 8012ea8:	463b      	mov	r3, r7
 8012eaa:	4604      	mov	r4, r0
 8012eac:	460d      	mov	r5, r1
 8012eae:	f7ed f9c3 	bl	8000238 <__aeabi_dsub>
 8012eb2:	4642      	mov	r2, r8
 8012eb4:	464b      	mov	r3, r9
 8012eb6:	f7ed f9bf 	bl	8000238 <__aeabi_dsub>
 8012eba:	ec53 2b18 	vmov	r2, r3, d8
 8012ebe:	f7ed f9bb 	bl	8000238 <__aeabi_dsub>
 8012ec2:	4602      	mov	r2, r0
 8012ec4:	460b      	mov	r3, r1
 8012ec6:	4650      	mov	r0, sl
 8012ec8:	4659      	mov	r1, fp
 8012eca:	e610      	b.n	8012aee <__ieee754_pow+0x31e>
 8012ecc:	2401      	movs	r4, #1
 8012ece:	e6a1      	b.n	8012c14 <__ieee754_pow+0x444>
 8012ed0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8012f20 <__ieee754_pow+0x750>
 8012ed4:	e617      	b.n	8012b06 <__ieee754_pow+0x336>
 8012ed6:	bf00      	nop
 8012ed8:	4a454eef 	.word	0x4a454eef
 8012edc:	3fca7e28 	.word	0x3fca7e28
 8012ee0:	93c9db65 	.word	0x93c9db65
 8012ee4:	3fcd864a 	.word	0x3fcd864a
 8012ee8:	a91d4101 	.word	0xa91d4101
 8012eec:	3fd17460 	.word	0x3fd17460
 8012ef0:	518f264d 	.word	0x518f264d
 8012ef4:	3fd55555 	.word	0x3fd55555
 8012ef8:	db6fabff 	.word	0xdb6fabff
 8012efc:	3fdb6db6 	.word	0x3fdb6db6
 8012f00:	33333303 	.word	0x33333303
 8012f04:	3fe33333 	.word	0x3fe33333
 8012f08:	e0000000 	.word	0xe0000000
 8012f0c:	3feec709 	.word	0x3feec709
 8012f10:	dc3a03fd 	.word	0xdc3a03fd
 8012f14:	3feec709 	.word	0x3feec709
 8012f18:	145b01f5 	.word	0x145b01f5
 8012f1c:	be3e2fe0 	.word	0xbe3e2fe0
 8012f20:	00000000 	.word	0x00000000
 8012f24:	3ff00000 	.word	0x3ff00000
 8012f28:	7ff00000 	.word	0x7ff00000
 8012f2c:	43400000 	.word	0x43400000
 8012f30:	0003988e 	.word	0x0003988e
 8012f34:	000bb679 	.word	0x000bb679
 8012f38:	08014558 	.word	0x08014558
 8012f3c:	3ff00000 	.word	0x3ff00000
 8012f40:	40080000 	.word	0x40080000
 8012f44:	08014578 	.word	0x08014578
 8012f48:	08014568 	.word	0x08014568
 8012f4c:	a3b3      	add	r3, pc, #716	; (adr r3, 801321c <__ieee754_pow+0xa4c>)
 8012f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f52:	4640      	mov	r0, r8
 8012f54:	4649      	mov	r1, r9
 8012f56:	f7ed f971 	bl	800023c <__adddf3>
 8012f5a:	4622      	mov	r2, r4
 8012f5c:	ec41 0b1a 	vmov	d10, r0, r1
 8012f60:	462b      	mov	r3, r5
 8012f62:	4630      	mov	r0, r6
 8012f64:	4639      	mov	r1, r7
 8012f66:	f7ed f967 	bl	8000238 <__aeabi_dsub>
 8012f6a:	4602      	mov	r2, r0
 8012f6c:	460b      	mov	r3, r1
 8012f6e:	ec51 0b1a 	vmov	r0, r1, d10
 8012f72:	f7ed fda9 	bl	8000ac8 <__aeabi_dcmpgt>
 8012f76:	2800      	cmp	r0, #0
 8012f78:	f47f ae04 	bne.w	8012b84 <__ieee754_pow+0x3b4>
 8012f7c:	4aa2      	ldr	r2, [pc, #648]	; (8013208 <__ieee754_pow+0xa38>)
 8012f7e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012f82:	4293      	cmp	r3, r2
 8012f84:	f340 8107 	ble.w	8013196 <__ieee754_pow+0x9c6>
 8012f88:	151b      	asrs	r3, r3, #20
 8012f8a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8012f8e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012f92:	fa4a fa03 	asr.w	sl, sl, r3
 8012f96:	44da      	add	sl, fp
 8012f98:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8012f9c:	489b      	ldr	r0, [pc, #620]	; (801320c <__ieee754_pow+0xa3c>)
 8012f9e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8012fa2:	4108      	asrs	r0, r1
 8012fa4:	ea00 030a 	and.w	r3, r0, sl
 8012fa8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8012fac:	f1c1 0114 	rsb	r1, r1, #20
 8012fb0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8012fb4:	fa4a fa01 	asr.w	sl, sl, r1
 8012fb8:	f1bb 0f00 	cmp.w	fp, #0
 8012fbc:	f04f 0200 	mov.w	r2, #0
 8012fc0:	4620      	mov	r0, r4
 8012fc2:	4629      	mov	r1, r5
 8012fc4:	bfb8      	it	lt
 8012fc6:	f1ca 0a00 	rsblt	sl, sl, #0
 8012fca:	f7ed f935 	bl	8000238 <__aeabi_dsub>
 8012fce:	ec41 0b19 	vmov	d9, r0, r1
 8012fd2:	4642      	mov	r2, r8
 8012fd4:	464b      	mov	r3, r9
 8012fd6:	ec51 0b19 	vmov	r0, r1, d9
 8012fda:	f7ed f92f 	bl	800023c <__adddf3>
 8012fde:	a37a      	add	r3, pc, #488	; (adr r3, 80131c8 <__ieee754_pow+0x9f8>)
 8012fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fe4:	2000      	movs	r0, #0
 8012fe6:	4604      	mov	r4, r0
 8012fe8:	460d      	mov	r5, r1
 8012fea:	f7ed fadd 	bl	80005a8 <__aeabi_dmul>
 8012fee:	ec53 2b19 	vmov	r2, r3, d9
 8012ff2:	4606      	mov	r6, r0
 8012ff4:	460f      	mov	r7, r1
 8012ff6:	4620      	mov	r0, r4
 8012ff8:	4629      	mov	r1, r5
 8012ffa:	f7ed f91d 	bl	8000238 <__aeabi_dsub>
 8012ffe:	4602      	mov	r2, r0
 8013000:	460b      	mov	r3, r1
 8013002:	4640      	mov	r0, r8
 8013004:	4649      	mov	r1, r9
 8013006:	f7ed f917 	bl	8000238 <__aeabi_dsub>
 801300a:	a371      	add	r3, pc, #452	; (adr r3, 80131d0 <__ieee754_pow+0xa00>)
 801300c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013010:	f7ed faca 	bl	80005a8 <__aeabi_dmul>
 8013014:	a370      	add	r3, pc, #448	; (adr r3, 80131d8 <__ieee754_pow+0xa08>)
 8013016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801301a:	4680      	mov	r8, r0
 801301c:	4689      	mov	r9, r1
 801301e:	4620      	mov	r0, r4
 8013020:	4629      	mov	r1, r5
 8013022:	f7ed fac1 	bl	80005a8 <__aeabi_dmul>
 8013026:	4602      	mov	r2, r0
 8013028:	460b      	mov	r3, r1
 801302a:	4640      	mov	r0, r8
 801302c:	4649      	mov	r1, r9
 801302e:	f7ed f905 	bl	800023c <__adddf3>
 8013032:	4604      	mov	r4, r0
 8013034:	460d      	mov	r5, r1
 8013036:	4602      	mov	r2, r0
 8013038:	460b      	mov	r3, r1
 801303a:	4630      	mov	r0, r6
 801303c:	4639      	mov	r1, r7
 801303e:	f7ed f8fd 	bl	800023c <__adddf3>
 8013042:	4632      	mov	r2, r6
 8013044:	463b      	mov	r3, r7
 8013046:	4680      	mov	r8, r0
 8013048:	4689      	mov	r9, r1
 801304a:	f7ed f8f5 	bl	8000238 <__aeabi_dsub>
 801304e:	4602      	mov	r2, r0
 8013050:	460b      	mov	r3, r1
 8013052:	4620      	mov	r0, r4
 8013054:	4629      	mov	r1, r5
 8013056:	f7ed f8ef 	bl	8000238 <__aeabi_dsub>
 801305a:	4642      	mov	r2, r8
 801305c:	4606      	mov	r6, r0
 801305e:	460f      	mov	r7, r1
 8013060:	464b      	mov	r3, r9
 8013062:	4640      	mov	r0, r8
 8013064:	4649      	mov	r1, r9
 8013066:	f7ed fa9f 	bl	80005a8 <__aeabi_dmul>
 801306a:	a35d      	add	r3, pc, #372	; (adr r3, 80131e0 <__ieee754_pow+0xa10>)
 801306c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013070:	4604      	mov	r4, r0
 8013072:	460d      	mov	r5, r1
 8013074:	f7ed fa98 	bl	80005a8 <__aeabi_dmul>
 8013078:	a35b      	add	r3, pc, #364	; (adr r3, 80131e8 <__ieee754_pow+0xa18>)
 801307a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801307e:	f7ed f8db 	bl	8000238 <__aeabi_dsub>
 8013082:	4622      	mov	r2, r4
 8013084:	462b      	mov	r3, r5
 8013086:	f7ed fa8f 	bl	80005a8 <__aeabi_dmul>
 801308a:	a359      	add	r3, pc, #356	; (adr r3, 80131f0 <__ieee754_pow+0xa20>)
 801308c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013090:	f7ed f8d4 	bl	800023c <__adddf3>
 8013094:	4622      	mov	r2, r4
 8013096:	462b      	mov	r3, r5
 8013098:	f7ed fa86 	bl	80005a8 <__aeabi_dmul>
 801309c:	a356      	add	r3, pc, #344	; (adr r3, 80131f8 <__ieee754_pow+0xa28>)
 801309e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130a2:	f7ed f8c9 	bl	8000238 <__aeabi_dsub>
 80130a6:	4622      	mov	r2, r4
 80130a8:	462b      	mov	r3, r5
 80130aa:	f7ed fa7d 	bl	80005a8 <__aeabi_dmul>
 80130ae:	a354      	add	r3, pc, #336	; (adr r3, 8013200 <__ieee754_pow+0xa30>)
 80130b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130b4:	f7ed f8c2 	bl	800023c <__adddf3>
 80130b8:	4622      	mov	r2, r4
 80130ba:	462b      	mov	r3, r5
 80130bc:	f7ed fa74 	bl	80005a8 <__aeabi_dmul>
 80130c0:	4602      	mov	r2, r0
 80130c2:	460b      	mov	r3, r1
 80130c4:	4640      	mov	r0, r8
 80130c6:	4649      	mov	r1, r9
 80130c8:	f7ed f8b6 	bl	8000238 <__aeabi_dsub>
 80130cc:	4604      	mov	r4, r0
 80130ce:	460d      	mov	r5, r1
 80130d0:	4602      	mov	r2, r0
 80130d2:	460b      	mov	r3, r1
 80130d4:	4640      	mov	r0, r8
 80130d6:	4649      	mov	r1, r9
 80130d8:	f7ed fa66 	bl	80005a8 <__aeabi_dmul>
 80130dc:	2200      	movs	r2, #0
 80130de:	ec41 0b19 	vmov	d9, r0, r1
 80130e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80130e6:	4620      	mov	r0, r4
 80130e8:	4629      	mov	r1, r5
 80130ea:	f7ed f8a5 	bl	8000238 <__aeabi_dsub>
 80130ee:	4602      	mov	r2, r0
 80130f0:	460b      	mov	r3, r1
 80130f2:	ec51 0b19 	vmov	r0, r1, d9
 80130f6:	f7ed fb81 	bl	80007fc <__aeabi_ddiv>
 80130fa:	4632      	mov	r2, r6
 80130fc:	4604      	mov	r4, r0
 80130fe:	460d      	mov	r5, r1
 8013100:	463b      	mov	r3, r7
 8013102:	4640      	mov	r0, r8
 8013104:	4649      	mov	r1, r9
 8013106:	f7ed fa4f 	bl	80005a8 <__aeabi_dmul>
 801310a:	4632      	mov	r2, r6
 801310c:	463b      	mov	r3, r7
 801310e:	f7ed f895 	bl	800023c <__adddf3>
 8013112:	4602      	mov	r2, r0
 8013114:	460b      	mov	r3, r1
 8013116:	4620      	mov	r0, r4
 8013118:	4629      	mov	r1, r5
 801311a:	f7ed f88d 	bl	8000238 <__aeabi_dsub>
 801311e:	4642      	mov	r2, r8
 8013120:	464b      	mov	r3, r9
 8013122:	f7ed f889 	bl	8000238 <__aeabi_dsub>
 8013126:	460b      	mov	r3, r1
 8013128:	4602      	mov	r2, r0
 801312a:	4939      	ldr	r1, [pc, #228]	; (8013210 <__ieee754_pow+0xa40>)
 801312c:	2000      	movs	r0, #0
 801312e:	f7ed f883 	bl	8000238 <__aeabi_dsub>
 8013132:	ec41 0b10 	vmov	d0, r0, r1
 8013136:	ee10 3a90 	vmov	r3, s1
 801313a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801313e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013142:	da2b      	bge.n	801319c <__ieee754_pow+0x9cc>
 8013144:	4650      	mov	r0, sl
 8013146:	f000 f877 	bl	8013238 <scalbn>
 801314a:	ec51 0b10 	vmov	r0, r1, d0
 801314e:	ec53 2b18 	vmov	r2, r3, d8
 8013152:	f7ff bbee 	b.w	8012932 <__ieee754_pow+0x162>
 8013156:	4b2f      	ldr	r3, [pc, #188]	; (8013214 <__ieee754_pow+0xa44>)
 8013158:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801315c:	429e      	cmp	r6, r3
 801315e:	f77f af0d 	ble.w	8012f7c <__ieee754_pow+0x7ac>
 8013162:	4b2d      	ldr	r3, [pc, #180]	; (8013218 <__ieee754_pow+0xa48>)
 8013164:	440b      	add	r3, r1
 8013166:	4303      	orrs	r3, r0
 8013168:	d009      	beq.n	801317e <__ieee754_pow+0x9ae>
 801316a:	ec51 0b18 	vmov	r0, r1, d8
 801316e:	2200      	movs	r2, #0
 8013170:	2300      	movs	r3, #0
 8013172:	f7ed fc8b 	bl	8000a8c <__aeabi_dcmplt>
 8013176:	3800      	subs	r0, #0
 8013178:	bf18      	it	ne
 801317a:	2001      	movne	r0, #1
 801317c:	e448      	b.n	8012a10 <__ieee754_pow+0x240>
 801317e:	4622      	mov	r2, r4
 8013180:	462b      	mov	r3, r5
 8013182:	f7ed f859 	bl	8000238 <__aeabi_dsub>
 8013186:	4642      	mov	r2, r8
 8013188:	464b      	mov	r3, r9
 801318a:	f7ed fc93 	bl	8000ab4 <__aeabi_dcmpge>
 801318e:	2800      	cmp	r0, #0
 8013190:	f43f aef4 	beq.w	8012f7c <__ieee754_pow+0x7ac>
 8013194:	e7e9      	b.n	801316a <__ieee754_pow+0x99a>
 8013196:	f04f 0a00 	mov.w	sl, #0
 801319a:	e71a      	b.n	8012fd2 <__ieee754_pow+0x802>
 801319c:	ec51 0b10 	vmov	r0, r1, d0
 80131a0:	4619      	mov	r1, r3
 80131a2:	e7d4      	b.n	801314e <__ieee754_pow+0x97e>
 80131a4:	491a      	ldr	r1, [pc, #104]	; (8013210 <__ieee754_pow+0xa40>)
 80131a6:	2000      	movs	r0, #0
 80131a8:	f7ff bb31 	b.w	801280e <__ieee754_pow+0x3e>
 80131ac:	2000      	movs	r0, #0
 80131ae:	2100      	movs	r1, #0
 80131b0:	f7ff bb2d 	b.w	801280e <__ieee754_pow+0x3e>
 80131b4:	4630      	mov	r0, r6
 80131b6:	4639      	mov	r1, r7
 80131b8:	f7ff bb29 	b.w	801280e <__ieee754_pow+0x3e>
 80131bc:	9204      	str	r2, [sp, #16]
 80131be:	f7ff bb7b 	b.w	80128b8 <__ieee754_pow+0xe8>
 80131c2:	2300      	movs	r3, #0
 80131c4:	f7ff bb65 	b.w	8012892 <__ieee754_pow+0xc2>
 80131c8:	00000000 	.word	0x00000000
 80131cc:	3fe62e43 	.word	0x3fe62e43
 80131d0:	fefa39ef 	.word	0xfefa39ef
 80131d4:	3fe62e42 	.word	0x3fe62e42
 80131d8:	0ca86c39 	.word	0x0ca86c39
 80131dc:	be205c61 	.word	0xbe205c61
 80131e0:	72bea4d0 	.word	0x72bea4d0
 80131e4:	3e663769 	.word	0x3e663769
 80131e8:	c5d26bf1 	.word	0xc5d26bf1
 80131ec:	3ebbbd41 	.word	0x3ebbbd41
 80131f0:	af25de2c 	.word	0xaf25de2c
 80131f4:	3f11566a 	.word	0x3f11566a
 80131f8:	16bebd93 	.word	0x16bebd93
 80131fc:	3f66c16c 	.word	0x3f66c16c
 8013200:	5555553e 	.word	0x5555553e
 8013204:	3fc55555 	.word	0x3fc55555
 8013208:	3fe00000 	.word	0x3fe00000
 801320c:	fff00000 	.word	0xfff00000
 8013210:	3ff00000 	.word	0x3ff00000
 8013214:	4090cbff 	.word	0x4090cbff
 8013218:	3f6f3400 	.word	0x3f6f3400
 801321c:	652b82fe 	.word	0x652b82fe
 8013220:	3c971547 	.word	0x3c971547

08013224 <fabs>:
 8013224:	ec51 0b10 	vmov	r0, r1, d0
 8013228:	ee10 2a10 	vmov	r2, s0
 801322c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013230:	ec43 2b10 	vmov	d0, r2, r3
 8013234:	4770      	bx	lr
	...

08013238 <scalbn>:
 8013238:	b570      	push	{r4, r5, r6, lr}
 801323a:	ec55 4b10 	vmov	r4, r5, d0
 801323e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013242:	4606      	mov	r6, r0
 8013244:	462b      	mov	r3, r5
 8013246:	b999      	cbnz	r1, 8013270 <scalbn+0x38>
 8013248:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801324c:	4323      	orrs	r3, r4
 801324e:	d03f      	beq.n	80132d0 <scalbn+0x98>
 8013250:	4b35      	ldr	r3, [pc, #212]	; (8013328 <scalbn+0xf0>)
 8013252:	4629      	mov	r1, r5
 8013254:	ee10 0a10 	vmov	r0, s0
 8013258:	2200      	movs	r2, #0
 801325a:	f7ed f9a5 	bl	80005a8 <__aeabi_dmul>
 801325e:	4b33      	ldr	r3, [pc, #204]	; (801332c <scalbn+0xf4>)
 8013260:	429e      	cmp	r6, r3
 8013262:	4604      	mov	r4, r0
 8013264:	460d      	mov	r5, r1
 8013266:	da10      	bge.n	801328a <scalbn+0x52>
 8013268:	a327      	add	r3, pc, #156	; (adr r3, 8013308 <scalbn+0xd0>)
 801326a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801326e:	e01f      	b.n	80132b0 <scalbn+0x78>
 8013270:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8013274:	4291      	cmp	r1, r2
 8013276:	d10c      	bne.n	8013292 <scalbn+0x5a>
 8013278:	ee10 2a10 	vmov	r2, s0
 801327c:	4620      	mov	r0, r4
 801327e:	4629      	mov	r1, r5
 8013280:	f7ec ffdc 	bl	800023c <__adddf3>
 8013284:	4604      	mov	r4, r0
 8013286:	460d      	mov	r5, r1
 8013288:	e022      	b.n	80132d0 <scalbn+0x98>
 801328a:	460b      	mov	r3, r1
 801328c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013290:	3936      	subs	r1, #54	; 0x36
 8013292:	f24c 3250 	movw	r2, #50000	; 0xc350
 8013296:	4296      	cmp	r6, r2
 8013298:	dd0d      	ble.n	80132b6 <scalbn+0x7e>
 801329a:	2d00      	cmp	r5, #0
 801329c:	a11c      	add	r1, pc, #112	; (adr r1, 8013310 <scalbn+0xd8>)
 801329e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132a2:	da02      	bge.n	80132aa <scalbn+0x72>
 80132a4:	a11c      	add	r1, pc, #112	; (adr r1, 8013318 <scalbn+0xe0>)
 80132a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132aa:	a319      	add	r3, pc, #100	; (adr r3, 8013310 <scalbn+0xd8>)
 80132ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132b0:	f7ed f97a 	bl	80005a8 <__aeabi_dmul>
 80132b4:	e7e6      	b.n	8013284 <scalbn+0x4c>
 80132b6:	1872      	adds	r2, r6, r1
 80132b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80132bc:	428a      	cmp	r2, r1
 80132be:	dcec      	bgt.n	801329a <scalbn+0x62>
 80132c0:	2a00      	cmp	r2, #0
 80132c2:	dd08      	ble.n	80132d6 <scalbn+0x9e>
 80132c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80132c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80132cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80132d0:	ec45 4b10 	vmov	d0, r4, r5
 80132d4:	bd70      	pop	{r4, r5, r6, pc}
 80132d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80132da:	da08      	bge.n	80132ee <scalbn+0xb6>
 80132dc:	2d00      	cmp	r5, #0
 80132de:	a10a      	add	r1, pc, #40	; (adr r1, 8013308 <scalbn+0xd0>)
 80132e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132e4:	dac0      	bge.n	8013268 <scalbn+0x30>
 80132e6:	a10e      	add	r1, pc, #56	; (adr r1, 8013320 <scalbn+0xe8>)
 80132e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132ec:	e7bc      	b.n	8013268 <scalbn+0x30>
 80132ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80132f2:	3236      	adds	r2, #54	; 0x36
 80132f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80132f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80132fc:	4620      	mov	r0, r4
 80132fe:	4b0c      	ldr	r3, [pc, #48]	; (8013330 <scalbn+0xf8>)
 8013300:	2200      	movs	r2, #0
 8013302:	e7d5      	b.n	80132b0 <scalbn+0x78>
 8013304:	f3af 8000 	nop.w
 8013308:	c2f8f359 	.word	0xc2f8f359
 801330c:	01a56e1f 	.word	0x01a56e1f
 8013310:	8800759c 	.word	0x8800759c
 8013314:	7e37e43c 	.word	0x7e37e43c
 8013318:	8800759c 	.word	0x8800759c
 801331c:	fe37e43c 	.word	0xfe37e43c
 8013320:	c2f8f359 	.word	0xc2f8f359
 8013324:	81a56e1f 	.word	0x81a56e1f
 8013328:	43500000 	.word	0x43500000
 801332c:	ffff3cb0 	.word	0xffff3cb0
 8013330:	3c900000 	.word	0x3c900000

08013334 <with_errno>:
 8013334:	b570      	push	{r4, r5, r6, lr}
 8013336:	4604      	mov	r4, r0
 8013338:	460d      	mov	r5, r1
 801333a:	4616      	mov	r6, r2
 801333c:	f7fd f922 	bl	8010584 <__errno>
 8013340:	4629      	mov	r1, r5
 8013342:	6006      	str	r6, [r0, #0]
 8013344:	4620      	mov	r0, r4
 8013346:	bd70      	pop	{r4, r5, r6, pc}

08013348 <xflow>:
 8013348:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801334a:	4614      	mov	r4, r2
 801334c:	461d      	mov	r5, r3
 801334e:	b108      	cbz	r0, 8013354 <xflow+0xc>
 8013350:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013354:	e9cd 2300 	strd	r2, r3, [sp]
 8013358:	e9dd 2300 	ldrd	r2, r3, [sp]
 801335c:	4620      	mov	r0, r4
 801335e:	4629      	mov	r1, r5
 8013360:	f7ed f922 	bl	80005a8 <__aeabi_dmul>
 8013364:	2222      	movs	r2, #34	; 0x22
 8013366:	b003      	add	sp, #12
 8013368:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801336c:	f7ff bfe2 	b.w	8013334 <with_errno>

08013370 <__math_uflow>:
 8013370:	b508      	push	{r3, lr}
 8013372:	2200      	movs	r2, #0
 8013374:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013378:	f7ff ffe6 	bl	8013348 <xflow>
 801337c:	ec41 0b10 	vmov	d0, r0, r1
 8013380:	bd08      	pop	{r3, pc}

08013382 <__math_oflow>:
 8013382:	b508      	push	{r3, lr}
 8013384:	2200      	movs	r2, #0
 8013386:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801338a:	f7ff ffdd 	bl	8013348 <xflow>
 801338e:	ec41 0b10 	vmov	d0, r0, r1
 8013392:	bd08      	pop	{r3, pc}

08013394 <__ieee754_sqrt>:
 8013394:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013398:	ec55 4b10 	vmov	r4, r5, d0
 801339c:	4e67      	ldr	r6, [pc, #412]	; (801353c <__ieee754_sqrt+0x1a8>)
 801339e:	43ae      	bics	r6, r5
 80133a0:	ee10 0a10 	vmov	r0, s0
 80133a4:	ee10 2a10 	vmov	r2, s0
 80133a8:	4629      	mov	r1, r5
 80133aa:	462b      	mov	r3, r5
 80133ac:	d10d      	bne.n	80133ca <__ieee754_sqrt+0x36>
 80133ae:	f7ed f8fb 	bl	80005a8 <__aeabi_dmul>
 80133b2:	4602      	mov	r2, r0
 80133b4:	460b      	mov	r3, r1
 80133b6:	4620      	mov	r0, r4
 80133b8:	4629      	mov	r1, r5
 80133ba:	f7ec ff3f 	bl	800023c <__adddf3>
 80133be:	4604      	mov	r4, r0
 80133c0:	460d      	mov	r5, r1
 80133c2:	ec45 4b10 	vmov	d0, r4, r5
 80133c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133ca:	2d00      	cmp	r5, #0
 80133cc:	dc0b      	bgt.n	80133e6 <__ieee754_sqrt+0x52>
 80133ce:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80133d2:	4326      	orrs	r6, r4
 80133d4:	d0f5      	beq.n	80133c2 <__ieee754_sqrt+0x2e>
 80133d6:	b135      	cbz	r5, 80133e6 <__ieee754_sqrt+0x52>
 80133d8:	f7ec ff2e 	bl	8000238 <__aeabi_dsub>
 80133dc:	4602      	mov	r2, r0
 80133de:	460b      	mov	r3, r1
 80133e0:	f7ed fa0c 	bl	80007fc <__aeabi_ddiv>
 80133e4:	e7eb      	b.n	80133be <__ieee754_sqrt+0x2a>
 80133e6:	1509      	asrs	r1, r1, #20
 80133e8:	f000 808d 	beq.w	8013506 <__ieee754_sqrt+0x172>
 80133ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80133f0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80133f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80133f8:	07c9      	lsls	r1, r1, #31
 80133fa:	bf5c      	itt	pl
 80133fc:	005b      	lslpl	r3, r3, #1
 80133fe:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8013402:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013406:	bf58      	it	pl
 8013408:	0052      	lslpl	r2, r2, #1
 801340a:	2500      	movs	r5, #0
 801340c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8013410:	1076      	asrs	r6, r6, #1
 8013412:	0052      	lsls	r2, r2, #1
 8013414:	f04f 0e16 	mov.w	lr, #22
 8013418:	46ac      	mov	ip, r5
 801341a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801341e:	eb0c 0001 	add.w	r0, ip, r1
 8013422:	4298      	cmp	r0, r3
 8013424:	bfde      	ittt	le
 8013426:	1a1b      	suble	r3, r3, r0
 8013428:	eb00 0c01 	addle.w	ip, r0, r1
 801342c:	186d      	addle	r5, r5, r1
 801342e:	005b      	lsls	r3, r3, #1
 8013430:	f1be 0e01 	subs.w	lr, lr, #1
 8013434:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8013438:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801343c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8013440:	d1ed      	bne.n	801341e <__ieee754_sqrt+0x8a>
 8013442:	4674      	mov	r4, lr
 8013444:	2720      	movs	r7, #32
 8013446:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801344a:	4563      	cmp	r3, ip
 801344c:	eb01 000e 	add.w	r0, r1, lr
 8013450:	dc02      	bgt.n	8013458 <__ieee754_sqrt+0xc4>
 8013452:	d113      	bne.n	801347c <__ieee754_sqrt+0xe8>
 8013454:	4290      	cmp	r0, r2
 8013456:	d811      	bhi.n	801347c <__ieee754_sqrt+0xe8>
 8013458:	2800      	cmp	r0, #0
 801345a:	eb00 0e01 	add.w	lr, r0, r1
 801345e:	da57      	bge.n	8013510 <__ieee754_sqrt+0x17c>
 8013460:	f1be 0f00 	cmp.w	lr, #0
 8013464:	db54      	blt.n	8013510 <__ieee754_sqrt+0x17c>
 8013466:	f10c 0801 	add.w	r8, ip, #1
 801346a:	eba3 030c 	sub.w	r3, r3, ip
 801346e:	4290      	cmp	r0, r2
 8013470:	bf88      	it	hi
 8013472:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8013476:	1a12      	subs	r2, r2, r0
 8013478:	440c      	add	r4, r1
 801347a:	46c4      	mov	ip, r8
 801347c:	005b      	lsls	r3, r3, #1
 801347e:	3f01      	subs	r7, #1
 8013480:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8013484:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8013488:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801348c:	d1dd      	bne.n	801344a <__ieee754_sqrt+0xb6>
 801348e:	4313      	orrs	r3, r2
 8013490:	d01b      	beq.n	80134ca <__ieee754_sqrt+0x136>
 8013492:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8013540 <__ieee754_sqrt+0x1ac>
 8013496:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8013544 <__ieee754_sqrt+0x1b0>
 801349a:	e9da 0100 	ldrd	r0, r1, [sl]
 801349e:	e9db 2300 	ldrd	r2, r3, [fp]
 80134a2:	f7ec fec9 	bl	8000238 <__aeabi_dsub>
 80134a6:	e9da 8900 	ldrd	r8, r9, [sl]
 80134aa:	4602      	mov	r2, r0
 80134ac:	460b      	mov	r3, r1
 80134ae:	4640      	mov	r0, r8
 80134b0:	4649      	mov	r1, r9
 80134b2:	f7ed faf5 	bl	8000aa0 <__aeabi_dcmple>
 80134b6:	b140      	cbz	r0, 80134ca <__ieee754_sqrt+0x136>
 80134b8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80134bc:	e9da 0100 	ldrd	r0, r1, [sl]
 80134c0:	e9db 2300 	ldrd	r2, r3, [fp]
 80134c4:	d126      	bne.n	8013514 <__ieee754_sqrt+0x180>
 80134c6:	3501      	adds	r5, #1
 80134c8:	463c      	mov	r4, r7
 80134ca:	106a      	asrs	r2, r5, #1
 80134cc:	0863      	lsrs	r3, r4, #1
 80134ce:	07e9      	lsls	r1, r5, #31
 80134d0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80134d4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80134d8:	bf48      	it	mi
 80134da:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80134de:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80134e2:	461c      	mov	r4, r3
 80134e4:	e76d      	b.n	80133c2 <__ieee754_sqrt+0x2e>
 80134e6:	0ad3      	lsrs	r3, r2, #11
 80134e8:	3815      	subs	r0, #21
 80134ea:	0552      	lsls	r2, r2, #21
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d0fa      	beq.n	80134e6 <__ieee754_sqrt+0x152>
 80134f0:	02dc      	lsls	r4, r3, #11
 80134f2:	d50a      	bpl.n	801350a <__ieee754_sqrt+0x176>
 80134f4:	f1c1 0420 	rsb	r4, r1, #32
 80134f8:	fa22 f404 	lsr.w	r4, r2, r4
 80134fc:	1e4d      	subs	r5, r1, #1
 80134fe:	408a      	lsls	r2, r1
 8013500:	4323      	orrs	r3, r4
 8013502:	1b41      	subs	r1, r0, r5
 8013504:	e772      	b.n	80133ec <__ieee754_sqrt+0x58>
 8013506:	4608      	mov	r0, r1
 8013508:	e7f0      	b.n	80134ec <__ieee754_sqrt+0x158>
 801350a:	005b      	lsls	r3, r3, #1
 801350c:	3101      	adds	r1, #1
 801350e:	e7ef      	b.n	80134f0 <__ieee754_sqrt+0x15c>
 8013510:	46e0      	mov	r8, ip
 8013512:	e7aa      	b.n	801346a <__ieee754_sqrt+0xd6>
 8013514:	f7ec fe92 	bl	800023c <__adddf3>
 8013518:	e9da 8900 	ldrd	r8, r9, [sl]
 801351c:	4602      	mov	r2, r0
 801351e:	460b      	mov	r3, r1
 8013520:	4640      	mov	r0, r8
 8013522:	4649      	mov	r1, r9
 8013524:	f7ed fab2 	bl	8000a8c <__aeabi_dcmplt>
 8013528:	b120      	cbz	r0, 8013534 <__ieee754_sqrt+0x1a0>
 801352a:	1ca0      	adds	r0, r4, #2
 801352c:	bf08      	it	eq
 801352e:	3501      	addeq	r5, #1
 8013530:	3402      	adds	r4, #2
 8013532:	e7ca      	b.n	80134ca <__ieee754_sqrt+0x136>
 8013534:	3401      	adds	r4, #1
 8013536:	f024 0401 	bic.w	r4, r4, #1
 801353a:	e7c6      	b.n	80134ca <__ieee754_sqrt+0x136>
 801353c:	7ff00000 	.word	0x7ff00000
 8013540:	20000340 	.word	0x20000340
 8013544:	20000348 	.word	0x20000348

08013548 <_init>:
 8013548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801354a:	bf00      	nop
 801354c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801354e:	bc08      	pop	{r3}
 8013550:	469e      	mov	lr, r3
 8013552:	4770      	bx	lr

08013554 <_fini>:
 8013554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013556:	bf00      	nop
 8013558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801355a:	bc08      	pop	{r3}
 801355c:	469e      	mov	lr, r3
 801355e:	4770      	bx	lr
